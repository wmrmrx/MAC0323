#include\ \"[^a]([a-z] | [_\.])*.*
100000
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef __SMU_INTERNAL_H__
#define __SMU_INTERNAL_H__

#include "amdgpu_smu.h"

#if defined(SWSMU_CODE_LAYER_L1)

#define smu_ppt_funcs(intf, ret, smu, args...) \
	((smu)->ppt_funcs ? ((smu)->ppt_funcs->intf ? (smu)->ppt_funcs->intf(smu, ##args) : ret) : -EINVAL)

#define smu_init_microcode(smu)						smu_ppt_funcs(init_microcode, 0, smu)
#define smu_fini_microcode(smu)						smu_ppt_funcs(fini_microcode, 0, smu)
#define smu_init_smc_tables(smu)					smu_ppt_funcs(init_smc_tables, 0, smu)
#define smu_fini_smc_tables(smu)					smu_ppt_funcs(fini_smc_tables, 0, smu)
#define smu_init_power(smu)						smu_ppt_funcs(init_power,	0, smu)
#define smu_fini_power(smu)						smu_ppt_funcs(fini_power, 0, smu)
#define smu_setup_pptable(smu)						smu_ppt_funcs(setup_pptable, 0, smu)
#define smu_powergate_sdma(smu, gate)					smu_ppt_funcs(powergate_sdma, 0, smu, gate)
#define smu_get_vbios_bootup_values(smu)				smu_ppt_funcs(get_vbios_bootup_values, 0, smu)
#define smu_check_fw_version(smu)					smu_ppt_funcs(check_fw_version, 0, smu)
#define smu_write_pptable(smu)						smu_ppt_funcs(write_pptable, 0, smu)
#define smu_set_min_dcef_deep_sleep(smu, clk)				smu_ppt_funcs(set_min_dcef_deep_sleep, 0, smu, clk)
#define smu_set_driver_table_location(smu)				smu_ppt_funcs(set_driver_table_location, 0, smu)
#define smu_set_tool_table_location(smu)				smu_ppt_funcs(set_tool_table_location, 0, smu)
#define smu_notify_memory_pool_location(smu)				smu_ppt_funcs(notify_memory_pool_location, 0, smu)
#define smu_gfx_off_control(smu, enable)				smu_ppt_funcs(gfx_off_control, 0, smu, enable)
#define smu_get_gfx_off_status(smu)						smu_ppt_funcs(get_gfx_off_status, 0, smu)
#define smu_set_last_dcef_min_deep_sleep_clk(smu)			smu_ppt_funcs(set_last_dcef_min_deep_sleep_clk, 0, smu)
#define smu_system_features_control(smu, en)				smu_ppt_funcs(system_features_control, 0, smu, en)
#define smu_init_max_sustainable_clocks(smu)				smu_ppt_funcs(init_max_sustainable_clocks, 0, smu)
#define smu_set_default_od_settings(smu)				smu_ppt_funcs(set_default_od_settings, 0, smu)
#define smu_send_smc_msg_with_param(smu, msg, param, read_arg)		smu_ppt_funcs(send_smc_msg_with_param, 0, smu, msg, param, read_arg)
#define smu_send_smc_msg(smu, msg, read_arg)				smu_ppt_funcs(send_smc_msg, 0, smu, msg, read_arg)
#define smu_init_display_count(smu, count)				smu_ppt_funcs(init_display_count, 0, smu, count)
#define smu_feature_set_allowed_mask(smu)				smu_ppt_funcs(set_allowed_mask, 0, smu)
#define smu_feature_get_enabled_mask(smu, mask)				smu_ppt_funcs(get_enabled_mask, -EOPNOTSUPP, smu, mask)
#define smu_feature_is_enabled(smu, mask)				smu_ppt_funcs(feature_is_enabled, 0, smu, mask)
#define smu_disable_all_features_with_exception(smu, mask)		smu_ppt_funcs(disable_all_features_with_exception, 0, smu, mask)
#define smu_is_dpm_running(smu)						smu_ppt_funcs(is_dpm_running, 0 , smu)
#define smu_notify_display_change(smu)					smu_ppt_funcs(notify_display_change, 0, smu)
#define smu_populate_umd_state_clk(smu)					smu_ppt_funcs(populate_umd_state_clk, 0, smu)
#define smu_enable_thermal_alert(smu)					smu_ppt_funcs(enable_thermal_alert, 0, smu)
#define smu_disable_thermal_alert(smu)					smu_ppt_funcs(disable_thermal_alert, 0, smu)
#define smu_smc_read_sensor(smu, sensor, data, size)			smu_ppt_funcs(read_sensor, -EINVAL, smu, sensor, data, size)
#define smu_pre_display_config_changed(smu)				smu_ppt_funcs(pre_display_config_changed, 0, smu)
#define smu_display_config_changed(smu)					smu_ppt_funcs(display_config_changed, 0 , smu)
#define smu_apply_clocks_adjust_rules(smu)				smu_ppt_funcs(apply_clocks_adjust_rules, 0, smu)
#define smu_notify_smc_display_config(smu)				smu_ppt_funcs(notify_smc_display_config, 0, smu)
#define smu_run_btc(smu)						smu_ppt_funcs(run_btc, 0, smu)
#define smu_get_allowed_feature_mask(smu, feature_mask, num)		smu_ppt_funcs(get_allowed_feature_mask, 0, smu, feature_mask, num)
#define smu_set_watermarks_table(smu, clock_ranges)			smu_ppt_funcs(set_watermarks_table, 0, smu, clock_ranges)
#define smu_thermal_temperature_range_update(smu, range, rw)		smu_ppt_funcs(thermal_temperature_range_update, 0, smu, range, rw)
#define smu_register_irq_handler(smu)					smu_ppt_funcs(register_irq_handler, 0, smu)
#define smu_get_dpm_ultimate_freq(smu, param, min, max)			smu_ppt_funcs(get_dpm_ultimate_freq, 0, smu, param, min, max)
#define smu_asic_set_performance_level(smu, level)			smu_ppt_funcs(set_performance_level, -EINVAL, smu, level)
#define smu_dump_pptable(smu)						smu_ppt_funcs(dump_pptable, 0, smu)
#define smu_update_pcie_parameters(smu, pcie_gen_cap, pcie_width_cap)	smu_ppt_funcs(update_pcie_parameters, 0, smu, pcie_gen_cap, pcie_width_cap)
#define smu_set_power_source(smu, power_src)				smu_ppt_funcs(set_power_source, 0, smu, power_src)
#define smu_i2c_init(smu)                                               smu_ppt_funcs(i2c_init, 0, smu)
#define smu_i2c_fini(smu)                                               smu_ppt_funcs(i2c_fini, 0, smu)
#define smu_get_unique_id(smu)						smu_ppt_funcs(get_unique_id, 0, smu)
#define smu_log_thermal_throttling(smu)					smu_ppt_funcs(log_thermal_throttling_event, 0, smu)
#define smu_get_asic_power_limits(smu, current, default, max)		smu_ppt_funcs(get_power_limit, 0, smu, current, default, max)
#define smu_get_pp_feature_mask(smu, buf)				smu_ppt_funcs(get_pp_feature_mask, 0, smu, buf)
#define smu_set_pp_feature_mask(smu, new_mask)				smu_ppt_funcs(set_pp_feature_mask, 0, smu, new_mask)
#define smu_gfx_ulv_control(smu, enablement)				smu_ppt_funcs(gfx_ulv_control, 0, smu, enablement)
#define smu_deep_sleep_control(smu, enablement)				smu_ppt_funcs(deep_sleep_control, 0, smu, enablement)
#define smu_get_fan_parameters(smu)					smu_ppt_funcs(get_fan_parameters, 0, smu)
#define smu_post_init(smu)						smu_ppt_funcs(post_init, 0, smu)
#define smu_gpo_control(smu, enablement)				smu_ppt_funcs(gpo_control, 0, smu, enablement)
#define smu_set_fine_grain_gfx_freq_parameters(smu)					smu_ppt_funcs(set_fine_grain_gfx_freq_parameters, 0, smu)
#define smu_get_default_config_table_settings(smu, config_table)	smu_ppt_funcs(get_default_config_table_settings, -EOPNOTSUPP, smu, config_table)
#define smu_set_config_table(smu, config_table)				smu_ppt_funcs(set_config_table, -EOPNOTSUPP, smu, config_table)
#define smu_init_pptable_microcode(smu)					smu_ppt_funcs(init_pptable_microcode, 0, smu)

#endif
#endif
/*
 * Copyright 2020 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef __SMU_CMN_H__
#define __SMU_CMN_H__

#include "amdgpu_smu.h"

#if defined(SWSMU_CODE_LAYER_L2) || defined(SWSMU_CODE_LAYER_L3) || defined(SWSMU_CODE_LAYER_L4)

#define FDO_PWM_MODE_STATIC  1
#define FDO_PWM_MODE_STATIC_RPM 5

int smu_cmn_send_msg_without_waiting(struct smu_context *smu,
				     uint16_t msg_index,
				     uint32_t param);
int smu_cmn_send_smc_msg_with_param(struct smu_context *smu,
				    enum smu_message_type msg,
				    uint32_t param,
				    uint32_t *read_arg);

int smu_cmn_send_smc_msg(struct smu_context *smu,
			 enum smu_message_type msg,
			 uint32_t *read_arg);

int smu_cmn_wait_for_response(struct smu_context *smu);

int smu_cmn_to_asic_specific_index(struct smu_context *smu,
				   enum smu_cmn2asic_mapping_type type,
				   uint32_t index);

int smu_cmn_feature_is_supported(struct smu_context *smu,
				 enum smu_feature_mask mask);

int smu_cmn_feature_is_enabled(struct smu_context *smu,
			       enum smu_feature_mask mask);

bool smu_cmn_clk_dpm_is_enabled(struct smu_context *smu,
				enum smu_clk_type clk_type);

int smu_cmn_get_enabled_mask(struct smu_context *smu,
			     uint64_t *feature_mask);

uint64_t smu_cmn_get_indep_throttler_status(
					const unsigned long dep_status,
					const uint8_t *throttler_map);

int smu_cmn_feature_update_enable_state(struct smu_context *smu,
					uint64_t feature_mask,
					bool enabled);

int smu_cmn_feature_set_enabled(struct smu_context *smu,
				enum smu_feature_mask mask,
				bool enable);

size_t smu_cmn_get_pp_feature_mask(struct smu_context *smu,
				   char *buf);

int smu_cmn_set_pp_feature_mask(struct smu_context *smu,
				uint64_t new_mask);

int smu_cmn_disable_all_features_with_exception(struct smu_context *smu,
						enum smu_feature_mask mask);

int smu_cmn_get_smc_version(struct smu_context *smu,
			    uint32_t *if_version,
			    uint32_t *smu_version);

int smu_cmn_update_table(struct smu_context *smu,
			 enum smu_table_id table_index,
			 int argument,
			 void *table_data,
			 bool drv2smu);

int smu_cmn_write_watermarks_table(struct smu_context *smu);

int smu_cmn_write_pptable(struct smu_context *smu);

int smu_cmn_get_metrics_table(struct smu_context *smu,
			      void *metrics_table,
			      bool bypass_cache);

int smu_cmn_get_combo_pptable(struct smu_context *smu);

void smu_cmn_init_soft_gpu_metrics(void *table, uint8_t frev, uint8_t crev);

int smu_cmn_set_mp1_state(struct smu_context *smu,
			  enum pp_mp1_state mp1_state);

/*
 * Helper function to make sysfs_emit_at() happy. Align buf to
 * the current page boundary and record the offset.
 */
static inline void smu_cmn_get_sysfs_buf(char **buf, int *offset)
{
	if (!*buf || !offset)
		return;

	*offset = offset_in_page(*buf);
	*buf -= *offset;
}

bool smu_cmn_is_audio_func_enabled(struct amdgpu_device *adev);

#endif
#endif
/*
 * Copyright 2020 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __YELLOW_CARP_PPT_H__
#define __YELLOW_CARP_PPT_H__

extern void yellow_carp_set_ppt_funcs(struct smu_context *smu);
#define YELLOW_CARP_UMD_PSTATE_GFXCLK       1100

#endif
/*
 * Copyright 2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __SMU_V13_0_7_PPT_H__
#define __SMU_V13_0_7_PPT_H__

extern void smu_v13_0_7_set_ppt_funcs(struct smu_context *smu);

#endif
/*
 * Copyright 2020 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __SMU_V13_0_5_PPT_H__
#define __SMU_V13_0_5_PPT_H__

extern void smu_v13_0_5_set_ppt_funcs(struct smu_context *smu);
#define SMU_13_0_5_UMD_PSTATE_GFXCLK   1100

#endif
/*
 * Copyright 2022 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __SMU_V13_0_4_PPT_H__
#define __SMU_V13_0_4_PPT_H__

extern void smu_v13_0_4_set_ppt_funcs(struct smu_context *smu);

#endif
/*
 * Copyright 2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __SMU_V13_0_0_PPT_H__
#define __SMU_V13_0_0_PPT_H__

extern void smu_v13_0_0_set_ppt_funcs(struct smu_context *smu);

#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __ALDEBARAN_PPT_H__
#define __ALDEBARAN_PPT_H__

#define ALDEBARAN_UMD_PSTATE_GFXCLK_LEVEL         0x3
#define ALDEBARAN_UMD_PSTATE_SOCCLK_LEVEL         0x3
#define ALDEBARAN_UMD_PSTATE_MCLK_LEVEL           0x2

#define MAX_DPM_NUMBER 16
#define ALDEBARAN_MAX_PCIE_CONF 2

struct aldebaran_dpm_level {
	bool            enabled;
	uint32_t        value;
	uint32_t        param1;
};

struct aldebaran_dpm_state {
	uint32_t  soft_min_level;
	uint32_t  soft_max_level;
	uint32_t  hard_min_level;
	uint32_t  hard_max_level;
};

struct aldebaran_single_dpm_table {
	uint32_t                count;
	struct aldebaran_dpm_state dpm_state;
	struct aldebaran_dpm_level dpm_levels[MAX_DPM_NUMBER];
};

struct aldebaran_pcie_table {
	uint16_t count;
	uint8_t  pcie_gen[ALDEBARAN_MAX_PCIE_CONF];
	uint8_t  pcie_lane[ALDEBARAN_MAX_PCIE_CONF];
	uint32_t lclk[ALDEBARAN_MAX_PCIE_CONF];
};

struct aldebaran_dpm_table {
	struct aldebaran_single_dpm_table  soc_table;
	struct aldebaran_single_dpm_table  gfx_table;
	struct aldebaran_single_dpm_table  mem_table;
	struct aldebaran_single_dpm_table  eclk_table;
	struct aldebaran_single_dpm_table  vclk_table;
	struct aldebaran_single_dpm_table  dclk_table;
	struct aldebaran_single_dpm_table  fclk_table;
	struct aldebaran_pcie_table        pcie_table;
};

extern void aldebaran_set_ppt_funcs(struct smu_context *smu);

#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __RENOIR_PPT_H__
#define __RENOIR_PPT_H__

extern void renoir_set_ppt_funcs(struct smu_context *smu);

/* UMD PState Renoir Msg Parameters in MHz */
#define RENOIR_UMD_PSTATE_GFXCLK       700
#define RENOIR_UMD_PSTATE_SOCCLK       678
#define RENOIR_UMD_PSTATE_FCLK         800
#define RENOIR_UMD_PSTATE_VCNCLK       0x022D01D8

#endif
/*
 * Copyright 2020 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __VANGOGH_PPT_H__
#define __VANGOGH_PPT_H__


extern void vangogh_set_ppt_funcs(struct smu_context *smu);

/* UMD PState Vangogh Msg Parameters in MHz */
#define VANGOGH_UMD_PSTATE_STANDARD_GFXCLK       1100
#define VANGOGH_UMD_PSTATE_STANDARD_SOCCLK       600
#define VANGOGH_UMD_PSTATE_STANDARD_FCLK         800
#define VANGOGH_UMD_PSTATE_STANDARD_VCLK         705
#define VANGOGH_UMD_PSTATE_STANDARD_DCLK         600

#define VANGOGH_UMD_PSTATE_PEAK_GFXCLK       1300
#define VANGOGH_UMD_PSTATE_PEAK_SOCCLK       600
#define VANGOGH_UMD_PSTATE_PEAK_FCLK         800
#define VANGOGH_UMD_PSTATE_PEAK_VCLK         705
#define VANGOGH_UMD_PSTATE_PEAK_DCLK         600

#define VANGOGH_UMD_PSTATE_MIN_SCLK_GFXCLK       400
#define VANGOGH_UMD_PSTATE_MIN_SCLK_SOCCLK       1000
#define VANGOGH_UMD_PSTATE_MIN_SCLK_FCLK         800
#define VANGOGH_UMD_PSTATE_MIN_SCLK_VCLK         1000
#define VANGOGH_UMD_PSTATE_MIN_SCLK_DCLK         800

#define VANGOGH_UMD_PSTATE_MIN_MCLK_GFXCLK       1100
#define VANGOGH_UMD_PSTATE_MIN_MCLK_SOCCLK       1000
#define VANGOGH_UMD_PSTATE_MIN_MCLK_FCLK         400
#define VANGOGH_UMD_PSTATE_MIN_MCLK_VCLK         1000
#define VANGOGH_UMD_PSTATE_MIN_MCLK_DCLK         800

/* RLC Power Status */
#define RLC_STATUS_OFF          0
#define RLC_STATUS_NORMAL       1

#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __SIENNA_CICHLID_PPT_H__
#define __SIENNA_CICHLID_PPT_H__

typedef enum {
  POWER_SOURCE_AC,
  POWER_SOURCE_DC,
  POWER_SOURCE_COUNT,
} POWER_SOURCE_e;

#define SIENNA_CICHLID_UMD_PSTATE_PROFILING_GFXCLK    1825
#define SIENNA_CICHLID_UMD_PSTATE_PROFILING_SOCCLK    960
#define SIENNA_CICHLID_UMD_PSTATE_PROFILING_MEMCLK    1000

#define DIMGREY_CAVEFISH_UMD_PSTATE_PROFILING_GFXCLK 1950
#define DIMGREY_CAVEFISH_UMD_PSTATE_PROFILING_SOCCLK 960
#define DIMGREY_CAVEFISH_UMD_PSTATE_PROFILING_MEMCLK 676

#define BEIGE_GOBY_UMD_PSTATE_PROFILING_GFXCLK 2200
#define BEIGE_GOBY_UMD_PSTATE_PROFILING_SOCCLK 960
#define BEIGE_GOBY_UMD_PSTATE_PROFILING_MEMCLK 1000

extern void sienna_cichlid_set_ppt_funcs(struct smu_context *smu);

#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __NAVI10_PPT_H__
#define __NAVI10_PPT_H__

#define NAVI10_PEAK_SCLK_XTX		(1830)
#define NAVI10_PEAK_SCLK_XT  		(1755)
#define NAVI10_PEAK_SCLK_XL  		(1625)

#define NAVI10_UMD_PSTATE_PROFILING_GFXCLK    (1300)
#define NAVI10_UMD_PSTATE_PROFILING_SOCCLK    (980)
#define NAVI10_UMD_PSTATE_PROFILING_MEMCLK    (625)
#define NAVI10_UMD_PSTATE_PROFILING_VCLK      (980)
#define NAVI10_UMD_PSTATE_PROFILING_DCLK      (850)

#define NAVI14_UMD_PSTATE_PEAK_XT_GFXCLK      (1670)
#define NAVI14_UMD_PSTATE_PEAK_XTM_GFXCLK     (1448)
#define NAVI14_UMD_PSTATE_PEAK_XLM_GFXCLK     (1181)
#define NAVI14_UMD_PSTATE_PEAK_XTX_GFXCLK     (1717)
#define NAVI14_UMD_PSTATE_PEAK_XL_GFXCLK      (1448)

#define NAVI14_UMD_PSTATE_PROFILING_GFXCLK    (1200)
#define NAVI14_UMD_PSTATE_PROFILING_SOCCLK    (900)
#define NAVI14_UMD_PSTATE_PROFILING_MEMCLK    (600)
#define NAVI14_UMD_PSTATE_PROFILING_VCLK      (900)
#define NAVI14_UMD_PSTATE_PROFILING_DCLK      (800)

#define NAVI12_UMD_PSTATE_PEAK_GFXCLK     (1100)

#define NAVI10_VOLTAGE_SCALE (4)

extern void navi10_set_ppt_funcs(struct smu_context *smu);

#endif
/*
 * Copyright 2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __CYAN_SKILLFISH_PPT_H__
#define __CYAN_SKILLFISH_PPT_H__

extern void cyan_skillfish_set_ppt_funcs(struct smu_context *smu);

#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __ARCTURUS_PPT_H__
#define __ARCTURUS_PPT_H__

#define ARCTURUS_UMD_PSTATE_GFXCLK_LEVEL         0x3
#define ARCTURUS_UMD_PSTATE_SOCCLK_LEVEL         0x3
#define ARCTURUS_UMD_PSTATE_MCLK_LEVEL           0x2

#define MAX_DPM_NUMBER 16
#define MAX_PCIE_CONF 2

struct arcturus_dpm_level {
        bool            enabled;
        uint32_t        value;
        uint32_t        param1;
};

struct arcturus_dpm_state {
        uint32_t  soft_min_level;
        uint32_t  soft_max_level;
        uint32_t  hard_min_level;
        uint32_t  hard_max_level;
};

struct arcturus_single_dpm_table {
        uint32_t                count;
        struct arcturus_dpm_state dpm_state;
        struct arcturus_dpm_level dpm_levels[MAX_DPM_NUMBER];
};

struct arcturus_pcie_table {
        uint16_t count;
        uint8_t  pcie_gen[MAX_PCIE_CONF];
        uint8_t  pcie_lane[MAX_PCIE_CONF];
        uint32_t lclk[MAX_PCIE_CONF];
};

struct arcturus_dpm_table {
        struct arcturus_single_dpm_table  soc_table;
        struct arcturus_single_dpm_table  gfx_table;
        struct arcturus_single_dpm_table  mem_table;
        struct arcturus_single_dpm_table  eclk_table;
        struct arcturus_single_dpm_table  vclk_table;
        struct arcturus_single_dpm_table  dclk_table;
        struct arcturus_single_dpm_table  fclk_table;
        struct arcturus_pcie_table        pcie_table;
};

extern void arcturus_set_ppt_funcs(struct smu_context *smu);

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _VEGAM_SMUMANAGER_H
#define _VEGAM_SMUMANAGER_H


#include <pp_endian.h>
#include "smu75_discrete.h"
#include "smu7_smumgr.h"

#define SMC_RAM_END 0x40000

#define DPMTuning_Uphyst_Shift    0
#define DPMTuning_Downhyst_Shift  8
#define DPMTuning_Activity_Shift  16

#define GraphicsDPMTuning_VEGAM    0x001e6400
#define MemoryDPMTuning_VEGAM      0x000f3c0a
#define SclkDPMTuning_VEGAM        0x002d000a
#define MclkDPMTuning_VEGAM        0x001f100a


struct vegam_pt_defaults {
	uint8_t   SviLoadLineEn;
	uint8_t   SviLoadLineVddC;
	uint8_t   TDC_VDDC_ThrottleReleaseLimitPerc;
	uint8_t   TDC_MAWt;
	uint8_t   TdcWaterfallCtl;
	uint8_t   DTEAmbientTempBase;

	uint32_t  DisplayCac;
	uint32_t  BAPM_TEMP_GRADIENT;
	uint16_t  BAPMTI_R[SMU75_DTE_ITERATIONS * SMU75_DTE_SOURCES * SMU75_DTE_SINKS];
	uint16_t  BAPMTI_RC[SMU75_DTE_ITERATIONS * SMU75_DTE_SOURCES * SMU75_DTE_SINKS];
};

struct vegam_range_table {
	uint32_t trans_lower_frequency; /* in 10khz */
	uint32_t trans_upper_frequency;
};

struct vegam_smumgr {
	struct smu7_smumgr smu7_data;
	uint8_t protected_mode;
	SMU75_Discrete_DpmTable              smc_state_table;
	struct SMU75_Discrete_Ulv            ulv_setting;
	struct SMU75_Discrete_PmFuses  power_tune_table;
	struct vegam_range_table                range_table[NUM_SCLK_RANGE];
	const struct vegam_pt_defaults       *power_tune_defaults;
	uint32_t               bif_sclk_table[SMU75_MAX_LEVELS_LINK];
};


#endif
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _VEGA20_SMUMANAGER_H_
#define _VEGA20_SMUMANAGER_H_

#include "hwmgr.h"
#include "smu11_driver_if.h"

struct smu_table_entry {
	uint32_t version;
	uint32_t size;
	uint64_t mc_addr;
	void *table;
	struct amdgpu_bo *handle;
};

struct smu_table_array {
	struct smu_table_entry entry[TABLE_COUNT];
};

struct vega20_smumgr {
	struct smu_table_array            smu_tables;
};

#define SMU_FEATURES_LOW_MASK        0x00000000FFFFFFFF
#define SMU_FEATURES_LOW_SHIFT       0
#define SMU_FEATURES_HIGH_MASK       0xFFFFFFFF00000000
#define SMU_FEATURES_HIGH_SHIFT      32

int vega20_enable_smc_features(struct pp_hwmgr *hwmgr,
		bool enable, uint64_t feature_mask);
int vega20_get_enabled_smc_features(struct pp_hwmgr *hwmgr,
		uint64_t *features_enabled);
int vega20_set_activity_monitor_coeff(struct pp_hwmgr *hwmgr,
		uint8_t *table, uint16_t workload_type);
int vega20_get_activity_monitor_coeff(struct pp_hwmgr *hwmgr,
		uint8_t *table, uint16_t workload_type);
int vega20_set_pptable_driver_address(struct pp_hwmgr *hwmgr);

bool vega20_is_smc_ram_running(struct pp_hwmgr *hwmgr);

#endif

/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _VEGA12_SMUMANAGER_H_
#define _VEGA12_SMUMANAGER_H_

#include "hwmgr.h"
#include "vega12/smu9_driver_if.h"
#include "vega12_hwmgr.h"

struct smu_table_entry {
	uint32_t version;
	uint32_t size;
	uint64_t mc_addr;
	void *table;
	struct amdgpu_bo *handle;
};

struct smu_table_array {
	struct smu_table_entry entry[TABLE_COUNT];
};

struct vega12_smumgr {
	struct smu_table_array            smu_tables;
};

#define SMU_FEATURES_LOW_MASK        0x00000000FFFFFFFF
#define SMU_FEATURES_LOW_SHIFT       0
#define SMU_FEATURES_HIGH_MASK       0xFFFFFFFF00000000
#define SMU_FEATURES_HIGH_SHIFT      32

int vega12_enable_smc_features(struct pp_hwmgr *hwmgr,
		bool enable, uint64_t feature_mask);
int vega12_get_enabled_smc_features(struct pp_hwmgr *hwmgr,
		uint64_t *features_enabled);

#endif

/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _VEGA10_SMUMANAGER_H_
#define _VEGA10_SMUMANAGER_H_

#define MAX_SMU_TABLE 5

struct smu_table_entry {
	uint32_t version;
	uint32_t size;
	uint32_t table_id;
	uint64_t mc_addr;
	void *table;
	struct amdgpu_bo *handle;
};

struct smu_table_array {
	struct smu_table_entry entry[MAX_SMU_TABLE];
};

struct vega10_smumgr {
	struct smu_table_array            smu_tables;
};

int vega10_enable_smc_features(struct pp_hwmgr *hwmgr,
			       bool enable, uint32_t feature_mask);
int vega10_get_enabled_smc_features(struct pp_hwmgr *hwmgr,
				    uint64_t *features_enabled);

#endif

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _TONGA_SMUMGR_H_
#define _TONGA_SMUMGR_H_

#include "smu72_discrete.h"
#include "smu7_smumgr.h"
#include "smu72.h"


#define ASICID_IS_TONGA_P(wDID, bRID)	 \
	(((wDID == 0x6930) && ((bRID == 0xF0) || (bRID == 0xF1) || (bRID == 0xFF))) \
	|| ((wDID == 0x6920) && ((bRID == 0) || (bRID == 1))))

struct tonga_pt_defaults {
	uint8_t   svi_load_line_en;
	uint8_t   svi_load_line_vddC;
	uint8_t   tdc_vddc_throttle_release_limit_perc;
	uint8_t   tdc_mawt;
	uint8_t   tdc_waterfall_ctl;
	uint8_t   dte_ambient_temp_base;
	uint32_t  display_cac;
	uint32_t  bapm_temp_gradient;
	uint16_t  bapmti_r[SMU72_DTE_ITERATIONS * SMU72_DTE_SOURCES * SMU72_DTE_SINKS];
	uint16_t  bapmti_rc[SMU72_DTE_ITERATIONS * SMU72_DTE_SOURCES * SMU72_DTE_SINKS];
};

struct tonga_mc_reg_entry {
	uint32_t mclk_max;
	uint32_t mc_data[SMU72_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};

struct tonga_mc_reg_table {
	uint8_t   last;               /* number of registers*/
	uint8_t   num_entries;        /* number of entries in mc_reg_table_entry used*/
	uint16_t  validflag;          /* indicate the corresponding register is valid or not. 1: valid, 0: invalid. bit0->address[0], bit1->address[1], etc.*/
	struct tonga_mc_reg_entry    mc_reg_table_entry[MAX_AC_TIMING_ENTRIES];
	SMU72_Discrete_MCRegisterAddress mc_reg_address[SMU72_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};


struct tonga_smumgr {

	struct smu7_smumgr                   smu7_data;
	struct SMU72_Discrete_DpmTable       smc_state_table;
	struct SMU72_Discrete_Ulv            ulv_setting;
	struct SMU72_Discrete_PmFuses  power_tune_table;
	const struct tonga_pt_defaults  *power_tune_defaults;
	SMU72_Discrete_MCRegisters      mc_regs;
	struct tonga_mc_reg_table mc_reg_table;
};

#endif
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _SMU9_SMUMANAGER_H_
#define _SMU9_SMUMANAGER_H_

bool smu9_is_smc_ram_running(struct pp_hwmgr *hwmgr);
int smu9_send_msg_to_smc(struct pp_hwmgr *hwmgr, uint16_t msg);
int smu9_send_msg_to_smc_with_parameter(struct pp_hwmgr *hwmgr,
					uint16_t msg, uint32_t parameter);
uint32_t smu9_get_argument(struct pp_hwmgr *hwmgr);

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _SMU8_SMUMGR_H_
#define _SMU8_SMUMGR_H_


#define MAX_NUM_FIRMWARE                        8
#define MAX_NUM_SCRATCH                         11
#define SMU8_SCRATCH_SIZE_NONGFX_CLOCKGATING      1024
#define SMU8_SCRATCH_SIZE_NONGFX_GOLDENSETTING    2048
#define SMU8_SCRATCH_SIZE_SDMA_METADATA           1024
#define SMU8_SCRATCH_SIZE_IH                      ((2*256+1)*4)

#define SMU_EnabledFeatureScoreboard_SclkDpmOn    0x00200000

enum smu8_scratch_entry {
	SMU8_SCRATCH_ENTRY_UCODE_ID_SDMA0 = 0,
	SMU8_SCRATCH_ENTRY_UCODE_ID_SDMA1,
	SMU8_SCRATCH_ENTRY_UCODE_ID_CP_CE,
	SMU8_SCRATCH_ENTRY_UCODE_ID_CP_PFP,
	SMU8_SCRATCH_ENTRY_UCODE_ID_CP_ME,
	SMU8_SCRATCH_ENTRY_UCODE_ID_CP_MEC_JT1,
	SMU8_SCRATCH_ENTRY_UCODE_ID_CP_MEC_JT2,
	SMU8_SCRATCH_ENTRY_UCODE_ID_GMCON_RENG,
	SMU8_SCRATCH_ENTRY_UCODE_ID_RLC_G,
	SMU8_SCRATCH_ENTRY_UCODE_ID_RLC_SCRATCH,
	SMU8_SCRATCH_ENTRY_UCODE_ID_RLC_SRM_ARAM,
	SMU8_SCRATCH_ENTRY_UCODE_ID_RLC_SRM_DRAM,
	SMU8_SCRATCH_ENTRY_UCODE_ID_DMCU_ERAM,
	SMU8_SCRATCH_ENTRY_UCODE_ID_DMCU_IRAM,
	SMU8_SCRATCH_ENTRY_UCODE_ID_POWER_PROFILING,
	SMU8_SCRATCH_ENTRY_DATA_ID_SDMA_HALT,
	SMU8_SCRATCH_ENTRY_DATA_ID_SYS_CLOCKGATING,
	SMU8_SCRATCH_ENTRY_DATA_ID_SDMA_RING_REGS,
	SMU8_SCRATCH_ENTRY_DATA_ID_NONGFX_REINIT,
	SMU8_SCRATCH_ENTRY_DATA_ID_SDMA_START,
	SMU8_SCRATCH_ENTRY_DATA_ID_IH_REGISTERS,
	SMU8_SCRATCH_ENTRY_SMU8_FUSION_CLKTABLE
};

struct smu8_buffer_entry {
	uint32_t data_size;
	uint64_t mc_addr;
	void *kaddr;
	enum smu8_scratch_entry firmware_ID;
	struct amdgpu_bo *handle; /* as bo handle used when release bo */
};

struct smu8_register_index_data_pair {
	uint32_t offset;
	uint32_t value;
};

struct smu8_ih_meta_data {
	uint32_t command;
	struct smu8_register_index_data_pair register_index_value_pair[1];
};

struct smu8_smumgr {
	uint8_t driver_buffer_length;
	uint8_t scratch_buffer_length;
	uint16_t toc_entry_used_count;
	uint16_t toc_entry_initialize_index;
	uint16_t toc_entry_power_profiling_index;
	uint16_t toc_entry_aram;
	uint16_t toc_entry_ih_register_restore_task_index;
	uint16_t toc_entry_clock_table;
	uint16_t ih_register_restore_task_size;
	uint16_t smu_buffer_used_bytes;

	struct smu8_buffer_entry toc_buffer;
	struct smu8_buffer_entry smu_buffer;
	struct smu8_buffer_entry firmware_buffer;
	struct smu8_buffer_entry driver_buffer[MAX_NUM_FIRMWARE];
	struct smu8_buffer_entry meta_data_buffer[MAX_NUM_FIRMWARE];
	struct smu8_buffer_entry scratch_buffer[MAX_NUM_SCRATCH];
};

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _SMU7_SMUMANAGER_H
#define _SMU7_SMUMANAGER_H


#include <pp_endian.h>

#define SMC_RAM_END 0x40000

struct smu7_buffer_entry {
	uint32_t data_size;
	uint64_t mc_addr;
	void *kaddr;
	struct amdgpu_bo *handle;
};

struct smu7_smumgr {
	struct smu7_buffer_entry smu_buffer;
	struct smu7_buffer_entry header_buffer;
	struct SMU_DRAMData_TOC *toc;

	uint32_t                             soft_regs_start;
	uint32_t                             dpm_table_start;
	uint32_t                             mc_reg_table_start;
	uint32_t                             fan_table_start;
	uint32_t                             arb_table_start;
	uint32_t                             ulv_setting_starts;
	uint8_t                              security_hard_key;
	uint32_t                             acpi_optimization;
	uint32_t                             avfs_btc_param;
};


int smu7_copy_bytes_from_smc(struct pp_hwmgr *hwmgr, uint32_t smc_start_address,
				uint32_t *dest, uint32_t byte_count, uint32_t limit);
int smu7_copy_bytes_to_smc(struct pp_hwmgr *hwmgr, uint32_t smc_start_address,
			const uint8_t *src, uint32_t byte_count, uint32_t limit);
int smu7_program_jump_on_start(struct pp_hwmgr *hwmgr);
bool smu7_is_smc_ram_running(struct pp_hwmgr *hwmgr);
int smu7_send_msg_to_smc(struct pp_hwmgr *hwmgr, uint16_t msg);
int smu7_send_msg_to_smc_with_parameter(struct pp_hwmgr *hwmgr, uint16_t msg,
						uint32_t parameter);
uint32_t smu7_get_argument(struct pp_hwmgr *hwmgr);
int smu7_send_msg_to_smc_offset(struct pp_hwmgr *hwmgr);

enum cgs_ucode_id smu7_convert_fw_type_to_cgs(uint32_t fw_type);
int smu7_read_smc_sram_dword(struct pp_hwmgr *hwmgr, uint32_t smc_addr,
						uint32_t *value, uint32_t limit);
int smu7_write_smc_sram_dword(struct pp_hwmgr *hwmgr, uint32_t smc_addr,
						uint32_t value, uint32_t limit);

int smu7_request_smu_load_fw(struct pp_hwmgr *hwmgr);
int smu7_check_fw_load_finish(struct pp_hwmgr *hwmgr, uint32_t fw_type);
int smu7_reload_firmware(struct pp_hwmgr *hwmgr);
int smu7_upload_smu_firmware_image(struct pp_hwmgr *hwmgr);
int smu7_init(struct pp_hwmgr *hwmgr);
int smu7_smu_fini(struct pp_hwmgr *hwmgr);

int smu7_setup_pwr_virus(struct pp_hwmgr *hwmgr);

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PP_SMU10_SMUMANAGER_H
#define PP_SMU10_SMUMANAGER_H

#include "rv_ppsmc.h"
#include "smu10_driver_if.h"

#define MAX_SMU_TABLE 2

struct smu_table_entry {
	uint32_t version;
	uint32_t size;
	uint32_t table_id;
	uint64_t mc_addr;
	void *table;
	struct amdgpu_bo *handle;
};

struct smu_table_array {
	struct smu_table_entry entry[MAX_SMU_TABLE];
};

struct smu10_smumgr {
	struct smu_table_array            smu_tables;
};


#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _POLARIS10_SMUMANAGER_H
#define _POLARIS10_SMUMANAGER_H


#include <pp_endian.h>
#include "smu74.h"
#include "smu74_discrete.h"
#include "smu7_smumgr.h"

#define SMC_RAM_END 0x40000

struct polaris10_pt_defaults {
	uint8_t   SviLoadLineEn;
	uint8_t   SviLoadLineVddC;
	uint8_t   TDC_VDDC_ThrottleReleaseLimitPerc;
	uint8_t   TDC_MAWt;
	uint8_t   TdcWaterfallCtl;
	uint8_t   DTEAmbientTempBase;

	uint32_t  DisplayCac;
	uint32_t  BAPM_TEMP_GRADIENT;
	uint16_t  BAPMTI_R[SMU74_DTE_ITERATIONS * SMU74_DTE_SOURCES * SMU74_DTE_SINKS];
	uint16_t  BAPMTI_RC[SMU74_DTE_ITERATIONS * SMU74_DTE_SOURCES * SMU74_DTE_SINKS];
};

struct polaris10_range_table {
	uint32_t trans_lower_frequency; /* in 10khz */
	uint32_t trans_upper_frequency;
};

struct polaris10_smumgr {
	struct smu7_smumgr smu7_data;
	uint8_t protected_mode;
	SMU74_Discrete_DpmTable              smc_state_table;
	struct SMU74_Discrete_Ulv            ulv_setting;
	struct SMU74_Discrete_PmFuses  power_tune_table;
	struct polaris10_range_table                range_table[NUM_SCLK_RANGE];
	const struct polaris10_pt_defaults       *power_tune_defaults;
	uint32_t               bif_sclk_table[SMU74_MAX_LEVELS_LINK];
	pp_atomctrl_mc_reg_table             mc_reg_table;
};


#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Author: Huang Rui <ray.huang@amd.com>
 *
 */

#ifndef _ICELAND_SMUMGR_H_
#define _ICELAND_SMUMGR_H_


#include "smu7_smumgr.h"
#include "pp_endian.h"
#include "smu71_discrete.h"

struct iceland_pt_defaults {
	uint8_t   svi_load_line_en;
	uint8_t   svi_load_line_vddc;
	uint8_t   tdc_vddc_throttle_release_limit_perc;
	uint8_t   tdc_mawt;
	uint8_t   tdc_waterfall_ctl;
	uint8_t   dte_ambient_temp_base;
	uint32_t  display_cac;
	uint32_t  bapm_temp_gradient;
	uint16_t  bapmti_r[SMU71_DTE_ITERATIONS * SMU71_DTE_SOURCES * SMU71_DTE_SINKS];
	uint16_t  bapmti_rc[SMU71_DTE_ITERATIONS * SMU71_DTE_SOURCES * SMU71_DTE_SINKS];
};

struct iceland_mc_reg_entry {
	uint32_t mclk_max;
	uint32_t mc_data[SMU71_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};

struct iceland_mc_reg_table {
	uint8_t   last;               /* number of registers*/
	uint8_t   num_entries;        /* number of entries in mc_reg_table_entry used*/
	uint16_t  validflag;          /* indicate the corresponding register is valid or not. 1: valid, 0: invalid. bit0->address[0], bit1->address[1], etc.*/
	struct iceland_mc_reg_entry    mc_reg_table_entry[MAX_AC_TIMING_ENTRIES];
	SMU71_Discrete_MCRegisterAddress mc_reg_address[SMU71_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};

struct iceland_smumgr {
	struct smu7_smumgr smu7_data;
	struct SMU71_Discrete_DpmTable       smc_state_table;
	struct SMU71_Discrete_PmFuses  power_tune_table;
	struct SMU71_Discrete_Ulv            ulv_setting;
	const struct iceland_pt_defaults  *power_tune_defaults;
	SMU71_Discrete_MCRegisters      mc_regs;
	struct iceland_mc_reg_table mc_reg_table;
};

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _FIJI_SMUMANAGER_H_
#define _FIJI_SMUMANAGER_H_

#include "smu73_discrete.h"
#include <pp_endian.h>
#include "smu7_smumgr.h"


struct fiji_pt_defaults {
	uint8_t   SviLoadLineEn;
	uint8_t   SviLoadLineVddC;
	uint8_t   TDC_VDDC_ThrottleReleaseLimitPerc;
	uint8_t   TDC_MAWt;
	uint8_t   TdcWaterfallCtl;
	uint8_t   DTEAmbientTempBase;
};

struct fiji_smumgr {
	struct smu7_smumgr                   smu7_data;
	struct SMU73_Discrete_DpmTable       smc_state_table;
	struct SMU73_Discrete_Ulv            ulv_setting;
	struct SMU73_Discrete_PmFuses  power_tune_table;
	const struct fiji_pt_defaults  *power_tune_defaults;
};

#endif

/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _CI_SMUMANAGER_H_
#define _CI_SMUMANAGER_H_

#define SMU__NUM_SCLK_DPM_STATE  8
#define SMU__NUM_MCLK_DPM_LEVELS 6
#define SMU__NUM_LCLK_DPM_LEVELS 8
#define SMU__NUM_PCIE_DPM_LEVELS 8

#include "smu7_discrete.h"
#include <pp_endian.h>
#include "ppatomctrl.h"

struct ci_pt_defaults {
	u8 svi_load_line_en;
	u8 svi_load_line_vddc;
	u8 tdc_vddc_throttle_release_limit_perc;
	u8 tdc_mawt;
	u8 tdc_waterfall_ctl;
	u8 dte_ambient_temp_base;
	u32 display_cac;
	u32 bapm_temp_gradient;
	u16 bapmti_r[SMU7_DTE_ITERATIONS * SMU7_DTE_SOURCES * SMU7_DTE_SINKS];
	u16 bapmti_rc[SMU7_DTE_ITERATIONS * SMU7_DTE_SOURCES * SMU7_DTE_SINKS];
};

struct ci_mc_reg_entry {
	uint32_t mclk_max;
	uint32_t mc_data[SMU7_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};

struct ci_mc_reg_table {
	uint8_t   last;
	uint8_t   num_entries;
	uint16_t  validflag;
	struct ci_mc_reg_entry    mc_reg_table_entry[MAX_AC_TIMING_ENTRIES];
	SMU7_Discrete_MCRegisterAddress mc_reg_address[SMU7_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};

struct ci_smumgr {
	uint32_t                             soft_regs_start;
	uint32_t                             dpm_table_start;
	uint32_t                             mc_reg_table_start;
	uint32_t                             fan_table_start;
	uint32_t                             arb_table_start;
	uint32_t                             ulv_setting_starts;
	struct SMU7_Discrete_DpmTable       smc_state_table;
	struct SMU7_Discrete_PmFuses  power_tune_table;
	const struct ci_pt_defaults  *power_tune_defaults;
	SMU7_Discrete_MCRegisters      mc_regs;
	struct ci_mc_reg_table mc_reg_table;
};

#endif

/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA20_PP_SMC_H
#define VEGA20_PP_SMC_H

#pragma pack(push, 1)

// SMU Response Codes:
#define PPSMC_Result_OK                    0x1
#define PPSMC_Result_Failed                0xFF
#define PPSMC_Result_UnknownCmd            0xFE
#define PPSMC_Result_CmdRejectedPrereq     0xFD
#define PPSMC_Result_CmdRejectedBusy       0xFC

// Message Definitions:
#define PPSMC_MSG_TestMessage                    0x1
#define PPSMC_MSG_GetSmuVersion                  0x2
#define PPSMC_MSG_GetDriverIfVersion             0x3
#define PPSMC_MSG_SetAllowedFeaturesMaskLow      0x4
#define PPSMC_MSG_SetAllowedFeaturesMaskHigh     0x5
#define PPSMC_MSG_EnableAllSmuFeatures           0x6
#define PPSMC_MSG_DisableAllSmuFeatures          0x7
#define PPSMC_MSG_EnableSmuFeaturesLow           0x8
#define PPSMC_MSG_EnableSmuFeaturesHigh          0x9
#define PPSMC_MSG_DisableSmuFeaturesLow          0xA
#define PPSMC_MSG_DisableSmuFeaturesHigh         0xB
#define PPSMC_MSG_GetEnabledSmuFeaturesLow       0xC
#define PPSMC_MSG_GetEnabledSmuFeaturesHigh      0xD
#define PPSMC_MSG_SetWorkloadMask                0xE
#define PPSMC_MSG_SetPptLimit                    0xF
#define PPSMC_MSG_SetDriverDramAddrHigh          0x10
#define PPSMC_MSG_SetDriverDramAddrLow           0x11
#define PPSMC_MSG_SetToolsDramAddrHigh           0x12
#define PPSMC_MSG_SetToolsDramAddrLow            0x13
#define PPSMC_MSG_TransferTableSmu2Dram          0x14
#define PPSMC_MSG_TransferTableDram2Smu          0x15
#define PPSMC_MSG_UseDefaultPPTable              0x16
#define PPSMC_MSG_UseBackupPPTable               0x17
#define PPSMC_MSG_RunBtc                         0x18
#define PPSMC_MSG_RequestI2CBus                  0x19
#define PPSMC_MSG_ReleaseI2CBus                  0x1A
#define PPSMC_MSG_SetFloorSocVoltage             0x21
#define PPSMC_MSG_SoftReset                      0x22
#define PPSMC_MSG_StartBacoMonitor               0x23
#define PPSMC_MSG_CancelBacoMonitor              0x24
#define PPSMC_MSG_EnterBaco                      0x25
#define PPSMC_MSG_SetSoftMinByFreq               0x26
#define PPSMC_MSG_SetSoftMaxByFreq               0x27
#define PPSMC_MSG_SetHardMinByFreq               0x28
#define PPSMC_MSG_SetHardMaxByFreq               0x29
#define PPSMC_MSG_GetMinDpmFreq                  0x2A
#define PPSMC_MSG_GetMaxDpmFreq                  0x2B
#define PPSMC_MSG_GetDpmFreqByIndex              0x2C
#define PPSMC_MSG_GetDpmClockFreq                0x2D
#define PPSMC_MSG_GetSsVoltageByDpm              0x2E
#define PPSMC_MSG_SetMemoryChannelConfig         0x2F
#define PPSMC_MSG_SetGeminiMode                  0x30
#define PPSMC_MSG_SetGeminiApertureHigh          0x31
#define PPSMC_MSG_SetGeminiApertureLow           0x32
#define PPSMC_MSG_SetMinLinkDpmByIndex           0x33
#define PPSMC_MSG_OverridePcieParameters         0x34
#define PPSMC_MSG_OverDriveSetPercentage         0x35
#define PPSMC_MSG_SetMinDeepSleepDcefclk         0x36
#define PPSMC_MSG_ReenableAcDcInterrupt          0x37
#define PPSMC_MSG_NotifyPowerSource              0x38
#define PPSMC_MSG_SetUclkFastSwitch              0x39
#define PPSMC_MSG_SetUclkDownHyst                0x3A
//#define PPSMC_MSG_GfxDeviceDriverReset           0x3B
#define PPSMC_MSG_GetCurrentRpm                  0x3C
#define PPSMC_MSG_SetVideoFps                    0x3D
#define PPSMC_MSG_SetTjMax                       0x3E
#define PPSMC_MSG_SetFanTemperatureTarget        0x3F
#define PPSMC_MSG_PrepareMp1ForUnload            0x40
#define PPSMC_MSG_DramLogSetDramAddrHigh         0x41
#define PPSMC_MSG_DramLogSetDramAddrLow          0x42
#define PPSMC_MSG_DramLogSetDramSize             0x43
#define PPSMC_MSG_SetFanMaxRpm                   0x44
#define PPSMC_MSG_SetFanMinPwm                   0x45
#define PPSMC_MSG_ConfigureGfxDidt               0x46
#define PPSMC_MSG_NumOfDisplays                  0x47
#define PPSMC_MSG_RemoveMargins                  0x48
#define PPSMC_MSG_ReadSerialNumTop32             0x49
#define PPSMC_MSG_ReadSerialNumBottom32          0x4A
#define PPSMC_MSG_SetSystemVirtualDramAddrHigh   0x4B
#define PPSMC_MSG_SetSystemVirtualDramAddrLow    0x4C
#define PPSMC_MSG_WaflTest                       0x4D
#define PPSMC_MSG_SetFclkGfxClkRatio             0x4E
// Unused ID 0x4F to 0x50
#define PPSMC_MSG_AllowGfxOff                    0x51
#define PPSMC_MSG_DisallowGfxOff                 0x52
#define PPSMC_MSG_GetPptLimit                    0x53
#define PPSMC_MSG_GetDcModeMaxDpmFreq            0x54
#define PPSMC_MSG_GetDebugData                   0x55
#define PPSMC_MSG_SetXgmiMode                    0x56
#define PPSMC_MSG_RunAfllBtc                     0x57
#define PPSMC_MSG_ExitBaco                       0x58
#define PPSMC_MSG_PrepareMp1ForReset             0x59
#define PPSMC_MSG_PrepareMp1ForShutdown          0x5A
#define PPSMC_MSG_SetMGpuFanBoostLimitRpm        0x5D
#define PPSMC_MSG_GetAVFSVoltageByDpm            0x5F
#define PPSMC_MSG_BacoWorkAroundFlushVDCI        0x60
#define PPSMC_MSG_DFCstateControl                0x63
#define PPSMC_Message_Count                      0x64

typedef uint32_t PPSMC_Result;
typedef uint32_t PPSMC_Msg;

#pragma pack(pop)

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA12_PP_SMC_H
#define VEGA12_PP_SMC_H

#pragma pack(push, 1)

#define SMU_UCODE_VERSION                  0x00270a00

/* SMU Response Codes: */
#define PPSMC_Result_OK                    0x1
#define PPSMC_Result_Failed                0xFF
#define PPSMC_Result_UnknownCmd            0xFE
#define PPSMC_Result_CmdRejectedPrereq     0xFD
#define PPSMC_Result_CmdRejectedBusy       0xFC

#define PPSMC_MSG_TestMessage                    0x1
#define PPSMC_MSG_GetSmuVersion                  0x2
#define PPSMC_MSG_GetDriverIfVersion             0x3
#define PPSMC_MSG_SetAllowedFeaturesMaskLow      0x4
#define PPSMC_MSG_SetAllowedFeaturesMaskHigh     0x5
#define PPSMC_MSG_EnableAllSmuFeatures           0x6
#define PPSMC_MSG_DisableAllSmuFeatures          0x7
#define PPSMC_MSG_EnableSmuFeaturesLow           0x8
#define PPSMC_MSG_EnableSmuFeaturesHigh          0x9
#define PPSMC_MSG_DisableSmuFeaturesLow          0xA
#define PPSMC_MSG_DisableSmuFeaturesHigh         0xB
#define PPSMC_MSG_GetEnabledSmuFeaturesLow       0xC
#define PPSMC_MSG_GetEnabledSmuFeaturesHigh      0xD
#define PPSMC_MSG_SetWorkloadMask                0xE
#define PPSMC_MSG_SetPptLimit                    0xF
#define PPSMC_MSG_SetDriverDramAddrHigh          0x10
#define PPSMC_MSG_SetDriverDramAddrLow           0x11
#define PPSMC_MSG_SetToolsDramAddrHigh           0x12
#define PPSMC_MSG_SetToolsDramAddrLow            0x13
#define PPSMC_MSG_TransferTableSmu2Dram          0x14
#define PPSMC_MSG_TransferTableDram2Smu          0x15
#define PPSMC_MSG_UseDefaultPPTable              0x16
#define PPSMC_MSG_UseBackupPPTable               0x17
#define PPSMC_MSG_RunBtc                         0x18
#define PPSMC_MSG_RequestI2CBus                  0x19
#define PPSMC_MSG_ReleaseI2CBus                  0x1A
#define PPSMC_MSG_SetFloorSocVoltage             0x21
#define PPSMC_MSG_SoftReset                      0x22
#define PPSMC_MSG_StartBacoMonitor               0x23
#define PPSMC_MSG_CancelBacoMonitor              0x24
#define PPSMC_MSG_EnterBaco                      0x25
#define PPSMC_MSG_SetSoftMinByFreq               0x26
#define PPSMC_MSG_SetSoftMaxByFreq               0x27
#define PPSMC_MSG_SetHardMinByFreq               0x28
#define PPSMC_MSG_SetHardMaxByFreq               0x29
#define PPSMC_MSG_GetMinDpmFreq                  0x2A
#define PPSMC_MSG_GetMaxDpmFreq                  0x2B
#define PPSMC_MSG_GetDpmFreqByIndex              0x2C
#define PPSMC_MSG_GetDpmClockFreq                0x2D
#define PPSMC_MSG_GetSsVoltageByDpm              0x2E
#define PPSMC_MSG_SetMemoryChannelConfig         0x2F
#define PPSMC_MSG_SetGeminiMode                  0x30
#define PPSMC_MSG_SetGeminiApertureHigh          0x31
#define PPSMC_MSG_SetGeminiApertureLow           0x32
#define PPSMC_MSG_SetMinLinkDpmByIndex           0x33
#define PPSMC_MSG_OverridePcieParameters         0x34
#define PPSMC_MSG_OverDriveSetPercentage         0x35
#define PPSMC_MSG_SetMinDeepSleepDcefclk         0x36
#define PPSMC_MSG_ReenableAcDcInterrupt          0x37
#define PPSMC_MSG_NotifyPowerSource              0x38
#define PPSMC_MSG_SetUclkFastSwitch              0x39
#define PPSMC_MSG_SetUclkDownHyst                0x3A
#define PPSMC_MSG_GfxDeviceDriverReset           0x3B
#define PPSMC_MSG_GetCurrentRpm                  0x3C
#define PPSMC_MSG_SetVideoFps                    0x3D
#define PPSMC_MSG_SetTjMax                       0x3E
#define PPSMC_MSG_SetFanTemperatureTarget        0x3F
#define PPSMC_MSG_PrepareMp1ForUnload            0x40
#define PPSMC_MSG_DramLogSetDramAddrHigh         0x41
#define PPSMC_MSG_DramLogSetDramAddrLow          0x42
#define PPSMC_MSG_DramLogSetDramSize             0x43
#define PPSMC_MSG_SetFanMaxRpm                   0x44
#define PPSMC_MSG_SetFanMinPwm                   0x45
#define PPSMC_MSG_ConfigureGfxDidt               0x46
#define PPSMC_MSG_NumOfDisplays                  0x47
#define PPSMC_MSG_RemoveMargins                  0x48
#define PPSMC_MSG_ReadSerialNumTop32             0x49
#define PPSMC_MSG_ReadSerialNumBottom32          0x4A
#define PPSMC_MSG_SetSystemVirtualDramAddrHigh   0x4B
#define PPSMC_MSG_SetSystemVirtualDramAddrLow    0x4C
#define PPSMC_MSG_RunAcgBtc                      0x4D
#define PPSMC_MSG_InitializeAcg                  0x4E
#define PPSMC_MSG_EnableAcgBtcTestMode           0x4F
#define PPSMC_MSG_EnableAcgSpreadSpectrum        0x50
#define PPSMC_MSG_AllowGfxOff                    0x51
#define PPSMC_MSG_DisallowGfxOff                 0x52
#define PPSMC_MSG_GetPptLimit                    0x53
#define PPSMC_MSG_GetDcModeMaxDpmFreq            0x54
#define PPSMC_Message_Count                      0x56

typedef uint16_t PPSMC_Result;
typedef int PPSMC_Msg;

#pragma pack(pop)

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA12_SMU9_DRIVER_IF_H
#define VEGA12_SMU9_DRIVER_IF_H

/**** IMPORTANT ***
 * SMU TEAM: Always increment the interface version if
 * any structure is changed in this file
 */
#define SMU9_DRIVER_IF_VERSION 0x10

#define PPTABLE_V12_SMU_VERSION 1

#define NUM_GFXCLK_DPM_LEVELS  16
#define NUM_VCLK_DPM_LEVELS    8
#define NUM_DCLK_DPM_LEVELS    8
#define NUM_ECLK_DPM_LEVELS    8
#define NUM_MP0CLK_DPM_LEVELS  2
#define NUM_UCLK_DPM_LEVELS    4
#define NUM_SOCCLK_DPM_LEVELS  8
#define NUM_DCEFCLK_DPM_LEVELS 8
#define NUM_DISPCLK_DPM_LEVELS 8
#define NUM_PIXCLK_DPM_LEVELS  8
#define NUM_PHYCLK_DPM_LEVELS  8
#define NUM_LINK_LEVELS        2

#define MAX_GFXCLK_DPM_LEVEL  (NUM_GFXCLK_DPM_LEVELS  - 1)
#define MAX_VCLK_DPM_LEVEL    (NUM_VCLK_DPM_LEVELS    - 1)
#define MAX_DCLK_DPM_LEVEL    (NUM_DCLK_DPM_LEVELS    - 1)
#define MAX_ECLK_DPM_LEVEL    (NUM_ECLK_DPM_LEVELS    - 1)
#define MAX_MP0CLK_DPM_LEVEL  (NUM_MP0CLK_DPM_LEVELS  - 1)
#define MAX_UCLK_DPM_LEVEL    (NUM_UCLK_DPM_LEVELS    - 1)
#define MAX_SOCCLK_DPM_LEVEL  (NUM_SOCCLK_DPM_LEVELS  - 1)
#define MAX_DCEFCLK_DPM_LEVEL (NUM_DCEFCLK_DPM_LEVELS - 1)
#define MAX_DISPCLK_DPM_LEVEL (NUM_DISPCLK_DPM_LEVELS - 1)
#define MAX_PIXCLK_DPM_LEVEL  (NUM_PIXCLK_DPM_LEVELS  - 1)
#define MAX_PHYCLK_DPM_LEVEL  (NUM_PHYCLK_DPM_LEVELS  - 1)
#define MAX_LINK_LEVEL        (NUM_LINK_LEVELS        - 1)


#define PPSMC_GeminiModeNone   0
#define PPSMC_GeminiModeMaster 1
#define PPSMC_GeminiModeSlave  2


#define FEATURE_DPM_PREFETCHER_BIT      0
#define FEATURE_DPM_GFXCLK_BIT          1
#define FEATURE_DPM_UCLK_BIT            2
#define FEATURE_DPM_SOCCLK_BIT          3
#define FEATURE_DPM_UVD_BIT             4
#define FEATURE_DPM_VCE_BIT             5
#define FEATURE_ULV_BIT                 6
#define FEATURE_DPM_MP0CLK_BIT          7
#define FEATURE_DPM_LINK_BIT            8
#define FEATURE_DPM_DCEFCLK_BIT         9
#define FEATURE_DS_GFXCLK_BIT           10
#define FEATURE_DS_SOCCLK_BIT           11
#define FEATURE_DS_LCLK_BIT             12
#define FEATURE_PPT_BIT                 13
#define FEATURE_TDC_BIT                 14
#define FEATURE_THERMAL_BIT             15
#define FEATURE_GFX_PER_CU_CG_BIT       16
#define FEATURE_RM_BIT                  17
#define FEATURE_DS_DCEFCLK_BIT          18
#define FEATURE_ACDC_BIT                19
#define FEATURE_VR0HOT_BIT              20
#define FEATURE_VR1HOT_BIT              21
#define FEATURE_FW_CTF_BIT              22
#define FEATURE_LED_DISPLAY_BIT         23
#define FEATURE_FAN_CONTROL_BIT         24
#define FEATURE_GFX_EDC_BIT             25
#define FEATURE_GFXOFF_BIT              26
#define FEATURE_CG_BIT                  27
#define FEATURE_ACG_BIT                 28
#define FEATURE_SPARE_29_BIT            29
#define FEATURE_SPARE_30_BIT            30
#define FEATURE_SPARE_31_BIT            31

#define NUM_FEATURES                    32

#define FEATURE_DPM_PREFETCHER_MASK     (1 << FEATURE_DPM_PREFETCHER_BIT     )
#define FEATURE_DPM_GFXCLK_MASK         (1 << FEATURE_DPM_GFXCLK_BIT         )
#define FEATURE_DPM_UCLK_MASK           (1 << FEATURE_DPM_UCLK_BIT           )
#define FEATURE_DPM_SOCCLK_MASK         (1 << FEATURE_DPM_SOCCLK_BIT         )
#define FEATURE_DPM_UVD_MASK            (1 << FEATURE_DPM_UVD_BIT            )
#define FEATURE_DPM_VCE_MASK            (1 << FEATURE_DPM_VCE_BIT            )
#define FEATURE_ULV_MASK                (1 << FEATURE_ULV_BIT                )
#define FEATURE_DPM_MP0CLK_MASK         (1 << FEATURE_DPM_MP0CLK_BIT         )
#define FEATURE_DPM_LINK_MASK           (1 << FEATURE_DPM_LINK_BIT           )
#define FEATURE_DPM_DCEFCLK_MASK        (1 << FEATURE_DPM_DCEFCLK_BIT        )
#define FEATURE_DS_GFXCLK_MASK          (1 << FEATURE_DS_GFXCLK_BIT          )
#define FEATURE_DS_SOCCLK_MASK          (1 << FEATURE_DS_SOCCLK_BIT          )
#define FEATURE_DS_LCLK_MASK            (1 << FEATURE_DS_LCLK_BIT            )
#define FEATURE_PPT_MASK                (1 << FEATURE_PPT_BIT                )
#define FEATURE_TDC_MASK                (1 << FEATURE_TDC_BIT                )
#define FEATURE_THERMAL_MASK            (1 << FEATURE_THERMAL_BIT            )
#define FEATURE_GFX_PER_CU_CG_MASK      (1 << FEATURE_GFX_PER_CU_CG_BIT      )
#define FEATURE_RM_MASK                 (1 << FEATURE_RM_BIT                 )
#define FEATURE_DS_DCEFCLK_MASK         (1 << FEATURE_DS_DCEFCLK_BIT         )
#define FEATURE_ACDC_MASK               (1 << FEATURE_ACDC_BIT               )
#define FEATURE_VR0HOT_MASK             (1 << FEATURE_VR0HOT_BIT             )
#define FEATURE_VR1HOT_MASK             (1 << FEATURE_VR1HOT_BIT             )
#define FEATURE_FW_CTF_MASK             (1 << FEATURE_FW_CTF_BIT             )
#define FEATURE_LED_DISPLAY_MASK        (1 << FEATURE_LED_DISPLAY_BIT        )
#define FEATURE_FAN_CONTROL_MASK        (1 << FEATURE_FAN_CONTROL_BIT        )
#define FEATURE_GFX_EDC_MASK            (1 << FEATURE_GFX_EDC_BIT            )
#define FEATURE_GFXOFF_MASK             (1 << FEATURE_GFXOFF_BIT             )
#define FEATURE_CG_MASK                 (1 << FEATURE_CG_BIT                 )
#define FEATURE_ACG_MASK          (1 << FEATURE_ACG_BIT)
#define FEATURE_SPARE_29_MASK           (1 << FEATURE_SPARE_29_BIT           )
#define FEATURE_SPARE_30_MASK           (1 << FEATURE_SPARE_30_BIT           )
#define FEATURE_SPARE_31_MASK           (1 << FEATURE_SPARE_31_BIT           )


#define DPM_OVERRIDE_DISABLE_SOCCLK_PID             0x00000001
#define DPM_OVERRIDE_DISABLE_UCLK_PID               0x00000002
#define DPM_OVERRIDE_ENABLE_VOLT_LINK_UVD_SOCCLK    0x00000004
#define DPM_OVERRIDE_ENABLE_VOLT_LINK_UVD_UCLK      0x00000008
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_VCLK_SOCCLK   0x00000010
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_VCLK_UCLK     0x00000020
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_DCLK_SOCCLK   0x00000040
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_DCLK_UCLK     0x00000080
#define DPM_OVERRIDE_ENABLE_VOLT_LINK_VCE_SOCCLK    0x00000100
#define DPM_OVERRIDE_ENABLE_VOLT_LINK_VCE_UCLK      0x00000200
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_ECLK_SOCCLK   0x00000400
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_ECLK_UCLK     0x00000800
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_GFXCLK_SOCCLK 0x00001000
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_GFXCLK_UCLK   0x00002000
#define DPM_OVERRIDE_ENABLE_GFXOFF_GFXCLK_SWITCH    0x00004000
#define DPM_OVERRIDE_ENABLE_GFXOFF_SOCCLK_SWITCH    0x00008000
#define DPM_OVERRIDE_ENABLE_GFXOFF_UCLK_SWITCH      0x00010000


#define VR_MAPPING_VR_SELECT_MASK  0x01
#define VR_MAPPING_VR_SELECT_SHIFT 0x00

#define VR_MAPPING_PLANE_SELECT_MASK  0x02
#define VR_MAPPING_PLANE_SELECT_SHIFT 0x01


#define PSI_SEL_VR0_PLANE0_PSI0  0x01
#define PSI_SEL_VR0_PLANE0_PSI1  0x02
#define PSI_SEL_VR0_PLANE1_PSI0  0x04
#define PSI_SEL_VR0_PLANE1_PSI1  0x08
#define PSI_SEL_VR1_PLANE0_PSI0  0x10
#define PSI_SEL_VR1_PLANE0_PSI1  0x20
#define PSI_SEL_VR1_PLANE1_PSI0  0x40
#define PSI_SEL_VR1_PLANE1_PSI1  0x80


#define THROTTLER_STATUS_PADDING_BIT      0
#define THROTTLER_STATUS_TEMP_EDGE_BIT    1
#define THROTTLER_STATUS_TEMP_HOTSPOT_BIT 2
#define THROTTLER_STATUS_TEMP_HBM_BIT     3
#define THROTTLER_STATUS_TEMP_VR_GFX_BIT  4
#define THROTTLER_STATUS_TEMP_VR_MEM_BIT  5
#define THROTTLER_STATUS_TEMP_LIQUID_BIT  6
#define THROTTLER_STATUS_TEMP_PLX_BIT     7
#define THROTTLER_STATUS_TEMP_SKIN_BIT    8
#define THROTTLER_STATUS_TDC_GFX_BIT      9
#define THROTTLER_STATUS_TDC_SOC_BIT      10
#define THROTTLER_STATUS_PPT_BIT          11
#define THROTTLER_STATUS_FIT_BIT          12
#define THROTTLER_STATUS_PPM_BIT          13


#define TABLE_TRANSFER_OK         0x0
#define TABLE_TRANSFER_FAILED     0xFF


#define WORKLOAD_DEFAULT_BIT              0
#define WORKLOAD_PPLIB_FULL_SCREEN_3D_BIT 1
#define WORKLOAD_PPLIB_POWER_SAVING_BIT   2
#define WORKLOAD_PPLIB_VIDEO_BIT          3
#define WORKLOAD_PPLIB_VR_BIT             4
#define WORKLOAD_PPLIB_COMPUTE_BIT        5
#define WORKLOAD_PPLIB_CUSTOM_BIT         6
#define WORKLOAD_PPLIB_COUNT              7

typedef struct {
  uint32_t a;
  uint32_t b;
  uint32_t c;
} QuadraticInt_t;

typedef struct {
  uint32_t m;
  uint32_t b;
} LinearInt_t;

typedef struct {
  uint32_t a;
  uint32_t b;
  uint32_t c;
} DroopInt_t;

typedef enum {
  PPCLK_GFXCLK,
  PPCLK_VCLK,
  PPCLK_DCLK,
  PPCLK_ECLK,
  PPCLK_SOCCLK,
  PPCLK_UCLK,
  PPCLK_DCEFCLK,
  PPCLK_DISPCLK,
  PPCLK_PIXCLK,
  PPCLK_PHYCLK,
  PPCLK_COUNT,
} PPCLK_e;

enum {
  VOLTAGE_MODE_AVFS,
  VOLTAGE_MODE_AVFS_SS,
  VOLTAGE_MODE_SS,
  VOLTAGE_MODE_COUNT,
};

typedef struct {
  uint8_t        VoltageMode;
  uint8_t        SnapToDiscrete;
  uint8_t        NumDiscreteLevels;
  uint8_t        padding;
  LinearInt_t    ConversionToAvfsClk;
  QuadraticInt_t SsCurve;
} DpmDescriptor_t;

typedef struct {
  uint32_t Version;


  uint32_t FeaturesToRun[2];


  uint16_t SocketPowerLimitAc0;
  uint16_t SocketPowerLimitAc0Tau;
  uint16_t SocketPowerLimitAc1;
  uint16_t SocketPowerLimitAc1Tau;
  uint16_t SocketPowerLimitAc2;
  uint16_t SocketPowerLimitAc2Tau;
  uint16_t SocketPowerLimitAc3;
  uint16_t SocketPowerLimitAc3Tau;
  uint16_t SocketPowerLimitDc;
  uint16_t SocketPowerLimitDcTau;
  uint16_t TdcLimitSoc;
  uint16_t TdcLimitSocTau;
  uint16_t TdcLimitGfx;
  uint16_t TdcLimitGfxTau;

  uint16_t TedgeLimit;
  uint16_t ThotspotLimit;
  uint16_t ThbmLimit;
  uint16_t Tvr_gfxLimit;
  uint16_t Tvr_memLimit;
  uint16_t Tliquid1Limit;
  uint16_t Tliquid2Limit;
  uint16_t TplxLimit;
  uint32_t FitLimit;

  uint16_t PpmPowerLimit;
  uint16_t PpmTemperatureThreshold;

  uint8_t  MemoryOnPackage;
  uint8_t  padding8_limits[3];


  uint16_t  UlvVoltageOffsetSoc;
  uint16_t  UlvVoltageOffsetGfx;

  uint8_t  UlvSmnclkDid;
  uint8_t  UlvMp1clkDid;
  uint8_t  UlvGfxclkBypass;
  uint8_t  Padding234;


  uint16_t     MinVoltageGfx;
  uint16_t     MinVoltageSoc;
  uint16_t     MaxVoltageGfx;
  uint16_t     MaxVoltageSoc;

  uint16_t     LoadLineResistance;
  uint16_t     LoadLine_padding;


  DpmDescriptor_t DpmDescriptor[PPCLK_COUNT];

  uint16_t       FreqTableGfx      [NUM_GFXCLK_DPM_LEVELS  ];
  uint16_t       FreqTableVclk     [NUM_VCLK_DPM_LEVELS    ];
  uint16_t       FreqTableDclk     [NUM_DCLK_DPM_LEVELS    ];
  uint16_t       FreqTableEclk     [NUM_ECLK_DPM_LEVELS    ];
  uint16_t       FreqTableSocclk   [NUM_SOCCLK_DPM_LEVELS  ];
  uint16_t       FreqTableUclk     [NUM_UCLK_DPM_LEVELS    ];
  uint16_t       FreqTableDcefclk  [NUM_DCEFCLK_DPM_LEVELS ];
  uint16_t       FreqTableDispclk  [NUM_DISPCLK_DPM_LEVELS ];
  uint16_t       FreqTablePixclk   [NUM_PIXCLK_DPM_LEVELS  ];
  uint16_t       FreqTablePhyclk   [NUM_PHYCLK_DPM_LEVELS  ];

  uint16_t       DcModeMaxFreq     [PPCLK_COUNT            ];


  uint16_t       Mp0clkFreq        [NUM_MP0CLK_DPM_LEVELS];
  uint16_t       Mp0DpmVoltage     [NUM_MP0CLK_DPM_LEVELS];


  uint16_t        GfxclkFidle;
  uint16_t        GfxclkSlewRate;
  uint16_t        CksEnableFreq;
  uint16_t        Padding789;
  QuadraticInt_t  CksVoltageOffset;
  uint16_t        AcgThresholdFreqHigh;
  uint16_t        AcgThresholdFreqLow;
  uint16_t        GfxclkDsMaxFreq;
  uint8_t         Padding456[2];


  uint8_t      LowestUclkReservedForUlv;
  uint8_t      Padding8_Uclk[3];


  uint8_t      PcieGenSpeed[NUM_LINK_LEVELS];
  uint8_t      PcieLaneCount[NUM_LINK_LEVELS];
  uint16_t     LclkFreq[NUM_LINK_LEVELS];


  uint16_t     EnableTdpm;
  uint16_t     TdpmHighHystTemperature;
  uint16_t     TdpmLowHystTemperature;
  uint16_t     GfxclkFreqHighTempLimit;


  uint16_t     FanStopTemp;
  uint16_t     FanStartTemp;

  uint16_t     FanGainEdge;
  uint16_t     FanGainHotspot;
  uint16_t     FanGainLiquid;
  uint16_t     FanGainVrVddc;
  uint16_t     FanGainVrMvdd;
  uint16_t     FanGainPlx;
  uint16_t     FanGainHbm;
  uint16_t     FanPwmMin;
  uint16_t     FanAcousticLimitRpm;
  uint16_t     FanThrottlingRpm;
  uint16_t     FanMaximumRpm;
  uint16_t     FanTargetTemperature;
  uint16_t     FanTargetGfxclk;
  uint8_t      FanZeroRpmEnable; 
  uint8_t      FanTachEdgePerRev;



  int16_t      FuzzyFan_ErrorSetDelta;
  int16_t      FuzzyFan_ErrorRateSetDelta;
  int16_t      FuzzyFan_PwmSetDelta;
  uint16_t     FuzzyFan_Reserved;




  uint8_t           OverrideAvfsGb;
  uint8_t           Padding8_Avfs[3];

  QuadraticInt_t    qAvfsGb;
  DroopInt_t        dBtcGbGfxCksOn;
  DroopInt_t        dBtcGbGfxCksOff;
  DroopInt_t        dBtcGbGfxAcg;
  DroopInt_t        dBtcGbSoc;
  LinearInt_t       qAgingGbGfx;
  LinearInt_t       qAgingGbSoc;

  QuadraticInt_t    qStaticVoltageOffsetGfx;
  QuadraticInt_t    qStaticVoltageOffsetSoc;

  uint16_t          DcTolGfx;
  uint16_t          DcTolSoc;

  uint8_t           DcBtcGfxEnabled;
  uint8_t           DcBtcSocEnabled;
  uint8_t           Padding8_GfxBtc[2];

  uint16_t          DcBtcGfxMin;
  uint16_t          DcBtcGfxMax;

  uint16_t          DcBtcSocMin;
  uint16_t          DcBtcSocMax;



  uint32_t          DebugOverrides;
  QuadraticInt_t    ReservedEquation0;
  QuadraticInt_t    ReservedEquation1;
  QuadraticInt_t    ReservedEquation2;
  QuadraticInt_t    ReservedEquation3;

  uint16_t     MinVoltageUlvGfx;
  uint16_t     MinVoltageUlvSoc;

  uint32_t     Reserved[14];



  uint8_t      Liquid1_I2C_address;
  uint8_t      Liquid2_I2C_address;
  uint8_t      Vr_I2C_address;
  uint8_t      Plx_I2C_address;

  uint8_t      Liquid_I2C_LineSCL;
  uint8_t      Liquid_I2C_LineSDA;
  uint8_t      Vr_I2C_LineSCL;
  uint8_t      Vr_I2C_LineSDA;

  uint8_t      Plx_I2C_LineSCL;
  uint8_t      Plx_I2C_LineSDA;
  uint8_t      VrSensorPresent;
  uint8_t      LiquidSensorPresent;

  uint16_t     MaxVoltageStepGfx;
  uint16_t     MaxVoltageStepSoc;

  uint8_t      VddGfxVrMapping;
  uint8_t      VddSocVrMapping;
  uint8_t      VddMem0VrMapping;
  uint8_t      VddMem1VrMapping;

  uint8_t      GfxUlvPhaseSheddingMask;
  uint8_t      SocUlvPhaseSheddingMask;
  uint8_t      ExternalSensorPresent;
  uint8_t      Padding8_V;


  uint16_t     GfxMaxCurrent;
  int8_t       GfxOffset;
  uint8_t      Padding_TelemetryGfx;

  uint16_t     SocMaxCurrent;
  int8_t       SocOffset;
  uint8_t      Padding_TelemetrySoc;

  uint16_t     Mem0MaxCurrent;
  int8_t       Mem0Offset;
  uint8_t      Padding_TelemetryMem0;

  uint16_t     Mem1MaxCurrent;
  int8_t       Mem1Offset;
  uint8_t      Padding_TelemetryMem1;


  uint8_t      AcDcGpio;
  uint8_t      AcDcPolarity;
  uint8_t      VR0HotGpio;
  uint8_t      VR0HotPolarity;

  uint8_t      VR1HotGpio;
  uint8_t      VR1HotPolarity;
  uint8_t      Padding1;
  uint8_t      Padding2;



  uint8_t      LedPin0;
  uint8_t      LedPin1;
  uint8_t      LedPin2;
  uint8_t      padding8_4;


  uint8_t      PllGfxclkSpreadEnabled;
  uint8_t      PllGfxclkSpreadPercent;
  uint16_t     PllGfxclkSpreadFreq;

  uint8_t      UclkSpreadEnabled;
  uint8_t      UclkSpreadPercent;
  uint16_t     UclkSpreadFreq;

  uint8_t      SocclkSpreadEnabled;
  uint8_t      SocclkSpreadPercent;
  uint16_t     SocclkSpreadFreq;

  uint8_t      AcgGfxclkSpreadEnabled;
  uint8_t      AcgGfxclkSpreadPercent;
  uint16_t     AcgGfxclkSpreadFreq;

  uint8_t      Vr2_I2C_address;
  uint8_t      padding_vr2[3];

  uint32_t     BoardReserved[9];


  uint32_t     MmHubPadding[7];

} PPTable_t;

typedef struct {

  uint16_t     GfxclkAverageLpfTau;
  uint16_t     SocclkAverageLpfTau;
  uint16_t     UclkAverageLpfTau;
  uint16_t     GfxActivityLpfTau;
  uint16_t     UclkActivityLpfTau;


  uint32_t     MmHubPadding[7];
} DriverSmuConfig_t;

typedef struct {

  uint16_t      GfxclkFmin;
  uint16_t      GfxclkFmax;
  uint16_t      GfxclkFreq1;
  uint16_t      GfxclkOffsetVolt1;
  uint16_t      GfxclkFreq2;
  uint16_t      GfxclkOffsetVolt2;
  uint16_t      GfxclkFreq3;
  uint16_t      GfxclkOffsetVolt3;
  uint16_t      UclkFmax;
  int16_t       OverDrivePct;
  uint16_t      FanMaximumRpm;
  uint16_t      FanMinimumPwm;
  uint16_t      FanTargetTemperature;
  uint16_t      MaxOpTemp;

} OverDriveTable_t;

typedef struct {
  uint16_t CurrClock[PPCLK_COUNT];
  uint16_t AverageGfxclkFrequency;
  uint16_t AverageSocclkFrequency;
  uint16_t AverageUclkFrequency  ;
  uint16_t AverageGfxActivity    ;
  uint16_t AverageUclkActivity   ;
  uint8_t  CurrSocVoltageOffset  ;
  uint8_t  CurrGfxVoltageOffset  ;
  uint8_t  CurrMemVidOffset      ;
  uint8_t  Padding8              ;
  uint16_t CurrSocketPower       ;
  uint16_t TemperatureEdge       ;
  uint16_t TemperatureHotspot    ;
  uint16_t TemperatureHBM        ;
  uint16_t TemperatureVrGfx      ;
  uint16_t TemperatureVrMem      ;
  uint16_t TemperatureLiquid     ;
  uint16_t TemperaturePlx        ;
  uint32_t ThrottlerStatus       ;

  uint8_t  LinkDpmLevel;
  uint8_t  Padding[3];


  uint32_t     MmHubPadding[7];
} SmuMetrics_t;

typedef struct {
  uint16_t MinClock;
  uint16_t MaxClock;
  uint16_t MinUclk;
  uint16_t MaxUclk;

  uint8_t  WmSetting;
  uint8_t  Padding[3];
} WatermarkRowGeneric_t;

#define NUM_WM_RANGES 4

typedef enum {
  WM_SOCCLK = 0,
  WM_DCEFCLK,
  WM_COUNT_PP,
} WM_CLOCK_e;

typedef struct {

  WatermarkRowGeneric_t WatermarkRow[WM_COUNT_PP][NUM_WM_RANGES];

  uint32_t     MmHubPadding[7];
} Watermarks_t;

typedef struct {
  uint16_t avgPsmCount[30];
  uint16_t minPsmCount[30];
  float    avgPsmVoltage[30];
  float    minPsmVoltage[30];

  uint32_t MmHubPadding[7];
} AvfsDebugTable_t;

typedef struct {
  uint8_t  AvfsEn;
  uint8_t  AvfsVersion;
  uint8_t  OverrideVFT;
  uint8_t  OverrideAvfsGb;

  uint8_t  OverrideTemperatures;
  uint8_t  OverrideVInversion;
  uint8_t  OverrideP2V;
  uint8_t  OverrideP2VCharzFreq;

  int32_t VFT0_m1;
  int32_t VFT0_m2;
  int32_t VFT0_b;

  int32_t VFT1_m1;
  int32_t VFT1_m2;
  int32_t VFT1_b;

  int32_t VFT2_m1;
  int32_t VFT2_m2;
  int32_t VFT2_b;

  int32_t AvfsGb0_m1;
  int32_t AvfsGb0_m2;
  int32_t AvfsGb0_b;

  int32_t AcBtcGb_m1;
  int32_t AcBtcGb_m2;
  int32_t AcBtcGb_b;

  uint32_t AvfsTempCold;
  uint32_t AvfsTempMid;
  uint32_t AvfsTempHot;

  uint32_t GfxVInversion;
  uint32_t SocVInversion;

  int32_t P2V_m1;
  int32_t P2V_m2;
  int32_t P2V_b;

  uint32_t P2VCharzFreq;

  uint32_t EnabledAvfsModules;

  uint32_t MmHubPadding[7];
} AvfsFuseOverride_t;

typedef struct {

  uint8_t   Gfx_ActiveHystLimit;
  uint8_t   Gfx_IdleHystLimit;
  uint8_t   Gfx_FPS;
  uint8_t   Gfx_MinActiveFreqType;
  uint8_t   Gfx_BoosterFreqType; 
  uint8_t   Gfx_UseRlcBusy; 
  uint16_t  Gfx_MinActiveFreq;
  uint16_t  Gfx_BoosterFreq;
  uint16_t  Gfx_PD_Data_time_constant;
  uint32_t  Gfx_PD_Data_limit_a;
  uint32_t  Gfx_PD_Data_limit_b;
  uint32_t  Gfx_PD_Data_limit_c;
  uint32_t  Gfx_PD_Data_error_coeff;
  uint32_t  Gfx_PD_Data_error_rate_coeff;

  uint8_t   Soc_ActiveHystLimit;
  uint8_t   Soc_IdleHystLimit;
  uint8_t   Soc_FPS;
  uint8_t   Soc_MinActiveFreqType;
  uint8_t   Soc_BoosterFreqType; 
  uint8_t   Soc_UseRlcBusy;
  uint16_t  Soc_MinActiveFreq;
  uint16_t  Soc_BoosterFreq;
  uint16_t  Soc_PD_Data_time_constant;
  uint32_t  Soc_PD_Data_limit_a;
  uint32_t  Soc_PD_Data_limit_b;
  uint32_t  Soc_PD_Data_limit_c;
  uint32_t  Soc_PD_Data_error_coeff;
  uint32_t  Soc_PD_Data_error_rate_coeff;

  uint8_t   Mem_ActiveHystLimit;
  uint8_t   Mem_IdleHystLimit;
  uint8_t   Mem_FPS;
  uint8_t   Mem_MinActiveFreqType;
  uint8_t   Mem_BoosterFreqType;
  uint8_t   Mem_UseRlcBusy; 
  uint16_t  Mem_MinActiveFreq;
  uint16_t  Mem_BoosterFreq;
  uint16_t  Mem_PD_Data_time_constant;
  uint32_t  Mem_PD_Data_limit_a;
  uint32_t  Mem_PD_Data_limit_b;
  uint32_t  Mem_PD_Data_limit_c;
  uint32_t  Mem_PD_Data_error_coeff;
  uint32_t  Mem_PD_Data_error_rate_coeff;

} DpmActivityMonitorCoeffInt_t;




#define TABLE_PPTABLE                 0
#define TABLE_WATERMARKS              1
#define TABLE_AVFS                    2
#define TABLE_AVFS_PSM_DEBUG          3
#define TABLE_AVFS_FUSE_OVERRIDE      4
#define TABLE_PMSTATUSLOG             5
#define TABLE_SMU_METRICS             6
#define TABLE_DRIVER_SMU_CONFIG       7
#define TABLE_ACTIVITY_MONITOR_COEFF  8
#define TABLE_OVERDRIVE               9
#define TABLE_COUNT                  10


#define UCLK_SWITCH_SLOW 0
#define UCLK_SWITCH_FAST 1


#define SQ_Enable_MASK 0x1
#define SQ_IR_MASK 0x2
#define SQ_PCC_MASK 0x4
#define SQ_EDC_MASK 0x8

#define TCP_Enable_MASK 0x100
#define TCP_IR_MASK 0x200
#define TCP_PCC_MASK 0x400
#define TCP_EDC_MASK 0x800

#define TD_Enable_MASK 0x10000
#define TD_IR_MASK 0x20000
#define TD_PCC_MASK 0x40000
#define TD_EDC_MASK 0x80000

#define DB_Enable_MASK 0x1000000
#define DB_IR_MASK 0x2000000
#define DB_PCC_MASK 0x4000000
#define DB_EDC_MASK 0x8000000

#define SQ_Enable_SHIFT 0
#define SQ_IR_SHIFT 1
#define SQ_PCC_SHIFT 2
#define SQ_EDC_SHIFT 3

#define TCP_Enable_SHIFT 8
#define TCP_IR_SHIFT 9
#define TCP_PCC_SHIFT 10
#define TCP_EDC_SHIFT 11

#define TD_Enable_SHIFT 16
#define TD_IR_SHIFT 17
#define TD_PCC_SHIFT 18
#define TD_EDC_SHIFT 19

#define DB_Enable_SHIFT 24
#define DB_IR_SHIFT 25
#define DB_PCC_SHIFT 26
#define DB_EDC_SHIFT 27

#define REMOVE_FMAX_MARGIN_BIT     0x0
#define REMOVE_DCTOL_MARGIN_BIT    0x1
#define REMOVE_PLATFORM_MARGIN_BIT 0x2

#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PP_SMC_H
#define PP_SMC_H

#pragma pack(push, 1)

#define SMU_UCODE_VERSION                  0x001c0800

/* SMU Response Codes: */
#define PPSMC_Result_OK                    0x1
#define PPSMC_Result_Failed                0xFF
#define PPSMC_Result_UnknownCmd            0xFE
#define PPSMC_Result_CmdRejectedPrereq     0xFD
#define PPSMC_Result_CmdRejectedBusy       0xFC

typedef uint16_t PPSMC_Result;

/* Message Definitions */
#define PPSMC_MSG_TestMessage                    0x1
#define PPSMC_MSG_GetSmuVersion                  0x2
#define PPSMC_MSG_GetDriverIfVersion             0x3
#define PPSMC_MSG_EnableSmuFeatures              0x4
#define PPSMC_MSG_DisableSmuFeatures             0x5
#define PPSMC_MSG_GetEnabledSmuFeatures          0x6
#define PPSMC_MSG_SetWorkloadMask                0x7
#define PPSMC_MSG_SetPptLimit                    0x8
#define PPSMC_MSG_SetDriverDramAddrHigh          0x9
#define PPSMC_MSG_SetDriverDramAddrLow           0xA
#define PPSMC_MSG_SetToolsDramAddrHigh           0xB
#define PPSMC_MSG_SetToolsDramAddrLow            0xC
#define PPSMC_MSG_TransferTableSmu2Dram          0xD
#define PPSMC_MSG_TransferTableDram2Smu          0xE
#define PPSMC_MSG_UseDefaultPPTable              0xF
#define PPSMC_MSG_UseBackupPPTable               0x10
#define PPSMC_MSG_RunBtc                         0x11
#define PPSMC_MSG_RequestI2CBus                  0x12
#define PPSMC_MSG_ReleaseI2CBus                  0x13
#define PPSMC_MSG_ConfigureTelemetry             0x14
#define PPSMC_MSG_SetUlvIpMask                   0x15
#define PPSMC_MSG_SetSocVidOffset                0x16
#define PPSMC_MSG_SetMemVidOffset                0x17
#define PPSMC_MSG_GetSocVidOffset                0x18
#define PPSMC_MSG_GetMemVidOffset                0x19
#define PPSMC_MSG_SetFloorSocVoltage             0x1A
#define PPSMC_MSG_SoftReset                      0x1B
#define PPSMC_MSG_StartBacoMonitor               0x1C
#define PPSMC_MSG_CancelBacoMonitor              0x1D
#define PPSMC_MSG_EnterBaco                      0x1E
#define PPSMC_MSG_AllowLowGfxclkInterrupt        0x1F
#define PPSMC_MSG_SetLowGfxclkInterruptThreshold 0x20
#define PPSMC_MSG_SetSoftMinGfxclkByIndex        0x21
#define PPSMC_MSG_SetSoftMaxGfxclkByIndex        0x22
#define PPSMC_MSG_GetCurrentGfxclkIndex          0x23
#define PPSMC_MSG_SetSoftMinUclkByIndex          0x24
#define PPSMC_MSG_SetSoftMaxUclkByIndex          0x25
#define PPSMC_MSG_GetCurrentUclkIndex            0x26
#define PPSMC_MSG_SetSoftMinUvdByIndex           0x27
#define PPSMC_MSG_SetSoftMaxUvdByIndex           0x28
#define PPSMC_MSG_GetCurrentUvdIndex             0x29
#define PPSMC_MSG_SetSoftMinVceByIndex           0x2A
#define PPSMC_MSG_SetSoftMaxVceByIndex           0x2B
#define PPSMC_MSG_SetHardMinVceByIndex           0x2C
#define PPSMC_MSG_GetCurrentVceIndex             0x2D
#define PPSMC_MSG_SetSoftMinSocclkByIndex        0x2E
#define PPSMC_MSG_SetHardMinSocclkByIndex        0x2F
#define PPSMC_MSG_SetSoftMaxSocclkByIndex        0x30
#define PPSMC_MSG_GetCurrentSocclkIndex          0x31
#define PPSMC_MSG_SetMinLinkDpmByIndex           0x32
#define PPSMC_MSG_GetCurrentLinkIndex            0x33
#define PPSMC_MSG_GetAverageGfxclkFrequency      0x34
#define PPSMC_MSG_GetAverageSocclkFrequency      0x35
#define PPSMC_MSG_GetAverageUclkFrequency        0x36
#define PPSMC_MSG_GetAverageGfxActivity          0x37
#define PPSMC_MSG_GetTemperatureEdge             0x38
#define PPSMC_MSG_GetTemperatureHotspot          0x39
#define PPSMC_MSG_GetTemperatureHBM              0x3A
#define PPSMC_MSG_GetTemperatureVrSoc            0x3B
#define PPSMC_MSG_GetTemperatureVrMem            0x3C
#define PPSMC_MSG_GetTemperatureLiquid           0x3D
#define PPSMC_MSG_GetTemperaturePlx              0x3E
#define PPSMC_MSG_OverDriveSetPercentage         0x3F
#define PPSMC_MSG_SetMinDeepSleepDcefclk         0x40
#define PPSMC_MSG_SwitchToAC                     0x41
#define PPSMC_MSG_SetUclkFastSwitch              0x42
#define PPSMC_MSG_SetUclkDownHyst                0x43
#define PPSMC_MSG_RemoveDCClamp                  0x44
#define PPSMC_MSG_GfxDeviceDriverReset           0x45
#define PPSMC_MSG_GetCurrentRpm                  0x46
#define PPSMC_MSG_SetVideoFps                    0x47
#define PPSMC_MSG_SetCustomGfxDpmParameters      0x48
#define PPSMC_MSG_SetTjMax                       0x49
#define PPSMC_MSG_SetFanTemperatureTarget        0x4A
#define PPSMC_MSG_PrepareMp1ForUnload            0x4B
#define PPSMC_MSG_RequestDisplayClockByFreq      0x4C
#define PPSMC_MSG_GetClockFreqMHz                0x4D
#define PPSMC_MSG_DramLogSetDramAddrHigh         0x4E
#define PPSMC_MSG_DramLogSetDramAddrLow          0x4F
#define PPSMC_MSG_DramLogSetDramSize             0x50
#define PPSMC_MSG_SetFanMaxRpm                   0x51
#define PPSMC_MSG_SetFanMinPwm                   0x52
#define PPSMC_MSG_ConfigureGfxDidt               0x55
#define PPSMC_MSG_NumOfDisplays                  0x56
#define PPSMC_MSG_ReadSerialNumTop32             0x58
#define PPSMC_MSG_ReadSerialNumBottom32          0x59
#define PPSMC_MSG_SetSystemVirtualDramAddrHigh   0x5A
#define PPSMC_MSG_SetSystemVirtualDramAddrLow    0x5B
#define PPSMC_MSG_RunAcgBtc                      0x5C
#define PPSMC_MSG_RunAcgInClosedLoop             0x5D
#define PPSMC_MSG_RunAcgInOpenLoop               0x5E
#define PPSMC_MSG_InitializeAcg                  0x5F
#define PPSMC_MSG_GetCurrPkgPwr                  0x61
#define PPSMC_MSG_GetAverageGfxclkActualFrequency 0x63
#define PPSMC_MSG_SetPccThrottleLevel            0x67
#define PPSMC_MSG_UpdatePkgPwrPidAlpha           0x68
#define PPSMC_Message_Count                      0x69


typedef int PPSMC_Msg;

#pragma pack(pop)

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef TONGA_PP_SMC_H
#define TONGA_PP_SMC_H

#pragma pack(push, 1)

#define PPSMC_SWSTATE_FLAG_DC				0x01
#define PPSMC_SWSTATE_FLAG_UVD				0x02
#define PPSMC_SWSTATE_FLAG_VCE				0x04
#define PPSMC_SWSTATE_FLAG_PCIE_X1			0x08

#define PPSMC_THERMAL_PROTECT_TYPE_INTERNAL             0x00
#define PPSMC_THERMAL_PROTECT_TYPE_EXTERNAL             0x01
#define PPSMC_THERMAL_PROTECT_TYPE_NONE                 0xff

#define PPSMC_SYSTEMFLAG_GPIO_DC                        0x01
#define PPSMC_SYSTEMFLAG_STEPVDDC                       0x02
#define PPSMC_SYSTEMFLAG_GDDR5                          0x04

#define PPSMC_SYSTEMFLAG_DISABLE_BABYSTEP               0x08

#define PPSMC_SYSTEMFLAG_REGULATOR_HOT                  0x10
#define PPSMC_SYSTEMFLAG_REGULATOR_HOT_ANALOG           0x20
#define PPSMC_SYSTEMFLAG_12CHANNEL                      0x40


#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_MASK              0x07
#define PPSMC_EXTRAFLAGS_AC2DC_DONT_WAIT_FOR_VBLANK     0x08

#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_GOTODPMLOWSTATE   0x00
#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_GOTOINITIALSTATE  0x01

#define PPSMC_EXTRAFLAGS_AC2DC_GPIO5_POLARITY_HIGH      0x10
#define PPSMC_EXTRAFLAGS_DRIVER_TO_GPIO17               0x20
#define PPSMC_EXTRAFLAGS_PCC_TO_GPIO17                  0x40

/* Defines for DPM 2.0 */
#define PPSMC_DPM2FLAGS_TDPCLMP                         0x01
#define PPSMC_DPM2FLAGS_PWRSHFT                         0x02
#define PPSMC_DPM2FLAGS_OCP                             0x04

/* Defines for display watermark level */

#define PPSMC_DISPLAY_WATERMARK_LOW                     0
#define PPSMC_DISPLAY_WATERMARK_HIGH                    1

/* In the HW performance level's state flags:*/
#define PPSMC_STATEFLAG_AUTO_PULSE_SKIP    0x01
#define PPSMC_STATEFLAG_POWERBOOST         0x02
#define PPSMC_STATEFLAG_PSKIP_ON_TDP_FAULT 0x04
#define PPSMC_STATEFLAG_POWERSHIFT         0x08
#define PPSMC_STATEFLAG_SLOW_READ_MARGIN   0x10
#define PPSMC_STATEFLAG_DEEPSLEEP_THROTTLE 0x20
#define PPSMC_STATEFLAG_DEEPSLEEP_BYPASS   0x40

/* Fan control algorithm:*/
#define FDO_MODE_HARDWARE 0
#define FDO_MODE_PIECE_WISE_LINEAR 1

enum FAN_CONTROL {
	FAN_CONTROL_FUZZY,
	FAN_CONTROL_TABLE
};

/* Return codes for driver to SMC communication.*/

#define PPSMC_Result_OK             ((uint16_t)0x01)
#define PPSMC_Result_NoMore         ((uint16_t)0x02)
#define PPSMC_Result_NotNow         ((uint16_t)0x03)

#define PPSMC_Result_Failed         ((uint16_t)0xFF)
#define PPSMC_Result_UnknownCmd     ((uint16_t)0xFE)
#define PPSMC_Result_UnknownVT      ((uint16_t)0xFD)

typedef uint16_t PPSMC_Result;

#define PPSMC_isERROR(x) ((uint16_t)0x80 & (x))


#define PPSMC_MSG_Halt                      ((uint16_t)0x10)
#define PPSMC_MSG_Resume                    ((uint16_t)0x11)
#define PPSMC_MSG_EnableDPMLevel            ((uint16_t)0x12)
#define PPSMC_MSG_ZeroLevelsDisabled        ((uint16_t)0x13)
#define PPSMC_MSG_OneLevelsDisabled         ((uint16_t)0x14)
#define PPSMC_MSG_TwoLevelsDisabled         ((uint16_t)0x15)
#define PPSMC_MSG_EnableThermalInterrupt    ((uint16_t)0x16)
#define PPSMC_MSG_RunningOnAC               ((uint16_t)0x17)
#define PPSMC_MSG_LevelUp                   ((uint16_t)0x18)
#define PPSMC_MSG_LevelDown                 ((uint16_t)0x19)
#define PPSMC_MSG_ResetDPMCounters          ((uint16_t)0x1a)
#define PPSMC_MSG_SwitchToSwState           ((uint16_t)0x20)

#define PPSMC_MSG_SwitchToSwStateLast       ((uint16_t)0x3f)
#define PPSMC_MSG_SwitchToInitialState      ((uint16_t)0x40)
#define PPSMC_MSG_NoForcedLevel             ((uint16_t)0x41)
#define PPSMC_MSG_ForceHigh                 ((uint16_t)0x42)
#define PPSMC_MSG_ForceMediumOrHigh         ((uint16_t)0x43)

#define PPSMC_MSG_SwitchToMinimumPower      ((uint16_t)0x51)
#define PPSMC_MSG_ResumeFromMinimumPower    ((uint16_t)0x52)
#define PPSMC_MSG_EnableCac                 ((uint16_t)0x53)
#define PPSMC_MSG_DisableCac                ((uint16_t)0x54)
#define PPSMC_DPMStateHistoryStart          ((uint16_t)0x55)
#define PPSMC_DPMStateHistoryStop           ((uint16_t)0x56)
#define PPSMC_CACHistoryStart               ((uint16_t)0x57)
#define PPSMC_CACHistoryStop                ((uint16_t)0x58)
#define PPSMC_TDPClampingActive             ((uint16_t)0x59)
#define PPSMC_TDPClampingInactive           ((uint16_t)0x5A)
#define PPSMC_StartFanControl               ((uint16_t)0x5B)
#define PPSMC_StopFanControl                ((uint16_t)0x5C)
#define PPSMC_NoDisplay                     ((uint16_t)0x5D)
#define PPSMC_HasDisplay                    ((uint16_t)0x5E)
#define PPSMC_MSG_UVDPowerOFF               ((uint16_t)0x60)
#define PPSMC_MSG_UVDPowerON                ((uint16_t)0x61)
#define PPSMC_MSG_EnableULV                 ((uint16_t)0x62)
#define PPSMC_MSG_DisableULV                ((uint16_t)0x63)
#define PPSMC_MSG_EnterULV                  ((uint16_t)0x64)
#define PPSMC_MSG_ExitULV                   ((uint16_t)0x65)
#define PPSMC_PowerShiftActive              ((uint16_t)0x6A)
#define PPSMC_PowerShiftInactive            ((uint16_t)0x6B)
#define PPSMC_OCPActive                     ((uint16_t)0x6C)
#define PPSMC_OCPInactive                   ((uint16_t)0x6D)
#define PPSMC_CACLongTermAvgEnable          ((uint16_t)0x6E)
#define PPSMC_CACLongTermAvgDisable         ((uint16_t)0x6F)
#define PPSMC_MSG_InferredStateSweep_Start  ((uint16_t)0x70)
#define PPSMC_MSG_InferredStateSweep_Stop   ((uint16_t)0x71)
#define PPSMC_MSG_SwitchToLowestInfState    ((uint16_t)0x72)
#define PPSMC_MSG_SwitchToNonInfState       ((uint16_t)0x73)
#define PPSMC_MSG_AllStateSweep_Start       ((uint16_t)0x74)
#define PPSMC_MSG_AllStateSweep_Stop        ((uint16_t)0x75)
#define PPSMC_MSG_SwitchNextLowerInfState   ((uint16_t)0x76)
#define PPSMC_MSG_SwitchNextHigherInfState  ((uint16_t)0x77)
#define PPSMC_MSG_MclkRetrainingTest        ((uint16_t)0x78)
#define PPSMC_MSG_ForceTDPClamping          ((uint16_t)0x79)
#define PPSMC_MSG_CollectCAC_PowerCorreln   ((uint16_t)0x7A)
#define PPSMC_MSG_CollectCAC_WeightCalib    ((uint16_t)0x7B)
#define PPSMC_MSG_CollectCAC_SQonly         ((uint16_t)0x7C)
#define PPSMC_MSG_CollectCAC_TemperaturePwr ((uint16_t)0x7D)

#define PPSMC_MSG_ExtremitiesTest_Start     ((uint16_t)0x7E)
#define PPSMC_MSG_ExtremitiesTest_Stop      ((uint16_t)0x7F)
#define PPSMC_FlushDataCache                ((uint16_t)0x80)
#define PPSMC_FlushInstrCache               ((uint16_t)0x81)

#define PPSMC_MSG_SetEnabledLevels          ((uint16_t)0x82)
#define PPSMC_MSG_SetForcedLevels           ((uint16_t)0x83)

#define PPSMC_MSG_ResetToDefaults           ((uint16_t)0x84)

#define PPSMC_MSG_SetForcedLevelsAndJump    ((uint16_t)0x85)
#define PPSMC_MSG_SetCACHistoryMode         ((uint16_t)0x86)
#define PPSMC_MSG_EnableDTE                 ((uint16_t)0x87)
#define PPSMC_MSG_DisableDTE                ((uint16_t)0x88)

#define PPSMC_MSG_SmcSpaceSetAddress        ((uint16_t)0x89)
#define PPSMC_MSG_ChangeNearTDPLimit        ((uint16_t)0x90)
#define PPSMC_MSG_ChangeSafePowerLimit      ((uint16_t)0x91)

#define PPSMC_MSG_DPMStateSweepStart        ((uint16_t)0x92)
#define PPSMC_MSG_DPMStateSweepStop         ((uint16_t)0x93)

#define PPSMC_MSG_OVRDDisableSCLKDS         ((uint16_t)0x94)
#define PPSMC_MSG_CancelDisableOVRDSCLKDS   ((uint16_t)0x95)
#define PPSMC_MSG_ThrottleOVRDSCLKDS        ((uint16_t)0x96)
#define PPSMC_MSG_CancelThrottleOVRDSCLKDS  ((uint16_t)0x97)
#define PPSMC_MSG_GPIO17					((uint16_t)0x98)

#define PPSMC_MSG_API_SetSvi2Volt_Vddc      ((uint16_t)0x99)
#define PPSMC_MSG_API_SetSvi2Volt_Vddci     ((uint16_t)0x9A)
#define PPSMC_MSG_API_SetSvi2Volt_Mvdd      ((uint16_t)0x9B)
#define PPSMC_MSG_API_GetSvi2Volt_Vddc      ((uint16_t)0x9C)
#define PPSMC_MSG_API_GetSvi2Volt_Vddci     ((uint16_t)0x9D)
#define PPSMC_MSG_API_GetSvi2Volt_Mvdd      ((uint16_t)0x9E)

#define PPSMC_MSG_BREAK                     ((uint16_t)0xF8)

/* Trinity Specific Messages*/
#define PPSMC_MSG_Test                      ((uint16_t) 0x100)
#define PPSMC_MSG_DPM_Voltage_Pwrmgt        ((uint16_t) 0x101)
#define PPSMC_MSG_DPM_Config                ((uint16_t) 0x102)
#define PPSMC_MSG_PM_Controller_Start       ((uint16_t) 0x103)
#define PPSMC_MSG_DPM_ForceState            ((uint16_t) 0x104)
#define PPSMC_MSG_PG_PowerDownSIMD          ((uint16_t) 0x105)
#define PPSMC_MSG_PG_PowerUpSIMD            ((uint16_t) 0x106)
#define PPSMC_MSG_PM_Controller_Stop        ((uint16_t) 0x107)
#define PPSMC_MSG_PG_SIMD_Config            ((uint16_t) 0x108)
#define PPSMC_MSG_Voltage_Cntl_Enable       ((uint16_t) 0x109)
#define PPSMC_MSG_Thermal_Cntl_Enable       ((uint16_t) 0x10a)
#define PPSMC_MSG_Reset_Service             ((uint16_t) 0x10b)
#define PPSMC_MSG_VCEPowerOFF               ((uint16_t) 0x10e)
#define PPSMC_MSG_VCEPowerON                ((uint16_t) 0x10f)
#define PPSMC_MSG_DPM_Disable_VCE_HS        ((uint16_t) 0x110)
#define PPSMC_MSG_DPM_Enable_VCE_HS         ((uint16_t) 0x111)
#define PPSMC_MSG_DPM_N_LevelsDisabled      ((uint16_t) 0x112)
#define PPSMC_MSG_DCEPowerOFF               ((uint16_t) 0x113)
#define PPSMC_MSG_DCEPowerON                ((uint16_t) 0x114)
#define PPSMC_MSG_PCIE_DDIPowerDown         ((uint16_t) 0x117)
#define PPSMC_MSG_PCIE_DDIPowerUp           ((uint16_t) 0x118)
#define PPSMC_MSG_PCIE_CascadePLLPowerDown  ((uint16_t) 0x119)
#define PPSMC_MSG_PCIE_CascadePLLPowerUp    ((uint16_t) 0x11a)
#define PPSMC_MSG_SYSPLLPowerOff            ((uint16_t) 0x11b)
#define PPSMC_MSG_SYSPLLPowerOn             ((uint16_t) 0x11c)
#define PPSMC_MSG_DCE_RemoveVoltageAdjustment   ((uint16_t) 0x11d)
#define PPSMC_MSG_DCE_AllowVoltageAdjustment    ((uint16_t) 0x11e)
#define PPSMC_MSG_DISPLAYPHYStatusNotify    ((uint16_t) 0x11f)
#define PPSMC_MSG_EnableBAPM                ((uint16_t) 0x120)
#define PPSMC_MSG_DisableBAPM               ((uint16_t) 0x121)
#define PPSMC_MSG_PCIE_PHYPowerDown         ((uint16_t) 0x122)
#define PPSMC_MSG_PCIE_PHYPowerUp           ((uint16_t) 0x123)
#define PPSMC_MSG_UVD_DPM_Config            ((uint16_t) 0x124)
#define PPSMC_MSG_Spmi_Enable               ((uint16_t) 0x122)
#define PPSMC_MSG_Spmi_Timer                ((uint16_t) 0x123)
#define PPSMC_MSG_LCLK_DPM_Config           ((uint16_t) 0x124)
#define PPSMC_MSG_NBDPM_Config             ((uint16_t) 0x125)
#define PPSMC_MSG_PCIE_DDIPhyPowerDown           ((uint16_t) 0x126)
#define PPSMC_MSG_PCIE_DDIPhyPowerUp             ((uint16_t) 0x127)
#define PPSMC_MSG_MCLKDPM_Config                ((uint16_t) 0x128)

#define PPSMC_MSG_UVDDPM_Config               ((uint16_t) 0x129)
#define PPSMC_MSG_VCEDPM_Config               ((uint16_t) 0x12A)
#define PPSMC_MSG_ACPDPM_Config               ((uint16_t) 0x12B)
#define PPSMC_MSG_SAMUDPM_Config              ((uint16_t) 0x12C)
#define PPSMC_MSG_UVDDPM_SetEnabledMask       ((uint16_t) 0x12D)
#define PPSMC_MSG_VCEDPM_SetEnabledMask       ((uint16_t) 0x12E)
#define PPSMC_MSG_ACPDPM_SetEnabledMask       ((uint16_t) 0x12F)
#define PPSMC_MSG_SAMUDPM_SetEnabledMask      ((uint16_t) 0x130)
#define PPSMC_MSG_MCLKDPM_ForceState          ((uint16_t) 0x131)
#define PPSMC_MSG_MCLKDPM_NoForcedLevel       ((uint16_t) 0x132)
#define PPSMC_MSG_Thermal_Cntl_Disable        ((uint16_t) 0x133)
#define PPSMC_MSG_SetTDPLimit                 ((uint16_t) 0x134)
#define PPSMC_MSG_Voltage_Cntl_Disable        ((uint16_t) 0x135)
#define PPSMC_MSG_PCIeDPM_Enable              ((uint16_t) 0x136)
#define PPSMC_MSG_ACPPowerOFF                 ((uint16_t) 0x137)
#define PPSMC_MSG_ACPPowerON                  ((uint16_t) 0x138)
#define PPSMC_MSG_SAMPowerOFF                 ((uint16_t) 0x139)
#define PPSMC_MSG_SAMPowerON                  ((uint16_t) 0x13a)
#define PPSMC_MSG_SDMAPowerOFF                ((uint16_t) 0x13b)
#define PPSMC_MSG_SDMAPowerON                 ((uint16_t) 0x13c)
#define PPSMC_MSG_PCIeDPM_Disable             ((uint16_t) 0x13d)
#define PPSMC_MSG_IOMMUPowerOFF               ((uint16_t) 0x13e)
#define PPSMC_MSG_IOMMUPowerON                ((uint16_t) 0x13f)
#define PPSMC_MSG_NBDPM_Enable                ((uint16_t) 0x140)
#define PPSMC_MSG_NBDPM_Disable               ((uint16_t) 0x141)
#define PPSMC_MSG_NBDPM_ForceNominal          ((uint16_t) 0x142)
#define PPSMC_MSG_NBDPM_ForcePerformance      ((uint16_t) 0x143)
#define PPSMC_MSG_NBDPM_UnForce               ((uint16_t) 0x144)
#define PPSMC_MSG_SCLKDPM_SetEnabledMask      ((uint16_t) 0x145)
#define PPSMC_MSG_MCLKDPM_SetEnabledMask      ((uint16_t) 0x146)
#define PPSMC_MSG_PCIeDPM_ForceLevel          ((uint16_t) 0x147)
#define PPSMC_MSG_PCIeDPM_UnForceLevel        ((uint16_t) 0x148)
#define PPSMC_MSG_EnableACDCGPIOInterrupt     ((uint16_t) 0x149)
#define PPSMC_MSG_EnableVRHotGPIOInterrupt    ((uint16_t) 0x14a)
#define PPSMC_MSG_SwitchToAC                  ((uint16_t) 0x14b)

#define PPSMC_MSG_XDMAPowerOFF                ((uint16_t) 0x14c)
#define PPSMC_MSG_XDMAPowerON                 ((uint16_t) 0x14d)

#define PPSMC_MSG_DPM_Enable                  ((uint16_t)0x14e)
#define PPSMC_MSG_DPM_Disable                 ((uint16_t)0x14f)
#define PPSMC_MSG_MCLKDPM_Enable              ((uint16_t)0x150)
#define PPSMC_MSG_MCLKDPM_Disable             ((uint16_t)0x151)
#define PPSMC_MSG_LCLKDPM_Enable              ((uint16_t)0x152)
#define PPSMC_MSG_LCLKDPM_Disable             ((uint16_t)0x153)
#define PPSMC_MSG_UVDDPM_Enable               ((uint16_t)0x154)
#define PPSMC_MSG_UVDDPM_Disable              ((uint16_t)0x155)
#define PPSMC_MSG_SAMUDPM_Enable              ((uint16_t)0x156)
#define PPSMC_MSG_SAMUDPM_Disable             ((uint16_t)0x157)
#define PPSMC_MSG_ACPDPM_Enable               ((uint16_t)0x158)
#define PPSMC_MSG_ACPDPM_Disable              ((uint16_t)0x159)
#define PPSMC_MSG_VCEDPM_Enable               ((uint16_t)0x15a)
#define PPSMC_MSG_VCEDPM_Disable              ((uint16_t)0x15b)
#define PPSMC_MSG_LCLKDPM_SetEnabledMask      ((uint16_t)0x15c)

#define PPSMC_MSG_DPM_FPS_Mode                ((uint16_t) 0x15d)
#define PPSMC_MSG_DPM_Activity_Mode           ((uint16_t) 0x15e)
#define PPSMC_MSG_VddC_Request                ((uint16_t) 0x15f)
#define PPSMC_MSG_MCLKDPM_GetEnabledMask      ((uint16_t) 0x160)
#define PPSMC_MSG_LCLKDPM_GetEnabledMask      ((uint16_t) 0x161)
#define PPSMC_MSG_SCLKDPM_GetEnabledMask      ((uint16_t) 0x162)
#define PPSMC_MSG_UVDDPM_GetEnabledMask       ((uint16_t) 0x163)
#define PPSMC_MSG_SAMUDPM_GetEnabledMask      ((uint16_t) 0x164)
#define PPSMC_MSG_ACPDPM_GetEnabledMask       ((uint16_t) 0x165)
#define PPSMC_MSG_VCEDPM_GetEnabledMask       ((uint16_t) 0x166)
#define PPSMC_MSG_PCIeDPM_SetEnabledMask      ((uint16_t) 0x167)
#define PPSMC_MSG_PCIeDPM_GetEnabledMask      ((uint16_t) 0x168)
#define PPSMC_MSG_TDCLimitEnable              ((uint16_t) 0x169)
#define PPSMC_MSG_TDCLimitDisable             ((uint16_t) 0x16a)
#define PPSMC_MSG_DPM_AutoRotate_Mode         ((uint16_t) 0x16b)
#define PPSMC_MSG_DISPCLK_FROM_FCH            ((uint16_t)0x16c)
#define PPSMC_MSG_DISPCLK_FROM_DFS            ((uint16_t)0x16d)
#define PPSMC_MSG_DPREFCLK_FROM_FCH           ((uint16_t)0x16e)
#define PPSMC_MSG_DPREFCLK_FROM_DFS           ((uint16_t)0x16f)
#define PPSMC_MSG_PmStatusLogStart            ((uint16_t)0x170)
#define PPSMC_MSG_PmStatusLogSample           ((uint16_t)0x171)
#define PPSMC_MSG_SCLK_AutoDPM_ON             ((uint16_t) 0x172)
#define PPSMC_MSG_MCLK_AutoDPM_ON             ((uint16_t) 0x173)
#define PPSMC_MSG_LCLK_AutoDPM_ON             ((uint16_t) 0x174)
#define PPSMC_MSG_UVD_AutoDPM_ON              ((uint16_t) 0x175)
#define PPSMC_MSG_SAMU_AutoDPM_ON             ((uint16_t) 0x176)
#define PPSMC_MSG_ACP_AutoDPM_ON              ((uint16_t) 0x177)
#define PPSMC_MSG_VCE_AutoDPM_ON              ((uint16_t) 0x178)
#define PPSMC_MSG_PCIe_AutoDPM_ON             ((uint16_t) 0x179)
#define PPSMC_MSG_MASTER_AutoDPM_ON           ((uint16_t) 0x17a)
#define PPSMC_MSG_MASTER_AutoDPM_OFF          ((uint16_t) 0x17b)
#define PPSMC_MSG_DYNAMICDISPPHYPOWER         ((uint16_t) 0x17c)
#define PPSMC_MSG_CAC_COLLECTION_ON           ((uint16_t) 0x17d)
#define PPSMC_MSG_CAC_COLLECTION_OFF          ((uint16_t) 0x17e)
#define PPSMC_MSG_CAC_CORRELATION_ON          ((uint16_t) 0x17f)
#define PPSMC_MSG_CAC_CORRELATION_OFF         ((uint16_t) 0x180)
#define PPSMC_MSG_PM_STATUS_TO_DRAM_ON        ((uint16_t) 0x181)
#define PPSMC_MSG_PM_STATUS_TO_DRAM_OFF       ((uint16_t) 0x182)
#define PPSMC_MSG_UVD_HANDSHAKE_OFF           ((uint16_t) 0x183)
#define PPSMC_MSG_ALLOW_LOWSCLK_INTERRUPT     ((uint16_t) 0x184)
#define PPSMC_MSG_PkgPwrLimitEnable           ((uint16_t) 0x185)
#define PPSMC_MSG_PkgPwrLimitDisable          ((uint16_t) 0x186)
#define PPSMC_MSG_PkgPwrSetLimit              ((uint16_t) 0x187)
#define PPSMC_MSG_OverDriveSetTargetTdp       ((uint16_t) 0x188)
#define PPSMC_MSG_SCLKDPM_FreezeLevel         ((uint16_t) 0x189)
#define PPSMC_MSG_SCLKDPM_UnfreezeLevel       ((uint16_t) 0x18A)
#define PPSMC_MSG_MCLKDPM_FreezeLevel         ((uint16_t) 0x18B)
#define PPSMC_MSG_MCLKDPM_UnfreezeLevel       ((uint16_t) 0x18C)
#define PPSMC_MSG_START_DRAM_LOGGING          ((uint16_t) 0x18D)
#define PPSMC_MSG_STOP_DRAM_LOGGING           ((uint16_t) 0x18E)
#define PPSMC_MSG_MASTER_DeepSleep_ON         ((uint16_t) 0x18F)
#define PPSMC_MSG_MASTER_DeepSleep_OFF        ((uint16_t) 0x190)
#define PPSMC_MSG_Remove_DC_Clamp             ((uint16_t) 0x191)
#define PPSMC_MSG_DisableACDCGPIOInterrupt    ((uint16_t) 0x192)
#define PPSMC_MSG_OverrideVoltageControl_SetVddc       ((uint16_t) 0x193)
#define PPSMC_MSG_OverrideVoltageControl_SetVddci      ((uint16_t) 0x194)
#define PPSMC_MSG_SetVidOffset_1              ((uint16_t) 0x195)
#define PPSMC_MSG_SetVidOffset_2              ((uint16_t) 0x207)
#define PPSMC_MSG_GetVidOffset_1              ((uint16_t) 0x196)
#define PPSMC_MSG_GetVidOffset_2              ((uint16_t) 0x208)
#define PPSMC_MSG_THERMAL_OVERDRIVE_Enable    ((uint16_t) 0x197)
#define PPSMC_MSG_THERMAL_OVERDRIVE_Disable	  ((uint16_t) 0x198)
#define PPSMC_MSG_SetTjMax                    ((uint16_t) 0x199)
#define PPSMC_MSG_SetFanPwmMax                ((uint16_t) 0x19A)

#define PPSMC_MSG_WaitForMclkSwitchFinish	  ((uint16_t) 0x19B)
#define PPSMC_MSG_ENABLE_THERMAL_DPM          ((uint16_t) 0x19C)
#define PPSMC_MSG_DISABLE_THERMAL_DPM         ((uint16_t) 0x19D)
#define PPSMC_MSG_Enable_PCC                  ((uint16_t) 0x19E)
#define PPSMC_MSG_Disable_PCC                 ((uint16_t) 0x19F)

#define PPSMC_MSG_API_GetSclkFrequency        ((uint16_t) 0x200)
#define PPSMC_MSG_API_GetMclkFrequency        ((uint16_t) 0x201)
#define PPSMC_MSG_API_GetSclkBusy             ((uint16_t) 0x202)
#define PPSMC_MSG_API_GetMclkBusy             ((uint16_t) 0x203)
#define PPSMC_MSG_API_GetAsicPower            ((uint16_t) 0x204)
#define PPSMC_MSG_SetFanRpmMax                ((uint16_t) 0x205)
#define PPSMC_MSG_SetFanSclkTarget            ((uint16_t) 0x206)
#define PPSMC_MSG_SetFanMinPwm                ((uint16_t) 0x209)
#define PPSMC_MSG_SetFanTemperatureTarget     ((uint16_t) 0x20A)

#define PPSMC_MSG_BACO_StartMonitor           ((uint16_t) 0x240)
#define PPSMC_MSG_BACO_Cancel                 ((uint16_t) 0x241)
#define PPSMC_MSG_EnableVddGfx                ((uint16_t) 0x242)
#define PPSMC_MSG_DisableVddGfx               ((uint16_t) 0x243)
#define PPSMC_MSG_UcodeAddressLow             ((uint16_t) 0x244)
#define PPSMC_MSG_UcodeAddressHigh            ((uint16_t) 0x245)
#define PPSMC_MSG_UcodeLoadStatus             ((uint16_t) 0x246)

#define PPSMC_MSG_DRV_DRAM_ADDR_HI			  ((uint16_t) 0x250)
#define PPSMC_MSG_DRV_DRAM_ADDR_LO            ((uint16_t) 0x251)
#define PPSMC_MSG_SMU_DRAM_ADDR_HI            ((uint16_t) 0x252)
#define PPSMC_MSG_SMU_DRAM_ADDR_LO            ((uint16_t) 0x253)
#define PPSMC_MSG_LoadUcodes                  ((uint16_t) 0x254)
#define PPSMC_MSG_PowerStateNotify            ((uint16_t) 0x255)
#define PPSMC_MSG_COND_EXEC_DRAM_ADDR_HI      ((uint16_t) 0x256)
#define PPSMC_MSG_COND_EXEC_DRAM_ADDR_LO      ((uint16_t) 0x257)
#define PPSMC_MSG_VBIOS_DRAM_ADDR_HI          ((uint16_t) 0x258)
#define PPSMC_MSG_VBIOS_DRAM_ADDR_LO          ((uint16_t) 0x259)
#define PPSMC_MSG_LoadVBios                   ((uint16_t) 0x25A)
#define PPSMC_MSG_GetUcodeVersion             ((uint16_t) 0x25B)
#define DMCUSMC_MSG_PSREntry                  ((uint16_t) 0x25C)
#define DMCUSMC_MSG_PSRExit                   ((uint16_t) 0x25D)
#define PPSMC_MSG_EnableClockGatingFeature    ((uint16_t) 0x260)
#define PPSMC_MSG_DisableClockGatingFeature   ((uint16_t) 0x261)
#define PPSMC_MSG_IsDeviceRunning             ((uint16_t) 0x262)
#define PPSMC_MSG_LoadMetaData                ((uint16_t) 0x263)
#define PPSMC_MSG_TMON_AutoCaliberate_Enable  ((uint16_t) 0x264)
#define PPSMC_MSG_TMON_AutoCaliberate_Disable ((uint16_t) 0x265)
#define PPSMC_MSG_GetTelemetry1Slope          ((uint16_t) 0x266)
#define PPSMC_MSG_GetTelemetry1Offset         ((uint16_t) 0x267)
#define PPSMC_MSG_GetTelemetry2Slope          ((uint16_t) 0x268)
#define PPSMC_MSG_GetTelemetry2Offset         ((uint16_t) 0x269)

typedef uint16_t PPSMC_Msg;

/* If the SMC firmware has an event status soft register this is what the individual bits mean.*/
#define PPSMC_EVENT_STATUS_THERMAL          0x00000001
#define PPSMC_EVENT_STATUS_REGULATORHOT     0x00000002
#define PPSMC_EVENT_STATUS_DC               0x00000004
#define PPSMC_EVENT_STATUS_GPIO17           0x00000008


#pragma pack(pop)
#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _SMUMGR_H_
#define _SMUMGR_H_
#include <linux/types.h>
#include "amd_powerplay.h"
#include "hwmgr.h"

enum SMU_TABLE {
	SMU_UVD_TABLE = 0,
	SMU_VCE_TABLE,
	SMU_BIF_TABLE,
};

enum SMU_TYPE {
	SMU_SoftRegisters = 0,
	SMU_Discrete_DpmTable,
};

enum SMU_MEMBER {
	HandshakeDisables = 0,
	VoltageChangeTimeout,
	AverageGraphicsActivity,
	AverageMemoryActivity,
	PreVBlankGap,
	VBlankTimeout,
	UcodeLoadStatus,
	UvdBootLevel,
	VceBootLevel,
	LowSclkInterruptThreshold,
	DRAM_LOG_ADDR_H,
	DRAM_LOG_ADDR_L,
	DRAM_LOG_PHY_ADDR_H,
	DRAM_LOG_PHY_ADDR_L,
	DRAM_LOG_BUFF_SIZE,
};


enum SMU_MAC_DEFINITION {
	SMU_MAX_LEVELS_GRAPHICS = 0,
	SMU_MAX_LEVELS_MEMORY,
	SMU_MAX_LEVELS_LINK,
	SMU_MAX_ENTRIES_SMIO,
	SMU_MAX_LEVELS_VDDC,
	SMU_MAX_LEVELS_VDDGFX,
	SMU_MAX_LEVELS_VDDCI,
	SMU_MAX_LEVELS_MVDD,
	SMU_UVD_MCLK_HANDSHAKE_DISABLE,
};

enum SMU9_TABLE_ID {
	PPTABLE = 0,
	WMTABLE,
	AVFSTABLE,
	TOOLSTABLE,
	AVFSFUSETABLE
};

enum SMU10_TABLE_ID {
	SMU10_WMTABLE = 0,
	SMU10_CLOCKTABLE,
};

extern int smum_download_powerplay_table(struct pp_hwmgr *hwmgr, void **table);

extern int smum_upload_powerplay_table(struct pp_hwmgr *hwmgr);

extern int smum_send_msg_to_smc(struct pp_hwmgr *hwmgr, uint16_t msg, uint32_t *resp);

extern int smum_send_msg_to_smc_with_parameter(struct pp_hwmgr *hwmgr,
					uint16_t msg, uint32_t parameter,
					uint32_t *resp);

extern int smum_update_sclk_threshold(struct pp_hwmgr *hwmgr);

extern int smum_update_smc_table(struct pp_hwmgr *hwmgr, uint32_t type);
extern int smum_process_firmware_header(struct pp_hwmgr *hwmgr);
extern int smum_thermal_avfs_enable(struct pp_hwmgr *hwmgr);
extern int smum_thermal_setup_fan_table(struct pp_hwmgr *hwmgr);
extern int smum_init_smc_table(struct pp_hwmgr *hwmgr);
extern int smum_populate_all_graphic_levels(struct pp_hwmgr *hwmgr);
extern int smum_populate_all_memory_levels(struct pp_hwmgr *hwmgr);
extern int smum_initialize_mc_reg_table(struct pp_hwmgr *hwmgr);
extern uint32_t smum_get_offsetof(struct pp_hwmgr *hwmgr,
				uint32_t type, uint32_t member);
extern uint32_t smum_get_mac_definition(struct pp_hwmgr *hwmgr, uint32_t value);

extern bool smum_is_dpm_running(struct pp_hwmgr *hwmgr);

extern bool smum_is_hw_avfs_present(struct pp_hwmgr *hwmgr);

extern int smum_update_dpm_settings(struct pp_hwmgr *hwmgr, void *profile_setting);

extern int smum_smc_table_manager(struct pp_hwmgr *hwmgr, uint8_t *table, uint16_t table_id, bool rw);

extern int smum_stop_smc(struct pp_hwmgr *hwmgr);

#endif
/*
 * Copyright 2014 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU_UCODE_XFER_VI_H
#define SMU_UCODE_XFER_VI_H

#define SMU_DRAMData_TOC_VERSION  1
#define MAX_IH_REGISTER_COUNT     65535
#define SMU_DIGEST_SIZE_BYTES     20
#define SMU_FB_SIZE_BYTES         1048576
#define SMU_MAX_ENTRIES           12

#define UCODE_ID_SMU              0
#define UCODE_ID_SDMA0            1
#define UCODE_ID_SDMA1            2
#define UCODE_ID_CP_CE            3
#define UCODE_ID_CP_PFP           4
#define UCODE_ID_CP_ME            5
#define UCODE_ID_CP_MEC           6
#define UCODE_ID_CP_MEC_JT1       7
#define UCODE_ID_CP_MEC_JT2       8
#define UCODE_ID_GMCON_RENG       9
#define UCODE_ID_RLC_G            10
#define UCODE_ID_IH_REG_RESTORE   11
#define UCODE_ID_VBIOS            12
#define UCODE_ID_MISC_METADATA    13
#define UCODE_ID_SMU_SK		      14
#define UCODE_ID_RLC_SCRATCH      32
#define UCODE_ID_RLC_SRM_ARAM     33
#define UCODE_ID_RLC_SRM_DRAM     34
#define UCODE_ID_MEC_STORAGE      35
#define UCODE_ID_VBIOS_PARAMETERS 36
#define UCODE_META_DATA           0xFF

#define UCODE_ID_SMU_MASK             0x00000001
#define UCODE_ID_SDMA0_MASK           0x00000002
#define UCODE_ID_SDMA1_MASK           0x00000004
#define UCODE_ID_CP_CE_MASK           0x00000008
#define UCODE_ID_CP_PFP_MASK          0x00000010
#define UCODE_ID_CP_ME_MASK           0x00000020
#define UCODE_ID_CP_MEC_MASK          0x00000040
#define UCODE_ID_CP_MEC_JT1_MASK      0x00000080
#define UCODE_ID_CP_MEC_JT2_MASK      0x00000100
#define UCODE_ID_GMCON_RENG_MASK      0x00000200
#define UCODE_ID_RLC_G_MASK           0x00000400
#define UCODE_ID_IH_REG_RESTORE_MASK  0x00000800
#define UCODE_ID_VBIOS_MASK           0x00001000

#define UCODE_FLAG_UNHALT_MASK   0x1

struct SMU_Entry {
#ifndef __BIG_ENDIAN
	uint16_t id;
	uint16_t version;
	uint32_t image_addr_high;
	uint32_t image_addr_low;
	uint32_t meta_data_addr_high;
	uint32_t meta_data_addr_low;
	uint32_t data_size_byte;
	uint16_t flags;
	uint16_t num_register_entries;
#else
	uint16_t version;
	uint16_t id;
	uint32_t image_addr_high;
	uint32_t image_addr_low;
	uint32_t meta_data_addr_high;
	uint32_t meta_data_addr_low;
	uint32_t data_size_byte;
	uint16_t num_register_entries;
	uint16_t flags;
#endif
};

struct SMU_DRAMData_TOC {
	uint32_t structure_version;
	uint32_t num_entries;
	struct SMU_Entry entry[SMU_MAX_ENTRIES];
};

#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
// CZ Ucode Loading Definitions
#ifndef SMU_UCODE_XFER_CZ_H
#define SMU_UCODE_XFER_CZ_H

#define NUM_JOBLIST_ENTRIES      32

#define TASK_TYPE_NO_ACTION      0
#define TASK_TYPE_UCODE_LOAD     1
#define TASK_TYPE_UCODE_SAVE     2
#define TASK_TYPE_REG_LOAD       3
#define TASK_TYPE_REG_SAVE       4
#define TASK_TYPE_INITIALIZE     5

#define TASK_ARG_REG_SMCIND      0
#define TASK_ARG_REG_MMIO        1
#define TASK_ARG_REG_FCH         2
#define TASK_ARG_REG_UNB         3

#define TASK_ARG_INIT_MM_PWR_LOG 0
#define TASK_ARG_INIT_CLK_TABLE  1

#define JOB_GFX_SAVE             0
#define JOB_GFX_RESTORE          1
#define JOB_FCH_SAVE             2
#define JOB_FCH_RESTORE          3
#define JOB_UNB_SAVE             4
#define JOB_UNB_RESTORE          5
#define JOB_GMC_SAVE             6
#define JOB_GMC_RESTORE          7
#define JOB_GNB_SAVE             8
#define JOB_GNB_RESTORE          9

#define IGNORE_JOB               0xff
#define END_OF_TASK_LIST     (uint16_t)0xffff

// Size of DRAM regions (in bytes) requested by SMU:
#define SMU_DRAM_REQ_MM_PWR_LOG 48 

#define UCODE_ID_SDMA0           0
#define UCODE_ID_SDMA1           1
#define UCODE_ID_CP_CE           2
#define UCODE_ID_CP_PFP          3
#define UCODE_ID_CP_ME           4
#define UCODE_ID_CP_MEC_JT1      5
#define UCODE_ID_CP_MEC_JT2      6
#define UCODE_ID_GMCON_RENG      7
#define UCODE_ID_RLC_G           8
#define UCODE_ID_RLC_SCRATCH     9
#define UCODE_ID_RLC_SRM_ARAM    10
#define UCODE_ID_RLC_SRM_DRAM    11
#define UCODE_ID_DMCU_ERAM       12
#define UCODE_ID_DMCU_IRAM       13

#define UCODE_ID_SDMA0_MASK           0x00000001       
#define UCODE_ID_SDMA1_MASK           0x00000002        
#define UCODE_ID_CP_CE_MASK           0x00000004      
#define UCODE_ID_CP_PFP_MASK          0x00000008         
#define UCODE_ID_CP_ME_MASK           0x00000010          
#define UCODE_ID_CP_MEC_JT1_MASK      0x00000020             
#define UCODE_ID_CP_MEC_JT2_MASK      0x00000040          
#define UCODE_ID_GMCON_RENG_MASK      0x00000080            
#define UCODE_ID_RLC_G_MASK           0x00000100           
#define UCODE_ID_RLC_SCRATCH_MASK     0x00000200         
#define UCODE_ID_RLC_SRM_ARAM_MASK    0x00000400                
#define UCODE_ID_RLC_SRM_DRAM_MASK    0x00000800                 
#define UCODE_ID_DMCU_ERAM_MASK       0x00001000             
#define UCODE_ID_DMCU_IRAM_MASK       0x00002000              

#define UCODE_ID_SDMA0_SIZE_BYTE           10368        
#define UCODE_ID_SDMA1_SIZE_BYTE           10368          
#define UCODE_ID_CP_CE_SIZE_BYTE           8576        
#define UCODE_ID_CP_PFP_SIZE_BYTE          16768           
#define UCODE_ID_CP_ME_SIZE_BYTE           16768            
#define UCODE_ID_CP_MEC_JT1_SIZE_BYTE      384               
#define UCODE_ID_CP_MEC_JT2_SIZE_BYTE      384            
#define UCODE_ID_GMCON_RENG_SIZE_BYTE      4096              
#define UCODE_ID_RLC_G_SIZE_BYTE           2048             
#define UCODE_ID_RLC_SCRATCH_SIZE_BYTE     132           
#define UCODE_ID_RLC_SRM_ARAM_SIZE_BYTE    8192                  
#define UCODE_ID_RLC_SRM_DRAM_SIZE_BYTE    4096                   
#define UCODE_ID_DMCU_ERAM_SIZE_BYTE       24576               
#define UCODE_ID_DMCU_IRAM_SIZE_BYTE       1024                 

#define NUM_UCODES               14

typedef struct {
	uint32_t high;
	uint32_t low;
} data_64_t;

struct SMU_Task {
    uint8_t type;
    uint8_t arg;
    uint16_t next;
    data_64_t addr;
    uint32_t size_bytes;
};
typedef struct SMU_Task SMU_Task;

struct TOC {
    uint8_t JobList[NUM_JOBLIST_ENTRIES];
    SMU_Task tasks[];
};

// META DATA COMMAND Definitions
#define METADATA_CMD_MODE0         0x00000103 
#define METADATA_CMD_MODE1         0x00000113 
#define METADATA_CMD_MODE2         0x00000123 
#define METADATA_CMD_MODE3         0x00000133
#define METADATA_CMD_DELAY         0x00000203
#define METADATA_CMD_CHNG_REGSPACE 0x00000303
#define METADATA_PERFORM_ON_SAVE   0x00001000
#define METADATA_PERFORM_ON_LOAD   0x00002000
#define METADATA_CMD_ARG_MASK      0xFFFF0000
#define METADATA_CMD_ARG_SHIFT     16

// Simple register addr/data fields
struct SMU_MetaData_Mode0 {
    uint32_t register_address;
    uint32_t register_data;
};
typedef struct SMU_MetaData_Mode0 SMU_MetaData_Mode0;

// Register addr/data with mask
struct SMU_MetaData_Mode1 {
    uint32_t register_address;
    uint32_t register_mask;
    uint32_t register_data;
};
typedef struct SMU_MetaData_Mode1 SMU_MetaData_Mode1;

struct SMU_MetaData_Mode2 {
    uint32_t register_address;
    uint32_t register_mask;
    uint32_t target_value;
};
typedef struct SMU_MetaData_Mode2 SMU_MetaData_Mode2;

// Always write data (even on a save operation)
struct SMU_MetaData_Mode3 {
    uint32_t register_address;
    uint32_t register_mask;
    uint32_t register_data;
};
typedef struct SMU_MetaData_Mode3 SMU_MetaData_Mode3;

#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU9_DRIVER_IF_H
#define SMU9_DRIVER_IF_H

#include "smu9.h"

/**** IMPORTANT ***
 * SMU TEAM: Always increment the interface version if
 * any structure is changed in this file
 */
#define SMU9_DRIVER_IF_VERSION 0xE

#define PPTABLE_V10_SMU_VERSION 1

#define NUM_GFXCLK_DPM_LEVELS  8
#define NUM_UVD_DPM_LEVELS     8
#define NUM_VCE_DPM_LEVELS     8
#define NUM_MP0CLK_DPM_LEVELS  8
#define NUM_UCLK_DPM_LEVELS    4
#define NUM_SOCCLK_DPM_LEVELS  8
#define NUM_DCEFCLK_DPM_LEVELS 8
#define NUM_LINK_LEVELS        2

#define MAX_GFXCLK_DPM_LEVEL  (NUM_GFXCLK_DPM_LEVELS  - 1)
#define MAX_UVD_DPM_LEVEL     (NUM_UVD_DPM_LEVELS     - 1)
#define MAX_VCE_DPM_LEVEL     (NUM_VCE_DPM_LEVELS     - 1)
#define MAX_MP0CLK_DPM_LEVEL  (NUM_MP0CLK_DPM_LEVELS  - 1)
#define MAX_UCLK_DPM_LEVEL    (NUM_UCLK_DPM_LEVELS    - 1)
#define MAX_SOCCLK_DPM_LEVEL  (NUM_SOCCLK_DPM_LEVELS  - 1)
#define MAX_DCEFCLK_DPM_LEVEL (NUM_DCEFCLK_DPM_LEVELS - 1)
#define MAX_LINK_DPM_LEVEL    (NUM_LINK_LEVELS        - 1)

#define MIN_GFXCLK_DPM_LEVEL  0
#define MIN_UVD_DPM_LEVEL     0
#define MIN_VCE_DPM_LEVEL     0
#define MIN_MP0CLK_DPM_LEVEL  0
#define MIN_UCLK_DPM_LEVEL    0
#define MIN_SOCCLK_DPM_LEVEL  0
#define MIN_DCEFCLK_DPM_LEVEL 0
#define MIN_LINK_DPM_LEVEL    0

#define NUM_EVV_VOLTAGE_LEVELS 8
#define MAX_EVV_VOLTAGE_LEVEL (NUM_EVV_VOLTAGE_LEVELS - 1)
#define MIN_EVV_VOLTAGE_LEVEL 0

#define NUM_PSP_LEVEL_MAP 4

/* Gemini Modes */
#define PPSMC_GeminiModeNone   0  /* Single GPU board */
#define PPSMC_GeminiModeMaster 1  /* Master GPU on a Gemini board */
#define PPSMC_GeminiModeSlave  2  /* Slave GPU on a Gemini board */

/* Voltage Modes for DPMs */
#define VOLTAGE_MODE_AVFS_INTERPOLATE 0
#define VOLTAGE_MODE_AVFS_WORST_CASE  1
#define VOLTAGE_MODE_STATIC           2

typedef struct {
  uint32_t FbMult; /* Feedback Multiplier, bit 8:0 int, bit 15:12 post_div, bit 31:16 frac */
  uint32_t SsFbMult; /* Spread FB Mult: bit 8:0 int, bit 31:16 frac */
  uint16_t SsSlewFrac;
  uint8_t  SsOn;
  uint8_t  Did;      /* DID */
} PllSetting_t;

typedef struct {
  int32_t a0;
  int32_t a1;
  int32_t a2;

  uint8_t a0_shift;
  uint8_t a1_shift;
  uint8_t a2_shift;
  uint8_t padding;
} GbVdroopTable_t;

typedef struct {
  int32_t m1;
  int32_t m2;
  int32_t b;

  uint8_t m1_shift;
  uint8_t m2_shift;
  uint8_t b_shift;
  uint8_t padding;
} QuadraticInt_t;

#define NUM_DSPCLK_LEVELS 8

typedef enum {
  DSPCLK_DCEFCLK = 0,
  DSPCLK_DISPCLK,
  DSPCLK_PIXCLK,
  DSPCLK_PHYCLK,
  DSPCLK_COUNT,
} DSPCLK_e;

typedef struct {
  uint16_t Freq; /* in MHz */
  uint16_t Vid;  /* min voltage in SVI2 VID */
} DisplayClockTable_t;

typedef struct {
  /* PowerTune */
  uint16_t SocketPowerLimit; /* Watts */
  uint16_t TdcLimit;         /* Amps */
  uint16_t EdcLimit;         /* Amps */
  uint16_t TedgeLimit;       /* Celcius */
  uint16_t ThotspotLimit;    /* Celcius */
  uint16_t ThbmLimit;        /* Celcius */
  uint16_t Tvr_socLimit;     /* Celcius */
  uint16_t Tvr_memLimit;     /* Celcius */
  uint16_t Tliquid1Limit;    /* Celcius */
  uint16_t Tliquid2Limit;    /* Celcius */
  uint16_t TplxLimit;        /* Celcius */
  uint16_t LoadLineResistance; /* in mOhms */
  uint32_t FitLimit;         /* Failures in time (failures per million parts over the defined lifetime) */

  /* External Component Communication Settings */
  uint8_t  Liquid1_I2C_address;
  uint8_t  Liquid2_I2C_address;
  uint8_t  Vr_I2C_address;
  uint8_t  Plx_I2C_address;

  uint8_t  GeminiMode;
  uint8_t  spare17[3];
  uint32_t GeminiApertureHigh;
  uint32_t GeminiApertureLow;

  uint8_t  Liquid_I2C_LineSCL;
  uint8_t  Liquid_I2C_LineSDA;
  uint8_t  Vr_I2C_LineSCL;
  uint8_t  Vr_I2C_LineSDA;
  uint8_t  Plx_I2C_LineSCL;
  uint8_t  Plx_I2C_LineSDA;
  uint8_t  paddingx[2];

  /* ULV Settings */
  uint8_t  UlvOffsetVid;     /* SVI2 VID */
  uint8_t  UlvSmnclkDid;     /* DID for ULV mode. 0 means CLK will not be modified in ULV. */
  uint8_t  UlvMp1clkDid;     /* DID for ULV mode. 0 means CLK will not be modified in ULV. */
  uint8_t  UlvGfxclkBypass;  /* 1 to turn off/bypass Gfxclk during ULV, 0 to leave Gfxclk on during ULV */

  /* VDDCR_SOC Voltages */
  uint8_t      SocVid[NUM_EVV_VOLTAGE_LEVELS];

  /* This is the minimum voltage needed to run the SOC. */
  uint8_t      MinVoltageVid; /* Minimum Voltage ("Vmin") of ASIC */
  uint8_t      MaxVoltageVid; /* Maximum Voltage allowable */
  uint8_t      MaxVidStep; /* Max VID step that SMU will request. Multiple steps are taken if voltage change exceeds this value. */
  uint8_t      padding8;

  uint8_t      UlvPhaseSheddingPsi0; /* set this to 1 to set PSI0/1 to 1 in ULV mode */
  uint8_t      UlvPhaseSheddingPsi1; /* set this to 1 to set PSI0/1 to 1 in ULV mode */
  uint8_t      padding8_2[2];

  /* SOC Frequencies */
  PllSetting_t GfxclkLevel        [NUM_GFXCLK_DPM_LEVELS];

  uint8_t      SocclkDid          [NUM_SOCCLK_DPM_LEVELS];          /* DID */
  uint8_t      SocDpmVoltageIndex [NUM_SOCCLK_DPM_LEVELS];

  uint8_t      VclkDid            [NUM_UVD_DPM_LEVELS];            /* DID */
  uint8_t      DclkDid            [NUM_UVD_DPM_LEVELS];            /* DID */
  uint8_t      UvdDpmVoltageIndex [NUM_UVD_DPM_LEVELS];

  uint8_t      EclkDid            [NUM_VCE_DPM_LEVELS];            /* DID */
  uint8_t      VceDpmVoltageIndex [NUM_VCE_DPM_LEVELS];

  uint8_t      Mp0clkDid          [NUM_MP0CLK_DPM_LEVELS];          /* DID */
  uint8_t      Mp0DpmVoltageIndex [NUM_MP0CLK_DPM_LEVELS];

  DisplayClockTable_t DisplayClockTable[DSPCLK_COUNT][NUM_DSPCLK_LEVELS];
  QuadraticInt_t      DisplayClock2Gfxclk[DSPCLK_COUNT];

  uint8_t      GfxDpmVoltageMode;
  uint8_t      SocDpmVoltageMode;
  uint8_t      UclkDpmVoltageMode;
  uint8_t      UvdDpmVoltageMode;

  uint8_t      VceDpmVoltageMode;
  uint8_t      Mp0DpmVoltageMode;
  uint8_t      DisplayDpmVoltageMode;
  uint8_t      padding8_3;

  uint16_t     GfxclkSlewRate;
  uint16_t     padding;

  uint32_t     LowGfxclkInterruptThreshold;  /* in units of 10KHz */

  /* Alpha parameters for clock averages. ("255"=1) */
  uint8_t      GfxclkAverageAlpha;
  uint8_t      SocclkAverageAlpha;
  uint8_t      UclkAverageAlpha;
  uint8_t      GfxActivityAverageAlpha;

  /* UCLK States */
  uint8_t      MemVid[NUM_UCLK_DPM_LEVELS];    /* VID */
  PllSetting_t UclkLevel[NUM_UCLK_DPM_LEVELS];   /* Full PLL settings */
  uint8_t      MemSocVoltageIndex[NUM_UCLK_DPM_LEVELS];
  uint8_t      LowestUclkReservedForUlv; /* Set this to 1 if UCLK DPM0 is reserved for ULV-mode only */
  uint8_t      paddingUclk[3];
  uint16_t     NumMemoryChannels;  /* Used for memory bandwidth calculations */
  uint16_t     MemoryChannelWidth; /* Used for memory bandwidth calculations */

  /* CKS Settings */
  uint8_t      CksEnable[NUM_GFXCLK_DPM_LEVELS];
  uint8_t      CksVidOffset[NUM_GFXCLK_DPM_LEVELS];

  /* MP0 Mapping Table */
  uint8_t      PspLevelMap[NUM_PSP_LEVEL_MAP];

  /* Link DPM Settings */
  uint8_t     PcieGenSpeed[NUM_LINK_LEVELS];           /* 0:PciE-gen1 1:PciE-gen2 2:PciE-gen3 */
  uint8_t     PcieLaneCount[NUM_LINK_LEVELS];          /* 1=x1, 2=x2, 3=x4, 4=x8, 5=x12, 6=x16 */
  uint8_t     LclkDid[NUM_LINK_LEVELS];                /* Leave at 0 to use hardcoded values in FW */
  uint8_t     paddingLinkDpm[2];

  /* Fan Control */
  uint16_t     FanStopTemp;          /* Celcius */
  uint16_t     FanStartTemp;         /* Celcius */

  uint16_t     FanGainEdge;
  uint16_t     FanGainHotspot;
  uint16_t     FanGainLiquid;
  uint16_t     FanGainVrVddc;
  uint16_t     FanGainVrMvdd;
  uint16_t     FanGainPlx;
  uint16_t     FanGainHbm;
  uint16_t     FanPwmMin;
  uint16_t     FanAcousticLimitRpm;
  uint16_t     FanThrottlingRpm;
  uint16_t     FanMaximumRpm;
  uint16_t     FanTargetTemperature;
  uint16_t     FanTargetGfxclk;
  uint8_t      FanZeroRpmEnable;
  uint8_t      FanSpare;

  /* The following are AFC override parameters. Leave at 0 to use FW defaults. */
  int16_t      FuzzyFan_ErrorSetDelta;
  int16_t      FuzzyFan_ErrorRateSetDelta;
  int16_t      FuzzyFan_PwmSetDelta;
  uint16_t     FuzzyFan_Reserved;

  /* GPIO Settings */
  uint8_t      AcDcGpio;        /* GPIO pin configured for AC/DC switching */
  uint8_t      AcDcPolarity;    /* GPIO polarity for AC/DC switching */
  uint8_t      VR0HotGpio;      /* GPIO pin configured for VR0 HOT event */
  uint8_t      VR0HotPolarity;  /* GPIO polarity for VR0 HOT event */
  uint8_t      VR1HotGpio;      /* GPIO pin configured for VR1 HOT event */
  uint8_t      VR1HotPolarity;  /* GPIO polarity for VR1 HOT event */
  uint8_t      Padding1;       /* replace GPIO pin configured for CTF */
  uint8_t      Padding2;       /* replace GPIO polarity for CTF */

  /* LED Display Settings */
  uint8_t      LedPin0;         /* GPIO number for LedPin[0] */
  uint8_t      LedPin1;         /* GPIO number for LedPin[1] */
  uint8_t      LedPin2;         /* GPIO number for LedPin[2] */
  uint8_t      padding8_4;

  /* AVFS */
  uint8_t      OverrideBtcGbCksOn;
  uint8_t      OverrideAvfsGbCksOn;
  uint8_t      PaddingAvfs8[2];

  GbVdroopTable_t BtcGbVdroopTableCksOn;
  GbVdroopTable_t BtcGbVdroopTableCksOff;

  QuadraticInt_t  AvfsGbCksOn;  /* Replacement equation */
  QuadraticInt_t  AvfsGbCksOff; /* Replacement equation */

  uint8_t      StaticVoltageOffsetVid[NUM_GFXCLK_DPM_LEVELS]; /* This values are added on to the final voltage calculation */

  /* Ageing Guardband Parameters */
  uint32_t     AConstant[3];
  uint16_t     DC_tol_sigma;
  uint16_t     Platform_mean;
  uint16_t     Platform_sigma;
  uint16_t     PSM_Age_CompFactor;

  uint32_t     DpmLevelPowerDelta;

  uint8_t      EnableBoostState;
  uint8_t      AConstant_Shift;
  uint8_t      DC_tol_sigma_Shift;
  uint8_t      PSM_Age_CompFactor_Shift;

  uint16_t     BoostStartTemperature;
  uint16_t     BoostStopTemperature;

  PllSetting_t GfxBoostState;

  uint8_t      AcgEnable[NUM_GFXCLK_DPM_LEVELS];
  GbVdroopTable_t AcgBtcGbVdroopTable;
  QuadraticInt_t  AcgAvfsGb;

  /* ACG Frequency Table, in Mhz */
  uint32_t     AcgFreqTable[NUM_GFXCLK_DPM_LEVELS];

  /* Padding - ignore */
  uint32_t     MmHubPadding[3]; /* SMU internal use */

} PPTable_t;

typedef struct {
  uint16_t MinClock; // This is either DCEFCLK or SOCCLK (in MHz)
  uint16_t MaxClock; // This is either DCEFCLK or SOCCLK (in MHz)
  uint16_t MinUclk;
  uint16_t MaxUclk;

  uint8_t  WmSetting;
  uint8_t  Padding[3];
} WatermarkRowGeneric_t;

#define NUM_WM_RANGES 4

typedef enum {
  WM_SOCCLK = 0,
  WM_DCEFCLK,
  WM_COUNT,
} WM_CLOCK_e;

typedef struct {
  /* Watermarks */
  WatermarkRowGeneric_t WatermarkRow[WM_COUNT][NUM_WM_RANGES];

  uint32_t     MmHubPadding[7]; /* SMU internal use */
} Watermarks_t;

#ifdef PPTABLE_V10_SMU_VERSION
typedef struct {
  float        AvfsGbCksOn[NUM_GFXCLK_DPM_LEVELS];
  float        AcBtcGbCksOn[NUM_GFXCLK_DPM_LEVELS];
  float        AvfsGbCksOff[NUM_GFXCLK_DPM_LEVELS];
  float        AcBtcGbCksOff[NUM_GFXCLK_DPM_LEVELS];
  float        DcBtcGb;

  uint32_t     MmHubPadding[7]; /* SMU internal use */
} AvfsTable_t;
#else
typedef struct {
  uint32_t     AvfsGbCksOn[NUM_GFXCLK_DPM_LEVELS];
  uint32_t     AcBtcGbCksOn[NUM_GFXCLK_DPM_LEVELS];
  uint32_t     AvfsGbCksOff[NUM_GFXCLK_DPM_LEVELS];
  uint32_t     AcBtcGbCksOff[NUM_GFXCLK_DPM_LEVELS];
  uint32_t     DcBtcGb;

  uint32_t     MmHubPadding[7]; /* SMU internal use */
} AvfsTable_t;
#endif

typedef struct {
  uint16_t avgPsmCount[30];
  uint16_t minPsmCount[30];
  float    avgPsmVoltage[30];
  float    minPsmVoltage[30];

  uint32_t MmHubPadding[7]; /* SMU internal use */
} AvfsDebugTable_t;

typedef struct {
  uint8_t  AvfsEn;
  uint8_t  AvfsVersion;
  uint8_t  Padding[2];

  int32_t VFT0_m1; /* Q8.24 */
  int32_t VFT0_m2; /* Q12.12 */
  int32_t VFT0_b;  /* Q32 */

  int32_t VFT1_m1; /* Q8.16 */
  int32_t VFT1_m2; /* Q12.12 */
  int32_t VFT1_b;  /* Q32 */

  int32_t VFT2_m1; /* Q8.16 */
  int32_t VFT2_m2; /* Q12.12 */
  int32_t VFT2_b;  /* Q32 */

  int32_t AvfsGb0_m1; /* Q8.16 */
  int32_t AvfsGb0_m2; /* Q12.12 */
  int32_t AvfsGb0_b;  /* Q32 */

  int32_t AcBtcGb_m1; /* Q8.24 */
  int32_t AcBtcGb_m2; /* Q12.12 */
  int32_t AcBtcGb_b;  /* Q32 */

  uint32_t AvfsTempCold;
  uint32_t AvfsTempMid;
  uint32_t AvfsTempHot;

  uint32_t InversionVoltage; /*  in mV with 2 fractional bits */

  int32_t P2V_m1; /* Q8.24 */
  int32_t P2V_m2; /* Q12.12 */
  int32_t P2V_b;  /* Q32 */

  uint32_t P2VCharzFreq; /* in 10KHz units */

  uint32_t EnabledAvfsModules;

  uint32_t MmHubPadding[7]; /* SMU internal use */
} AvfsFuseOverride_t;

/* These defines are used with the following messages:
 * SMC_MSG_TransferTableDram2Smu
 * SMC_MSG_TransferTableSmu2Dram
 */
#define TABLE_PPTABLE            0
#define TABLE_WATERMARKS         1
#define TABLE_AVFS               2
#define TABLE_AVFS_PSM_DEBUG     3
#define TABLE_AVFS_FUSE_OVERRIDE 4
#define TABLE_PMSTATUSLOG        5
#define TABLE_COUNT              6

/* These defines are used with the SMC_MSG_SetUclkFastSwitch message. */
#define UCLK_SWITCH_SLOW 0
#define UCLK_SWITCH_FAST 1

/* GFX DIDT Configuration */
#define SQ_Enable_MASK 0x1
#define SQ_IR_MASK 0x2
#define SQ_PCC_MASK 0x4
#define SQ_EDC_MASK 0x8

#define TCP_Enable_MASK 0x100
#define TCP_IR_MASK 0x200
#define TCP_PCC_MASK 0x400
#define TCP_EDC_MASK 0x800

#define TD_Enable_MASK 0x10000
#define TD_IR_MASK 0x20000
#define TD_PCC_MASK 0x40000
#define TD_EDC_MASK 0x80000

#define DB_Enable_MASK 0x1000000
#define DB_IR_MASK 0x2000000
#define DB_PCC_MASK 0x4000000
#define DB_EDC_MASK 0x8000000

#define SQ_Enable_SHIFT 0
#define SQ_IR_SHIFT 1
#define SQ_PCC_SHIFT 2
#define SQ_EDC_SHIFT 3

#define TCP_Enable_SHIFT 8
#define TCP_IR_SHIFT 9
#define TCP_PCC_SHIFT 10
#define TCP_EDC_SHIFT 11

#define TD_Enable_SHIFT 16
#define TD_IR_SHIFT 17
#define TD_PCC_SHIFT 18
#define TD_EDC_SHIFT 19

#define DB_Enable_SHIFT 24
#define DB_IR_SHIFT 25
#define DB_PCC_SHIFT 26
#define DB_EDC_SHIFT 27

#define REMOVE_FMAX_MARGIN_BIT     0x0
#define REMOVE_DCTOL_MARGIN_BIT    0x1
#define REMOVE_PLATFORM_MARGIN_BIT 0x2

#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU9_H
#define SMU9_H

#pragma pack(push, 1)

#define ENABLE_DEBUG_FEATURES

/* Feature Control Defines */
#define FEATURE_DPM_PREFETCHER_BIT      0
#define FEATURE_DPM_GFXCLK_BIT          1
#define FEATURE_DPM_UCLK_BIT            2
#define FEATURE_DPM_SOCCLK_BIT          3
#define FEATURE_DPM_UVD_BIT             4
#define FEATURE_DPM_VCE_BIT             5
#define FEATURE_ULV_BIT                 6
#define FEATURE_DPM_MP0CLK_BIT          7
#define FEATURE_DPM_LINK_BIT            8
#define FEATURE_DPM_DCEFCLK_BIT         9
#define FEATURE_AVFS_BIT                10
#define FEATURE_DS_GFXCLK_BIT           11
#define FEATURE_DS_SOCCLK_BIT           12
#define FEATURE_DS_LCLK_BIT             13
#define FEATURE_PPT_BIT                 14
#define FEATURE_TDC_BIT                 15
#define FEATURE_THERMAL_BIT             16
#define FEATURE_GFX_PER_CU_CG_BIT       17
#define FEATURE_RM_BIT                  18
#define FEATURE_DS_DCEFCLK_BIT          19
#define FEATURE_ACDC_BIT                20
#define FEATURE_VR0HOT_BIT              21
#define FEATURE_VR1HOT_BIT              22
#define FEATURE_FW_CTF_BIT              23
#define FEATURE_LED_DISPLAY_BIT         24
#define FEATURE_FAN_CONTROL_BIT         25
#define FEATURE_FAST_PPT_BIT            26
#define FEATURE_GFX_EDC_BIT             27
#define FEATURE_ACG_BIT                 28
#define FEATURE_PCC_LIMIT_CONTROL_BIT   29
#define FEATURE_SPARE_30_BIT            30
#define FEATURE_SPARE_31_BIT            31

#define NUM_FEATURES                    32

#define FFEATURE_DPM_PREFETCHER_MASK     (1 << FEATURE_DPM_PREFETCHER_BIT     )
#define FFEATURE_DPM_GFXCLK_MASK         (1 << FEATURE_DPM_GFXCLK_BIT         )
#define FFEATURE_DPM_UCLK_MASK           (1 << FEATURE_DPM_UCLK_BIT           )
#define FFEATURE_DPM_SOCCLK_MASK         (1 << FEATURE_DPM_SOCCLK_BIT         )
#define FFEATURE_DPM_UVD_MASK            (1 << FEATURE_DPM_UVD_BIT            )
#define FFEATURE_DPM_VCE_MASK            (1 << FEATURE_DPM_VCE_BIT            )
#define FFEATURE_ULV_MASK                (1 << FEATURE_ULV_BIT                )
#define FFEATURE_DPM_MP0CLK_MASK         (1 << FEATURE_DPM_MP0CLK_BIT         )
#define FFEATURE_DPM_LINK_MASK           (1 << FEATURE_DPM_LINK_BIT           )
#define FFEATURE_DPM_DCEFCLK_MASK        (1 << FEATURE_DPM_DCEFCLK_BIT        )
#define FFEATURE_AVFS_MASK               (1 << FEATURE_AVFS_BIT               )
#define FFEATURE_DS_GFXCLK_MASK          (1 << FEATURE_DS_GFXCLK_BIT          )
#define FFEATURE_DS_SOCCLK_MASK          (1 << FEATURE_DS_SOCCLK_BIT          )
#define FFEATURE_DS_LCLK_MASK            (1 << FEATURE_DS_LCLK_BIT            )
#define FFEATURE_PPT_MASK                (1 << FEATURE_PPT_BIT                )
#define FFEATURE_TDC_MASK                (1 << FEATURE_TDC_BIT                )
#define FFEATURE_THERMAL_MASK            (1 << FEATURE_THERMAL_BIT            )
#define FFEATURE_GFX_PER_CU_CG_MASK      (1 << FEATURE_GFX_PER_CU_CG_BIT      )
#define FFEATURE_RM_MASK                 (1 << FEATURE_RM_BIT                 )
#define FFEATURE_DS_DCEFCLK_MASK         (1 << FEATURE_DS_DCEFCLK_BIT         )
#define FFEATURE_ACDC_MASK               (1 << FEATURE_ACDC_BIT               )
#define FFEATURE_VR0HOT_MASK             (1 << FEATURE_VR0HOT_BIT             )
#define FFEATURE_VR1HOT_MASK             (1 << FEATURE_VR1HOT_BIT             )
#define FFEATURE_FW_CTF_MASK             (1 << FEATURE_FW_CTF_BIT             )
#define FFEATURE_LED_DISPLAY_MASK        (1 << FEATURE_LED_DISPLAY_BIT        )
#define FFEATURE_FAN_CONTROL_MASK        (1 << FEATURE_FAN_CONTROL_BIT        )

#define FEATURE_FAST_PPT_MASK            (1 << FAST_PPT_BIT                   )
#define FEATURE_GFX_EDC_MASK             (1 << FEATURE_GFX_EDC_BIT            )
#define FEATURE_ACG_MASK                 (1 << FEATURE_ACG_BIT                )
#define FEATURE_PCC_LIMIT_CONTROL_MASK   (1 << FEATURE_PCC_LIMIT_CONTROL_BIT  )
#define FFEATURE_SPARE_30_MASK           (1 << FEATURE_SPARE_30_BIT           )
#define FFEATURE_SPARE_31_MASK           (1 << FEATURE_SPARE_31_BIT           )
/* Workload types */
#define WORKLOAD_VR_BIT                 0
#define WORKLOAD_FRTC_BIT               1
#define WORKLOAD_VIDEO_BIT              2
#define WORKLOAD_COMPUTE_BIT            3
#define NUM_WORKLOADS                   4

/* ULV Client Masks */
#define ULV_CLIENT_RLC_MASK         0x00000001
#define ULV_CLIENT_UVD_MASK         0x00000002
#define ULV_CLIENT_VCE_MASK         0x00000004
#define ULV_CLIENT_SDMA0_MASK       0x00000008
#define ULV_CLIENT_SDMA1_MASK       0x00000010
#define ULV_CLIENT_JPEG_MASK        0x00000020
#define ULV_CLIENT_GFXCLK_DPM_MASK  0x00000040
#define ULV_CLIENT_UVD_DPM_MASK     0x00000080
#define ULV_CLIENT_VCE_DPM_MASK     0x00000100
#define ULV_CLIENT_MP0CLK_DPM_MASK  0x00000200
#define ULV_CLIENT_UCLK_DPM_MASK    0x00000400
#define ULV_CLIENT_SOCCLK_DPM_MASK  0x00000800
#define ULV_CLIENT_DCEFCLK_DPM_MASK 0x00001000

typedef struct {
	/* MP1_EXT_SCRATCH0 */
	uint32_t CurrLevel_GFXCLK  : 4;
	uint32_t CurrLevel_UVD     : 4;
	uint32_t CurrLevel_VCE     : 4;
	uint32_t CurrLevel_LCLK    : 4;
	uint32_t CurrLevel_MP0CLK  : 4;
	uint32_t CurrLevel_UCLK    : 4;
	uint32_t CurrLevel_SOCCLK  : 4;
	uint32_t CurrLevel_DCEFCLK : 4;
	/* MP1_EXT_SCRATCH1 */
	uint32_t TargLevel_GFXCLK  : 4;
	uint32_t TargLevel_UVD     : 4;
	uint32_t TargLevel_VCE     : 4;
	uint32_t TargLevel_LCLK    : 4;
	uint32_t TargLevel_MP0CLK  : 4;
	uint32_t TargLevel_UCLK    : 4;
	uint32_t TargLevel_SOCCLK  : 4;
	uint32_t TargLevel_DCEFCLK : 4;
	/* MP1_EXT_SCRATCH2-7 */
	uint32_t Reserved[6];
} FwStatus_t;

#pragma pack(pop)

#endif

/*
 * Copyright 2014 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU8_FUSION_H
#define SMU8_FUSION_H

#include "smu8.h"

#pragma pack(push, 1)

#define SMU8_MAX_CUS 2
#define SMU8_PSMS_PER_CU 4
#define SMU8_CACS_PER_CU 4

struct SMU8_GfxCuPgScoreboard {
    uint8_t Enabled;
    uint8_t spare[3];
};

struct SMU8_Port80MonitorTable {
	uint32_t MmioAddress;
	uint32_t MemoryBaseHi;
	uint32_t MemoryBaseLo;
	uint16_t MemoryBufferSize;
	uint16_t MemoryPosition;
	uint16_t PollingInterval;
	uint8_t  EnableCsrShadow;
	uint8_t  EnableDramShadow;
};

/*  Display specific power management parameters */
#define PWRMGT_SEPARATION_TIME_SHIFT            0
#define PWRMGT_SEPARATION_TIME_MASK             0xFFFF
#define PWRMGT_DISABLE_CPU_CSTATES_SHIFT        16
#define PWRMGT_DISABLE_CPU_CSTATES_MASK         0x1
#define PWRMGT_DISABLE_CPU_PSTATES_SHIFT        24
#define PWRMGT_DISABLE_CPU_PSTATES_MASK         0x1

/* Clock Table Definitions */
#define NUM_SCLK_LEVELS     8
#define NUM_LCLK_LEVELS     8
#define NUM_UVD_LEVELS      8
#define NUM_ECLK_LEVELS     8
#define NUM_ACLK_LEVELS     8

struct SMU8_Fusion_ClkLevel {
	uint8_t		GnbVid;
	uint8_t		GfxVid;
	uint8_t		DfsDid;
	uint8_t		DeepSleepDid;
	uint32_t	DfsBypass;
	uint32_t	Frequency;
};

struct SMU8_Fusion_SclkBreakdownTable {
	struct SMU8_Fusion_ClkLevel ClkLevel[NUM_SCLK_LEVELS];
	struct SMU8_Fusion_ClkLevel DpmOffLevel;
	/* SMU8_Fusion_ClkLevel PwrOffLevel; */
	uint32_t    SclkValidMask;
	uint32_t    MaxSclkIndex;
};

struct SMU8_Fusion_LclkBreakdownTable {
	struct SMU8_Fusion_ClkLevel ClkLevel[NUM_LCLK_LEVELS];
	struct SMU8_Fusion_ClkLevel DpmOffLevel;
    /* SMU8_Fusion_ClkLevel PwrOffLevel; */
	uint32_t    LclkValidMask;
	uint32_t    MaxLclkIndex;
};

struct SMU8_Fusion_EclkBreakdownTable {
	struct SMU8_Fusion_ClkLevel ClkLevel[NUM_ECLK_LEVELS];
	struct SMU8_Fusion_ClkLevel DpmOffLevel;
	struct SMU8_Fusion_ClkLevel PwrOffLevel;
	uint32_t    EclkValidMask;
	uint32_t    MaxEclkIndex;
};

struct SMU8_Fusion_VclkBreakdownTable {
	struct SMU8_Fusion_ClkLevel ClkLevel[NUM_UVD_LEVELS];
	struct SMU8_Fusion_ClkLevel DpmOffLevel;
	struct SMU8_Fusion_ClkLevel PwrOffLevel;
	uint32_t    VclkValidMask;
	uint32_t    MaxVclkIndex;
};

struct SMU8_Fusion_DclkBreakdownTable {
	struct SMU8_Fusion_ClkLevel ClkLevel[NUM_UVD_LEVELS];
	struct SMU8_Fusion_ClkLevel DpmOffLevel;
	struct SMU8_Fusion_ClkLevel PwrOffLevel;
	uint32_t    DclkValidMask;
	uint32_t    MaxDclkIndex;
};

struct SMU8_Fusion_AclkBreakdownTable {
	struct SMU8_Fusion_ClkLevel ClkLevel[NUM_ACLK_LEVELS];
	struct SMU8_Fusion_ClkLevel DpmOffLevel;
	struct SMU8_Fusion_ClkLevel PwrOffLevel;
	uint32_t    AclkValidMask;
	uint32_t    MaxAclkIndex;
};


struct SMU8_Fusion_ClkTable {
	struct SMU8_Fusion_SclkBreakdownTable SclkBreakdownTable;
	struct SMU8_Fusion_LclkBreakdownTable LclkBreakdownTable;
	struct SMU8_Fusion_EclkBreakdownTable EclkBreakdownTable;
	struct SMU8_Fusion_VclkBreakdownTable VclkBreakdownTable;
	struct SMU8_Fusion_DclkBreakdownTable DclkBreakdownTable;
	struct SMU8_Fusion_AclkBreakdownTable AclkBreakdownTable;
};

#pragma pack(pop)

#endif
/*
 * Copyright 2014 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU8_H
#define SMU8_H

#pragma pack(push, 1)

#define ENABLE_DEBUG_FEATURES

struct SMU8_Firmware_Header {
	uint32_t Version;
	uint32_t ImageSize;
	uint32_t CodeSize;
	uint32_t HeaderSize;
	uint32_t EntryPoint;
	uint32_t Rtos;
	uint32_t UcodeLoadStatus;
	uint32_t DpmTable;
	uint32_t FanTable;
	uint32_t PmFuseTable;
	uint32_t Globals;
	uint32_t Reserved[20];
	uint32_t Signature;
};

struct SMU8_MultimediaPowerLogData {
	uint32_t avgTotalPower;
	uint32_t avgGpuPower;
	uint32_t avgUvdPower;
	uint32_t avgVcePower;

	uint32_t avgSclk;
	uint32_t avgDclk;
	uint32_t avgVclk;
	uint32_t avgEclk;

	uint32_t startTimeHi;
	uint32_t startTimeLo;

	uint32_t endTimeHi;
	uint32_t endTimeLo;
};

#define SMU8_FIRMWARE_HEADER_LOCATION 0x1FF80
#define SMU8_UNBCSR_START_ADDR 0xC0100000

#define SMN_MP1_SRAM_START_ADDR 0x10000000

#pragma pack(pop)

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef DGPU_VI_PP_SMC_H
#define DGPU_VI_PP_SMC_H


#pragma pack(push, 1)

#define PPSMC_MSG_SetGBDroopSettings          ((uint16_t) 0x305)

#define PPSMC_SWSTATE_FLAG_DC                           0x01
#define PPSMC_SWSTATE_FLAG_UVD                          0x02
#define PPSMC_SWSTATE_FLAG_VCE                          0x04

#define PPSMC_THERMAL_PROTECT_TYPE_INTERNAL             0x00
#define PPSMC_THERMAL_PROTECT_TYPE_EXTERNAL             0x01
#define PPSMC_THERMAL_PROTECT_TYPE_NONE                 0xff

#define PPSMC_SYSTEMFLAG_GPIO_DC                        0x01
#define PPSMC_SYSTEMFLAG_STEPVDDC                       0x02
#define PPSMC_SYSTEMFLAG_GDDR5                          0x04

#define PPSMC_SYSTEMFLAG_DISABLE_BABYSTEP               0x08

#define PPSMC_SYSTEMFLAG_REGULATOR_HOT                  0x10
#define PPSMC_SYSTEMFLAG_REGULATOR_HOT_ANALOG           0x20

#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_MASK              0x07
#define PPSMC_EXTRAFLAGS_AC2DC_DONT_WAIT_FOR_VBLANK     0x08

#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_GOTODPMLOWSTATE   0x00
#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_GOTOINITIALSTATE  0x01


#define PPSMC_DPM2FLAGS_TDPCLMP                         0x01
#define PPSMC_DPM2FLAGS_PWRSHFT                         0x02
#define PPSMC_DPM2FLAGS_OCP                             0x04


#define PPSMC_DISPLAY_WATERMARK_LOW                     0
#define PPSMC_DISPLAY_WATERMARK_HIGH                    1


#define PPSMC_STATEFLAG_AUTO_PULSE_SKIP    0x01
#define PPSMC_STATEFLAG_POWERBOOST         0x02
#define PPSMC_STATEFLAG_PSKIP_ON_TDP_FAULT 0x04
#define PPSMC_STATEFLAG_POWERSHIFT         0x08
#define PPSMC_STATEFLAG_SLOW_READ_MARGIN   0x10
#define PPSMC_STATEFLAG_DEEPSLEEP_THROTTLE 0x20
#define PPSMC_STATEFLAG_DEEPSLEEP_BYPASS   0x40


#define FDO_MODE_HARDWARE 0
#define FDO_MODE_PIECE_WISE_LINEAR 1

enum FAN_CONTROL {
	FAN_CONTROL_FUZZY,
	FAN_CONTROL_TABLE
};


#define PPSMC_Result_OK             ((uint16_t)0x01)
#define PPSMC_Result_NoMore         ((uint16_t)0x02)

#define PPSMC_Result_NotNow         ((uint16_t)0x03)
#define PPSMC_Result_Failed         ((uint16_t)0xFF)
#define PPSMC_Result_UnknownCmd     ((uint16_t)0xFE)
#define PPSMC_Result_UnknownVT      ((uint16_t)0xFD)

typedef uint16_t PPSMC_Result;

#define PPSMC_isERROR(x) ((uint16_t)0x80 & (x))


#define PPSMC_MSG_Halt                      ((uint16_t)0x10)
#define PPSMC_MSG_Resume                    ((uint16_t)0x11)
#define PPSMC_MSG_EnableDPMLevel            ((uint16_t)0x12)
#define PPSMC_MSG_ZeroLevelsDisabled        ((uint16_t)0x13)
#define PPSMC_MSG_OneLevelsDisabled         ((uint16_t)0x14)
#define PPSMC_MSG_TwoLevelsDisabled         ((uint16_t)0x15)
#define PPSMC_MSG_EnableThermalInterrupt    ((uint16_t)0x16)
#define PPSMC_MSG_RunningOnAC               ((uint16_t)0x17)
#define PPSMC_MSG_LevelUp                   ((uint16_t)0x18)
#define PPSMC_MSG_LevelDown                 ((uint16_t)0x19)
#define PPSMC_MSG_ResetDPMCounters          ((uint16_t)0x1a)
#define PPSMC_MSG_SwitchToSwState           ((uint16_t)0x20)
#define PPSMC_MSG_SwitchToSwStateLast       ((uint16_t)0x3f)
#define PPSMC_MSG_SwitchToInitialState      ((uint16_t)0x40)
#define PPSMC_MSG_NoForcedLevel             ((uint16_t)0x41)
#define PPSMC_MSG_ForceHigh                 ((uint16_t)0x42)
#define PPSMC_MSG_ForceMediumOrHigh         ((uint16_t)0x43)
#define PPSMC_MSG_SwitchToMinimumPower      ((uint16_t)0x51)
#define PPSMC_MSG_ResumeFromMinimumPower    ((uint16_t)0x52)
#define PPSMC_MSG_EnableCac                 ((uint16_t)0x53)
#define PPSMC_MSG_DisableCac                ((uint16_t)0x54)
#define PPSMC_DPMStateHistoryStart          ((uint16_t)0x55)
#define PPSMC_DPMStateHistoryStop           ((uint16_t)0x56)
#define PPSMC_CACHistoryStart               ((uint16_t)0x57)
#define PPSMC_CACHistoryStop                ((uint16_t)0x58)
#define PPSMC_TDPClampingActive             ((uint16_t)0x59)
#define PPSMC_TDPClampingInactive           ((uint16_t)0x5A)
#define PPSMC_StartFanControl               ((uint16_t)0x5B)
#define PPSMC_StopFanControl                ((uint16_t)0x5C)
#define PPSMC_NoDisplay                     ((uint16_t)0x5D)
#define PPSMC_HasDisplay                    ((uint16_t)0x5E)
#define PPSMC_MSG_UVDPowerOFF               ((uint16_t)0x60)
#define PPSMC_MSG_UVDPowerON                ((uint16_t)0x61)
#define PPSMC_MSG_EnableULV                 ((uint16_t)0x62)
#define PPSMC_MSG_DisableULV                ((uint16_t)0x63)
#define PPSMC_MSG_EnterULV                  ((uint16_t)0x64)
#define PPSMC_MSG_ExitULV                   ((uint16_t)0x65)
#define PPSMC_PowerShiftActive              ((uint16_t)0x6A)
#define PPSMC_PowerShiftInactive            ((uint16_t)0x6B)
#define PPSMC_OCPActive                     ((uint16_t)0x6C)
#define PPSMC_OCPInactive                   ((uint16_t)0x6D)
#define PPSMC_CACLongTermAvgEnable          ((uint16_t)0x6E)
#define PPSMC_CACLongTermAvgDisable         ((uint16_t)0x6F)
#define PPSMC_MSG_InferredStateSweep_Start  ((uint16_t)0x70)
#define PPSMC_MSG_InferredStateSweep_Stop   ((uint16_t)0x71)
#define PPSMC_MSG_SwitchToLowestInfState    ((uint16_t)0x72)
#define PPSMC_MSG_SwitchToNonInfState       ((uint16_t)0x73)
#define PPSMC_MSG_AllStateSweep_Start       ((uint16_t)0x74)
#define PPSMC_MSG_AllStateSweep_Stop        ((uint16_t)0x75)
#define PPSMC_MSG_SwitchNextLowerInfState   ((uint16_t)0x76)
#define PPSMC_MSG_SwitchNextHigherInfState  ((uint16_t)0x77)
#define PPSMC_MSG_MclkRetrainingTest        ((uint16_t)0x78)
#define PPSMC_MSG_ForceTDPClamping          ((uint16_t)0x79)
#define PPSMC_MSG_CollectCAC_PowerCorreln   ((uint16_t)0x7A)
#define PPSMC_MSG_CollectCAC_WeightCalib    ((uint16_t)0x7B)
#define PPSMC_MSG_CollectCAC_SQonly         ((uint16_t)0x7C)
#define PPSMC_MSG_CollectCAC_TemperaturePwr ((uint16_t)0x7D)

#define PPSMC_MSG_ExtremitiesTest_Start     ((uint16_t)0x7E)
#define PPSMC_MSG_ExtremitiesTest_Stop      ((uint16_t)0x7F)
#define PPSMC_FlushDataCache                ((uint16_t)0x80)
#define PPSMC_FlushInstrCache               ((uint16_t)0x81)

#define PPSMC_MSG_SetEnabledLevels          ((uint16_t)0x82)
#define PPSMC_MSG_SetForcedLevels           ((uint16_t)0x83)

#define PPSMC_MSG_ResetToDefaults           ((uint16_t)0x84)

#define PPSMC_MSG_SetForcedLevelsAndJump      ((uint16_t)0x85)
#define PPSMC_MSG_SetCACHistoryMode           ((uint16_t)0x86)
#define PPSMC_MSG_EnableDTE                   ((uint16_t)0x87)
#define PPSMC_MSG_DisableDTE                  ((uint16_t)0x88)

#define PPSMC_MSG_SmcSpaceSetAddress          ((uint16_t)0x89)
#define PPSM_MSG_SmcSpaceWriteDWordInc        ((uint16_t)0x8A)
#define PPSM_MSG_SmcSpaceWriteWordInc         ((uint16_t)0x8B)
#define PPSM_MSG_SmcSpaceWriteByteInc         ((uint16_t)0x8C)

#define PPSMC_MSG_BREAK                       ((uint16_t)0xF8)

#define PPSMC_MSG_Test                        ((uint16_t) 0x100)
#define PPSMC_MSG_DPM_Voltage_Pwrmgt          ((uint16_t) 0x101)
#define PPSMC_MSG_DPM_Config                  ((uint16_t) 0x102)
#define PPSMC_MSG_PM_Controller_Start         ((uint16_t) 0x103)
#define PPSMC_MSG_DPM_ForceState              ((uint16_t) 0x104)
#define PPSMC_MSG_PG_PowerDownSIMD            ((uint16_t) 0x105)
#define PPSMC_MSG_PG_PowerUpSIMD              ((uint16_t) 0x106)
#define PPSMC_MSG_PM_Controller_Stop          ((uint16_t) 0x107)
#define PPSMC_MSG_PG_SIMD_Config              ((uint16_t) 0x108)
#define PPSMC_MSG_Voltage_Cntl_Enable         ((uint16_t) 0x109)
#define PPSMC_MSG_Thermal_Cntl_Enable         ((uint16_t) 0x10a)
#define PPSMC_MSG_Reset_Service               ((uint16_t) 0x10b)
#define PPSMC_MSG_VCEPowerOFF                 ((uint16_t) 0x10e)
#define PPSMC_MSG_VCEPowerON                  ((uint16_t) 0x10f)
#define PPSMC_MSG_DPM_Disable_VCE_HS          ((uint16_t) 0x110)
#define PPSMC_MSG_DPM_Enable_VCE_HS           ((uint16_t) 0x111)
#define PPSMC_MSG_DPM_N_LevelsDisabled        ((uint16_t) 0x112)
#define PPSMC_MSG_DCEPowerOFF                 ((uint16_t) 0x113)
#define PPSMC_MSG_DCEPowerON                  ((uint16_t) 0x114)
#define PPSMC_MSG_PCIE_DDIPowerDown           ((uint16_t) 0x117)
#define PPSMC_MSG_PCIE_DDIPowerUp             ((uint16_t) 0x118)
#define PPSMC_MSG_PCIE_CascadePLLPowerDown    ((uint16_t) 0x119)
#define PPSMC_MSG_PCIE_CascadePLLPowerUp      ((uint16_t) 0x11a)
#define PPSMC_MSG_SYSPLLPowerOff              ((uint16_t) 0x11b)
#define PPSMC_MSG_SYSPLLPowerOn               ((uint16_t) 0x11c)
#define PPSMC_MSG_DCE_RemoveVoltageAdjustment ((uint16_t) 0x11d)
#define PPSMC_MSG_DCE_AllowVoltageAdjustment  ((uint16_t) 0x11e)
#define PPSMC_MSG_DISPLAYPHYStatusNotify      ((uint16_t) 0x11f)
#define PPSMC_MSG_EnableBAPM                  ((uint16_t) 0x120)
#define PPSMC_MSG_DisableBAPM                 ((uint16_t) 0x121)
#define PPSMC_MSG_Spmi_Enable                 ((uint16_t) 0x122)
#define PPSMC_MSG_Spmi_Timer                  ((uint16_t) 0x123)
#define PPSMC_MSG_LCLK_DPM_Config             ((uint16_t) 0x124)
#define PPSMC_MSG_VddNB_Request               ((uint16_t) 0x125)
#define PPSMC_MSG_PCIE_DDIPhyPowerDown        ((uint32_t) 0x126)
#define PPSMC_MSG_PCIE_DDIPhyPowerUp          ((uint32_t) 0x127)
#define PPSMC_MSG_MCLKDPM_Config              ((uint16_t) 0x128)

#define PPSMC_MSG_UVDDPM_Config               ((uint16_t) 0x129)
#define PPSMC_MSG_VCEDPM_Config               ((uint16_t) 0x12A)
#define PPSMC_MSG_ACPDPM_Config               ((uint16_t) 0x12B)
#define PPSMC_MSG_SAMUDPM_Config              ((uint16_t) 0x12C)
#define PPSMC_MSG_UVDDPM_SetEnabledMask       ((uint16_t) 0x12D)
#define PPSMC_MSG_VCEDPM_SetEnabledMask       ((uint16_t) 0x12E)
#define PPSMC_MSG_ACPDPM_SetEnabledMask       ((uint16_t) 0x12F)
#define PPSMC_MSG_SAMUDPM_SetEnabledMask      ((uint16_t) 0x130)
#define PPSMC_MSG_MCLKDPM_ForceState          ((uint16_t) 0x131)
#define PPSMC_MSG_MCLKDPM_NoForcedLevel       ((uint16_t) 0x132)
#define PPSMC_MSG_Thermal_Cntl_Disable        ((uint16_t) 0x133)
#define PPSMC_MSG_SetTDPLimit                 ((uint16_t) 0x134)
#define PPSMC_MSG_Voltage_Cntl_Disable        ((uint16_t) 0x135)
#define PPSMC_MSG_PCIeDPM_Enable              ((uint16_t) 0x136)
#define PPSMC_MSG_ACPPowerOFF                 ((uint16_t) 0x137)
#define PPSMC_MSG_ACPPowerON                  ((uint16_t) 0x138)
#define PPSMC_MSG_SAMPowerOFF                 ((uint16_t) 0x139)
#define PPSMC_MSG_SAMPowerON                  ((uint16_t) 0x13a)
#define PPSMC_MSG_SDMAPowerOFF                ((uint16_t) 0x13b)
#define PPSMC_MSG_SDMAPowerON                 ((uint16_t) 0x13c)
#define PPSMC_MSG_PCIeDPM_Disable             ((uint16_t) 0x13d)
#define PPSMC_MSG_IOMMUPowerOFF               ((uint16_t) 0x13e)
#define PPSMC_MSG_IOMMUPowerON                ((uint16_t) 0x13f)
#define PPSMC_MSG_NBDPM_Enable                ((uint16_t) 0x140)
#define PPSMC_MSG_NBDPM_Disable               ((uint16_t) 0x141)
#define PPSMC_MSG_NBDPM_ForceNominal          ((uint16_t) 0x142)
#define PPSMC_MSG_NBDPM_ForcePerformance      ((uint16_t) 0x143)
#define PPSMC_MSG_NBDPM_UnForce               ((uint16_t) 0x144)
#define PPSMC_MSG_SCLKDPM_SetEnabledMask      ((uint16_t) 0x145)
#define PPSMC_MSG_MCLKDPM_SetEnabledMask      ((uint16_t) 0x146)
#define PPSMC_MSG_PCIeDPM_ForceLevel          ((uint16_t) 0x147)
#define PPSMC_MSG_PCIeDPM_UnForceLevel        ((uint16_t) 0x148)
#define PPSMC_MSG_EnableACDCGPIOInterrupt     ((uint16_t) 0x149)
#define PPSMC_MSG_EnableVRHotGPIOInterrupt    ((uint16_t) 0x14a)
#define PPSMC_MSG_SwitchToAC                  ((uint16_t) 0x14b)
#define PPSMC_MSG_XDMAPowerOFF                ((uint16_t) 0x14c)
#define PPSMC_MSG_XDMAPowerON                 ((uint16_t) 0x14d)

#define PPSMC_MSG_DPM_Enable                  ((uint16_t) 0x14e)
#define PPSMC_MSG_DPM_Disable                 ((uint16_t) 0x14f)
#define PPSMC_MSG_MCLKDPM_Enable              ((uint16_t) 0x150)
#define PPSMC_MSG_MCLKDPM_Disable             ((uint16_t) 0x151)
#define PPSMC_MSG_LCLKDPM_Enable              ((uint16_t) 0x152)
#define PPSMC_MSG_LCLKDPM_Disable             ((uint16_t) 0x153)
#define PPSMC_MSG_UVDDPM_Enable               ((uint16_t) 0x154)
#define PPSMC_MSG_UVDDPM_Disable              ((uint16_t) 0x155)
#define PPSMC_MSG_SAMUDPM_Enable              ((uint16_t) 0x156)
#define PPSMC_MSG_SAMUDPM_Disable             ((uint16_t) 0x157)
#define PPSMC_MSG_ACPDPM_Enable               ((uint16_t) 0x158)
#define PPSMC_MSG_ACPDPM_Disable              ((uint16_t) 0x159)
#define PPSMC_MSG_VCEDPM_Enable               ((uint16_t) 0x15a)
#define PPSMC_MSG_VCEDPM_Disable              ((uint16_t) 0x15b)
#define PPSMC_MSG_LCLKDPM_SetEnabledMask      ((uint16_t) 0x15c)
#define PPSMC_MSG_DPM_FPS_Mode                ((uint16_t) 0x15d)
#define PPSMC_MSG_DPM_Activity_Mode           ((uint16_t) 0x15e)
#define PPSMC_MSG_VddC_Request                ((uint16_t) 0x15f)
#define PPSMC_MSG_MCLKDPM_GetEnabledMask      ((uint16_t) 0x160)
#define PPSMC_MSG_LCLKDPM_GetEnabledMask      ((uint16_t) 0x161)
#define PPSMC_MSG_SCLKDPM_GetEnabledMask      ((uint16_t) 0x162)
#define PPSMC_MSG_UVDDPM_GetEnabledMask       ((uint16_t) 0x163)
#define PPSMC_MSG_SAMUDPM_GetEnabledMask      ((uint16_t) 0x164)
#define PPSMC_MSG_ACPDPM_GetEnabledMask       ((uint16_t) 0x165)
#define PPSMC_MSG_VCEDPM_GetEnabledMask       ((uint16_t) 0x166)
#define PPSMC_MSG_PCIeDPM_SetEnabledMask      ((uint16_t) 0x167)
#define PPSMC_MSG_PCIeDPM_GetEnabledMask      ((uint16_t) 0x168)
#define PPSMC_MSG_TDCLimitEnable              ((uint16_t) 0x169)
#define PPSMC_MSG_TDCLimitDisable             ((uint16_t) 0x16a)
#define PPSMC_MSG_DPM_AutoRotate_Mode         ((uint16_t) 0x16b)
#define PPSMC_MSG_DISPCLK_FROM_FCH            ((uint16_t) 0x16c)
#define PPSMC_MSG_DISPCLK_FROM_DFS            ((uint16_t) 0x16d)
#define PPSMC_MSG_DPREFCLK_FROM_FCH           ((uint16_t) 0x16e)
#define PPSMC_MSG_DPREFCLK_FROM_DFS           ((uint16_t) 0x16f)
#define PPSMC_MSG_PmStatusLogStart            ((uint16_t) 0x170)
#define PPSMC_MSG_PmStatusLogSample           ((uint16_t) 0x171)
#define PPSMC_MSG_SCLK_AutoDPM_ON             ((uint16_t) 0x172)
#define PPSMC_MSG_MCLK_AutoDPM_ON             ((uint16_t) 0x173)
#define PPSMC_MSG_LCLK_AutoDPM_ON             ((uint16_t) 0x174)
#define PPSMC_MSG_UVD_AutoDPM_ON              ((uint16_t) 0x175)
#define PPSMC_MSG_SAMU_AutoDPM_ON             ((uint16_t) 0x176)
#define PPSMC_MSG_ACP_AutoDPM_ON              ((uint16_t) 0x177)
#define PPSMC_MSG_VCE_AutoDPM_ON              ((uint16_t) 0x178)
#define PPSMC_MSG_PCIe_AutoDPM_ON             ((uint16_t) 0x179)
#define PPSMC_MSG_MASTER_AutoDPM_ON           ((uint16_t) 0x17a)
#define PPSMC_MSG_MASTER_AutoDPM_OFF          ((uint16_t) 0x17b)
#define PPSMC_MSG_DYNAMICDISPPHYPOWER         ((uint16_t) 0x17c)
#define PPSMC_MSG_CAC_COLLECTION_ON           ((uint16_t) 0x17d)
#define PPSMC_MSG_CAC_COLLECTION_OFF          ((uint16_t) 0x17e)
#define PPSMC_MSG_CAC_CORRELATION_ON          ((uint16_t) 0x17f)
#define PPSMC_MSG_CAC_CORRELATION_OFF         ((uint16_t) 0x180)
#define PPSMC_MSG_PM_STATUS_TO_DRAM_ON        ((uint16_t) 0x181)
#define PPSMC_MSG_PM_STATUS_TO_DRAM_OFF       ((uint16_t) 0x182)
#define PPSMC_MSG_ALLOW_LOWSCLK_INTERRUPT     ((uint16_t) 0x184)
#define PPSMC_MSG_PkgPwrLimitEnable           ((uint16_t) 0x185)
#define PPSMC_MSG_PkgPwrLimitDisable          ((uint16_t) 0x186)
#define PPSMC_MSG_PkgPwrSetLimit              ((uint16_t) 0x187)
#define PPSMC_MSG_OverDriveSetTargetTdp       ((uint16_t) 0x188)
#define PPSMC_MSG_SCLKDPM_FreezeLevel         ((uint16_t) 0x189)
#define PPSMC_MSG_SCLKDPM_UnfreezeLevel       ((uint16_t) 0x18A)
#define PPSMC_MSG_MCLKDPM_FreezeLevel         ((uint16_t) 0x18B)
#define PPSMC_MSG_MCLKDPM_UnfreezeLevel       ((uint16_t) 0x18C)
#define PPSMC_MSG_START_DRAM_LOGGING          ((uint16_t) 0x18D)
#define PPSMC_MSG_STOP_DRAM_LOGGING           ((uint16_t) 0x18E)
#define PPSMC_MSG_MASTER_DeepSleep_ON         ((uint16_t) 0x18F)
#define PPSMC_MSG_MASTER_DeepSleep_OFF        ((uint16_t) 0x190)
#define PPSMC_MSG_Remove_DC_Clamp             ((uint16_t) 0x191)
#define PPSMC_MSG_DisableACDCGPIOInterrupt    ((uint16_t) 0x192)
#define PPSMC_MSG_OverrideVoltageControl_SetVddc       ((uint16_t) 0x193)
#define PPSMC_MSG_OverrideVoltageControl_SetVddci      ((uint16_t) 0x194)
#define PPSMC_MSG_SetVidOffset_1              ((uint16_t) 0x195)
#define PPSMC_MSG_SetVidOffset_2              ((uint16_t) 0x207)
#define PPSMC_MSG_GetVidOffset_1              ((uint16_t) 0x196)
#define PPSMC_MSG_GetVidOffset_2              ((uint16_t) 0x208)
#define PPSMC_MSG_THERMAL_OVERDRIVE_Enable    ((uint16_t) 0x197)
#define PPSMC_MSG_THERMAL_OVERDRIVE_Disable   ((uint16_t) 0x198)
#define PPSMC_MSG_SetTjMax                    ((uint16_t) 0x199)
#define PPSMC_MSG_SetFanPwmMax                ((uint16_t) 0x19A)
#define PPSMC_MSG_WaitForMclkSwitchFinish     ((uint16_t) 0x19B)
#define PPSMC_MSG_ENABLE_THERMAL_DPM          ((uint16_t) 0x19C)
#define PPSMC_MSG_DISABLE_THERMAL_DPM         ((uint16_t) 0x19D)

#define PPSMC_MSG_API_GetSclkFrequency        ((uint16_t) 0x200)
#define PPSMC_MSG_API_GetMclkFrequency        ((uint16_t) 0x201)
#define PPSMC_MSG_API_GetSclkBusy             ((uint16_t) 0x202)
#define PPSMC_MSG_API_GetMclkBusy             ((uint16_t) 0x203)
#define PPSMC_MSG_API_GetAsicPower            ((uint16_t) 0x204)
#define PPSMC_MSG_SetFanRpmMax                ((uint16_t) 0x205)
#define PPSMC_MSG_SetFanSclkTarget            ((uint16_t) 0x206)
#define PPSMC_MSG_SetFanMinPwm                ((uint16_t) 0x209)
#define PPSMC_MSG_SetFanTemperatureTarget     ((uint16_t) 0x20A)

#define PPSMC_MSG_BACO_StartMonitor           ((uint16_t) 0x240)
#define PPSMC_MSG_BACO_Cancel                 ((uint16_t) 0x241)
#define PPSMC_MSG_EnableVddGfx                ((uint16_t) 0x242)
#define PPSMC_MSG_DisableVddGfx               ((uint16_t) 0x243)
#define PPSMC_MSG_UcodeAddressLow             ((uint16_t) 0x244)
#define PPSMC_MSG_UcodeAddressHigh            ((uint16_t) 0x245)
#define PPSMC_MSG_UcodeLoadStatus             ((uint16_t) 0x246)

#define PPSMC_MSG_DRV_DRAM_ADDR_HI            ((uint16_t) 0x250)
#define PPSMC_MSG_DRV_DRAM_ADDR_LO            ((uint16_t) 0x251)
#define PPSMC_MSG_SMU_DRAM_ADDR_HI            ((uint16_t) 0x252)
#define PPSMC_MSG_SMU_DRAM_ADDR_LO            ((uint16_t) 0x253)
#define PPSMC_MSG_LoadUcodes                  ((uint16_t) 0x254)
#define PPSMC_MSG_PowerStateNotify            ((uint16_t) 0x255)
#define PPSMC_MSG_COND_EXEC_DRAM_ADDR_HI      ((uint16_t) 0x256)
#define PPSMC_MSG_COND_EXEC_DRAM_ADDR_LO      ((uint16_t) 0x257)
#define PPSMC_MSG_VBIOS_DRAM_ADDR_HI          ((uint16_t) 0x258)
#define PPSMC_MSG_VBIOS_DRAM_ADDR_LO          ((uint16_t) 0x259)
#define PPSMC_MSG_LoadVBios                   ((uint16_t) 0x25A)
#define PPSMC_MSG_GetUcodeVersion             ((uint16_t) 0x25B)
#define DMCUSMC_MSG_PSREntry                  ((uint16_t) 0x25C)
#define DMCUSMC_MSG_PSRExit                   ((uint16_t) 0x25D)
#define PPSMC_MSG_EnableClockGatingFeature    ((uint16_t) 0x260)
#define PPSMC_MSG_DisableClockGatingFeature   ((uint16_t) 0x261)
#define PPSMC_MSG_IsDeviceRunning             ((uint16_t) 0x262)
#define PPSMC_MSG_LoadMetaData                ((uint16_t) 0x263)
#define PPSMC_MSG_TMON_AutoCaliberate_Enable  ((uint16_t) 0x264)
#define PPSMC_MSG_TMON_AutoCaliberate_Disable ((uint16_t) 0x265)
#define PPSMC_MSG_GetTelemetry1Slope          ((uint16_t) 0x266)
#define PPSMC_MSG_GetTelemetry1Offset         ((uint16_t) 0x267)
#define PPSMC_MSG_GetTelemetry2Slope          ((uint16_t) 0x268)
#define PPSMC_MSG_GetTelemetry2Offset         ((uint16_t) 0x269)
#define PPSMC_MSG_EnableAvfs                  ((uint16_t) 0x26A)
#define PPSMC_MSG_DisableAvfs                 ((uint16_t) 0x26B)

#define PPSMC_MSG_PerformBtc                  ((uint16_t) 0x26C)
#define PPSMC_MSG_LedConfig                   ((uint16_t) 0x274)
#define PPSMC_MSG_VftTableIsValid             ((uint16_t) 0x275)
#define PPSMC_MSG_UseNewGPIOScheme            ((uint16_t) 0x277)
#define PPSMC_MSG_GetEnabledPsm               ((uint16_t) 0x400)
#define PPSMC_MSG_AgmStartPsm                 ((uint16_t) 0x401)
#define PPSMC_MSG_AgmReadPsm                  ((uint16_t) 0x402)
#define PPSMC_MSG_AgmResetPsm                 ((uint16_t) 0x403)
#define PPSMC_MSG_ReadVftCell                 ((uint16_t) 0x404)

#define PPSMC_MSG_ApplyAvfsCksOffVoltage      ((uint16_t) 0x415)

#define PPSMC_MSG_GFX_CU_PG_ENABLE            ((uint16_t) 0x280)
#define PPSMC_MSG_GFX_CU_PG_DISABLE           ((uint16_t) 0x281)
#define PPSMC_MSG_GetCurrPkgPwr               ((uint16_t) 0x282)

#define PPSMC_MSG_SetGpuPllDfsForSclk         ((uint16_t) 0x300)
#define PPSMC_MSG_Didt_Block_Function		  ((uint16_t) 0x301)
#define PPSMC_MSG_EnableZeroRpm               ((uint16_t) 0x302)

#define PPSMC_MSG_SetVBITimeout               ((uint16_t) 0x306)

#define PPSMC_MSG_EnableFFC                   ((uint16_t) 0x307)
#define PPSMC_MSG_DisableFFC                  ((uint16_t) 0x308)

#define PPSMC_MSG_EnableDpmDidt               ((uint16_t) 0x309)
#define PPSMC_MSG_DisableDpmDidt              ((uint16_t) 0x30A)
#define PPSMC_MSG_EnableDpmMcBlackout         ((uint16_t) 0x30B)
#define PPSMC_MSG_DisableDpmMcBlackout        ((uint16_t) 0x30C)

#define PPSMC_MSG_EnableEDCController         ((uint16_t) 0x316)
#define PPSMC_MSG_DisableEDCController        ((uint16_t) 0x317)

#define PPSMC_MSG_SecureSRBMWrite             ((uint16_t) 0x600)
#define PPSMC_MSG_SecureSRBMRead              ((uint16_t) 0x601)
#define PPSMC_MSG_SetAddress                  ((uint16_t) 0x800)
#define PPSMC_MSG_GetData                     ((uint16_t) 0x801)
#define PPSMC_MSG_SetData                     ((uint16_t) 0x802)

typedef uint16_t PPSMC_Msg;

#define PPSMC_EVENT_STATUS_THERMAL          0x00000001
#define PPSMC_EVENT_STATUS_REGULATORHOT     0x00000002
#define PPSMC_EVENT_STATUS_DC               0x00000004

#pragma pack(pop)

#endif

/*
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU7_FUSION_H
#define SMU7_FUSION_H

#include "smu7.h"

#pragma pack(push, 1)

#define SMU7_DTE_ITERATIONS 5
#define SMU7_DTE_SOURCES 5
#define SMU7_DTE_SINKS 3
#define SMU7_NUM_CPU_TES 2
#define SMU7_NUM_GPU_TES 1
#define SMU7_NUM_NON_TES 2

// All 'soft registers' should be uint32_t.
struct SMU7_SoftRegisters
{
    uint32_t        RefClockFrequency;
    uint32_t        PmTimerP;
    uint32_t        FeatureEnables;
    uint32_t        HandshakeDisables;

    uint8_t         DisplayPhy1Config;
    uint8_t         DisplayPhy2Config;
    uint8_t         DisplayPhy3Config;
    uint8_t         DisplayPhy4Config;

    uint8_t         DisplayPhy5Config;
    uint8_t         DisplayPhy6Config;
    uint8_t         DisplayPhy7Config;
    uint8_t         DisplayPhy8Config;

    uint32_t        AverageGraphicsA;
    uint32_t        AverageMemoryA;
    uint32_t        AverageGioA;

    uint8_t         SClkDpmEnabledLevels;
    uint8_t         MClkDpmEnabledLevels;
    uint8_t         LClkDpmEnabledLevels;
    uint8_t         PCIeDpmEnabledLevels;

    uint8_t         UVDDpmEnabledLevels;
    uint8_t         SAMUDpmEnabledLevels;
    uint8_t         ACPDpmEnabledLevels;
    uint8_t         VCEDpmEnabledLevels;

    uint32_t        DRAM_LOG_ADDR_H;
    uint32_t        DRAM_LOG_ADDR_L;
    uint32_t        DRAM_LOG_PHY_ADDR_H;
    uint32_t        DRAM_LOG_PHY_ADDR_L;
    uint32_t        DRAM_LOG_BUFF_SIZE;
    uint32_t        UlvEnterC;
    uint32_t        UlvTime;
    uint32_t        Reserved[3];

};

typedef struct SMU7_SoftRegisters SMU7_SoftRegisters;

struct SMU7_Fusion_GraphicsLevel
{
    uint32_t    MinVddNb;

    uint32_t    SclkFrequency;

    uint8_t     Vid;
    uint8_t     VidOffset;
    uint16_t    AT;

    uint8_t     PowerThrottle;
    uint8_t     GnbSlow;
    uint8_t     ForceNbPs1;
    uint8_t     SclkDid;

    uint8_t     DisplayWatermark;
    uint8_t     EnabledForActivity;
    uint8_t     EnabledForThrottle;
    uint8_t     UpH;

    uint8_t     DownH;
    uint8_t     VoltageDownH;
    uint8_t     DeepSleepDivId;

    uint8_t     ClkBypassCntl;

    uint32_t    reserved;
};

typedef struct SMU7_Fusion_GraphicsLevel SMU7_Fusion_GraphicsLevel;

struct SMU7_Fusion_GIOLevel
{
    uint8_t     EnabledForActivity;
    uint8_t     LclkDid;
    uint8_t     Vid;
    uint8_t     VoltageDownH;

    uint32_t    MinVddNb;

    uint16_t    ResidencyCounter;
    uint8_t     UpH;
    uint8_t     DownH;

    uint32_t    LclkFrequency;

    uint8_t     ActivityLevel;
    uint8_t     EnabledForThrottle;

    uint8_t     ClkBypassCntl;

    uint8_t     padding;
};

typedef struct SMU7_Fusion_GIOLevel SMU7_Fusion_GIOLevel;

// UVD VCLK/DCLK state (level) definition.
struct SMU7_Fusion_UvdLevel
{
    uint32_t VclkFrequency;
    uint32_t DclkFrequency;
    uint16_t MinVddNb;
    uint8_t  VclkDivider;
    uint8_t  DclkDivider;

    uint8_t     VClkBypassCntl;
    uint8_t     DClkBypassCntl;

    uint8_t     padding[2];

};

typedef struct SMU7_Fusion_UvdLevel SMU7_Fusion_UvdLevel;

// Clocks for other external blocks (VCE, ACP, SAMU).
struct SMU7_Fusion_ExtClkLevel
{
    uint32_t Frequency;
    uint16_t MinVoltage;
    uint8_t  Divider;
    uint8_t  ClkBypassCntl;

    uint32_t Reserved;
};
typedef struct SMU7_Fusion_ExtClkLevel SMU7_Fusion_ExtClkLevel;

struct SMU7_Fusion_ACPILevel
{
    uint32_t    Flags;
    uint32_t    MinVddNb;
    uint32_t    SclkFrequency;
    uint8_t     SclkDid;
    uint8_t     GnbSlow;
    uint8_t     ForceNbPs1;
    uint8_t     DisplayWatermark;
    uint8_t     DeepSleepDivId;
    uint8_t     padding[3];
};

typedef struct SMU7_Fusion_ACPILevel SMU7_Fusion_ACPILevel;

struct SMU7_Fusion_NbDpm
{
    uint8_t DpmXNbPsHi;
    uint8_t DpmXNbPsLo;
    uint8_t Dpm0PgNbPsHi;
    uint8_t Dpm0PgNbPsLo;
    uint8_t EnablePsi1;
    uint8_t SkipDPM0;
    uint8_t SkipPG;
    uint8_t Hysteresis;
    uint8_t EnableDpmPstatePoll;
    uint8_t padding[3];
};

typedef struct SMU7_Fusion_NbDpm SMU7_Fusion_NbDpm;

struct SMU7_Fusion_StateInfo
{
    uint32_t SclkFrequency;
    uint32_t LclkFrequency;
    uint32_t VclkFrequency;
    uint32_t DclkFrequency;
    uint32_t SamclkFrequency;
    uint32_t AclkFrequency;
    uint32_t EclkFrequency;
    uint8_t  DisplayWatermark;
    uint8_t  McArbIndex;
    int8_t   SclkIndex;
    int8_t   MclkIndex;
};

typedef struct SMU7_Fusion_StateInfo SMU7_Fusion_StateInfo;

struct SMU7_Fusion_DpmTable
{
    uint32_t                            SystemFlags;

    SMU7_PIDController                  GraphicsPIDController;
    SMU7_PIDController                  GioPIDController;

    uint8_t                            GraphicsDpmLevelCount;
    uint8_t                            GIOLevelCount;
    uint8_t                            UvdLevelCount;
    uint8_t                            VceLevelCount;

    uint8_t                            AcpLevelCount;
    uint8_t                            SamuLevelCount;
    uint16_t                           FpsHighT;

    SMU7_Fusion_GraphicsLevel         GraphicsLevel           [SMU__NUM_SCLK_DPM_STATE];
    SMU7_Fusion_ACPILevel             ACPILevel;
    SMU7_Fusion_UvdLevel              UvdLevel                [SMU7_MAX_LEVELS_UVD];
    SMU7_Fusion_ExtClkLevel           VceLevel                [SMU7_MAX_LEVELS_VCE];
    SMU7_Fusion_ExtClkLevel           AcpLevel                [SMU7_MAX_LEVELS_ACP];
    SMU7_Fusion_ExtClkLevel           SamuLevel               [SMU7_MAX_LEVELS_SAMU];

    uint8_t                           UvdBootLevel;
    uint8_t                           VceBootLevel;
    uint8_t                           AcpBootLevel;
    uint8_t                           SamuBootLevel;
    uint8_t                           UVDInterval;
    uint8_t                           VCEInterval;
    uint8_t                           ACPInterval;
    uint8_t                           SAMUInterval;

    uint8_t                           GraphicsBootLevel;
    uint8_t                           GraphicsInterval;
    uint8_t                           GraphicsThermThrottleEnable;
    uint8_t                           GraphicsVoltageChangeEnable;

    uint8_t                           GraphicsClkSlowEnable;
    uint8_t                           GraphicsClkSlowDivider;
    uint16_t                          FpsLowT;

    uint32_t                          DisplayCac;
    uint32_t                          LowSclkInterruptT;

    uint32_t                          DRAM_LOG_ADDR_H;
    uint32_t                          DRAM_LOG_ADDR_L;
    uint32_t                          DRAM_LOG_PHY_ADDR_H;
    uint32_t                          DRAM_LOG_PHY_ADDR_L;
    uint32_t                          DRAM_LOG_BUFF_SIZE;

};

struct SMU7_Fusion_GIODpmTable
{

    SMU7_Fusion_GIOLevel              GIOLevel                [SMU7_MAX_LEVELS_GIO];

    SMU7_PIDController                GioPIDController;

    uint32_t                          GIOLevelCount;

    uint8_t                           Enable;
    uint8_t                           GIOVoltageChangeEnable;
    uint8_t                           GIOBootLevel;
    uint8_t                           padding;
    uint8_t                           padding1[2];
    uint8_t                           TargetState;
    uint8_t                           CurrenttState;
    uint8_t                           ThrottleOnHtc;
    uint8_t                           ThermThrottleStatus;
    uint8_t                           ThermThrottleTempSelect;
    uint8_t                           ThermThrottleEnable;
    uint16_t                          TemperatureLimitHigh;
    uint16_t                          TemperatureLimitLow;

};

typedef struct SMU7_Fusion_DpmTable SMU7_Fusion_DpmTable;
typedef struct SMU7_Fusion_GIODpmTable SMU7_Fusion_GIODpmTable;

#pragma pack(pop)

#endif

/*
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU7_DISCRETE_H
#define SMU7_DISCRETE_H

#include "smu7.h"

#pragma pack(push, 1)

#define SMU7_DTE_ITERATIONS 5
#define SMU7_DTE_SOURCES 3
#define SMU7_DTE_SINKS 1
#define SMU7_NUM_CPU_TES 0
#define SMU7_NUM_GPU_TES 1
#define SMU7_NUM_NON_TES 2

struct SMU7_SoftRegisters
{
    uint32_t        RefClockFrequency;
    uint32_t        PmTimerP;
    uint32_t        FeatureEnables;
    uint32_t        PreVBlankGap;
    uint32_t        VBlankTimeout;
    uint32_t        TrainTimeGap;

    uint32_t        MvddSwitchTime;
    uint32_t        LongestAcpiTrainTime;
    uint32_t        AcpiDelay;
    uint32_t        G5TrainTime;
    uint32_t        DelayMpllPwron;
    uint32_t        VoltageChangeTimeout;
    uint32_t        HandshakeDisables;

    uint8_t         DisplayPhy1Config;
    uint8_t         DisplayPhy2Config;
    uint8_t         DisplayPhy3Config;
    uint8_t         DisplayPhy4Config;

    uint8_t         DisplayPhy5Config;
    uint8_t         DisplayPhy6Config;
    uint8_t         DisplayPhy7Config;
    uint8_t         DisplayPhy8Config;

    uint32_t        AverageGraphicsA;
    uint32_t        AverageMemoryA;
    uint32_t        AverageGioA;

    uint8_t         SClkDpmEnabledLevels;
    uint8_t         MClkDpmEnabledLevels;
    uint8_t         LClkDpmEnabledLevels;
    uint8_t         PCIeDpmEnabledLevels;

    uint8_t         UVDDpmEnabledLevels;
    uint8_t         SAMUDpmEnabledLevels;
    uint8_t         ACPDpmEnabledLevels;
    uint8_t         VCEDpmEnabledLevels;

    uint32_t        DRAM_LOG_ADDR_H;
    uint32_t        DRAM_LOG_ADDR_L;
    uint32_t        DRAM_LOG_PHY_ADDR_H;
    uint32_t        DRAM_LOG_PHY_ADDR_L;
    uint32_t        DRAM_LOG_BUFF_SIZE;
    uint32_t        UlvEnterC;
    uint32_t        UlvTime;
    uint32_t        Reserved[3];

};

typedef struct SMU7_SoftRegisters SMU7_SoftRegisters;

struct SMU7_Discrete_VoltageLevel
{
    uint16_t    Voltage;
    uint16_t    StdVoltageHiSidd;
    uint16_t    StdVoltageLoSidd;
    uint8_t     Smio;
    uint8_t     padding;
};

typedef struct SMU7_Discrete_VoltageLevel SMU7_Discrete_VoltageLevel;

struct SMU7_Discrete_GraphicsLevel
{
    uint32_t    Flags;
    uint32_t    MinVddc;
    uint32_t    MinVddcPhases;

    uint32_t    SclkFrequency;

    uint8_t     padding1[2];
    uint16_t    ActivityLevel;

    uint32_t    CgSpllFuncCntl3;
    uint32_t    CgSpllFuncCntl4;
    uint32_t    SpllSpreadSpectrum;
    uint32_t    SpllSpreadSpectrum2;
    uint32_t    CcPwrDynRm;
    uint32_t    CcPwrDynRm1;
    uint8_t     SclkDid;
    uint8_t     DisplayWatermark;
    uint8_t     EnabledForActivity;
    uint8_t     EnabledForThrottle;
    uint8_t     UpH;
    uint8_t     DownH;
    uint8_t     VoltageDownH;
    uint8_t     PowerThrottle;
    uint8_t     DeepSleepDivId;
    uint8_t     padding[3];
};

typedef struct SMU7_Discrete_GraphicsLevel SMU7_Discrete_GraphicsLevel;

struct SMU7_Discrete_ACPILevel
{
    uint32_t    Flags;
    uint32_t    MinVddc;
    uint32_t    MinVddcPhases;
    uint32_t    SclkFrequency;
    uint8_t     SclkDid;
    uint8_t     DisplayWatermark;
    uint8_t     DeepSleepDivId;
    uint8_t     padding;
    uint32_t    CgSpllFuncCntl;
    uint32_t    CgSpllFuncCntl2;
    uint32_t    CgSpllFuncCntl3;
    uint32_t    CgSpllFuncCntl4;
    uint32_t    SpllSpreadSpectrum;
    uint32_t    SpllSpreadSpectrum2;
    uint32_t    CcPwrDynRm;
    uint32_t    CcPwrDynRm1;
};

typedef struct SMU7_Discrete_ACPILevel SMU7_Discrete_ACPILevel;

struct SMU7_Discrete_Ulv
{
    uint32_t    CcPwrDynRm;
    uint32_t    CcPwrDynRm1;
    uint16_t    VddcOffset;
    uint8_t     VddcOffsetVid;
    uint8_t     VddcPhase;
    uint32_t    Reserved;
};

typedef struct SMU7_Discrete_Ulv SMU7_Discrete_Ulv;

struct SMU7_Discrete_MemoryLevel
{
    uint32_t    MinVddc;
    uint32_t    MinVddcPhases;
    uint32_t    MinVddci;
    uint32_t    MinMvdd;

    uint32_t    MclkFrequency;

    uint8_t     EdcReadEnable;
    uint8_t     EdcWriteEnable;
    uint8_t     RttEnable;
    uint8_t     StutterEnable;

    uint8_t     StrobeEnable;
    uint8_t     StrobeRatio;
    uint8_t     EnabledForThrottle;
    uint8_t     EnabledForActivity;

    uint8_t     UpH;
    uint8_t     DownH;
    uint8_t     VoltageDownH;
    uint8_t     padding;

    uint16_t    ActivityLevel;
    uint8_t     DisplayWatermark;
    uint8_t     padding1;

    uint32_t    MpllFuncCntl;
    uint32_t    MpllFuncCntl_1;
    uint32_t    MpllFuncCntl_2;
    uint32_t    MpllAdFuncCntl;
    uint32_t    MpllDqFuncCntl;
    uint32_t    MclkPwrmgtCntl;
    uint32_t    DllCntl;
    uint32_t    MpllSs1;
    uint32_t    MpllSs2;
};

typedef struct SMU7_Discrete_MemoryLevel SMU7_Discrete_MemoryLevel;

struct SMU7_Discrete_LinkLevel
{
    uint8_t     PcieGenSpeed;
    uint8_t     PcieLaneCount;
    uint8_t     EnabledForActivity;
    uint8_t     Padding;
    uint32_t    DownT;
    uint32_t    UpT;
    uint32_t    Reserved;
};

typedef struct SMU7_Discrete_LinkLevel SMU7_Discrete_LinkLevel;


struct SMU7_Discrete_MCArbDramTimingTableEntry
{
    uint32_t McArbDramTiming;
    uint32_t McArbDramTiming2;
    uint8_t  McArbBurstTime;
    uint8_t  padding[3];
};

typedef struct SMU7_Discrete_MCArbDramTimingTableEntry SMU7_Discrete_MCArbDramTimingTableEntry;

struct SMU7_Discrete_MCArbDramTimingTable
{
    SMU7_Discrete_MCArbDramTimingTableEntry entries[SMU__NUM_SCLK_DPM_STATE][SMU__NUM_MCLK_DPM_LEVELS];
};

typedef struct SMU7_Discrete_MCArbDramTimingTable SMU7_Discrete_MCArbDramTimingTable;

struct SMU7_Discrete_UvdLevel
{
    uint32_t VclkFrequency;
    uint32_t DclkFrequency;
    uint16_t MinVddc;
    uint8_t  MinVddcPhases;
    uint8_t  VclkDivider;
    uint8_t  DclkDivider;
    uint8_t  padding[3];
};

typedef struct SMU7_Discrete_UvdLevel SMU7_Discrete_UvdLevel;

struct SMU7_Discrete_ExtClkLevel
{
    uint32_t Frequency;
    uint16_t MinVoltage;
    uint8_t  MinPhases;
    uint8_t  Divider;
};

typedef struct SMU7_Discrete_ExtClkLevel SMU7_Discrete_ExtClkLevel;

struct SMU7_Discrete_StateInfo
{
    uint32_t SclkFrequency;
    uint32_t MclkFrequency;
    uint32_t VclkFrequency;
    uint32_t DclkFrequency;
    uint32_t SamclkFrequency;
    uint32_t AclkFrequency;
    uint32_t EclkFrequency;
    uint16_t MvddVoltage;
    uint16_t padding16;
    uint8_t  DisplayWatermark;
    uint8_t  McArbIndex;
    uint8_t  McRegIndex;
    uint8_t  SeqIndex;
    uint8_t  SclkDid;
    int8_t   SclkIndex;
    int8_t   MclkIndex;
    uint8_t  PCIeGen;

};

typedef struct SMU7_Discrete_StateInfo SMU7_Discrete_StateInfo;


struct SMU7_Discrete_DpmTable
{
    SMU7_PIDController                  GraphicsPIDController;
    SMU7_PIDController                  MemoryPIDController;
    SMU7_PIDController                  LinkPIDController;

    uint32_t                            SystemFlags;


    uint32_t                            SmioMaskVddcVid;
    uint32_t                            SmioMaskVddcPhase;
    uint32_t                            SmioMaskVddciVid;
    uint32_t                            SmioMaskMvddVid;

    uint32_t                            VddcLevelCount;
    uint32_t                            VddciLevelCount;
    uint32_t                            MvddLevelCount;

    SMU7_Discrete_VoltageLevel          VddcLevel               [SMU7_MAX_LEVELS_VDDC];
//    SMU7_Discrete_VoltageLevel          VddcStandardReference   [SMU7_MAX_LEVELS_VDDC];
    SMU7_Discrete_VoltageLevel          VddciLevel              [SMU7_MAX_LEVELS_VDDCI];
    SMU7_Discrete_VoltageLevel          MvddLevel               [SMU7_MAX_LEVELS_MVDD];

    uint8_t                             GraphicsDpmLevelCount;
    uint8_t                             MemoryDpmLevelCount;
    uint8_t                             LinkLevelCount;
    uint8_t                             UvdLevelCount;
    uint8_t                             VceLevelCount;
    uint8_t                             AcpLevelCount;
    uint8_t                             SamuLevelCount;
    uint8_t                             MasterDeepSleepControl;
    uint32_t                            VRConfig;
    uint32_t                            Reserved[4];
//    uint32_t                            SamuDefaultLevel;

    SMU7_Discrete_GraphicsLevel         GraphicsLevel           [SMU7_MAX_LEVELS_GRAPHICS];
    SMU7_Discrete_MemoryLevel           MemoryACPILevel;
    SMU7_Discrete_MemoryLevel           MemoryLevel             [SMU7_MAX_LEVELS_MEMORY];
    SMU7_Discrete_LinkLevel             LinkLevel               [SMU7_MAX_LEVELS_LINK];
    SMU7_Discrete_ACPILevel             ACPILevel;
    SMU7_Discrete_UvdLevel              UvdLevel                [SMU7_MAX_LEVELS_UVD];
    SMU7_Discrete_ExtClkLevel           VceLevel                [SMU7_MAX_LEVELS_VCE];
    SMU7_Discrete_ExtClkLevel           AcpLevel                [SMU7_MAX_LEVELS_ACP];
    SMU7_Discrete_ExtClkLevel           SamuLevel               [SMU7_MAX_LEVELS_SAMU];
    SMU7_Discrete_Ulv                   Ulv;

    uint32_t                            SclkStepSize;
    uint32_t                            Smio                    [SMU7_MAX_ENTRIES_SMIO];

    uint8_t                             UvdBootLevel;
    uint8_t                             VceBootLevel;
    uint8_t                             AcpBootLevel;
    uint8_t                             SamuBootLevel;

    uint8_t                             UVDInterval;
    uint8_t                             VCEInterval;
    uint8_t                             ACPInterval;
    uint8_t                             SAMUInterval;

    uint8_t                             GraphicsBootLevel;
    uint8_t                             GraphicsVoltageChangeEnable;
    uint8_t                             GraphicsThermThrottleEnable;
    uint8_t                             GraphicsInterval;

    uint8_t                             VoltageInterval;
    uint8_t                             ThermalInterval;
    uint16_t                            TemperatureLimitHigh;

    uint16_t                            TemperatureLimitLow;
    uint8_t                             MemoryBootLevel;
    uint8_t                             MemoryVoltageChangeEnable;

    uint8_t                             MemoryInterval;
    uint8_t                             MemoryThermThrottleEnable;
    uint16_t                            VddcVddciDelta;

    uint16_t                            VoltageResponseTime;
    uint16_t                            PhaseResponseTime;

    uint8_t                             PCIeBootLinkLevel;
    uint8_t                             PCIeGenInterval;
    uint8_t                             DTEInterval;
    uint8_t                             DTEMode;

    uint8_t                             SVI2Enable;
    uint8_t                             VRHotGpio;
    uint8_t                             AcDcGpio;
    uint8_t                             ThermGpio;

    uint16_t                            PPM_PkgPwrLimit;
    uint16_t                            PPM_TemperatureLimit;

    uint16_t                            DefaultTdp;
    uint16_t                            TargetTdp;

    uint16_t                            FpsHighT;
    uint16_t                            FpsLowT;

    uint16_t                            BAPMTI_R  [SMU7_DTE_ITERATIONS][SMU7_DTE_SOURCES][SMU7_DTE_SINKS];
    uint16_t                            BAPMTI_RC [SMU7_DTE_ITERATIONS][SMU7_DTE_SOURCES][SMU7_DTE_SINKS];

    uint8_t                             DTEAmbientTempBase;
    uint8_t                             DTETjOffset;
    uint8_t                             GpuTjMax;
    uint8_t                             GpuTjHyst;

    uint16_t                            BootVddc;
    uint16_t                            BootVddci;

    uint16_t                            BootMVdd;
    uint16_t                            padding;

    uint32_t                            BAPM_TEMP_GRADIENT;

    uint32_t                            LowSclkInterruptT;
};

typedef struct SMU7_Discrete_DpmTable SMU7_Discrete_DpmTable;

#define SMU7_DISCRETE_MC_REGISTER_ARRAY_SIZE 16
#define SMU7_DISCRETE_MC_REGISTER_ARRAY_SET_COUNT SMU7_MAX_LEVELS_MEMORY

struct SMU7_Discrete_MCRegisterAddress
{
    uint16_t s0;
    uint16_t s1;
};

typedef struct SMU7_Discrete_MCRegisterAddress SMU7_Discrete_MCRegisterAddress;

struct SMU7_Discrete_MCRegisterSet
{
    uint32_t value[SMU7_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};

typedef struct SMU7_Discrete_MCRegisterSet SMU7_Discrete_MCRegisterSet;

struct SMU7_Discrete_MCRegisters
{
    uint8_t                             last;
    uint8_t                             reserved[3];
    SMU7_Discrete_MCRegisterAddress     address[SMU7_DISCRETE_MC_REGISTER_ARRAY_SIZE];
    SMU7_Discrete_MCRegisterSet         data[SMU7_DISCRETE_MC_REGISTER_ARRAY_SET_COUNT];
};

typedef struct SMU7_Discrete_MCRegisters SMU7_Discrete_MCRegisters;

struct SMU7_Discrete_FanTable
{
	uint16_t FdoMode;
	int16_t  TempMin;
	int16_t  TempMed;
	int16_t  TempMax;
	int16_t  Slope1;
	int16_t  Slope2;
	int16_t  FdoMin;
	int16_t  HystUp;
	int16_t  HystDown;
	int16_t  HystSlope;
	int16_t  TempRespLim;
	int16_t  TempCurr;
	int16_t  SlopeCurr;
	int16_t  PwmCurr;
	uint32_t RefreshPeriod;
	int16_t  FdoMax;
	uint8_t  TempSrc;
	int8_t   Padding;
};

typedef struct SMU7_Discrete_FanTable SMU7_Discrete_FanTable;


struct SMU7_Discrete_PmFuses {
  // dw0-dw1
  uint8_t BapmVddCVidHiSidd[8];

  // dw2-dw3
  uint8_t BapmVddCVidLoSidd[8];

  // dw4-dw5
  uint8_t VddCVid[8];

  // dw6
  uint8_t SviLoadLineEn;
  uint8_t SviLoadLineVddC;
  uint8_t SviLoadLineTrimVddC;
  uint8_t SviLoadLineOffsetVddC;

  // dw7
  uint16_t TDC_VDDC_PkgLimit;
  uint8_t TDC_VDDC_ThrottleReleaseLimitPerc;
  uint8_t TDC_MAWt;

  // dw8
  uint8_t TdcWaterfallCtl;
  uint8_t LPMLTemperatureMin;
  uint8_t LPMLTemperatureMax;
  uint8_t Reserved;

  // dw9-dw10
  uint8_t BapmVddCVidHiSidd2[8];

  // dw11-dw12
  int16_t FuzzyFan_ErrorSetDelta;
  int16_t FuzzyFan_ErrorRateSetDelta;
  int16_t FuzzyFan_PwmSetDelta;
  uint16_t CalcMeasPowerBlend;

  // dw13-dw16
  uint8_t GnbLPML[16];

  // dw17
  uint8_t GnbLPMLMaxVid;
  uint8_t GnbLPMLMinVid;
  uint8_t Reserved1[2];

  // dw18
  uint16_t BapmVddCBaseLeakageHiSidd;
  uint16_t BapmVddCBaseLeakageLoSidd;
};

typedef struct SMU7_Discrete_PmFuses SMU7_Discrete_PmFuses;


#pragma pack(pop)

#endif

/*
 * Copyright 2014 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _PP_COMMON_H
#define _PP_COMMON_H

#include "smu7_ppsmc.h"
#include "cgs_common.h"

#include "smu/smu_7_1_3_d.h"
#include "smu/smu_7_1_3_sh_mask.h"


#include "smu74.h"
#include "smu74_discrete.h"

#include "gmc/gmc_8_1_d.h"
#include "gmc/gmc_8_1_sh_mask.h"

#include "bif/bif_5_0_d.h"
#include "bif/bif_5_0_sh_mask.h"

#include "dce/dce_10_0_d.h"
#include "dce/dce_10_0_sh_mask.h"

#include "gca/gfx_8_0_d.h"
#include "gca/gfx_8_0_sh_mask.h"

#include "oss/oss_3_0_d.h"
#include "oss/oss_3_0_sh_mask.h"


#endif

/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU75_DISCRETE_H
#define SMU75_DISCRETE_H

#include "smu75.h"

#pragma pack(push, 1)

#define NUM_SCLK_RANGE 8

#define VCO_3_6 1
#define VCO_2_4 3

#define POSTDIV_DIV_BY_1  0
#define POSTDIV_DIV_BY_2  1
#define POSTDIV_DIV_BY_4  2
#define POSTDIV_DIV_BY_8  3
#define POSTDIV_DIV_BY_16 4

struct sclkFcwRange_t {
	uint8_t  vco_setting; /* 1: 3-6GHz, 3: 2-4GHz */
	uint8_t  postdiv;     /* divide by 2^n */
	uint16_t fcw_pcc;
	uint16_t fcw_trans_upper;
	uint16_t fcw_trans_lower;
};
typedef struct sclkFcwRange_t sclkFcwRange_t;

struct SMIO_Pattern {
	uint16_t Voltage;
	uint8_t  Smio;
	uint8_t  padding;
};

typedef struct SMIO_Pattern SMIO_Pattern;

struct SMIO_Table {
	SMIO_Pattern Pattern[SMU_MAX_SMIO_LEVELS];
};

typedef struct SMIO_Table SMIO_Table;

struct SMU_SclkSetting {
	uint32_t    SclkFrequency;
	uint16_t    Fcw_int;
	uint16_t    Fcw_frac;
	uint16_t    Pcc_fcw_int;
	uint8_t     PllRange;
	uint8_t     SSc_En;
	uint16_t    Sclk_slew_rate;
	uint16_t    Pcc_up_slew_rate;
	uint16_t    Pcc_down_slew_rate;
	uint16_t    Fcw1_int;
	uint16_t    Fcw1_frac;
	uint16_t    Sclk_ss_slew_rate;
};
typedef struct SMU_SclkSetting SMU_SclkSetting;

struct SMU75_Discrete_GraphicsLevel {
	SMU_VoltageLevel MinVoltage;

	uint8_t     pcieDpmLevel;
	uint8_t     DeepSleepDivId;
	uint16_t    ActivityLevel;

	uint32_t    CgSpllFuncCntl3;
	uint32_t    CgSpllFuncCntl4;
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;

	uint8_t     SclkDid;
	uint8_t     padding;
	uint8_t     EnabledForActivity;
	uint8_t     EnabledForThrottle;
	uint8_t     UpHyst;
	uint8_t     DownHyst;
	uint8_t     VoltageDownHyst;
	uint8_t     PowerThrottle;

	SMU_SclkSetting SclkSetting;

	uint8_t  ScksStretchThreshVid[NUM_SCKS_STATE_TYPES];
	uint16_t Padding;
};

typedef struct SMU75_Discrete_GraphicsLevel SMU75_Discrete_GraphicsLevel;

struct SMU75_Discrete_ACPILevel {
	uint32_t    Flags;
	SMU_VoltageLevel MinVoltage;
	uint32_t    SclkFrequency;
	uint8_t     SclkDid;
	uint8_t     DisplayWatermark;
	uint8_t     DeepSleepDivId;
	uint8_t     padding;
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;

	SMU_SclkSetting SclkSetting;
};

typedef struct SMU75_Discrete_ACPILevel SMU75_Discrete_ACPILevel;

struct SMU75_Discrete_Ulv {
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;
	uint16_t    VddcOffset;
	uint8_t     VddcOffsetVid;
	uint8_t     VddcPhase;
	uint16_t    BifSclkDfs;
	uint16_t    Reserved;
};

typedef struct SMU75_Discrete_Ulv SMU75_Discrete_Ulv;

struct SMU75_Discrete_MemoryLevel {
	SMU_VoltageLevel MinVoltage;
	uint32_t    MinMvdd;

	uint32_t    MclkFrequency;

	uint8_t     StutterEnable;
	uint8_t     EnabledForThrottle;
	uint8_t     EnabledForActivity;
	uint8_t     padding_0;

	uint8_t     UpHyst;
	uint8_t     DownHyst;
	uint8_t     VoltageDownHyst;
	uint8_t     padding_1;

	uint16_t    ActivityLevel;
	uint8_t     DisplayWatermark;
	uint8_t     padding_2;

	uint16_t    Fcw_int;
	uint16_t    Fcw_frac;
	uint8_t     Postdiv;
	uint8_t     padding_3[3];
};

typedef struct SMU75_Discrete_MemoryLevel SMU75_Discrete_MemoryLevel;

struct SMU75_Discrete_LinkLevel {
	uint8_t     PcieGenSpeed;
	uint8_t     PcieLaneCount;
	uint8_t     EnabledForActivity;
	uint8_t     SPC;
	uint32_t    DownThreshold;
	uint32_t    UpThreshold;
	uint16_t    BifSclkDfs;
	uint16_t    Reserved;
};

typedef struct SMU75_Discrete_LinkLevel SMU75_Discrete_LinkLevel;


/* MC ARB DRAM Timing registers. */
struct SMU75_Discrete_MCArbDramTimingTableEntry {
	uint32_t McArbDramTiming;
	uint32_t McArbDramTiming2;
	uint32_t McArbBurstTime;
	uint32_t McArbRfshRate;
	uint32_t McArbMisc3;
};

typedef struct SMU75_Discrete_MCArbDramTimingTableEntry SMU75_Discrete_MCArbDramTimingTableEntry;

struct SMU75_Discrete_MCArbDramTimingTable {
	SMU75_Discrete_MCArbDramTimingTableEntry entries[SMU__NUM_SCLK_DPM_STATE][SMU__NUM_MCLK_DPM_LEVELS];
};

typedef struct SMU75_Discrete_MCArbDramTimingTable SMU75_Discrete_MCArbDramTimingTable;

/* UVD VCLK/DCLK state (level) definition. */
struct SMU75_Discrete_UvdLevel {
	uint32_t VclkFrequency;
	uint32_t DclkFrequency;
	SMU_VoltageLevel MinVoltage;
	uint8_t  VclkDivider;
	uint8_t  DclkDivider;
	uint8_t  padding[2];
};

typedef struct SMU75_Discrete_UvdLevel SMU75_Discrete_UvdLevel;

/* Clocks for other external blocks (VCE, ACP, SAMU). */
struct SMU75_Discrete_ExtClkLevel {
	uint32_t Frequency;
	SMU_VoltageLevel MinVoltage;
	uint8_t  Divider;
	uint8_t  padding[3];
};

typedef struct SMU75_Discrete_ExtClkLevel SMU75_Discrete_ExtClkLevel;

struct SMU75_Discrete_StateInfo {
	uint32_t SclkFrequency;
	uint32_t MclkFrequency;
	uint32_t VclkFrequency;
	uint32_t DclkFrequency;
	uint32_t SamclkFrequency;
	uint32_t AclkFrequency;
	uint32_t EclkFrequency;
	uint16_t MvddVoltage;
	uint16_t padding16;
	uint8_t  DisplayWatermark;
	uint8_t  McArbIndex;
	uint8_t  McRegIndex;
	uint8_t  SeqIndex;
	uint8_t  SclkDid;
	int8_t   SclkIndex;
	int8_t   MclkIndex;
	uint8_t  PCIeGen;
};

typedef struct SMU75_Discrete_StateInfo SMU75_Discrete_StateInfo;

struct SMU75_Discrete_DpmTable {
	SMU75_PIDController                  GraphicsPIDController;
	SMU75_PIDController                  MemoryPIDController;
	SMU75_PIDController                  LinkPIDController;

	uint32_t                            SystemFlags;

	uint32_t                            VRConfig;
	uint32_t                            SmioMask1;
	uint32_t                            SmioMask2;
	SMIO_Table                          SmioTable1;
	SMIO_Table                          SmioTable2;

	uint32_t                            MvddLevelCount;

	uint8_t                             BapmVddcVidHiSidd        [SMU75_MAX_LEVELS_VDDC];
	uint8_t                             BapmVddcVidLoSidd        [SMU75_MAX_LEVELS_VDDC];
	uint8_t                             BapmVddcVidHiSidd2       [SMU75_MAX_LEVELS_VDDC];

	uint8_t                             GraphicsDpmLevelCount;
	uint8_t                             MemoryDpmLevelCount;
	uint8_t                             LinkLevelCount;
	uint8_t                             MasterDeepSleepControl;

	uint8_t                             UvdLevelCount;
	uint8_t                             VceLevelCount;
	uint8_t                             AcpLevelCount;
	uint8_t                             SamuLevelCount;

	uint8_t                             ThermOutGpio;
	uint8_t                             ThermOutPolarity;
	uint8_t                             ThermOutMode;
	uint8_t                             BootPhases;

	uint8_t                             VRHotLevel;
	uint8_t                             LdoRefSel;

	uint8_t                             Reserved1[2];

	uint16_t                            FanStartTemperature;
	uint16_t                            FanStopTemperature;

	uint16_t                            MaxVoltage;
	uint16_t                            Reserved2;
	uint32_t                            Reserved;

	SMU75_Discrete_GraphicsLevel        GraphicsLevel           [SMU75_MAX_LEVELS_GRAPHICS];
	SMU75_Discrete_MemoryLevel          MemoryACPILevel;
	SMU75_Discrete_MemoryLevel          MemoryLevel             [SMU75_MAX_LEVELS_MEMORY];
	SMU75_Discrete_LinkLevel            LinkLevel               [SMU75_MAX_LEVELS_LINK];
	SMU75_Discrete_ACPILevel            ACPILevel;
	SMU75_Discrete_UvdLevel             UvdLevel                [SMU75_MAX_LEVELS_UVD];
	SMU75_Discrete_ExtClkLevel          VceLevel                [SMU75_MAX_LEVELS_VCE];
	SMU75_Discrete_ExtClkLevel          AcpLevel                [SMU75_MAX_LEVELS_ACP];
	SMU75_Discrete_ExtClkLevel          SamuLevel               [SMU75_MAX_LEVELS_SAMU];
	SMU75_Discrete_Ulv                  Ulv;

	uint8_t                             DisplayWatermark        [SMU75_MAX_LEVELS_MEMORY][SMU75_MAX_LEVELS_GRAPHICS];

	uint32_t                            SclkStepSize;
	uint32_t                            Smio                    [SMU75_MAX_ENTRIES_SMIO];

	uint8_t                             UvdBootLevel;
	uint8_t                             VceBootLevel;
	uint8_t                             AcpBootLevel;
	uint8_t                             SamuBootLevel;

	uint8_t                             GraphicsBootLevel;
	uint8_t                             GraphicsVoltageChangeEnable;
	uint8_t                             GraphicsThermThrottleEnable;
	uint8_t                             GraphicsInterval;

	uint8_t                             VoltageInterval;
	uint8_t                             ThermalInterval;
	uint16_t                            TemperatureLimitHigh;

	uint16_t                            TemperatureLimitLow;
	uint8_t                             MemoryBootLevel;
	uint8_t                             MemoryVoltageChangeEnable;

	uint16_t                            BootMVdd;
	uint8_t                             MemoryInterval;
	uint8_t                             MemoryThermThrottleEnable;

	uint16_t                            VoltageResponseTime;
	uint16_t                            PhaseResponseTime;

	uint8_t                             PCIeBootLinkLevel;
	uint8_t                             PCIeGenInterval;
	uint8_t                             DTEInterval;
	uint8_t                             DTEMode;

	uint8_t                             SVI2Enable;
	uint8_t                             VRHotGpio;
	uint8_t                             AcDcGpio;
	uint8_t                             ThermGpio;

	uint16_t                            PPM_PkgPwrLimit;
	uint16_t                            PPM_TemperatureLimit;

	uint16_t                            DefaultTdp;
	uint16_t                            TargetTdp;

	uint16_t                            FpsHighThreshold;
	uint16_t                            FpsLowThreshold;

	uint16_t                            BAPMTI_R  [SMU75_DTE_ITERATIONS][SMU75_DTE_SOURCES][SMU75_DTE_SINKS];
	uint16_t                            BAPMTI_RC [SMU75_DTE_ITERATIONS][SMU75_DTE_SOURCES][SMU75_DTE_SINKS];

	uint16_t                            TemperatureLimitEdge;
	uint16_t                            TemperatureLimitHotspot;

	uint16_t                            BootVddc;
	uint16_t                            BootVddci;

	uint16_t                            FanGainEdge;
	uint16_t                            FanGainHotspot;

	uint32_t                            LowSclkInterruptThreshold;
	uint32_t                            VddGfxReChkWait;

	uint8_t                             ClockStretcherAmount;
	uint8_t                             Sclk_CKS_masterEn0_7;
	uint8_t                             Sclk_CKS_masterEn8_15;
	uint8_t                             DPMFreezeAndForced;

	uint8_t                             Sclk_voltageOffset[8];

	SMU_ClockStretcherDataTable         ClockStretcherDataTable;
	SMU_CKS_LOOKUPTable                 CKS_LOOKUPTable;

	uint32_t                            CurrSclkPllRange;
	sclkFcwRange_t                      SclkFcwRangeTable[NUM_SCLK_RANGE];

	GB_VDROOP_TABLE_t                   BTCGB_VDROOP_TABLE[BTCGB_VDROOP_TABLE_MAX_ENTRIES];
	SMU_QuadraticCoeffs                 AVFSGB_FUSE_TABLE[AVFSGB_VDROOP_TABLE_MAX_ENTRIES];
};

typedef struct SMU75_Discrete_DpmTable SMU75_Discrete_DpmTable;

struct SMU75_Discrete_FanTable {
	uint16_t FdoMode;
	int16_t  TempMin;
	int16_t  TempMed;
	int16_t  TempMax;
	int16_t  Slope1;
	int16_t  Slope2;
	int16_t  FdoMin;
	int16_t  HystUp;
	int16_t  HystDown;
	int16_t  HystSlope;
	int16_t  TempRespLim;
	int16_t  TempCurr;
	int16_t  SlopeCurr;
	int16_t  PwmCurr;
	uint32_t RefreshPeriod;
	int16_t  FdoMax;
	uint8_t  TempSrc;
	int8_t   Padding;
};

typedef struct SMU75_Discrete_FanTable SMU75_Discrete_FanTable;

#define SMU7_DISCRETE_GPIO_SCLK_DEBUG             4
#define SMU7_DISCRETE_GPIO_SCLK_DEBUG_BIT         (0x1 << SMU7_DISCRETE_GPIO_SCLK_DEBUG)



struct SMU7_MclkDpmScoreboard {
	uint32_t PercentageBusy;

	int32_t  PIDError;
	int32_t  PIDIntegral;
	int32_t  PIDOutput;

	uint32_t SigmaDeltaAccum;
	uint32_t SigmaDeltaOutput;
	uint32_t SigmaDeltaLevel;

	uint32_t UtilizationSetpoint;

	uint8_t  TdpClampMode;
	uint8_t  TdcClampMode;
	uint8_t  ThermClampMode;
	uint8_t  VoltageBusy;

	int8_t   CurrLevel;
	int8_t   TargLevel;
	uint8_t  LevelChangeInProgress;
	uint8_t  UpHyst;

	uint8_t  DownHyst;
	uint8_t  VoltageDownHyst;
	uint8_t  DpmEnable;
	uint8_t  DpmRunning;

	uint8_t  DpmForce;
	uint8_t  DpmForceLevel;
	uint8_t  padding2;
	uint8_t  McArbIndex;

	uint32_t MinimumPerfMclk;

	uint8_t  AcpiReq;
	uint8_t  AcpiAck;
	uint8_t  MclkSwitchInProgress;
	uint8_t  MclkSwitchCritical;

	uint8_t  IgnoreVBlank;
	uint8_t  TargetMclkIndex;
	uint8_t  TargetMvddIndex;
	uint8_t  MclkSwitchResult;

	uint16_t VbiFailureCount;
	uint8_t  VbiWaitCounter;
	uint8_t  EnabledLevelsChange;

	uint16_t LevelResidencyCounters [SMU75_MAX_LEVELS_MEMORY];
	uint16_t LevelSwitchCounters [SMU75_MAX_LEVELS_MEMORY];

	void     (*TargetStateCalculator)(uint8_t);
	void     (*SavedTargetStateCalculator)(uint8_t);

	uint16_t AutoDpmInterval;
	uint16_t AutoDpmRange;

	uint16_t VbiTimeoutCount;
	uint16_t MclkSwitchingTime;

	uint8_t  fastSwitch;
	uint8_t  Save_PIC_VDDGFX_EXIT;
	uint8_t  Save_PIC_VDDGFX_ENTER;
	uint8_t  VbiTimeout;

	uint32_t HbmTempRegBackup;
};

typedef struct SMU7_MclkDpmScoreboard SMU7_MclkDpmScoreboard;

struct SMU7_UlvScoreboard {
	uint8_t     EnterUlv;
	uint8_t     ExitUlv;
	uint8_t     UlvActive;
	uint8_t     WaitingForUlv;
	uint8_t     UlvEnable;
	uint8_t     UlvRunning;
	uint8_t     UlvMasterEnable;
	uint8_t     padding;
	uint32_t    UlvAbortedCount;
	uint32_t    UlvTimeStamp;
};

typedef struct SMU7_UlvScoreboard SMU7_UlvScoreboard;

struct VddgfxSavedRegisters {
	uint32_t GPU_DBG[3];
	uint32_t MEC_BaseAddress_Hi;
	uint32_t MEC_BaseAddress_Lo;
	uint32_t THM_TMON0_CTRL2__RDIR_PRESENT;
	uint32_t THM_TMON1_CTRL2__RDIR_PRESENT;
	uint32_t CP_INT_CNTL;
};

typedef struct VddgfxSavedRegisters VddgfxSavedRegisters;

struct SMU7_VddGfxScoreboard {
	uint8_t     VddGfxEnable;
	uint8_t     VddGfxActive;
	uint8_t     VPUResetOccured;
	uint8_t     padding;

	uint32_t    VddGfxEnteredCount;
	uint32_t    VddGfxAbortedCount;

	uint32_t    VddGfxVid;

	VddgfxSavedRegisters SavedRegisters;
};

typedef struct SMU7_VddGfxScoreboard SMU7_VddGfxScoreboard;

struct SMU7_TdcLimitScoreboard {
	uint8_t  Enable;
	uint8_t  Running;
	uint16_t Alpha;
	uint32_t FilteredIddc;
	uint32_t IddcLimit;
	uint32_t IddcHyst;
	SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_TdcLimitScoreboard SMU7_TdcLimitScoreboard;

struct SMU7_PkgPwrLimitScoreboard {
	uint8_t  Enable;
	uint8_t  Running;
	uint16_t Alpha;
	uint32_t FilteredPkgPwr;
	uint32_t Limit;
	uint32_t Hyst;
	uint32_t LimitFromDriver;
	uint8_t PowerSharingEnabled;
	uint8_t PowerSharingCounter;
	uint8_t PowerSharingINTEnabled;
	uint8_t GFXActivityCounterEnabled;
	uint32_t EnergyCount;
	uint32_t PSACTCount;
	uint8_t RollOverRequired;
	uint8_t RollOverCount;
	uint8_t padding[2];
	SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_PkgPwrLimitScoreboard SMU7_PkgPwrLimitScoreboard;

struct SMU7_BapmScoreboard {
	uint32_t source_powers[SMU75_DTE_SOURCES];
	uint32_t source_powers_last[SMU75_DTE_SOURCES];
	int32_t entity_temperatures[SMU75_NUM_GPU_TES];
	int32_t initial_entity_temperatures[SMU75_NUM_GPU_TES];
	int32_t Limit;
	int32_t Hyst;
	int32_t therm_influence_coeff_table[SMU75_DTE_ITERATIONS * SMU75_DTE_SOURCES * SMU75_DTE_SINKS * 2];
	int32_t therm_node_table[SMU75_DTE_ITERATIONS * SMU75_DTE_SOURCES * SMU75_DTE_SINKS];
	uint16_t ConfigTDPPowerScalar;
	uint16_t FanSpeedPowerScalar;
	uint16_t OverDrivePowerScalar;
	uint16_t OverDriveLimitScalar;
	uint16_t FinalPowerScalar;
	uint8_t VariantID;
	uint8_t spare997;

	SMU7_HystController_Data HystControllerData;

	int32_t temperature_gradient_slope;
	int32_t temperature_gradient;
	uint32_t measured_temperature;
};


typedef struct SMU7_BapmScoreboard SMU7_BapmScoreboard;

struct SMU7_AcpiScoreboard {
	uint32_t SavedInterruptMask[2];
	uint8_t LastACPIRequest;
	uint8_t CgBifResp;
	uint8_t RequestType;
	uint8_t Padding;
	SMU75_Discrete_ACPILevel D0Level;
};

typedef struct SMU7_AcpiScoreboard SMU7_AcpiScoreboard;

struct SMU75_Discrete_PmFuses {
	uint8_t BapmVddCVidHiSidd[8];

	uint8_t BapmVddCVidLoSidd[8];

	uint8_t VddCVid[8];

	uint8_t SviLoadLineEn;
	uint8_t SviLoadLineVddC;
	uint8_t SviLoadLineTrimVddC;
	uint8_t SviLoadLineOffsetVddC;

	uint16_t TDC_VDDC_PkgLimit;
	uint8_t TDC_VDDC_ThrottleReleaseLimitPerc;
	uint8_t TDC_MAWt;

	uint8_t TdcWaterfallCtl;
	uint8_t LPMLTemperatureMin;
	uint8_t LPMLTemperatureMax;
	uint8_t Reserved;

	uint8_t LPMLTemperatureScaler[16];

	int16_t FuzzyFan_ErrorSetDelta;
	int16_t FuzzyFan_ErrorRateSetDelta;
	int16_t FuzzyFan_PwmSetDelta;
	uint16_t Reserved6;

	uint8_t GnbLPML[16];

	uint8_t GnbLPMLMaxVid;
	uint8_t GnbLPMLMinVid;
	uint8_t Reserved1[2];

	uint16_t BapmVddCBaseLeakageHiSidd;
	uint16_t BapmVddCBaseLeakageLoSidd;

	uint16_t  VFT_Temp[3];
	uint8_t   Version;
	uint8_t   padding;

	SMU_QuadraticCoeffs VFT_ATE[3];

	SMU_QuadraticCoeffs AVFS_GB;
	SMU_QuadraticCoeffs ATE_ACBTC_GB;

	SMU_QuadraticCoeffs P2V;

	uint32_t PsmCharzFreq;

	uint16_t InversionVoltage;
	uint16_t PsmCharzTemp;

	uint32_t EnabledAvfsModules;

	SMU_QuadraticCoeffs BtcGbv_CksOff;
};

typedef struct SMU75_Discrete_PmFuses SMU75_Discrete_PmFuses;

struct SMU7_Discrete_Log_Header_Table {
	uint32_t    version;
	uint32_t    asic_id;
	uint16_t    flags;
	uint16_t    entry_size;
	uint32_t    total_size;
	uint32_t    num_of_entries;
	uint8_t     type;
	uint8_t     mode;
	uint8_t     filler_0[2];
	uint32_t    filler_1[2];
};

typedef struct SMU7_Discrete_Log_Header_Table SMU7_Discrete_Log_Header_Table;

struct SMU7_Discrete_Log_Cntl {
	uint8_t             Enabled;
	uint8_t             Type;
	uint8_t             padding[2];
	uint32_t            BufferSize;
	uint32_t            SamplesLogged;
	uint32_t            SampleSize;
	uint32_t            AddrL;
	uint32_t            AddrH;
};

typedef struct SMU7_Discrete_Log_Cntl SMU7_Discrete_Log_Cntl;

#if defined SMU__DGPU_ONLY
#define CAC_ACC_NW_NUM_OF_SIGNALS 87
#endif


struct SMU7_Discrete_Cac_Collection_Table {
	uint32_t temperature;
	uint32_t cac_acc_nw[CAC_ACC_NW_NUM_OF_SIGNALS];
};

typedef struct SMU7_Discrete_Cac_Collection_Table SMU7_Discrete_Cac_Collection_Table;

struct SMU7_Discrete_Cac_Verification_Table {
	uint32_t VddcTotalPower;
	uint32_t VddcLeakagePower;
	uint32_t VddcConstantPower;
	uint32_t VddcGfxDynamicPower;
	uint32_t VddcUvdDynamicPower;
	uint32_t VddcVceDynamicPower;
	uint32_t VddcAcpDynamicPower;
	uint32_t VddcPcieDynamicPower;
	uint32_t VddcDceDynamicPower;
	uint32_t VddcCurrent;
	uint32_t VddcVoltage;
	uint32_t VddciTotalPower;
	uint32_t VddciLeakagePower;
	uint32_t VddciConstantPower;
	uint32_t VddciDynamicPower;
	uint32_t Vddr1TotalPower;
	uint32_t Vddr1LeakagePower;
	uint32_t Vddr1ConstantPower;
	uint32_t Vddr1DynamicPower;
	uint32_t spare[4];
	uint32_t temperature;
};

typedef struct SMU7_Discrete_Cac_Verification_Table SMU7_Discrete_Cac_Verification_Table;

struct SMU7_Discrete_Pm_Status_Table {
	int32_t T_meas_max[SMU75_THERMAL_INPUT_LOOP_COUNT];
	int32_t T_meas_acc[SMU75_THERMAL_INPUT_LOOP_COUNT];

	uint32_t I_calc_max;
	uint32_t I_calc_acc;
	uint32_t P_meas_acc;
	uint32_t V_meas_load_acc;
	uint32_t I_meas_acc;
	uint32_t P_meas_acc_vddci;
	uint32_t V_meas_load_acc_vddci;
	uint32_t I_meas_acc_vddci;

	uint16_t Sclk_dpm_residency[8];
	uint16_t Uvd_dpm_residency[8];
	uint16_t Vce_dpm_residency[8];
	uint16_t Mclk_dpm_residency[4];

	uint32_t P_roc_acc;
	uint32_t PkgPwr_max;
	uint32_t PkgPwr_acc;
	uint32_t MclkSwitchingTime_max;
	uint32_t MclkSwitchingTime_acc;
	uint32_t FanPwm_acc;
	uint32_t FanRpm_acc;
	uint32_t Gfx_busy_acc;
	uint32_t Mc_busy_acc;
	uint32_t Fps_acc;

	uint32_t AccCnt;
};

typedef struct SMU7_Discrete_Pm_Status_Table SMU7_Discrete_Pm_Status_Table;

struct SMU7_Discrete_AutoWattMan_Status_Table {
	int32_t T_meas_acc[SMU75_THERMAL_INPUT_LOOP_COUNT];
	uint16_t Sclk_dpm_residency[8];
	uint16_t Mclk_dpm_residency[4];
	uint32_t TgpPwr_acc;
	uint32_t Gfx_busy_acc;
	uint32_t Mc_busy_acc;
	uint32_t AccCnt;
};

typedef struct SMU7_Discrete_AutoWattMan_Status_Table SMU7_Discrete_AutoWattMan_Status_Table;

#define SMU7_MAX_GFX_CU_COUNT 24
#define SMU7_MIN_GFX_CU_COUNT  8
#define SMU7_GFX_CU_PG_ENABLE_DC_MAX_CU_SHIFT 0
#define SMU7_GFX_CU_PG_ENABLE_DC_MAX_CU_MASK  (0xFFFF << SMU7_GFX_CU_PG_ENABLE_DC_MAX_CU_SHIFT)
#define SMU7_GFX_CU_PG_ENABLE_AC_MAX_CU_SHIFT 16
#define SMU7_GFX_CU_PG_ENABLE_AC_MAX_CU_MASK  (0xFFFF << SMU7_GFX_CU_PG_ENABLE_AC_MAX_CU_SHIFT)

struct SMU7_GfxCuPgScoreboard {
	uint8_t Enabled;
	uint8_t WaterfallUp;
	uint8_t WaterfallDown;
	uint8_t WaterfallLimit;
	uint8_t CurrMaxCu;
	uint8_t TargMaxCu;
	uint8_t ClampMode;
	uint8_t Active;
	uint8_t MaxSupportedCu;
	uint8_t MinSupportedCu;
	uint8_t PendingGfxCuHostInterrupt;
	uint8_t LastFilteredMaxCuInteger;
	uint16_t FilteredMaxCu;
	uint16_t FilteredMaxCuAlpha;
	uint16_t FilterResetCount;
	uint16_t FilterResetCountLimit;
	uint8_t ForceCu;
	uint8_t ForceCuCount;
	uint8_t AcModeMaxCu;
	uint8_t DcModeMaxCu;
};

typedef struct SMU7_GfxCuPgScoreboard SMU7_GfxCuPgScoreboard;

#define SMU7_SCLK_CAC 0x561
#define SMU7_MCLK_CAC 0xF9
#define SMU7_VCLK_CAC 0x2DE
#define SMU7_DCLK_CAC 0x2DE
#define SMU7_ECLK_CAC 0x25E
#define SMU7_ACLK_CAC 0x25E
#define SMU7_SAMCLK_CAC 0x25E
#define SMU7_DISPCLK_CAC 0x100
#define SMU7_CAC_CONSTANT 0x2EE3430
#define SMU7_CAC_CONSTANT_SHIFT 18

#define SMU7_VDDCI_MCLK_CONST        1765
#define SMU7_VDDCI_MCLK_CONST_SHIFT  16
#define SMU7_VDDCI_VDDCI_CONST       50958
#define SMU7_VDDCI_VDDCI_CONST_SHIFT 14
#define SMU7_VDDCI_CONST             11781
#define SMU7_VDDCI_STROBE_PWR        1331

#define SMU7_VDDR1_CONST            693
#define SMU7_VDDR1_CAC_WEIGHT       20
#define SMU7_VDDR1_CAC_WEIGHT_SHIFT 19
#define SMU7_VDDR1_STROBE_PWR       512

#define SMU7_AREA_COEFF_UVD 0xA78
#define SMU7_AREA_COEFF_VCE 0x190A
#define SMU7_AREA_COEFF_ACP 0x22D1
#define SMU7_AREA_COEFF_SAMU 0x534

#define SMU7_THERM_OUT_MODE_DISABLE       0x0
#define SMU7_THERM_OUT_MODE_THERM_ONLY    0x1
#define SMU7_THERM_OUT_MODE_THERM_VRHOT   0x2

#define SQ_Enable_MASK 0x1
#define SQ_IR_MASK 0x2
#define SQ_PCC_MASK 0x4
#define SQ_EDC_MASK 0x8

#define TCP_Enable_MASK 0x100
#define TCP_IR_MASK 0x200
#define TCP_PCC_MASK 0x400
#define TCP_EDC_MASK 0x800

#define TD_Enable_MASK 0x10000
#define TD_IR_MASK 0x20000
#define TD_PCC_MASK 0x40000
#define TD_EDC_MASK 0x80000

#define DB_Enable_MASK 0x1000000
#define DB_IR_MASK 0x2000000
#define DB_PCC_MASK 0x4000000
#define DB_EDC_MASK 0x8000000

#define SQ_Enable_SHIFT 0
#define SQ_IR_SHIFT 1
#define SQ_PCC_SHIFT 2
#define SQ_EDC_SHIFT 3

#define TCP_Enable_SHIFT 8
#define TCP_IR_SHIFT 9
#define TCP_PCC_SHIFT 10
#define TCP_EDC_SHIFT 11

#define TD_Enable_SHIFT 16
#define TD_IR_SHIFT 17
#define TD_PCC_SHIFT 18
#define TD_EDC_SHIFT 19

#define DB_Enable_SHIFT 24
#define DB_IR_SHIFT 25
#define DB_PCC_SHIFT 26
#define DB_EDC_SHIFT 27

#define PMFUSES_AVFSSIZE 104

#define BTCGB0_Vdroop_Enable_MASK  0x1
#define BTCGB1_Vdroop_Enable_MASK  0x2
#define AVFSGB0_Vdroop_Enable_MASK 0x4
#define AVFSGB1_Vdroop_Enable_MASK 0x8

#define BTCGB0_Vdroop_Enable_SHIFT  0
#define BTCGB1_Vdroop_Enable_SHIFT  1
#define AVFSGB0_Vdroop_Enable_SHIFT 2
#define AVFSGB1_Vdroop_Enable_SHIFT 3

#pragma pack(pop)


#endif

/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef SMU75_H
#define SMU75_H

#pragma pack(push, 1)

typedef struct {
	uint32_t high;
	uint32_t low;
} data_64_t;

typedef struct {
	data_64_t high;
	data_64_t low;
} data_128_t;

#define SMU__DGPU_ONLY

#define SMU__NUM_SCLK_DPM_STATE  8
#define SMU__NUM_MCLK_DPM_LEVELS 4
#define SMU__NUM_LCLK_DPM_LEVELS 8
#define SMU__NUM_PCIE_DPM_LEVELS 8

#define SMU7_CONTEXT_ID_SMC        1
#define SMU7_CONTEXT_ID_VBIOS      2

#define SMU75_MAX_LEVELS_VDDC            16
#define SMU75_MAX_LEVELS_VDDGFX          16
#define SMU75_MAX_LEVELS_VDDCI           8
#define SMU75_MAX_LEVELS_MVDD            4

#define SMU_MAX_SMIO_LEVELS              4

#define SMU75_MAX_LEVELS_GRAPHICS        SMU__NUM_SCLK_DPM_STATE
#define SMU75_MAX_LEVELS_MEMORY          SMU__NUM_MCLK_DPM_LEVELS
#define SMU75_MAX_LEVELS_GIO             SMU__NUM_LCLK_DPM_LEVELS
#define SMU75_MAX_LEVELS_LINK            SMU__NUM_PCIE_DPM_LEVELS
#define SMU75_MAX_LEVELS_UVD             8
#define SMU75_MAX_LEVELS_VCE             8
#define SMU75_MAX_LEVELS_ACP             8
#define SMU75_MAX_LEVELS_SAMU            8
#define SMU75_MAX_ENTRIES_SMIO           32

#define DPM_NO_LIMIT 0
#define DPM_NO_UP 1
#define DPM_GO_DOWN 2
#define DPM_GO_UP 3

#define SMU7_FIRST_DPM_GRAPHICS_LEVEL    0
#define SMU7_FIRST_DPM_MEMORY_LEVEL      0

#define GPIO_CLAMP_MODE_VRHOT      1
#define GPIO_CLAMP_MODE_THERM      2
#define GPIO_CLAMP_MODE_DC         4

#define SCRATCH_B_TARG_PCIE_INDEX_SHIFT 0
#define SCRATCH_B_TARG_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_TARG_PCIE_INDEX_SHIFT)
#define SCRATCH_B_CURR_PCIE_INDEX_SHIFT 3
#define SCRATCH_B_CURR_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_CURR_PCIE_INDEX_SHIFT)
#define SCRATCH_B_TARG_UVD_INDEX_SHIFT  6
#define SCRATCH_B_TARG_UVD_INDEX_MASK   (0x7<<SCRATCH_B_TARG_UVD_INDEX_SHIFT)
#define SCRATCH_B_CURR_UVD_INDEX_SHIFT  9
#define SCRATCH_B_CURR_UVD_INDEX_MASK   (0x7<<SCRATCH_B_CURR_UVD_INDEX_SHIFT)
#define SCRATCH_B_TARG_VCE_INDEX_SHIFT  12
#define SCRATCH_B_TARG_VCE_INDEX_MASK   (0x7<<SCRATCH_B_TARG_VCE_INDEX_SHIFT)
#define SCRATCH_B_CURR_VCE_INDEX_SHIFT  15
#define SCRATCH_B_CURR_VCE_INDEX_MASK   (0x7<<SCRATCH_B_CURR_VCE_INDEX_SHIFT)
#define SCRATCH_B_TARG_ACP_INDEX_SHIFT  18
#define SCRATCH_B_TARG_ACP_INDEX_MASK   (0x7<<SCRATCH_B_TARG_ACP_INDEX_SHIFT)
#define SCRATCH_B_CURR_ACP_INDEX_SHIFT  21
#define SCRATCH_B_CURR_ACP_INDEX_MASK   (0x7<<SCRATCH_B_CURR_ACP_INDEX_SHIFT)
#define SCRATCH_B_TARG_SAMU_INDEX_SHIFT 24
#define SCRATCH_B_TARG_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_TARG_SAMU_INDEX_SHIFT)
#define SCRATCH_B_CURR_SAMU_INDEX_SHIFT 27
#define SCRATCH_B_CURR_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_CURR_SAMU_INDEX_SHIFT)

/* Virtualization Defines */
#define CG_XDMA_MASK  0x1
#define CG_XDMA_SHIFT 0
#define CG_UVD_MASK   0x2
#define CG_UVD_SHIFT  1
#define CG_VCE_MASK   0x4
#define CG_VCE_SHIFT  2
#define CG_SAMU_MASK  0x8
#define CG_SAMU_SHIFT 3
#define CG_GFX_MASK   0x10
#define CG_GFX_SHIFT  4
#define CG_SDMA_MASK  0x20
#define CG_SDMA_SHIFT 5
#define CG_HDP_MASK   0x40
#define CG_HDP_SHIFT  6
#define CG_MC_MASK    0x80
#define CG_MC_SHIFT   7
#define CG_DRM_MASK   0x100
#define CG_DRM_SHIFT  8
#define CG_ROM_MASK   0x200
#define CG_ROM_SHIFT  9
#define CG_BIF_MASK   0x400
#define CG_BIF_SHIFT  10

#if defined SMU__DGPU_ONLY
#define SMU75_DTE_ITERATIONS 5
#define SMU75_DTE_SOURCES 3
#define SMU75_DTE_SINKS 1
#define SMU75_NUM_CPU_TES 0
#define SMU75_NUM_GPU_TES 1
#define SMU75_NUM_NON_TES 2
#define SMU75_DTE_FAN_SCALAR_MIN 0x100
#define SMU75_DTE_FAN_SCALAR_MAX 0x166
#define SMU75_DTE_FAN_TEMP_MAX 93
#define SMU75_DTE_FAN_TEMP_MIN 83
#endif
#define SMU75_THERMAL_INPUT_LOOP_COUNT 2
#define SMU75_THERMAL_CLAMP_MODE_COUNT 2

#define EXP_M1_1  93
#define EXP_M2_1  195759
#define EXP_B_1   111176531

#define EXP_M1_2  67
#define EXP_M2_2  153720
#define EXP_B_2   94415767

#define EXP_M1_3  48
#define EXP_M2_3  119796
#define EXP_B_3   79195279

#define EXP_M1_4  550
#define EXP_M2_4  1484190
#define EXP_B_4   1051432828

#define EXP_M1_5  394
#define EXP_M2_5  1143049
#define EXP_B_5   864288432

struct SMU7_HystController_Data {
	uint16_t waterfall_up;
	uint16_t waterfall_down;
	uint16_t waterfall_limit;
	uint16_t release_cnt;
	uint16_t release_limit;
	uint16_t spare;
};

typedef struct SMU7_HystController_Data SMU7_HystController_Data;

struct SMU75_PIDController {
	uint32_t Ki;
	int32_t LFWindupUpperLim;
	int32_t LFWindupLowerLim;
	uint32_t StatePrecision;
	uint32_t LfPrecision;
	uint32_t LfOffset;
	uint32_t MaxState;
	uint32_t MaxLfFraction;
	uint32_t StateShift;
};

typedef struct SMU75_PIDController SMU75_PIDController;

struct SMU7_LocalDpmScoreboard {
	uint32_t PercentageBusy;

	int32_t  PIDError;
	int32_t  PIDIntegral;
	int32_t  PIDOutput;

	uint32_t SigmaDeltaAccum;
	uint32_t SigmaDeltaOutput;
	uint32_t SigmaDeltaLevel;

	uint32_t UtilizationSetpoint;

	uint8_t  TdpClampMode;
	uint8_t  TdcClampMode;
	uint8_t  ThermClampMode;
	uint8_t  VoltageBusy;

	int8_t   CurrLevel;
	int8_t   TargLevel;
	uint8_t  LevelChangeInProgress;
	uint8_t  UpHyst;

	uint8_t  DownHyst;
	uint8_t  VoltageDownHyst;
	uint8_t  DpmEnable;
	uint8_t  DpmRunning;

	uint8_t  DpmForce;
	uint8_t  DpmForceLevel;
	uint8_t  DisplayWatermark;
	uint8_t  McArbIndex;

	uint32_t MinimumPerfSclk;

	uint8_t  AcpiReq;
	uint8_t  AcpiAck;
	uint8_t  GfxClkSlow;
	uint8_t  GpioClampMode;

	uint8_t  EnableModeSwitchRLCNotification;
	uint8_t  EnabledLevelsChange;
	uint8_t  DteClampMode;
	uint8_t  FpsClampMode;

	uint16_t LevelResidencyCounters [SMU75_MAX_LEVELS_GRAPHICS];
	uint16_t LevelSwitchCounters [SMU75_MAX_LEVELS_GRAPHICS];

	void     (*TargetStateCalculator)(uint8_t);
	void     (*SavedTargetStateCalculator)(uint8_t);

	uint16_t AutoDpmInterval;
	uint16_t AutoDpmRange;

	uint8_t  FpsEnabled;
	uint8_t  MaxPerfLevel;
	uint8_t  AllowLowClkInterruptToHost;
	uint8_t  FpsRunning;

	uint32_t MaxAllowedFrequency;

	uint32_t FilteredSclkFrequency;
	uint32_t LastSclkFrequency;
	uint32_t FilteredSclkFrequencyCnt;

	uint8_t MinPerfLevel;
#ifdef SMU__FIRMWARE_SCKS_PRESENT__1
	uint8_t ScksClampMode;
	uint8_t padding[2];
#else
	uint8_t padding[3];
#endif

	uint16_t FpsAlpha;
	uint16_t DeltaTime;
	uint32_t CurrentFps;
	uint32_t FilteredFps;
	uint32_t FrameCount;
	uint32_t FrameCountLast;
	uint16_t FpsTargetScalar;
	uint16_t FpsWaterfallLimitScalar;
	uint16_t FpsAlphaScalar;
	uint16_t spare8;
	SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_LocalDpmScoreboard SMU7_LocalDpmScoreboard;

#define SMU7_MAX_VOLTAGE_CLIENTS 12

typedef uint8_t (*VoltageChangeHandler_t)(uint16_t, uint8_t);

#define VDDC_MASK    0x00007FFF
#define VDDC_SHIFT   0
#define VDDCI_MASK   0x3FFF8000
#define VDDCI_SHIFT  15
#define PHASES_MASK  0xC0000000
#define PHASES_SHIFT 30

typedef uint32_t SMU_VoltageLevel;

struct SMU7_VoltageScoreboard {
	SMU_VoltageLevel TargetVoltage;
	uint16_t MaxVid;
	uint8_t  HighestVidOffset;
	uint8_t  CurrentVidOffset;

	uint16_t CurrentVddc;
	uint16_t CurrentVddci;

	uint8_t  ControllerBusy;
	uint8_t  CurrentVid;
	uint8_t  CurrentVddciVid;
	uint8_t  padding;

	SMU_VoltageLevel RequestedVoltage[SMU7_MAX_VOLTAGE_CLIENTS];
	SMU_VoltageLevel TargetVoltageState;
	uint8_t  EnabledRequest[SMU7_MAX_VOLTAGE_CLIENTS];

	uint8_t  padding2;
	uint8_t  padding3;
	uint8_t  ControllerEnable;
	uint8_t  ControllerRunning;
	uint16_t CurrentStdVoltageHiSidd;
	uint16_t CurrentStdVoltageLoSidd;
	uint8_t  OverrideVoltage;
	uint8_t  padding4;
	uint8_t  padding5;
	uint8_t  CurrentPhases;

	VoltageChangeHandler_t ChangeVddc;
	VoltageChangeHandler_t ChangeVddci;
	VoltageChangeHandler_t ChangePhase;
	VoltageChangeHandler_t ChangeMvdd;

	VoltageChangeHandler_t functionLinks[6];

	uint16_t * VddcFollower1;
	int16_t  Driver_OD_RequestedVidOffset1;
	int16_t  Driver_OD_RequestedVidOffset2;
};

typedef struct SMU7_VoltageScoreboard SMU7_VoltageScoreboard;

#define SMU7_MAX_PCIE_LINK_SPEEDS 3

struct SMU7_PCIeLinkSpeedScoreboard {
	uint8_t     DpmEnable;
	uint8_t     DpmRunning;
	uint8_t     DpmForce;
	uint8_t     DpmForceLevel;

	uint8_t     CurrentLinkSpeed;
	uint8_t     EnabledLevelsChange;
	uint16_t    AutoDpmInterval;

	uint16_t    AutoDpmRange;
	uint16_t    AutoDpmCount;

	uint8_t     DpmMode;
	uint8_t     AcpiReq;
	uint8_t     AcpiAck;
	uint8_t     CurrentLinkLevel;
};

typedef struct SMU7_PCIeLinkSpeedScoreboard SMU7_PCIeLinkSpeedScoreboard;

#define SMU7_LKGE_LUT_NUM_OF_TEMP_ENTRIES 16
#define SMU7_LKGE_LUT_NUM_OF_VOLT_ENTRIES 16

#define SMU7_SCALE_I  7
#define SMU7_SCALE_R 12

struct SMU7_PowerScoreboard {
	uint32_t GpuPower;

	uint32_t VddcPower;
	uint32_t VddcVoltage;
	uint32_t VddcCurrent;

	uint32_t VddciPower;
	uint32_t VddciVoltage;
	uint32_t VddciCurrent;

	uint32_t RocPower;

	uint16_t Telemetry_1_slope;
	uint16_t Telemetry_2_slope;
	int32_t  Telemetry_1_offset;
	int32_t  Telemetry_2_offset;

	uint8_t MCLK_patch_flag;
	uint8_t reserved[3];
};

typedef struct SMU7_PowerScoreboard SMU7_PowerScoreboard;

#define SMU7_SCLK_DPM_CONFIG_MASK                        0x01
#define SMU7_VOLTAGE_CONTROLLER_CONFIG_MASK              0x02
#define SMU7_THERMAL_CONTROLLER_CONFIG_MASK              0x04
#define SMU7_MCLK_DPM_CONFIG_MASK                        0x08
#define SMU7_UVD_DPM_CONFIG_MASK                         0x10
#define SMU7_VCE_DPM_CONFIG_MASK                         0x20
#define SMU7_ACP_DPM_CONFIG_MASK                         0x40
#define SMU7_SAMU_DPM_CONFIG_MASK                        0x80
#define SMU7_PCIEGEN_DPM_CONFIG_MASK                    0x100

#define SMU7_ACP_MCLK_HANDSHAKE_DISABLE                  0x00000001
#define SMU7_ACP_SCLK_HANDSHAKE_DISABLE                  0x00000002
#define SMU7_UVD_MCLK_HANDSHAKE_DISABLE                  0x00000100
#define SMU7_UVD_SCLK_HANDSHAKE_DISABLE                  0x00000200
#define SMU7_VCE_MCLK_HANDSHAKE_DISABLE                  0x00010000
#define SMU7_VCE_SCLK_HANDSHAKE_DISABLE                  0x00020000

struct SMU75_SoftRegisters {
	uint32_t        RefClockFrequency;
	uint32_t        PmTimerPeriod;
	uint32_t        FeatureEnables;
#if defined (SMU__DGPU_ONLY)
	uint32_t        PreVBlankGap;
	uint32_t        VBlankTimeout;
	uint32_t        TrainTimeGap;
	uint32_t        MvddSwitchTime;
	uint32_t        LongestAcpiTrainTime;
	uint32_t        AcpiDelay;
	uint32_t        G5TrainTime;
	uint32_t        DelayMpllPwron;
	uint32_t        VoltageChangeTimeout;
#endif
	uint32_t        HandshakeDisables;

	uint8_t         DisplayPhy1Config;
	uint8_t         DisplayPhy2Config;
	uint8_t         DisplayPhy3Config;
	uint8_t         DisplayPhy4Config;

	uint8_t         DisplayPhy5Config;
	uint8_t         DisplayPhy6Config;
	uint8_t         DisplayPhy7Config;
	uint8_t         DisplayPhy8Config;

	uint32_t        AverageGraphicsActivity;
	uint32_t        AverageMemoryActivity;
	uint32_t        AverageGioActivity;

	uint8_t         SClkDpmEnabledLevels;
	uint8_t         MClkDpmEnabledLevels;
	uint8_t         LClkDpmEnabledLevels;
	uint8_t         PCIeDpmEnabledLevels;

	uint8_t         UVDDpmEnabledLevels;
	uint8_t         SAMUDpmEnabledLevels;
	uint8_t         ACPDpmEnabledLevels;
	uint8_t         VCEDpmEnabledLevels;

	uint32_t        DRAM_LOG_ADDR_H;
	uint32_t        DRAM_LOG_ADDR_L;
	uint32_t        DRAM_LOG_PHY_ADDR_H;
	uint32_t        DRAM_LOG_PHY_ADDR_L;
	uint32_t        DRAM_LOG_BUFF_SIZE;
	uint32_t        UlvEnterCount;
	uint32_t        UlvTime;
	uint32_t        UcodeLoadStatus;
	uint32_t        AllowMvddSwitch;
	uint8_t         Activity_Weight;
	uint8_t         Reserved8[3];
};

typedef struct SMU75_SoftRegisters SMU75_SoftRegisters;

struct SMU75_Firmware_Header {
	uint32_t Digest[5];
	uint32_t Version;
	uint32_t HeaderSize;
	uint32_t Flags;
	uint32_t EntryPoint;
	uint32_t CodeSize;
	uint32_t ImageSize;

	uint32_t Rtos;
	uint32_t SoftRegisters;
	uint32_t DpmTable;
	uint32_t FanTable;
	uint32_t CacConfigTable;
	uint32_t CacStatusTable;
	uint32_t mcRegisterTable;
	uint32_t mcArbDramTimingTable;
	uint32_t PmFuseTable;
	uint32_t Globals;
	uint32_t ClockStretcherTable;
	uint32_t VftTable;
	uint32_t Reserved1;
	uint32_t AvfsCksOff_AvfsGbvTable;
	uint32_t AvfsCksOff_BtcGbvTable;
	uint32_t MM_AvfsTable;
	uint32_t PowerSharingTable;
	uint32_t AvfsTable;
	uint32_t AvfsCksOffGbvTable;
	uint32_t AvfsMeanNSigma;
	uint32_t AvfsSclkOffsetTable;
	uint32_t Reserved[12];
	uint32_t Signature;
};

typedef struct SMU75_Firmware_Header SMU75_Firmware_Header;

#define SMU7_FIRMWARE_HEADER_LOCATION 0x20000

enum  DisplayConfig {
	PowerDown = 1,
	DP54x4,
	DP54x2,
	DP54x1,
	DP27x4,
	DP27x2,
	DP27x1,
	HDMI297,
	HDMI162,
	LVDS,
	DP324x4,
	DP324x2,
	DP324x1
};

#define MC_BLOCK_COUNT 1
#define CPL_BLOCK_COUNT 5
#define SE_BLOCK_COUNT 15
#define GC_BLOCK_COUNT 24

struct SMU7_Local_Cac {
	uint8_t BlockId;
	uint8_t SignalId;
	uint8_t Threshold;
	uint8_t Padding;
};

typedef struct SMU7_Local_Cac SMU7_Local_Cac;

struct SMU7_Local_Cac_Table {
	SMU7_Local_Cac CplLocalCac[CPL_BLOCK_COUNT];
	SMU7_Local_Cac McLocalCac[MC_BLOCK_COUNT];
	SMU7_Local_Cac SeLocalCac[SE_BLOCK_COUNT];
	SMU7_Local_Cac GcLocalCac[GC_BLOCK_COUNT];
};

typedef struct SMU7_Local_Cac_Table SMU7_Local_Cac_Table;

#pragma pack(pop)

#define CG_SYS_BITMASK_FIRST_BIT      0
#define CG_SYS_BITMASK_LAST_BIT       10
#define CG_SYS_BIF_MGLS_SHIFT         0
#define CG_SYS_ROM_SHIFT              1
#define CG_SYS_MC_MGCG_SHIFT          2
#define CG_SYS_MC_MGLS_SHIFT          3
#define CG_SYS_SDMA_MGCG_SHIFT        4
#define CG_SYS_SDMA_MGLS_SHIFT        5
#define CG_SYS_DRM_MGCG_SHIFT         6
#define CG_SYS_HDP_MGCG_SHIFT         7
#define CG_SYS_HDP_MGLS_SHIFT         8
#define CG_SYS_DRM_MGLS_SHIFT         9
#define CG_SYS_BIF_MGCG_SHIFT         10

#define CG_SYS_BIF_MGLS_MASK          0x1
#define CG_SYS_ROM_MASK               0x2
#define CG_SYS_MC_MGCG_MASK           0x4
#define CG_SYS_MC_MGLS_MASK           0x8
#define CG_SYS_SDMA_MGCG_MASK         0x10
#define CG_SYS_SDMA_MGLS_MASK         0x20
#define CG_SYS_DRM_MGCG_MASK          0x40
#define CG_SYS_HDP_MGCG_MASK          0x80
#define CG_SYS_HDP_MGLS_MASK          0x100
#define CG_SYS_DRM_MGLS_MASK          0x200
#define CG_SYS_BIF_MGCG_MASK          0x400

#define CG_GFX_BITMASK_FIRST_BIT      16
#define CG_GFX_BITMASK_LAST_BIT       24

#define CG_GFX_CGCG_SHIFT             16
#define CG_GFX_CGLS_SHIFT             17
#define CG_CPF_MGCG_SHIFT             18
#define CG_RLC_MGCG_SHIFT             19
#define CG_GFX_OTHERS_MGCG_SHIFT      20
#define CG_GFX_3DCG_SHIFT             21
#define CG_GFX_3DLS_SHIFT             22
#define CG_GFX_RLC_LS_SHIFT           23
#define CG_GFX_CP_LS_SHIFT            24

#define CG_GFX_CGCG_MASK              0x00010000
#define CG_GFX_CGLS_MASK              0x00020000
#define CG_CPF_MGCG_MASK              0x00040000
#define CG_RLC_MGCG_MASK              0x00080000
#define CG_GFX_OTHERS_MGCG_MASK       0x00100000
#define CG_GFX_3DCG_MASK              0x00200000
#define CG_GFX_3DLS_MASK              0x00400000
#define CG_GFX_RLC_LS_MASK            0x00800000
#define CG_GFX_CP_LS_MASK             0x01000000


#define VRCONF_VDDC_MASK         0x000000FF
#define VRCONF_VDDC_SHIFT        0
#define VRCONF_VDDGFX_MASK       0x0000FF00
#define VRCONF_VDDGFX_SHIFT      8
#define VRCONF_VDDCI_MASK        0x00FF0000
#define VRCONF_VDDCI_SHIFT       16
#define VRCONF_MVDD_MASK         0xFF000000
#define VRCONF_MVDD_SHIFT        24

#define VR_MERGED_WITH_VDDC      0
#define VR_SVI2_PLANE_1          1
#define VR_SVI2_PLANE_2          2
#define VR_SMIO_PATTERN_1        3
#define VR_SMIO_PATTERN_2        4
#define VR_STATIC_VOLTAGE        5

#define CLOCK_STRETCHER_MAX_ENTRIES 0x4
#define CKS_LOOKUPTable_MAX_ENTRIES 0x4

#define CLOCK_STRETCHER_SETTING_DDT_MASK             0x01
#define CLOCK_STRETCHER_SETTING_DDT_SHIFT            0x0
#define CLOCK_STRETCHER_SETTING_STRETCH_AMOUNT_MASK  0x1E
#define CLOCK_STRETCHER_SETTING_STRETCH_AMOUNT_SHIFT 0x1
#define CLOCK_STRETCHER_SETTING_ENABLE_MASK          0x80
#define CLOCK_STRETCHER_SETTING_ENABLE_SHIFT         0x7

struct SMU_ClockStretcherDataTableEntry {
	uint8_t minVID;
	uint8_t maxVID;

	uint16_t setting;
};
typedef struct SMU_ClockStretcherDataTableEntry SMU_ClockStretcherDataTableEntry;

struct SMU_ClockStretcherDataTable {
	SMU_ClockStretcherDataTableEntry ClockStretcherDataTableEntry[CLOCK_STRETCHER_MAX_ENTRIES];
};
typedef struct SMU_ClockStretcherDataTable SMU_ClockStretcherDataTable;

struct SMU_CKS_LOOKUPTableEntry {
	uint16_t minFreq;
	uint16_t maxFreq;

	uint8_t setting;
	uint8_t padding[3];
};
typedef struct SMU_CKS_LOOKUPTableEntry SMU_CKS_LOOKUPTableEntry;

struct SMU_CKS_LOOKUPTable {
	SMU_CKS_LOOKUPTableEntry CKS_LOOKUPTableEntry[CKS_LOOKUPTable_MAX_ENTRIES];
};
typedef struct SMU_CKS_LOOKUPTable SMU_CKS_LOOKUPTable;

struct AgmAvfsData_t {
	uint16_t avgPsmCount[28];
	uint16_t minPsmCount[28];
};
typedef struct AgmAvfsData_t AgmAvfsData_t;

enum VFT_COLUMNS {
	SCLK0,
	SCLK1,
	SCLK2,
	SCLK3,
	SCLK4,
	SCLK5,
	SCLK6,
	SCLK7,

	NUM_VFT_COLUMNS
};
enum {
  SCS_FUSE_T0,
  SCS_FUSE_T1,
  NUM_SCS_FUSE_TEMPERATURE
};
enum {
  SCKS_ON,
  SCKS_OFF,
  NUM_SCKS_STATE_TYPES
};

#define VFT_TABLE_DEFINED

#define TEMP_RANGE_MAXSTEPS 12
struct VFT_CELL_t {
	uint16_t Voltage;
};

typedef struct VFT_CELL_t VFT_CELL_t;
#ifdef SMU__FIRMWARE_SCKS_PRESENT__1
struct SCS_CELL_t {
	uint16_t PsmCnt[NUM_SCKS_STATE_TYPES];
};
typedef struct SCS_CELL_t SCS_CELL_t;
#endif

struct VFT_TABLE_t {
	VFT_CELL_t    Cell[TEMP_RANGE_MAXSTEPS][NUM_VFT_COLUMNS];
	uint16_t      AvfsGbv [NUM_VFT_COLUMNS];
	uint16_t      BtcGbv  [NUM_VFT_COLUMNS];
	int16_t       Temperature [TEMP_RANGE_MAXSTEPS];

#ifdef SMU__FIRMWARE_SCKS_PRESENT__1
	SCS_CELL_t    ScksCell[TEMP_RANGE_MAXSTEPS][NUM_VFT_COLUMNS];
#endif

	uint8_t       NumTemperatureSteps;
	uint8_t       padding[3];
};
typedef struct VFT_TABLE_t VFT_TABLE_t;

#define BTCGB_VDROOP_TABLE_MAX_ENTRIES 2
#define AVFSGB_VDROOP_TABLE_MAX_ENTRIES 2

struct GB_VDROOP_TABLE_t {
	int32_t a0;
	int32_t a1;
	int32_t a2;
	uint32_t spare;
};
typedef struct GB_VDROOP_TABLE_t GB_VDROOP_TABLE_t;

struct SMU_QuadraticCoeffs {
	int32_t m1;
	int32_t b;

	int16_t m2;
	uint8_t m1_shift;
	uint8_t m2_shift;
};
typedef struct SMU_QuadraticCoeffs SMU_QuadraticCoeffs;

struct AVFS_Margin_t {
	VFT_CELL_t Cell[NUM_VFT_COLUMNS];
};
typedef struct AVFS_Margin_t AVFS_Margin_t;

struct AVFS_CksOff_Gbv_t {
	VFT_CELL_t Cell[NUM_VFT_COLUMNS];
};
typedef struct AVFS_CksOff_Gbv_t AVFS_CksOff_Gbv_t;

struct AVFS_CksOff_AvfsGbv_t {
	VFT_CELL_t Cell[NUM_VFT_COLUMNS];
};
typedef struct AVFS_CksOff_AvfsGbv_t AVFS_CksOff_AvfsGbv_t;

struct AVFS_CksOff_BtcGbv_t {
	VFT_CELL_t Cell[NUM_VFT_COLUMNS];
};
typedef struct AVFS_CksOff_BtcGbv_t AVFS_CksOff_BtcGbv_t;

struct AVFS_meanNsigma_t {
	uint32_t Aconstant[3];
	uint16_t DC_tol_sigma;
	uint16_t Platform_mean;
	uint16_t Platform_sigma;
	uint16_t PSM_Age_CompFactor;
	uint8_t  Static_Voltage_Offset[NUM_VFT_COLUMNS];
};
typedef struct AVFS_meanNsigma_t AVFS_meanNsigma_t;

struct AVFS_Sclk_Offset_t {
	uint16_t Sclk_Offset[8];
};
typedef struct AVFS_Sclk_Offset_t AVFS_Sclk_Offset_t;

struct Power_Sharing_t {
	uint32_t EnergyCounter;
	uint32_t EngeryThreshold;
	uint64_t AM_SCLK_CNT;
	uint64_t AM_0_BUSY_CNT;
};
typedef struct Power_Sharing_t  Power_Sharing_t;


#endif


/*
 * Copyright 2014 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU74_DISCRETE_H
#define SMU74_DISCRETE_H

#include "smu74.h"

#pragma pack(push, 1)


#define NUM_SCLK_RANGE 8

#define VCO_3_6 1
#define VCO_2_4 3

#define POSTDIV_DIV_BY_1  0
#define POSTDIV_DIV_BY_2  1
#define POSTDIV_DIV_BY_4  2
#define POSTDIV_DIV_BY_8  3
#define POSTDIV_DIV_BY_16 4

struct sclkFcwRange_t {
	uint8_t  vco_setting;
	uint8_t  postdiv;
	uint16_t fcw_pcc;

	uint16_t fcw_trans_upper;
	uint16_t fcw_trans_lower;
};
typedef struct sclkFcwRange_t sclkFcwRange_t;

struct SMIO_Pattern {
	uint16_t Voltage;
	uint8_t  Smio;
	uint8_t  padding;
};

typedef struct SMIO_Pattern SMIO_Pattern;

struct SMIO_Table {
	SMIO_Pattern Pattern[SMU_MAX_SMIO_LEVELS];
};

typedef struct SMIO_Table SMIO_Table;

struct SMU_SclkSetting {
	uint32_t    SclkFrequency;
	uint16_t    Fcw_int;
	uint16_t    Fcw_frac;
	uint16_t    Pcc_fcw_int;
	uint8_t     PllRange;
	uint8_t     SSc_En;
	uint16_t    Sclk_slew_rate;
	uint16_t    Pcc_up_slew_rate;
	uint16_t    Pcc_down_slew_rate;
	uint16_t    Fcw1_int;
	uint16_t    Fcw1_frac;
	uint16_t    Sclk_ss_slew_rate;
};
typedef struct SMU_SclkSetting SMU_SclkSetting;

struct SMU74_Discrete_GraphicsLevel {
	SMU_VoltageLevel MinVoltage;
	uint8_t     pcieDpmLevel;
	uint8_t     DeepSleepDivId;
	uint16_t    ActivityLevel;
	uint32_t    CgSpllFuncCntl3;
	uint32_t    CgSpllFuncCntl4;
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;
	uint8_t     SclkDid;
	uint8_t     padding;
	uint8_t     EnabledForActivity;
	uint8_t     EnabledForThrottle;
	uint8_t     UpHyst;
	uint8_t     DownHyst;
	uint8_t     VoltageDownHyst;
	uint8_t     PowerThrottle;
	SMU_SclkSetting SclkSetting;
};

typedef struct SMU74_Discrete_GraphicsLevel SMU74_Discrete_GraphicsLevel;

struct SMU74_Discrete_ACPILevel {
	uint32_t    Flags;
	SMU_VoltageLevel MinVoltage;
	uint32_t    SclkFrequency;
	uint8_t     SclkDid;
	uint8_t     DisplayWatermark;
	uint8_t     DeepSleepDivId;
	uint8_t     padding;
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;

	SMU_SclkSetting SclkSetting;
};

typedef struct SMU74_Discrete_ACPILevel SMU74_Discrete_ACPILevel;

struct SMU74_Discrete_Ulv {
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;
	uint16_t    VddcOffset;
	uint8_t     VddcOffsetVid;
	uint8_t     VddcPhase;
	uint16_t    BifSclkDfs;
	uint16_t    Reserved;
};

typedef struct SMU74_Discrete_Ulv SMU74_Discrete_Ulv;

struct SMU74_Discrete_MemoryLevel {
	SMU_VoltageLevel MinVoltage;
	uint32_t    MinMvdd;

	uint32_t    MclkFrequency;

	uint8_t     StutterEnable;
	uint8_t     EnabledForThrottle;
	uint8_t     EnabledForActivity;
	uint8_t     padding_0;

	uint8_t     UpHyst;
	uint8_t     DownHyst;
	uint8_t     VoltageDownHyst;
	uint8_t     padding_1;

	uint16_t    ActivityLevel;
	uint8_t     DisplayWatermark;
	uint8_t     Reserved;
};

typedef struct SMU74_Discrete_MemoryLevel SMU74_Discrete_MemoryLevel;

struct SMU74_Discrete_LinkLevel {
	uint8_t     PcieGenSpeed;
	uint8_t     PcieLaneCount;
	uint8_t     EnabledForActivity;
	uint8_t     SPC;
	uint32_t    DownThreshold;
	uint32_t    UpThreshold;
	uint16_t    BifSclkDfs;
	uint16_t    Reserved;
};

typedef struct SMU74_Discrete_LinkLevel SMU74_Discrete_LinkLevel;

struct SMU74_Discrete_MCArbDramTimingTableEntry {
	uint32_t McArbDramTiming;
	uint32_t McArbDramTiming2;
	uint8_t  McArbBurstTime;
	uint8_t  padding[3];
};

typedef struct SMU74_Discrete_MCArbDramTimingTableEntry SMU74_Discrete_MCArbDramTimingTableEntry;

struct SMU74_Discrete_MCArbDramTimingTable {
	SMU74_Discrete_MCArbDramTimingTableEntry entries[SMU__NUM_SCLK_DPM_STATE][SMU__NUM_MCLK_DPM_LEVELS];
};

typedef struct SMU74_Discrete_MCArbDramTimingTable SMU74_Discrete_MCArbDramTimingTable;

struct SMU74_Discrete_UvdLevel {
	uint32_t VclkFrequency;
	uint32_t DclkFrequency;
	SMU_VoltageLevel MinVoltage;
	uint8_t  VclkDivider;
	uint8_t  DclkDivider;
	uint8_t  padding[2];
};

typedef struct SMU74_Discrete_UvdLevel SMU74_Discrete_UvdLevel;

struct SMU74_Discrete_ExtClkLevel {
	uint32_t Frequency;
	SMU_VoltageLevel MinVoltage;
	uint8_t  Divider;
	uint8_t  padding[3];
};

typedef struct SMU74_Discrete_ExtClkLevel SMU74_Discrete_ExtClkLevel;

struct SMU74_Discrete_StateInfo {
	uint32_t SclkFrequency;
	uint32_t MclkFrequency;
	uint32_t VclkFrequency;
	uint32_t DclkFrequency;
	uint32_t SamclkFrequency;
	uint32_t AclkFrequency;
	uint32_t EclkFrequency;
	uint16_t MvddVoltage;
	uint16_t padding16;
	uint8_t  DisplayWatermark;
	uint8_t  McArbIndex;
	uint8_t  McRegIndex;
	uint8_t  SeqIndex;
	uint8_t  SclkDid;
	int8_t   SclkIndex;
	int8_t   MclkIndex;
	uint8_t  PCIeGen;
};

typedef struct SMU74_Discrete_StateInfo SMU74_Discrete_StateInfo;

struct SMU_QuadraticCoeffs {
	int32_t m1;
	uint32_t b;

	int16_t m2;
	uint8_t m1_shift;
	uint8_t m2_shift;
};
typedef struct SMU_QuadraticCoeffs SMU_QuadraticCoeffs;

struct SMU74_Discrete_DpmTable {

	SMU74_PIDController                  GraphicsPIDController;
	SMU74_PIDController                  MemoryPIDController;
	SMU74_PIDController                  LinkPIDController;

	uint32_t                            SystemFlags;

	uint32_t                            VRConfig;
	uint32_t                            SmioMask1;
	uint32_t                            SmioMask2;
	SMIO_Table                          SmioTable1;
	SMIO_Table                          SmioTable2;

	uint32_t                            MvddLevelCount;


	uint8_t                             BapmVddcVidHiSidd[SMU74_MAX_LEVELS_VDDC];
	uint8_t                             BapmVddcVidLoSidd[SMU74_MAX_LEVELS_VDDC];
	uint8_t                             BapmVddcVidHiSidd2[SMU74_MAX_LEVELS_VDDC];

	uint8_t                             GraphicsDpmLevelCount;
	uint8_t                             MemoryDpmLevelCount;
	uint8_t                             LinkLevelCount;
	uint8_t                             MasterDeepSleepControl;

	uint8_t                             UvdLevelCount;
	uint8_t                             VceLevelCount;
	uint8_t                             AcpLevelCount;
	uint8_t                             SamuLevelCount;

	uint8_t                             ThermOutGpio;
	uint8_t                             ThermOutPolarity;
	uint8_t                             ThermOutMode;
	uint8_t                             BootPhases;

	uint8_t                             VRHotLevel;
	uint8_t                             LdoRefSel;
	uint8_t                             SharedRails;
	uint8_t                             Reserved1;
	uint16_t                            FanStartTemperature;
	uint16_t                            FanStopTemperature;
	uint16_t                            MaxVoltage;
	uint16_t                            Reserved2;
	uint32_t                            Reserved[1];

	SMU74_Discrete_GraphicsLevel        GraphicsLevel[SMU74_MAX_LEVELS_GRAPHICS];
	SMU74_Discrete_MemoryLevel          MemoryACPILevel;
	SMU74_Discrete_MemoryLevel          MemoryLevel[SMU74_MAX_LEVELS_MEMORY];
	SMU74_Discrete_LinkLevel            LinkLevel[SMU74_MAX_LEVELS_LINK];
	SMU74_Discrete_ACPILevel            ACPILevel;
	SMU74_Discrete_UvdLevel             UvdLevel[SMU74_MAX_LEVELS_UVD];
	SMU74_Discrete_ExtClkLevel          VceLevel[SMU74_MAX_LEVELS_VCE];
	SMU74_Discrete_ExtClkLevel          AcpLevel[SMU74_MAX_LEVELS_ACP];
	SMU74_Discrete_ExtClkLevel          SamuLevel[SMU74_MAX_LEVELS_SAMU];
	SMU74_Discrete_Ulv                  Ulv;

	uint8_t                             DisplayWatermark[SMU74_MAX_LEVELS_MEMORY][SMU74_MAX_LEVELS_GRAPHICS];

	uint32_t                            SclkStepSize;
	uint32_t                            Smio[SMU74_MAX_ENTRIES_SMIO];

	uint8_t                             UvdBootLevel;
	uint8_t                             VceBootLevel;
	uint8_t                             AcpBootLevel;
	uint8_t                             SamuBootLevel;

	uint8_t                             GraphicsBootLevel;
	uint8_t                             GraphicsVoltageChangeEnable;
	uint8_t                             GraphicsThermThrottleEnable;
	uint8_t                             GraphicsInterval;

	uint8_t                             VoltageInterval;
	uint8_t                             ThermalInterval;
	uint16_t                            TemperatureLimitHigh;

	uint16_t                            TemperatureLimitLow;
	uint8_t                             MemoryBootLevel;
	uint8_t                             MemoryVoltageChangeEnable;

	uint16_t                            BootMVdd;
	uint8_t                             MemoryInterval;
	uint8_t                             MemoryThermThrottleEnable;

	uint16_t                            VoltageResponseTime;
	uint16_t                            PhaseResponseTime;

	uint8_t                             PCIeBootLinkLevel;
	uint8_t                             PCIeGenInterval;
	uint8_t                             DTEInterval;
	uint8_t                             DTEMode;

	uint8_t                             SVI2Enable;
	uint8_t                             VRHotGpio;
	uint8_t                             AcDcGpio;
	uint8_t                             ThermGpio;

	uint16_t                            PPM_PkgPwrLimit;
	uint16_t                            PPM_TemperatureLimit;

	uint16_t                            DefaultTdp;
	uint16_t                            TargetTdp;

	uint16_t                            FpsHighThreshold;
	uint16_t                            FpsLowThreshold;

	uint16_t                            BAPMTI_R[SMU74_DTE_ITERATIONS][SMU74_DTE_SOURCES][SMU74_DTE_SINKS];
	uint16_t                            BAPMTI_RC[SMU74_DTE_ITERATIONS][SMU74_DTE_SOURCES][SMU74_DTE_SINKS];

	uint16_t                            TemperatureLimitEdge;
	uint16_t                            TemperatureLimitHotspot;

	uint16_t                            BootVddc;
	uint16_t                            BootVddci;

	uint16_t                            FanGainEdge;
	uint16_t                            FanGainHotspot;

	uint32_t                            LowSclkInterruptThreshold;
	uint32_t                            VddGfxReChkWait;

	uint8_t                             ClockStretcherAmount;
	uint8_t                             Sclk_CKS_masterEn0_7;
	uint8_t                             Sclk_CKS_masterEn8_15;
	uint8_t                             DPMFreezeAndForced;

	uint8_t                             Sclk_voltageOffset[8];

	SMU_ClockStretcherDataTable         ClockStretcherDataTable;
	SMU_CKS_LOOKUPTable                 CKS_LOOKUPTable;

	uint32_t                            CurrSclkPllRange;
	sclkFcwRange_t                      SclkFcwRangeTable[NUM_SCLK_RANGE];
	GB_VDROOP_TABLE_t                   BTCGB_VDROOP_TABLE[BTCGB_VDROOP_TABLE_MAX_ENTRIES];
	SMU_QuadraticCoeffs                 AVFSGB_VDROOP_TABLE[AVFSGB_VDROOP_TABLE_MAX_ENTRIES];
};

typedef struct SMU74_Discrete_DpmTable SMU74_Discrete_DpmTable;


struct SMU74_Discrete_FanTable {
	uint16_t FdoMode;
	int16_t  TempMin;
	int16_t  TempMed;
	int16_t  TempMax;
	int16_t  Slope1;
	int16_t  Slope2;
	int16_t  FdoMin;
	int16_t  HystUp;
	int16_t  HystDown;
	int16_t  HystSlope;
	int16_t  TempRespLim;
	int16_t  TempCurr;
	int16_t  SlopeCurr;
	int16_t  PwmCurr;
	uint32_t RefreshPeriod;
	int16_t  FdoMax;
	uint8_t  TempSrc;
	int8_t   Padding;
};

typedef struct SMU74_Discrete_FanTable SMU74_Discrete_FanTable;

#define SMU7_DISCRETE_GPIO_SCLK_DEBUG             4
#define SMU7_DISCRETE_GPIO_SCLK_DEBUG_BIT         (0x1 << SMU7_DISCRETE_GPIO_SCLK_DEBUG)


struct SMU7_MclkDpmScoreboard {
	uint32_t PercentageBusy;

	int32_t  PIDError;
	int32_t  PIDIntegral;
	int32_t  PIDOutput;

	uint32_t SigmaDeltaAccum;
	uint32_t SigmaDeltaOutput;
	uint32_t SigmaDeltaLevel;

	uint32_t UtilizationSetpoint;

	uint8_t  TdpClampMode;
	uint8_t  TdcClampMode;
	uint8_t  ThermClampMode;
	uint8_t  VoltageBusy;

	int8_t   CurrLevel;
	int8_t   TargLevel;
	uint8_t  LevelChangeInProgress;
	uint8_t  UpHyst;

	uint8_t  DownHyst;
	uint8_t  VoltageDownHyst;
	uint8_t  DpmEnable;
	uint8_t  DpmRunning;

	uint8_t  DpmForce;
	uint8_t  DpmForceLevel;
	uint8_t  padding2;
	uint8_t  McArbIndex;

	uint32_t MinimumPerfMclk;

	uint8_t  AcpiReq;
	uint8_t  AcpiAck;
	uint8_t  MclkSwitchInProgress;
	uint8_t  MclkSwitchCritical;

	uint8_t  IgnoreVBlank;
	uint8_t  TargetMclkIndex;
	uint16_t VbiFailureCount;
	uint8_t  VbiWaitCounter;
	uint8_t  EnabledLevelsChange;

	uint16_t LevelResidencyCounters[SMU74_MAX_LEVELS_MEMORY];
	uint16_t LevelSwitchCounters[SMU74_MAX_LEVELS_MEMORY];

	void     (*TargetStateCalculator)(uint8_t);
	void     (*SavedTargetStateCalculator)(uint8_t);

	uint16_t AutoDpmInterval;
	uint16_t AutoDpmRange;

	uint16_t VbiTimeoutCount;
	uint16_t MclkSwitchingTime;

	uint8_t  fastSwitch;
	uint8_t  Save_PIC_VDDGFX_EXIT;
	uint8_t  Save_PIC_VDDGFX_ENTER;
	uint8_t  padding;
};

typedef struct SMU7_MclkDpmScoreboard SMU7_MclkDpmScoreboard;

struct SMU7_UlvScoreboard {
	uint8_t     EnterUlv;
	uint8_t     ExitUlv;
	uint8_t     UlvActive;
	uint8_t     WaitingForUlv;
	uint8_t     UlvEnable;
	uint8_t     UlvRunning;
	uint8_t     UlvMasterEnable;
	uint8_t     padding;
	uint32_t    UlvAbortedCount;
	uint32_t    UlvTimeStamp;
};

typedef struct SMU7_UlvScoreboard SMU7_UlvScoreboard;

struct VddgfxSavedRegisters {
	uint32_t GPU_DBG[3];
	uint32_t MEC_BaseAddress_Hi;
	uint32_t MEC_BaseAddress_Lo;
	uint32_t THM_TMON0_CTRL2__RDIR_PRESENT;
	uint32_t THM_TMON1_CTRL2__RDIR_PRESENT;
	uint32_t CP_INT_CNTL;
};

typedef struct VddgfxSavedRegisters VddgfxSavedRegisters;

struct SMU7_VddGfxScoreboard {
	uint8_t     VddGfxEnable;
	uint8_t     VddGfxActive;
	uint8_t     VPUResetOccured;
	uint8_t     padding;

	uint32_t    VddGfxEnteredCount;
	uint32_t    VddGfxAbortedCount;

	uint32_t    VddGfxVid;

	VddgfxSavedRegisters SavedRegisters;
};

typedef struct SMU7_VddGfxScoreboard SMU7_VddGfxScoreboard;

struct SMU7_TdcLimitScoreboard {
	uint8_t  Enable;
	uint8_t  Running;
	uint16_t Alpha;
	uint32_t FilteredIddc;
	uint32_t IddcLimit;
	uint32_t IddcHyst;
	SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_TdcLimitScoreboard SMU7_TdcLimitScoreboard;

struct SMU7_PkgPwrLimitScoreboard {
	uint8_t  Enable;
	uint8_t  Running;
	uint16_t Alpha;
	uint32_t FilteredPkgPwr;
	uint32_t Limit;
	uint32_t Hyst;
	uint32_t LimitFromDriver;
	SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_PkgPwrLimitScoreboard SMU7_PkgPwrLimitScoreboard;

struct SMU7_BapmScoreboard {
	uint32_t source_powers[SMU74_DTE_SOURCES];
	uint32_t source_powers_last[SMU74_DTE_SOURCES];
	int32_t entity_temperatures[SMU74_NUM_GPU_TES];
	int32_t initial_entity_temperatures[SMU74_NUM_GPU_TES];
	int32_t Limit;
	int32_t Hyst;
	int32_t therm_influence_coeff_table[SMU74_DTE_ITERATIONS * SMU74_DTE_SOURCES * SMU74_DTE_SINKS * 2];
	int32_t therm_node_table[SMU74_DTE_ITERATIONS * SMU74_DTE_SOURCES * SMU74_DTE_SINKS];
	uint16_t ConfigTDPPowerScalar;
	uint16_t FanSpeedPowerScalar;
	uint16_t OverDrivePowerScalar;
	uint16_t OverDriveLimitScalar;
	uint16_t FinalPowerScalar;
	uint8_t VariantID;
	uint8_t spare997;

	SMU7_HystController_Data HystControllerData;

	int32_t temperature_gradient_slope;
	int32_t temperature_gradient;
	uint32_t measured_temperature;
};


typedef struct SMU7_BapmScoreboard SMU7_BapmScoreboard;

struct SMU7_AcpiScoreboard {
	uint32_t SavedInterruptMask[2];
	uint8_t LastACPIRequest;
	uint8_t CgBifResp;
	uint8_t RequestType;
	uint8_t Padding;
	SMU74_Discrete_ACPILevel D0Level;
};

typedef struct SMU7_AcpiScoreboard SMU7_AcpiScoreboard;

struct SMU74_Discrete_PmFuses {
	uint8_t BapmVddCVidHiSidd[8];
	uint8_t BapmVddCVidLoSidd[8];
	uint8_t VddCVid[8];
	uint8_t SviLoadLineEn;
	uint8_t SviLoadLineVddC;
	uint8_t SviLoadLineTrimVddC;
	uint8_t SviLoadLineOffsetVddC;
	uint16_t TDC_VDDC_PkgLimit;
	uint8_t TDC_VDDC_ThrottleReleaseLimitPerc;
	uint8_t TDC_MAWt;
	uint8_t TdcWaterfallCtl;
	uint8_t LPMLTemperatureMin;
	uint8_t LPMLTemperatureMax;
	uint8_t Reserved;

	uint8_t LPMLTemperatureScaler[16];

	int16_t FuzzyFan_ErrorSetDelta;
	int16_t FuzzyFan_ErrorRateSetDelta;
	int16_t FuzzyFan_PwmSetDelta;
	uint16_t Reserved6;

	uint8_t GnbLPML[16];

	uint8_t GnbLPMLMaxVid;
	uint8_t GnbLPMLMinVid;
	uint8_t Reserved1[2];

	uint16_t BapmVddCBaseLeakageHiSidd;
	uint16_t BapmVddCBaseLeakageLoSidd;

	uint16_t  VFT_Temp[3];
	uint16_t  padding;

	SMU_QuadraticCoeffs VFT_ATE[3];

	SMU_QuadraticCoeffs AVFS_GB;
	SMU_QuadraticCoeffs ATE_ACBTC_GB;

	SMU_QuadraticCoeffs P2V;

	uint32_t PsmCharzFreq;

	uint16_t InversionVoltage;
	uint16_t PsmCharzTemp;

	uint32_t EnabledAvfsModules;
};

typedef struct SMU74_Discrete_PmFuses SMU74_Discrete_PmFuses;

struct SMU7_Discrete_Log_Header_Table {
	uint32_t    version;
	uint32_t    asic_id;
	uint16_t    flags;
	uint16_t    entry_size;
	uint32_t    total_size;
	uint32_t    num_of_entries;
	uint8_t     type;
	uint8_t     mode;
	uint8_t     filler_0[2];
	uint32_t    filler_1[2];
};

typedef struct SMU7_Discrete_Log_Header_Table SMU7_Discrete_Log_Header_Table;

struct SMU7_Discrete_Log_Cntl {
	uint8_t             Enabled;
	uint8_t             Type;
	uint8_t             padding[2];
	uint32_t            BufferSize;
	uint32_t            SamplesLogged;
	uint32_t            SampleSize;
	uint32_t            AddrL;
	uint32_t            AddrH;
};

typedef struct SMU7_Discrete_Log_Cntl SMU7_Discrete_Log_Cntl;

#if defined SMU__DGPU_ONLY
#define CAC_ACC_NW_NUM_OF_SIGNALS 87
#endif


struct SMU7_Discrete_Cac_Collection_Table {
	uint32_t temperature;
	uint32_t cac_acc_nw[CAC_ACC_NW_NUM_OF_SIGNALS];
};

typedef struct SMU7_Discrete_Cac_Collection_Table SMU7_Discrete_Cac_Collection_Table;

struct SMU7_Discrete_Cac_Verification_Table {
	uint32_t VddcTotalPower;
	uint32_t VddcLeakagePower;
	uint32_t VddcConstantPower;
	uint32_t VddcGfxDynamicPower;
	uint32_t VddcUvdDynamicPower;
	uint32_t VddcVceDynamicPower;
	uint32_t VddcAcpDynamicPower;
	uint32_t VddcPcieDynamicPower;
	uint32_t VddcDceDynamicPower;
	uint32_t VddcCurrent;
	uint32_t VddcVoltage;
	uint32_t VddciTotalPower;
	uint32_t VddciLeakagePower;
	uint32_t VddciConstantPower;
	uint32_t VddciDynamicPower;
	uint32_t Vddr1TotalPower;
	uint32_t Vddr1LeakagePower;
	uint32_t Vddr1ConstantPower;
	uint32_t Vddr1DynamicPower;
	uint32_t spare[4];
	uint32_t temperature;
};

typedef struct SMU7_Discrete_Cac_Verification_Table SMU7_Discrete_Cac_Verification_Table;

struct SMU7_Discrete_Pm_Status_Table {
	int32_t T_meas_max;
	int32_t T_meas_acc;
	int32_t T_calc_max;
	int32_t T_calc_acc;
	uint32_t P_scalar_acc;
	uint32_t P_calc_max;
	uint32_t P_calc_acc;

	uint32_t I_calc_max;
	uint32_t I_calc_acc;
	uint32_t I_calc_acc_vddci;
	uint32_t V_calc_noload_acc;
	uint32_t V_calc_load_acc;
	uint32_t V_calc_noload_acc_vddci;
	uint32_t P_meas_acc;
	uint32_t V_meas_noload_acc;
	uint32_t V_meas_load_acc;
	uint32_t I_meas_acc;
	uint32_t P_meas_acc_vddci;
	uint32_t V_meas_noload_acc_vddci;
	uint32_t V_meas_load_acc_vddci;
	uint32_t I_meas_acc_vddci;

	uint16_t Sclk_dpm_residency[8];
	uint16_t Uvd_dpm_residency[8];
	uint16_t Vce_dpm_residency[8];
	uint16_t Mclk_dpm_residency[4];

	uint32_t P_vddci_acc;
	uint32_t P_vddr1_acc;
	uint32_t P_nte1_acc;
	uint32_t PkgPwr_max;
	uint32_t PkgPwr_acc;
	uint32_t MclkSwitchingTime_max;
	uint32_t MclkSwitchingTime_acc;
	uint32_t FanPwm_acc;
	uint32_t FanRpm_acc;

	uint32_t AccCnt;
};

typedef struct SMU7_Discrete_Pm_Status_Table SMU7_Discrete_Pm_Status_Table;

#define SMU7_MAX_GFX_CU_COUNT 16

struct SMU7_GfxCuPgScoreboard {
	uint8_t Enabled;
	uint8_t WaterfallUp;
	uint8_t WaterfallDown;
	uint8_t WaterfallLimit;
	uint8_t CurrMaxCu;
	uint8_t TargMaxCu;
	uint8_t ClampMode;
	uint8_t Active;
	uint8_t MaxSupportedCu;
	uint8_t MinSupportedCu;
	uint8_t PendingGfxCuHostInterrupt;
	uint8_t LastFilteredMaxCuInteger;
	uint16_t FilteredMaxCu;
	uint16_t FilteredMaxCuAlpha;
	uint16_t FilterResetCount;
	uint16_t FilterResetCountLimit;
	uint8_t ForceCu;
	uint8_t ForceCuCount;
	uint8_t spare[2];
};

typedef struct SMU7_GfxCuPgScoreboard SMU7_GfxCuPgScoreboard;

#define SMU7_SCLK_CAC 0x561
#define SMU7_MCLK_CAC 0xF9
#define SMU7_VCLK_CAC 0x2DE
#define SMU7_DCLK_CAC 0x2DE
#define SMU7_ECLK_CAC 0x25E
#define SMU7_ACLK_CAC 0x25E
#define SMU7_SAMCLK_CAC 0x25E
#define SMU7_DISPCLK_CAC 0x100
#define SMU7_CAC_CONSTANT 0x2EE3430
#define SMU7_CAC_CONSTANT_SHIFT 18

#define SMU7_VDDCI_MCLK_CONST        1765
#define SMU7_VDDCI_MCLK_CONST_SHIFT  16
#define SMU7_VDDCI_VDDCI_CONST       50958
#define SMU7_VDDCI_VDDCI_CONST_SHIFT 14
#define SMU7_VDDCI_CONST             11781
#define SMU7_VDDCI_STROBE_PWR        1331

#define SMU7_VDDR1_CONST            693
#define SMU7_VDDR1_CAC_WEIGHT       20
#define SMU7_VDDR1_CAC_WEIGHT_SHIFT 19
#define SMU7_VDDR1_STROBE_PWR       512

#define SMU7_AREA_COEFF_UVD 0xA78
#define SMU7_AREA_COEFF_VCE 0x190A
#define SMU7_AREA_COEFF_ACP 0x22D1
#define SMU7_AREA_COEFF_SAMU 0x534

#define SMU7_THERM_OUT_MODE_DISABLE       0x0
#define SMU7_THERM_OUT_MODE_THERM_ONLY    0x1
#define SMU7_THERM_OUT_MODE_THERM_VRHOT   0x2

// DIDT Defines
#define SQ_Enable_MASK 0x1
#define SQ_IR_MASK 0x2
#define SQ_PCC_MASK 0x4
#define SQ_EDC_MASK 0x8

#define TCP_Enable_MASK 0x100
#define TCP_IR_MASK 0x200
#define TCP_PCC_MASK 0x400
#define TCP_EDC_MASK 0x800

#define TD_Enable_MASK 0x10000
#define TD_IR_MASK 0x20000
#define TD_PCC_MASK 0x40000
#define TD_EDC_MASK 0x80000

#define DB_Enable_MASK 0x1000000
#define DB_IR_MASK 0x2000000
#define DB_PCC_MASK 0x4000000 
#define DB_EDC_MASK 0x8000000

#define SQ_Enable_SHIFT 0
#define SQ_IR_SHIFT 1
#define SQ_PCC_SHIFT 2
#define SQ_EDC_SHIFT 3

#define TCP_Enable_SHIFT 8
#define TCP_IR_SHIFT 9
#define TCP_PCC_SHIFT 10
#define TCP_EDC_SHIFT 11

#define TD_Enable_SHIFT 16
#define TD_IR_SHIFT 17
#define TD_PCC_SHIFT 18
#define TD_EDC_SHIFT 19

#define DB_Enable_SHIFT 24
#define DB_IR_SHIFT 25
#define DB_PCC_SHIFT 26 
#define DB_EDC_SHIFT 27

#define BTCGB0_Vdroop_Enable_MASK  0x1
#define BTCGB1_Vdroop_Enable_MASK  0x2
#define AVFSGB0_Vdroop_Enable_MASK 0x4
#define AVFSGB1_Vdroop_Enable_MASK 0x8

#define BTCGB0_Vdroop_Enable_SHIFT  0
#define BTCGB1_Vdroop_Enable_SHIFT  1
#define AVFSGB0_Vdroop_Enable_SHIFT 2
#define AVFSGB1_Vdroop_Enable_SHIFT 3


#pragma pack(pop)


#endif

/*
 * Copyright 2014 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */


#ifndef SMU74_H
#define SMU74_H

#pragma pack(push, 1)

#define SMU__DGPU_ONLY

#define SMU__NUM_SCLK_DPM_STATE  8
#define SMU__NUM_MCLK_DPM_LEVELS 4
#define SMU__NUM_LCLK_DPM_LEVELS 8
#define SMU__NUM_PCIE_DPM_LEVELS 8

#define EXP_M1  35
#define EXP_M2  92821
#define EXP_B   66629747

#define EXP_M1_1  365
#define EXP_M2_1  658700
#define EXP_B_1   305506134

#define EXP_M1_2  189
#define EXP_M2_2  379692
#define EXP_B_2   194609469

#define EXP_M1_3  99
#define EXP_M2_3  217915
#define EXP_B_3   122255994

#define EXP_M1_4  51
#define EXP_M2_4  122643
#define EXP_B_4   74893384

#define EXP_M1_5  423
#define EXP_M2_5  1103326
#define EXP_B_5   728122621

enum SID_OPTION {
	SID_OPTION_HI,
	SID_OPTION_LO,
	SID_OPTION_COUNT
};

enum Poly3rdOrderCoeff {
	LEAKAGE_TEMPERATURE_SCALAR,
	LEAKAGE_VOLTAGE_SCALAR,
	DYNAMIC_VOLTAGE_SCALAR,
	POLY_3RD_ORDER_COUNT
};

struct SMU7_Poly3rdOrder_Data {
	int32_t a;
	int32_t b;
	int32_t c;
	int32_t d;
	uint8_t a_shift;
	uint8_t b_shift;
	uint8_t c_shift;
	uint8_t x_shift;
};

typedef struct SMU7_Poly3rdOrder_Data SMU7_Poly3rdOrder_Data;

struct Power_Calculator_Data {
	uint16_t NoLoadVoltage;
	uint16_t LoadVoltage;
	uint16_t Resistance;
	uint16_t Temperature;
	uint16_t BaseLeakage;
	uint16_t LkgTempScalar;
	uint16_t LkgVoltScalar;
	uint16_t LkgAreaScalar;
	uint16_t LkgPower;
	uint16_t DynVoltScalar;
	uint32_t Cac;
	uint32_t DynPower;
	uint32_t TotalCurrent;
	uint32_t TotalPower;
};

typedef struct Power_Calculator_Data PowerCalculatorData_t;

struct Gc_Cac_Weight_Data {
	uint8_t index;
	uint32_t value;
};

typedef struct Gc_Cac_Weight_Data GcCacWeight_Data;


typedef struct {
	uint32_t high;
	uint32_t low;
} data_64_t;

typedef struct {
	data_64_t high;
	data_64_t low;
} data_128_t;

#define SMU7_CONTEXT_ID_SMC        1
#define SMU7_CONTEXT_ID_VBIOS      2

#define SMU74_MAX_LEVELS_VDDC            16
#define SMU74_MAX_LEVELS_VDDGFX          16
#define SMU74_MAX_LEVELS_VDDCI           8
#define SMU74_MAX_LEVELS_MVDD            4

#define SMU_MAX_SMIO_LEVELS              4

#define SMU74_MAX_LEVELS_GRAPHICS        SMU__NUM_SCLK_DPM_STATE   /* SCLK + SQ DPM + ULV */
#define SMU74_MAX_LEVELS_MEMORY          SMU__NUM_MCLK_DPM_LEVELS   /* MCLK Levels DPM */
#define SMU74_MAX_LEVELS_GIO             SMU__NUM_LCLK_DPM_LEVELS  /* LCLK Levels */
#define SMU74_MAX_LEVELS_LINK            SMU__NUM_PCIE_DPM_LEVELS  /* PCIe speed and number of lanes */
#define SMU74_MAX_LEVELS_UVD             8   /* VCLK/DCLK levels for UVD */
#define SMU74_MAX_LEVELS_VCE             8   /* ECLK levels for VCE */
#define SMU74_MAX_LEVELS_ACP             8   /* ACLK levels for ACP */
#define SMU74_MAX_LEVELS_SAMU            8   /* SAMCLK levels for SAMU */
#define SMU74_MAX_ENTRIES_SMIO           32  /* Number of entries in SMIO table */

#define DPM_NO_LIMIT 0
#define DPM_NO_UP 1
#define DPM_GO_DOWN 2
#define DPM_GO_UP 3

#define SMU7_FIRST_DPM_GRAPHICS_LEVEL    0
#define SMU7_FIRST_DPM_MEMORY_LEVEL      0

#define GPIO_CLAMP_MODE_VRHOT      1
#define GPIO_CLAMP_MODE_THERM      2
#define GPIO_CLAMP_MODE_DC         4

#define SCRATCH_B_TARG_PCIE_INDEX_SHIFT 0
#define SCRATCH_B_TARG_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_TARG_PCIE_INDEX_SHIFT)
#define SCRATCH_B_CURR_PCIE_INDEX_SHIFT 3
#define SCRATCH_B_CURR_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_CURR_PCIE_INDEX_SHIFT)
#define SCRATCH_B_TARG_UVD_INDEX_SHIFT  6
#define SCRATCH_B_TARG_UVD_INDEX_MASK   (0x7<<SCRATCH_B_TARG_UVD_INDEX_SHIFT)
#define SCRATCH_B_CURR_UVD_INDEX_SHIFT  9
#define SCRATCH_B_CURR_UVD_INDEX_MASK   (0x7<<SCRATCH_B_CURR_UVD_INDEX_SHIFT)
#define SCRATCH_B_TARG_VCE_INDEX_SHIFT  12
#define SCRATCH_B_TARG_VCE_INDEX_MASK   (0x7<<SCRATCH_B_TARG_VCE_INDEX_SHIFT)
#define SCRATCH_B_CURR_VCE_INDEX_SHIFT  15
#define SCRATCH_B_CURR_VCE_INDEX_MASK   (0x7<<SCRATCH_B_CURR_VCE_INDEX_SHIFT)
#define SCRATCH_B_TARG_ACP_INDEX_SHIFT  18
#define SCRATCH_B_TARG_ACP_INDEX_MASK   (0x7<<SCRATCH_B_TARG_ACP_INDEX_SHIFT)
#define SCRATCH_B_CURR_ACP_INDEX_SHIFT  21
#define SCRATCH_B_CURR_ACP_INDEX_MASK   (0x7<<SCRATCH_B_CURR_ACP_INDEX_SHIFT)
#define SCRATCH_B_TARG_SAMU_INDEX_SHIFT 24
#define SCRATCH_B_TARG_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_TARG_SAMU_INDEX_SHIFT)
#define SCRATCH_B_CURR_SAMU_INDEX_SHIFT 27
#define SCRATCH_B_CURR_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_CURR_SAMU_INDEX_SHIFT)

/* Virtualization Defines */
#define CG_XDMA_MASK  0x1
#define CG_XDMA_SHIFT 0
#define CG_UVD_MASK   0x2
#define CG_UVD_SHIFT  1
#define CG_VCE_MASK   0x4
#define CG_VCE_SHIFT  2
#define CG_SAMU_MASK  0x8
#define CG_SAMU_SHIFT 3
#define CG_GFX_MASK   0x10
#define CG_GFX_SHIFT  4
#define CG_SDMA_MASK  0x20
#define CG_SDMA_SHIFT 5
#define CG_HDP_MASK   0x40
#define CG_HDP_SHIFT  6
#define CG_MC_MASK    0x80
#define CG_MC_SHIFT   7
#define CG_DRM_MASK   0x100
#define CG_DRM_SHIFT  8
#define CG_ROM_MASK   0x200
#define CG_ROM_SHIFT  9
#define CG_BIF_MASK   0x400
#define CG_BIF_SHIFT  10


#define SMU74_DTE_ITERATIONS 5
#define SMU74_DTE_SOURCES 3
#define SMU74_DTE_SINKS 1
#define SMU74_NUM_CPU_TES 0
#define SMU74_NUM_GPU_TES 1
#define SMU74_NUM_NON_TES 2
#define SMU74_DTE_FAN_SCALAR_MIN 0x100
#define SMU74_DTE_FAN_SCALAR_MAX 0x166
#define SMU74_DTE_FAN_TEMP_MAX 93
#define SMU74_DTE_FAN_TEMP_MIN 83


#if defined SMU__FUSION_ONLY
#define SMU7_DTE_ITERATIONS 5
#define SMU7_DTE_SOURCES 5
#define SMU7_DTE_SINKS 3
#define SMU7_NUM_CPU_TES 2
#define SMU7_NUM_GPU_TES 1
#define SMU7_NUM_NON_TES 2
#endif

struct SMU7_HystController_Data {
	uint8_t waterfall_up;
	uint8_t waterfall_down;
	uint8_t waterfall_limit;
	uint8_t spare;
	uint16_t release_cnt;
	uint16_t release_limit;
};

typedef struct SMU7_HystController_Data SMU7_HystController_Data;

struct SMU74_PIDController {
	uint32_t Ki;
	int32_t LFWindupUpperLim;
	int32_t LFWindupLowerLim;
	uint32_t StatePrecision;
	uint32_t LfPrecision;
	uint32_t LfOffset;
	uint32_t MaxState;
	uint32_t MaxLfFraction;
	uint32_t StateShift;
};

typedef struct SMU74_PIDController SMU74_PIDController;

struct SMU7_LocalDpmScoreboard {
	uint32_t PercentageBusy;

	int32_t  PIDError;
	int32_t  PIDIntegral;
	int32_t  PIDOutput;

	uint32_t SigmaDeltaAccum;
	uint32_t SigmaDeltaOutput;
	uint32_t SigmaDeltaLevel;

	uint32_t UtilizationSetpoint;

	uint8_t  TdpClampMode;
	uint8_t  TdcClampMode;
	uint8_t  ThermClampMode;
	uint8_t  VoltageBusy;

	int8_t   CurrLevel;
	int8_t   TargLevel;
	uint8_t  LevelChangeInProgress;
	uint8_t  UpHyst;

	uint8_t  DownHyst;
	uint8_t  VoltageDownHyst;
	uint8_t  DpmEnable;
	uint8_t  DpmRunning;

	uint8_t  DpmForce;
	uint8_t  DpmForceLevel;
	uint8_t  DisplayWatermark;
	uint8_t  McArbIndex;

	uint32_t MinimumPerfSclk;

	uint8_t  AcpiReq;
	uint8_t  AcpiAck;
	uint8_t  GfxClkSlow;
	uint8_t  GpioClampMode;

	uint8_t  spare2;
	uint8_t  EnabledLevelsChange;
	uint8_t  DteClampMode;
	uint8_t  FpsClampMode;

	uint16_t LevelResidencyCounters[SMU74_MAX_LEVELS_GRAPHICS];
	uint16_t LevelSwitchCounters[SMU74_MAX_LEVELS_GRAPHICS];

	void     (*TargetStateCalculator)(uint8_t);
	void     (*SavedTargetStateCalculator)(uint8_t);

	uint16_t AutoDpmInterval;
	uint16_t AutoDpmRange;

	uint8_t  FpsEnabled;
	uint8_t  MaxPerfLevel;
	uint8_t  AllowLowClkInterruptToHost;
	uint8_t  FpsRunning;

	uint32_t MaxAllowedFrequency;

	uint32_t FilteredSclkFrequency;
	uint32_t LastSclkFrequency;
	uint32_t FilteredSclkFrequencyCnt;

	uint8_t MinPerfLevel;
	uint8_t padding[3];

	uint16_t FpsAlpha;
	uint16_t DeltaTime;
	uint32_t CurrentFps;
	uint32_t FilteredFps;
	uint32_t FrameCount;
	uint32_t FrameCountLast;
	uint16_t FpsTargetScalar;
	uint16_t FpsWaterfallLimitScalar;
	uint16_t FpsAlphaScalar;
	uint16_t spare8;
	SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_LocalDpmScoreboard SMU7_LocalDpmScoreboard;

#define SMU7_MAX_VOLTAGE_CLIENTS 12

typedef uint8_t (*VoltageChangeHandler_t)(uint16_t, uint8_t);

#define VDDC_MASK    0x00007FFF
#define VDDC_SHIFT   0
#define VDDCI_MASK   0x3FFF8000
#define VDDCI_SHIFT  15
#define PHASES_MASK  0xC0000000
#define PHASES_SHIFT 30

typedef uint32_t SMU_VoltageLevel;

struct SMU7_VoltageScoreboard {

	SMU_VoltageLevel TargetVoltage;
	uint16_t MaxVid;
	uint8_t  HighestVidOffset;
	uint8_t  CurrentVidOffset;

	uint16_t CurrentVddc;
	uint16_t CurrentVddci;


	uint8_t  ControllerBusy;
	uint8_t  CurrentVid;
	uint8_t  CurrentVddciVid;
	uint8_t  padding;

	SMU_VoltageLevel RequestedVoltage[SMU7_MAX_VOLTAGE_CLIENTS];
	SMU_VoltageLevel TargetVoltageState;
	uint8_t  EnabledRequest[SMU7_MAX_VOLTAGE_CLIENTS];

	uint8_t  padding2;
	uint8_t  padding3;
	uint8_t  ControllerEnable;
	uint8_t  ControllerRunning;
	uint16_t CurrentStdVoltageHiSidd;
	uint16_t CurrentStdVoltageLoSidd;
	uint8_t  OverrideVoltage;
	uint8_t  padding4;
	uint8_t  padding5;
	uint8_t  CurrentPhases;

	VoltageChangeHandler_t ChangeVddc;

	VoltageChangeHandler_t ChangeVddci;
	VoltageChangeHandler_t ChangePhase;
	VoltageChangeHandler_t ChangeMvdd;

	VoltageChangeHandler_t functionLinks[6];

	uint16_t *VddcFollower1;

	int16_t  Driver_OD_RequestedVidOffset1;
	int16_t  Driver_OD_RequestedVidOffset2;
};

typedef struct SMU7_VoltageScoreboard SMU7_VoltageScoreboard;

#define SMU7_MAX_PCIE_LINK_SPEEDS 3 /* 0:Gen1 1:Gen2 2:Gen3 */

struct SMU7_PCIeLinkSpeedScoreboard {
	uint8_t     DpmEnable;
	uint8_t     DpmRunning;
	uint8_t     DpmForce;
	uint8_t     DpmForceLevel;

	uint8_t     CurrentLinkSpeed;
	uint8_t     EnabledLevelsChange;
	uint16_t    AutoDpmInterval;

	uint16_t    AutoDpmRange;
	uint16_t    AutoDpmCount;

	uint8_t     DpmMode;
	uint8_t     AcpiReq;
	uint8_t     AcpiAck;
	uint8_t     CurrentLinkLevel;

};

typedef struct SMU7_PCIeLinkSpeedScoreboard SMU7_PCIeLinkSpeedScoreboard;

#define SMU7_LKGE_LUT_NUM_OF_TEMP_ENTRIES 16
#define SMU7_LKGE_LUT_NUM_OF_VOLT_ENTRIES 16

#define SMU7_SCALE_I  7
#define SMU7_SCALE_R 12

struct SMU7_PowerScoreboard {
	PowerCalculatorData_t VddcPowerData[SID_OPTION_COUNT];

	uint32_t TotalGpuPower;
	uint32_t TdcCurrent;

	uint16_t   VddciTotalPower;
	uint16_t   sparesasfsdfd;
	uint16_t   Vddr1Power;
	uint16_t   RocPower;

	uint16_t   CalcMeasPowerBlend;
	uint8_t    SidOptionPower;
	uint8_t    SidOptionCurrent;

	uint32_t   WinTime;

	uint16_t Telemetry_1_slope;
	uint16_t Telemetry_2_slope;
	int32_t Telemetry_1_offset;
	int32_t Telemetry_2_offset;

	uint32_t VddcCurrentTelemetry;
	uint32_t VddGfxCurrentTelemetry;
	uint32_t VddcPowerTelemetry;
	uint32_t VddGfxPowerTelemetry;
	uint32_t VddciPowerTelemetry;

	uint32_t VddcPower;
	uint32_t VddGfxPower;
	uint32_t VddciPower;

	uint32_t TelemetryCurrent[2];
	uint32_t TelemetryVoltage[2];
	uint32_t TelemetryPower[2];
};

typedef struct SMU7_PowerScoreboard SMU7_PowerScoreboard;

struct SMU7_ThermalScoreboard {
	int16_t  GpuLimit;
	int16_t  GpuHyst;
	uint16_t CurrGnbTemp;
	uint16_t FilteredGnbTemp;

	uint8_t  ControllerEnable;
	uint8_t  ControllerRunning;
	uint8_t  AutoTmonCalInterval;
	uint8_t  AutoTmonCalEnable;

	uint8_t  ThermalDpmEnabled;
	uint8_t  SclkEnabledMask;
	uint8_t  spare[2];
	int32_t  temperature_gradient;

	SMU7_HystController_Data HystControllerData;
	int32_t  WeightedSensorTemperature;
	uint16_t TemperatureLimit[SMU74_MAX_LEVELS_GRAPHICS];
	uint32_t Alpha;
};

typedef struct SMU7_ThermalScoreboard SMU7_ThermalScoreboard;

#define SMU7_SCLK_DPM_CONFIG_MASK                        0x01
#define SMU7_VOLTAGE_CONTROLLER_CONFIG_MASK              0x02
#define SMU7_THERMAL_CONTROLLER_CONFIG_MASK              0x04
#define SMU7_MCLK_DPM_CONFIG_MASK                        0x08
#define SMU7_UVD_DPM_CONFIG_MASK                         0x10
#define SMU7_VCE_DPM_CONFIG_MASK                         0x20
#define SMU7_ACP_DPM_CONFIG_MASK                         0x40
#define SMU7_SAMU_DPM_CONFIG_MASK                        0x80
#define SMU7_PCIEGEN_DPM_CONFIG_MASK                    0x100

#define SMU7_ACP_MCLK_HANDSHAKE_DISABLE                  0x00000001
#define SMU7_ACP_SCLK_HANDSHAKE_DISABLE                  0x00000002
#define SMU7_UVD_MCLK_HANDSHAKE_DISABLE                  0x00000100
#define SMU7_UVD_SCLK_HANDSHAKE_DISABLE                  0x00000200
#define SMU7_VCE_MCLK_HANDSHAKE_DISABLE                  0x00010000
#define SMU7_VCE_SCLK_HANDSHAKE_DISABLE                  0x00020000

/* All 'soft registers' should be uint32_t. */
struct SMU74_SoftRegisters {
	uint32_t        RefClockFrequency;
	uint32_t        PmTimerPeriod;
	uint32_t        FeatureEnables;

	uint32_t        PreVBlankGap;
	uint32_t        VBlankTimeout;
	uint32_t        TrainTimeGap;

	uint32_t        MvddSwitchTime;
	uint32_t        LongestAcpiTrainTime;
	uint32_t        AcpiDelay;
	uint32_t        G5TrainTime;
	uint32_t        DelayMpllPwron;
	uint32_t        VoltageChangeTimeout;

	uint32_t        HandshakeDisables;

	uint8_t         DisplayPhy1Config;
	uint8_t         DisplayPhy2Config;
	uint8_t         DisplayPhy3Config;
	uint8_t         DisplayPhy4Config;

	uint8_t         DisplayPhy5Config;
	uint8_t         DisplayPhy6Config;
	uint8_t         DisplayPhy7Config;
	uint8_t         DisplayPhy8Config;

	uint32_t        AverageGraphicsActivity;
	uint32_t        AverageMemoryActivity;
	uint32_t        AverageGioActivity;

	uint8_t         SClkDpmEnabledLevels;
	uint8_t         MClkDpmEnabledLevels;
	uint8_t         LClkDpmEnabledLevels;
	uint8_t         PCIeDpmEnabledLevels;

	uint8_t         UVDDpmEnabledLevels;
	uint8_t         SAMUDpmEnabledLevels;
	uint8_t         ACPDpmEnabledLevels;
	uint8_t         VCEDpmEnabledLevels;

	uint32_t        DRAM_LOG_ADDR_H;
	uint32_t        DRAM_LOG_ADDR_L;
	uint32_t        DRAM_LOG_PHY_ADDR_H;
	uint32_t        DRAM_LOG_PHY_ADDR_L;
	uint32_t        DRAM_LOG_BUFF_SIZE;
	uint32_t        UlvEnterCount;
	uint32_t        UlvTime;
	uint32_t        UcodeLoadStatus;
	uint32_t        AllowMvddSwitch;
	uint8_t         Activity_Weight;
	uint8_t         Reserved8[3];
};

typedef struct SMU74_SoftRegisters SMU74_SoftRegisters;

struct SMU74_Firmware_Header {
	uint32_t Digest[5];
	uint32_t Version;
	uint32_t HeaderSize;
	uint32_t Flags;
	uint32_t EntryPoint;
	uint32_t CodeSize;
	uint32_t ImageSize;

	uint32_t Rtos;
	uint32_t SoftRegisters;
	uint32_t DpmTable;
	uint32_t FanTable;
	uint32_t CacConfigTable;
	uint32_t CacStatusTable;

	uint32_t mcRegisterTable;

	uint32_t mcArbDramTimingTable;

	uint32_t PmFuseTable;
	uint32_t Globals;
	uint32_t ClockStretcherTable;
	uint32_t VftTable;
	uint32_t Reserved1;
	uint32_t AvfsTable;
	uint32_t AvfsCksOffGbvTable;
	uint32_t AvfsMeanNSigma;
	uint32_t AvfsSclkOffsetTable;
	uint32_t Reserved[16];
	uint32_t Signature;
};

typedef struct SMU74_Firmware_Header SMU74_Firmware_Header;

#define SMU7_FIRMWARE_HEADER_LOCATION 0x20000

enum  DisplayConfig {
	PowerDown = 1,
	DP54x4,
	DP54x2,
	DP54x1,
	DP27x4,
	DP27x2,
	DP27x1,
	HDMI297,
	HDMI162,
	LVDS,
	DP324x4,
	DP324x2,
	DP324x1
};


#define MC_BLOCK_COUNT 1
#define CPL_BLOCK_COUNT 5
#define SE_BLOCK_COUNT 15
#define GC_BLOCK_COUNT 24

struct SMU7_Local_Cac {
	uint8_t BlockId;
	uint8_t SignalId;
	uint8_t Threshold;
	uint8_t Padding;
};

typedef struct SMU7_Local_Cac SMU7_Local_Cac;

struct SMU7_Local_Cac_Table {

	SMU7_Local_Cac CplLocalCac[CPL_BLOCK_COUNT];
	SMU7_Local_Cac McLocalCac[MC_BLOCK_COUNT];
	SMU7_Local_Cac SeLocalCac[SE_BLOCK_COUNT];
	SMU7_Local_Cac GcLocalCac[GC_BLOCK_COUNT];
};

typedef struct SMU7_Local_Cac_Table SMU7_Local_Cac_Table;

#pragma pack(pop)

/* Description of Clock Gating bitmask for Tonga:
 * System Clock Gating
 */
#define CG_SYS_BITMASK_FIRST_BIT      0  /* First bit of Sys CG bitmask */
#define CG_SYS_BITMASK_LAST_BIT       9  /* Last bit of Sys CG bitmask */
#define CG_SYS_BIF_MGLS_SHIFT         0
#define CG_SYS_ROM_SHIFT              1
#define CG_SYS_MC_MGCG_SHIFT          2
#define CG_SYS_MC_MGLS_SHIFT          3
#define CG_SYS_SDMA_MGCG_SHIFT        4
#define CG_SYS_SDMA_MGLS_SHIFT        5
#define CG_SYS_DRM_MGCG_SHIFT         6
#define CG_SYS_HDP_MGCG_SHIFT         7
#define CG_SYS_HDP_MGLS_SHIFT         8
#define CG_SYS_DRM_MGLS_SHIFT         9
#define CG_SYS_BIF_MGCG_SHIFT         10

#define CG_SYS_BIF_MGLS_MASK          0x1
#define CG_SYS_ROM_MASK               0x2
#define CG_SYS_MC_MGCG_MASK           0x4
#define CG_SYS_MC_MGLS_MASK           0x8
#define CG_SYS_SDMA_MGCG_MASK         0x10
#define CG_SYS_SDMA_MGLS_MASK         0x20
#define CG_SYS_DRM_MGCG_MASK          0x40
#define CG_SYS_HDP_MGCG_MASK          0x80
#define CG_SYS_HDP_MGLS_MASK          0x100
#define CG_SYS_DRM_MGLS_MASK          0x200
#define CG_SYS_BIF_MGCG_MASK          0x400

/* Graphics Clock Gating */
#define CG_GFX_BITMASK_FIRST_BIT      16 /* First bit of Gfx CG bitmask */
#define CG_GFX_BITMASK_LAST_BIT       24 /* Last bit of Gfx CG bitmask */

#define CG_GFX_CGCG_SHIFT             16
#define CG_GFX_CGLS_SHIFT             17
#define CG_CPF_MGCG_SHIFT             18
#define CG_RLC_MGCG_SHIFT             19
#define CG_GFX_OTHERS_MGCG_SHIFT      20
#define CG_GFX_3DCG_SHIFT             21
#define CG_GFX_3DLS_SHIFT             22
#define CG_GFX_RLC_LS_SHIFT           23
#define CG_GFX_CP_LS_SHIFT            24

#define CG_GFX_CGCG_MASK              0x00010000
#define CG_GFX_CGLS_MASK              0x00020000
#define CG_CPF_MGCG_MASK              0x00040000
#define CG_RLC_MGCG_MASK              0x00080000
#define CG_GFX_OTHERS_MGCG_MASK       0x00100000
#define CG_GFX_3DCG_MASK              0x00200000
#define CG_GFX_3DLS_MASK              0x00400000
#define CG_GFX_RLC_LS_MASK            0x00800000
#define CG_GFX_CP_LS_MASK             0x01000000


/* Voltage Regulator Configuration
VR Config info is contained in dpmTable.VRConfig */

#define VRCONF_VDDC_MASK         0x000000FF
#define VRCONF_VDDC_SHIFT        0
#define VRCONF_VDDGFX_MASK       0x0000FF00
#define VRCONF_VDDGFX_SHIFT      8
#define VRCONF_VDDCI_MASK        0x00FF0000
#define VRCONF_VDDCI_SHIFT       16
#define VRCONF_MVDD_MASK         0xFF000000
#define VRCONF_MVDD_SHIFT        24

#define VR_MERGED_WITH_VDDC      0
#define VR_SVI2_PLANE_1          1
#define VR_SVI2_PLANE_2          2
#define VR_SMIO_PATTERN_1        3
#define VR_SMIO_PATTERN_2        4
#define VR_STATIC_VOLTAGE        5

/* Clock Stretcher Configuration */

#define CLOCK_STRETCHER_MAX_ENTRIES 0x4
#define CKS_LOOKUPTable_MAX_ENTRIES 0x4

/* The 'settings' field is subdivided in the following way: */
#define CLOCK_STRETCHER_SETTING_DDT_MASK             0x01
#define CLOCK_STRETCHER_SETTING_DDT_SHIFT            0x0
#define CLOCK_STRETCHER_SETTING_STRETCH_AMOUNT_MASK  0x1E
#define CLOCK_STRETCHER_SETTING_STRETCH_AMOUNT_SHIFT 0x1
#define CLOCK_STRETCHER_SETTING_ENABLE_MASK          0x80
#define CLOCK_STRETCHER_SETTING_ENABLE_SHIFT         0x7

struct SMU_ClockStretcherDataTableEntry {
	uint8_t minVID;
	uint8_t maxVID;
	uint16_t setting;
};
typedef struct SMU_ClockStretcherDataTableEntry SMU_ClockStretcherDataTableEntry;

struct SMU_ClockStretcherDataTable {
	SMU_ClockStretcherDataTableEntry ClockStretcherDataTableEntry[CLOCK_STRETCHER_MAX_ENTRIES];
};
typedef struct SMU_ClockStretcherDataTable SMU_ClockStretcherDataTable;

struct SMU_CKS_LOOKUPTableEntry {
	uint16_t minFreq;
	uint16_t maxFreq;

	uint8_t setting;
	uint8_t padding[3];
};
typedef struct SMU_CKS_LOOKUPTableEntry SMU_CKS_LOOKUPTableEntry;

struct SMU_CKS_LOOKUPTable {
	SMU_CKS_LOOKUPTableEntry CKS_LOOKUPTableEntry[CKS_LOOKUPTable_MAX_ENTRIES];
};
typedef struct SMU_CKS_LOOKUPTable SMU_CKS_LOOKUPTable;

struct AgmAvfsData_t {
	uint16_t avgPsmCount[28];
	uint16_t minPsmCount[28];
};

typedef struct AgmAvfsData_t AgmAvfsData_t;

enum VFT_COLUMNS {
	SCLK0,
	SCLK1,
	SCLK2,
	SCLK3,
	SCLK4,
	SCLK5,
	SCLK6,
	SCLK7,

	NUM_VFT_COLUMNS
};

#define VFT_TABLE_DEFINED

#define TEMP_RANGE_MAXSTEPS 12

struct VFT_CELL_t {
	uint16_t Voltage;
};

typedef struct VFT_CELL_t VFT_CELL_t;

struct VFT_TABLE_t {
	VFT_CELL_t    Cell[TEMP_RANGE_MAXSTEPS][NUM_VFT_COLUMNS];
	uint16_t      AvfsGbv[NUM_VFT_COLUMNS];
	uint16_t      BtcGbv[NUM_VFT_COLUMNS];
	uint16_t      Temperature[TEMP_RANGE_MAXSTEPS];

	uint8_t       NumTemperatureSteps;
	uint8_t       padding[3];
};

typedef struct VFT_TABLE_t VFT_TABLE_t;


/* Total margin, root mean square of Fmax + DC + Platform */
struct AVFS_Margin_t {
	VFT_CELL_t Cell[NUM_VFT_COLUMNS];
};
typedef struct AVFS_Margin_t AVFS_Margin_t;

#define BTCGB_VDROOP_TABLE_MAX_ENTRIES 2
#define AVFSGB_VDROOP_TABLE_MAX_ENTRIES 2

struct GB_VDROOP_TABLE_t {
	int32_t a0;
	int32_t a1;
	int32_t a2;
	uint32_t spare;
};
typedef struct GB_VDROOP_TABLE_t GB_VDROOP_TABLE_t;

struct AVFS_CksOff_Gbv_t {
	VFT_CELL_t Cell[NUM_VFT_COLUMNS];
};
typedef struct AVFS_CksOff_Gbv_t AVFS_CksOff_Gbv_t;

struct AVFS_meanNsigma_t {
	uint32_t Aconstant[3];
	uint16_t DC_tol_sigma;
	uint16_t Platform_mean;
	uint16_t Platform_sigma;
	uint16_t PSM_Age_CompFactor;
	uint8_t  Static_Voltage_Offset[NUM_VFT_COLUMNS];
};
typedef struct AVFS_meanNsigma_t AVFS_meanNsigma_t;

struct AVFS_Sclk_Offset_t {
	uint16_t Sclk_Offset[8];
};
typedef struct AVFS_Sclk_Offset_t AVFS_Sclk_Offset_t;

#endif


/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _SMU73_DISCRETE_H_
#define _SMU73_DISCRETE_H_

#include "smu73.h"

#pragma pack(push, 1)

struct SMIO_Pattern
{
  uint16_t Voltage;
  uint8_t  Smio;
  uint8_t  padding;
};

typedef struct SMIO_Pattern SMIO_Pattern;

struct SMIO_Table
{
  SMIO_Pattern Pattern[SMU_MAX_SMIO_LEVELS];
};

typedef struct SMIO_Table SMIO_Table;

struct SMU73_Discrete_GraphicsLevel {
	uint32_t    MinVoltage;

	uint32_t    SclkFrequency;

	uint8_t     pcieDpmLevel;
	uint8_t     DeepSleepDivId;
	uint16_t    ActivityLevel;
	uint32_t    CgSpllFuncCntl3;
	uint32_t    CgSpllFuncCntl4;
	uint32_t    SpllSpreadSpectrum;
	uint32_t    SpllSpreadSpectrum2;
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;
	uint8_t     SclkDid;
	uint8_t     DisplayWatermark;
	uint8_t     EnabledForActivity;
	uint8_t     EnabledForThrottle;
	uint8_t     UpHyst;
	uint8_t     DownHyst;
	uint8_t     VoltageDownHyst;
	uint8_t     PowerThrottle;
};

typedef struct SMU73_Discrete_GraphicsLevel SMU73_Discrete_GraphicsLevel;

struct SMU73_Discrete_ACPILevel {
    uint32_t    Flags;
    uint32_t MinVoltage;
    uint32_t    SclkFrequency;
    uint8_t     SclkDid;
    uint8_t     DisplayWatermark;
    uint8_t     DeepSleepDivId;
    uint8_t     padding;
    uint32_t    CgSpllFuncCntl;
    uint32_t    CgSpllFuncCntl2;
    uint32_t    CgSpllFuncCntl3;
    uint32_t    CgSpllFuncCntl4;
    uint32_t    SpllSpreadSpectrum;
    uint32_t    SpllSpreadSpectrum2;
    uint32_t    CcPwrDynRm;
    uint32_t    CcPwrDynRm1;
};

typedef struct SMU73_Discrete_ACPILevel SMU73_Discrete_ACPILevel;

struct SMU73_Discrete_Ulv {
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;
	uint16_t    VddcOffset;
	uint8_t     VddcOffsetVid;
	uint8_t     VddcPhase;
	uint32_t    Reserved;
};

typedef struct SMU73_Discrete_Ulv SMU73_Discrete_Ulv;

struct SMU73_Discrete_MemoryLevel
{
    uint32_t MinVoltage;
    uint32_t    MinMvdd;

    uint32_t    MclkFrequency;

    uint8_t     StutterEnable;
    uint8_t     FreqRange;
    uint8_t     EnabledForThrottle;
    uint8_t     EnabledForActivity;

    uint8_t     UpHyst;
    uint8_t     DownHyst;
    uint8_t     VoltageDownHyst;
    uint8_t     padding;

    uint16_t    ActivityLevel;
    uint8_t     DisplayWatermark;
    uint8_t     MclkDivider;
};

typedef struct SMU73_Discrete_MemoryLevel SMU73_Discrete_MemoryLevel;

struct SMU73_Discrete_LinkLevel
{
    uint8_t     PcieGenSpeed;           ///< 0:PciE-gen1 1:PciE-gen2 2:PciE-gen3
    uint8_t     PcieLaneCount;          ///< 1=x1, 2=x2, 3=x4, 4=x8, 5=x12, 6=x16 
    uint8_t     EnabledForActivity;
    uint8_t     SPC;
    uint32_t    DownThreshold;
    uint32_t    UpThreshold;
    uint32_t    Reserved;
};

typedef struct SMU73_Discrete_LinkLevel SMU73_Discrete_LinkLevel;


// MC ARB DRAM Timing registers.
struct SMU73_Discrete_MCArbDramTimingTableEntry
{
    uint32_t McArbDramTiming;
    uint32_t McArbDramTiming2;
    uint8_t  McArbBurstTime;
    uint8_t  TRRDS;
    uint8_t  TRRDL;
    uint8_t  padding;
};

typedef struct SMU73_Discrete_MCArbDramTimingTableEntry SMU73_Discrete_MCArbDramTimingTableEntry;

struct SMU73_Discrete_MCArbDramTimingTable
{
    SMU73_Discrete_MCArbDramTimingTableEntry entries[SMU__NUM_SCLK_DPM_STATE][SMU__NUM_MCLK_DPM_LEVELS];
};

typedef struct SMU73_Discrete_MCArbDramTimingTable SMU73_Discrete_MCArbDramTimingTable;

// UVD VCLK/DCLK state (level) definition.
struct SMU73_Discrete_UvdLevel
{
    uint32_t VclkFrequency;
    uint32_t DclkFrequency;
    uint32_t MinVoltage;
    uint8_t  VclkDivider;
    uint8_t  DclkDivider;
    uint8_t  padding[2];
};

typedef struct SMU73_Discrete_UvdLevel SMU73_Discrete_UvdLevel;

// Clocks for other external blocks (VCE, ACP, SAMU).
struct SMU73_Discrete_ExtClkLevel
{
    uint32_t Frequency;
    uint32_t MinVoltage;
    uint8_t  Divider;
    uint8_t  padding[3];
};

typedef struct SMU73_Discrete_ExtClkLevel SMU73_Discrete_ExtClkLevel;

struct SMU73_Discrete_StateInfo
{
    uint32_t SclkFrequency;
    uint32_t MclkFrequency;
    uint32_t VclkFrequency;
    uint32_t DclkFrequency;
    uint32_t SamclkFrequency;
    uint32_t AclkFrequency;
    uint32_t EclkFrequency;
    uint16_t MvddVoltage;
    uint16_t padding16;
    uint8_t  DisplayWatermark;
    uint8_t  McArbIndex;
    uint8_t  McRegIndex;
    uint8_t  SeqIndex;
    uint8_t  SclkDid;
    int8_t   SclkIndex;
    int8_t   MclkIndex;
    uint8_t  PCIeGen;

};

typedef struct SMU73_Discrete_StateInfo SMU73_Discrete_StateInfo;

struct SMU73_Discrete_DpmTable
{
    // Multi-DPM controller settings
    SMU73_PIDController                  GraphicsPIDController;
    SMU73_PIDController                  MemoryPIDController;
    SMU73_PIDController                  LinkPIDController;

    uint32_t                            SystemFlags;

    // SMIO masks for voltage and phase controls
    uint32_t                            VRConfig;
    uint32_t                            SmioMask1;
    uint32_t                            SmioMask2;
    SMIO_Table                          SmioTable1;
    SMIO_Table                          SmioTable2;

    uint32_t                            MvddLevelCount;


    uint8_t                             BapmVddcVidHiSidd        [SMU73_MAX_LEVELS_VDDC];
    uint8_t                             BapmVddcVidLoSidd        [SMU73_MAX_LEVELS_VDDC];
    uint8_t                             BapmVddcVidHiSidd2       [SMU73_MAX_LEVELS_VDDC];

    uint8_t                             GraphicsDpmLevelCount;
    uint8_t                             MemoryDpmLevelCount;
    uint8_t                             LinkLevelCount;
    uint8_t                             MasterDeepSleepControl;

    uint8_t                             UvdLevelCount;
    uint8_t                             VceLevelCount;
    uint8_t                             AcpLevelCount;
    uint8_t                             SamuLevelCount;

    uint8_t                             ThermOutGpio;
    uint8_t                             ThermOutPolarity;
    uint8_t                             ThermOutMode;
    uint8_t                             BootPhases;
    uint32_t                            Reserved[4];

    // State table entries for each DPM state
    SMU73_Discrete_GraphicsLevel        GraphicsLevel           [SMU73_MAX_LEVELS_GRAPHICS];
    SMU73_Discrete_MemoryLevel          MemoryACPILevel;
    SMU73_Discrete_MemoryLevel          MemoryLevel             [SMU73_MAX_LEVELS_MEMORY];
    SMU73_Discrete_LinkLevel            LinkLevel               [SMU73_MAX_LEVELS_LINK];
    SMU73_Discrete_ACPILevel            ACPILevel;
    SMU73_Discrete_UvdLevel             UvdLevel                [SMU73_MAX_LEVELS_UVD];
    SMU73_Discrete_ExtClkLevel          VceLevel                [SMU73_MAX_LEVELS_VCE];
    SMU73_Discrete_ExtClkLevel          AcpLevel                [SMU73_MAX_LEVELS_ACP];
    SMU73_Discrete_ExtClkLevel          SamuLevel               [SMU73_MAX_LEVELS_SAMU];
    SMU73_Discrete_Ulv                  Ulv;

    uint32_t                            SclkStepSize;
    uint32_t                            Smio                    [SMU73_MAX_ENTRIES_SMIO];

    uint8_t                             UvdBootLevel;
    uint8_t                             VceBootLevel;
    uint8_t                             AcpBootLevel;
    uint8_t                             SamuBootLevel;

    uint8_t                             GraphicsBootLevel;
    uint8_t                             GraphicsVoltageChangeEnable;
    uint8_t                             GraphicsThermThrottleEnable;
    uint8_t                             GraphicsInterval;

    uint8_t                             VoltageInterval;
    uint8_t                             ThermalInterval;
    uint16_t                            TemperatureLimitHigh;

    uint16_t                            TemperatureLimitLow;
    uint8_t                             MemoryBootLevel;
    uint8_t                             MemoryVoltageChangeEnable;

    uint16_t                            BootMVdd;
    uint8_t                             MemoryInterval;
    uint8_t                             MemoryThermThrottleEnable;

    uint16_t                            VoltageResponseTime;
    uint16_t                            PhaseResponseTime;

    uint8_t                             PCIeBootLinkLevel;
    uint8_t                             PCIeGenInterval;
    uint8_t                             DTEInterval;
    uint8_t                             DTEMode;

    uint8_t                             SVI2Enable;
    uint8_t                             VRHotGpio;
    uint8_t                             AcDcGpio;
    uint8_t                             ThermGpio;

    uint16_t                            PPM_PkgPwrLimit;
    uint16_t                            PPM_TemperatureLimit;

    uint16_t                            DefaultTdp;
    uint16_t                            TargetTdp;

    uint16_t                            FpsHighThreshold;
    uint16_t                            FpsLowThreshold;

    uint16_t                            TemperatureLimitEdge;
    uint16_t                            TemperatureLimitHotspot;
    uint16_t                            TemperatureLimitLiquid1;
    uint16_t                            TemperatureLimitLiquid2;
    uint16_t                            TemperatureLimitVrVddc;
    uint16_t                            TemperatureLimitVrMvdd;
    uint16_t                            TemperatureLimitPlx;

    uint16_t                            FanGainEdge;
    uint16_t                            FanGainHotspot;
    uint16_t                            FanGainLiquid;
    uint16_t                            FanGainVrVddc;
    uint16_t                            FanGainVrMvdd;
    uint16_t                            FanGainPlx;
    uint16_t                            FanGainHbm;

    uint8_t                             Liquid1_I2C_address;
    uint8_t                             Liquid2_I2C_address;
    uint8_t                             Vr_I2C_address;
    uint8_t                             Plx_I2C_address;

    uint8_t                             GeminiMode;
    uint8_t                             spare17[3];
    uint32_t                            GeminiApertureHigh;
    uint32_t                            GeminiApertureLow;

    uint8_t                             Liquid_I2C_LineSCL;
    uint8_t                             Liquid_I2C_LineSDA;
    uint8_t                             Vr_I2C_LineSCL;
    uint8_t                             Vr_I2C_LineSDA;
    uint8_t                             Plx_I2C_LineSCL;
    uint8_t                             Plx_I2C_LineSDA;

    uint8_t                             spare1253[2];
    uint32_t                            spare123[2];

    uint8_t                             DTEAmbientTempBase;
    uint8_t                             DTETjOffset;
    uint8_t                             GpuTjMax;
    uint8_t                             GpuTjHyst;

    uint16_t                            BootVddc;
    uint16_t                            BootVddci;

    uint32_t                            BAPM_TEMP_GRADIENT;

    uint32_t                            LowSclkInterruptThreshold;
    uint32_t                            VddGfxReChkWait;

    uint8_t                             ClockStretcherAmount;
    uint8_t                             Sclk_CKS_masterEn0_7;
    uint8_t                             Sclk_CKS_masterEn8_15;
    uint8_t                             DPMFreezeAndForced;

    uint8_t                             Sclk_voltageOffset[8];

    SMU_ClockStretcherDataTable         ClockStretcherDataTable;
    SMU_CKS_LOOKUPTable                 CKS_LOOKUPTable;
};

typedef struct SMU73_Discrete_DpmTable SMU73_Discrete_DpmTable;


// --------------------------------------------------- Fan Table -----------------------------------------------------------
struct SMU73_Discrete_FanTable
{
    uint16_t FdoMode;
    int16_t  TempMin;
    int16_t  TempMed;
    int16_t  TempMax;
    int16_t  Slope1;
    int16_t  Slope2;
    int16_t  FdoMin;
    int16_t  HystUp;
    int16_t  HystDown;
    int16_t  HystSlope;
    int16_t  TempRespLim;
    int16_t  TempCurr;
    int16_t  SlopeCurr;
    int16_t  PwmCurr;
    uint32_t RefreshPeriod;
    int16_t  FdoMax;
    uint8_t  TempSrc;
    int8_t   Padding;
};

typedef struct SMU73_Discrete_FanTable SMU73_Discrete_FanTable;

#define SMU7_DISCRETE_GPIO_SCLK_DEBUG             4
#define SMU7_DISCRETE_GPIO_SCLK_DEBUG_BIT         (0x1 << SMU7_DISCRETE_GPIO_SCLK_DEBUG)



struct SMU7_MclkDpmScoreboard
{

    uint32_t PercentageBusy;

    int32_t  PIDError;
    int32_t  PIDIntegral;
    int32_t  PIDOutput;

    uint32_t SigmaDeltaAccum;
    uint32_t SigmaDeltaOutput;
    uint32_t SigmaDeltaLevel;

    uint32_t UtilizationSetpoint;

    uint8_t  TdpClampMode;
    uint8_t  TdcClampMode;
    uint8_t  ThermClampMode;
    uint8_t  VoltageBusy;

    int8_t   CurrLevel;
    int8_t   TargLevel;
    uint8_t  LevelChangeInProgress;
    uint8_t  UpHyst;

    uint8_t  DownHyst;
    uint8_t  VoltageDownHyst;
    uint8_t  DpmEnable;
    uint8_t  DpmRunning;

    uint8_t  DpmForce;
    uint8_t  DpmForceLevel;
    uint8_t  DisplayWatermark;
    uint8_t  McArbIndex;

    uint32_t MinimumPerfMclk;

    uint8_t  AcpiReq;
    uint8_t  AcpiAck;
    uint8_t  MclkSwitchInProgress;
    uint8_t  MclkSwitchCritical;

    uint8_t  IgnoreVBlank;
    uint8_t  TargetMclkIndex;
    uint8_t  TargetMvddIndex;
    uint8_t  MclkSwitchResult;

    uint16_t VbiFailureCount;
    uint8_t  VbiWaitCounter;
    uint8_t  EnabledLevelsChange;

    uint16_t LevelResidencyCounters [SMU73_MAX_LEVELS_MEMORY];
    uint16_t LevelSwitchCounters [SMU73_MAX_LEVELS_MEMORY];

    void     (*TargetStateCalculator)(uint8_t);
    void     (*SavedTargetStateCalculator)(uint8_t);

    uint16_t AutoDpmInterval;
    uint16_t AutoDpmRange;

    uint16_t VbiTimeoutCount;
    uint16_t MclkSwitchingTime;

    uint8_t  fastSwitch;
    uint8_t  Save_PIC_VDDGFX_EXIT;
    uint8_t  Save_PIC_VDDGFX_ENTER;
    uint8_t  padding;

};

typedef struct SMU7_MclkDpmScoreboard SMU7_MclkDpmScoreboard;

struct SMU7_UlvScoreboard
{
    uint8_t     EnterUlv;
    uint8_t     ExitUlv;
    uint8_t     UlvActive;
    uint8_t     WaitingForUlv;
    uint8_t     UlvEnable;
    uint8_t     UlvRunning;
    uint8_t     UlvMasterEnable;
    uint8_t     padding;
    uint32_t    UlvAbortedCount;
    uint32_t    UlvTimeStamp;
};

typedef struct SMU7_UlvScoreboard SMU7_UlvScoreboard;

struct VddgfxSavedRegisters
{
  uint32_t GPU_DBG[3];
  uint32_t MEC_BaseAddress_Hi;
  uint32_t MEC_BaseAddress_Lo;
  uint32_t THM_TMON0_CTRL2__RDIR_PRESENT;
  uint32_t THM_TMON1_CTRL2__RDIR_PRESENT;
  uint32_t CP_INT_CNTL;
};

typedef struct VddgfxSavedRegisters VddgfxSavedRegisters;

struct SMU7_VddGfxScoreboard
{
    uint8_t     VddGfxEnable;
    uint8_t     VddGfxActive;
    uint8_t     VPUResetOccured;
    uint8_t     padding;

    uint32_t    VddGfxEnteredCount;
    uint32_t    VddGfxAbortedCount;

    uint32_t    VddGfxVid;

    VddgfxSavedRegisters SavedRegisters;
};

typedef struct SMU7_VddGfxScoreboard SMU7_VddGfxScoreboard;

struct SMU7_TdcLimitScoreboard {
  uint8_t  Enable;
  uint8_t  Running;
  uint16_t Alpha;
  uint32_t FilteredIddc;
  uint32_t IddcLimit;
  uint32_t IddcHyst;
  SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_TdcLimitScoreboard SMU7_TdcLimitScoreboard;

struct SMU7_PkgPwrLimitScoreboard {
  uint8_t  Enable;
  uint8_t  Running;
  uint16_t Alpha;
  uint32_t FilteredPkgPwr;
  uint32_t Limit;
  uint32_t Hyst;
  uint32_t LimitFromDriver;
  SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_PkgPwrLimitScoreboard SMU7_PkgPwrLimitScoreboard;

struct SMU7_BapmScoreboard {
  uint32_t source_powers[SMU73_DTE_SOURCES];
  uint32_t source_powers_last[SMU73_DTE_SOURCES];
  int32_t entity_temperatures[SMU73_NUM_GPU_TES];
  int32_t initial_entity_temperatures[SMU73_NUM_GPU_TES];
  int32_t Limit;
  int32_t Hyst;
  int32_t therm_influence_coeff_table[SMU73_DTE_ITERATIONS * SMU73_DTE_SOURCES * SMU73_DTE_SINKS * 2];
  int32_t therm_node_table[SMU73_DTE_ITERATIONS * SMU73_DTE_SOURCES * SMU73_DTE_SINKS];
  uint16_t ConfigTDPPowerScalar;
  uint16_t FanSpeedPowerScalar;
  uint16_t OverDrivePowerScalar;
  uint16_t OverDriveLimitScalar;
  uint16_t FinalPowerScalar;
  uint8_t VariantID;
  uint8_t spare997;

  SMU7_HystController_Data HystControllerData;

  int32_t temperature_gradient_slope;
  int32_t temperature_gradient;
  uint32_t measured_temperature;
};


typedef struct SMU7_BapmScoreboard SMU7_BapmScoreboard;

struct SMU7_AcpiScoreboard {
  uint32_t SavedInterruptMask[2];
  uint8_t LastACPIRequest;
  uint8_t CgBifResp;
  uint8_t RequestType;
  uint8_t Padding;
  SMU73_Discrete_ACPILevel D0Level;
};

typedef struct SMU7_AcpiScoreboard SMU7_AcpiScoreboard;

struct SMU_QuadraticCoeffs {
  int32_t m1;
  uint32_t b;

  int16_t m2;
  uint8_t m1_shift;
  uint8_t m2_shift;
};

typedef struct SMU_QuadraticCoeffs SMU_QuadraticCoeffs;

struct SMU73_Discrete_PmFuses {
  /* dw0-dw1 */
  uint8_t BapmVddCVidHiSidd[8];

  /* dw2-dw3 */
  uint8_t BapmVddCVidLoSidd[8];

  /* dw4-dw5 */
  uint8_t VddCVid[8];

  /* dw1*/
  uint8_t SviLoadLineEn;
  uint8_t SviLoadLineVddC;
  uint8_t SviLoadLineTrimVddC;
  uint8_t SviLoadLineOffsetVddC;

  /* dw2 */
  uint16_t TDC_VDDC_PkgLimit;
  uint8_t TDC_VDDC_ThrottleReleaseLimitPerc;
  uint8_t TDC_MAWt;

  /* dw3 */
  uint8_t TdcWaterfallCtl;
  uint8_t LPMLTemperatureMin;
  uint8_t LPMLTemperatureMax;
  uint8_t Reserved;

  /* dw4-dw7 */
  uint8_t LPMLTemperatureScaler[16];

  /* dw8-dw9 */
  int16_t FuzzyFan_ErrorSetDelta;
  int16_t FuzzyFan_ErrorRateSetDelta;
  int16_t FuzzyFan_PwmSetDelta;
  uint16_t Reserved6;

  /* dw10-dw14 */
  uint8_t GnbLPML[16];

  /* dw15 */
  uint8_t GnbLPMLMaxVid;
  uint8_t GnbLPMLMinVid;
  uint8_t Reserved1[2];

  /* dw16 */
  uint16_t BapmVddCBaseLeakageHiSidd;
  uint16_t BapmVddCBaseLeakageLoSidd;

  /* AVFS */
  uint16_t  VFT_Temp[3];
  uint16_t  padding;

  SMU_QuadraticCoeffs VFT_ATE[3];

  SMU_QuadraticCoeffs AVFS_GB;
  SMU_QuadraticCoeffs ATE_ACBTC_GB;

  SMU_QuadraticCoeffs P2V;

  uint32_t PsmCharzFreq;

  uint16_t InversionVoltage;
  uint16_t PsmCharzTemp;

  uint32_t EnabledAvfsModules;
};

typedef struct SMU73_Discrete_PmFuses SMU73_Discrete_PmFuses;

struct SMU7_Discrete_Log_Header_Table {
  uint32_t    version;
  uint32_t    asic_id;
  uint16_t    flags;
  uint16_t    entry_size;
  uint32_t    total_size;
  uint32_t    num_of_entries;
  uint8_t     type;
  uint8_t     mode;
  uint8_t     filler_0[2];
  uint32_t    filler_1[2];
};

typedef struct SMU7_Discrete_Log_Header_Table SMU7_Discrete_Log_Header_Table;

struct SMU7_Discrete_Log_Cntl {
    uint8_t             Enabled;
    uint8_t             Type;
    uint8_t             padding[2];
    uint32_t            BufferSize;
    uint32_t            SamplesLogged;
    uint32_t            SampleSize;
    uint32_t            AddrL;
    uint32_t            AddrH;
};

typedef struct SMU7_Discrete_Log_Cntl SMU7_Discrete_Log_Cntl;

#define CAC_ACC_NW_NUM_OF_SIGNALS 87

struct SMU7_Discrete_Cac_Collection_Table {
  uint32_t temperature;
  uint32_t cac_acc_nw[CAC_ACC_NW_NUM_OF_SIGNALS];
};

typedef struct SMU7_Discrete_Cac_Collection_Table SMU7_Discrete_Cac_Collection_Table;

struct SMU7_Discrete_Cac_Verification_Table {
  uint32_t VddcTotalPower;
  uint32_t VddcLeakagePower;
  uint32_t VddcConstantPower;
  uint32_t VddcGfxDynamicPower;
  uint32_t VddcUvdDynamicPower;
  uint32_t VddcVceDynamicPower;
  uint32_t VddcAcpDynamicPower;
  uint32_t VddcPcieDynamicPower;
  uint32_t VddcDceDynamicPower;
  uint32_t VddcCurrent;
  uint32_t VddcVoltage;
  uint32_t VddciTotalPower;
  uint32_t VddciLeakagePower;
  uint32_t VddciConstantPower;
  uint32_t VddciDynamicPower;
  uint32_t Vddr1TotalPower;
  uint32_t Vddr1LeakagePower;
  uint32_t Vddr1ConstantPower;
  uint32_t Vddr1DynamicPower;
  uint32_t spare[4];
  uint32_t temperature;
};

typedef struct SMU7_Discrete_Cac_Verification_Table SMU7_Discrete_Cac_Verification_Table;

struct SMU7_Discrete_Pm_Status_Table {
  //Thermal entities
  int32_t  T_meas_max[SMU73_THERMAL_INPUT_LOOP_COUNT];
  int32_t  T_meas_acc[SMU73_THERMAL_INPUT_LOOP_COUNT];
  int32_t  T_meas_acc_cnt[SMU73_THERMAL_INPUT_LOOP_COUNT];
  uint32_t T_hbm_acc;

  //Voltage domains
  uint32_t I_calc_max;
  uint32_t I_calc_acc;
  uint32_t P_meas_acc;
  uint32_t V_meas_load_acc;
  uint32_t I_meas_acc;
  uint32_t P_meas_acc_vddci;
  uint32_t V_meas_load_acc_vddci;
  uint32_t I_meas_acc_vddci;

  //Frequency
  uint16_t Sclk_dpm_residency[8];
  uint16_t Uvd_dpm_residency[8];
  uint16_t Vce_dpm_residency[8];

  //Chip
  uint32_t P_roc_acc;
  uint32_t PkgPwr_max;
  uint32_t PkgPwr_acc;
  uint32_t MclkSwitchingTime_max;
  uint32_t MclkSwitchingTime_acc;
  uint32_t FanPwm_acc;
  uint32_t FanRpm_acc;
  uint32_t Gfx_busy_acc;
  uint32_t Mc_busy_acc;
  uint32_t Fps_acc;

  uint32_t AccCnt;
};

typedef struct SMU7_Discrete_Pm_Status_Table SMU7_Discrete_Pm_Status_Table;

//FIXME THESE NEED TO BE UPDATED
#define SMU7_SCLK_CAC 0x561
#define SMU7_MCLK_CAC 0xF9
#define SMU7_VCLK_CAC 0x2DE
#define SMU7_DCLK_CAC 0x2DE
#define SMU7_ECLK_CAC 0x25E
#define SMU7_ACLK_CAC 0x25E
#define SMU7_SAMCLK_CAC 0x25E
#define SMU7_DISPCLK_CAC 0x100
#define SMU7_CAC_CONSTANT 0x2EE3430
#define SMU7_CAC_CONSTANT_SHIFT 18

#define SMU7_VDDCI_MCLK_CONST        1765
#define SMU7_VDDCI_MCLK_CONST_SHIFT  16
#define SMU7_VDDCI_VDDCI_CONST       50958
#define SMU7_VDDCI_VDDCI_CONST_SHIFT 14
#define SMU7_VDDCI_CONST             11781
#define SMU7_VDDCI_STROBE_PWR        1331

#define SMU7_VDDR1_CONST            693
#define SMU7_VDDR1_CAC_WEIGHT       20
#define SMU7_VDDR1_CAC_WEIGHT_SHIFT 19
#define SMU7_VDDR1_STROBE_PWR       512

#define SMU7_AREA_COEFF_UVD 0xA78
#define SMU7_AREA_COEFF_VCE 0x190A
#define SMU7_AREA_COEFF_ACP 0x22D1
#define SMU7_AREA_COEFF_SAMU 0x534

//ThermOutMode values
#define SMU7_THERM_OUT_MODE_DISABLE       0x0
#define SMU7_THERM_OUT_MODE_THERM_ONLY    0x1
#define SMU7_THERM_OUT_MODE_THERM_VRHOT   0x2

#pragma pack(pop)

#endif

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _SMU73_H_
#define _SMU73_H_

#pragma pack(push, 1)
enum SID_OPTION {
  SID_OPTION_HI,
  SID_OPTION_LO,
  SID_OPTION_COUNT
};

enum Poly3rdOrderCoeff {
    LEAKAGE_TEMPERATURE_SCALAR,
    LEAKAGE_VOLTAGE_SCALAR,
    DYNAMIC_VOLTAGE_SCALAR,
    POLY_3RD_ORDER_COUNT
};

struct SMU7_Poly3rdOrder_Data
{
    int32_t a;
    int32_t b;
    int32_t c;
    int32_t d;
    uint8_t a_shift;
    uint8_t b_shift;
    uint8_t c_shift;
    uint8_t x_shift;
};

typedef struct SMU7_Poly3rdOrder_Data SMU7_Poly3rdOrder_Data;

struct Power_Calculator_Data
{
  uint16_t NoLoadVoltage;
  uint16_t LoadVoltage;
  uint16_t Resistance;
  uint16_t Temperature;
  uint16_t BaseLeakage;
  uint16_t LkgTempScalar;
  uint16_t LkgVoltScalar;
  uint16_t LkgAreaScalar;
  uint16_t LkgPower;
  uint16_t DynVoltScalar;
  uint32_t Cac;
  uint32_t DynPower;
  uint32_t TotalCurrent;
  uint32_t TotalPower;
};

typedef struct Power_Calculator_Data PowerCalculatorData_t;

struct Gc_Cac_Weight_Data
{
  uint8_t index;
  uint32_t value;
};

typedef struct Gc_Cac_Weight_Data GcCacWeight_Data;


typedef struct {
  uint32_t high;
  uint32_t low;
} data_64_t;

typedef struct {
  data_64_t high;
  data_64_t low;
} data_128_t;

#define SMU__NUM_SCLK_DPM_STATE  8
#define SMU__NUM_MCLK_DPM_LEVELS 4
#define SMU__NUM_LCLK_DPM_LEVELS 8
#define SMU__NUM_PCIE_DPM_LEVELS 8

#define SMU7_CONTEXT_ID_SMC        1
#define SMU7_CONTEXT_ID_VBIOS      2

#define SMU73_MAX_LEVELS_VDDC            16
#define SMU73_MAX_LEVELS_VDDGFX          16
#define SMU73_MAX_LEVELS_VDDCI           8
#define SMU73_MAX_LEVELS_MVDD            4

#define SMU_MAX_SMIO_LEVELS              4

#define SMU73_MAX_LEVELS_GRAPHICS        SMU__NUM_SCLK_DPM_STATE   // SCLK + SQ DPM + ULV
#define SMU73_MAX_LEVELS_MEMORY          SMU__NUM_MCLK_DPM_LEVELS   // MCLK Levels DPM
#define SMU73_MAX_LEVELS_GIO             SMU__NUM_LCLK_DPM_LEVELS  // LCLK Levels
#define SMU73_MAX_LEVELS_LINK            SMU__NUM_PCIE_DPM_LEVELS  // PCIe speed and number of lanes.
#define SMU73_MAX_LEVELS_UVD             8   // VCLK/DCLK levels for UVD.
#define SMU73_MAX_LEVELS_VCE             8   // ECLK levels for VCE.
#define SMU73_MAX_LEVELS_ACP             8   // ACLK levels for ACP.
#define SMU73_MAX_LEVELS_SAMU            8   // SAMCLK levels for SAMU.
#define SMU73_MAX_ENTRIES_SMIO           32  // Number of entries in SMIO table.

#define DPM_NO_LIMIT 0
#define DPM_NO_UP 1
#define DPM_GO_DOWN 2
#define DPM_GO_UP 3

#define SMU7_FIRST_DPM_GRAPHICS_LEVEL    0
#define SMU7_FIRST_DPM_MEMORY_LEVEL      0

#define GPIO_CLAMP_MODE_VRHOT      1
#define GPIO_CLAMP_MODE_THERM      2
#define GPIO_CLAMP_MODE_DC         4

#define SCRATCH_B_TARG_PCIE_INDEX_SHIFT 0
#define SCRATCH_B_TARG_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_TARG_PCIE_INDEX_SHIFT)
#define SCRATCH_B_CURR_PCIE_INDEX_SHIFT 3
#define SCRATCH_B_CURR_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_CURR_PCIE_INDEX_SHIFT)
#define SCRATCH_B_TARG_UVD_INDEX_SHIFT  6
#define SCRATCH_B_TARG_UVD_INDEX_MASK   (0x7<<SCRATCH_B_TARG_UVD_INDEX_SHIFT)
#define SCRATCH_B_CURR_UVD_INDEX_SHIFT  9
#define SCRATCH_B_CURR_UVD_INDEX_MASK   (0x7<<SCRATCH_B_CURR_UVD_INDEX_SHIFT)
#define SCRATCH_B_TARG_VCE_INDEX_SHIFT  12
#define SCRATCH_B_TARG_VCE_INDEX_MASK   (0x7<<SCRATCH_B_TARG_VCE_INDEX_SHIFT)
#define SCRATCH_B_CURR_VCE_INDEX_SHIFT  15
#define SCRATCH_B_CURR_VCE_INDEX_MASK   (0x7<<SCRATCH_B_CURR_VCE_INDEX_SHIFT)
#define SCRATCH_B_TARG_ACP_INDEX_SHIFT  18
#define SCRATCH_B_TARG_ACP_INDEX_MASK   (0x7<<SCRATCH_B_TARG_ACP_INDEX_SHIFT)
#define SCRATCH_B_CURR_ACP_INDEX_SHIFT  21
#define SCRATCH_B_CURR_ACP_INDEX_MASK   (0x7<<SCRATCH_B_CURR_ACP_INDEX_SHIFT)
#define SCRATCH_B_TARG_SAMU_INDEX_SHIFT 24
#define SCRATCH_B_TARG_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_TARG_SAMU_INDEX_SHIFT)
#define SCRATCH_B_CURR_SAMU_INDEX_SHIFT 27
#define SCRATCH_B_CURR_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_CURR_SAMU_INDEX_SHIFT)

// Virtualization Defines
#define CG_XDMA_MASK  0x1
#define CG_XDMA_SHIFT 0
#define CG_UVD_MASK   0x2
#define CG_UVD_SHIFT  1
#define CG_VCE_MASK   0x4
#define CG_VCE_SHIFT  2
#define CG_SAMU_MASK  0x8
#define CG_SAMU_SHIFT 3
#define CG_GFX_MASK   0x10
#define CG_GFX_SHIFT  4
#define CG_SDMA_MASK  0x20
#define CG_SDMA_SHIFT 5
#define CG_HDP_MASK   0x40
#define CG_HDP_SHIFT  6
#define CG_MC_MASK    0x80
#define CG_MC_SHIFT   7
#define CG_DRM_MASK   0x100
#define CG_DRM_SHIFT  8
#define CG_ROM_MASK   0x200
#define CG_ROM_SHIFT  9
#define CG_BIF_MASK   0x400
#define CG_BIF_SHIFT  10

#define SMU73_DTE_ITERATIONS 5
#define SMU73_DTE_SOURCES 3
#define SMU73_DTE_SINKS 1
#define SMU73_NUM_CPU_TES 0
#define SMU73_NUM_GPU_TES 1
#define SMU73_NUM_NON_TES 2
#define SMU73_DTE_FAN_SCALAR_MIN 0x100
#define SMU73_DTE_FAN_SCALAR_MAX 0x166
#define SMU73_DTE_FAN_TEMP_MAX 93
#define SMU73_DTE_FAN_TEMP_MIN 83

#define SMU73_THERMAL_INPUT_LOOP_COUNT 6
#define SMU73_THERMAL_CLAMP_MODE_COUNT 8


struct SMU7_HystController_Data
{
    uint16_t waterfall_up;
    uint16_t waterfall_down;
    uint16_t waterfall_limit;
    uint16_t release_cnt;
    uint16_t release_limit;
    uint16_t spare;
};

typedef struct SMU7_HystController_Data SMU7_HystController_Data;

struct SMU73_PIDController
{
    uint32_t Ki;
    int32_t LFWindupUpperLim;
    int32_t LFWindupLowerLim;
    uint32_t StatePrecision;

    uint32_t LfPrecision;
    uint32_t LfOffset;
    uint32_t MaxState;
    uint32_t MaxLfFraction;
    uint32_t StateShift;
};

typedef struct SMU73_PIDController SMU73_PIDController;

struct SMU7_LocalDpmScoreboard
{
    uint32_t PercentageBusy;

    int32_t  PIDError;
    int32_t  PIDIntegral;
    int32_t  PIDOutput;

    uint32_t SigmaDeltaAccum;
    uint32_t SigmaDeltaOutput;
    uint32_t SigmaDeltaLevel;

    uint32_t UtilizationSetpoint;

    uint8_t  TdpClampMode;
    uint8_t  TdcClampMode;
    uint8_t  ThermClampMode;
    uint8_t  VoltageBusy;

    int8_t   CurrLevel;
    int8_t   TargLevel;
    uint8_t  LevelChangeInProgress;
    uint8_t  UpHyst;

    uint8_t  DownHyst;
    uint8_t  VoltageDownHyst;
    uint8_t  DpmEnable;
    uint8_t  DpmRunning;

    uint8_t  DpmForce;
    uint8_t  DpmForceLevel;
    uint8_t  DisplayWatermark;
    uint8_t  McArbIndex;

    uint32_t MinimumPerfSclk;

    uint8_t  AcpiReq;
    uint8_t  AcpiAck;
    uint8_t  GfxClkSlow;
    uint8_t  GpioClampMode;

    uint8_t  spare2;
    uint8_t  EnabledLevelsChange;
    uint8_t  DteClampMode;
    uint8_t  FpsClampMode;

    uint16_t LevelResidencyCounters [SMU73_MAX_LEVELS_GRAPHICS];
    uint16_t LevelSwitchCounters [SMU73_MAX_LEVELS_GRAPHICS];

    void     (*TargetStateCalculator)(uint8_t);
    void     (*SavedTargetStateCalculator)(uint8_t);

    uint16_t AutoDpmInterval;
    uint16_t AutoDpmRange;

    uint8_t  FpsEnabled;
    uint8_t  MaxPerfLevel;
    uint8_t  AllowLowClkInterruptToHost;
    uint8_t  FpsRunning;

    uint32_t MaxAllowedFrequency;

    uint32_t FilteredSclkFrequency;
    uint32_t LastSclkFrequency;
    uint32_t FilteredSclkFrequencyCnt;

    uint8_t  LedEnable;
    uint8_t  LedPin0;
    uint8_t  LedPin1;
    uint8_t  LedPin2;
    uint32_t LedAndMask;

    uint16_t FpsAlpha;
    uint16_t DeltaTime;
    uint32_t CurrentFps;
    uint32_t FilteredFps;
    uint32_t FrameCount;
    uint32_t FrameCountLast;
    uint16_t FpsTargetScalar;
    uint16_t FpsWaterfallLimitScalar;
    uint16_t FpsAlphaScalar;
    uint16_t spare8;
    SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_LocalDpmScoreboard SMU7_LocalDpmScoreboard;

#define SMU7_MAX_VOLTAGE_CLIENTS 12

typedef uint8_t (*VoltageChangeHandler_t)(uint16_t, uint8_t);

#define VDDC_MASK    0x00007FFF
#define VDDC_SHIFT   0
#define VDDCI_MASK   0x3FFF8000
#define VDDCI_SHIFT  15
#define PHASES_MASK  0xC0000000
#define PHASES_SHIFT 30

typedef uint32_t SMU_VoltageLevel;

struct SMU7_VoltageScoreboard
{
    SMU_VoltageLevel TargetVoltage;
    uint16_t MaxVid;
    uint8_t  HighestVidOffset;
    uint8_t  CurrentVidOffset;

    uint16_t CurrentVddc;
    uint16_t CurrentVddci;


    uint8_t  ControllerBusy;
    uint8_t  CurrentVid;
    uint8_t  CurrentVddciVid;
    uint8_t  padding;

    SMU_VoltageLevel RequestedVoltage[SMU7_MAX_VOLTAGE_CLIENTS];
    SMU_VoltageLevel TargetVoltageState;
    uint8_t  EnabledRequest[SMU7_MAX_VOLTAGE_CLIENTS];

    uint8_t  padding2;
    uint8_t  padding3;
    uint8_t  ControllerEnable;
    uint8_t  ControllerRunning;
    uint16_t CurrentStdVoltageHiSidd;
    uint16_t CurrentStdVoltageLoSidd;
    uint8_t  OverrideVoltage;
    uint8_t  padding4;
    uint8_t  padding5;
    uint8_t  CurrentPhases;

    VoltageChangeHandler_t ChangeVddc;

    VoltageChangeHandler_t ChangeVddci;
    VoltageChangeHandler_t ChangePhase;
    VoltageChangeHandler_t ChangeMvdd;

    VoltageChangeHandler_t functionLinks[6];

    uint16_t * VddcFollower1;

    int16_t  Driver_OD_RequestedVidOffset1;
    int16_t  Driver_OD_RequestedVidOffset2;

};

typedef struct SMU7_VoltageScoreboard SMU7_VoltageScoreboard;

// -------------------------------------------------------------------------------------------------------------------------
#define SMU7_MAX_PCIE_LINK_SPEEDS 3 /* 0:Gen1 1:Gen2 2:Gen3 */

struct SMU7_PCIeLinkSpeedScoreboard
{
    uint8_t     DpmEnable;
    uint8_t     DpmRunning;
    uint8_t     DpmForce;
    uint8_t     DpmForceLevel;

    uint8_t     CurrentLinkSpeed;
    uint8_t     EnabledLevelsChange;
    uint16_t    AutoDpmInterval;

    uint16_t    AutoDpmRange;
    uint16_t    AutoDpmCount;

    uint8_t     DpmMode;
    uint8_t     AcpiReq;
    uint8_t     AcpiAck;
    uint8_t     CurrentLinkLevel;

};

typedef struct SMU7_PCIeLinkSpeedScoreboard SMU7_PCIeLinkSpeedScoreboard;

// -------------------------------------------------------- CAC table ------------------------------------------------------
#define SMU7_LKGE_LUT_NUM_OF_TEMP_ENTRIES 16
#define SMU7_LKGE_LUT_NUM_OF_VOLT_ENTRIES 16

#define SMU7_SCALE_I  7
#define SMU7_SCALE_R 12

struct SMU7_PowerScoreboard
{
    uint32_t GpuPower;

    uint32_t VddcPower;
    uint32_t VddcVoltage;
    uint32_t VddcCurrent;

    uint32_t MvddPower;
    uint32_t MvddVoltage;
    uint32_t MvddCurrent;

    uint32_t RocPower;

    uint16_t Telemetry_1_slope;
    uint16_t Telemetry_2_slope;
    int32_t  Telemetry_1_offset;
    int32_t  Telemetry_2_offset;
};
typedef struct SMU7_PowerScoreboard SMU7_PowerScoreboard;

// For FeatureEnables:
#define SMU7_SCLK_DPM_CONFIG_MASK                        0x01
#define SMU7_VOLTAGE_CONTROLLER_CONFIG_MASK              0x02
#define SMU7_THERMAL_CONTROLLER_CONFIG_MASK              0x04
#define SMU7_MCLK_DPM_CONFIG_MASK                        0x08
#define SMU7_UVD_DPM_CONFIG_MASK                         0x10
#define SMU7_VCE_DPM_CONFIG_MASK                         0x20
#define SMU7_ACP_DPM_CONFIG_MASK                         0x40
#define SMU7_SAMU_DPM_CONFIG_MASK                        0x80
#define SMU7_PCIEGEN_DPM_CONFIG_MASK                    0x100

#define SMU7_ACP_MCLK_HANDSHAKE_DISABLE                  0x00000001
#define SMU7_ACP_SCLK_HANDSHAKE_DISABLE                  0x00000002
#define SMU7_UVD_MCLK_HANDSHAKE_DISABLE                  0x00000100
#define SMU7_UVD_SCLK_HANDSHAKE_DISABLE                  0x00000200
#define SMU7_VCE_MCLK_HANDSHAKE_DISABLE                  0x00010000
#define SMU7_VCE_SCLK_HANDSHAKE_DISABLE                  0x00020000

// All 'soft registers' should be uint32_t.
struct SMU73_SoftRegisters
{
    uint32_t        RefClockFrequency;
    uint32_t        PmTimerPeriod;
    uint32_t        FeatureEnables;

    uint32_t        PreVBlankGap;
    uint32_t        VBlankTimeout;
    uint32_t        TrainTimeGap;

    uint32_t        MvddSwitchTime;
    uint32_t        LongestAcpiTrainTime;
    uint32_t        AcpiDelay;
    uint32_t        G5TrainTime;
    uint32_t        DelayMpllPwron;
    uint32_t        VoltageChangeTimeout;

    uint32_t        HandshakeDisables;

    uint8_t         DisplayPhy1Config;
    uint8_t         DisplayPhy2Config;
    uint8_t         DisplayPhy3Config;
    uint8_t         DisplayPhy4Config;

    uint8_t         DisplayPhy5Config;
    uint8_t         DisplayPhy6Config;
    uint8_t         DisplayPhy7Config;
    uint8_t         DisplayPhy8Config;

    uint32_t        AverageGraphicsActivity;
    uint32_t        AverageMemoryActivity;
    uint32_t        AverageGioActivity;

    uint8_t         SClkDpmEnabledLevels;
    uint8_t         MClkDpmEnabledLevels;
    uint8_t         LClkDpmEnabledLevels;
    uint8_t         PCIeDpmEnabledLevels;

    uint8_t         UVDDpmEnabledLevels;
    uint8_t         SAMUDpmEnabledLevels;
    uint8_t         ACPDpmEnabledLevels;
    uint8_t         VCEDpmEnabledLevels;

    uint32_t        DRAM_LOG_ADDR_H;
    uint32_t        DRAM_LOG_ADDR_L;
    uint32_t        DRAM_LOG_PHY_ADDR_H;
    uint32_t        DRAM_LOG_PHY_ADDR_L;
    uint32_t        DRAM_LOG_BUFF_SIZE;
    uint32_t        UlvEnterCount;
    uint32_t        UlvTime;
    uint32_t        UcodeLoadStatus;
    uint32_t        Reserved[2];

};

typedef struct SMU73_SoftRegisters SMU73_SoftRegisters;

struct SMU73_Firmware_Header
{
    uint32_t Digest[5];
    uint32_t Version;
    uint32_t HeaderSize;
    uint32_t Flags;
    uint32_t EntryPoint;
    uint32_t CodeSize;
    uint32_t ImageSize;

    uint32_t Rtos;
    uint32_t SoftRegisters;
    uint32_t DpmTable;
    uint32_t FanTable;
    uint32_t CacConfigTable;
    uint32_t CacStatusTable;


    uint32_t mcRegisterTable;


    uint32_t mcArbDramTimingTable;




    uint32_t PmFuseTable;
    uint32_t Globals;
    uint32_t ClockStretcherTable;
    uint32_t Reserved[41];
    uint32_t Signature;
};

typedef struct SMU73_Firmware_Header SMU73_Firmware_Header;

#define SMU7_FIRMWARE_HEADER_LOCATION 0x20000

enum  DisplayConfig {
    PowerDown = 1,
    DP54x4,
    DP54x2,
    DP54x1,
    DP27x4,
    DP27x2,
    DP27x1,
    HDMI297,
    HDMI162,
    LVDS,
    DP324x4,
    DP324x2,
    DP324x1
};


#define MC_BLOCK_COUNT 1
#define CPL_BLOCK_COUNT 5
#define SE_BLOCK_COUNT 15
#define GC_BLOCK_COUNT 24

struct SMU7_Local_Cac {
  uint8_t BlockId;
  uint8_t SignalId;
  uint8_t Threshold;
  uint8_t Padding;
};

typedef struct SMU7_Local_Cac SMU7_Local_Cac;

struct SMU7_Local_Cac_Table {

  SMU7_Local_Cac CplLocalCac[CPL_BLOCK_COUNT];
  SMU7_Local_Cac McLocalCac[MC_BLOCK_COUNT];
  SMU7_Local_Cac SeLocalCac[SE_BLOCK_COUNT];
  SMU7_Local_Cac GcLocalCac[GC_BLOCK_COUNT];
};

typedef struct SMU7_Local_Cac_Table SMU7_Local_Cac_Table;

#if !defined(SMC_MICROCODE)
#pragma pack(pop)
#endif

// Description of Clock Gating bitmask for Tonga:
// System Clock Gating
#define CG_SYS_BITMASK_FIRST_BIT      0  // First bit of Sys CG bitmask
#define CG_SYS_BITMASK_LAST_BIT       9  // Last bit of Sys CG bitmask
#define CG_SYS_BIF_MGLS_SHIFT         0
#define CG_SYS_ROM_SHIFT              1
#define CG_SYS_MC_MGCG_SHIFT          2
#define CG_SYS_MC_MGLS_SHIFT          3
#define CG_SYS_SDMA_MGCG_SHIFT        4
#define CG_SYS_SDMA_MGLS_SHIFT        5
#define CG_SYS_DRM_MGCG_SHIFT         6
#define CG_SYS_HDP_MGCG_SHIFT         7
#define CG_SYS_HDP_MGLS_SHIFT         8
#define CG_SYS_DRM_MGLS_SHIFT         9

#define CG_SYS_BIF_MGLS_MASK          0x1
#define CG_SYS_ROM_MASK               0x2
#define CG_SYS_MC_MGCG_MASK           0x4
#define CG_SYS_MC_MGLS_MASK           0x8
#define CG_SYS_SDMA_MGCG_MASK         0x10
#define CG_SYS_SDMA_MGLS_MASK         0x20
#define CG_SYS_DRM_MGCG_MASK          0x40
#define CG_SYS_HDP_MGCG_MASK          0x80
#define CG_SYS_HDP_MGLS_MASK          0x100
#define CG_SYS_DRM_MGLS_MASK          0x200

// Graphics Clock Gating
#define CG_GFX_BITMASK_FIRST_BIT      16 // First bit of Gfx CG bitmask
#define CG_GFX_BITMASK_LAST_BIT       20 // Last bit of Gfx CG bitmask
#define CG_GFX_CGCG_SHIFT             16
#define CG_GFX_CGLS_SHIFT             17
#define CG_CPF_MGCG_SHIFT             18
#define CG_RLC_MGCG_SHIFT             19
#define CG_GFX_OTHERS_MGCG_SHIFT      20

#define CG_GFX_CGCG_MASK              0x00010000
#define CG_GFX_CGLS_MASK              0x00020000
#define CG_CPF_MGCG_MASK              0x00040000
#define CG_RLC_MGCG_MASK              0x00080000
#define CG_GFX_OTHERS_MGCG_MASK       0x00100000



// Voltage Regulator Configuration
// VR Config info is contained in dpmTable.VRConfig

#define VRCONF_VDDC_MASK         0x000000FF
#define VRCONF_VDDC_SHIFT        0
#define VRCONF_VDDGFX_MASK       0x0000FF00
#define VRCONF_VDDGFX_SHIFT      8
#define VRCONF_VDDCI_MASK        0x00FF0000
#define VRCONF_VDDCI_SHIFT       16
#define VRCONF_MVDD_MASK         0xFF000000
#define VRCONF_MVDD_SHIFT        24

#define VR_MERGED_WITH_VDDC      0
#define VR_SVI2_PLANE_1          1
#define VR_SVI2_PLANE_2          2
#define VR_SMIO_PATTERN_1        3
#define VR_SMIO_PATTERN_2        4
#define VR_STATIC_VOLTAGE        5

// Clock Stretcher Configuration

#define CLOCK_STRETCHER_MAX_ENTRIES 0x4
#define CKS_LOOKUPTable_MAX_ENTRIES 0x4

// The 'settings' field is subdivided in the following way:
#define CLOCK_STRETCHER_SETTING_DDT_MASK             0x01
#define CLOCK_STRETCHER_SETTING_DDT_SHIFT            0x0
#define CLOCK_STRETCHER_SETTING_STRETCH_AMOUNT_MASK  0x1E
#define CLOCK_STRETCHER_SETTING_STRETCH_AMOUNT_SHIFT 0x1
#define CLOCK_STRETCHER_SETTING_ENABLE_MASK          0x80
#define CLOCK_STRETCHER_SETTING_ENABLE_SHIFT         0x7

struct SMU_ClockStretcherDataTableEntry {
  uint8_t minVID;
  uint8_t maxVID;


  uint16_t setting;
};
typedef struct SMU_ClockStretcherDataTableEntry SMU_ClockStretcherDataTableEntry;

struct SMU_ClockStretcherDataTable {
  SMU_ClockStretcherDataTableEntry ClockStretcherDataTableEntry[CLOCK_STRETCHER_MAX_ENTRIES];
};
typedef struct SMU_ClockStretcherDataTable SMU_ClockStretcherDataTable;

struct SMU_CKS_LOOKUPTableEntry {
  uint16_t minFreq;
  uint16_t maxFreq;

  uint8_t setting;
  uint8_t padding[3];
};
typedef struct SMU_CKS_LOOKUPTableEntry SMU_CKS_LOOKUPTableEntry;

struct SMU_CKS_LOOKUPTable {
  SMU_CKS_LOOKUPTableEntry CKS_LOOKUPTableEntry[CKS_LOOKUPTable_MAX_ENTRIES];
};
typedef struct SMU_CKS_LOOKUPTable SMU_CKS_LOOKUPTable;

struct AgmAvfsData_t {
  uint16_t avgPsmCount[28];
  uint16_t minPsmCount[28];
};
typedef struct AgmAvfsData_t AgmAvfsData_t;

// AVFS DEFINES

enum VFT_COLUMNS {
  SCLK0,
  SCLK1,
  SCLK2,
  SCLK3,
  SCLK4,
  SCLK5,
  SCLK6,
  SCLK7,

  NUM_VFT_COLUMNS
};

#define TEMP_RANGE_MAXSTEPS 12
struct VFT_CELL_t {
  uint16_t Voltage;
};

typedef struct VFT_CELL_t VFT_CELL_t;

struct VFT_TABLE_t {
  VFT_CELL_t    Cell[TEMP_RANGE_MAXSTEPS][NUM_VFT_COLUMNS];
  uint16_t      AvfsGbv [NUM_VFT_COLUMNS];
  uint16_t      BtcGbv  [NUM_VFT_COLUMNS];
  uint16_t      Temperature [TEMP_RANGE_MAXSTEPS];

  uint8_t       NumTemperatureSteps;
  uint8_t       padding[3];
};
typedef struct VFT_TABLE_t VFT_TABLE_t;

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU72_DISCRETE_H
#define SMU72_DISCRETE_H

#include "smu72.h"

#if !defined(SMC_MICROCODE)
#pragma pack(push, 1)
#endif

struct SMIO_Pattern {
	uint16_t Voltage;
	uint8_t  Smio;
	uint8_t  padding;
};

typedef struct SMIO_Pattern SMIO_Pattern;

struct SMIO_Table {
	SMIO_Pattern Pattern[SMU_MAX_SMIO_LEVELS];
};

typedef struct SMIO_Table SMIO_Table;

struct SMU72_Discrete_GraphicsLevel {
	SMU_VoltageLevel MinVoltage;

	uint32_t    SclkFrequency;

	uint8_t     pcieDpmLevel;
	uint8_t     DeepSleepDivId;
	uint16_t    ActivityLevel;

	uint32_t    CgSpllFuncCntl3;
	uint32_t    CgSpllFuncCntl4;
	uint32_t    SpllSpreadSpectrum;
	uint32_t    SpllSpreadSpectrum2;
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;
	uint8_t     SclkDid;
	uint8_t     DisplayWatermark;
	uint8_t     EnabledForActivity;
	uint8_t     EnabledForThrottle;
	uint8_t     UpHyst;
	uint8_t     DownHyst;
	uint8_t     VoltageDownHyst;
	uint8_t     PowerThrottle;
};

typedef struct SMU72_Discrete_GraphicsLevel SMU72_Discrete_GraphicsLevel;

struct SMU72_Discrete_ACPILevel {
	uint32_t    Flags;
	SMU_VoltageLevel MinVoltage;
	uint32_t    SclkFrequency;
	uint8_t     SclkDid;
	uint8_t     DisplayWatermark;
	uint8_t     DeepSleepDivId;
	uint8_t     padding;
	uint32_t    CgSpllFuncCntl;
	uint32_t    CgSpllFuncCntl2;
	uint32_t    CgSpllFuncCntl3;
	uint32_t    CgSpllFuncCntl4;
	uint32_t    SpllSpreadSpectrum;
	uint32_t    SpllSpreadSpectrum2;
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;
};

typedef struct SMU72_Discrete_ACPILevel SMU72_Discrete_ACPILevel;

struct SMU72_Discrete_Ulv {
	uint32_t    CcPwrDynRm;
	uint32_t    CcPwrDynRm1;
	uint16_t    VddcOffset;
	uint8_t     VddcOffsetVid;
	uint8_t     VddcPhase;
	uint32_t    Reserved;
};

typedef struct SMU72_Discrete_Ulv SMU72_Discrete_Ulv;

struct SMU72_Discrete_MemoryLevel {
	SMU_VoltageLevel MinVoltage;
	uint32_t    MinMvdd;

	uint32_t    MclkFrequency;

	uint8_t     EdcReadEnable;
	uint8_t     EdcWriteEnable;
	uint8_t     RttEnable;
	uint8_t     StutterEnable;

	uint8_t     StrobeEnable;
	uint8_t     StrobeRatio;
	uint8_t     EnabledForThrottle;
	uint8_t     EnabledForActivity;

	uint8_t     UpHyst;
	uint8_t     DownHyst;
	uint8_t     VoltageDownHyst;
	uint8_t     padding;

	uint16_t    ActivityLevel;
	uint8_t     DisplayWatermark;
	uint8_t     padding1;

	uint32_t    MpllFuncCntl;
	uint32_t    MpllFuncCntl_1;
	uint32_t    MpllFuncCntl_2;
	uint32_t    MpllAdFuncCntl;
	uint32_t    MpllDqFuncCntl;
	uint32_t    MclkPwrmgtCntl;
	uint32_t    DllCntl;
	uint32_t    MpllSs1;
	uint32_t    MpllSs2;
};

typedef struct SMU72_Discrete_MemoryLevel SMU72_Discrete_MemoryLevel;

struct SMU72_Discrete_LinkLevel {
	uint8_t     PcieGenSpeed;           /*< 0:PciE-gen1 1:PciE-gen2 2:PciE-gen3 */
	uint8_t     PcieLaneCount;          /*< 1=x1, 2=x2, 3=x4, 4=x8, 5=x12, 6=x16 */
	uint8_t     EnabledForActivity;
	uint8_t     SPC;
	uint32_t    DownThreshold;
	uint32_t    UpThreshold;
	uint32_t    Reserved;
};

typedef struct SMU72_Discrete_LinkLevel SMU72_Discrete_LinkLevel;

/* MC ARB DRAM Timing registers. */
struct SMU72_Discrete_MCArbDramTimingTableEntry {
	uint32_t McArbDramTiming;
	uint32_t McArbDramTiming2;
	uint8_t  McArbBurstTime;
	uint8_t  padding[3];
};

typedef struct SMU72_Discrete_MCArbDramTimingTableEntry SMU72_Discrete_MCArbDramTimingTableEntry;

struct SMU72_Discrete_MCArbDramTimingTable {
	SMU72_Discrete_MCArbDramTimingTableEntry entries[SMU__NUM_SCLK_DPM_STATE][SMU__NUM_MCLK_DPM_LEVELS];
};

typedef struct SMU72_Discrete_MCArbDramTimingTable SMU72_Discrete_MCArbDramTimingTable;

/* UVD VCLK/DCLK state (level) definition. */
struct SMU72_Discrete_UvdLevel {
	uint32_t VclkFrequency;
	uint32_t DclkFrequency;
	SMU_VoltageLevel MinVoltage;
	uint8_t  VclkDivider;
	uint8_t  DclkDivider;
	uint8_t  padding[2];
};

typedef struct SMU72_Discrete_UvdLevel SMU72_Discrete_UvdLevel;

/* Clocks for other external blocks (VCE, ACP, SAMU). */
struct SMU72_Discrete_ExtClkLevel {
	uint32_t Frequency;
	SMU_VoltageLevel MinVoltage;
	uint8_t  Divider;
	uint8_t  padding[3];
};

typedef struct SMU72_Discrete_ExtClkLevel SMU72_Discrete_ExtClkLevel;

struct SMU72_Discrete_StateInfo {
	uint32_t SclkFrequency;
	uint32_t MclkFrequency;
	uint32_t VclkFrequency;
	uint32_t DclkFrequency;
	uint32_t SamclkFrequency;
	uint32_t AclkFrequency;
	uint32_t EclkFrequency;
	uint16_t MvddVoltage;
	uint16_t padding16;
	uint8_t  DisplayWatermark;
	uint8_t  McArbIndex;
	uint8_t  McRegIndex;
	uint8_t  SeqIndex;
	uint8_t  SclkDid;
	int8_t   SclkIndex;
	int8_t   MclkIndex;
	uint8_t  PCIeGen;

};

typedef struct SMU72_Discrete_StateInfo SMU72_Discrete_StateInfo;

struct SMU72_Discrete_DpmTable {
	/* Multi-DPM controller settings */
	SMU72_PIDController                  GraphicsPIDController;
	SMU72_PIDController                  MemoryPIDController;
	SMU72_PIDController                  LinkPIDController;

	uint32_t                            SystemFlags;

	/* SMIO masks for voltage and phase controls */
	uint32_t                            VRConfig;
	uint32_t                            SmioMask1;
	uint32_t                            SmioMask2;
	SMIO_Table                          SmioTable1;
	SMIO_Table                          SmioTable2;

	uint32_t                            VddcLevelCount;
	uint32_t                            VddciLevelCount;
	uint32_t                            VddGfxLevelCount;
	uint32_t                            MvddLevelCount;

	uint16_t                            VddcTable[SMU72_MAX_LEVELS_VDDC];
	uint16_t                            VddGfxTable[SMU72_MAX_LEVELS_VDDGFX];
	uint16_t                            VddciTable[SMU72_MAX_LEVELS_VDDCI];

	uint8_t                             BapmVddGfxVidHiSidd[SMU72_MAX_LEVELS_VDDGFX];
	uint8_t                             BapmVddGfxVidLoSidd[SMU72_MAX_LEVELS_VDDGFX];
	uint8_t                             BapmVddGfxVidHiSidd2[SMU72_MAX_LEVELS_VDDGFX];

	uint8_t                             BapmVddcVidHiSidd[SMU72_MAX_LEVELS_VDDC];
	uint8_t                             BapmVddcVidLoSidd[SMU72_MAX_LEVELS_VDDC];
	uint8_t                             BapmVddcVidHiSidd2[SMU72_MAX_LEVELS_VDDC];

	uint8_t                             GraphicsDpmLevelCount;
	uint8_t                             MemoryDpmLevelCount;
	uint8_t                             LinkLevelCount;
	uint8_t                             MasterDeepSleepControl;

	uint8_t                             UvdLevelCount;
	uint8_t                             VceLevelCount;
	uint8_t                             AcpLevelCount;
	uint8_t                             SamuLevelCount;

	uint8_t                             ThermOutGpio;
	uint8_t                             ThermOutPolarity;
	uint8_t                             ThermOutMode;
	uint8_t                             DPMFreezeAndForced;
	uint32_t                            Reserved[4];

	/* State table entries for each DPM state */
	SMU72_Discrete_GraphicsLevel        GraphicsLevel[SMU72_MAX_LEVELS_GRAPHICS];
	SMU72_Discrete_MemoryLevel          MemoryACPILevel;
	SMU72_Discrete_MemoryLevel          MemoryLevel[SMU72_MAX_LEVELS_MEMORY];
	SMU72_Discrete_LinkLevel            LinkLevel[SMU72_MAX_LEVELS_LINK];
	SMU72_Discrete_ACPILevel            ACPILevel;
	SMU72_Discrete_UvdLevel             UvdLevel[SMU72_MAX_LEVELS_UVD];
	SMU72_Discrete_ExtClkLevel          VceLevel[SMU72_MAX_LEVELS_VCE];
	SMU72_Discrete_ExtClkLevel          AcpLevel[SMU72_MAX_LEVELS_ACP];
	SMU72_Discrete_ExtClkLevel          SamuLevel[SMU72_MAX_LEVELS_SAMU];
	SMU72_Discrete_Ulv                  Ulv;

	uint32_t                            SclkStepSize;
	uint32_t                            Smio[SMU72_MAX_ENTRIES_SMIO];

	uint8_t                             UvdBootLevel;
	uint8_t                             VceBootLevel;
	uint8_t                             AcpBootLevel;
	uint8_t                             SamuBootLevel;

	uint8_t                             GraphicsBootLevel;
	uint8_t                             GraphicsVoltageChangeEnable;
	uint8_t                             GraphicsThermThrottleEnable;
	uint8_t                             GraphicsInterval;

	uint8_t                             VoltageInterval;
	uint8_t                             ThermalInterval;
	uint16_t                            TemperatureLimitHigh;

	uint16_t                            TemperatureLimitLow;
	uint8_t                             MemoryBootLevel;
	uint8_t                             MemoryVoltageChangeEnable;

	uint16_t                            BootMVdd;
	uint8_t                             MemoryInterval;
	uint8_t                             MemoryThermThrottleEnable;

	uint16_t                            VoltageResponseTime;
	uint16_t                            PhaseResponseTime;

	uint8_t                             PCIeBootLinkLevel;
	uint8_t                             PCIeGenInterval;
	uint8_t                             DTEInterval;
	uint8_t                             DTEMode;

	uint8_t                             SVI2Enable;
	uint8_t                             VRHotGpio;
	uint8_t                             AcDcGpio;
	uint8_t                             ThermGpio;

	uint16_t                            PPM_PkgPwrLimit;
	uint16_t                            PPM_TemperatureLimit;

	uint16_t                            DefaultTdp;
	uint16_t                            TargetTdp;

	uint16_t                            FpsHighThreshold;
	uint16_t                            FpsLowThreshold;

	uint16_t                            BAPMTI_R[SMU72_DTE_ITERATIONS][SMU72_DTE_SOURCES][SMU72_DTE_SINKS];
	uint16_t                            BAPMTI_RC[SMU72_DTE_ITERATIONS][SMU72_DTE_SOURCES][SMU72_DTE_SINKS];

	uint8_t                             DTEAmbientTempBase;
	uint8_t                             DTETjOffset;
	uint8_t                             GpuTjMax;
	uint8_t                             GpuTjHyst;

	SMU_VoltageLevel                    BootVoltage;

	uint32_t                            BAPM_TEMP_GRADIENT;

	uint32_t                            LowSclkInterruptThreshold;
	uint32_t                            VddGfxReChkWait;

	uint8_t                             ClockStretcherAmount;

	uint8_t                             Sclk_CKS_masterEn0_7;
	uint8_t                             Sclk_CKS_masterEn8_15;
	uint8_t                             padding[1];

	uint8_t                             Sclk_voltageOffset[8];

	SMU_ClockStretcherDataTable         ClockStretcherDataTable;
	SMU_CKS_LOOKUPTable                 CKS_LOOKUPTable;
};

typedef struct SMU72_Discrete_DpmTable SMU72_Discrete_DpmTable;

/* --------------------------------------------------- AC Timing Parameters ------------------------------------------------ */
#define SMU72_DISCRETE_MC_REGISTER_ARRAY_SIZE 16
#define SMU72_DISCRETE_MC_REGISTER_ARRAY_SET_COUNT SMU72_MAX_LEVELS_MEMORY /* DPM */

struct SMU72_Discrete_MCRegisterAddress {
	uint16_t s0;
	uint16_t s1;
};

typedef struct SMU72_Discrete_MCRegisterAddress SMU72_Discrete_MCRegisterAddress;

struct SMU72_Discrete_MCRegisterSet {
	uint32_t value[SMU72_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};

typedef struct SMU72_Discrete_MCRegisterSet SMU72_Discrete_MCRegisterSet;

struct SMU72_Discrete_MCRegisters {
	uint8_t                             last;
	uint8_t                             reserved[3];
	SMU72_Discrete_MCRegisterAddress     address[SMU72_DISCRETE_MC_REGISTER_ARRAY_SIZE];
	SMU72_Discrete_MCRegisterSet         data[SMU72_DISCRETE_MC_REGISTER_ARRAY_SET_COUNT];
};

typedef struct SMU72_Discrete_MCRegisters SMU72_Discrete_MCRegisters;


/* --------------------------------------------------- Fan Table ----------------------------------------------------------- */

struct SMU72_Discrete_FanTable {
	uint16_t FdoMode;
	int16_t  TempMin;
	int16_t  TempMed;
	int16_t  TempMax;
	int16_t  Slope1;
	int16_t  Slope2;
	int16_t  FdoMin;
	int16_t  HystUp;
	int16_t  HystDown;
	int16_t  HystSlope;
	int16_t  TempRespLim;
	int16_t  TempCurr;
	int16_t  SlopeCurr;
	int16_t  PwmCurr;
	uint32_t RefreshPeriod;
	int16_t  FdoMax;
	uint8_t  TempSrc;
	int8_t   FanControl_GL_Flag;
};

typedef struct SMU72_Discrete_FanTable SMU72_Discrete_FanTable;

#define SMU7_DISCRETE_GPIO_SCLK_DEBUG             4
#define SMU7_DISCRETE_GPIO_SCLK_DEBUG_BIT         (0x1 << SMU7_DISCRETE_GPIO_SCLK_DEBUG)

struct SMU7_MclkDpmScoreboard {

	uint32_t PercentageBusy;

	int32_t  PIDError;
	int32_t  PIDIntegral;
	int32_t  PIDOutput;

	uint32_t SigmaDeltaAccum;
	uint32_t SigmaDeltaOutput;
	uint32_t SigmaDeltaLevel;

	uint32_t UtilizationSetpoint;

	uint8_t  TdpClampMode;
	uint8_t  TdcClampMode;
	uint8_t  ThermClampMode;
	uint8_t  VoltageBusy;

	int8_t   CurrLevel;
	int8_t   TargLevel;
	uint8_t  LevelChangeInProgress;
	uint8_t  UpHyst;

	uint8_t  DownHyst;
	uint8_t  VoltageDownHyst;
	uint8_t  DpmEnable;
	uint8_t  DpmRunning;

	uint8_t  DpmForce;
	uint8_t  DpmForceLevel;
	uint8_t  DisplayWatermark;
	uint8_t  McArbIndex;

	uint32_t MinimumPerfMclk;

	uint8_t  AcpiReq;
	uint8_t  AcpiAck;
	uint8_t  MclkSwitchInProgress;
	uint8_t  MclkSwitchCritical;

	uint8_t  IgnoreVBlank;
	uint8_t  TargetMclkIndex;
	uint8_t  TargetMvddIndex;
	uint8_t  MclkSwitchResult;

	uint16_t VbiFailureCount;
	uint8_t  VbiWaitCounter;
	uint8_t  EnabledLevelsChange;

	uint16_t LevelResidencyCountersN[SMU72_MAX_LEVELS_MEMORY];
	uint16_t LevelSwitchCounters[SMU72_MAX_LEVELS_MEMORY];

	void     (*TargetStateCalculator)(uint8_t);
	void     (*SavedTargetStateCalculator)(uint8_t);

	uint16_t AutoDpmInterval;
	uint16_t AutoDpmRange;

	uint16_t VbiTimeoutCount;
	uint16_t MclkSwitchingTime;

	uint8_t  fastSwitch;
	uint8_t  Save_PIC_VDDGFX_EXIT;
	uint8_t  Save_PIC_VDDGFX_ENTER;
	uint8_t  padding;

};

typedef struct SMU7_MclkDpmScoreboard SMU7_MclkDpmScoreboard;

struct SMU7_UlvScoreboard {
	uint8_t     EnterUlv;
	uint8_t     ExitUlv;
	uint8_t     UlvActive;
	uint8_t     WaitingForUlv;
	uint8_t     UlvEnable;
	uint8_t     UlvRunning;
	uint8_t     UlvMasterEnable;
	uint8_t     padding;
	uint32_t    UlvAbortedCount;
	uint32_t    UlvTimeStamp;
};

typedef struct SMU7_UlvScoreboard SMU7_UlvScoreboard;

struct VddgfxSavedRegisters {
	uint32_t GPU_DBG[3];
	uint32_t MEC_BaseAddress_Hi;
	uint32_t MEC_BaseAddress_Lo;
	uint32_t THM_TMON0_CTRL2__RDIR_PRESENT;
	uint32_t THM_TMON1_CTRL2__RDIR_PRESENT;
	uint32_t CP_INT_CNTL;
};

typedef struct VddgfxSavedRegisters VddgfxSavedRegisters;

struct SMU7_VddGfxScoreboard {
	uint8_t     VddGfxEnable;
	uint8_t     VddGfxActive;
	uint8_t     VPUResetOccured;
	uint8_t     padding;

	uint32_t    VddGfxEnteredCount;
	uint32_t    VddGfxAbortedCount;

	uint32_t    VddGfxVid;

	VddgfxSavedRegisters SavedRegisters;
};

typedef struct SMU7_VddGfxScoreboard SMU7_VddGfxScoreboard;

struct SMU7_TdcLimitScoreboard {
	uint8_t  Enable;
	uint8_t  Running;
	uint16_t Alpha;
	uint32_t FilteredIddc;
	uint32_t IddcLimit;
	uint32_t IddcHyst;
	SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_TdcLimitScoreboard SMU7_TdcLimitScoreboard;

struct SMU7_PkgPwrLimitScoreboard {
	uint8_t  Enable;
	uint8_t  Running;
	uint16_t Alpha;
	uint32_t FilteredPkgPwr;
	uint32_t Limit;
	uint32_t Hyst;
	uint32_t LimitFromDriver;
	SMU7_HystController_Data HystControllerData;
};

typedef struct SMU7_PkgPwrLimitScoreboard SMU7_PkgPwrLimitScoreboard;

struct SMU7_BapmScoreboard {
	uint32_t source_powers[SMU72_DTE_SOURCES];
	uint32_t source_powers_last[SMU72_DTE_SOURCES];
	int32_t entity_temperatures[SMU72_NUM_GPU_TES];
	int32_t initial_entity_temperatures[SMU72_NUM_GPU_TES];
	int32_t Limit;
	int32_t Hyst;
	int32_t therm_influence_coeff_table[SMU72_DTE_ITERATIONS * SMU72_DTE_SOURCES * SMU72_DTE_SINKS * 2];
	int32_t therm_node_table[SMU72_DTE_ITERATIONS * SMU72_DTE_SOURCES * SMU72_DTE_SINKS];
	uint16_t ConfigTDPPowerScalar;
	uint16_t FanSpeedPowerScalar;
	uint16_t OverDrivePowerScalar;
	uint16_t OverDriveLimitScalar;
	uint16_t FinalPowerScalar;
	uint8_t VariantID;
	uint8_t spare997;

	SMU7_HystController_Data HystControllerData;

	int32_t temperature_gradient_slope;
	int32_t temperature_gradient;
	uint32_t measured_temperature;
};


typedef struct SMU7_BapmScoreboard SMU7_BapmScoreboard;

struct SMU7_AcpiScoreboard {
	uint32_t SavedInterruptMask[2];
	uint8_t LastACPIRequest;
	uint8_t CgBifResp;
	uint8_t RequestType;
	uint8_t Padding;
	SMU72_Discrete_ACPILevel D0Level;
};

typedef struct SMU7_AcpiScoreboard SMU7_AcpiScoreboard;

struct SMU72_Discrete_PmFuses {
	/* dw1  */
	uint8_t SviLoadLineEn;
	uint8_t SviLoadLineVddC;
	uint8_t SviLoadLineTrimVddC;
	uint8_t SviLoadLineOffsetVddC;

	/* dw2 */
	uint16_t TDC_VDDC_PkgLimit;
	uint8_t TDC_VDDC_ThrottleReleaseLimitPerc;
	uint8_t TDC_MAWt;

	/* dw3 */
	uint8_t TdcWaterfallCtl;
	uint8_t LPMLTemperatureMin;
	uint8_t LPMLTemperatureMax;
	uint8_t Reserved;

	/* dw4-dw7  */
	uint8_t LPMLTemperatureScaler[16];

	/* dw8-dw9  */
	int16_t FuzzyFan_ErrorSetDelta;
	int16_t FuzzyFan_ErrorRateSetDelta;
	int16_t FuzzyFan_PwmSetDelta;
	uint16_t Reserved6;

	/* dw10-dw14  */
	uint8_t GnbLPML[16];

	/* dw15 */
	uint8_t GnbLPMLMaxVid;
	uint8_t GnbLPMLMinVid;
	uint8_t Reserved1[2];

	/* dw16 */
	uint16_t BapmVddCBaseLeakageHiSidd;
	uint16_t BapmVddCBaseLeakageLoSidd;
};

typedef struct SMU72_Discrete_PmFuses SMU72_Discrete_PmFuses;

struct SMU7_Discrete_Log_Header_Table {
	uint32_t    version;
	uint32_t    asic_id;
	uint16_t    flags;
	uint16_t    entry_size;
	uint32_t    total_size;
	uint32_t    num_of_entries;
	uint8_t     type;
	uint8_t     mode;
	uint8_t     filler_0[2];
	uint32_t    filler_1[2];
};

typedef struct SMU7_Discrete_Log_Header_Table SMU7_Discrete_Log_Header_Table;

struct SMU7_Discrete_Log_Cntl {
	uint8_t             Enabled;
	uint8_t             Type;
	uint8_t             padding[2];
	uint32_t            BufferSize;
	uint32_t            SamplesLogged;
	uint32_t            SampleSize;
	uint32_t            AddrL;
	uint32_t            AddrH;
};

typedef struct SMU7_Discrete_Log_Cntl SMU7_Discrete_Log_Cntl;

#define CAC_ACC_NW_NUM_OF_SIGNALS 87

struct SMU7_Discrete_Cac_Collection_Table {
	uint32_t temperature;
	uint32_t cac_acc_nw[CAC_ACC_NW_NUM_OF_SIGNALS];
};

typedef struct SMU7_Discrete_Cac_Collection_Table SMU7_Discrete_Cac_Collection_Table;

struct SMU7_Discrete_Cac_Verification_Table {
	uint32_t VddcTotalPower;
	uint32_t VddcLeakagePower;
	uint32_t VddcConstantPower;
	uint32_t VddcGfxDynamicPower;
	uint32_t VddcUvdDynamicPower;
	uint32_t VddcVceDynamicPower;
	uint32_t VddcAcpDynamicPower;
	uint32_t VddcPcieDynamicPower;
	uint32_t VddcDceDynamicPower;
	uint32_t VddcCurrent;
	uint32_t VddcVoltage;
	uint32_t VddciTotalPower;
	uint32_t VddciLeakagePower;
	uint32_t VddciConstantPower;
	uint32_t VddciDynamicPower;
	uint32_t Vddr1TotalPower;
	uint32_t Vddr1LeakagePower;
	uint32_t Vddr1ConstantPower;
	uint32_t Vddr1DynamicPower;
	uint32_t spare[4];
	uint32_t temperature;
};

typedef struct SMU7_Discrete_Cac_Verification_Table SMU7_Discrete_Cac_Verification_Table;

struct SMU7_Discrete_Pm_Status_Table {
	/* Thermal entities */
	int32_t T_meas_max;
	int32_t T_meas_acc;
	int32_t T_calc_max;
	int32_t T_calc_acc;
	uint32_t P_scalar_acc;
	uint32_t P_calc_max;
	uint32_t P_calc_acc;

	/*Voltage domains */
	uint32_t I_calc_max;
	uint32_t I_calc_acc;
	uint32_t I_calc_acc_vddci;
	uint32_t V_calc_noload_acc;
	uint32_t V_calc_load_acc;
	uint32_t V_calc_noload_acc_vddci;
	uint32_t P_meas_acc;
	uint32_t V_meas_noload_acc;
	uint32_t V_meas_load_acc;
	uint32_t I_meas_acc;
	uint32_t P_meas_acc_vddci;
	uint32_t V_meas_noload_acc_vddci;
	uint32_t V_meas_load_acc_vddci;
	uint32_t I_meas_acc_vddci;

	/*Frequency */
	uint16_t Sclk_dpm_residency[8];
	uint16_t Uvd_dpm_residency[8];
	uint16_t Vce_dpm_residency[8];
	uint16_t Mclk_dpm_residency[4];

	/*Chip */
	uint32_t P_vddci_acc;
	uint32_t P_vddr1_acc;
	uint32_t P_nte1_acc;
	uint32_t PkgPwr_max;
	uint32_t PkgPwr_acc;
	uint32_t MclkSwitchingTime_max;
	uint32_t MclkSwitchingTime_acc;
	uint32_t FanPwm_acc;
	uint32_t FanRpm_acc;

	uint32_t AccCnt;
};

typedef struct SMU7_Discrete_Pm_Status_Table SMU7_Discrete_Pm_Status_Table;

/*FIXME THESE NEED TO BE UPDATED */
#define SMU7_SCLK_CAC 0x561
#define SMU7_MCLK_CAC 0xF9
#define SMU7_VCLK_CAC 0x2DE
#define SMU7_DCLK_CAC 0x2DE
#define SMU7_ECLK_CAC 0x25E
#define SMU7_ACLK_CAC 0x25E
#define SMU7_SAMCLK_CAC 0x25E
#define SMU7_DISPCLK_CAC 0x100
#define SMU7_CAC_CONSTANT 0x2EE3430
#define SMU7_CAC_CONSTANT_SHIFT 18

#define SMU7_VDDCI_MCLK_CONST        1765
#define SMU7_VDDCI_MCLK_CONST_SHIFT  16
#define SMU7_VDDCI_VDDCI_CONST       50958
#define SMU7_VDDCI_VDDCI_CONST_SHIFT 14
#define SMU7_VDDCI_CONST             11781

#define SMU7_12C_VDDCI_MCLK_CONST        1623
#define SMU7_12C_VDDCI_MCLK_CONST_SHIFT  15
#define SMU7_12C_VDDCI_VDDCI_CONST       40088
#define SMU7_12C_VDDCI_VDDCI_CONST_SHIFT 13
#define SMU7_12C_VDDCI_CONST             20856

#define SMU7_VDDCI_STROBE_PWR        1331

#define SMU7_VDDR1_CONST            693
#define SMU7_VDDR1_CAC_WEIGHT       20
#define SMU7_VDDR1_CAC_WEIGHT_SHIFT 19
#define SMU7_VDDR1_STROBE_PWR       512

#define SMU7_AREA_COEFF_UVD 0xA78
#define SMU7_AREA_COEFF_VCE 0x190A
#define SMU7_AREA_COEFF_ACP 0x22D1
#define SMU7_AREA_COEFF_SAMU 0x534

/*ThermOutMode values */
#define SMU7_THERM_OUT_MODE_DISABLE       0x0
#define SMU7_THERM_OUT_MODE_THERM_ONLY    0x1
#define SMU7_THERM_OUT_MODE_THERM_VRHOT   0x2

#if !defined(SMC_MICROCODE)
#pragma pack(pop)
#endif


#endif

/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU72_H
#define SMU72_H

#if !defined(SMC_MICROCODE)
#pragma pack(push, 1)
#endif

#define SMU__NUM_SCLK_DPM_STATE  8
#define SMU__NUM_MCLK_DPM_LEVELS 4
#define SMU__NUM_LCLK_DPM_LEVELS 8
#define SMU__NUM_PCIE_DPM_LEVELS 8

enum SID_OPTION {
	SID_OPTION_HI,
	SID_OPTION_LO,
	SID_OPTION_COUNT
};

enum Poly3rdOrderCoeff {
	LEAKAGE_TEMPERATURE_SCALAR,
	LEAKAGE_VOLTAGE_SCALAR,
	DYNAMIC_VOLTAGE_SCALAR,
	POLY_3RD_ORDER_COUNT
};

struct SMU7_Poly3rdOrder_Data {
	int32_t a;
	int32_t b;
	int32_t c;
	int32_t d;
	uint8_t a_shift;
	uint8_t b_shift;
	uint8_t c_shift;
	uint8_t x_shift;
};

typedef struct SMU7_Poly3rdOrder_Data SMU7_Poly3rdOrder_Data;

struct Power_Calculator_Data {
	uint16_t NoLoadVoltage;
	uint16_t LoadVoltage;
	uint16_t Resistance;
	uint16_t Temperature;
	uint16_t BaseLeakage;
	uint16_t LkgTempScalar;
	uint16_t LkgVoltScalar;
	uint16_t LkgAreaScalar;
	uint16_t LkgPower;
	uint16_t DynVoltScalar;
	uint32_t Cac;
	uint32_t DynPower;
	uint32_t TotalCurrent;
	uint32_t TotalPower;
};

typedef struct Power_Calculator_Data PowerCalculatorData_t;

struct Gc_Cac_Weight_Data {
	uint8_t index;
	uint32_t value;
};

typedef struct Gc_Cac_Weight_Data GcCacWeight_Data;


typedef struct {
	uint32_t high;
	uint32_t low;
} data_64_t;

typedef struct {
	data_64_t high;
	data_64_t low;
} data_128_t;

#define SMU7_CONTEXT_ID_SMC        1
#define SMU7_CONTEXT_ID_VBIOS      2

#define SMU72_MAX_LEVELS_VDDC            16
#define SMU72_MAX_LEVELS_VDDGFX          16
#define SMU72_MAX_LEVELS_VDDCI           8
#define SMU72_MAX_LEVELS_MVDD            4

#define SMU_MAX_SMIO_LEVELS              4

#define SMU72_MAX_LEVELS_GRAPHICS        SMU__NUM_SCLK_DPM_STATE   /* SCLK + SQ DPM + ULV */
#define SMU72_MAX_LEVELS_MEMORY          SMU__NUM_MCLK_DPM_LEVELS   /* MCLK Levels DPM */
#define SMU72_MAX_LEVELS_GIO             SMU__NUM_LCLK_DPM_LEVELS  /* LCLK Levels */
#define SMU72_MAX_LEVELS_LINK            SMU__NUM_PCIE_DPM_LEVELS  /* PCIe speed and number of lanes. */
#define SMU72_MAX_LEVELS_UVD             8   /* VCLK/DCLK levels for UVD. */
#define SMU72_MAX_LEVELS_VCE             8   /* ECLK levels for VCE. */
#define SMU72_MAX_LEVELS_ACP             8   /* ACLK levels for ACP. */
#define SMU72_MAX_LEVELS_SAMU            8   /* SAMCLK levels for SAMU. */
#define SMU72_MAX_ENTRIES_SMIO           32  /* Number of entries in SMIO table. */

#define DPM_NO_LIMIT 0
#define DPM_NO_UP 1
#define DPM_GO_DOWN 2
#define DPM_GO_UP 3

#define SMU7_FIRST_DPM_GRAPHICS_LEVEL    0
#define SMU7_FIRST_DPM_MEMORY_LEVEL      0

#define GPIO_CLAMP_MODE_VRHOT      1
#define GPIO_CLAMP_MODE_THERM      2
#define GPIO_CLAMP_MODE_DC         4

#define SCRATCH_B_TARG_PCIE_INDEX_SHIFT 0
#define SCRATCH_B_TARG_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_TARG_PCIE_INDEX_SHIFT)
#define SCRATCH_B_CURR_PCIE_INDEX_SHIFT 3
#define SCRATCH_B_CURR_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_CURR_PCIE_INDEX_SHIFT)
#define SCRATCH_B_TARG_UVD_INDEX_SHIFT  6
#define SCRATCH_B_TARG_UVD_INDEX_MASK   (0x7<<SCRATCH_B_TARG_UVD_INDEX_SHIFT)
#define SCRATCH_B_CURR_UVD_INDEX_SHIFT  9
#define SCRATCH_B_CURR_UVD_INDEX_MASK   (0x7<<SCRATCH_B_CURR_UVD_INDEX_SHIFT)
#define SCRATCH_B_TARG_VCE_INDEX_SHIFT  12
#define SCRATCH_B_TARG_VCE_INDEX_MASK   (0x7<<SCRATCH_B_TARG_VCE_INDEX_SHIFT)
#define SCRATCH_B_CURR_VCE_INDEX_SHIFT  15
#define SCRATCH_B_CURR_VCE_INDEX_MASK   (0x7<<SCRATCH_B_CURR_VCE_INDEX_SHIFT)
#define SCRATCH_B_TARG_ACP_INDEX_SHIFT  18
#define SCRATCH_B_TARG_ACP_INDEX_MASK   (0x7<<SCRATCH_B_TARG_ACP_INDEX_SHIFT)
#define SCRATCH_B_CURR_ACP_INDEX_SHIFT  21
#define SCRATCH_B_CURR_ACP_INDEX_MASK   (0x7<<SCRATCH_B_CURR_ACP_INDEX_SHIFT)
#define SCRATCH_B_TARG_SAMU_INDEX_SHIFT 24
#define SCRATCH_B_TARG_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_TARG_SAMU_INDEX_SHIFT)
#define SCRATCH_B_CURR_SAMU_INDEX_SHIFT 27
#define SCRATCH_B_CURR_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_CURR_SAMU_INDEX_SHIFT)

/* Virtualization Defines */
#define CG_XDMA_MASK  0x1
#define CG_XDMA_SHIFT 0
#define CG_UVD_MASK   0x2
#define CG_UVD_SHIFT  1
#define CG_VCE_MASK   0x4
#define CG_VCE_SHIFT  2
#define CG_SAMU_MASK  0x8
#define CG_SAMU_SHIFT 3
#define CG_GFX_MASK   0x10
#define CG_GFX_SHIFT  4
#define CG_SDMA_MASK  0x20
#define CG_SDMA_SHIFT 5
#define CG_HDP_MASK   0x40
#define CG_HDP_SHIFT  6
#define CG_MC_MASK    0x80
#define CG_MC_SHIFT   7
#define CG_DRM_MASK   0x100
#define CG_DRM_SHIFT  8
#define CG_ROM_MASK   0x200
#define CG_ROM_SHIFT  9
#define CG_BIF_MASK   0x400
#define CG_BIF_SHIFT  10

#define SMU72_DTE_ITERATIONS 5
#define SMU72_DTE_SOURCES 3
#define SMU72_DTE_SINKS 1
#define SMU72_NUM_CPU_TES 0
#define SMU72_NUM_GPU_TES 1
#define SMU72_NUM_NON_TES 2
#define SMU72_DTE_FAN_SCALAR_MIN 0x100
#define SMU72_DTE_FAN_SCALAR_MAX 0x166
#define SMU72_DTE_FAN_TEMP_MAX 93
#define SMU72_DTE_FAN_TEMP_MIN 83

#if defined SMU__FUSION_ONLY
#define SMU7_DTE_ITERATIONS 5
#define SMU7_DTE_SOURCES 5
#define SMU7_DTE_SINKS 3
#define SMU7_NUM_CPU_TES 2
#define SMU7_NUM_GPU_TES 1
#define SMU7_NUM_NON_TES 2
#endif

struct SMU7_HystController_Data {
	uint8_t waterfall_up;
	uint8_t waterfall_down;
	uint8_t waterfall_limit;
	uint8_t spare;
	uint16_t release_cnt;
	uint16_t release_limit;
};

typedef struct SMU7_HystController_Data SMU7_HystController_Data;

struct SMU72_PIDController {
	uint32_t Ki;
	int32_t LFWindupUpperLim;
	int32_t LFWindupLowerLim;
	uint32_t StatePrecision;
	uint32_t LfPrecision;
	uint32_t LfOffset;
	uint32_t MaxState;
	uint32_t MaxLfFraction;
	uint32_t StateShift;
};

typedef struct SMU72_PIDController SMU72_PIDController;

struct SMU7_LocalDpmScoreboard {
	uint32_t PercentageBusy;

	int32_t  PIDError;
	int32_t  PIDIntegral;
	int32_t  PIDOutput;

	uint32_t SigmaDeltaAccum;
	uint32_t SigmaDeltaOutput;
	uint32_t SigmaDeltaLevel;

	uint32_t UtilizationSetpoint;

	uint8_t  TdpClampMode;
	uint8_t  TdcClampMode;
	uint8_t  ThermClampMode;
	uint8_t  VoltageBusy;

	int8_t   CurrLevel;
	int8_t   TargLevel;
	uint8_t  LevelChangeInProgress;
	uint8_t  UpHyst;

	uint8_t  DownHyst;
	uint8_t  VoltageDownHyst;
	uint8_t  DpmEnable;
	uint8_t  DpmRunning;

	uint8_t  DpmForce;
	uint8_t  DpmForceLevel;
	uint8_t  DisplayWatermark;
	uint8_t  McArbIndex;

	uint32_t MinimumPerfSclk;

	uint8_t  AcpiReq;
	uint8_t  AcpiAck;
	uint8_t  GfxClkSlow;
	uint8_t  GpioClampMode; /* bit0 = VRHOT: bit1 = THERM: bit2 = DC */

	uint8_t  FpsFilterWeight;
	uint8_t  EnabledLevelsChange;
	uint8_t  DteClampMode;
	uint8_t  FpsClampMode;

	uint16_t LevelResidencyCounters[SMU72_MAX_LEVELS_GRAPHICS];
	uint16_t LevelSwitchCounters[SMU72_MAX_LEVELS_GRAPHICS];

	void     (*TargetStateCalculator)(uint8_t);
	void     (*SavedTargetStateCalculator)(uint8_t);

	uint16_t AutoDpmInterval;
	uint16_t AutoDpmRange;

	uint8_t  FpsEnabled;
	uint8_t  MaxPerfLevel;
	uint8_t  AllowLowClkInterruptToHost;
	uint8_t  FpsRunning;

	uint32_t MaxAllowedFrequency;

	uint32_t FilteredSclkFrequency;
	uint32_t LastSclkFrequency;
	uint32_t FilteredSclkFrequencyCnt;
};

typedef struct SMU7_LocalDpmScoreboard SMU7_LocalDpmScoreboard;

#define SMU7_MAX_VOLTAGE_CLIENTS 12

typedef uint8_t (*VoltageChangeHandler_t)(uint16_t, uint8_t);

struct SMU_VoltageLevel {
	uint8_t Vddc;
	uint8_t Vddci;
	uint8_t VddGfx;
	uint8_t Phases;
};

typedef struct SMU_VoltageLevel SMU_VoltageLevel;

struct SMU7_VoltageScoreboard {
	SMU_VoltageLevel CurrentVoltage;
	SMU_VoltageLevel TargetVoltage;
	uint16_t MaxVid;
	uint8_t  HighestVidOffset;
	uint8_t  CurrentVidOffset;

	uint8_t  ControllerBusy;
	uint8_t  CurrentVid;
	uint8_t  CurrentVddciVid;
	uint8_t  VddGfxShutdown; /* 0 = normal mode, 1 = shut down */

	SMU_VoltageLevel RequestedVoltage[SMU7_MAX_VOLTAGE_CLIENTS];
	uint8_t  EnabledRequest[SMU7_MAX_VOLTAGE_CLIENTS];

	uint8_t  TargetIndex;
	uint8_t  Delay;
	uint8_t  ControllerEnable;
	uint8_t  ControllerRunning;
	uint16_t CurrentStdVoltageHiSidd;
	uint16_t CurrentStdVoltageLoSidd;
	uint8_t  OverrideVoltage;
	uint8_t  VddcUseUlvOffset;
	uint8_t  VddGfxUseUlvOffset;
	uint8_t  padding;

	VoltageChangeHandler_t ChangeVddc;
	VoltageChangeHandler_t ChangeVddGfx;
	VoltageChangeHandler_t ChangeVddci;
	VoltageChangeHandler_t ChangePhase;
	VoltageChangeHandler_t ChangeMvdd;

	VoltageChangeHandler_t functionLinks[6];

	uint8_t *VddcFollower1;
	uint8_t *VddcFollower2;
	int16_t  Driver_OD_RequestedVidOffset1;
	int16_t  Driver_OD_RequestedVidOffset2;

};

typedef struct SMU7_VoltageScoreboard SMU7_VoltageScoreboard;

#define SMU7_MAX_PCIE_LINK_SPEEDS 3 /* 0:Gen1 1:Gen2 2:Gen3 */

struct SMU7_PCIeLinkSpeedScoreboard {
	uint8_t     DpmEnable;
	uint8_t     DpmRunning;
	uint8_t     DpmForce;
	uint8_t     DpmForceLevel;

	uint8_t     CurrentLinkSpeed;
	uint8_t     EnabledLevelsChange;
	uint16_t    AutoDpmInterval;

	uint16_t    AutoDpmRange;
	uint16_t    AutoDpmCount;

	uint8_t     DpmMode;
	uint8_t     AcpiReq;
	uint8_t     AcpiAck;
	uint8_t     CurrentLinkLevel;

};

typedef struct SMU7_PCIeLinkSpeedScoreboard SMU7_PCIeLinkSpeedScoreboard;

/* -------------------------------------------------------- CAC table ------------------------------------------------------ */
#define SMU7_LKGE_LUT_NUM_OF_TEMP_ENTRIES 16
#define SMU7_LKGE_LUT_NUM_OF_VOLT_ENTRIES 16
#define SMU7_SCALE_I  7
#define SMU7_SCALE_R 12

struct SMU7_PowerScoreboard {
	PowerCalculatorData_t VddGfxPowerData[SID_OPTION_COUNT];
	PowerCalculatorData_t VddcPowerData[SID_OPTION_COUNT];

	uint32_t TotalGpuPower;
	uint32_t TdcCurrent;

	uint16_t   VddciTotalPower;
	uint16_t   sparesasfsdfd;
	uint16_t   Vddr1Power;
	uint16_t   RocPower;

	uint16_t   CalcMeasPowerBlend;
	uint8_t    SidOptionPower;
	uint8_t    SidOptionCurrent;

	uint32_t   WinTime;

	uint16_t Telemetry_1_slope;
	uint16_t Telemetry_2_slope;
	int32_t Telemetry_1_offset;
	int32_t Telemetry_2_offset;

	uint32_t VddcCurrentTelemetry;
	uint32_t VddGfxCurrentTelemetry;
	uint32_t VddcPowerTelemetry;
	uint32_t VddGfxPowerTelemetry;
	uint32_t VddciPowerTelemetry;

	uint32_t VddcPower;
	uint32_t VddGfxPower;
	uint32_t VddciPower;

	uint32_t TelemetryCurrent[2];
	uint32_t TelemetryVoltage[2];
	uint32_t TelemetryPower[2];
};

typedef struct SMU7_PowerScoreboard SMU7_PowerScoreboard;

struct SMU7_ThermalScoreboard {
	int16_t  GpuLimit;
	int16_t  GpuHyst;
	uint16_t CurrGnbTemp;
	uint16_t FilteredGnbTemp;

	uint8_t  ControllerEnable;
	uint8_t  ControllerRunning;
	uint8_t  AutoTmonCalInterval;
	uint8_t  AutoTmonCalEnable;

	uint8_t  ThermalDpmEnabled;
	uint8_t  SclkEnabledMask;
	uint8_t  spare[2];
	int32_t  temperature_gradient;

	SMU7_HystController_Data HystControllerData;
	int32_t  WeightedSensorTemperature;
	uint16_t TemperatureLimit[SMU72_MAX_LEVELS_GRAPHICS];
	uint32_t Alpha;
};

typedef struct SMU7_ThermalScoreboard SMU7_ThermalScoreboard;

/* For FeatureEnables: */
#define SMU7_SCLK_DPM_CONFIG_MASK                        0x01
#define SMU7_VOLTAGE_CONTROLLER_CONFIG_MASK              0x02
#define SMU7_THERMAL_CONTROLLER_CONFIG_MASK              0x04
#define SMU7_MCLK_DPM_CONFIG_MASK                        0x08
#define SMU7_UVD_DPM_CONFIG_MASK                         0x10
#define SMU7_VCE_DPM_CONFIG_MASK                         0x20
#define SMU7_ACP_DPM_CONFIG_MASK                         0x40
#define SMU7_SAMU_DPM_CONFIG_MASK                        0x80
#define SMU7_PCIEGEN_DPM_CONFIG_MASK                    0x100

#define SMU7_ACP_MCLK_HANDSHAKE_DISABLE                  0x00000001
#define SMU7_ACP_SCLK_HANDSHAKE_DISABLE                  0x00000002
#define SMU7_UVD_MCLK_HANDSHAKE_DISABLE                  0x00000100
#define SMU7_UVD_SCLK_HANDSHAKE_DISABLE                  0x00000200
#define SMU7_VCE_MCLK_HANDSHAKE_DISABLE                  0x00010000
#define SMU7_VCE_SCLK_HANDSHAKE_DISABLE                  0x00020000

/* All 'soft registers' should be uint32_t. */
struct SMU72_SoftRegisters {
	uint32_t        RefClockFrequency;
	uint32_t        PmTimerPeriod;
	uint32_t        FeatureEnables;

	uint32_t        PreVBlankGap;
	uint32_t        VBlankTimeout;
	uint32_t        TrainTimeGap;

	uint32_t        MvddSwitchTime;
	uint32_t        LongestAcpiTrainTime;
	uint32_t        AcpiDelay;
	uint32_t        G5TrainTime;
	uint32_t        DelayMpllPwron;
	uint32_t        VoltageChangeTimeout;

	uint32_t        HandshakeDisables;

	uint8_t         DisplayPhy1Config;
	uint8_t         DisplayPhy2Config;
	uint8_t         DisplayPhy3Config;
	uint8_t         DisplayPhy4Config;

	uint8_t         DisplayPhy5Config;
	uint8_t         DisplayPhy6Config;
	uint8_t         DisplayPhy7Config;
	uint8_t         DisplayPhy8Config;

	uint32_t        AverageGraphicsActivity;
	uint32_t        AverageMemoryActivity;
	uint32_t        AverageGioActivity;

	uint8_t         SClkDpmEnabledLevels;
	uint8_t         MClkDpmEnabledLevels;
	uint8_t         LClkDpmEnabledLevels;
	uint8_t         PCIeDpmEnabledLevels;

	uint8_t         UVDDpmEnabledLevels;
	uint8_t         SAMUDpmEnabledLevels;
	uint8_t         ACPDpmEnabledLevels;
	uint8_t         VCEDpmEnabledLevels;

	uint32_t        DRAM_LOG_ADDR_H;
	uint32_t        DRAM_LOG_ADDR_L;
	uint32_t        DRAM_LOG_PHY_ADDR_H;
	uint32_t        DRAM_LOG_PHY_ADDR_L;
	uint32_t        DRAM_LOG_BUFF_SIZE;
	uint32_t        UlvEnterCount;
	uint32_t        UlvTime;
	uint32_t        UcodeLoadStatus;
	uint32_t        Reserved[2];

};

typedef struct SMU72_SoftRegisters SMU72_SoftRegisters;

struct SMU72_Firmware_Header {
	uint32_t Digest[5];
	uint32_t Version;
	uint32_t HeaderSize;
	uint32_t Flags;
	uint32_t EntryPoint;
	uint32_t CodeSize;
	uint32_t ImageSize;

	uint32_t Rtos;
	uint32_t SoftRegisters;
	uint32_t DpmTable;
	uint32_t FanTable;
	uint32_t CacConfigTable;
	uint32_t CacStatusTable;
	uint32_t mcRegisterTable;
	uint32_t mcArbDramTimingTable;
	uint32_t PmFuseTable;
	uint32_t Globals;
	uint32_t ClockStretcherTable;
	uint32_t Reserved[41];
	uint32_t Signature;
};

typedef struct SMU72_Firmware_Header SMU72_Firmware_Header;

#define SMU72_FIRMWARE_HEADER_LOCATION 0x20000

enum  DisplayConfig {
	PowerDown = 1,
	DP54x4,
	DP54x2,
	DP54x1,
	DP27x4,
	DP27x2,
	DP27x1,
	HDMI297,
	HDMI162,
	LVDS,
	DP324x4,
	DP324x2,
	DP324x1
};

#define MC_BLOCK_COUNT 1
#define CPL_BLOCK_COUNT 5
#define SE_BLOCK_COUNT 15
#define GC_BLOCK_COUNT 24

struct SMU7_Local_Cac {
	uint8_t BlockId;
	uint8_t SignalId;
	uint8_t Threshold;
	uint8_t Padding;
};

typedef struct SMU7_Local_Cac SMU7_Local_Cac;

struct SMU7_Local_Cac_Table {
	SMU7_Local_Cac CplLocalCac[CPL_BLOCK_COUNT];
	SMU7_Local_Cac McLocalCac[MC_BLOCK_COUNT];
	SMU7_Local_Cac SeLocalCac[SE_BLOCK_COUNT];
	SMU7_Local_Cac GcLocalCac[GC_BLOCK_COUNT];
};

typedef struct SMU7_Local_Cac_Table SMU7_Local_Cac_Table;

#if !defined(SMC_MICROCODE)
#pragma pack(pop)
#endif

/* Description of Clock Gating bitmask for Tonga: */
/* System Clock Gating */
#define CG_SYS_BITMASK_FIRST_BIT      0  /* First bit of Sys CG bitmask */
#define CG_SYS_BITMASK_LAST_BIT       9  /* Last bit of Sys CG bitmask */
#define CG_SYS_BIF_MGLS_SHIFT         0
#define CG_SYS_ROM_SHIFT              1
#define CG_SYS_MC_MGCG_SHIFT          2
#define CG_SYS_MC_MGLS_SHIFT          3
#define CG_SYS_SDMA_MGCG_SHIFT        4
#define CG_SYS_SDMA_MGLS_SHIFT        5
#define CG_SYS_DRM_MGCG_SHIFT         6
#define CG_SYS_HDP_MGCG_SHIFT         7
#define CG_SYS_HDP_MGLS_SHIFT         8
#define CG_SYS_DRM_MGLS_SHIFT         9

#define CG_SYS_BIF_MGLS_MASK          0x1
#define CG_SYS_ROM_MASK               0x2
#define CG_SYS_MC_MGCG_MASK           0x4
#define CG_SYS_MC_MGLS_MASK           0x8
#define CG_SYS_SDMA_MGCG_MASK         0x10
#define CG_SYS_SDMA_MGLS_MASK         0x20
#define CG_SYS_DRM_MGCG_MASK          0x40
#define CG_SYS_HDP_MGCG_MASK          0x80
#define CG_SYS_HDP_MGLS_MASK          0x100
#define CG_SYS_DRM_MGLS_MASK          0x200

/* Graphics Clock Gating */
#define CG_GFX_BITMASK_FIRST_BIT      16 /* First bit of Gfx CG bitmask */
#define CG_GFX_BITMASK_LAST_BIT       20 /* Last bit of Gfx CG bitmask */
#define CG_GFX_CGCG_SHIFT             16
#define CG_GFX_CGLS_SHIFT             17
#define CG_CPF_MGCG_SHIFT             18
#define CG_RLC_MGCG_SHIFT             19
#define CG_GFX_OTHERS_MGCG_SHIFT      20

#define CG_GFX_CGCG_MASK              0x00010000
#define CG_GFX_CGLS_MASK              0x00020000
#define CG_CPF_MGCG_MASK              0x00040000
#define CG_RLC_MGCG_MASK              0x00080000
#define CG_GFX_OTHERS_MGCG_MASK       0x00100000

/* Voltage Regulator Configuration */
/* VR Config info is contained in dpmTable.VRConfig */

#define VRCONF_VDDC_MASK         0x000000FF
#define VRCONF_VDDC_SHIFT        0
#define VRCONF_VDDGFX_MASK       0x0000FF00
#define VRCONF_VDDGFX_SHIFT      8
#define VRCONF_VDDCI_MASK        0x00FF0000
#define VRCONF_VDDCI_SHIFT       16
#define VRCONF_MVDD_MASK         0xFF000000
#define VRCONF_MVDD_SHIFT        24

#define VR_MERGED_WITH_VDDC      0
#define VR_SVI2_PLANE_1          1
#define VR_SVI2_PLANE_2          2
#define VR_SMIO_PATTERN_1        3
#define VR_SMIO_PATTERN_2        4
#define VR_STATIC_VOLTAGE        5

/* Clock Stretcher Configuration */

#define CLOCK_STRETCHER_MAX_ENTRIES 0x4
#define CKS_LOOKUPTable_MAX_ENTRIES 0x4

/* The 'settings' field is subdivided in the following way: */
#define CLOCK_STRETCHER_SETTING_DDT_MASK             0x01
#define CLOCK_STRETCHER_SETTING_DDT_SHIFT            0x0
#define CLOCK_STRETCHER_SETTING_STRETCH_AMOUNT_MASK  0x1E
#define CLOCK_STRETCHER_SETTING_STRETCH_AMOUNT_SHIFT 0x1
#define CLOCK_STRETCHER_SETTING_ENABLE_MASK          0x80
#define CLOCK_STRETCHER_SETTING_ENABLE_SHIFT         0x7

struct SMU_ClockStretcherDataTableEntry {
	uint8_t minVID;
	uint8_t maxVID;

	uint16_t setting;
};
typedef struct SMU_ClockStretcherDataTableEntry SMU_ClockStretcherDataTableEntry;

struct SMU_ClockStretcherDataTable {
	SMU_ClockStretcherDataTableEntry ClockStretcherDataTableEntry[CLOCK_STRETCHER_MAX_ENTRIES];
};
typedef struct SMU_ClockStretcherDataTable SMU_ClockStretcherDataTable;

struct SMU_CKS_LOOKUPTableEntry {
	uint16_t minFreq;
	uint16_t maxFreq;

	uint8_t setting;
	uint8_t padding[3];
};
typedef struct SMU_CKS_LOOKUPTableEntry SMU_CKS_LOOKUPTableEntry;

struct SMU_CKS_LOOKUPTable {
	SMU_CKS_LOOKUPTableEntry CKS_LOOKUPTableEntry[CKS_LOOKUPTable_MAX_ENTRIES];
};
typedef struct SMU_CKS_LOOKUPTable SMU_CKS_LOOKUPTable;

#endif


/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef SMU71_DISCRETE_H
#define SMU71_DISCRETE_H

#include "smu71.h"

#if !defined(SMC_MICROCODE)
#pragma pack(push, 1)
#endif

#define VDDC_ON_SVI2  0x1
#define VDDCI_ON_SVI2 0x2
#define MVDD_ON_SVI2  0x4

struct SMU71_Discrete_VoltageLevel
{
    uint16_t    Voltage;
    uint16_t    StdVoltageHiSidd;
    uint16_t    StdVoltageLoSidd;
    uint8_t     Smio;
    uint8_t     padding;
};

typedef struct SMU71_Discrete_VoltageLevel SMU71_Discrete_VoltageLevel;

struct SMU71_Discrete_GraphicsLevel
{
    uint32_t    MinVddc;
    uint32_t    MinVddcPhases;

    uint32_t    SclkFrequency;

    uint8_t     pcieDpmLevel;
    uint8_t     DeepSleepDivId;
    uint16_t    ActivityLevel;

    uint32_t    CgSpllFuncCntl3;
    uint32_t    CgSpllFuncCntl4;
    uint32_t    SpllSpreadSpectrum;
    uint32_t    SpllSpreadSpectrum2;
    uint32_t    CcPwrDynRm;
    uint32_t    CcPwrDynRm1;
    uint8_t     SclkDid;
    uint8_t     DisplayWatermark;
    uint8_t     EnabledForActivity;
    uint8_t     EnabledForThrottle;
    uint8_t     UpHyst;
    uint8_t     DownHyst;
    uint8_t     VoltageDownHyst;
    uint8_t     PowerThrottle;
};

typedef struct SMU71_Discrete_GraphicsLevel SMU71_Discrete_GraphicsLevel;

struct SMU71_Discrete_ACPILevel
{
    uint32_t    Flags;
    uint32_t    MinVddc;
    uint32_t    MinVddcPhases;
    uint32_t    SclkFrequency;
    uint8_t     SclkDid;
    uint8_t     DisplayWatermark;
    uint8_t     DeepSleepDivId;
    uint8_t     padding;
    uint32_t    CgSpllFuncCntl;
    uint32_t    CgSpllFuncCntl2;
    uint32_t    CgSpllFuncCntl3;
    uint32_t    CgSpllFuncCntl4;
    uint32_t    SpllSpreadSpectrum;
    uint32_t    SpllSpreadSpectrum2;
    uint32_t    CcPwrDynRm;
    uint32_t    CcPwrDynRm1;
};

typedef struct SMU71_Discrete_ACPILevel SMU71_Discrete_ACPILevel;

struct SMU71_Discrete_Ulv
{
    uint32_t    CcPwrDynRm;
    uint32_t    CcPwrDynRm1;
    uint16_t    VddcOffset;
    uint8_t     VddcOffsetVid;
    uint8_t     VddcPhase;
    uint32_t    Reserved;
};

typedef struct SMU71_Discrete_Ulv SMU71_Discrete_Ulv;

struct SMU71_Discrete_MemoryLevel
{
    uint32_t    MinVddc;
    uint32_t    MinVddcPhases;
    uint32_t    MinVddci;
    uint32_t    MinMvdd;

    uint32_t    MclkFrequency;

    uint8_t     EdcReadEnable;
    uint8_t     EdcWriteEnable;
    uint8_t     RttEnable;
    uint8_t     StutterEnable;

    uint8_t     StrobeEnable;
    uint8_t     StrobeRatio;
    uint8_t     EnabledForThrottle;
    uint8_t     EnabledForActivity;

    uint8_t     UpHyst;
    uint8_t     DownHyst;
    uint8_t     VoltageDownHyst;
    uint8_t     padding;

    uint16_t    ActivityLevel;
    uint8_t     DisplayWatermark;
    uint8_t     padding1;

    uint32_t    MpllFuncCntl;
    uint32_t    MpllFuncCntl_1;
    uint32_t    MpllFuncCntl_2;
    uint32_t    MpllAdFuncCntl;
    uint32_t    MpllDqFuncCntl;
    uint32_t    MclkPwrmgtCntl;
    uint32_t    DllCntl;
    uint32_t    MpllSs1;
    uint32_t    MpllSs2;
};

typedef struct SMU71_Discrete_MemoryLevel SMU71_Discrete_MemoryLevel;

struct SMU71_Discrete_LinkLevel
{
    uint8_t     PcieGenSpeed;           ///< 0:PciE-gen1 1:PciE-gen2 2:PciE-gen3
    uint8_t     PcieLaneCount;          ///< 1=x1, 2=x2, 3=x4, 4=x8, 5=x12, 6=x16
    uint8_t     EnabledForActivity;
    uint8_t     SPC;
    uint32_t    DownThreshold;
    uint32_t    UpThreshold;
    uint32_t    Reserved;
};

typedef struct SMU71_Discrete_LinkLevel SMU71_Discrete_LinkLevel;


#ifdef SMU__DYNAMIC_MCARB_SETTINGS
// MC ARB DRAM Timing registers.
struct SMU71_Discrete_MCArbDramTimingTableEntry
{
    uint32_t McArbDramTiming;
    uint32_t McArbDramTiming2;
    uint8_t  McArbBurstTime;
    uint8_t  padding[3];
};

typedef struct SMU71_Discrete_MCArbDramTimingTableEntry SMU71_Discrete_MCArbDramTimingTableEntry;

struct SMU71_Discrete_MCArbDramTimingTable
{
    SMU71_Discrete_MCArbDramTimingTableEntry entries[SMU__NUM_SCLK_DPM_STATE][SMU__NUM_MCLK_DPM_LEVELS];
};

typedef struct SMU71_Discrete_MCArbDramTimingTable SMU71_Discrete_MCArbDramTimingTable;
#endif

// UVD VCLK/DCLK state (level) definition.
struct SMU71_Discrete_UvdLevel
{
    uint32_t VclkFrequency;
    uint32_t DclkFrequency;
    uint16_t MinVddc;
    uint8_t  MinVddcPhases;
    uint8_t  VclkDivider;
    uint8_t  DclkDivider;
    uint8_t  padding[3];
};

typedef struct SMU71_Discrete_UvdLevel SMU71_Discrete_UvdLevel;

// Clocks for other external blocks (VCE, ACP, SAMU).
struct SMU71_Discrete_ExtClkLevel
{
    uint32_t Frequency;
    uint16_t MinVoltage;
    uint8_t  MinPhases;
    uint8_t  Divider;
};

typedef struct SMU71_Discrete_ExtClkLevel SMU71_Discrete_ExtClkLevel;

// Everything that we need to keep track of about the current state.
// Use this instead of copies of the GraphicsLevel and MemoryLevel structures to keep track of state parameters
// that need to be checked later.
// We don't need to cache everything about a state, just a few parameters.
struct SMU71_Discrete_StateInfo
{
    uint32_t SclkFrequency;
    uint32_t MclkFrequency;
    uint32_t VclkFrequency;
    uint32_t DclkFrequency;
    uint32_t SamclkFrequency;
    uint32_t AclkFrequency;
    uint32_t EclkFrequency;
    uint16_t MvddVoltage;
    uint16_t padding16;
    uint8_t  DisplayWatermark;
    uint8_t  McArbIndex;
    uint8_t  McRegIndex;
    uint8_t  SeqIndex;
    uint8_t  SclkDid;
    int8_t   SclkIndex;
    int8_t   MclkIndex;
    uint8_t  PCIeGen;

};

typedef struct SMU71_Discrete_StateInfo SMU71_Discrete_StateInfo;


struct SMU71_Discrete_DpmTable
{
    // Multi-DPM controller settings
    SMU71_PIDController                  GraphicsPIDController;
    SMU71_PIDController                  MemoryPIDController;
    SMU71_PIDController                  LinkPIDController;

    uint32_t                            SystemFlags;

    // SMIO masks for voltage and phase controls
    uint32_t                            SmioMaskVddcVid;
    uint32_t                            SmioMaskVddcPhase;
    uint32_t                            SmioMaskVddciVid;
    uint32_t                            SmioMaskMvddVid;

    uint32_t                            VddcLevelCount;
    uint32_t                            VddciLevelCount;
    uint32_t                            MvddLevelCount;

    SMU71_Discrete_VoltageLevel          VddcLevel               [SMU71_MAX_LEVELS_VDDC];
    SMU71_Discrete_VoltageLevel          VddciLevel              [SMU71_MAX_LEVELS_VDDCI];
    SMU71_Discrete_VoltageLevel          MvddLevel               [SMU71_MAX_LEVELS_MVDD];

    uint8_t                             GraphicsDpmLevelCount;
    uint8_t                             MemoryDpmLevelCount;
    uint8_t                             LinkLevelCount;
    uint8_t                             MasterDeepSleepControl;

    uint32_t                            Reserved[5];

    // State table entries for each DPM state
    SMU71_Discrete_GraphicsLevel         GraphicsLevel           [SMU71_MAX_LEVELS_GRAPHICS];
    SMU71_Discrete_MemoryLevel           MemoryACPILevel;
    SMU71_Discrete_MemoryLevel           MemoryLevel             [SMU71_MAX_LEVELS_MEMORY];
    SMU71_Discrete_LinkLevel             LinkLevel               [SMU71_MAX_LEVELS_LINK];
    SMU71_Discrete_ACPILevel             ACPILevel;

    uint32_t                            SclkStepSize;
    uint32_t                            Smio                    [SMU71_MAX_ENTRIES_SMIO];

    uint8_t                             GraphicsBootLevel;
    uint8_t                             GraphicsVoltageChangeEnable;
    uint8_t                             GraphicsThermThrottleEnable;
    uint8_t                             GraphicsInterval;

    uint8_t                             VoltageInterval;
    uint8_t                             ThermalInterval;
    uint16_t                            TemperatureLimitHigh;

    uint16_t                            TemperatureLimitLow;
    uint8_t                             MemoryBootLevel;
    uint8_t                             MemoryVoltageChangeEnable;

    uint8_t                             MemoryInterval;
    uint8_t                             MemoryThermThrottleEnable;
    uint8_t                             MergedVddci;
    uint8_t                             padding2;

    uint16_t                            VoltageResponseTime;
    uint16_t                            PhaseResponseTime;

    uint8_t                             PCIeBootLinkLevel;
    uint8_t                             PCIeGenInterval;
    uint8_t                             DTEInterval;
    uint8_t                             DTEMode;

    uint8_t                             SVI2Enable;
    uint8_t                             VRHotGpio;
    uint8_t                             AcDcGpio;
    uint8_t                             ThermGpio;

    uint32_t                            DisplayCac;

    uint16_t                            MaxPwr;
    uint16_t                            NomPwr;

    uint16_t                            FpsHighThreshold;
    uint16_t                            FpsLowThreshold;

    uint16_t                            BAPMTI_R  [SMU71_DTE_ITERATIONS][SMU71_DTE_SOURCES][SMU71_DTE_SINKS];
    uint16_t                            BAPMTI_RC [SMU71_DTE_ITERATIONS][SMU71_DTE_SOURCES][SMU71_DTE_SINKS];

    uint8_t                             DTEAmbientTempBase;
    uint8_t                             DTETjOffset;
    uint8_t                             GpuTjMax;
    uint8_t                             GpuTjHyst;

    uint16_t                            BootVddc;
    uint16_t                            BootVddci;

    uint16_t                            BootMVdd;
    uint16_t                            padding;

    uint32_t                            BAPM_TEMP_GRADIENT;

    uint32_t                            LowSclkInterruptThreshold;
    uint32_t                            VddGfxReChkWait;

    uint16_t                            PPM_PkgPwrLimit;
    uint16_t                            PPM_TemperatureLimit;

    uint16_t                            DefaultTdp;
    uint16_t                            TargetTdp;
};

typedef struct SMU71_Discrete_DpmTable SMU71_Discrete_DpmTable;

// --------------------------------------------------- AC Timing Parameters ------------------------------------------------
#define SMU71_DISCRETE_MC_REGISTER_ARRAY_SIZE 16
#define SMU71_DISCRETE_MC_REGISTER_ARRAY_SET_COUNT SMU71_MAX_LEVELS_MEMORY

struct SMU71_Discrete_MCRegisterAddress
{
    uint16_t s0;
    uint16_t s1;
};

typedef struct SMU71_Discrete_MCRegisterAddress SMU71_Discrete_MCRegisterAddress;

struct SMU71_Discrete_MCRegisterSet
{
    uint32_t value[SMU71_DISCRETE_MC_REGISTER_ARRAY_SIZE];
};

typedef struct SMU71_Discrete_MCRegisterSet SMU71_Discrete_MCRegisterSet;

struct SMU71_Discrete_MCRegisters
{
    uint8_t                             last;
    uint8_t                             reserved[3];
    SMU71_Discrete_MCRegisterAddress     address[SMU71_DISCRETE_MC_REGISTER_ARRAY_SIZE];
    SMU71_Discrete_MCRegisterSet         data[SMU71_DISCRETE_MC_REGISTER_ARRAY_SET_COUNT];
};

typedef struct SMU71_Discrete_MCRegisters SMU71_Discrete_MCRegisters;


// --------------------------------------------------- Fan Table -----------------------------------------------------------
struct SMU71_Discrete_FanTable
{
    uint16_t FdoMode;
    int16_t  TempMin;
    int16_t  TempMed;
    int16_t  TempMax;
    int16_t  Slope1;
    int16_t  Slope2;
    int16_t  FdoMin;
    int16_t  HystUp;
    int16_t  HystDown;
    int16_t  HystSlope;
    int16_t  TempRespLim;
    int16_t  TempCurr;
    int16_t  SlopeCurr;
    int16_t  PwmCurr;
    uint32_t RefreshPeriod;
    int16_t  FdoMax;
    uint8_t  TempSrc;
    int8_t   Padding;
};

typedef struct SMU71_Discrete_FanTable SMU71_Discrete_FanTable;

#define SMU7_DISCRETE_GPIO_SCLK_DEBUG             4
#define SMU7_DISCRETE_GPIO_SCLK_DEBUG_BIT         (0x1 << SMU7_DISCRETE_GPIO_SCLK_DEBUG)

struct SMU71_MclkDpmScoreboard
{

    uint32_t PercentageBusy;

    int32_t  PIDError;
    int32_t  PIDIntegral;
    int32_t  PIDOutput;

    uint32_t SigmaDeltaAccum;
    uint32_t SigmaDeltaOutput;
    uint32_t SigmaDeltaLevel;

    uint32_t UtilizationSetpoint;

    uint8_t  TdpClampMode;
    uint8_t  TdcClampMode;
    uint8_t  ThermClampMode;
    uint8_t  VoltageBusy;

    int8_t   CurrLevel;
    int8_t   TargLevel;
    uint8_t  LevelChangeInProgress;
    uint8_t  UpHyst;

    uint8_t  DownHyst;
    uint8_t  VoltageDownHyst;
    uint8_t  DpmEnable;
    uint8_t  DpmRunning;

    uint8_t  DpmForce;
    uint8_t  DpmForceLevel;
    uint8_t  DisplayWatermark;
    uint8_t  McArbIndex;

    uint32_t MinimumPerfMclk;

    uint8_t  AcpiReq;
    uint8_t  AcpiAck;
    uint8_t  MclkSwitchInProgress;
    uint8_t  MclkSwitchCritical;

    uint8_t  TargetMclkIndex;
    uint8_t  TargetMvddIndex;
    uint8_t  MclkSwitchResult;

    uint8_t  EnabledLevelsChange;

    uint16_t LevelResidencyCounters [SMU71_MAX_LEVELS_MEMORY];
    uint16_t LevelSwitchCounters [SMU71_MAX_LEVELS_MEMORY];

    void     (*TargetStateCalculator)(uint8_t);
    void     (*SavedTargetStateCalculator)(uint8_t);

    uint16_t AutoDpmInterval;
    uint16_t AutoDpmRange;

    uint16_t  MclkSwitchingTime;
    uint8_t padding[2];
};

typedef struct SMU71_MclkDpmScoreboard SMU71_MclkDpmScoreboard;

struct SMU71_UlvScoreboard
{
    uint8_t     EnterUlv;
    uint8_t     ExitUlv;
    uint8_t     UlvActive;
    uint8_t     WaitingForUlv;
    uint8_t     UlvEnable;
    uint8_t     UlvRunning;
    uint8_t     UlvMasterEnable;
    uint8_t     padding;
    uint32_t    UlvAbortedCount;
    uint32_t    UlvTimeStamp;
};

typedef struct SMU71_UlvScoreboard SMU71_UlvScoreboard;

struct SMU71_VddGfxScoreboard
{
    uint8_t     VddGfxEnable;
    uint8_t     VddGfxActive;
    uint8_t     padding[2];

    uint32_t    VddGfxEnteredCount;
    uint32_t    VddGfxAbortedCount;
};

typedef struct SMU71_VddGfxScoreboard SMU71_VddGfxScoreboard;

struct SMU71_AcpiScoreboard {
  uint32_t SavedInterruptMask[2];
  uint8_t LastACPIRequest;
  uint8_t CgBifResp;
  uint8_t RequestType;
  uint8_t Padding;
  SMU71_Discrete_ACPILevel D0Level;
};

typedef struct SMU71_AcpiScoreboard SMU71_AcpiScoreboard;


struct SMU71_Discrete_PmFuses {
  // dw0-dw1
  uint8_t BapmVddCVidHiSidd[8];

  // dw2-dw3
  uint8_t BapmVddCVidLoSidd[8];

  // dw4-dw5
  uint8_t VddCVid[8];

  // dw6
  uint8_t SviLoadLineEn;
  uint8_t SviLoadLineVddC;
  uint8_t SviLoadLineTrimVddC;
  uint8_t SviLoadLineOffsetVddC;

  // dw7
  uint16_t TDC_VDDC_PkgLimit;
  uint8_t TDC_VDDC_ThrottleReleaseLimitPerc;
  uint8_t TDC_MAWt;

  // dw8
  uint8_t TdcWaterfallCtl;
  uint8_t LPMLTemperatureMin;
  uint8_t LPMLTemperatureMax;
  uint8_t Reserved;

  // dw9-dw12
  uint8_t LPMLTemperatureScaler[16];

  // dw13-dw14
  int16_t FuzzyFan_ErrorSetDelta;
  int16_t FuzzyFan_ErrorRateSetDelta;
  int16_t FuzzyFan_PwmSetDelta;
  uint16_t Reserved6;

  // dw15
  uint8_t GnbLPML[16];

  // dw15
  uint8_t GnbLPMLMaxVid;
  uint8_t GnbLPMLMinVid;
  uint8_t Reserved1[2];

  // dw16
  uint16_t BapmVddCBaseLeakageHiSidd;
  uint16_t BapmVddCBaseLeakageLoSidd;
};

typedef struct SMU71_Discrete_PmFuses SMU71_Discrete_PmFuses;

struct SMU71_Discrete_Log_Header_Table {
  uint32_t    version;
  uint32_t    asic_id;
  uint16_t    flags;
  uint16_t    entry_size;
  uint32_t    total_size;
  uint32_t    num_of_entries;
  uint8_t     type;
  uint8_t     mode;
  uint8_t     filler_0[2];
  uint32_t    filler_1[2];
};

typedef struct SMU71_Discrete_Log_Header_Table SMU71_Discrete_Log_Header_Table;

struct SMU71_Discrete_Log_Cntl {
    uint8_t             Enabled;
    uint8_t             Type;
    uint8_t             padding[2];
    uint32_t            BufferSize;
    uint32_t            SamplesLogged;
    uint32_t            SampleSize;
    uint32_t            AddrL;
    uint32_t            AddrH;
};

typedef struct SMU71_Discrete_Log_Cntl SMU71_Discrete_Log_Cntl;

#if defined SMU__DGPU_ONLY
  #define CAC_ACC_NW_NUM_OF_SIGNALS 83
#endif


struct SMU71_Discrete_Cac_Collection_Table {
  uint32_t temperature;
  uint32_t cac_acc_nw[CAC_ACC_NW_NUM_OF_SIGNALS];
  uint32_t filler[4];
};

typedef struct SMU71_Discrete_Cac_Collection_Table SMU71_Discrete_Cac_Collection_Table;

struct SMU71_Discrete_Cac_Verification_Table {
  uint32_t VddcTotalPower;
  uint32_t VddcLeakagePower;
  uint32_t VddcConstantPower;
  uint32_t VddcGfxDynamicPower;
  uint32_t VddcUvdDynamicPower;
  uint32_t VddcVceDynamicPower;
  uint32_t VddcAcpDynamicPower;
  uint32_t VddcPcieDynamicPower;
  uint32_t VddcDceDynamicPower;
  uint32_t VddcCurrent;
  uint32_t VddcVoltage;
  uint32_t VddciTotalPower;
  uint32_t VddciLeakagePower;
  uint32_t VddciConstantPower;
  uint32_t VddciDynamicPower;
  uint32_t Vddr1TotalPower;
  uint32_t Vddr1LeakagePower;
  uint32_t Vddr1ConstantPower;
  uint32_t Vddr1DynamicPower;
  uint32_t spare[8];
  uint32_t temperature;
};

typedef struct SMU71_Discrete_Cac_Verification_Table SMU71_Discrete_Cac_Verification_Table;

#if !defined(SMC_MICROCODE)
#pragma pack(pop)
#endif


#endif

/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef SMU71_H
#define SMU71_H

#if !defined(SMC_MICROCODE)
#pragma pack(push, 1)
#endif

#define SMU__NUM_PCIE_DPM_LEVELS 8
#define SMU__NUM_SCLK_DPM_STATE 8
#define SMU__NUM_MCLK_DPM_LEVELS 4
#define SMU__VARIANT__ICELAND 1
#define SMU__DGPU_ONLY 1
#define SMU__DYNAMIC_MCARB_SETTINGS 1

enum SID_OPTION {
  SID_OPTION_HI,
  SID_OPTION_LO,
  SID_OPTION_COUNT
};

typedef struct {
  uint32_t high;
  uint32_t low;
} data_64_t;

typedef struct {
  data_64_t high;
  data_64_t low;
} data_128_t;

#define SMU7_CONTEXT_ID_SMC        1
#define SMU7_CONTEXT_ID_VBIOS      2

#define SMU71_MAX_LEVELS_VDDC            8
#define SMU71_MAX_LEVELS_VDDCI           4
#define SMU71_MAX_LEVELS_MVDD            4
#define SMU71_MAX_LEVELS_VDDNB           8

#define SMU71_MAX_LEVELS_GRAPHICS        SMU__NUM_SCLK_DPM_STATE
#define SMU71_MAX_LEVELS_MEMORY          SMU__NUM_MCLK_DPM_LEVELS
#define SMU71_MAX_LEVELS_GIO             SMU__NUM_LCLK_DPM_LEVELS
#define SMU71_MAX_LEVELS_LINK            SMU__NUM_PCIE_DPM_LEVELS
#define SMU71_MAX_ENTRIES_SMIO           32

#define DPM_NO_LIMIT 0
#define DPM_NO_UP 1
#define DPM_GO_DOWN 2
#define DPM_GO_UP 3

#define SMU7_FIRST_DPM_GRAPHICS_LEVEL    0
#define SMU7_FIRST_DPM_MEMORY_LEVEL      0

#define GPIO_CLAMP_MODE_VRHOT      1
#define GPIO_CLAMP_MODE_THERM      2
#define GPIO_CLAMP_MODE_DC         4

#define SCRATCH_B_TARG_PCIE_INDEX_SHIFT 0
#define SCRATCH_B_TARG_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_TARG_PCIE_INDEX_SHIFT)
#define SCRATCH_B_CURR_PCIE_INDEX_SHIFT 3
#define SCRATCH_B_CURR_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_CURR_PCIE_INDEX_SHIFT)
#define SCRATCH_B_TARG_UVD_INDEX_SHIFT  6
#define SCRATCH_B_TARG_UVD_INDEX_MASK   (0x7<<SCRATCH_B_TARG_UVD_INDEX_SHIFT)
#define SCRATCH_B_CURR_UVD_INDEX_SHIFT  9
#define SCRATCH_B_CURR_UVD_INDEX_MASK   (0x7<<SCRATCH_B_CURR_UVD_INDEX_SHIFT)
#define SCRATCH_B_TARG_VCE_INDEX_SHIFT  12
#define SCRATCH_B_TARG_VCE_INDEX_MASK   (0x7<<SCRATCH_B_TARG_VCE_INDEX_SHIFT)
#define SCRATCH_B_CURR_VCE_INDEX_SHIFT  15
#define SCRATCH_B_CURR_VCE_INDEX_MASK   (0x7<<SCRATCH_B_CURR_VCE_INDEX_SHIFT)
#define SCRATCH_B_TARG_ACP_INDEX_SHIFT  18
#define SCRATCH_B_TARG_ACP_INDEX_MASK   (0x7<<SCRATCH_B_TARG_ACP_INDEX_SHIFT)
#define SCRATCH_B_CURR_ACP_INDEX_SHIFT  21
#define SCRATCH_B_CURR_ACP_INDEX_MASK   (0x7<<SCRATCH_B_CURR_ACP_INDEX_SHIFT)
#define SCRATCH_B_TARG_SAMU_INDEX_SHIFT 24
#define SCRATCH_B_TARG_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_TARG_SAMU_INDEX_SHIFT)
#define SCRATCH_B_CURR_SAMU_INDEX_SHIFT 27
#define SCRATCH_B_CURR_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_CURR_SAMU_INDEX_SHIFT)


#if defined SMU__DGPU_ONLY
#define SMU71_DTE_ITERATIONS 5
#define SMU71_DTE_SOURCES 3
#define SMU71_DTE_SINKS 1
#define SMU71_NUM_CPU_TES 0
#define SMU71_NUM_GPU_TES 1
#define SMU71_NUM_NON_TES 2

#endif

#if defined SMU__FUSION_ONLY
#define SMU7_DTE_ITERATIONS 5
#define SMU7_DTE_SOURCES 5
#define SMU7_DTE_SINKS 3
#define SMU7_NUM_CPU_TES 2
#define SMU7_NUM_GPU_TES 1
#define SMU7_NUM_NON_TES 2

#endif

struct SMU71_PIDController
{
    uint32_t Ki;
    int32_t LFWindupUpperLim;
    int32_t LFWindupLowerLim;
    uint32_t StatePrecision;
    uint32_t LfPrecision;
    uint32_t LfOffset;
    uint32_t MaxState;
    uint32_t MaxLfFraction;
    uint32_t StateShift;
};

typedef struct SMU71_PIDController SMU71_PIDController;

struct SMU7_LocalDpmScoreboard
{
    uint32_t PercentageBusy;

    int32_t  PIDError;
    int32_t  PIDIntegral;
    int32_t  PIDOutput;

    uint32_t SigmaDeltaAccum;
    uint32_t SigmaDeltaOutput;
    uint32_t SigmaDeltaLevel;

    uint32_t UtilizationSetpoint;

    uint8_t  TdpClampMode;
    uint8_t  TdcClampMode;
    uint8_t  ThermClampMode;
    uint8_t  VoltageBusy;

    int8_t   CurrLevel;
    int8_t   TargLevel;
    uint8_t  LevelChangeInProgress;
    uint8_t  UpHyst;

    uint8_t  DownHyst;
    uint8_t  VoltageDownHyst;
    uint8_t  DpmEnable;
    uint8_t  DpmRunning;

    uint8_t  DpmForce;
    uint8_t  DpmForceLevel;
    uint8_t  DisplayWatermark;
    uint8_t  McArbIndex;

    uint32_t MinimumPerfSclk;

    uint8_t  AcpiReq;
    uint8_t  AcpiAck;
    uint8_t  GfxClkSlow;
    uint8_t  GpioClampMode;

    uint8_t  FpsFilterWeight;
    uint8_t  EnabledLevelsChange;
    uint8_t  DteClampMode;
    uint8_t  FpsClampMode;

    uint16_t LevelResidencyCounters [SMU71_MAX_LEVELS_GRAPHICS];
    uint16_t LevelSwitchCounters [SMU71_MAX_LEVELS_GRAPHICS];

    void     (*TargetStateCalculator)(uint8_t);
    void     (*SavedTargetStateCalculator)(uint8_t);

    uint16_t AutoDpmInterval;
    uint16_t AutoDpmRange;

    uint8_t  FpsEnabled;
    uint8_t  MaxPerfLevel;
    uint8_t  AllowLowClkInterruptToHost;
    uint8_t  FpsRunning;

    uint32_t MaxAllowedFrequency;
};

typedef struct SMU7_LocalDpmScoreboard SMU7_LocalDpmScoreboard;

#define SMU7_MAX_VOLTAGE_CLIENTS 12

struct SMU7_VoltageScoreboard
{
    uint16_t CurrentVoltage;
    uint16_t HighestVoltage;
    uint16_t MaxVid;
    uint8_t  HighestVidOffset;
    uint8_t  CurrentVidOffset;
#if defined (SMU__DGPU_ONLY)
    uint8_t  CurrentPhases;
    uint8_t  HighestPhases;
#else
    uint8_t  AvsOffset;
    uint8_t  AvsOffsetApplied;
#endif
    uint8_t  ControllerBusy;
    uint8_t  CurrentVid;
    uint16_t RequestedVoltage[SMU7_MAX_VOLTAGE_CLIENTS];
#if defined (SMU__DGPU_ONLY)
    uint8_t  RequestedPhases[SMU7_MAX_VOLTAGE_CLIENTS];
#endif
    uint8_t  EnabledRequest[SMU7_MAX_VOLTAGE_CLIENTS];
    uint8_t  TargetIndex;
    uint8_t  Delay;
    uint8_t  ControllerEnable;
    uint8_t  ControllerRunning;
    uint16_t CurrentStdVoltageHiSidd;
    uint16_t CurrentStdVoltageLoSidd;
#if defined (SMU__DGPU_ONLY)
    uint16_t RequestedVddci;
    uint16_t CurrentVddci;
    uint16_t HighestVddci;
    uint8_t  CurrentVddciVid;
    uint8_t  TargetVddciIndex;
#endif
};

typedef struct SMU7_VoltageScoreboard SMU7_VoltageScoreboard;

// -------------------------------------------------------------------------------------------------------------------------
#define SMU7_MAX_PCIE_LINK_SPEEDS 3 /* 0:Gen1 1:Gen2 2:Gen3 */

struct SMU7_PCIeLinkSpeedScoreboard
{
    uint8_t     DpmEnable;
    uint8_t     DpmRunning;
    uint8_t     DpmForce;
    uint8_t     DpmForceLevel;

    uint8_t     CurrentLinkSpeed;
    uint8_t     EnabledLevelsChange;
    uint16_t    AutoDpmInterval;

    uint16_t    AutoDpmRange;
    uint16_t    AutoDpmCount;

    uint8_t     DpmMode;
    uint8_t     AcpiReq;
    uint8_t     AcpiAck;
    uint8_t     CurrentLinkLevel;

};

typedef struct SMU7_PCIeLinkSpeedScoreboard SMU7_PCIeLinkSpeedScoreboard;

// -------------------------------------------------------- CAC table ------------------------------------------------------
#define SMU7_LKGE_LUT_NUM_OF_TEMP_ENTRIES 16
#define SMU7_LKGE_LUT_NUM_OF_VOLT_ENTRIES 16

#define SMU7_SCALE_I  7
#define SMU7_SCALE_R 12

struct SMU7_PowerScoreboard
{
    uint16_t   MinVoltage;
    uint16_t   MaxVoltage;

    uint32_t   AvgGpuPower;

    uint16_t   VddcLeakagePower[SID_OPTION_COUNT];
    uint16_t   VddcSclkConstantPower[SID_OPTION_COUNT];
    uint16_t   VddcSclkDynamicPower[SID_OPTION_COUNT];
    uint16_t   VddcNonSclkDynamicPower[SID_OPTION_COUNT];
    uint16_t   VddcTotalPower[SID_OPTION_COUNT];
    uint16_t   VddcTotalCurrent[SID_OPTION_COUNT];
    uint16_t   VddcLoadVoltage[SID_OPTION_COUNT];
    uint16_t   VddcNoLoadVoltage[SID_OPTION_COUNT];

    uint16_t   DisplayPhyPower;
    uint16_t   PciePhyPower;

    uint16_t   VddciTotalPower;
    uint16_t   Vddr1TotalPower;

    uint32_t   RocPower;

    uint32_t   last_power;
    uint32_t   enableWinAvg;

    uint32_t   lkg_acc;
    uint16_t   VoltLkgeScaler;
    uint16_t   TempLkgeScaler;

    uint32_t   uvd_cac_dclk;
    uint32_t   uvd_cac_vclk;
    uint32_t   vce_cac_eclk;
    uint32_t   samu_cac_samclk;
    uint32_t   display_cac_dispclk;
    uint32_t   acp_cac_aclk;
    uint32_t   unb_cac;

    uint32_t   WinTime;

    uint16_t  GpuPwr_MAWt;
    uint16_t  FilteredVddcTotalPower;

    uint8_t   CalculationRepeats;
    uint8_t   WaterfallUp;
    uint8_t   WaterfallDown;
    uint8_t   WaterfallLimit;
};

typedef struct SMU7_PowerScoreboard SMU7_PowerScoreboard;

// --------------------------------------------------------------------------------------------------

struct SMU7_ThermalScoreboard
{
   int16_t  GpuLimit;
   int16_t  GpuHyst;
   uint16_t CurrGnbTemp;
   uint16_t FilteredGnbTemp;
   uint8_t  ControllerEnable;
   uint8_t  ControllerRunning;
   uint8_t  WaterfallUp;
   uint8_t  WaterfallDown;
   uint8_t  WaterfallLimit;
   uint8_t  padding[3];
};

typedef struct SMU7_ThermalScoreboard SMU7_ThermalScoreboard;

// For FeatureEnables:
#define SMU7_SCLK_DPM_CONFIG_MASK                        0x01
#define SMU7_VOLTAGE_CONTROLLER_CONFIG_MASK              0x02
#define SMU7_THERMAL_CONTROLLER_CONFIG_MASK              0x04
#define SMU7_MCLK_DPM_CONFIG_MASK                        0x08
#define SMU7_UVD_DPM_CONFIG_MASK                         0x10
#define SMU7_VCE_DPM_CONFIG_MASK                         0x20
#define SMU7_ACP_DPM_CONFIG_MASK                         0x40
#define SMU7_SAMU_DPM_CONFIG_MASK                        0x80
#define SMU7_PCIEGEN_DPM_CONFIG_MASK                    0x100

#define SMU7_ACP_MCLK_HANDSHAKE_DISABLE                  0x00000001
#define SMU7_ACP_SCLK_HANDSHAKE_DISABLE                  0x00000002
#define SMU7_UVD_MCLK_HANDSHAKE_DISABLE                  0x00000100
#define SMU7_UVD_SCLK_HANDSHAKE_DISABLE                  0x00000200
#define SMU7_VCE_MCLK_HANDSHAKE_DISABLE                  0x00010000
#define SMU7_VCE_SCLK_HANDSHAKE_DISABLE                  0x00020000

// All 'soft registers' should be uint32_t.
struct SMU71_SoftRegisters
{
    uint32_t        RefClockFrequency;
    uint32_t        PmTimerPeriod;
    uint32_t        FeatureEnables;
#if defined (SMU__DGPU_ONLY)
    uint32_t        PreVBlankGap;
    uint32_t        VBlankTimeout;
    uint32_t        TrainTimeGap;
    uint32_t        MvddSwitchTime;
    uint32_t        LongestAcpiTrainTime;
    uint32_t        AcpiDelay;
    uint32_t        G5TrainTime;
    uint32_t        DelayMpllPwron;
    uint32_t        VoltageChangeTimeout;
#endif
    uint32_t        HandshakeDisables;

    uint8_t         DisplayPhy1Config;
    uint8_t         DisplayPhy2Config;
    uint8_t         DisplayPhy3Config;
    uint8_t         DisplayPhy4Config;

    uint8_t         DisplayPhy5Config;
    uint8_t         DisplayPhy6Config;
    uint8_t         DisplayPhy7Config;
    uint8_t         DisplayPhy8Config;

    uint32_t        AverageGraphicsActivity;
    uint32_t        AverageMemoryActivity;
    uint32_t        AverageGioActivity;

    uint8_t         SClkDpmEnabledLevels;
    uint8_t         MClkDpmEnabledLevels;
    uint8_t         LClkDpmEnabledLevels;
    uint8_t         PCIeDpmEnabledLevels;

    uint32_t        DRAM_LOG_ADDR_H;
    uint32_t        DRAM_LOG_ADDR_L;
    uint32_t        DRAM_LOG_PHY_ADDR_H;
    uint32_t        DRAM_LOG_PHY_ADDR_L;
    uint32_t        DRAM_LOG_BUFF_SIZE;
    uint32_t        UlvEnterCount;
    uint32_t        UlvTime;
    uint32_t        UcodeLoadStatus;
    uint8_t         DPMFreezeAndForced;
    uint8_t         Activity_Weight;
    uint8_t         Reserved8[2];
    uint32_t        Reserved;
};

typedef struct SMU71_SoftRegisters SMU71_SoftRegisters;

struct SMU71_Firmware_Header
{
    uint32_t Digest[5];
    uint32_t Version;
    uint32_t HeaderSize;
    uint32_t Flags;
    uint32_t EntryPoint;
    uint32_t CodeSize;
    uint32_t ImageSize;

    uint32_t Rtos;
    uint32_t SoftRegisters;
    uint32_t DpmTable;
    uint32_t FanTable;
    uint32_t CacConfigTable;
    uint32_t CacStatusTable;

    uint32_t mcRegisterTable;

    uint32_t mcArbDramTimingTable;

    uint32_t PmFuseTable;
    uint32_t Globals;
    uint32_t UvdDpmTable;
    uint32_t AcpDpmTable;
    uint32_t VceDpmTable;
    uint32_t SamuDpmTable;
    uint32_t UlvSettings;
    uint32_t Reserved[37];
    uint32_t Signature;
};

typedef struct SMU71_Firmware_Header SMU71_Firmware_Header;

struct SMU7_HystController_Data
{
    uint8_t waterfall_up;
    uint8_t waterfall_down;
    uint8_t pstate;
    uint8_t clamp_mode;
};

typedef struct SMU7_HystController_Data SMU7_HystController_Data;

#define SMU71_FIRMWARE_HEADER_LOCATION 0x20000

enum  DisplayConfig {
    PowerDown = 1,
    DP54x4,
    DP54x2,
    DP54x1,
    DP27x4,
    DP27x2,
    DP27x1,
    HDMI297,
    HDMI162,
    LVDS,
    DP324x4,
    DP324x2,
    DP324x1
};

//#define SX_BLOCK_COUNT 8
//#define MC_BLOCK_COUNT 1
//#define CPL_BLOCK_COUNT 27

#if defined SMU__VARIANT__ICELAND
  #define SX_BLOCK_COUNT 8
  #define MC_BLOCK_COUNT 1
  #define CPL_BLOCK_COUNT 29
#endif

struct SMU7_Local_Cac {
  uint8_t BlockId;
  uint8_t SignalId;
  uint8_t Threshold;
  uint8_t Padding;
};

typedef struct SMU7_Local_Cac SMU7_Local_Cac;

struct SMU7_Local_Cac_Table {
  SMU7_Local_Cac SxLocalCac[SX_BLOCK_COUNT];
  SMU7_Local_Cac CplLocalCac[CPL_BLOCK_COUNT];
  SMU7_Local_Cac McLocalCac[MC_BLOCK_COUNT];
};

typedef struct SMU7_Local_Cac_Table SMU7_Local_Cac_Table;

#if !defined(SMC_MICROCODE)
#pragma pack(pop)
#endif

#endif

/*
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU7_H
#define SMU7_H

#pragma pack(push, 1)

#define SMU7_CONTEXT_ID_SMC        1
#define SMU7_CONTEXT_ID_VBIOS      2


#define SMU7_CONTEXT_ID_SMC        1
#define SMU7_CONTEXT_ID_VBIOS      2

#define SMU7_MAX_LEVELS_VDDC            8
#define SMU7_MAX_LEVELS_VDDCI           4
#define SMU7_MAX_LEVELS_MVDD            4
#define SMU7_MAX_LEVELS_VDDNB           8

#define SMU7_MAX_LEVELS_GRAPHICS        SMU__NUM_SCLK_DPM_STATE   // SCLK + SQ DPM + ULV
#define SMU7_MAX_LEVELS_MEMORY          SMU__NUM_MCLK_DPM_LEVELS   // MCLK Levels DPM
#define SMU7_MAX_LEVELS_GIO             SMU__NUM_LCLK_DPM_LEVELS  // LCLK Levels
#define SMU7_MAX_LEVELS_LINK            SMU__NUM_PCIE_DPM_LEVELS  // PCIe speed and number of lanes.
#define SMU7_MAX_LEVELS_UVD             8   // VCLK/DCLK levels for UVD.
#define SMU7_MAX_LEVELS_VCE             8   // ECLK levels for VCE.
#define SMU7_MAX_LEVELS_ACP             8   // ACLK levels for ACP.
#define SMU7_MAX_LEVELS_SAMU            8   // SAMCLK levels for SAMU.
#define SMU7_MAX_ENTRIES_SMIO           32  // Number of entries in SMIO table.

#define DPM_NO_LIMIT 0
#define DPM_NO_UP 1
#define DPM_GO_DOWN 2
#define DPM_GO_UP 3

#define SMU7_FIRST_DPM_GRAPHICS_LEVEL    0
#define SMU7_FIRST_DPM_MEMORY_LEVEL      0

#define GPIO_CLAMP_MODE_VRHOT      1
#define GPIO_CLAMP_MODE_THERM      2
#define GPIO_CLAMP_MODE_DC         4

#define SCRATCH_B_TARG_PCIE_INDEX_SHIFT 0
#define SCRATCH_B_TARG_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_TARG_PCIE_INDEX_SHIFT)
#define SCRATCH_B_CURR_PCIE_INDEX_SHIFT 3
#define SCRATCH_B_CURR_PCIE_INDEX_MASK  (0x7<<SCRATCH_B_CURR_PCIE_INDEX_SHIFT)
#define SCRATCH_B_TARG_UVD_INDEX_SHIFT  6
#define SCRATCH_B_TARG_UVD_INDEX_MASK   (0x7<<SCRATCH_B_TARG_UVD_INDEX_SHIFT)
#define SCRATCH_B_CURR_UVD_INDEX_SHIFT  9
#define SCRATCH_B_CURR_UVD_INDEX_MASK   (0x7<<SCRATCH_B_CURR_UVD_INDEX_SHIFT)
#define SCRATCH_B_TARG_VCE_INDEX_SHIFT  12
#define SCRATCH_B_TARG_VCE_INDEX_MASK   (0x7<<SCRATCH_B_TARG_VCE_INDEX_SHIFT)
#define SCRATCH_B_CURR_VCE_INDEX_SHIFT  15
#define SCRATCH_B_CURR_VCE_INDEX_MASK   (0x7<<SCRATCH_B_CURR_VCE_INDEX_SHIFT)
#define SCRATCH_B_TARG_ACP_INDEX_SHIFT  18
#define SCRATCH_B_TARG_ACP_INDEX_MASK   (0x7<<SCRATCH_B_TARG_ACP_INDEX_SHIFT)
#define SCRATCH_B_CURR_ACP_INDEX_SHIFT  21
#define SCRATCH_B_CURR_ACP_INDEX_MASK   (0x7<<SCRATCH_B_CURR_ACP_INDEX_SHIFT)
#define SCRATCH_B_TARG_SAMU_INDEX_SHIFT 24
#define SCRATCH_B_TARG_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_TARG_SAMU_INDEX_SHIFT)
#define SCRATCH_B_CURR_SAMU_INDEX_SHIFT 27
#define SCRATCH_B_CURR_SAMU_INDEX_MASK  (0x7<<SCRATCH_B_CURR_SAMU_INDEX_SHIFT)


/* Voltage Regulator Configuration */
/* VR Config info is contained in dpmTable */

#define VRCONF_VDDC_MASK         0x000000FF
#define VRCONF_VDDC_SHIFT        0
#define VRCONF_VDDGFX_MASK       0x0000FF00
#define VRCONF_VDDGFX_SHIFT      8
#define VRCONF_VDDCI_MASK        0x00FF0000
#define VRCONF_VDDCI_SHIFT       16
#define VRCONF_MVDD_MASK         0xFF000000
#define VRCONF_MVDD_SHIFT        24

#define VR_MERGED_WITH_VDDC      0
#define VR_SVI2_PLANE_1          1
#define VR_SVI2_PLANE_2          2
#define VR_SMIO_PATTERN_1        3
#define VR_SMIO_PATTERN_2        4
#define VR_STATIC_VOLTAGE        5

struct SMU7_PIDController
{
    uint32_t Ki;
    int32_t LFWindupUL;
    int32_t LFWindupLL;
    uint32_t StatePrecision;
    uint32_t LfPrecision;
    uint32_t LfOffset;
    uint32_t MaxState;
    uint32_t MaxLfFraction;
    uint32_t StateShift;
};

typedef struct SMU7_PIDController SMU7_PIDController;

// -------------------------------------------------------------------------------------------------------------------------
#define SMU7_MAX_PCIE_LINK_SPEEDS 3 /* 0:Gen1 1:Gen2 2:Gen3 */

#define SMU7_SCLK_DPM_CONFIG_MASK                        0x01
#define SMU7_VOLTAGE_CONTROLLER_CONFIG_MASK              0x02
#define SMU7_THERMAL_CONTROLLER_CONFIG_MASK              0x04
#define SMU7_MCLK_DPM_CONFIG_MASK                        0x08
#define SMU7_UVD_DPM_CONFIG_MASK                         0x10
#define SMU7_VCE_DPM_CONFIG_MASK                         0x20
#define SMU7_ACP_DPM_CONFIG_MASK                         0x40
#define SMU7_SAMU_DPM_CONFIG_MASK                        0x80
#define SMU7_PCIEGEN_DPM_CONFIG_MASK                    0x100

#define SMU7_ACP_MCLK_HANDSHAKE_DISABLE                  0x00000001
#define SMU7_ACP_SCLK_HANDSHAKE_DISABLE                  0x00000002
#define SMU7_UVD_MCLK_HANDSHAKE_DISABLE                  0x00000100
#define SMU7_UVD_SCLK_HANDSHAKE_DISABLE                  0x00000200
#define SMU7_VCE_MCLK_HANDSHAKE_DISABLE                  0x00010000
#define SMU7_VCE_SCLK_HANDSHAKE_DISABLE                  0x00020000

struct SMU7_Firmware_Header
{
    uint32_t Digest[5];
    uint32_t Version;
    uint32_t HeaderSize;
    uint32_t Flags;
    uint32_t EntryPoint;
    uint32_t CodeSize;
    uint32_t ImageSize;

    uint32_t Rtos;
    uint32_t SoftRegisters;
    uint32_t DpmTable;
    uint32_t FanTable;
    uint32_t CacConfigTable;
    uint32_t CacStatusTable;

    uint32_t mcRegisterTable;

    uint32_t mcArbDramTimingTable;

    uint32_t PmFuseTable;
    uint32_t Globals;
    uint32_t Reserved[42];
    uint32_t Signature;
};

typedef struct SMU7_Firmware_Header SMU7_Firmware_Header;

#define SMU7_FIRMWARE_HEADER_LOCATION 0x20000

enum  DisplayConfig {
    PowerDown = 1,
    DP54x4,
    DP54x2,
    DP54x1,
    DP27x4,
    DP27x2,
    DP27x1,
    HDMI297,
    HDMI162,
    LVDS,
    DP324x4,
    DP324x2,
    DP324x1
};

#pragma pack(pop)

#endif

/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU11_DRIVER_IF_H
#define SMU11_DRIVER_IF_H

// *** IMPORTANT ***
// SMU TEAM: Always increment the interface version if
// any structure is changed in this file
// Be aware of that the version should be updated in
// smu_v11_0.h, rename is also needed.
// #define SMU11_DRIVER_IF_VERSION 0x13

#define PPTABLE_V20_SMU_VERSION 3

#define NUM_GFXCLK_DPM_LEVELS  16
#define NUM_VCLK_DPM_LEVELS    8
#define NUM_DCLK_DPM_LEVELS    8
#define NUM_ECLK_DPM_LEVELS    8
#define NUM_MP0CLK_DPM_LEVELS  2
#define NUM_SOCCLK_DPM_LEVELS  8
#define NUM_UCLK_DPM_LEVELS    4
#define NUM_FCLK_DPM_LEVELS    8
#define NUM_DCEFCLK_DPM_LEVELS 8
#define NUM_DISPCLK_DPM_LEVELS 8
#define NUM_PIXCLK_DPM_LEVELS  8
#define NUM_PHYCLK_DPM_LEVELS  8
#define NUM_LINK_LEVELS        2
#define NUM_XGMI_LEVELS        2

#define MAX_GFXCLK_DPM_LEVEL  (NUM_GFXCLK_DPM_LEVELS  - 1)
#define MAX_VCLK_DPM_LEVEL    (NUM_VCLK_DPM_LEVELS    - 1)
#define MAX_DCLK_DPM_LEVEL    (NUM_DCLK_DPM_LEVELS    - 1)
#define MAX_ECLK_DPM_LEVEL    (NUM_ECLK_DPM_LEVELS    - 1)
#define MAX_MP0CLK_DPM_LEVEL  (NUM_MP0CLK_DPM_LEVELS  - 1)
#define MAX_SOCCLK_DPM_LEVEL  (NUM_SOCCLK_DPM_LEVELS  - 1)
#define MAX_UCLK_DPM_LEVEL    (NUM_UCLK_DPM_LEVELS    - 1)
#define MAX_FCLK_DPM_LEVEL    (NUM_FCLK_DPM_LEVELS    - 1)
#define MAX_DCEFCLK_DPM_LEVEL (NUM_DCEFCLK_DPM_LEVELS - 1)
#define MAX_DISPCLK_DPM_LEVEL (NUM_DISPCLK_DPM_LEVELS - 1)
#define MAX_PIXCLK_DPM_LEVEL  (NUM_PIXCLK_DPM_LEVELS  - 1)
#define MAX_PHYCLK_DPM_LEVEL  (NUM_PHYCLK_DPM_LEVELS  - 1)
#define MAX_LINK_LEVEL        (NUM_LINK_LEVELS        - 1)
#define MAX_XGMI_LEVEL        (NUM_XGMI_LEVELS        - 1)

#define PPSMC_GeminiModeNone   0
#define PPSMC_GeminiModeMaster 1
#define PPSMC_GeminiModeSlave  2


#define FEATURE_DPM_PREFETCHER_BIT      0
#define FEATURE_DPM_GFXCLK_BIT          1
#define FEATURE_DPM_UCLK_BIT            2
#define FEATURE_DPM_SOCCLK_BIT          3
#define FEATURE_DPM_UVD_BIT             4
#define FEATURE_DPM_VCE_BIT             5
#define FEATURE_ULV_BIT                 6
#define FEATURE_DPM_MP0CLK_BIT          7
#define FEATURE_DPM_LINK_BIT            8
#define FEATURE_DPM_DCEFCLK_BIT         9
#define FEATURE_DS_GFXCLK_BIT           10
#define FEATURE_DS_SOCCLK_BIT           11
#define FEATURE_DS_LCLK_BIT             12
#define FEATURE_PPT_BIT                 13
#define FEATURE_TDC_BIT                 14
#define FEATURE_THERMAL_BIT             15
#define FEATURE_GFX_PER_CU_CG_BIT       16
#define FEATURE_RM_BIT                  17
#define FEATURE_DS_DCEFCLK_BIT          18
#define FEATURE_ACDC_BIT                19
#define FEATURE_VR0HOT_BIT              20
#define FEATURE_VR1HOT_BIT              21
#define FEATURE_FW_CTF_BIT              22
#define FEATURE_LED_DISPLAY_BIT         23
#define FEATURE_FAN_CONTROL_BIT         24
#define FEATURE_GFX_EDC_BIT             25
#define FEATURE_GFXOFF_BIT              26
#define FEATURE_CG_BIT                  27
#define FEATURE_DPM_FCLK_BIT            28
#define FEATURE_DS_FCLK_BIT             29
#define FEATURE_DS_MP1CLK_BIT           30
#define FEATURE_DS_MP0CLK_BIT           31
#define FEATURE_XGMI_BIT                32
#define FEATURE_ECC_BIT                 33
#define FEATURE_SPARE_34_BIT            34
#define FEATURE_SPARE_35_BIT            35
#define FEATURE_SPARE_36_BIT            36
#define FEATURE_SPARE_37_BIT            37
#define FEATURE_SPARE_38_BIT            38
#define FEATURE_SPARE_39_BIT            39
#define FEATURE_SPARE_40_BIT            40
#define FEATURE_SPARE_41_BIT            41
#define FEATURE_SPARE_42_BIT            42
#define FEATURE_SPARE_43_BIT            43
#define FEATURE_SPARE_44_BIT            44
#define FEATURE_SPARE_45_BIT            45
#define FEATURE_SPARE_46_BIT            46
#define FEATURE_SPARE_47_BIT            47
#define FEATURE_SPARE_48_BIT            48
#define FEATURE_SPARE_49_BIT            49
#define FEATURE_SPARE_50_BIT            50
#define FEATURE_SPARE_51_BIT            51
#define FEATURE_SPARE_52_BIT            52
#define FEATURE_SPARE_53_BIT            53
#define FEATURE_SPARE_54_BIT            54
#define FEATURE_SPARE_55_BIT            55
#define FEATURE_SPARE_56_BIT            56
#define FEATURE_SPARE_57_BIT            57
#define FEATURE_SPARE_58_BIT            58
#define FEATURE_SPARE_59_BIT            59
#define FEATURE_SPARE_60_BIT            60
#define FEATURE_SPARE_61_BIT            61
#define FEATURE_SPARE_62_BIT            62
#define FEATURE_SPARE_63_BIT            63

#define NUM_FEATURES                    64

#define FEATURE_DPM_PREFETCHER_MASK     (1 << FEATURE_DPM_PREFETCHER_BIT     )
#define FEATURE_DPM_GFXCLK_MASK         (1 << FEATURE_DPM_GFXCLK_BIT         )
#define FEATURE_DPM_UCLK_MASK           (1 << FEATURE_DPM_UCLK_BIT           )
#define FEATURE_DPM_SOCCLK_MASK         (1 << FEATURE_DPM_SOCCLK_BIT         )
#define FEATURE_DPM_UVD_MASK            (1 << FEATURE_DPM_UVD_BIT            )
#define FEATURE_DPM_VCE_MASK            (1 << FEATURE_DPM_VCE_BIT            )
#define FEATURE_ULV_MASK                (1 << FEATURE_ULV_BIT                )
#define FEATURE_DPM_MP0CLK_MASK         (1 << FEATURE_DPM_MP0CLK_BIT         )
#define FEATURE_DPM_LINK_MASK           (1 << FEATURE_DPM_LINK_BIT           )
#define FEATURE_DPM_DCEFCLK_MASK        (1 << FEATURE_DPM_DCEFCLK_BIT        )
#define FEATURE_DS_GFXCLK_MASK          (1 << FEATURE_DS_GFXCLK_BIT          )
#define FEATURE_DS_SOCCLK_MASK          (1 << FEATURE_DS_SOCCLK_BIT          )
#define FEATURE_DS_LCLK_MASK            (1 << FEATURE_DS_LCLK_BIT            )
#define FEATURE_PPT_MASK                (1 << FEATURE_PPT_BIT                )
#define FEATURE_TDC_MASK                (1 << FEATURE_TDC_BIT                )
#define FEATURE_THERMAL_MASK            (1 << FEATURE_THERMAL_BIT            )
#define FEATURE_GFX_PER_CU_CG_MASK      (1 << FEATURE_GFX_PER_CU_CG_BIT      )
#define FEATURE_RM_MASK                 (1 << FEATURE_RM_BIT                 )
#define FEATURE_DS_DCEFCLK_MASK         (1 << FEATURE_DS_DCEFCLK_BIT         )
#define FEATURE_ACDC_MASK               (1 << FEATURE_ACDC_BIT               )
#define FEATURE_VR0HOT_MASK             (1 << FEATURE_VR0HOT_BIT             )
#define FEATURE_VR1HOT_MASK             (1 << FEATURE_VR1HOT_BIT             )
#define FEATURE_FW_CTF_MASK             (1 << FEATURE_FW_CTF_BIT             )
#define FEATURE_LED_DISPLAY_MASK        (1 << FEATURE_LED_DISPLAY_BIT        )
#define FEATURE_FAN_CONTROL_MASK        (1 << FEATURE_FAN_CONTROL_BIT        )
#define FEATURE_GFX_EDC_MASK            (1 << FEATURE_GFX_EDC_BIT            )
#define FEATURE_GFXOFF_MASK             (1 << FEATURE_GFXOFF_BIT             )
#define FEATURE_CG_MASK                 (1 << FEATURE_CG_BIT                 )
#define FEATURE_DPM_FCLK_MASK           (1 << FEATURE_DPM_FCLK_BIT           )
#define FEATURE_DS_FCLK_MASK            (1 << FEATURE_DS_FCLK_BIT            )
#define FEATURE_DS_MP1CLK_MASK          (1 << FEATURE_DS_MP1CLK_BIT          )
#define FEATURE_DS_MP0CLK_MASK          (1 << FEATURE_DS_MP0CLK_BIT          )
#define FEATURE_XGMI_MASK               (1ULL << FEATURE_XGMI_BIT               )
#define FEATURE_ECC_MASK                (1ULL << FEATURE_ECC_BIT                )

#define DPM_OVERRIDE_DISABLE_SOCCLK_PID             0x00000001
#define DPM_OVERRIDE_DISABLE_UCLK_PID               0x00000002
#define DPM_OVERRIDE_ENABLE_VOLT_LINK_UVD_SOCCLK    0x00000004
#define DPM_OVERRIDE_ENABLE_VOLT_LINK_UVD_UCLK      0x00000008
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_VCLK_SOCCLK   0x00000010
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_VCLK_UCLK     0x00000020
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_DCLK_SOCCLK   0x00000040
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_DCLK_UCLK     0x00000080
#define DPM_OVERRIDE_ENABLE_VOLT_LINK_VCE_SOCCLK    0x00000100
#define DPM_OVERRIDE_ENABLE_VOLT_LINK_VCE_UCLK      0x00000200
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_ECLK_SOCCLK   0x00000400
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_ECLK_UCLK     0x00000800
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_GFXCLK_SOCCLK 0x00001000
#define DPM_OVERRIDE_ENABLE_FREQ_LINK_GFXCLK_UCLK   0x00002000
#define DPM_OVERRIDE_ENABLE_GFXOFF_GFXCLK_SWITCH    0x00004000
#define DPM_OVERRIDE_ENABLE_GFXOFF_SOCCLK_SWITCH    0x00008000
#define DPM_OVERRIDE_ENABLE_GFXOFF_UCLK_SWITCH      0x00010000
#define DPM_OVERRIDE_ENABLE_GFXOFF_FCLK_SWITCH      0x00020000

#define I2C_CONTROLLER_ENABLED     1
#define I2C_CONTROLLER_DISABLED    0

#define VR_MAPPING_VR_SELECT_MASK  0x01
#define VR_MAPPING_VR_SELECT_SHIFT 0x00

#define VR_MAPPING_PLANE_SELECT_MASK  0x02
#define VR_MAPPING_PLANE_SELECT_SHIFT 0x01


#define PSI_SEL_VR0_PLANE0_PSI0  0x01
#define PSI_SEL_VR0_PLANE0_PSI1  0x02
#define PSI_SEL_VR0_PLANE1_PSI0  0x04
#define PSI_SEL_VR0_PLANE1_PSI1  0x08
#define PSI_SEL_VR1_PLANE0_PSI0  0x10
#define PSI_SEL_VR1_PLANE0_PSI1  0x20
#define PSI_SEL_VR1_PLANE1_PSI0  0x40
#define PSI_SEL_VR1_PLANE1_PSI1  0x80


#define THROTTLER_STATUS_PADDING_BIT      0
#define THROTTLER_STATUS_TEMP_EDGE_BIT    1
#define THROTTLER_STATUS_TEMP_HOTSPOT_BIT 2
#define THROTTLER_STATUS_TEMP_HBM_BIT     3
#define THROTTLER_STATUS_TEMP_VR_GFX_BIT  4
#define THROTTLER_STATUS_TEMP_VR_SOC_BIT  5
#define THROTTLER_STATUS_TEMP_VR_MEM0_BIT 6
#define THROTTLER_STATUS_TEMP_VR_MEM1_BIT 7
#define THROTTLER_STATUS_TEMP_LIQUID_BIT  8
#define THROTTLER_STATUS_TEMP_PLX_BIT     9
#define THROTTLER_STATUS_TEMP_SKIN_BIT    10
#define THROTTLER_STATUS_TDC_GFX_BIT      11
#define THROTTLER_STATUS_TDC_SOC_BIT      12
#define THROTTLER_STATUS_PPT_BIT          13
#define THROTTLER_STATUS_FIT_BIT          14
#define THROTTLER_STATUS_PPM_BIT          15


#define TABLE_TRANSFER_OK         0x0
#define TABLE_TRANSFER_FAILED     0xFF


#define WORKLOAD_DEFAULT_BIT              0
#define WORKLOAD_PPLIB_FULL_SCREEN_3D_BIT 1
#define WORKLOAD_PPLIB_POWER_SAVING_BIT   2
#define WORKLOAD_PPLIB_VIDEO_BIT          3
#define WORKLOAD_PPLIB_VR_BIT             4
#define WORKLOAD_PPLIB_COMPUTE_BIT        5
#define WORKLOAD_PPLIB_CUSTOM_BIT         6
#define WORKLOAD_PPLIB_COUNT              7


#define XGMI_STATE_D0 1
#define XGMI_STATE_D3 0

typedef enum {
  I2C_CONTROLLER_PORT_0 = 0,
  I2C_CONTROLLER_PORT_1 = 1,
} I2cControllerPort_e;

typedef enum {
  I2C_CONTROLLER_NAME_VR_GFX = 0,
  I2C_CONTROLLER_NAME_VR_SOC,
  I2C_CONTROLLER_NAME_VR_VDDCI,
  I2C_CONTROLLER_NAME_VR_HBM,
  I2C_CONTROLLER_NAME_LIQUID_0,
  I2C_CONTROLLER_NAME_LIQUID_1,
  I2C_CONTROLLER_NAME_PLX,
  I2C_CONTROLLER_NAME_COUNT,
} I2cControllerName_e;

typedef enum {
  I2C_CONTROLLER_THROTTLER_TYPE_NONE = 0,
  I2C_CONTROLLER_THROTTLER_VR_GFX,
  I2C_CONTROLLER_THROTTLER_VR_SOC,
  I2C_CONTROLLER_THROTTLER_VR_VDDCI,
  I2C_CONTROLLER_THROTTLER_VR_HBM,
  I2C_CONTROLLER_THROTTLER_LIQUID_0,
  I2C_CONTROLLER_THROTTLER_LIQUID_1,
  I2C_CONTROLLER_THROTTLER_PLX,
} I2cControllerThrottler_e;

typedef enum {
  I2C_CONTROLLER_PROTOCOL_VR_XPDE132G5,
  I2C_CONTROLLER_PROTOCOL_VR_IR35217,
  I2C_CONTROLLER_PROTOCOL_TMP_TMP102A,
  I2C_CONTROLLER_PROTOCOL_SPARE_0,
  I2C_CONTROLLER_PROTOCOL_SPARE_1,
  I2C_CONTROLLER_PROTOCOL_SPARE_2,
} I2cControllerProtocol_e;

typedef enum {
  I2C_CONTROLLER_SPEED_SLOW = 0,
  I2C_CONTROLLER_SPEED_FAST = 1,
} I2cControllerSpeed_e;

typedef struct {
  uint32_t Enabled;
  uint32_t SlaveAddress;
  uint32_t ControllerPort;
  uint32_t ControllerName;

  uint32_t ThermalThrottler;
  uint32_t I2cProtocol;
  uint32_t I2cSpeed;
} I2cControllerConfig_t;

typedef struct {
  uint32_t a;
  uint32_t b;
  uint32_t c;
} QuadraticInt_t;

typedef struct {
  uint32_t m;
  uint32_t b;
} LinearInt_t;

typedef struct {
  uint32_t a;
  uint32_t b;
  uint32_t c;
} DroopInt_t;

typedef enum {
  PPCLK_GFXCLK,
  PPCLK_VCLK,
  PPCLK_DCLK,
  PPCLK_ECLK,
  PPCLK_SOCCLK,
  PPCLK_UCLK,
  PPCLK_DCEFCLK,
  PPCLK_DISPCLK,
  PPCLK_PIXCLK,
  PPCLK_PHYCLK,
  PPCLK_FCLK,
  PPCLK_COUNT,
} PPCLK_e;

typedef enum {
  POWER_SOURCE_AC,
  POWER_SOURCE_DC,
  POWER_SOURCE_COUNT,
} POWER_SOURCE_e;

typedef enum {
  VOLTAGE_MODE_AVFS = 0,
  VOLTAGE_MODE_AVFS_SS,
  VOLTAGE_MODE_SS,
  VOLTAGE_MODE_COUNT,
} VOLTAGE_MODE_e;


typedef enum {
  AVFS_VOLTAGE_GFX = 0,
  AVFS_VOLTAGE_SOC,
  AVFS_VOLTAGE_COUNT,
} AVFS_VOLTAGE_TYPE_e;


typedef struct {
  uint8_t        VoltageMode;
  uint8_t        SnapToDiscrete;
  uint8_t        NumDiscreteLevels;
  uint8_t        padding;
  LinearInt_t    ConversionToAvfsClk;
  QuadraticInt_t SsCurve;
} DpmDescriptor_t;

typedef struct {
  uint32_t Version;


  uint32_t FeaturesToRun[2];


  uint16_t SocketPowerLimitAc0;
  uint16_t SocketPowerLimitAc0Tau;
  uint16_t SocketPowerLimitAc1;
  uint16_t SocketPowerLimitAc1Tau;
  uint16_t SocketPowerLimitAc2;
  uint16_t SocketPowerLimitAc2Tau;
  uint16_t SocketPowerLimitAc3;
  uint16_t SocketPowerLimitAc3Tau;
  uint16_t SocketPowerLimitDc;
  uint16_t SocketPowerLimitDcTau;
  uint16_t TdcLimitSoc;
  uint16_t TdcLimitSocTau;
  uint16_t TdcLimitGfx;
  uint16_t TdcLimitGfxTau;

  uint16_t TedgeLimit;
  uint16_t ThotspotLimit;
  uint16_t ThbmLimit;
  uint16_t Tvr_gfxLimit;
  uint16_t Tvr_memLimit;
  uint16_t Tliquid1Limit;
  uint16_t Tliquid2Limit;
  uint16_t TplxLimit;
  uint32_t FitLimit;

  uint16_t PpmPowerLimit;
  uint16_t PpmTemperatureThreshold;

  uint8_t  MemoryOnPackage;
  uint8_t  padding8_limits;
  uint16_t Tvr_SocLimit;

  uint16_t  UlvVoltageOffsetSoc;
  uint16_t  UlvVoltageOffsetGfx;

  uint8_t  UlvSmnclkDid;
  uint8_t  UlvMp1clkDid;
  uint8_t  UlvGfxclkBypass;
  uint8_t  Padding234;


  uint16_t     MinVoltageGfx;
  uint16_t     MinVoltageSoc;
  uint16_t     MaxVoltageGfx;
  uint16_t     MaxVoltageSoc;

  uint16_t     LoadLineResistanceGfx;
  uint16_t     LoadLineResistanceSoc;

  DpmDescriptor_t DpmDescriptor[PPCLK_COUNT];

  uint16_t       FreqTableGfx      [NUM_GFXCLK_DPM_LEVELS  ];
  uint16_t       FreqTableVclk     [NUM_VCLK_DPM_LEVELS    ];
  uint16_t       FreqTableDclk     [NUM_DCLK_DPM_LEVELS    ];
  uint16_t       FreqTableEclk     [NUM_ECLK_DPM_LEVELS    ];
  uint16_t       FreqTableSocclk   [NUM_SOCCLK_DPM_LEVELS  ];
  uint16_t       FreqTableUclk     [NUM_UCLK_DPM_LEVELS    ];
  uint16_t       FreqTableFclk     [NUM_FCLK_DPM_LEVELS    ];
  uint16_t       FreqTableDcefclk  [NUM_DCEFCLK_DPM_LEVELS ];
  uint16_t       FreqTableDispclk  [NUM_DISPCLK_DPM_LEVELS ];
  uint16_t       FreqTablePixclk   [NUM_PIXCLK_DPM_LEVELS  ];
  uint16_t       FreqTablePhyclk   [NUM_PHYCLK_DPM_LEVELS  ];

  uint16_t       DcModeMaxFreq     [PPCLK_COUNT            ];
  uint16_t       Padding8_Clks;

  uint16_t       Mp0clkFreq        [NUM_MP0CLK_DPM_LEVELS];
  uint16_t       Mp0DpmVoltage     [NUM_MP0CLK_DPM_LEVELS];


  uint16_t        GfxclkFidle;
  uint16_t        GfxclkSlewRate;
  uint16_t        CksEnableFreq;
  uint16_t        Padding789;
  QuadraticInt_t  CksVoltageOffset;
  uint8_t         Padding567[4];
  uint16_t        GfxclkDsMaxFreq;
  uint8_t         GfxclkSource;
  uint8_t         Padding456;

  uint8_t      LowestUclkReservedForUlv;
  uint8_t      Padding8_Uclk[3];


  uint8_t      PcieGenSpeed[NUM_LINK_LEVELS];
  uint8_t      PcieLaneCount[NUM_LINK_LEVELS];
  uint16_t     LclkFreq[NUM_LINK_LEVELS];


  uint16_t     EnableTdpm;
  uint16_t     TdpmHighHystTemperature;
  uint16_t     TdpmLowHystTemperature;
  uint16_t     GfxclkFreqHighTempLimit;


  uint16_t     FanStopTemp;
  uint16_t     FanStartTemp;

  uint16_t     FanGainEdge;
  uint16_t     FanGainHotspot;
  uint16_t     FanGainLiquid;
  uint16_t     FanGainVrGfx;
  uint16_t     FanGainVrSoc;
  uint16_t     FanGainPlx;
  uint16_t     FanGainHbm;
  uint16_t     FanPwmMin;
  uint16_t     FanAcousticLimitRpm;
  uint16_t     FanThrottlingRpm;
  uint16_t     FanMaximumRpm;
  uint16_t     FanTargetTemperature;
  uint16_t     FanTargetGfxclk;
  uint8_t      FanZeroRpmEnable;
  uint8_t      FanTachEdgePerRev;



  int16_t      FuzzyFan_ErrorSetDelta;
  int16_t      FuzzyFan_ErrorRateSetDelta;
  int16_t      FuzzyFan_PwmSetDelta;
  uint16_t     FuzzyFan_Reserved;


  uint8_t           OverrideAvfsGb[AVFS_VOLTAGE_COUNT];
  uint8_t           Padding8_Avfs[2];

  QuadraticInt_t    qAvfsGb[AVFS_VOLTAGE_COUNT];
  DroopInt_t        dBtcGbGfxCksOn;
  DroopInt_t        dBtcGbGfxCksOff;
  DroopInt_t        dBtcGbGfxAfll;
  DroopInt_t        dBtcGbSoc;
  LinearInt_t       qAgingGb[AVFS_VOLTAGE_COUNT];

  QuadraticInt_t    qStaticVoltageOffset[AVFS_VOLTAGE_COUNT];

  uint16_t          DcTol[AVFS_VOLTAGE_COUNT];

  uint8_t           DcBtcEnabled[AVFS_VOLTAGE_COUNT];
  uint8_t           Padding8_GfxBtc[2];

  int16_t           DcBtcMin[AVFS_VOLTAGE_COUNT];
  uint16_t          DcBtcMax[AVFS_VOLTAGE_COUNT];


  uint8_t           XgmiLinkSpeed   [NUM_XGMI_LEVELS];
  uint8_t           XgmiLinkWidth   [NUM_XGMI_LEVELS];
  uint16_t          XgmiFclkFreq    [NUM_XGMI_LEVELS];
  uint16_t          XgmiUclkFreq    [NUM_XGMI_LEVELS];
  uint16_t          XgmiSocclkFreq  [NUM_XGMI_LEVELS];
  uint16_t          XgmiSocVoltage  [NUM_XGMI_LEVELS];

  uint32_t          DebugOverrides;
  QuadraticInt_t    ReservedEquation0;
  QuadraticInt_t    ReservedEquation1;
  QuadraticInt_t    ReservedEquation2;
  QuadraticInt_t    ReservedEquation3;

  uint16_t     MinVoltageUlvGfx;
  uint16_t     MinVoltageUlvSoc;

  uint16_t     MGpuFanBoostLimitRpm;
  uint16_t     padding16_Fan;

  uint16_t     FanGainVrMem0;
  uint16_t     FanGainVrMem1;

  uint16_t     DcBtcGb[AVFS_VOLTAGE_COUNT];

  uint32_t     Reserved[11];

  uint32_t     Padding32[3];

  uint16_t     MaxVoltageStepGfx;
  uint16_t     MaxVoltageStepSoc;

  uint8_t      VddGfxVrMapping;
  uint8_t      VddSocVrMapping;
  uint8_t      VddMem0VrMapping;
  uint8_t      VddMem1VrMapping;

  uint8_t      GfxUlvPhaseSheddingMask;
  uint8_t      SocUlvPhaseSheddingMask;
  uint8_t      ExternalSensorPresent;
  uint8_t      Padding8_V;


  uint16_t     GfxMaxCurrent;
  int8_t       GfxOffset;
  uint8_t      Padding_TelemetryGfx;

  uint16_t     SocMaxCurrent;
  int8_t       SocOffset;
  uint8_t      Padding_TelemetrySoc;

  uint16_t     Mem0MaxCurrent;
  int8_t       Mem0Offset;
  uint8_t      Padding_TelemetryMem0;

  uint16_t     Mem1MaxCurrent;
  int8_t       Mem1Offset;
  uint8_t      Padding_TelemetryMem1;


  uint8_t      AcDcGpio;
  uint8_t      AcDcPolarity;
  uint8_t      VR0HotGpio;
  uint8_t      VR0HotPolarity;

  uint8_t      VR1HotGpio;
  uint8_t      VR1HotPolarity;
  uint8_t      Padding1;
  uint8_t      Padding2;



  uint8_t      LedPin0;
  uint8_t      LedPin1;
  uint8_t      LedPin2;
  uint8_t      padding8_4;


  uint8_t      PllGfxclkSpreadEnabled;
  uint8_t      PllGfxclkSpreadPercent;
  uint16_t     PllGfxclkSpreadFreq;

  uint8_t      UclkSpreadEnabled;
  uint8_t      UclkSpreadPercent;
  uint16_t     UclkSpreadFreq;

  uint8_t      FclkSpreadEnabled;
  uint8_t      FclkSpreadPercent;
  uint16_t     FclkSpreadFreq;

  uint8_t      FllGfxclkSpreadEnabled;
  uint8_t      FllGfxclkSpreadPercent;
  uint16_t     FllGfxclkSpreadFreq;

  I2cControllerConfig_t I2cControllers[I2C_CONTROLLER_NAME_COUNT];

  uint32_t     BoardReserved[10];


  uint32_t     MmHubPadding[8];

} PPTable_t;

typedef struct {

  uint16_t     GfxclkAverageLpfTau;
  uint16_t     SocclkAverageLpfTau;
  uint16_t     UclkAverageLpfTau;
  uint16_t     GfxActivityLpfTau;
  uint16_t     UclkActivityLpfTau;
  uint16_t     SocketPowerLpfTau;


  uint32_t     MmHubPadding[8];
} DriverSmuConfig_t;

typedef struct {

  uint16_t      GfxclkFmin;
  uint16_t      GfxclkFmax;
  uint16_t      GfxclkFreq1;
  uint16_t      GfxclkVolt1;
  uint16_t      GfxclkFreq2;
  uint16_t      GfxclkVolt2;
  uint16_t      GfxclkFreq3;
  uint16_t      GfxclkVolt3;
  uint16_t      UclkFmax;
  int16_t       OverDrivePct;
  uint16_t      FanMaximumRpm;
  uint16_t      FanMinimumPwm;
  uint16_t      FanTargetTemperature;
  uint16_t      MaxOpTemp;
  uint16_t      FanZeroRpmEnable;
  uint16_t      Padding;

} OverDriveTable_t;

typedef struct {
  uint16_t CurrClock[PPCLK_COUNT];
  uint16_t AverageGfxclkFrequency;
  uint16_t AverageSocclkFrequency;
  uint16_t AverageUclkFrequency  ;
  uint16_t AverageGfxActivity    ;
  uint16_t AverageUclkActivity   ;
  uint8_t  CurrSocVoltageOffset  ;
  uint8_t  CurrGfxVoltageOffset  ;
  uint8_t  CurrMemVidOffset      ;
  uint8_t  Padding8              ;
  uint16_t CurrSocketPower       ;
  uint16_t TemperatureEdge       ;
  uint16_t TemperatureHotspot    ;
  uint16_t TemperatureHBM        ;
  uint16_t TemperatureVrGfx      ;
  uint16_t TemperatureVrSoc      ;
  uint16_t TemperatureVrMem0     ;
  uint16_t TemperatureVrMem1     ;
  uint16_t TemperatureLiquid     ;
  uint16_t TemperaturePlx        ;
  uint32_t ThrottlerStatus       ;

  uint8_t  LinkDpmLevel;
  uint16_t AverageSocketPower;
  uint8_t  Padding;


  uint32_t     MmHubPadding[7];
} SmuMetrics_t;

typedef struct {
  uint16_t MinClock;
  uint16_t MaxClock;
  uint16_t MinUclk;
  uint16_t MaxUclk;

  uint8_t  WmSetting;
  uint8_t  Padding[3];
} WatermarkRowGeneric_t;

#define NUM_WM_RANGES 4

typedef enum {
  WM_SOCCLK = 0,
  WM_DCEFCLK,
  WM_COUNT_PP,
} WM_CLOCK_e;

typedef struct {

  WatermarkRowGeneric_t WatermarkRow[WM_COUNT_PP][NUM_WM_RANGES];

  uint32_t     MmHubPadding[7];
} Watermarks_t;

typedef struct {
  uint16_t avgPsmCount[45];
  uint16_t minPsmCount[45];
  float    avgPsmVoltage[45];
  float    minPsmVoltage[45];

  uint16_t avgScsPsmCount;
  uint16_t minScsPsmCount;
  float    avgScsPsmVoltage;
  float    minScsPsmVoltage;


  uint32_t MmHubPadding[6];
} AvfsDebugTable_t;

typedef struct {
  uint8_t  AvfsVersion;
  uint8_t  AvfsEn[AVFS_VOLTAGE_COUNT];

  uint8_t  OverrideVFT[AVFS_VOLTAGE_COUNT];
  uint8_t  OverrideAvfsGb[AVFS_VOLTAGE_COUNT];

  uint8_t  OverrideTemperatures[AVFS_VOLTAGE_COUNT];
  uint8_t  OverrideVInversion[AVFS_VOLTAGE_COUNT];
  uint8_t  OverrideP2V[AVFS_VOLTAGE_COUNT];
  uint8_t  OverrideP2VCharzFreq[AVFS_VOLTAGE_COUNT];

  int32_t VFT0_m1[AVFS_VOLTAGE_COUNT];
  int32_t VFT0_m2[AVFS_VOLTAGE_COUNT];
  int32_t VFT0_b[AVFS_VOLTAGE_COUNT];

  int32_t VFT1_m1[AVFS_VOLTAGE_COUNT];
  int32_t VFT1_m2[AVFS_VOLTAGE_COUNT];
  int32_t VFT1_b[AVFS_VOLTAGE_COUNT];

  int32_t VFT2_m1[AVFS_VOLTAGE_COUNT];
  int32_t VFT2_m2[AVFS_VOLTAGE_COUNT];
  int32_t VFT2_b[AVFS_VOLTAGE_COUNT];

  int32_t AvfsGb0_m1[AVFS_VOLTAGE_COUNT];
  int32_t AvfsGb0_m2[AVFS_VOLTAGE_COUNT];
  int32_t AvfsGb0_b[AVFS_VOLTAGE_COUNT];

  int32_t AcBtcGb_m1[AVFS_VOLTAGE_COUNT];
  int32_t AcBtcGb_m2[AVFS_VOLTAGE_COUNT];
  int32_t AcBtcGb_b[AVFS_VOLTAGE_COUNT];

  uint32_t AvfsTempCold[AVFS_VOLTAGE_COUNT];
  uint32_t AvfsTempMid[AVFS_VOLTAGE_COUNT];
  uint32_t AvfsTempHot[AVFS_VOLTAGE_COUNT];

  uint32_t VInversion[AVFS_VOLTAGE_COUNT];


  int32_t P2V_m1[AVFS_VOLTAGE_COUNT];
  int32_t P2V_m2[AVFS_VOLTAGE_COUNT];
  int32_t P2V_b[AVFS_VOLTAGE_COUNT];

  uint32_t P2VCharzFreq[AVFS_VOLTAGE_COUNT];

  uint32_t EnabledAvfsModules;

  uint32_t MmHubPadding[7];
} AvfsFuseOverride_t;

typedef struct {

  uint8_t   Gfx_ActiveHystLimit;
  uint8_t   Gfx_IdleHystLimit;
  uint8_t   Gfx_FPS;
  uint8_t   Gfx_MinActiveFreqType;
  uint8_t   Gfx_BoosterFreqType; 
  uint8_t   Gfx_UseRlcBusy; 
  uint16_t  Gfx_MinActiveFreq;
  uint16_t  Gfx_BoosterFreq;
  uint16_t  Gfx_PD_Data_time_constant;
  uint32_t  Gfx_PD_Data_limit_a;
  uint32_t  Gfx_PD_Data_limit_b;
  uint32_t  Gfx_PD_Data_limit_c;
  uint32_t  Gfx_PD_Data_error_coeff;
  uint32_t  Gfx_PD_Data_error_rate_coeff;

  uint8_t   Soc_ActiveHystLimit;
  uint8_t   Soc_IdleHystLimit;
  uint8_t   Soc_FPS;
  uint8_t   Soc_MinActiveFreqType;
  uint8_t   Soc_BoosterFreqType; 
  uint8_t   Soc_UseRlcBusy;
  uint16_t  Soc_MinActiveFreq;
  uint16_t  Soc_BoosterFreq;
  uint16_t  Soc_PD_Data_time_constant;
  uint32_t  Soc_PD_Data_limit_a;
  uint32_t  Soc_PD_Data_limit_b;
  uint32_t  Soc_PD_Data_limit_c;
  uint32_t  Soc_PD_Data_error_coeff;
  uint32_t  Soc_PD_Data_error_rate_coeff;

  uint8_t   Mem_ActiveHystLimit;
  uint8_t   Mem_IdleHystLimit;
  uint8_t   Mem_FPS;
  uint8_t   Mem_MinActiveFreqType;
  uint8_t   Mem_BoosterFreqType;
  uint8_t   Mem_UseRlcBusy; 
  uint16_t  Mem_MinActiveFreq;
  uint16_t  Mem_BoosterFreq;
  uint16_t  Mem_PD_Data_time_constant;
  uint32_t  Mem_PD_Data_limit_a;
  uint32_t  Mem_PD_Data_limit_b;
  uint32_t  Mem_PD_Data_limit_c;
  uint32_t  Mem_PD_Data_error_coeff;
  uint32_t  Mem_PD_Data_error_rate_coeff;

  uint8_t   Fclk_ActiveHystLimit;
  uint8_t   Fclk_IdleHystLimit;
  uint8_t   Fclk_FPS;
  uint8_t   Fclk_MinActiveFreqType;
  uint8_t   Fclk_BoosterFreqType;
  uint8_t   Fclk_UseRlcBusy;
  uint16_t  Fclk_MinActiveFreq;
  uint16_t  Fclk_BoosterFreq;
  uint16_t  Fclk_PD_Data_time_constant;
  uint32_t  Fclk_PD_Data_limit_a;
  uint32_t  Fclk_PD_Data_limit_b;
  uint32_t  Fclk_PD_Data_limit_c;
  uint32_t  Fclk_PD_Data_error_coeff;
  uint32_t  Fclk_PD_Data_error_rate_coeff;

} DpmActivityMonitorCoeffInt_t;

#define TABLE_PPTABLE                 0
#define TABLE_WATERMARKS              1
#define TABLE_AVFS                    2
#define TABLE_AVFS_PSM_DEBUG          3
#define TABLE_AVFS_FUSE_OVERRIDE      4
#define TABLE_PMSTATUSLOG             5
#define TABLE_SMU_METRICS             6
#define TABLE_DRIVER_SMU_CONFIG       7
#define TABLE_ACTIVITY_MONITOR_COEFF  8
#define TABLE_OVERDRIVE               9
#define TABLE_COUNT                  10


#define UCLK_SWITCH_SLOW 0
#define UCLK_SWITCH_FAST 1


#define SQ_Enable_MASK 0x1
#define SQ_IR_MASK 0x2
#define SQ_PCC_MASK 0x4
#define SQ_EDC_MASK 0x8

#define TCP_Enable_MASK 0x100
#define TCP_IR_MASK 0x200
#define TCP_PCC_MASK 0x400
#define TCP_EDC_MASK 0x800

#define TD_Enable_MASK 0x10000
#define TD_IR_MASK 0x20000
#define TD_PCC_MASK 0x40000
#define TD_EDC_MASK 0x80000

#define DB_Enable_MASK 0x1000000
#define DB_IR_MASK 0x2000000
#define DB_PCC_MASK 0x4000000
#define DB_EDC_MASK 0x8000000

#define SQ_Enable_SHIFT 0
#define SQ_IR_SHIFT 1
#define SQ_PCC_SHIFT 2
#define SQ_EDC_SHIFT 3

#define TCP_Enable_SHIFT 8
#define TCP_IR_SHIFT 9
#define TCP_PCC_SHIFT 10
#define TCP_EDC_SHIFT 11

#define TD_Enable_SHIFT 16
#define TD_IR_SHIFT 17
#define TD_PCC_SHIFT 18
#define TD_EDC_SHIFT 19

#define DB_Enable_SHIFT 24
#define DB_IR_SHIFT 25
#define DB_PCC_SHIFT 26
#define DB_EDC_SHIFT 27

#define REMOVE_FMAX_MARGIN_BIT     0x0
#define REMOVE_DCTOL_MARGIN_BIT    0x1
#define REMOVE_PLATFORM_MARGIN_BIT 0x2

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU10_DRIVER_IF_H
#define SMU10_DRIVER_IF_H

#define SMU10_DRIVER_IF_VERSION 0x6

#define NUM_DSPCLK_LEVELS 8

typedef struct {
	int32_t value;
	uint32_t numFractionalBits;
} FloatInIntFormat_t;

typedef enum {
	DSPCLK_DCEFCLK = 0,
	DSPCLK_DISPCLK,
	DSPCLK_PIXCLK,
	DSPCLK_PHYCLK,
	DSPCLK_COUNT,
} DSPCLK_e;

typedef struct {
	uint16_t Freq;
	uint16_t Vid;
} DisplayClockTable_t;


typedef struct {
	uint16_t MinClock; /* This is either DCFCLK or SOCCLK (in MHz) */
	uint16_t MaxClock; /* This is either DCFCLK or SOCCLK (in MHz) */
	uint16_t MinMclk;
	uint16_t MaxMclk;

	uint8_t  WmSetting;
	uint8_t  WmType;
	uint8_t  Padding[2];
} WatermarkRowGeneric_t;

#define NUM_WM_RANGES 4

typedef enum {
	WM_SOCCLK = 0,
	WM_DCFCLK,
	WM_COUNT,
} WM_CLOCK_e;

typedef struct {
	WatermarkRowGeneric_t WatermarkRow[WM_COUNT][NUM_WM_RANGES];
	uint32_t              MmHubPadding[7];
} Watermarks_t;

typedef enum {
	CUSTOM_DPM_SETTING_GFXCLK,
	CUSTOM_DPM_SETTING_CCLK,
	CUSTOM_DPM_SETTING_FCLK_CCX,
	CUSTOM_DPM_SETTING_FCLK_GFX,
	CUSTOM_DPM_SETTING_FCLK_STALLS,
	CUSTOM_DPM_SETTING_LCLK,
	CUSTOM_DPM_SETTING_COUNT,
} CUSTOM_DPM_SETTING_e;

typedef struct {
	uint8_t             ActiveHystLimit;
	uint8_t             IdleHystLimit;
	uint8_t             FPS;
	uint8_t             MinActiveFreqType;
	FloatInIntFormat_t  MinActiveFreq;
	FloatInIntFormat_t  PD_Data_limit;
	FloatInIntFormat_t  PD_Data_time_constant;
	FloatInIntFormat_t  PD_Data_error_coeff;
	FloatInIntFormat_t  PD_Data_error_rate_coeff;
} DpmActivityMonitorCoeffExt_t;

typedef struct {
	DpmActivityMonitorCoeffExt_t DpmActivityMonitorCoeff[CUSTOM_DPM_SETTING_COUNT];
} CustomDpmSettings_t;

#define NUM_SOCCLK_DPM_LEVELS  8
#define NUM_DCEFCLK_DPM_LEVELS 4
#define NUM_FCLK_DPM_LEVELS    4
#define NUM_MEMCLK_DPM_LEVELS  4

typedef struct {
	uint32_t  Freq; /* In MHz */
	uint32_t  Vol;  /* Millivolts with 2 fractional bits */
} DpmClock_t;

typedef struct {
	DpmClock_t DcefClocks[NUM_DCEFCLK_DPM_LEVELS];
	DpmClock_t SocClocks[NUM_SOCCLK_DPM_LEVELS];
	DpmClock_t FClocks[NUM_FCLK_DPM_LEVELS];
	DpmClock_t MemClocks[NUM_MEMCLK_DPM_LEVELS];
} DpmClocks_t;

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU10_H
#define SMU10_H

#pragma pack(push, 1)

#define ENABLE_DEBUG_FEATURES

/* Feature Control Defines */
#define FEATURE_CCLK_CONTROLLER_BIT   0
#define FEATURE_FAN_CONTROLLER_BIT    1
#define FEATURE_DATA_CALCULATION_BIT  2
#define FEATURE_PPT_BIT               3
#define FEATURE_TDC_BIT               4
#define FEATURE_THERMAL_BIT           5
#define FEATURE_FIT_BIT               6
#define FEATURE_EDC_BIT               7
#define FEATURE_PLL_POWER_DOWN_BIT    8
#define FEATURE_ULV_BIT               9
#define FEATURE_VDDOFF_BIT            10
#define FEATURE_VCN_DPM_BIT           11
#define FEATURE_ACP_DPM_BIT           12
#define FEATURE_ISP_DPM_BIT           13
#define FEATURE_FCLK_DPM_BIT          14
#define FEATURE_SOCCLK_DPM_BIT        15
#define FEATURE_MP0CLK_DPM_BIT        16
#define FEATURE_LCLK_DPM_BIT          17
#define FEATURE_SHUBCLK_DPM_BIT       18
#define FEATURE_DCEFCLK_DPM_BIT       19
#define FEATURE_GFX_DPM_BIT           20
#define FEATURE_DS_GFXCLK_BIT         21
#define FEATURE_DS_SOCCLK_BIT         22
#define FEATURE_DS_LCLK_BIT           23
#define FEATURE_DS_DCEFCLK_BIT        24
#define FEATURE_DS_SHUBCLK_BIT        25
#define FEATURE_RM_BIT                26
#define FEATURE_S0i2_BIT              27
#define FEATURE_WHISPER_MODE_BIT      28
#define FEATURE_DS_FCLK_BIT           29
#define FEATURE_DS_SMNCLK_BIT         30
#define FEATURE_DS_MP1CLK_BIT         31
#define FEATURE_DS_MP0CLK_BIT         32
#define FEATURE_MGCG_BIT              33
#define FEATURE_DS_FUSE_SRAM_BIT      34
#define FEATURE_GFX_CKS               35
#define FEATURE_PSI0_BIT              36
#define FEATURE_PROCHOT_BIT           37
#define FEATURE_CPUOFF_BIT            38
#define FEATURE_STAPM_BIT             39
#define FEATURE_CORE_CSTATES_BIT      40
#define FEATURE_SPARE_41_BIT          41
#define FEATURE_SPARE_42_BIT          42
#define FEATURE_SPARE_43_BIT          43
#define FEATURE_SPARE_44_BIT          44
#define FEATURE_SPARE_45_BIT          45
#define FEATURE_SPARE_46_BIT          46
#define FEATURE_SPARE_47_BIT          47
#define FEATURE_SPARE_48_BIT          48
#define FEATURE_SPARE_49_BIT          49
#define FEATURE_SPARE_50_BIT          50
#define FEATURE_SPARE_51_BIT          51
#define FEATURE_SPARE_52_BIT          52
#define FEATURE_SPARE_53_BIT          53
#define FEATURE_SPARE_54_BIT          54
#define FEATURE_SPARE_55_BIT          55
#define FEATURE_SPARE_56_BIT          56
#define FEATURE_SPARE_57_BIT          57
#define FEATURE_SPARE_58_BIT          58
#define FEATURE_SPARE_59_BIT          59
#define FEATURE_SPARE_60_BIT          60
#define FEATURE_SPARE_61_BIT          61
#define FEATURE_SPARE_62_BIT          62
#define FEATURE_SPARE_63_BIT          63

#define NUM_FEATURES                  64

#define FEATURE_CCLK_CONTROLLER_MASK  (1 << FEATURE_CCLK_CONTROLLER_BIT)
#define FEATURE_FAN_CONTROLLER_MASK   (1 << FEATURE_FAN_CONTROLLER_BIT)
#define FEATURE_DATA_CALCULATION_MASK (1 << FEATURE_DATA_CALCULATION_BIT)
#define FEATURE_PPT_MASK              (1 << FEATURE_PPT_BIT)
#define FEATURE_TDC_MASK              (1 << FEATURE_TDC_BIT)
#define FEATURE_THERMAL_MASK          (1 << FEATURE_THERMAL_BIT)
#define FEATURE_FIT_MASK              (1 << FEATURE_FIT_BIT)
#define FEATURE_EDC_MASK              (1 << FEATURE_EDC_BIT)
#define FEATURE_PLL_POWER_DOWN_MASK   (1 << FEATURE_PLL_POWER_DOWN_BIT)
#define FEATURE_ULV_MASK              (1 << FEATURE_ULV_BIT)
#define FEATURE_VDDOFF_MASK           (1 << FEATURE_VDDOFF_BIT)
#define FEATURE_VCN_DPM_MASK          (1 << FEATURE_VCN_DPM_BIT)
#define FEATURE_ACP_DPM_MASK          (1 << FEATURE_ACP_DPM_BIT)
#define FEATURE_ISP_DPM_MASK          (1 << FEATURE_ISP_DPM_BIT)
#define FEATURE_FCLK_DPM_MASK         (1 << FEATURE_FCLK_DPM_BIT)
#define FEATURE_SOCCLK_DPM_MASK       (1 << FEATURE_SOCCLK_DPM_BIT)
#define FEATURE_MP0CLK_DPM_MASK       (1 << FEATURE_MP0CLK_DPM_BIT)
#define FEATURE_LCLK_DPM_MASK         (1 << FEATURE_LCLK_DPM_BIT)
#define FEATURE_SHUBCLK_DPM_MASK      (1 << FEATURE_SHUBCLK_DPM_BIT)
#define FEATURE_DCEFCLK_DPM_MASK      (1 << FEATURE_DCEFCLK_DPM_BIT)
#define FEATURE_GFX_DPM_MASK          (1 << FEATURE_GFX_DPM_BIT)
#define FEATURE_DS_GFXCLK_MASK        (1 << FEATURE_DS_GFXCLK_BIT)
#define FEATURE_DS_SOCCLK_MASK        (1 << FEATURE_DS_SOCCLK_BIT)
#define FEATURE_DS_LCLK_MASK          (1 << FEATURE_DS_LCLK_BIT)
#define FEATURE_DS_DCEFCLK_MASK       (1 << FEATURE_DS_DCEFCLK_BIT)
#define FEATURE_DS_SHUBCLK_MASK       (1 << FEATURE_DS_SHUBCLK_BIT)
#define FEATURE_RM_MASK               (1 << FEATURE_RM_BIT)
#define FEATURE_DS_FCLK_MASK          (1 << FEATURE_DS_FCLK_BIT)
#define FEATURE_DS_SMNCLK_MASK        (1 << FEATURE_DS_SMNCLK_BIT)
#define FEATURE_DS_MP1CLK_MASK        (1 << FEATURE_DS_MP1CLK_BIT)
#define FEATURE_DS_MP0CLK_MASK        (1 << FEATURE_DS_MP0CLK_BIT)
#define FEATURE_MGCG_MASK             (1 << FEATURE_MGCG_BIT)
#define FEATURE_DS_FUSE_SRAM_MASK     (1 << FEATURE_DS_FUSE_SRAM_BIT)
#define FEATURE_PSI0_MASK             (1 << FEATURE_PSI0_BIT)
#define FEATURE_STAPM_MASK            (1 << FEATURE_STAPM_BIT)
#define FEATURE_PROCHOT_MASK          (1 << FEATURE_PROCHOT_BIT)
#define FEATURE_CPUOFF_MASK           (1 << FEATURE_CPUOFF_BIT)
#define FEATURE_CORE_CSTATES_MASK     (1 << FEATURE_CORE_CSTATES_BIT)

/* Workload bits */
#define WORKLOAD_PPLIB_FULL_SCREEN_3D_BIT 0
#define WORKLOAD_PPLIB_VIDEO_BIT          2
#define WORKLOAD_PPLIB_VR_BIT             3
#define WORKLOAD_PPLIB_COMPUTE_BIT        4
#define WORKLOAD_PPLIB_CUSTOM_BIT         5
#define WORKLOAD_PPLIB_COUNT              6

typedef struct {
	/* MP1_EXT_SCRATCH0 */
	uint32_t CurrLevel_ACP     : 4;
	uint32_t CurrLevel_ISP     : 4;
	uint32_t CurrLevel_VCN     : 4;
	uint32_t CurrLevel_LCLK    : 4;
	uint32_t CurrLevel_MP0CLK  : 4;
	uint32_t CurrLevel_FCLK    : 4;
	uint32_t CurrLevel_SOCCLK  : 4;
	uint32_t CurrLevel_DCEFCLK : 4;
	/* MP1_EXT_SCRATCH1 */
	uint32_t TargLevel_ACP     : 4;
	uint32_t TargLevel_ISP     : 4;
	uint32_t TargLevel_VCN     : 4;
	uint32_t TargLevel_LCLK    : 4;
	uint32_t TargLevel_MP0CLK  : 4;
	uint32_t TargLevel_FCLK    : 4;
	uint32_t TargLevel_SOCCLK  : 4;
	uint32_t TargLevel_DCEFCLK : 4;
	/* MP1_EXT_SCRATCH2 */
	uint32_t CurrLevel_SHUBCLK  : 4;
	uint32_t TargLevel_SHUBCLK  : 4;
	uint32_t InUlv              : 1;
	uint32_t InS0i2             : 1;
	uint32_t InWhisperMode      : 1;
	uint32_t Reserved           : 21;
	/* MP1_EXT_SCRATCH3-4 */
	uint32_t Reserved2[2];
	/* MP1_EXT_SCRATCH5 */
	uint32_t FeatureStatus[NUM_FEATURES / 32];
} FwStatus_t;

#define TABLE_BIOS_IF            0 /* Called by BIOS */
#define TABLE_WATERMARKS         1 /* Called by Driver */
#define TABLE_CUSTOM_DPM         2 /* Called by Driver */
#define TABLE_PMSTATUSLOG        3 /* Called by Tools for Agm logging */
#define TABLE_DPMCLOCKS          4 /* Called by Driver */
#define TABLE_MOMENTARY_PM       5 /* Called by Tools */
#define TABLE_COUNT              6

#pragma pack(pop)

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef RAVEN_PP_SMC_H
#define RAVEN_PP_SMC_H

#pragma pack(push, 1)

#define PPSMC_Result_OK                    0x1
#define PPSMC_Result_Failed                0xFF
#define PPSMC_Result_UnknownCmd            0xFE
#define PPSMC_Result_CmdRejectedPrereq     0xFD
#define PPSMC_Result_CmdRejectedBusy       0xFC

#define PPSMC_MSG_TestMessage                   0x1
#define PPSMC_MSG_GetSmuVersion                 0x2
#define PPSMC_MSG_GetDriverIfVersion            0x3
#define PPSMC_MSG_PowerUpGfx                    0x6
#define PPSMC_MSG_EnableGfxOff                  0x7
#define PPSMC_MSG_DisableGfxOff                 0x8
#define PPSMC_MSG_PowerDownIspByTile            0x9
#define PPSMC_MSG_PowerUpIspByTile              0xA
#define PPSMC_MSG_PowerDownVcn                  0xB
#define PPSMC_MSG_PowerUpVcn                    0xC
#define PPSMC_MSG_PowerDownSdma                 0xD
#define PPSMC_MSG_PowerUpSdma                   0xE
#define PPSMC_MSG_SetHardMinIspclkByFreq        0xF
#define PPSMC_MSG_SetHardMinVcn                 0x10
#define PPSMC_MSG_SetMinDisplayClock            0x11
#define PPSMC_MSG_SetHardMinFclkByFreq          0x12
#define PPSMC_MSG_SetAllowFclkSwitch            0x13
#define PPSMC_MSG_SetMinVideoGfxclkFreq         0x14
#define PPSMC_MSG_ActiveProcessNotify           0x15
#define PPSMC_MSG_SetCustomPolicy               0x16
#define PPSMC_MSG_SetVideoFps                   0x17
#define PPSMC_MSG_SetDisplayCount               0x18
#define PPSMC_MSG_QueryPowerLimit               0x19
#define PPSMC_MSG_SetDriverDramAddrHigh         0x1A
#define PPSMC_MSG_SetDriverDramAddrLow          0x1B
#define PPSMC_MSG_TransferTableSmu2Dram         0x1C
#define PPSMC_MSG_TransferTableDram2Smu         0x1D
#define PPSMC_MSG_DeviceDriverReset             0x1E
#define PPSMC_MSG_SetGfxclkOverdriveByFreqVid   0x1F
#define PPSMC_MSG_SetHardMinDcefclkByFreq       0x20
#define PPSMC_MSG_SetHardMinSocclkByFreq        0x21
#define PPSMC_MSG_SetMinVddcrSocVoltage         0x22
#define PPSMC_MSG_SetMinVideoFclkFreq           0x23
#define PPSMC_MSG_SetMinDeepSleepDcefclk        0x24
#define PPSMC_MSG_ForcePowerDownGfx             0x25
#define PPSMC_MSG_SetPhyclkVoltageByFreq        0x26
#define PPSMC_MSG_SetDppclkVoltageByFreq        0x27
#define PPSMC_MSG_SetSoftMinVcn                 0x28
#define PPSMC_MSG_GetGfxclkFrequency            0x2A
#define PPSMC_MSG_GetFclkFrequency              0x2B
#define PPSMC_MSG_GetMinGfxclkFrequency         0x2C
#define PPSMC_MSG_GetMaxGfxclkFrequency         0x2D
#define PPSMC_MSG_SoftReset                     0x2E
#define PPSMC_MSG_SetGfxCGPG			0x2F
#define PPSMC_MSG_SetSoftMaxGfxClk              0x30
#define PPSMC_MSG_SetHardMinGfxClk              0x31
#define PPSMC_MSG_SetSoftMaxSocclkByFreq        0x32
#define PPSMC_MSG_SetSoftMaxFclkByFreq          0x33
#define PPSMC_MSG_SetSoftMaxVcn                 0x34
#define PPSMC_MSG_PowerGateMmHub                0x35
#define PPSMC_MSG_SetRccPfcPmeRestoreRegister   0x36
#define PPSMC_MSG_GpuChangeState                0x37
#define PPSMC_MSG_GetGfxBusy                    0x3D
#define PPSMC_Message_Count                     0x42

typedef uint16_t PPSMC_Result;
typedef int      PPSMC_Msg;


#pragma pack(pop)

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _PP_INTERRUPT_H_
#define _PP_INTERRUPT_H_

enum amd_thermal_irq {
	AMD_THERMAL_IRQ_LOW_TO_HIGH = 0,
	AMD_THERMAL_IRQ_HIGH_TO_LOW,

	AMD_THERMAL_IRQ_LAST
};

/* The type of the interrupt callback functions in PowerPlay */
typedef int (*irq_handler_func_t)(void *private_data,
				unsigned src_id, const uint32_t *iv_entry);

/* Event Manager action chain list information */
struct pp_interrupt_registration_info {
	irq_handler_func_t call_back; /* Pointer to callback function */
	void *context;                   /* Pointer to callback function context */
	uint32_t src_id;               /* Registered interrupt id */
	const uint32_t *iv_entry;
};

#endif /* _PP_INTERRUPT_H_ */
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef PP_THERMAL_H
#define PP_THERMAL_H

#include "power_state.h"

static const struct PP_TemperatureRange __maybe_unused SMU7ThermalWithDelayPolicy[] =
{
	{-273150,  99000, 99000, -273150, 99000, 99000, -273150, 99000, 99000},
	{ 120000, 120000, 120000, 120000, 120000, 120000, 120000, 120000, 120000},
};

static const struct PP_TemperatureRange __maybe_unused SMU7ThermalPolicy[] =
{
	{-273150,  99000, 99000, -273150, 99000, 99000, -273150, 99000, 99000},
	{ 120000, 120000, 120000, 120000, 120000, 120000, 120000, 120000, 120000},
};

#define CTF_OFFSET_EDGE			5
#define CTF_OFFSET_HOTSPOT		5
#define CTF_OFFSET_HBM			5

#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _PP_ENDIAN_H_
#define _PP_ENDIAN_H_

#define PP_HOST_TO_SMC_UL(X) cpu_to_be32(X)
#define PP_SMC_TO_HOST_UL(X) be32_to_cpu(X)

#define PP_HOST_TO_SMC_US(X) cpu_to_be16(X)
#define PP_SMC_TO_HOST_US(X) be16_to_cpu(X)

#define CONVERT_FROM_HOST_TO_SMC_UL(X) ((X) = PP_HOST_TO_SMC_UL(X))
#define CONVERT_FROM_SMC_TO_HOST_UL(X) ((X) = PP_SMC_TO_HOST_UL(X))

#define CONVERT_FROM_HOST_TO_SMC_US(X) ((X) = PP_HOST_TO_SMC_US(X))

#endif /* _PP_ENDIAN_H_ */

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef PP_DEBUG_H
#define PP_DEBUG_H

#ifdef pr_fmt
#undef pr_fmt
#endif

#define pr_fmt(fmt) "amdgpu: [powerplay] " fmt

#include <linux/types.h>
#include <linux/kernel.h>
#include <linux/slab.h>

#define PP_ASSERT_WITH_CODE(cond, msg, code)	\
	do {					\
		if (!(cond)) {			\
			pr_warn_ratelimited("%s\n", msg);	\
			code;			\
		}				\
	} while (0)

#define PP_ASSERT(cond, msg)	\
	do {					\
		if (!(cond)) {			\
			pr_warn_ratelimited("%s\n", msg);	\
		}				\
	} while (0)

#define PP_DBG_LOG(fmt, ...) \
	do { \
		pr_debug(fmt, ##__VA_ARGS__); \
	} while (0)


#define GET_FLEXIBLE_ARRAY_MEMBER_ADDR(type, member, ptr, n)	\
	(type *)((char *)&(ptr)->member + (sizeof(type) * (n)))

#endif /* PP_DEBUG_H */

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef PP_POWERSTATE_H
#define PP_POWERSTATE_H

struct pp_hw_power_state {
	unsigned int magic;
};

struct pp_power_state;


#define PP_INVALID_POWER_STATE_ID (0)


/*
 * An item of a list containing Power States.
 */

struct PP_StateLinkedList {
	struct pp_power_state *next;
	struct pp_power_state *prev;
};


enum PP_StateUILabel {
	PP_StateUILabel_None,
	PP_StateUILabel_Battery,
	PP_StateUILabel_MiddleLow,
	PP_StateUILabel_Balanced,
	PP_StateUILabel_MiddleHigh,
	PP_StateUILabel_Performance,
	PP_StateUILabel_BACO
};

enum PP_StateClassificationFlag {
	PP_StateClassificationFlag_Boot                = 0x0001,
	PP_StateClassificationFlag_Thermal             = 0x0002,
	PP_StateClassificationFlag_LimitedPowerSource  = 0x0004,
	PP_StateClassificationFlag_Rest                = 0x0008,
	PP_StateClassificationFlag_Forced              = 0x0010,
	PP_StateClassificationFlag_User3DPerformance   = 0x0020,
	PP_StateClassificationFlag_User2DPerformance   = 0x0040,
	PP_StateClassificationFlag_3DPerformance       = 0x0080,
	PP_StateClassificationFlag_ACOverdriveTemplate   = 0x0100,
	PP_StateClassificationFlag_Uvd                 = 0x0200,
	PP_StateClassificationFlag_3DPerformanceLow    = 0x0400,
	PP_StateClassificationFlag_ACPI                = 0x0800,
	PP_StateClassificationFlag_HD2                 = 0x1000,
	PP_StateClassificationFlag_UvdHD               = 0x2000,
	PP_StateClassificationFlag_UvdSD               = 0x4000,
	PP_StateClassificationFlag_UserDCPerformance    = 0x8000,
	PP_StateClassificationFlag_DCOverdriveTemplate   = 0x10000,
	PP_StateClassificationFlag_BACO                  = 0x20000,
	PP_StateClassificationFlag_LimitedPowerSource_2  = 0x40000,
	PP_StateClassificationFlag_ULV                   = 0x80000,
	PP_StateClassificationFlag_UvdMVC               = 0x100000,
};

typedef unsigned int PP_StateClassificationFlags;

struct PP_StateClassificationBlock {
	enum PP_StateUILabel         ui_label;
	enum PP_StateClassificationFlag  flags;
	int                          bios_index;
	bool                      temporary_state;
	bool                      to_be_deleted;
};

struct PP_StatePcieBlock {
	unsigned int lanes;
};

enum PP_RefreshrateSource {
	PP_RefreshrateSource_EDID,
	PP_RefreshrateSource_Explicit
};

struct PP_StateDisplayBlock {
	bool              disableFrameModulation;
	bool              limitRefreshrate;
	enum PP_RefreshrateSource refreshrateSource;
	int                  explicitRefreshrate;
	int                  edidRefreshrateIndex;
	bool              enableVariBright;
};

struct PP_StateMemroyBlock {
	bool              dllOff;
	uint8_t                 m3arb;
	uint8_t                 unused[3];
};

struct PP_StateSoftwareAlgorithmBlock {
	bool disableLoadBalancing;
	bool enableSleepForTimestamps;
};

#define PP_TEMPERATURE_UNITS_PER_CENTIGRADES 1000

/**
 * Type to hold a temperature range.
 */
struct PP_TemperatureRange {
	int min;
	int max;
	int edge_emergency_max;
	int hotspot_min;
	int hotspot_crit_max;
	int hotspot_emergency_max;
	int mem_min;
	int mem_crit_max;
	int mem_emergency_max;
};

struct PP_StateValidationBlock {
	bool singleDisplayOnly;
	bool disallowOnDC;
	uint8_t supportedPowerLevels;
};

struct PP_UVD_CLOCKS {
	uint32_t VCLK;
	uint32_t DCLK;
};

/**
* Structure to hold a PowerPlay Power State.
*/
struct pp_power_state {
	uint32_t                            id;
	struct PP_StateLinkedList                  orderedList;
	struct PP_StateLinkedList                  allStatesList;

	struct PP_StateClassificationBlock         classification;
	struct PP_StateValidationBlock             validation;
	struct PP_StatePcieBlock                   pcie;
	struct PP_StateDisplayBlock                display;
	struct PP_StateMemroyBlock                 memory;
	struct PP_TemperatureRange                 temperatures;
	struct PP_StateSoftwareAlgorithmBlock      software;
	struct PP_UVD_CLOCKS                       uvd_clocks;
	struct pp_hw_power_state  hardware;
};

enum PP_MMProfilingState {
	PP_MMProfilingState_NA = 0,
	PP_MMProfilingState_Started,
	PP_MMProfilingState_Stopped
};

struct pp_clock_engine_request {
	unsigned long client_type;
	unsigned long ctx_id;
	uint64_t  context_handle;
	unsigned long sclk;
	unsigned long sclk_hard_min;
	unsigned long mclk;
	unsigned long iclk;
	unsigned long evclk;
	unsigned long ecclk;
	unsigned long ecclk_hard_min;
	unsigned long vclk;
	unsigned long dclk;
	unsigned long sclk_over_drive;
	unsigned long mclk_over_drive;
	unsigned long sclk_threshold;
	unsigned long flag;
	unsigned long vclk_ceiling;
	unsigned long dclk_ceiling;
	unsigned long num_cus;
	unsigned long pm_flag;
	enum PP_MMProfilingState mm_profiling_state;
};

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _POLARIS10_PWRVIRUS_H
#define _POLARIS10_PWRVIRUS_H


#define mmCP_HYP_MEC1_UCODE_ADDR	0xf81a
#define mmCP_HYP_MEC1_UCODE_DATA	0xf81b
#define mmCP_HYP_MEC2_UCODE_ADDR	0xf81c
#define mmCP_HYP_MEC2_UCODE_DATA	0xf81d

struct PWR_Command_Table {
	uint32_t              data;
	uint32_t reg;
};

typedef struct PWR_Command_Table PWR_Command_Table;

struct PWR_DFY_Section {
	uint32_t dfy_cntl;
	uint32_t dfy_addr_hi, dfy_addr_lo;
	uint32_t dfy_size;
	uint32_t dfy_data[];
};

typedef struct PWR_DFY_Section PWR_DFY_Section;

static const PWR_Command_Table pwr_virus_table_pre[] = {
	{ 0x00000000, mmRLC_CNTL                                 },
	{ 0x00000002, mmRLC_SRM_CNTL                             },
	{ 0x15000000, mmCP_ME_CNTL                               },
	{ 0x50000000, mmCP_MEC_CNTL                              },
	{ 0x80000004, mmCP_DFY_CNTL                              },
	{ 0x0840800a, mmCP_RB0_CNTL                              },
	{ 0xf30fff0f, mmTCC_CTRL                                 },
	{ 0x00000002, mmTCC_EXE_DISABLE                          },
	{ 0x000000ff, mmTCP_ADDR_CONFIG                          },
	{ 0x540ff000, mmCP_CPC_IC_BASE_LO                        },
	{ 0x000000b4, mmCP_CPC_IC_BASE_HI                        },
	{ 0x00010000, mmCP_HYP_MEC1_UCODE_ADDR                   },
	{ 0x00041b75, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000710e8, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000910dd, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000a1081, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000b016f, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000c0e3c, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000d10ec, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000e0188, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00101b5d, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00150a6c, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00170c5e, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x001d0c8c, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x001e0cfe, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00221408, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00370d7b, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00390dcb, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x003c142f, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x003f0b27, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00400e63, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00500f62, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00460fa7, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00490fa7, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x005811d4, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00680ad6, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00760b00, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00780b0c, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00790af7, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x007d1aba, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x007e1abe, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00591260, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x005a12fb, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00861ac7, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x008c1b01, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x008d1b34, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00a014b9, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00a1152e, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00a216fb, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00a41890, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00a31906, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00a50b14, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00621387, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x005c0b27, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00160a75, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC1_UCODE_DATA                   },
	{ 0x00010000, mmCP_HYP_MEC2_UCODE_ADDR                   },
	{ 0x00041b75, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000710e8, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000910dd, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000a1081, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000b016f, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000c0e3c, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000d10ec, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000e0188, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00101b5d, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00150a6c, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00170c5e, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x001d0c8c, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x001e0cfe, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00221408, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00370d7b, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00390dcb, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x003c142f, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x003f0b27, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00400e63, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00500f62, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00460fa7, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00490fa7, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x005811d4, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00680ad6, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00760b00, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00780b0c, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00790af7, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x007d1aba, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x007e1abe, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00591260, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x005a12fb, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00861ac7, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x008c1b01, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x008d1b34, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00a014b9, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00a1152e, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00a216fb, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00a41890, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00a31906, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00a50b14, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00621387, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x005c0b27, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00160a75, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x000f016a, mmCP_HYP_MEC2_UCODE_DATA                   },
	{ 0x00000000, 0xFFFFFFFF                                 },
};

static const PWR_DFY_Section pwr_virus_section1 = {
	.dfy_cntl = 0x80000004,
	.dfy_addr_hi = 0x000000b4,
	.dfy_addr_lo = 0x540fe800,
	.dfy_data = {
	0x7e000200, 0x7e020201, 0x7e040204, 0x7e060205, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0x0a080102, 0x0a0a0701, 0x0a080102, 0x0a0a0701,
	0x0a080500, 0x0a0a0303, 0x0a080500, 0x0a0a0303, 0xbf810000, 0x00000000, 0x00000000, 0x00000000,
	0x00000005, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x54106f00, 0x000400b4, 0x00004000, 0x00804fac, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	},
	.dfy_size = 416
};

static const PWR_DFY_Section pwr_virus_section2 = {
	.dfy_cntl = 0x80000004,
	.dfy_addr_hi = 0x000000b4,
	.dfy_addr_lo = 0x540fef00,
	.dfy_data = {
	0xc0031502, 0x00001e00, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	},
	.dfy_size = 16
};

static const PWR_DFY_Section pwr_virus_section3 = {
	.dfy_cntl = 0x80000004,
	.dfy_addr_hi = 0x000000b4,
	.dfy_addr_lo = 0x540ff000,
	.dfy_data = {
	0xc424000b, 0x80000145, 0x94800001, 0x94c00001, 0x95000001, 0x95400001, 0x95800001, 0xdc810000,
	0xdcc10000, 0xdd010000, 0xdd410000, 0xdd810000, 0xc4080061, 0xd8400013, 0xd8000003, 0xc40c0001,
	0x24ccffff, 0x3cd08000, 0x9500fffd, 0x1cd0ffcf, 0x7d018001, 0xc4140004, 0x050c0019, 0xd8400008,
	0x84c00000, 0x80000023, 0x80000067, 0x8000006a, 0x8000006d, 0x80000079, 0x80000084, 0x8000008f,
	0x80000099, 0x800000a0, 0x800000af, 0xd8400053, 0xc4080007, 0x388c0001, 0x08880002, 0x04100003,
	0x94c00005, 0x98800003, 0x04100004, 0x8000002d, 0x04100005, 0x8c00003f, 0x8c000043, 0x28cc0000,
	0xccc00050, 0x8c000055, 0x28080001, 0xcc000004, 0x7d808001, 0xd8400013, 0xd88130b8, 0xcd400008,
	0xdc180000, 0xdc140000, 0xdc100000, 0xdc0c0000, 0xcc800005, 0xdc080000, 0x80000168, 0xc40c000e,
	0x28cc0008, 0xccc00013, 0x90000000, 0xcd013278, 0xc4113278, 0x95000001, 0x24cc0700, 0xd8400029,
	0xc4113255, 0xcd01324f, 0xc4113254, 0x1d10ffdf, 0xcd013254, 0x10cc0014, 0x1d10c017, 0x7d0d000a,
	0xd8400013, 0xd8400008, 0xcd0130b7, 0x14cc0010, 0x90000000, 0xd9c00036, 0x8000005d, 0xd8400013,
	0xc00c4000, 0xccc130b5, 0xc40c000e, 0x28cc0008, 0xccc00013, 0xc40c0021, 0x14d00011, 0x9500fffe,
	0xdc030000, 0xd800000c, 0xd800000d, 0xc40c005e, 0x94c01b10, 0xd8400013, 0x90000000, 0xc00e0080,
	0xccc130b5, 0x8000013b, 0xc00e0800, 0xccc130b5, 0x8000013b, 0xd8400053, 0x04100006, 0x8c00003f,
	0x8c000043, 0x28cc0000, 0xccc00050, 0x8c000055, 0x280c0008, 0xccc00052, 0xd8000021, 0x28180039,
	0x80000034, 0xd8400053, 0x04100007, 0x8c00003f, 0x8c000043, 0x28cc0001, 0xccc00050, 0x8c000055,
	0x280c0010, 0xccc00052, 0x28180039, 0x80000034, 0xd8400053, 0x04100008, 0x8c00003f, 0x8c000043,
	0x28cc0003, 0xccc00050, 0x8c000055, 0x280c0020, 0xccc00052, 0x28180039, 0x80000034, 0xdc030000,
	0xd8000069, 0x28080001, 0xc428000d, 0x7ca88004, 0xcc800079, 0x04280001, 0xcc00006f, 0x8000013b,
	0x80000034, 0x04100010, 0x8c00003f, 0x8c000043, 0xccc00078, 0x8c000055, 0x28180080, 0x80000034,
	0x04100001, 0xc40c000e, 0x28cc0008, 0xccc00013, 0xcd013278, 0xc4113278, 0x95000001, 0xc00c4000,
	0xc4113254, 0x1d10c017, 0xd8400013, 0xd8400008, 0xccc130b5, 0xcd0130b7, 0x8000013b, 0x95c00001,
	0x96000001, 0x96400001, 0x96800001, 0x96c00001, 0x97000001, 0x97400001, 0x97800001, 0x97c00001,
	0xdc810000, 0xc40c000c, 0xcd4c0380, 0xcdcc0388, 0x55dc0020, 0xcdcc038c, 0xce0c0390, 0x56200020,
	0xce0c0394, 0xce4c0398, 0x56640020, 0xce4c039c, 0xce8c03a0, 0x56a80020, 0xce8c03a4, 0xcecc03a8,
	0x56ec0020, 0xcecc03ac, 0xcf0c03b0, 0x57300020, 0xcf0c03b4, 0xcf4c03b8, 0x57740020, 0xcf4c03bc,
	0xcf8c03c0, 0x57b80020, 0xcf8c03c4, 0xcfcc03c8, 0x57fc0020, 0xcfcc03cc, 0xd9000033, 0xc41c0009,
	0x25dc0010, 0x95c0fffe, 0xd8400013, 0xc41c000c, 0x05dc002f, 0xcdc12009, 0xc41d200a, 0xd8400013,
	0xcc012009, 0xd9000034, 0x25e01c00, 0x12200013, 0x25e40300, 0x12640008, 0x25e800c0, 0x12a80002,
	0x25ec003f, 0x7e25c00a, 0x7eae400a, 0x7de5c00a, 0xddc10000, 0xc02ee000, 0xcec1c200, 0xc40c005f,
	0xccc00037, 0x24d000ff, 0x31100006, 0x9500007b, 0x8c000190, 0xdc1c0000, 0xd8400013, 0xcdc1c200,
	0xc40c000c, 0xc4df0388, 0xc4d7038c, 0x51540020, 0x7d5dc01a, 0xc4e30390, 0xc4d70394, 0x51540020,
	0x7d62001a, 0xc4e70398, 0xc4d7039c, 0x51540020, 0x7d66401a, 0xc4eb03a0, 0xc4d703a4, 0x51540020,
	0x7d6a801a, 0xc4ef03a8, 0xc4d703ac, 0x51540020, 0x7d6ec01a, 0xc4f303b0, 0xc4d703b4, 0x51540020,
	0x7d73001a, 0xc4f703b8, 0xc4d703bc, 0x51540020, 0x7d77401a, 0xc4fb03c0, 0xc4d703c4, 0x51540020,
	0x7d7b801a, 0xc4ff03c8, 0xc4d703cc, 0x51540020, 0x7d7fc01a, 0xdc080000, 0xcc800013, 0xc4d70380,
	0xc4080001, 0x1c88001c, 0xcd400008, 0xc40c0083, 0x94c00010, 0xdc0e0000, 0x94c0000e, 0xc40c0082,
	0x24d00001, 0x9900000b, 0x18cc01e3, 0x3cd00004, 0x95000008, 0xc40c0085, 0x18cc006a, 0x98c00005,
	0xc40c0082, 0x18cc01e3, 0x3cd00004, 0x9900fffa, 0xdc180000, 0xdc140000, 0xdc100000, 0xdc0c0000,
	0xcc800004, 0xdc080000, 0x90000000, 0xc4080001, 0x1c88001c, 0xcd400008, 0xdc180000, 0xdc140000,
	0xdc100000, 0xdc0c0000, 0xcc800004, 0xdc080000, 0x90000000, 0xd8400051, 0xc428000c, 0x04180018,
	0x32640002, 0x9a80001f, 0x9a40001e, 0xcd800013, 0xc4293265, 0x040c0000, 0x1aac0027, 0x2aa80080,
	0xce813265, 0x9ac00017, 0xd80002f1, 0x04080002, 0x08880001, 0xd8080250, 0xd8080258, 0xd8080230,
	0xd8080238, 0xd8080240, 0xd8080248, 0xd8080268, 0xd8080270, 0xd8080278, 0xd8080280, 0xd8080228,
	0xd8000367, 0x9880fff3, 0x04080010, 0x08880001, 0xd80c0309, 0xd80c0319, 0x04cc0001, 0x9880fffc,
	0x7c408001, 0x88000000, 0xc00e0100, 0xd8400013, 0xd8400008, 0xccc130b5, 0x8000016e, 0xc4180032,
	0x29980008, 0xcd800013, 0x95800001, 0x7c40c001, 0x18d0003f, 0x24d4001f, 0x24d80001, 0x155c0001,
	0x05e80180, 0x9900000b, 0x202c003d, 0xcd800010, 0xcec1325b, 0xc42d325b, 0x96c00001, 0x86800000,
	0x80000168, 0x80000aa7, 0x80000bfc, 0x800012e9, 0xc4200007, 0x0a200001, 0xce000010, 0x80001b70,
	0x7c40c001, 0x8c000190, 0xc410001b, 0xd8000032, 0xd8000031, 0x9900091a, 0x7c408001, 0x88000000,
	0x24d000ff, 0x05280196, 0x18d4fe04, 0x29540008, 0xcd400013, 0x86800000, 0x800001b4, 0x8000032b,
	0x80000350, 0x80000352, 0x8000035f, 0x80000701, 0x8000047c, 0x8000019f, 0x80000800, 0xc419325b,
	0x1d98001f, 0xcd81325b, 0x8c00003f, 0xc4140004, 0xd8400008, 0x04100002, 0x8c000043, 0x28cc0002,
	0xccc00050, 0xc43c0044, 0x27fc0003, 0x9bc00002, 0x97c00006, 0xc00c4000, 0xccc130b5, 0x8c000055,
	0xd8400013, 0xd88130b8, 0xcd400008, 0x90000000, 0xd8400008, 0xcd400013, 0x7d40c001, 0xd8400028,
	0xd8400029, 0xd9400036, 0xc4193256, 0xc41d3254, 0x15540008, 0xcd400009, 0xcd40005b, 0xcd40005e,
	0xcd40005d, 0xd840006d, 0xc421325a, 0xc42d3249, 0x11540015, 0x19a4003c, 0x1998003f, 0x1af0007d,
	0x11dc000b, 0x1264001f, 0x15dc000d, 0x7d65400a, 0x13300018, 0x1a38003f, 0x7dd5c00a, 0x7df1c00a,
	0xcd800045, 0xcdc00100, 0xc411326a, 0xc415326b, 0xc419326c, 0xc41d326d, 0xc425326e, 0xc4293279,
	0xce800077, 0xcd000056, 0xcd400057, 0xcd800058, 0xcdc00059, 0xc4193265, 0x259c8000, 0x99c00004,
	0xce40005a, 0x29988000, 0xcd813265, 0xc4113248, 0x2510000f, 0xcd000073, 0xc418000d, 0xc411326f,
	0x17300019, 0x97000009, 0x25140fff, 0x95400007, 0xd800003a, 0x8c001b6d, 0xc4153279, 0xcd400077,
	0xcd00005f, 0xd8000075, 0x26f00001, 0x15100010, 0x7d190004, 0xcd000035, 0x97000035, 0x1af07fe8,
	0xd8800013, 0xd8400010, 0xd8400008, 0xcf00000d, 0xcf00000a, 0x8c001427, 0x04340022, 0x07740001,
	0x04300010, 0xdf430000, 0x7c434001, 0x7c408001, 0xd4412e01, 0x0434001e, 0xdf430000, 0xd4400078,
	0xdf030000, 0xd4412e40, 0xd8400013, 0xcc41c030, 0xcc41c031, 0xc43dc031, 0xccc00013, 0x04343000,
	0xc4113246, 0xc41d3245, 0xcf413267, 0x51100020, 0x7dd1c01a, 0xc4353267, 0x45dc0160, 0xc810001f,
	0x1b4c0057, 0x1b700213, 0x1b740199, 0x7f4f400a, 0x7f73400a, 0x55180020, 0x2198003f, 0xd1c00025,
	0xcf400024, 0xcd000026, 0xcd800026, 0xd8400027, 0x9bc00001, 0x248dfffe, 0xd8800013, 0xccc12e00,
	0x7c434001, 0x7c434001, 0x8c00142b, 0xc43c000e, 0x1af4007d, 0x2bfc0008, 0x33740003, 0x26d80001,
	0xcfc00013, 0x1ae8003e, 0x9680000c, 0xc4253277, 0x26680001, 0x96800009, 0x2a640002, 0xce413277,
	0xd8400013, 0xc4253348, 0xce413348, 0xc4253348, 0x96400001, 0xcfc00013, 0x9b400003, 0x958000d8,
	0x80000315, 0xc4253277, 0x04303000, 0x26680001, 0xcf013267, 0xc4193246, 0xc41d3245, 0xc4313267,
	0x96800041, 0x51980020, 0x1b342010, 0x7d9d801a, 0x1714000c, 0x25540800, 0x1b30c012, 0x459801b0,
	0x7d77400a, 0x7f37000a, 0x2b300000, 0xcf00001c, 0xd180001e, 0xd8400021, 0x04240010, 0x199c01e2,
	0x7e5e4002, 0x3e5c0004, 0x3e540002, 0xc428000f, 0x9a80ffff, 0x95c00006, 0xc80c0011, 0xc8140011,
	0x54d00020, 0x55580020, 0x80000282, 0x95400015, 0xc80c0011, 0x0a640002, 0x041c0001, 0x45980008,
	0x54d00020, 0x96400004, 0xc8140011, 0x45980004, 0x041c0000, 0xcf00001c, 0xd180001e, 0xd8400021,
	0xc428000f, 0x9a80ffff, 0x99c00003, 0xc8180011, 0x80000282, 0xc8140011, 0x55580020, 0x80000282,
	0x45980004, 0xc80c0011, 0xcf00001c, 0xd180001e, 0xd8400021, 0xc428000f, 0x9a80ffff, 0xc8100011,
	0xc8140011, 0x55580020, 0xd8400013, 0xccc1334e, 0xcd01334f, 0xcd413350, 0xcd813351, 0xd881334d,
	0xcfc00013, 0xc4193273, 0xc41d3275, 0xc40d3271, 0xc4113270, 0xc4153274, 0x50cc0020, 0x7cd0c01a,
	0x7cdcc011, 0x05900008, 0xcd00006a, 0xcdc0006b, 0xc41d3272, 0x7d594002, 0x54d00020, 0xd8800013,
	0xccc12e23, 0xcd012e24, 0xcdc12e25, 0xcfc00013, 0xc4193246, 0xc41d3245, 0xc4313267, 0x15540002,
	0x51980020, 0x7d9d801a, 0xc81c001f, 0x1b340057, 0x1b280213, 0x1b300199, 0x45980198, 0x7f37000a,
	0x7f2b000a, 0x55e40020, 0xcf000024, 0xd1800025, 0xcdc00026, 0xce400026, 0xd8400027, 0xcd40000d,
	0xcd40000a, 0xc40d3249, 0x20cc003c, 0xccc13249, 0xc4113274, 0xdd430000, 0xc01e0001, 0x29dc0002,
	0x04280000, 0xd8000036, 0xcc400078, 0xcc400078, 0x2d540002, 0x95400022, 0x078c0000, 0x07d40000,
	0x8c00120d, 0x8c001239, 0x8c001232, 0x04f80000, 0x057c0000, 0xcdc00013, 0xc414000d, 0xc41c0019,
	0x7dd5c005, 0x25dc0001, 0xd840007c, 0xd8400074, 0xd8400069, 0xc40c005e, 0x94c018a6, 0xd4412e22,
	0xd800007c, 0xc40c005e, 0x94c018a2, 0x95c00007, 0xc40c0019, 0x7cd4c005, 0x24cc0001, 0x94c00008,
	0x9680fffc, 0x800002e3, 0xc40c0057, 0x7cd0c002, 0x94c00003, 0x9680fffd, 0x800002e3, 0xd8000069,
	0xcfc00013, 0xcd013273, 0xcd013275, 0xd8000074, 0xc414005e, 0x9540188f, 0xcfc00013, 0xc40d3249,
	0xc013cfff, 0x7cd0c009, 0xccc13249, 0x9680000b, 0xc40c0077, 0x38d00001, 0x99000006, 0x04cc0002,
	0xdcc30000, 0xc40c005e, 0x94c01882, 0xd4400078, 0xd800000d, 0x80000304, 0x7c41c001, 0x7c41c001,
	0xd840002f, 0xc41c0015, 0x95c0ffff, 0xd8400030, 0xc41c0016, 0x95c0ffff, 0xd8000030, 0xc41c0016,
	0x99c0ffff, 0xd800002f, 0xc41c0015, 0x99c0ffff, 0xc81c001f, 0x49980198, 0x55e40020, 0x459801a0,
	0xcf000024, 0xd1800025, 0xcdc00026, 0xce400026, 0xd8400027, 0x04302000, 0xcfc00013, 0xcf013267,
	0xc4313267, 0x96800004, 0x97000001, 0xd8000036, 0x80000329, 0xd8800013, 0xcc812e00, 0x04302000,
	0xcfc00013, 0xcf013267, 0xc4313267, 0x97000001, 0xc4193256, 0xc42d3249, 0x16ec001f, 0xd8000028,
	0xd800002b, 0x1998003e, 0xcec00031, 0xd8000036, 0xd8000010, 0x97800004, 0xd8400010, 0xce00000a,
	0x1a18003e, 0xcd800008, 0x90000000, 0xc4380004, 0xd8400008, 0xd8400013, 0xd88130b8, 0x04100000,
	0x7d43c001, 0xcd400013, 0xc4093249, 0x1888003e, 0x94800015, 0xd8400074, 0x8c000671, 0xcd400013,
	0x9a400006, 0xc419324c, 0x259c0001, 0x1598001f, 0x95c0000d, 0x9580000c, 0x99000003, 0xd8400036,
	0x04100001, 0xc40c0021, 0x14d80011, 0x24dc00ff, 0x31e00002, 0x31dc0003, 0x9580fff0, 0x9a000003,
	0x99c00002, 0xd9c00036, 0x94800004, 0xd8000074, 0xc418005e, 0x95801827, 0xcf800008, 0x90000000,
	0xd8800036, 0x90000000, 0xd8c00036, 0xc424000b, 0x32640002, 0x9a400004, 0xc4180014, 0x9580ffff,
	0xd840002f, 0xc40c0021, 0x14dc0011, 0x95c0fffe, 0xccc00037, 0x8c000190, 0x90000000, 0xd8400008,
	0xd800006d, 0xc41d3246, 0xc4193245, 0x51dc0020, 0x7d9d801a, 0xd8400028, 0xd8400029, 0xc420000b,
	0x32200002, 0x9a0000ad, 0x04200032, 0xd9000010, 0xde030000, 0xd8400033, 0x04080000, 0xc43c0009,
	0x27fc0002, 0x97c0fffe, 0xc42c0015, 0x96c0ffff, 0xd800002e, 0xc42d3249, 0x1af4003e, 0x9740004d,
	0xc428000d, 0xc4080060, 0x7ca88005, 0x24880001, 0x7f4b4009, 0x97400046, 0xc4313274, 0xc4100057,
	0x7d33400c, 0x97400009, 0x28240100, 0x7e6a4004, 0xce400079, 0x1eecffdd, 0xcec13249, 0xcf013273,
	0xcf013275, 0x800003c3, 0xc429326f, 0x1aa80030, 0x96800006, 0x28240001, 0xc428000d, 0x06a80008,
	0x7e6a8004, 0xce800035, 0xc41d3272, 0x25cc0001, 0x10cc0004, 0x19e80042, 0x25dc0006, 0x11dc0001,
	0x7e8e800a, 0x7de9c00a, 0xc40d3271, 0xc4293270, 0x50cc0020, 0x7ce8c01a, 0x7cd30011, 0x11e80007,
	0x2aa80000, 0xce80001c, 0xd300001e, 0xd8400021, 0xc428000f, 0x9a80ffff, 0xc4300011, 0x1b30003f,
	0x33300000, 0xc4240059, 0x1660001f, 0x7e320009, 0xc0328000, 0x7e72400a, 0x0430000c, 0x9a000002,
	0x04300008, 0xc02ac000, 0x7d310002, 0x17300002, 0x2aa87600, 0x7cd0c011, 0xcdc00024, 0xd0c00025,
	0xce800026, 0x04280222, 0xce800026, 0x96000002, 0xce400026, 0xd8400027, 0xc4280058, 0x22ec003d,
	0xcec13249, 0xcd013273, 0xce813275, 0xd800007b, 0xc8380018, 0x57b00020, 0x04343108, 0xc429325d,
	0x040c3000, 0x13740008, 0x2374007e, 0x32a80003, 0xccc13267, 0xc40d3267, 0x18ec0057, 0x18e40213,
	0x18cc0199, 0x7cecc00a, 0x7ce4c00a, 0x94800003, 0xd4400078, 0x800003e7, 0x04200022, 0xde030000,
	0xccc00024, 0xd1800025, 0xcf400026, 0xd4400026, 0xd8400027, 0x04200010, 0xde030000, 0xccc00024,
	0x45980104, 0xd1800025, 0xd4400026, 0xcf800026, 0xcf000026, 0xd8400027, 0x49980104, 0x9a80000a,
	0xc81c001f, 0x45980168, 0x55e00020, 0xccc00024, 0xd1800025, 0xcdc00026, 0xce000026, 0xd8400027,
	0x800003f2, 0x8c000448, 0xcd400013, 0x040c2000, 0xccc13267, 0xc40d3267, 0x94c00001, 0xc40d3249,
	0x18cc003e, 0xd8400030, 0xc42c0016, 0x96c0ffff, 0xd8000030, 0xc42c0016, 0x9ac0ffff, 0xd800002f,
	0xc42c0015, 0x9ac0ffff, 0xd8400034, 0xc4300025, 0xc4340024, 0xc4380081, 0xcf813279, 0xcf41326e,
	0xcf01326d, 0x94c0000d, 0x254c0700, 0xc424001e, 0x10cc0010, 0x1a641fe8, 0x28cc0726, 0x2a640200,
	0xd8400013, 0xccc1237b, 0x2264003f, 0xcd400013, 0xd8813260, 0xce41325b, 0xc4240033, 0xc4280034,
	0xd9000036, 0xd8000010, 0x8c001427, 0x96400006, 0xde430000, 0xce40000c, 0xc40c005e, 0x94c01755,
	0xd4400078, 0x9680000a, 0xce80000a, 0x06a80002, 0xd8400010, 0xde830000, 0xce80000d, 0xc40c005e,
	0x94c0174c, 0xd4400078, 0xd8000010, 0x8c00142b, 0xc4393265, 0x2bb80040, 0xd8400032, 0xcf813265,
	0xc4200012, 0x9a00ffff, 0xc4100044, 0x19180024, 0xc8100072, 0x551c003f, 0x99c00003, 0x95800010,
	0x8000043d, 0xc00c8000, 0xd840006c, 0x28200000, 0x8000043f, 0xc00c4000, 0x282000f0, 0xcd400013,
	0xd8400008, 0xc4113255, 0xcd01324f, 0xd8400013, 0xd88130b8, 0xccc130b5, 0xce000053, 0x90000000,
	0x195c00e8, 0xc4100004, 0x2555fff0, 0xc0360001, 0x042c0000, 0x29540001, 0xd8400008, 0x04240000,
	0x04280004, 0xc420000b, 0x32200002, 0x9a000009, 0xcd400013, 0xcec1c200, 0xc5e124dc, 0x0aa80001,
	0x7ef6c001, 0x7e624001, 0x96000001, 0x9a80fff9, 0xc02ee000, 0xcd400013, 0x2555fff0, 0xcec1c200,
	0x29540008, 0xc81c001f, 0xcd400013, 0x55e00020, 0xc42d3255, 0xc4353259, 0xd8013260, 0x45980158,
	0xccc00024, 0xd1800025, 0xcdc00026, 0xce000026, 0xd8400027, 0x49980158, 0x45980170, 0xc4200012,
	0x16200010, 0x9a00fffe, 0xccc00024, 0xd1800025, 0xc429324f, 0xce400026, 0xce800026, 0xcec00026,
	0xcf400026, 0xd8400027, 0xcd000008, 0x90000000, 0xc40d325b, 0x7d43c001, 0x195400e8, 0x1154000a,
	0x18dc00e8, 0x05e80488, 0x18d0006c, 0x18f807f0, 0x18e40077, 0x18ec0199, 0x7e6e400a, 0x86800000,
	0x8000048e, 0x80000494, 0x800004de, 0x80000685, 0x80000686, 0x800006ac, 0x1ccc001f, 0xccc1325b,
	0xc411325d, 0x251001ef, 0xcd01325d, 0x90000000, 0xc4293254, 0x1264000a, 0xc4300004, 0x7d79400a,
	0x7e7a400a, 0x52a8001e, 0x15180001, 0x7d69401a, 0x202c007d, 0xcec1325b, 0x95000008, 0x95800028,
	0xc42d3267, 0xc4193246, 0xc41d3245, 0x1aec0028, 0xc40d325c, 0x800004cc, 0xc42d3256, 0xc419324e,
	0x26e8003f, 0x1aec003e, 0x12f4000e, 0xc41d324d, 0xc40d324f, 0x7d75401a, 0x04100002, 0x7d290004,
	0x7f8f4001, 0x7f52800f, 0x51980020, 0x7d9d801a, 0x50e00002, 0x51980008, 0x9a800002, 0x800004d1,
	0x7d0dc002, 0x6665fc00, 0x7e5e401a, 0xcec00008, 0x7da1c011, 0xd140000b, 0xd1c00002, 0x2a644000,
	0xce400002, 0x7f534002, 0x6665fc00, 0x7e76401a, 0xd1800002, 0xce400002, 0x800004d7, 0xc42d325a,
	0xc4193258, 0x1aec003e, 0xc41d3257, 0xc4213259, 0x12f4000e, 0x7d75401a, 0x51980020, 0x52200002,
	0x7d9d801a, 0xcec00008, 0x7da1c011, 0xd140000b, 0xd1c00002, 0x2a644000, 0xce400002, 0x202c003d,
	0xcf000008, 0xcfc00013, 0xcec1325b, 0xc42d325b, 0x96c00001, 0x90000000, 0xc4193260, 0x259c0007,
	0x15980004, 0x05e804e3, 0x86800000, 0x800004e7, 0x800004f0, 0x80000505, 0x8000016a, 0xc4380004,
	0xcfc00013, 0xd8400008, 0xc435325d, 0xd801325b, 0x277401ef, 0xcf41325d, 0xcf800008, 0x90000000,
	0xc4380004, 0xd8400008, 0x8c000671, 0x9640fff4, 0x17e00008, 0xc418000d, 0xce000009, 0xd84131db,
	0xcf800008, 0xcd800009, 0xc430001e, 0xcfc00013, 0xc42d325b, 0x1b301ff8, 0x2b300400, 0x2330003f,
	0x26edf000, 0x7ef2c00a, 0xd8413260, 0xcec1325b, 0x90000000, 0x05a80507, 0x86800000, 0x8000050c,
	0x80000528, 0x8000057d, 0x800005c2, 0x800005f3, 0xc4380004, 0xd8400008, 0x8c000671, 0xcfc00013,
	0x9a400012, 0x1bd400e8, 0xc42c004a, 0xcd40005e, 0xc41c004d, 0xcec0005e, 0x99c0000c, 0xc4100019,
	0x7d150005, 0x25100001, 0x99000008, 0x8c00063b, 0xcfc00013, 0xc4113277, 0x2511fffd, 0xcd013277,
	0xd801326f, 0x80000624, 0x04240012, 0x1be00fe4, 0xce413260, 0xce000066, 0xcf800008, 0x90000000,
	0xd8400068, 0xc4380004, 0xd8400008, 0x8c000671, 0xcfc00013, 0x9a400013, 0x1bd400e8, 0xc42c004a,
	0xcd40005e, 0xc41c004d, 0xcec0005e, 0x99c0000d, 0xc4100019, 0x7d150005, 0x25100001, 0x99000009,
	0xd8400067, 0x8c00063b, 0xcfc00013, 0xc4113277, 0x2511fffd, 0xcd013277, 0xd801326f, 0x80000624,
	0x1bd400e8, 0xc42c0060, 0x7ed6c005, 0x26ec0001, 0xc4113271, 0xc4153270, 0xc4193272, 0xc41d3273,
	0x04280022, 0x51100020, 0x7d51401a, 0xc4113274, 0xc4213275, 0xc4253276, 0xc4313248, 0xd1400061,
	0x2730000f, 0x13300010, 0x7db1800a, 0xcd800060, 0x96c00002, 0x05dc0008, 0xcdc00062, 0x042c3000,
	0xcd000063, 0xce000064, 0xce400065, 0xcec13267, 0xc42d3246, 0xc4313245, 0xc4353267, 0xce813260,
	0x52ec0020, 0x7ef2c01a, 0xc820001f, 0x1b700057, 0x1b680213, 0x1b740199, 0x46ec0188, 0x7f73400a,
	0x7f6b400a, 0x56240020, 0xcf400024, 0xd2c00025, 0xce000026, 0xce400026, 0x042c2000, 0xd8400027,
	0xc418000d, 0x17e00008, 0xce000009, 0xcec13267, 0xc42d3267, 0x26e01000, 0x9a00fffe, 0xd8400013,
	0xd9c131fc, 0xcd800009, 0xcf800008, 0x96c00001, 0x90000000, 0xc4380004, 0xd8400008, 0xc4113277,
	0xc41c000b, 0xc420000c, 0x11dc0002, 0x7de1c001, 0x11dc0008, 0x29dc0001, 0x25140001, 0x191807e4,
	0x192007ec, 0x95400004, 0xd8400013, 0xcdc1334a, 0xcfc00013, 0x9580000e, 0x09980001, 0x041c0001,
	0x95800005, 0x09980001, 0x51dc0001, 0x69dc0001, 0x9980fffd, 0x7de20014, 0x561c0020, 0xd8400013,
	0xce013344, 0xcdc13345, 0xcfc00013, 0x95400022, 0x042c3000, 0xcec13267, 0xc42d3246, 0xc4313245,
	0xc4353267, 0xd8400013, 0xc425334d, 0x26640001, 0x9640fffe, 0xc419334e, 0xc41d334f, 0xc4213350,
	0xc4253351, 0x52ec0020, 0x1b680057, 0x7ef2c01a, 0x1b700213, 0x1b740199, 0x46ec01b0, 0x7f6b400a,
	0x7f73400a, 0xcfc00013, 0xcf400024, 0xd2c00025, 0xcd800026, 0xcdc00026, 0xce000026, 0xce400026,
	0x042c2000, 0xd8400027, 0xcec13267, 0xc42d3267, 0x96c00001, 0x04280032, 0xce813260, 0xd8800068,
	0xcf800008, 0x90000000, 0xc4380004, 0xd8400008, 0x2010007d, 0xcd01325b, 0xc411325b, 0x1910003e,
	0x9500fffe, 0x04100040, 0xcd00001b, 0xd8400021, 0xc410000f, 0x9900ffff, 0x04100060, 0xcd00001b,
	0xd8400021, 0xc410000f, 0x9900ffff, 0xcfc00013, 0x2010003d, 0xcd01325b, 0xc4113277, 0x25140001,
	0x191807e4, 0x9540000b, 0x2511fffd, 0xcd013277, 0xc41c000b, 0xc420000c, 0x11dc0002, 0x7de1c001,
	0x11dc0008, 0xd8400013, 0xcdc1334a, 0xcfc00013, 0x95800005, 0xd8400013, 0xd8013344, 0xd8013345,
	0xcfc00013, 0xc4180050, 0xc41c0052, 0x04280042, 0xcd813273, 0xcdc13275, 0xce813260, 0xd9000068,
	0xd8400067, 0xcf800008, 0x90000000, 0x07d40000, 0x8c00120d, 0x8c00124f, 0x8c001232, 0x057c0000,
	0x042c3000, 0xc4380004, 0xcfc00013, 0xd8400008, 0xcec13267, 0xc42d3246, 0xc4313245, 0xc4353267,
	0x52ec0020, 0x7ef2c01a, 0x1b680057, 0x1b700213, 0x1b740199, 0xc820001f, 0x46ec0190, 0x7f6b400a,
	0x7f73400a, 0x56240020, 0xcf400024, 0xd2c00025, 0xce000026, 0xce400026, 0x042c2000, 0xd8400027,
	0xcfc00013, 0xcec13267, 0xc4153249, 0x2154003d, 0xc41c0019, 0x1bd800e8, 0x7dd9c005, 0x25dc0001,
	0xc42c004a, 0xcd80005e, 0xc420004d, 0xcec0005e, 0x11dc0010, 0x7e1e000a, 0xcd413249, 0xce01326f,
	0x28340001, 0x05980008, 0x7f598004, 0xcd800035, 0x1be800e8, 0xc42c004a, 0xce80005e, 0xd801327a,
	0xd800005f, 0xd8000075, 0xd800007f, 0xc424004c, 0xce41326e, 0xcec0005e, 0x28240100, 0x7e6a4004,
	0xce400079, 0xc435325d, 0x277401ef, 0x04240020, 0xce41325e, 0xd801325b, 0xd8013260, 0xcf41325d,
	0xda000068, 0xcf800008, 0x90000000, 0xc4113277, 0xc41c000b, 0xc420000c, 0x11dc0002, 0x7de1c001,
	0x11dc0008, 0x29dc0001, 0x25140001, 0x9540002d, 0xd8400013, 0xcdc1334a, 0xcfc00013, 0x042c3000,
	0xcec13267, 0xc42d3246, 0xc4313245, 0xc4353267, 0xd8400013, 0xc425334d, 0x26640001, 0x9640fffe,
	0xc419334e, 0xc41d334f, 0xc4213350, 0xc4253351, 0x52ec0020, 0x1b680057, 0x7ef2c01a, 0x1b700213,
	0x1b740199, 0x46ec01b0, 0x7f6b400a, 0x7f73400a, 0xcfc00013, 0xcf400024, 0xd2c00025, 0xcd800026,
	0xcdc00026, 0xce000026, 0xce400026, 0x042c2000, 0xd8400027, 0xcec13267, 0xc42d3267, 0x96c00001,
	0xc41c000b, 0xc420000c, 0x11dc0002, 0x7de1c001, 0x11dc0008, 0xd8400013, 0xcdc1334a, 0xcfc00013,
	0x90000000, 0xc430000b, 0x33300002, 0x04240000, 0x9b000010, 0x1be000e8, 0x042c0000, 0xc0360001,
	0x04280004, 0xd8400013, 0xcec1c200, 0xc63124dc, 0x0aa80001, 0x7ef6c001, 0x7e724001, 0x97000001,
	0x9a80fff9, 0xc02ee000, 0xd8400013, 0xcec1c200, 0x90000000, 0x90000000, 0xc4253260, 0x7fc14001,
	0xc40d3249, 0x18cc003e, 0x98c00005, 0x194c1c03, 0xccc0003b, 0xc40c002d, 0x80000697, 0xc420004a,
	0x194c00e8, 0xccc0005e, 0xc40c004c, 0xc431326d, 0x27301fff, 0xce00005e, 0x7cf0c00d, 0x98c00003,
	0x8c0007e0, 0x95c00008, 0xc430001e, 0x1b301ff8, 0x2b300400, 0x2330003f, 0xcd400013, 0xcf01325b,
	0x90000000, 0xcd400013, 0xd801325b, 0xc411325d, 0x251001ef, 0xcd01325d, 0x25100007, 0x31100005,
	0x9900008e, 0xc40c0007, 0xd9000010, 0x8000075e, 0x202c007d, 0xcec1325b, 0xc4293265, 0xc4353254,
	0x26a9feff, 0xc4380004, 0xd8400008, 0x1374000b, 0xc40c000d, 0xd8000009, 0x1774000d, 0xd8400013,
	0xc41d30b8, 0xcfc00013, 0x95c00008, 0xc411325d, 0xd801325b, 0xccc00009, 0xcf800008, 0x251001ef,
	0xcd01325d, 0x90000000, 0xce813265, 0xcf400100, 0xc00ac006, 0xc00e0000, 0x28880700, 0x28cc0014,
	0x8c0006de, 0x14cc0010, 0x30d4000f, 0x04cc0001, 0x10cc0010, 0x28cc0014, 0x99400009, 0xd8400013,
	0xc41530b8, 0xcfc00013, 0xc4193265, 0x19980028, 0x99400003, 0x99800002, 0x800006c8, 0xcfc00013,
	0xc411325d, 0xd801325b, 0xcf800008, 0x251001ef, 0xcd01325d, 0x90000000, 0x15600008, 0xce000009,
	0xc8380023, 0xc4180081, 0x11a00002, 0x7fa38011, 0xc4100026, 0x05980008, 0x7d1a0002, 0x282c2002,
	0x3e280008, 0xcec00013, 0xc4300027, 0x042c0008, 0xd3800025, 0xcf000024, 0x202400d0, 0x7ca48001,
	0xcc800026, 0xccc00026, 0x28240006, 0xcc000026, 0x0a640001, 0x9a40fffe, 0x9a800004, 0x32280000,
	0x9a800002, 0x9a000000, 0xd8400027, 0x24d8003f, 0xd840003c, 0xcec0003a, 0xd8800013, 0xcd81a2a4,
	0x90000000, 0xc41d325d, 0x25dc0007, 0xc40d3249, 0x18cc003e, 0x94c0000a, 0xc420004a, 0x194c00e8,
	0xccc0005e, 0xc40c004c, 0xc431326d, 0x27301fff, 0xce00005e, 0x7cf0c00d, 0x80000712, 0x194c1c03,
	0xccc0003b, 0xc40c002d, 0x05e80714, 0x86800000, 0x8000071c, 0x80000720, 0x80000747, 0x8000071d,
	0x800007c4, 0x80000732, 0x80000745, 0x80000744, 0x90000000, 0x98c00006, 0x8000072e, 0x90000000,
	0x98c00003, 0x8c0007e0, 0x95c0000c, 0xcd400013, 0xc4253265, 0x2a64008c, 0xce413265, 0xc430001e,
	0x1b301fe8, 0x2b300400, 0x2330003f, 0xd8013260, 0xcf01325b, 0x90000000, 0xc40c0007, 0xd9000010,
	0x04240000, 0x8000075e, 0x98c0fff1, 0x8c0007e0, 0x95c00002, 0x80000723, 0xcd400013, 0xc41f02f1,
	0x95c00004, 0xd8013247, 0xd801325d, 0x80000743, 0xd8813247, 0xd801325d, 0xc4100004, 0xd8400008,
	0xd8400013, 0xd88130b8, 0xcd000008, 0x90000000, 0x04100001, 0x98c0ffde, 0x8000072e, 0x98c00003,
	0x8c0007e0, 0x95c00012, 0xc4340004, 0xd8400008, 0x15600008, 0xc418000d, 0xce000009, 0xd8400013,
	0xd84131db, 0xcf400008, 0xcd800009, 0xc430001e, 0x1b301ff8, 0x2b300400, 0x2330003f, 0xcd400013,
	0xd8413260, 0xcf01325b, 0x90000000, 0xc40c0007, 0xd9000010, 0x04240000, 0xcd400013, 0x041c3000,
	0xcdc13267, 0xc41d3267, 0xc41d3265, 0x25dc8000, 0x95c00007, 0xc41c004a, 0x195800e8, 0xcd80005e,
	0xc418004c, 0xcd81326e, 0xcdc0005e, 0xc41d3265, 0x25dd7fff, 0xcdc13265, 0xc41d3246, 0xc4193245,
	0xc42d3267, 0x51e00020, 0x7e1a001a, 0x46200200, 0x04283247, 0x04300033, 0x1af80057, 0x1af40213,
	0x042c000c, 0x7f7b400a, 0x7f6f400a, 0xcf400024, 0xd2000025, 0xcd800026, 0xcdc00026, 0xc6990000,
	0x329c325d, 0x99c00008, 0x329c3269, 0x99c00006, 0x329c3267, 0x95c00005, 0xc01defff, 0x7d9d8009,
	0x8000078a, 0x25980000, 0x0b300001, 0x06a80001, 0xcd800026, 0x9b00fff2, 0xd8400027, 0xc43c0012,
	0x9bc0ffff, 0xcd400013, 0xd801325b, 0xc431325a, 0xc03e7ff0, 0x7f3f0009, 0xcf01325a, 0xc4313249,
	0x1f30001f, 0xcf013249, 0xc03e4000, 0xcfc13254, 0xcd400013, 0xd8013254, 0xc431325d, 0xd801324f,
	0xd8013255, 0xd8013247, 0xd801325d, 0x1b300028, 0x8c00120d, 0x8c001219, 0x8c001232, 0xc4380004,
	0xd8400008, 0xd8400013, 0x9900000d, 0xd88130b8, 0x9700000b, 0xc43d30b5, 0x1bf0003a, 0x9b000b80,
	0x203c003a, 0xc430000e, 0x27300700, 0x13300014, 0x2b300001, 0xcf0130b7, 0xcfc130b5, 0x46200008,
	0xcf400024, 0xd2000025, 0xd8000026, 0xd8400027, 0x043c2000, 0xcd400013, 0xcfc13267, 0xc43d3267,
	0x9bc00001, 0xccc00010, 0xcf800008, 0x90000000, 0xc4080007, 0xd9000010, 0xc4193260, 0x259c0003,
	0x31dc0003, 0x95c00014, 0x040c3000, 0xd8400008, 0xccc13267, 0xc40d3267, 0x18ec0057, 0x18e40213,
	0x18cc0199, 0x7cecc00a, 0x7ce4c00a, 0xc4193246, 0xc41d3245, 0x51980020, 0x7d9d801a, 0x8c000448,
	0xcd400013, 0x040c2000, 0xccc13267, 0xc40d3267, 0x94c00001, 0xcc800010, 0xd801325d, 0x90000000,
	0xc418000b, 0x31980002, 0x041c0000, 0x9980001c, 0x19580066, 0x15600008, 0x040c0000, 0xc0120001,
	0x11980003, 0x04240004, 0x7da18001, 0xc4200007, 0xc4340004, 0xd9000010, 0xd8400008, 0xd8400013,
	0xccc1c200, 0xc41d24db, 0x7cd0c001, 0x0a640001, 0x7dd9c005, 0x25dc0001, 0x99c00002, 0x9a40fff8,
	0xc418005e, 0x9580137b, 0xc00ee000, 0xd8400013, 0xccc1c200, 0xce000010, 0xcf400008, 0x90000000,
	0xd840004f, 0xc4113269, 0x19080070, 0x190c00e8, 0x2510003f, 0x2518000f, 0xcd813268, 0x05a80809,
	0x86800000, 0x8000080e, 0x8000080f, 0x80000898, 0x80000946, 0x800009e1, 0x80000a5a, 0x04a80811,
	0x86800000, 0x80000815, 0x80000834, 0x8000085e, 0x8000085e, 0x04341001, 0xcf400013, 0xc4380004,
	0xd8400008, 0xc42d3045, 0xcec1c091, 0x31300021, 0x9700000b, 0xd84002f1, 0xd8400013, 0xc43130b8,
	0x27300001, 0xc4293059, 0x56a8001f, 0x7f2b000a, 0xcf800008, 0x9b000241, 0x8000084a, 0xcf400013,
	0xd8400008, 0xc43130b6, 0x9b000003, 0xc02f0001, 0xcec130b6, 0xc4252087, 0x5668001a, 0x26a80005,
	0x9a80fffd, 0xcf400013, 0xd80130b6, 0x8000084a, 0xc4380004, 0xd8400008, 0x04341001, 0xcf400013,
	0xc431ecaa, 0x27300080, 0x9b000010, 0xc02e0001, 0xcec130b6, 0xcf400013, 0xd80130b6, 0x31300021,
	0x9700000a, 0xd84002f1, 0xd8400013, 0xc43130b8, 0x27300001, 0xc4293059, 0x56a8001f, 0x7f2b000a,
	0xcf800008, 0x9b00021d, 0xdd410000, 0x040c0005, 0xd84802e9, 0x8c001a41, 0xc43b02f1, 0x9b800006,
	0xc4380004, 0xd8400008, 0xd8400013, 0xd88130b8, 0xcf800008, 0xcec80278, 0x56f00020, 0xcf080280,
	0x8c001608, 0xdc140000, 0xcd400013, 0xd8813247, 0xd80802e9, 0x8000085e, 0xcd400013, 0x31100011,
	0x950001fa, 0xc02e0001, 0x2aec0008, 0xc01c0020, 0xc0180001, 0xc00c0007, 0x11a40006, 0x7de6000a,
	0x10e40008, 0x7e26000a, 0x7e2e000a, 0xce000013, 0xc4113254, 0x1d10ffdf, 0x2110003e, 0xcd013254,
	0xd801324f, 0xd8013255, 0x1d10ff9e, 0xcd013254, 0xd8013247, 0xd801325d, 0xd801325e, 0xc0245301,
	0xce413249, 0xd801325f, 0xc425326c, 0xc0121fff, 0x29108eff, 0x7e524009, 0xce41326c, 0xc425325a,
	0xc0127ff0, 0x7e524009, 0xce41325a, 0xc425325b, 0xc0131fff, 0x7e524009, 0xce41325b, 0xd801326d,
	0xd801326e, 0xd8013279, 0x94c00003, 0x08cc0001, 0x80000866, 0xc00c0007, 0x95800003, 0x09980001,
	0x80000866, 0xc0100010, 0x7dd2400c, 0x9a400004, 0xc0180003, 0x7dd1c002, 0x80000866, 0x80000a5a,
	0x04a8089a, 0x86800000, 0x8000089e, 0x800008fa, 0x80000945, 0x80000945, 0x31300022, 0x97000007,
	0xc4380004, 0xd8400008, 0xd8400013, 0xc43130b8, 0x27300001, 0xcf800008, 0xcd400013, 0x04183000,
	0xcd813267, 0xc4113246, 0xc4193245, 0x51100020, 0x7d91801a, 0x459801e0, 0xc4313267, 0x2738000f,
	0x1b342010, 0x172c000c, 0x26ec0800, 0x1b30c012, 0x7ef7400a, 0x7f37000a, 0x2b300000, 0xcf00001c,
	0xd180001e, 0xd8400021, 0xc42c000f, 0x9ac0ffff, 0xc8300011, 0x97000036, 0x45980008, 0xd180001e,
	0xd8400021, 0xc42c000f, 0x9ac0ffff, 0xc8340011, 0x9740002f, 0xc43c0004, 0xd8400008, 0xd8400013,
	0x13b80001, 0xc79d3300, 0xc7a13301, 0x96000001, 0xd8393300, 0xc0260001, 0xce793301, 0xc424005e,
	0x964012a4, 0x7c028009, 0x9740001c, 0x27580001, 0x99800004, 0x57740001, 0x06a80400, 0x800008d2,
	0xc4180006, 0x9980ffff, 0x29640001, 0xce40001a, 0x242c0000, 0x06ec0400, 0x57740001, 0x27580001,
	0x9980fffd, 0xc02620c0, 0xce41c078, 0xce81c080, 0xcc01c081, 0xcf01c082, 0x57240020, 0xce41c083,
	0xc0260400, 0x7e6e400a, 0xce41c084, 0x7eae8001, 0x7f2f0011, 0x800008d2, 0xc4180006, 0x9980ffff,
	0xcdf93300, 0xce393301, 0xcfc00008, 0xcd400013, 0xc43c0004, 0xd8400008, 0x04182000, 0xcd813267,
	0xcfc00008, 0x80000903, 0x31240022, 0x96400008, 0x04100001, 0xc4380004, 0xd8400008, 0xd8400013,
	0xc43130b8, 0x27300001, 0xcf800008, 0xc4af0280, 0xc4b30278, 0x52ec0020, 0x7ef2c01a, 0x7ec30011,
	0x32f80000, 0x9b800011, 0x043c0020, 0x04280000, 0x67180001, 0x0bfc0001, 0x57300001, 0x95800006,
	0x8c001628, 0x9a400003, 0xd981325d, 0x80000915, 0xd9c1325d, 0x06a80001, 0x9bc0fff6, 0x7f818001,
	0x8c001606, 0x7d838001, 0x94800010, 0xcd400013, 0xc41d3259, 0xc421325a, 0x16240014, 0x12640014,
	0x1a2801f0, 0x12a80010, 0x2620ffff, 0x7e2a000a, 0x7de1c001, 0x7e5e400a, 0x9b800002, 0x2264003f,
	0xce41325a, 0xd8013259, 0xc40c0007, 0xd9000010, 0x8c00075e, 0xc4af0228, 0x043c0000, 0x66d80001,
	0x95800010, 0x04300002, 0x1330000d, 0x13f40014, 0x7f73400a, 0xcf400013, 0x04380040, 0xcf80001b,
	0xd8400021, 0xc438000f, 0x9b80ffff, 0x04380060, 0xcf80001b, 0xd8400021, 0xc438000f, 0x9b80ffff,
	0x07fc0001, 0x56ec0001, 0x33e80010, 0x9680ffec, 0x80000a5a, 0x80000a5a, 0x04a80948, 0x86800000,
	0x8000094c, 0x8000099b, 0x800009e0, 0x800009e0, 0xc43c0004, 0xd8400008, 0xcd400013, 0x04183000,
	0xcd813267, 0xc4113246, 0xc4193245, 0x51100020, 0x7d91801a, 0x459801e0, 0xc4313267, 0x2738000f,
	0x1b342010, 0x172c000c, 0x26ec0800, 0x1b30c012, 0x7ef7400a, 0x7f37000a, 0x2b300000, 0xcf00001c,
	0xd180001e, 0xd8400021, 0xc42c000f, 0x9ac0ffff, 0xc8300011, 0x97000033, 0x45980008, 0xd180001e,
	0xd8400021, 0xc42c000f, 0x9ac0ffff, 0xc8340011, 0x9740002c, 0xd8400013, 0x13b80001, 0xc79d3300,
	0xc7a13301, 0x96000001, 0xd8393300, 0xc0260001, 0xce793301, 0xc424005e, 0x964011fe, 0x7c028009,
	0x9740001c, 0x27580001, 0x99800004, 0x57740001, 0x06a80400, 0x80000978, 0xc4180006, 0x9980ffff,
	0x29640001, 0xce40001a, 0x242c0000, 0x06ec0400, 0x57740001, 0x27580001, 0x9980fffd, 0xc0260010,
	0xce41c078, 0xcf01c080, 0x57240020, 0xce41c081, 0xce81c082, 0xcc01c083, 0xc0260800, 0x7e6e400a,
	0xce41c084, 0x7eae8001, 0x7f2f0011, 0x80000978, 0xc4180006, 0x9980ffff, 0xcdf93300, 0xce393301,
	0x04182000, 0xcd813267, 0xcfc00008, 0xcd400013, 0xc4193246, 0xc41d3245, 0x51980020, 0x7dda801a,
	0x7d41c001, 0x7e838011, 0xd84802e9, 0x8c001802, 0x469c0390, 0xc4313267, 0x04183000, 0xcd813267,
	0x1b342010, 0x172c000c, 0x26ec0800, 0x1b30c012, 0x7ef7400a, 0x7f37000a, 0x2b300000, 0xcf00001c,
	0x45dc0004, 0xd1c0001e, 0xd8400021, 0xc418000f, 0x9980ffff, 0xc4200011, 0x45dc0004, 0xd1c0001e,
	0xd8400021, 0xc418000f, 0x9980ffff, 0xc4240011, 0x45dc0004, 0xd1c0001e, 0xd8400021, 0xc418000f,
	0x9980ffff, 0xc4280011, 0x45dc0004, 0xd1c0001e, 0xd8400021, 0xc418000f, 0x9980ffff, 0xc42c0011,
	0x45dc0004, 0xd1c0001e, 0xd8400021, 0xc418000f, 0x9980ffff, 0xc4300011, 0x45dc0004, 0xd1c0001e,
	0xd8400021, 0xc418000f, 0x9980ffff, 0xc4340011, 0x45dc0004, 0xd1c0001e, 0xd8400021, 0xc418000f,
	0x9980ffff, 0xc4380011, 0xcd400013, 0x04182000, 0xcd813267, 0x043c0001, 0x8c0014df, 0x80000a5a,
	0x80000a5a, 0x31280014, 0xce8802ef, 0x9a800062, 0x31280034, 0x9a800060, 0x04a809e8, 0x86800000,
	0x800009ec, 0x80000a45, 0x80000a59, 0x80000a59, 0xcd400013, 0xc4113246, 0xc4193245, 0x51100020,
	0x7d91801a, 0x45980400, 0xc4b30258, 0xc4a70250, 0x53300020, 0x7e72401a, 0xc4313267, 0x1b342010,
	0x172c000c, 0x26ec0800, 0x1b30c012, 0x7ef7400a, 0x7f37000a, 0x2b300000, 0xcf00001c, 0x042c0020,
	0x66740001, 0x97400041, 0xcd400013, 0x04383000, 0xcf813267, 0xc4393267, 0x9b800001, 0xd180001e,
	0xd8400021, 0xc438000f, 0x9b80ffff, 0xc4300011, 0x1b38007e, 0x33b40003, 0x9b400003, 0x4598001c,
	0x9740002f, 0x45980004, 0xd180001e, 0xd8400021, 0xc438000f, 0x9b80ffff, 0xc40c0011, 0x45980004,
	0xd180001e, 0xd8400021, 0xc438000f, 0x9b80ffff, 0xc4100011, 0x45980004, 0xd180001e, 0xd8400021,
	0xc438000f, 0x9b80ffff, 0xc4340011, 0xcf4002eb, 0x45980004, 0xd180001e, 0xd8400021, 0xc438000f,
	0x9b80ffff, 0xc4340011, 0xcf4002ec, 0x45980004, 0xd180001e, 0xd8400021, 0xc438000f, 0x9b80ffff,
	0xc4340011, 0xcf4002ed, 0x45980004, 0xd180001e, 0xd8400021, 0xc438000f, 0x9b80ffff, 0xc4340011,
	0xcf4002ee, 0x45980004, 0xcd400013, 0x04382000, 0xcf813267, 0xd84802e9, 0x8c001715, 0xcd400013,
	0x04382000, 0xcf813267, 0x56640001, 0x0aec0001, 0x9ac0ffbc, 0xc4380004, 0xd8400008, 0x04341001,
	0xcf400013, 0x94800005, 0xc431ecaa, 0x27300080, 0x97000002, 0x80000a55, 0xc43130b6, 0x233c0032,
	0xcfc130b6, 0xcf400013, 0xcf0130b6, 0xc49302ef, 0x99000003, 0xcd400013, 0xd8413247, 0xcf800008,
	0x80000a5a, 0x80000a5a, 0xcd400013, 0x04180001, 0x5198001f, 0xcd813268, 0xc4193269, 0x2598000f,
	0x9980fffe, 0xd80002f1, 0xcd400013, 0xd8013268, 0xd800004f, 0x90000000, 0xcd400013, 0x04380001,
	0x53b8001f, 0x7db9801a, 0xcd813268, 0x80000a5e, 0xd8400029, 0xc40c005e, 0x94c01106, 0xd8800013,
	0xcc412e01, 0xcc412e02, 0xcc412e03, 0xcc412e00, 0x80000aa7, 0xd8400029, 0xc40c005e, 0x94c010fd,
	0x7c40c001, 0x50640020, 0x7ce4c01a, 0xd0c00072, 0xc80c0072, 0x58e801fc, 0x12a80009, 0x2aa80000,
	0xd0c0001e, 0xce80001c, 0xd8400021, 0xc424000f, 0x9a40ffff, 0x04240010, 0x18dc01e2, 0x7e5e4002,
	0x3e5c0003, 0x3e540002, 0x95c00006, 0xc8180011, 0xc8100011, 0xc8100011, 0x55140020, 0x80000aa2,
	0x9540000a, 0xc8180011, 0x44cc0008, 0x55900020, 0xd0c0001e, 0xd8400021, 0xc424000f, 0x9a40ffff,
	0xc4140011, 0x80000aa2, 0x44cc0004, 0xc4180011, 0xd0c0001e, 0xd8400021, 0xc424000f, 0x9a40ffff,
	0xc8100011, 0x55140020, 0xd8800013, 0xcd812e01, 0xcd012e02, 0xcd412e03, 0xcc412e00, 0xc428000e,
	0x2aa80008, 0xce800013, 0xc4253249, 0x2264003f, 0xce413249, 0xce800013, 0xc4253249, 0x96400001,
	0xd800002a, 0xc410001a, 0xc40c0021, 0xc4140028, 0x95000005, 0x1e64001f, 0xce800013, 0xce413249,
	0x80001b70, 0x14d00010, 0xc4180030, 0xc41c0007, 0x99000004, 0x99400009, 0x9980000c, 0x80000ab1,
	0xccc00037, 0x8c000190, 0xc420001c, 0xd8000032, 0x9a0010ac, 0x80000aa7, 0xd880003f, 0x95c00002,
	0xd8c0003f, 0x80001082, 0xd8800040, 0x95c00002, 0xd8c00040, 0x800010de, 0xc010ffff, 0x18d403f7,
	0x7d0cc009, 0xc41b0367, 0x7d958004, 0x7d85800a, 0xdc1e0000, 0x90000000, 0xc424000b, 0x32640002,
	0x7c40c001, 0x18d001fc, 0x05280adc, 0x86800000, 0x80000af1, 0x80000adf, 0x80000ae7, 0x8c000ace,
	0xd8c00013, 0x96400002, 0xd8400013, 0xcd8d2000, 0x99c00010, 0x7c408001, 0x88000000, 0x18d803f7,
	0xc010ffff, 0x7d0cc009, 0x04140000, 0x11940014, 0x29544001, 0x9a400002, 0x29544003, 0xcd400013,
	0x80000af4, 0xd8c00013, 0x96400002, 0xd8400013, 0xd44d2000, 0x7c408001, 0x88000000, 0xc424000b,
	0x32640002, 0x7c40c001, 0xd8c00013, 0x96400002, 0xd8400013, 0xd44dc000, 0x7c408001, 0x88000000,
	0x7c40c001, 0x18d0003c, 0x95000006, 0x8c000ace, 0xd8800013, 0xcd8d2c00, 0x99c00003, 0x80000b0a,
	0xd8800013, 0xd44d2c00, 0x7c408001, 0x88000000, 0x7c40c001, 0x28148004, 0x24d800ff, 0xccc00019,
	0xcd400013, 0xd4593240, 0x7c408001, 0x88000000, 0xd8400029, 0xc40c005e, 0x94c0105e, 0x7c410001,
	0x50540020, 0x7c418001, 0x2198003f, 0x199c0034, 0xc40c0007, 0x95c00028, 0xc428000e, 0x2aa80008,
	0xce800013, 0xc42d324f, 0xc4313255, 0x7ef3400c, 0x9b400021, 0xd800002a, 0x80001b70, 0xc40c0007,
	0x14e80001, 0x9a8000af, 0xd9000010, 0x041c0002, 0x042c01c8, 0x8c000d61, 0xccc00010, 0xd8400029,
	0xc40c005e, 0x94c01043, 0x7c410001, 0x50540020, 0x7c418001, 0x18a01fe8, 0x3620005c, 0x9a00000e,
	0x2464003f, 0xd8400013, 0xc6290ce7, 0x16ac001f, 0x96c00004, 0x26ac003f, 0x7ee6c00d, 0x96c00005,
	0x06200001, 0x2620000f, 0x9a00fff8, 0x8000016a, 0xce000367, 0xc424005e, 0x9640102e, 0xc428000e,
	0x199c0037, 0x19a00035, 0x2aa80008, 0xce800013, 0x95c0005d, 0xd800002a, 0xc42d3256, 0xc431325a,
	0x2330003f, 0x16f8001f, 0x9780000d, 0xc4253248, 0xc035f0ff, 0x7e764009, 0x19b401f8, 0x13740008,
	0x7e76400a, 0xce800013, 0xce413248, 0xcf01325a, 0xce800013, 0xc431325a, 0x97000001, 0x7d15001a,
	0xd1000072, 0xc8100072, 0x55140020, 0x199c0034, 0xd8400010, 0xd8400029, 0x9b800004, 0x1ae4003e,
	0xce400008, 0x80000b7c, 0xc4353254, 0x16a80008, 0x1aec003c, 0x19a4003f, 0x12a80015, 0x12ec001f,
	0x1374000b, 0x7eae800a, 0xc02e4000, 0x1774000d, 0x7eae800a, 0xce400008, 0x7f6b400a, 0x95c00005,
	0xc43d3248, 0x1bfc01e8, 0x13fc0018, 0x7dbd800a, 0x1d98ff15, 0x592c00fc, 0xcd80000a, 0x12e00016,
	0x7da1800a, 0x592c007e, 0x12e00015, 0x7da1800a, 0xd1000001, 0xcd800001, 0x11a0000c, 0x1264001e,
	0x1620000c, 0x7e26000a, 0x7e32000a, 0x12e4001b, 0x7e26000a, 0x5924007e, 0x12640017, 0x7e26000a,
	0x19a4003c, 0x12640018, 0x7e26000a, 0xd800002a, 0xce01325a, 0xcd013257, 0xcd413258, 0xc429325a,
	0xc40c005e, 0x94c00fdb, 0x96800001, 0x95c00003, 0x7c40c001, 0x7c410001, 0x9780f5ca, 0xcf400100,
	0xc40c0007, 0xd9000010, 0x8c00120d, 0x8c001219, 0x8c001232, 0xccc00010, 0x8c001b6d, 0x7c408001,
	0x88000000, 0xc42d324e, 0xc431324d, 0x52ec0020, 0x7ef2c01a, 0xc435324f, 0xc4293256, 0x52ec0008,
	0x07740003, 0x04240002, 0x269c003f, 0x7e5e4004, 0x7f67000f, 0x97000003, 0x7f674002, 0x0b740001,
	0x53740002, 0x7ef6c011, 0x1ab42010, 0x1ab8c006, 0x16a8000c, 0x26a80800, 0x2b740000, 0x7f7b400a,
	0x7f6b400a, 0xcf40001c, 0xd2c0001e, 0xd8400021, 0xc438000f, 0x9b80ffff, 0xc4180011, 0x9a000003,
	0x8c000bec, 0x80000b47, 0xc42c001d, 0xc4313256, 0x1b34060b, 0x1b300077, 0x7f370009, 0x13300017,
	0x04340100, 0x26ec00ff, 0xc03a8004, 0x7ef6c00a, 0x7f3b000a, 0x7ef2c00a, 0xcec1325b, 0x80000c16,
	0xc40c0032, 0xc410001d, 0x28cc0008, 0xccc00013, 0xc415325b, 0x7c418001, 0x7c418001, 0x18580037,
	0x251000ff, 0xc421325d, 0x262001ef, 0xce01325d, 0x99800004, 0x7d15400a, 0xcd41325b, 0x80000168,
	0x1d54001f, 0xcd41325b, 0x7c408001, 0x88000000, 0xc428000b, 0xc42c000c, 0x12a80001, 0x26a80004,
	0x7eae800a, 0xc40c0021, 0xc4340028, 0x14f00010, 0xc4380030, 0xc43c0007, 0xcd280200, 0xcd680208,
	0xcda80210, 0x9b00000c, 0x9b400014, 0x9b800017, 0xc428000b, 0xc42c000c, 0x12a80001, 0x26a80004,
	0x7eae800a, 0xc6930200, 0xc6970208, 0xc69b0210, 0x90000000, 0x17300001, 0x9b000005, 0xccc00037,
	0x8c000190, 0xd8000032, 0x90000000, 0xd8000028, 0xd800002b, 0x80000168, 0xd900003f, 0x97c00002,
	0xd940003f, 0x80001082, 0xd9000040, 0x97c00002, 0xd9400040, 0x800010de, 0xc40c0021, 0x14fc0011,
	0x24f800ff, 0x33b80001, 0x97c0fffc, 0x9b800007, 0xccc00037, 0x8c000190, 0xd8000032, 0xd8000028,
	0xd800002b, 0x80001b70, 0xc4380004, 0xd8400008, 0xd8400013, 0xd88130b8, 0x04100000, 0x04140000,
	0xc418000e, 0x29980008, 0x7d83c001, 0xcd800013, 0xc4093249, 0x1888003e, 0x94800020, 0xd8400074,
	0x8c000671, 0x9a400009, 0xc418000e, 0x29980008, 0xcd800013, 0xc419324c, 0x259c0001, 0x1598001f,
	0x95c00016, 0x95800015, 0x99000003, 0xd8400036, 0x04100001, 0xc40c0021, 0x14d80011, 0x24e000ff,
	0x321c0002, 0x32200001, 0x9580ffee, 0x99c00014, 0x96000004, 0xccc00037, 0x04140001, 0x80000c30,
	0x9480000a, 0xd8000074, 0xc418005e, 0x95800f29, 0xcf800008, 0x80000c16, 0x94800004, 0xd8000074,
	0xc418005e, 0x95800f23, 0xd9c00036, 0x99400002, 0xccc00037, 0xcf800008, 0x80000c16, 0x94800004,
	0xd8000074, 0xc418005e, 0x95800f1a, 0xccc00037, 0xd8800036, 0x80001b70, 0x041c0003, 0x042c01c8,
	0x8c000d61, 0xc4200007, 0xc40c0077, 0x94c00001, 0x7c418001, 0xc428000e, 0x9600f502, 0x0a200001,
	0x98c0f500, 0x2aa80008, 0xce000010, 0x9a000f05, 0xce800013, 0xc431325a, 0xc42d3256, 0x1f30001f,
	0x16e4001f, 0xcf01325a, 0xc431325a, 0x97000001, 0x9640f4f4, 0xc434000b, 0x33740002, 0x9b40f4f1,
	0xc4353254, 0x16a80008, 0x1aec003c, 0x12a80015, 0x12ec001f, 0x1374000b, 0x7eae800a, 0xc02e4000,
	0x1774000d, 0x7eae800a, 0x7f6b400a, 0xcf400100, 0x12780001, 0x2bb80001, 0xc00ac005, 0xc00e0002,
	0x28cc8000, 0x28884900, 0x28cc0014, 0x80000ff3, 0xc43c0007, 0x7c40c001, 0x17fc0001, 0xd8400013,
	0x9bc00004, 0xd8400029, 0xc424005e, 0x96400ee1, 0xcc41c40a, 0xcc41c40c, 0xcc41c40d, 0x7c414001,
	0x24d0007f, 0x15580010, 0x255400ff, 0xcd01c411, 0xcd81c40f, 0xcd41c40e, 0xcc41c410, 0x7c414001,
	0x7c418001, 0x04200000, 0x18e80033, 0x18ec0034, 0xcc41c414, 0xcc41c415, 0xcd81c413, 0xcd41c412,
	0x18dc0032, 0x7c030011, 0x7c038011, 0x95c00027, 0x96c00002, 0xc431c417, 0xc435c416, 0x96800004,
	0x96c00002, 0xc439c419, 0xc43dc418, 0xc41c000e, 0x29dc0008, 0xcdc00013, 0xcf413261, 0x96c00002,
	0xcf013262, 0x96800004, 0xcfc13263, 0x96c00002, 0xcf813264, 0x18dc0030, 0xc43c0007, 0x95c00017,
	0x17fc0001, 0x9ac00005, 0x7d77000c, 0x9bc00015, 0x9700000a, 0x80000cd6, 0x51b80020, 0x53300020,
	0x7f97801a, 0x7f37001a, 0x7f3b000c, 0x9bc0000d, 0x97800002, 0x80000cd6, 0x9a000018, 0xd8400013,
	0x28200001, 0x80000ca7, 0x18dc0031, 0x95c00003, 0xc435c40b, 0x9740fffd, 0xd800002a, 0x80001b70,
	0xc4280032, 0x2aa80008, 0xce800013, 0xc40d325b, 0x97000002, 0x800012c2, 0xc438001d, 0x1bb81ff0,
	0x7f8cc00a, 0xccc1325b, 0xc411325d, 0x251001ef, 0xcd01325d, 0x80001b70, 0xc428000e, 0xc43c0007,
	0x2aa80008, 0xc438001d, 0xce800013, 0x13f4000c, 0x9bc00006, 0xc43d3256, 0x1bf0060b, 0x1bfc0077,
	0x7ff3c00a, 0x80000cf4, 0xc43d325a, 0x1bfc0677, 0x13fc0017, 0x04300100, 0x1bb81fe8, 0x7f73400a,
	0xc032800b, 0x7fb7800a, 0x7ff3c00a, 0x7ffbc00a, 0xcfc1325b, 0x80000c16, 0xc43c0007, 0x7c40c001,
	0x18d42011, 0x17fc0001, 0x18d001e8, 0x24cc007f, 0x7cd4c00a, 0x9bc00004, 0xd8400029, 0xc428005e,
	0x96800e6c, 0x7c414001, 0x50580020, 0x7d59401a, 0xd1400072, 0xc8140072, 0x596001fc, 0x12200009,
	0x7ce0c00a, 0x7c418001, 0x505c0020, 0x7d9d801a, 0x7c41c001, 0x50600020, 0x7de1c01a, 0x7c420001,
	0xccc0001b, 0xd140001d, 0xd180001f, 0xd1c00020, 0xd8400021, 0x95000010, 0x04300000, 0xc428000f,
	0x9a80ffff, 0xc8240010, 0x7e5e800c, 0x9bc00015, 0x9a80000c, 0x9b000024, 0x28300001, 0x122c0004,
	0x06ec0001, 0x0aec0001, 0x9ac0ffff, 0xd8400021, 0x80000d1f, 0xc428000f, 0x9a80ffff, 0xc8240010,
	0x566c0020, 0xc428000e, 0x2aa80008, 0xce800013, 0xce413261, 0xcec13262, 0xd800002a, 0x80001b70,
	0xc4340032, 0x2b740008, 0xcf400013, 0xc40d325b, 0x96800005, 0x566c0020, 0xce413261, 0xcec13262,
	0x800012c2, 0xc438001d, 0x1bb81fe8, 0x7f8cc00a, 0xccc1325b, 0xc411325d, 0x251001ef, 0xcd01325d,
	0x80001b70, 0xc43c0007, 0xc438001d, 0xc428000e, 0x2aa80008, 0xce800013, 0x13f4000c, 0x9bc00006,
	0xc43d3256, 0x1bf0060b, 0x1bfc0077, 0x7ff3c00a, 0x80000d57, 0xc43d325a, 0x1bfc0677, 0x13fc0017,
	0x04300100, 0x1bb81fe8, 0x7f73400a, 0xc0328009, 0x7fb7800a, 0x7ff3c00a, 0x7ffbc00a, 0xcfc1325b,
	0x80000c16, 0xc43c000e, 0x2bfc0008, 0xcfc00013, 0xc4253246, 0xc4113245, 0x04143000, 0xcd413267,
	0x52640020, 0x7e51001a, 0xc4153267, 0x7d2d0011, 0x19640057, 0x19580213, 0x19600199, 0x7da6400a,
	0x7e26400a, 0xd1000025, 0xce400024, 0xcdc00026, 0xd8400027, 0x04142000, 0xcfc00013, 0xcd413267,
	0xc4153267, 0x99400001, 0x90000000, 0x7c40c001, 0x18d001e8, 0x18d40030, 0x18d80034, 0x05280d83,
	0x7c420001, 0x7c424001, 0x86800000, 0x80000d8a, 0x8000016a, 0x80000d95, 0x80000db1, 0x8000016a,
	0x80000d95, 0x80000dbc, 0x11540010, 0x7e010001, 0x8c00187c, 0x7d75400a, 0xcd400013, 0xd4610000,
	0x9580f3d8, 0xc439c040, 0x97800001, 0x7c408001, 0x88000000, 0xd8000016, 0x526c0020, 0x18e80058,
	0x7e2ec01a, 0xd2c00072, 0xc82c0072, 0x5ae0073a, 0x7ea2800a, 0x9940000a, 0xce800024, 0xd2c00025,
	0xd4400026, 0xd8400027, 0x9580f3c6, 0xc4380012, 0x9b80ffff, 0x7c408001, 0x88000000, 0xdc3a0000,
	0x0bb80001, 0xce800024, 0xd2c00025, 0xcc400026, 0xd8400027, 0x9b80fffb, 0x9980fff5, 0x7c408001,
	0x88000000, 0xc02a0001, 0x2aa80001, 0x16200002, 0xce800013, 0xce01c405, 0xd441c406, 0x9580f3b1,
	0xc439c409, 0x97800001, 0x7c408001, 0x88000000, 0xc424000b, 0x32640002, 0x9a40000b, 0x11540010,
	0x29540002, 0xcd400013, 0xd4610000, 0x9580f3a5, 0xd8400013, 0xc439c040, 0x97800001, 0x7c408001,
	0x88000000, 0xd4400078, 0x80000168, 0xd8400029, 0xc40c005e, 0x94c00da7, 0x7c40c001, 0x50500020,
	0x7cd0c01a, 0xd0c00072, 0xc8280072, 0x5aac007e, 0x12d80017, 0x7c41c001, 0x7d9d800a, 0x56a00020,
	0x2620ffff, 0x7da1800a, 0x51980020, 0x7e82400a, 0x7e58c01a, 0x19d4003d, 0x28182002, 0x99400030,
	0x8c00104f, 0xc430000d, 0xc4340035, 0xd800002a, 0xcd800013, 0xc8140023, 0xc4180081, 0x13300005,
	0xc011000f, 0xc4240004, 0x11a00002, 0x7c908009, 0x12640004, 0x7d614011, 0xc4100026, 0x05980008,
	0x7ca4800a, 0x7d1a0002, 0x7cb0800a, 0x3e280008, 0x20880188, 0x54ec0020, 0x7cb4800a, 0xc4300027,
	0x04380008, 0xd1400025, 0xcf000024, 0x20240090, 0x7ca48001, 0xcc800026, 0xccc00026, 0xcec00026,
	0xcec00026, 0x28240004, 0xcc000026, 0x0a640001, 0x9a40fffe, 0x9a800005, 0x32280000, 0x9a800002,
	0x9a000000, 0x7c018001, 0xd8400027, 0xd8000016, 0xcf80003a, 0xd901a2a4, 0x80001037, 0xc418000e,
	0x29980008, 0xcd800013, 0xc421326c, 0x1624001f, 0x9a40fffe, 0xd841325f, 0xd8800033, 0xc43c0009,
	0x27fc0004, 0x97c0fffe, 0xd8000039, 0xd0c00038, 0xc43c0022, 0x9bc0ffff, 0xd8800034, 0xc429325f,
	0x26ac0001, 0x9ac0fffe, 0x26ac0002, 0x96c00003, 0xd800002a, 0x80001b70, 0xc43c0007, 0xc430001e,
	0xd8800033, 0x13f4000c, 0x1b301ff0, 0x2b300300, 0x2330003f, 0x7f37000a, 0x9680000b, 0xc43c0009,
	0x27fc0004, 0x97c0fffe, 0xd8400039, 0xd0c00038, 0xc43c0022, 0x9bc0ffff, 0xcf01325b, 0xd8800034,
	0x80000c16, 0xd8800034, 0x8c0001a2, 0x80001b70, 0xcc80003b, 0x24b00008, 0xc418000e, 0x1330000a,
	0x18ac0024, 0x2b304000, 0x7c40c001, 0xcec00008, 0x18a800e5, 0x1d980008, 0x12a80008, 0x7da9800a,
	0x29980008, 0xcd800013, 0xc4113249, 0x1910003e, 0x99000002, 0xd840003d, 0x7c410001, 0xd4400078,
	0x51100020, 0xcf01326c, 0x7cd0c01a, 0xc421326c, 0x12a80014, 0x2220003f, 0x7e2a000a, 0xcd800013,
	0xce01326c, 0xd8800033, 0xc43c0009, 0x27fc0004, 0x97c0fffe, 0xd8000039, 0xd0c00038, 0xc43c0022,
	0x9bc0ffff, 0xd8800034, 0x80001190, 0x7c40c001, 0x18dc003d, 0x95c00004, 0x041c0001, 0x042c01c8,
	0x8c000d61, 0x18d40030, 0x18d001e8, 0x18fc0034, 0x24e8000f, 0x06a80e71, 0x7c418001, 0x7c41c001,
	0x86800000, 0x80000edd, 0x80000e91, 0x80000e91, 0x80000ea1, 0x80000eaa, 0x80000e7c, 0x80000e7f,
	0x80000e7f, 0x80000e87, 0x80000e8f, 0x8000016a, 0x51dc0020, 0x7d9e001a, 0x80000ee6, 0xc420000e,
	0x2a200008, 0xce000013, 0xc4213262, 0xc4253261, 0x52200020, 0x7e26001a, 0x80000ee6, 0xc420000e,
	0x2a200008, 0xce000013, 0xc4213264, 0xc4253263, 0x52200020, 0x7e26001a, 0x80000ee6, 0xc820001f,
	0x80000ee6, 0x18e82005, 0x51e00020, 0x2aa80000, 0x7da1801a, 0xd1800072, 0xc8180072, 0x59a001fc,
	0x12200009, 0x7ea2800a, 0xce80001c, 0xd180001e, 0xd8400021, 0xc428000f, 0x9a80ffff, 0xc8200011,
	0x80000ee6, 0x15980002, 0xd8400013, 0xcd81c400, 0xc421c401, 0x95400041, 0xc425c401, 0x52640020,
	0x7e26001a, 0x80000ee6, 0x31ac2580, 0x9ac00011, 0x31ac260c, 0x9ac0000f, 0x31ac0800, 0x9ac0000d,
	0x31ac0828, 0x9ac0000b, 0x31ac2440, 0x9ac00009, 0x31ac2390, 0x9ac00007, 0x31ac0093, 0x9ac00005,
	0x31ac31dc, 0x9ac00003, 0x31ac31e6, 0x96c00004, 0xc4340004, 0xd8400008, 0x80000ede, 0x39ac7c06,
	0x3db07c00, 0x9ac00003, 0x97000002, 0x80000ebc, 0x39acc337, 0x3db0c330, 0x9ac00003, 0x97000002,
	0x80000ebc, 0x39acc335, 0x3db0c336, 0x9ac00003, 0x97000002, 0x80000ebc, 0x39ac9002, 0x3db09001,
	0x9ac00003, 0x97000002, 0x80000ebc, 0x39ac9012, 0x3db09011, 0x9ac00003, 0x97000002, 0x80000ebc,
	0x39acec70, 0x3db0ec6f, 0x9ac00003, 0x97000002, 0x80000ebc, 0xc4340004, 0xd8400013, 0xc5a10000,
	0x95400005, 0x05980001, 0xc5a50000, 0x52640020, 0x7e26001a, 0xcf400008, 0x05280eea, 0x7c418001,
	0x7c41c001, 0x86800000, 0x80000ef1, 0x8000016a, 0x80000efe, 0x80000f11, 0x80000f2e, 0x80000efe,
	0x80000f1f, 0xc4340004, 0xd8400013, 0xce190000, 0x95400005, 0x05980001, 0x56200020, 0xce190000,
	0xcf400008, 0x97c0f26f, 0xc439c040, 0x97800001, 0x7c408001, 0x88000000, 0x51ec0020, 0x18e80058,
	0x7daec01a, 0xd2c00072, 0xc82c0072, 0x5af8073a, 0x7eba800a, 0xd2c00025, 0xce800024, 0xce000026,
	0x95400003, 0x56240020, 0xce400026, 0xd8400027, 0x97c0f25c, 0xc4380012, 0x9b80ffff, 0x7c408001,
	0x88000000, 0xc02a0001, 0x2aa80001, 0x15980002, 0xce800013, 0xcd81c405, 0xce01c406, 0x95400003,
	0x56240020, 0xce41c406, 0x97c0f24e, 0xc439c409, 0x97800001, 0x7c408001, 0x88000000, 0xc424000b,
	0x32640002, 0x9a40f247, 0xd8800013, 0xce190000, 0x95400004, 0x05980001, 0x56200020, 0xce190000,
	0x97c0f240, 0xd8400013, 0xc439c040, 0x97800001, 0x7c408001, 0x88000000, 0x31ac2580, 0x9ac00011,
	0x31ac260c, 0x9ac0000f, 0x31ac0800, 0x9ac0000d, 0x31ac0828, 0x9ac0000b, 0x31ac2440, 0x9ac00009,
	0x31ac2390, 0x9ac00007, 0x31ac0093, 0x9ac00005, 0x31ac31dc, 0x9ac00003, 0x31ac31e6, 0x96c00004,
	0xc4340004, 0xd8400008, 0x80000ef2, 0x39ac7c06, 0x3db07c00, 0x9ac00003, 0x97000002, 0x80000f40,
	0x39acc337, 0x3db0c330, 0x9ac00003, 0x97000002, 0x80000f40, 0x39acc335, 0x3db0c336, 0x9ac00003,
	0x97000002, 0x80000f40, 0x39acec70, 0x3db0ec6f, 0x9ac00003, 0x97000002, 0x80000f40, 0x39ac9002,
	0x3db09002, 0x9ac00003, 0x97000002, 0x80000f40, 0x39ac9012, 0x3db09012, 0x9ac00003, 0x97000002,
	0x80000f40, 0x80000ef1, 0xc40c0006, 0x98c0ffff, 0x7c40c001, 0x7c410001, 0x7c414001, 0x7c418001,
	0x7c41c001, 0x7c43c001, 0x95c00001, 0xc434000e, 0x2b740008, 0x2b780001, 0xcf400013, 0xd8c1325e,
	0xcf80001a, 0xd8400013, 0x7c034001, 0x7c038001, 0x18e0007d, 0x32240003, 0x9a400006, 0x32240000,
	0x9a400004, 0xcd01c080, 0xcd41c081, 0x80000f88, 0x51640020, 0x7e52401a, 0xd2400072, 0xc8280072,
	0xce81c080, 0x56ac0020, 0x26f0ffff, 0xcf01c081, 0x1af000fc, 0x1334000a, 0x24e02000, 0x7f63400a,
	0x18e00074, 0x32240003, 0x9a400006, 0x32240000, 0x9a400004, 0xcd81c082, 0xcdc1c083, 0x80000f9d,
	0x51e40020, 0x7e5a401a, 0xd2400072, 0xc8280072, 0xce81c082, 0x56ac0020, 0x26f0ffff, 0xcf01c083,
	0x1af000fc, 0x13380016, 0x18e00039, 0x12200019, 0x7fa3800a, 0x7fb7800a, 0x18e0007d, 0x1220001d,
	0x7fa3800a, 0x18e00074, 0x12200014, 0x7fa3800a, 0xcf81c078, 0xcfc1c084, 0x80000c16, 0x7c40c001,
	0x18dc003d, 0x95c00004, 0x041c0000, 0x042c01c8, 0x8c000d61, 0x18d001e8, 0x31140005, 0x99400003,
	0x31140006, 0x95400002, 0x8c00104f, 0x05280fb7, 0x28140002, 0xcd400013, 0x86800000, 0x80000fbe,
	0x80000fbe, 0x80000fc2, 0x80000fbe, 0x80000fd1, 0x80000ff2, 0x80000ff2, 0x24cc003f, 0xccc1a2a4,
	0x7c408001, 0x88000000, 0x7c414001, 0x18e80039, 0x52a8003b, 0x50580020, 0x24cc003f, 0x7d59401a,
	0xd1400072, 0xc8140072, 0x7d69401a, 0xc41c0017, 0x99c0ffff, 0xd140004b, 0xccc1a2a4, 0x7c408001,
	0x88000000, 0xc414000d, 0x04180001, 0x24cc003f, 0x7d958004, 0xcd800035, 0xccc1a2a4, 0xc43c000e,
	0x2bfc0008, 0xcfc00013, 0xc43d3249, 0x1bfc003e, 0x97c00002, 0xd8400074, 0xc4100019, 0x7d150005,
	0x25100001, 0x9500000b, 0x97c0fffc, 0xc4180021, 0x159c0011, 0x259800ff, 0x31a00003, 0x31a40001,
	0x7e25800a, 0x95c0fff5, 0x9580fff4, 0x80000fef, 0xc411326f, 0x1d100010, 0xcd01326f, 0x97c00002,
	0xd8000074, 0x80001b70, 0x04380000, 0xc430000d, 0xc8140023, 0xc4180081, 0x13300005, 0xc011000f,
	0xc4240004, 0x33b40003, 0x97400003, 0xc0340008, 0x80000ffe, 0xc4340035, 0x11a00002, 0x7c908009,
	0x12640004, 0x7d614011, 0xc4100026, 0x05980008, 0x7ca4800a, 0x7d1a0002, 0x7cb0800a, 0x282c2002,
	0x208801a8, 0x3e280008, 0x7cb4800a, 0xcec00013, 0xc4300027, 0x042c0008, 0xd1400025, 0xcf000024,
	0x20240030, 0x7ca48001, 0xcc800026, 0xccc00026, 0x9b800013, 0xcc400026, 0x7c414001, 0x28340000,
	0xcf400013, 0x507c0020, 0x7d7d401a, 0xd1400072, 0xc8140072, 0x557c0020, 0x28342002, 0xcf400013,
	0xcd400026, 0xcfc00026, 0xd4400026, 0x9a80000e, 0x32280000, 0x9a80000b, 0x8000102f, 0xcc000026,
	0xcc000026, 0xcc000026, 0xcc000026, 0xcc000026, 0x9a800005, 0x32280000, 0x9a800002, 0x9a000000,
	0x7c018001, 0xcc000026, 0xd8400027, 0x1cccfe08, 0xd8800013, 0xcec0003a, 0xccc1a2a4, 0xc43c000e,
	0x2bfc0008, 0xcfc00013, 0xc43d3249, 0x1bfc003e, 0x9bc00007, 0xc428000e, 0x16a80008, 0xce800009,
	0xc42c005e, 0x96c00b33, 0xd840003c, 0xc4200025, 0x7da2400f, 0x7da28002, 0x7e1ac002, 0x0aec0001,
	0x96400002, 0x7d2ac002, 0x3ef40010, 0x9b40f11d, 0x04380030, 0xcf81325e, 0x80000c16, 0xde410000,
	0xdcc10000, 0xdd010000, 0xdd410000, 0xdd810000, 0xddc10000, 0xde010000, 0xc40c000e, 0x7c024001,
	0x28cc0008, 0xccc00013, 0xc8100086, 0x5510003f, 0xc40d3249, 0x18cc003e, 0x98c00003, 0x99000011,
	0x80001075, 0x9900000c, 0xc40c0026, 0xc4100081, 0xc4140025, 0x7d15800f, 0x7d15c002, 0x7d520002,
	0x0a200001, 0x95800002, 0x7cde0002, 0x3e20001a, 0x9a000009, 0x040c0030, 0xccc1325e, 0x80001071,
	0xd9c00036, 0xd8400029, 0xc40c005e, 0x94c00b01, 0x04240001, 0xdc200000, 0xdc1c0000, 0xdc180000,
	0xdc140000, 0xdc100000, 0xdc0c0000, 0x96400004, 0xdc240000, 0xdc0c0000, 0x80000c16, 0xdc240000,
	0x90000000, 0xcc40003f, 0xd8c00010, 0xc4080029, 0xcc80003b, 0xc418000e, 0x18a800e5, 0x1d980008,
	0x12a80008, 0x7da9800a, 0x29980008, 0xcd800013, 0x18a400e5, 0x12500009, 0x248c0008, 0x94c00006,
	0x200c006d, 0x7cd0c00a, 0xccc1326c, 0xc421326c, 0x96000001, 0xcd800013, 0x200c0228, 0x7cd0c00a,
	0xccc1326c, 0xc421326c, 0x96000001, 0xc40c002a, 0xc410002b, 0x18881fe8, 0x18d4072c, 0x18cc00d1,
	0x7cd4c00a, 0x3094000d, 0x38d80000, 0x311c0003, 0x99400006, 0x30940007, 0x1620001f, 0x9940001d,
	0x9a000023, 0x800010c4, 0x9580001a, 0x99c00019, 0xccc00041, 0x25140001, 0xc418002c, 0x9940000d,
	0x259c007f, 0x95c00013, 0x19a00030, 0xcdc0001b, 0xd8400021, 0xd8400022, 0xc430000f, 0x17300001,
	0x9b00fffe, 0x9a000012, 0xd8400023, 0x800010cb, 0x199c0fe8, 0xcdc0001b, 0xd8400021, 0xd8400023,
	0xc430000f, 0x17300001, 0x9b00fffe, 0x800010cb, 0xd8c00010, 0xd8000022, 0xd8000023, 0xc430005e,
	0x97000aac, 0x7c408001, 0x88000000, 0xc43c000e, 0xc434002e, 0x2bfc0008, 0x2020002c, 0xcfc00013,
	0xce01326c, 0x17780001, 0x27740001, 0x07a810d8, 0xcf400010, 0xc421326c, 0x96000001, 0x86800000,
	0x80000168, 0x80000aa7, 0x80000bfc, 0x800012e9, 0x8000104c, 0xcc400040, 0xd8800010, 0xc4180032,
	0x29980008, 0xcd800013, 0x200c007d, 0xccc1325b, 0xc411325b, 0x95000001, 0x7c408001, 0x88000000,
	0x28240007, 0xde430000, 0xd4400078, 0x80001190, 0xcc80003b, 0x24b00008, 0xc418000e, 0x1330000a,
	0x18a800e5, 0x1d980008, 0x12a80008, 0x7da9800a, 0x29980008, 0xcd800013, 0xc40d3249, 0x18cc003e,
	0x98c00002, 0xd840003d, 0x2b304000, 0xcf01326c, 0xc431326c, 0x7c40c001, 0x7c410001, 0x7c414001,
	0x192400fd, 0x50580020, 0x7d59401a, 0x7c41c001, 0x06681110, 0x7c420001, 0xcc400078, 0x18ac0024,
	0x19180070, 0x19100078, 0xcec00008, 0x18f40058, 0x5978073a, 0x7f7b400a, 0x97000001, 0x86800000,
	0x80001117, 0x80001118, 0x80001122, 0x8000112d, 0x80001130, 0x80001133, 0x8000016a, 0x8000117b,
	0x24ec0f00, 0x32ec0600, 0x96c00003, 0xc4300006, 0x9b00ffff, 0xd1400025, 0xcf400024, 0xcdc00026,
	0xd8400027, 0x8000117b, 0x24ec0f00, 0x32ec0600, 0x96c00003, 0xc4300006, 0x9b00ffff, 0xd1400025,
	0xcf400024, 0xcdc00026, 0xce000026, 0xd8400027, 0x8000117b, 0xc81c001f, 0x55e00020, 0x80001122,
	0xc81c0020, 0x55e00020, 0x80001122, 0x8c00116b, 0xd8400013, 0xc02a0200, 0x7e8e8009, 0x22a8003d,
	0x22a80074, 0x2774001c, 0x13740014, 0x7eb6800a, 0x25ecffff, 0x55700020, 0x15f40010, 0x13740002,
	0x275c001f, 0x95c00027, 0x7c018001, 0x7f41c001, 0x15dc0002, 0x39e00008, 0x25dc0007, 0x7dc1c01e,
	0x05dc0001, 0x96000004, 0x05e40008, 0x8c00116e, 0x80001168, 0x7dc2001e, 0x06200001, 0x05e40008,
	0x7e62000e, 0x9a000004, 0x7da58001, 0x8c00116e, 0x80001165, 0x7dc2001e, 0x06200001, 0x7e1a0001,
	0x05cc0008, 0x7e0d000e, 0x95000007, 0x7e02401e, 0x06640001, 0x06640008, 0x05d80008, 0x8c00116e,
	0x80001168, 0x7dc2401e, 0x06640001, 0x7da58001, 0x8c00116e, 0x05e00008, 0x7da2000c, 0x9600ffe6,
	0x17640002, 0x8c00116e, 0x80001190, 0xc4200006, 0x9a00ffff, 0x90000000, 0x8c00116b, 0xc420000e,
	0x2a200001, 0xce00001a, 0xce81c078, 0xcec1c080, 0xcc01c081, 0xcd41c082, 0xcf01c083, 0x12640002,
	0x22640435, 0xce41c084, 0x90000000, 0x0528117e, 0x312c0003, 0x86800000, 0x80001190, 0x80001185,
	0x80001182, 0x80001182, 0xc4300012, 0x9b00ffff, 0x9ac0000c, 0xc03a0400, 0xc4340004, 0xd8400013,
	0xd8400008, 0xc418000e, 0x15980008, 0x1198001c, 0x7d81c00a, 0xcdc130b7, 0xcf8130b5, 0xcf400008,
	0x04240008, 0xc418000e, 0xc41c0049, 0x19a000e8, 0x29a80008, 0x7de2c00c, 0xce800013, 0xc421325e,
	0x26200010, 0xc415326d, 0x9a000006, 0xc420007d, 0x96000004, 0x96c00003, 0xce40003e, 0x800011a3,
	0x7d654001, 0xcd41326d, 0x7c020001, 0x96000005, 0xc4100026, 0xc4240081, 0xc4140025, 0x800011b6,
	0xc4253279, 0xc415326d, 0xc431326c, 0x2730003f, 0x3b380006, 0x97800004, 0x3f38000b, 0x9b800004,
	0x800011b4, 0x04300006, 0x800011b4, 0x0430000b, 0x04380002, 0x7fb10004, 0x7e57000f, 0x7e578002,
	0x7d67c002, 0x0be40001, 0x97000002, 0x7d3a4002, 0x202c002c, 0xc421325e, 0x04280020, 0xcec1326c,
	0x26200010, 0x3e640010, 0x96000003, 0x96400002, 0xce81325e, 0xc4300028, 0xc434002e, 0x17780001,
	0x27740001, 0x07a811cf, 0x9b00feb8, 0xcf400010, 0xc414005e, 0x954009a7, 0x86800000, 0x80000168,
	0x80000aa7, 0x80000bfc, 0x800012e9, 0x80000168, 0x8c00120d, 0x7c40c001, 0xccc1c07c, 0xcc41c07d,
	0xcc41c08c, 0x7c410001, 0xcc41c079, 0xcd01c07e, 0x7c414001, 0x18f0012f, 0x18f40612, 0x18cc00c1,
	0x7f73400a, 0x7cf7400a, 0x39600004, 0x9a000002, 0xc0140004, 0x11600001, 0x18fc003e, 0x9740001c,
	0xcf400041, 0xc425c07f, 0x97c00003, 0x166c001f, 0x800011ee, 0x1a6c003e, 0x96c00006, 0x04200002,
	0x0a200001, 0x9a00ffff, 0xd8400013, 0x800011e8, 0xc428002c, 0x96800010, 0x26ac007f, 0xcec0001b,
	0xd8400021, 0x1ab00030, 0x1aac0fe8, 0xc434000f, 0x9b40ffff, 0x97000008, 0xcec0001b, 0xd8400021,
	0xc434000f, 0x9b40ffff, 0x80001205, 0x0a200001, 0x9a00ffff, 0xd8400013, 0xc425c07f, 0x166c001f,
	0x11600001, 0x9ac0fffa, 0x8c001232, 0x7c408001, 0x88000000, 0xd8000033, 0xc438000b, 0xc43c0009,
	0x27fc0001, 0x97c0fffe, 0xd8400013, 0xd841c07f, 0xc43dc07f, 0x1bfc0078, 0x7ffbc00c, 0x97c0fffd,
	0x90000000, 0xc03a2800, 0xcf81c07c, 0xcc01c07d, 0xcc01c08c, 0xcc01c079, 0xcc01c07e, 0x04380040,
	0xcf80001b, 0xd8400021, 0xc438000f, 0x9b80ffff, 0x04380060, 0xcf80001b, 0xd8400021, 0xc438000f,
	0x9b80ffff, 0x04380002, 0x0bb80001, 0x9b80ffff, 0xd8400013, 0xc43dc07f, 0x17fc001f, 0x04380010,
	0x9bc0fffa, 0x90000000, 0xd8400013, 0xd801c07f, 0xd8400013, 0xc43dc07f, 0xcfc00078, 0xd8000034,
	0x90000000, 0xc03ae000, 0xcf81c200, 0xc03a0800, 0xcf81c07c, 0xcc01c07d, 0xcc01c08c, 0xcc01c079,
	0xcc01c07e, 0x04380040, 0xcf80001b, 0xd8400021, 0xc438000f, 0x9b80ffff, 0x04380002, 0x0bb80001,
	0x9b80ffff, 0xd8400013, 0xc43dc07f, 0x17fc001f, 0x04380010, 0x9bc0fffa, 0x90000000, 0xc03ae000,
	0xcf81c200, 0xc03a4000, 0xcf81c07c, 0xcc01c07d, 0xcc01c08c, 0xcc01c079, 0xcc01c07e, 0x04380002,
	0x0bb80001, 0x9b80ffff, 0xd8400013, 0xc43dc07f, 0x17fc001f, 0x04380010, 0x9bc0fffa, 0x90000000,
	0xc40c0007, 0x30d00002, 0x99000052, 0xd8400029, 0xc424005e, 0x9640090f, 0x7c410001, 0xc428000e,
	0x1514001f, 0x19180038, 0x2aa80008, 0x99400030, 0x30dc0001, 0xce800013, 0x99c0000a, 0xc42d324e,
	0xc431324d, 0x52ec0020, 0x7ef2c01a, 0xc435324f, 0xc4293256, 0x1ab0c006, 0x52ec0008, 0x8000127f,
	0xc42d3258, 0xc4313257, 0x52ec0020, 0x7ef2c01a, 0xc4353259, 0xc429325a, 0x1ab0c012, 0x07740001,
	0x04240002, 0x26a0003f, 0x7e624004, 0x7f67800f, 0x97800002, 0x04340000, 0x53740002, 0x7ef6c011,
	0x1ab42010, 0x16a8000c, 0x26a80800, 0x2b740000, 0x7f73400a, 0x7f6b400a, 0xcf40001c, 0xd2c0001e,
	0xd8400021, 0xc438000f, 0x9b80ffff, 0xc4100011, 0x1514001f, 0x99400006, 0x9980000a, 0x8c0012e1,
	0xc40c0007, 0x04100000, 0x80001267, 0xd800002a, 0xc424005e, 0x964008d7, 0xd9800036, 0x80000c16,
	0xc42c001d, 0x95c00005, 0xc431325a, 0x1b300677, 0x11dc000c, 0x800012aa, 0xc4313256, 0x1b34060b,
	0x1b300077, 0x7f37000a, 0x13300017, 0x04340100, 0x26ec00ff, 0xc03a8002, 0x7ef6c00a, 0x7edec00a,
	0x7f3b000a, 0x7ef2c00a, 0xcec1325b, 0x80000c16, 0xc4140032, 0xc410001d, 0x29540008, 0xcd400013,
	0xc40d325b, 0x1858003f, 0x251000ff, 0x99800007, 0x7d0cc00a, 0xccc1325b, 0xc411325d, 0x251001ef,
	0xcd01325d, 0x80000168, 0x18d0006c, 0x18d407f0, 0x9900000e, 0x04100002, 0xc4193256, 0xc41d324f,
	0x2598003f, 0x7d190004, 0x7d5d4001, 0x7d52000f, 0x9a000003, 0xcd41324f, 0x800012d8, 0x7d514002,
	0xcd41324f, 0x800012d8, 0xc4193259, 0xc41d325a, 0x7d958001, 0x7dd5c002, 0xcd813259, 0xcdc1325a,
	0xc411325d, 0x251001ef, 0xcd01325d, 0x1ccc001e, 0xccc1325b, 0xc40d325b, 0x94c00001, 0x7c408001,
	0x88000000, 0xc40c0021, 0xc4340028, 0x14f00010, 0xc4380030, 0xc43c0007, 0x9b000004, 0x9b40000c,
	0x9b80000f, 0x90000000, 0x17300001, 0x9b000005, 0xccc00037, 0x8c000190, 0xd8000032, 0x90000000,
	0xd8000028, 0xd800002b, 0x80000168, 0xd980003f, 0x97c00002, 0xd9c0003f, 0x80001082, 0xd9800040,
	0x97c00002, 0xd9c00040, 0x800010de, 0xc43c0007, 0x33f80003, 0x97800051, 0xcc80003b, 0x24b00008,
	0xc418000e, 0x1330000a, 0x18a800e5, 0x1d980008, 0x12a80008, 0x7da9800a, 0x29980008, 0xcd800013,
	0xc4353249, 0x1b74003e, 0x9b400002, 0xd840003d, 0x2b304000, 0xcf01326c, 0xc431326c, 0x97000001,
	0x7c434001, 0x1b4c00f8, 0x7c410001, 0x7c414001, 0x50700020, 0x04e81324, 0x18ac0024, 0x7c41c001,
	0x50600020, 0xcc400078, 0x30e40004, 0x9a400007, 0x7d71401a, 0x596401fc, 0x12640009, 0x1b74008d,
	0x7e76400a, 0x2a640000, 0xcec00008, 0x86800000, 0x8000016a, 0x8000016a, 0x8000016a, 0x8000016a,
	0x8000132c, 0x8000133b, 0x80001344, 0x8000016a, 0xc4340004, 0xd8400013, 0xd8400008, 0xc42530b5,
	0x1a68003a, 0x9a80fffe, 0x2024003a, 0xc418000e, 0x25980700, 0x11980014, 0x7d19000a, 0xcd0130b7,
	0xce4130b5, 0xcf400008, 0x80001190, 0xce40001c, 0xd140001e, 0xd8400021, 0xc428000f, 0x9a80ffff,
	0xc4240011, 0x7de6800f, 0x9a80ffea, 0x80001190, 0xce40001c, 0xd140001e, 0xd8400021, 0xc428000f,
	0x9a80ffff, 0xc8240011, 0x7de1c01a, 0x7de6800f, 0x9a80ffe0, 0x80001190, 0x8c00104f, 0x28182002,
	0xc430000d, 0xc4340035, 0xcd800013, 0xc8140023, 0xc4180081, 0x13300005, 0xc4240004, 0x11a00002,
	0x12640004, 0x7d614011, 0xc4100026, 0x05980008, 0x7ca4800a, 0x7d1a0002, 0x7cb0800a, 0x3e280008,
	0x7cb4800a, 0xc4300027, 0x042c0008, 0xd1400025, 0xcf000024, 0x20240030, 0x7ca48001, 0xcc800026,
	0x7c434001, 0x1b4c00f8, 0xcf400026, 0xcc400026, 0x28340000, 0xcf400013, 0x7c414001, 0x507c0020,
	0x30e40004, 0x9a400005, 0x7d7d401a, 0xd1400072, 0xc8140072, 0x557c0020, 0x28342002, 0xcf400013,
	0xcd400026, 0xcfc00026, 0xd4400026, 0xcc000026, 0x9a800005, 0x32280000, 0x9a800002, 0x9a000000,
	0x7c018001, 0xd8400027, 0xd8800013, 0x04380028, 0xcec0003a, 0xcf81a2a4, 0x80001037, 0xd8400029,
	0xc40c005e, 0x94c007eb, 0x7c40c001, 0x50500020, 0x7d0d001a, 0xd1000072, 0xc8100072, 0x591c01fc,
	0x11dc0009, 0x45140210, 0x595801fc, 0x11980009, 0x29dc0000, 0xcdc0001c, 0xd140001e, 0xd8400021,
	0xc418000f, 0x9980ffff, 0xc4200011, 0x1624001f, 0x96400069, 0xc40c000e, 0x28cc0008, 0xccc00013,
	0xce013249, 0x1a307fe8, 0xcf00000a, 0x23304076, 0xd1000001, 0xcf000001, 0xc41d3254, 0xc4253256,
	0x18cc00e8, 0x10cc0015, 0x4514020c, 0xd140001e, 0xd8400021, 0xc418000f, 0x9980ffff, 0xc4200011,
	0xce013248, 0x1a2001e8, 0x12200014, 0x2a204001, 0xce000013, 0x1a64003c, 0x1264001f, 0x11dc0009,
	0x15dc000b, 0x7dcdc00a, 0x7e5dc00a, 0xcdc00100, 0xd8800013, 0xd8400010, 0xd800002a, 0xd8400008,
	0xcf00000d, 0xcf00000a, 0x8c001427, 0x04340022, 0x07740001, 0x04300010, 0xdf430000, 0x7c434001,
	0x7c408001, 0xd4412e01, 0x0434001e, 0xdf430000, 0xd4400078, 0xdf030000, 0xd4412e40, 0xd8400013,
	0xcc41c030, 0xcc41c031, 0x248dfffe, 0xccc12e00, 0xd8800013, 0xcc812e00, 0x7c434001, 0x7c434001,
	0x8c00142b, 0xd8000010, 0xc40c000e, 0x28cc0008, 0xccc00013, 0x45140248, 0xd140001e, 0xd8400021,
	0xc418000f, 0x9980ffff, 0xc8200011, 0xce013257, 0x56200020, 0xce013258, 0x0434000c, 0xdb000024,
	0xd1400025, 0xd8000026, 0xd8000026, 0xd8400027, 0x45540008, 0xd140001e, 0xd8400021, 0xc418000f,
	0x9980ffff, 0xc8200011, 0xce013259, 0x56200020, 0xc0337fff, 0x7f220009, 0xce01325a, 0x55300020,
	0x7d01c001, 0x042c01d0, 0x8c000d61, 0x06ec0004, 0x7f01c001, 0x8c000d61, 0x041c0002, 0x042c01c8,
	0x8c000d61, 0xc4380012, 0x9b80ffff, 0xd800002a, 0x80000aa7, 0xd800002a, 0x7c408001, 0x88000000,
	0xd8400029, 0x7c40c001, 0x50500020, 0x8c001427, 0x7cd0c01a, 0xc4200007, 0xd0c00072, 0xc8240072,
	0xd240001e, 0x7c414001, 0x19682011, 0x5a6c01fc, 0x12ec0009, 0x7eeac00a, 0x2aec0000, 0xcec0001c,
	0xd8400021, 0xc430000f, 0x9b00ffff, 0xc4180011, 0x7c438001, 0x99800007, 0xdf830000, 0xcfa0000c,
	0x8c00142b, 0xd4400078, 0xd800002a, 0x80001b70, 0x8c00142b, 0xd800002a, 0x80001b70, 0xd8000012,
	0xc43c0008, 0x9bc0ffff, 0x90000000, 0xd8400012, 0xc43c0008, 0x97c0ffff, 0x90000000, 0xc4380007,
	0x7c40c001, 0x17b80001, 0x18d40038, 0x7c410001, 0x9b800004, 0xd8400029, 0xc414005e, 0x9540073d,
	0x18c80066, 0x7c414001, 0x30880001, 0x7c418001, 0x94800008, 0x8c00187c, 0xcf400013, 0xc42c0004,
	0xd8400008, 0xcd910000, 0xcec00008, 0x7d410001, 0x043c0000, 0x7c41c001, 0x7c420001, 0x04240001,
	0x06200001, 0x4220000c, 0x0a640001, 0xcc000078, 0x9a40fffe, 0x24e80007, 0x24ec0010, 0xd8400013,
	0x9ac00006, 0xc42c0004, 0xd8400008, 0xc5310000, 0xcec00008, 0x80001465, 0x51540020, 0x7d15001a,
	0xd1000072, 0xc82c0072, 0xd2c0001e, 0x18f02011, 0x5aec01fc, 0x12ec0009, 0x7ef2c00a, 0x2aec0000,
	0xcec0001c, 0xd8400021, 0xc42c000f, 0x9ac0ffff, 0xc4300011, 0x96800012, 0x12a80001, 0x0aa80001,
	0x06a8146a, 0x7f1f0009, 0x86800000, 0x7f1b400f, 0x80001478, 0x7f1b400e, 0x80001478, 0x7f1b400c,
	0x8000147a, 0x7f1b400d, 0x8000147a, 0x7f1b400f, 0x8000147a, 0x7f1b400e, 0x8000147a, 0x7f334002,
	0x97400014, 0x8000147b, 0x9b400012, 0x9b800005, 0x9bc0001f, 0x7e024001, 0x043c0001, 0x8000144a,
	0xc40c0032, 0xc438001d, 0x28cc0008, 0xccc00013, 0xc43d325b, 0x1bb81ff0, 0x7fbfc00a, 0xcfc1325b,
	0xc411325d, 0x251001ef, 0xcd01325d, 0x80001b70, 0x94800007, 0x8c00187c, 0xcf400013, 0xc42c0004,
	0xd8400008, 0xcd910000, 0xcec00008, 0x9b800003, 0xd800002a, 0x80001b70, 0xc40c0032, 0x28cc0008,
	0xccc00013, 0xc40d325b, 0x800012c2, 0xc40c000e, 0xc43c0007, 0xc438001d, 0x28cc0008, 0xccc00013,
	0x13f4000c, 0x9bc00006, 0xc43d3256, 0x1bf0060b, 0x1bfc0077, 0x7ff3c00a, 0x800014a9, 0xc43d325a,
	0x1bfc0677, 0x04300100, 0x1bb81ff0, 0x7f73400a, 0xc0328007, 0x7fb7800a, 0x13fc0017, 0x7ff3c00a,
	0x7ffbc00a, 0xcfc1325b, 0xc03a0002, 0xc4340004, 0xd8400013, 0xd8400008, 0xcf8130b5, 0xcf400008,
	0x80000c16, 0x043c0000, 0xc414000e, 0x29540008, 0xcd400013, 0xc4193246, 0xc41d3245, 0x51980020,
	0x7dd9c01a, 0x45dc0390, 0xc4313267, 0x04183000, 0xcd813267, 0x1b380057, 0x1b340213, 0x1b300199,
	0x7f7b400a, 0x7f73400a, 0xcf400024, 0xd1c00025, 0xcc800026, 0x7c420001, 0xce000026, 0x7c424001,
	0xce400026, 0x7c428001, 0xce800026, 0x7c42c001, 0xcec00026, 0x7c430001, 0xcf000026, 0x7c434001,
	0xcf400026, 0x7c438001, 0xcf800026, 0xd8400027, 0xcd400013, 0x04182000, 0xcd813267, 0xd840004f,
	0x1a0800fd, 0x109c000a, 0xc4193265, 0x7dd9c00a, 0xcdc13265, 0x2620ffff, 0xce080228, 0x9880000e,
	0xce480250, 0xce880258, 0xd8080230, 0xd8080238, 0xd8080240, 0xd8080248, 0xd8080268, 0xd8080270,
	0xd8080278, 0xd8080280, 0xd800004f, 0x97c0ec75, 0x90000000, 0x040c0000, 0x041c0010, 0x26180001,
	0x09dc0001, 0x16200001, 0x95800002, 0x04cc0001, 0x99c0fffb, 0xccc80230, 0xd8080238, 0xd8080240,
	0xd8080248, 0x040c0000, 0xce480250, 0xce880258, 0x52a80020, 0x7e6a401a, 0x041c0020, 0x66580001,
	0x09dc0001, 0x56640001, 0x95800002, 0x04cc0001, 0x99c0fffb, 0xccc80260, 0xd8080268, 0xd8080270,
	0xd8080278, 0xd8080280, 0x040c0000, 0xcec80288, 0xcf080290, 0xcec80298, 0xcf0802a0, 0x040c0000,
	0x041c0010, 0xcf4802a8, 0x27580001, 0x09dc0001, 0x17740001, 0x95800002, 0x04cc0001, 0x99c0fffb,
	0xccc802b0, 0xd80802b8, 0x178c000b, 0x27b8003f, 0x7cf8c001, 0xcf8802c0, 0xccc802c8, 0xcf8802d0,
	0xcf8802d8, 0xd800004f, 0x97c00002, 0x90000000, 0x7c408001, 0x88000000, 0xc40c000e, 0x28cc0008,
	0xccc00013, 0xc43d3265, 0x1bc800ea, 0x7c418001, 0x25b8ffff, 0xc4930240, 0xc48f0238, 0x04cc0001,
	0x24cc000f, 0x7cd2800c, 0x9a80000b, 0xc5230309, 0x2620ffff, 0x7e3a400c, 0x9a400004, 0x05100001,
	0x2510000f, 0x80001539, 0xcd08034b, 0xd4400078, 0x80000168, 0xc48f0230, 0xc4930240, 0x98c00004,
	0xcd880353, 0x8c00163f, 0xc49b0353, 0xc4930238, 0xc48f0228, 0x05100001, 0x2510000f, 0x7cd14005,
	0x25540001, 0x99400004, 0x05100001, 0x2510000f, 0x8000154f, 0xc48f0230, 0x7c41c001, 0xcd080238,
	0xcd08034b, 0x08cc0001, 0x2598ffff, 0x3d200008, 0xccc80230, 0xcd900309, 0xd8100319, 0x04340801,
	0x2198003f, 0xcf400013, 0xcd910ce7, 0xc4190ce6, 0x7d918005, 0x25980001, 0x9580fffd, 0x7d918004,
	0xcd810ce6, 0x9a000003, 0xcdd1054f, 0x8000156e, 0x090c0008, 0xcdcd050e, 0x040c0000, 0x110c0014,
	0x28cc4001, 0xccc00013, 0xcc41230a, 0xcc41230b, 0xcc41230c, 0xcc41230d, 0xcc480329, 0xcc48032a,
	0xcc4802e0, 0xd8000055, 0xc48f02e0, 0x24d8003f, 0x09940001, 0x44100001, 0x9580002c, 0x95400005,
	0x09540001, 0x51100001, 0x69100001, 0x8000157f, 0x24cc003f, 0xc4970290, 0xc49b0288, 0x51540020,
	0x7d59401a, 0xc49b02a0, 0xc49f0298, 0x51980020, 0x7d9d801a, 0x041c0040, 0x04200000, 0x7dcdc002,
	0x7d924019, 0x7d26400c, 0x09dc0001, 0x9a400008, 0x51100001, 0x06200001, 0x99c0fffa, 0xc48f0230,
	0xc4930240, 0x8c00163f, 0x80001579, 0x7d010021, 0x7d914019, 0xc4930238, 0x55580020, 0xcd480298,
	0xcd8802a0, 0x10d40010, 0x12180016, 0xc51f0309, 0x7d95800a, 0x7d62000a, 0x7dd9c00a, 0xd8400013,
	0xcdd00309, 0xce113320, 0xc48f02e0, 0xc49b02b0, 0x18dc01e8, 0x7dd9400e, 0xc48f0230, 0xc4930240,
	0x95c0001d, 0x95400003, 0x8c00163f, 0x800015aa, 0xc48f0238, 0xc4a302b8, 0x12240004, 0x7e5e400a,
	0xc4ab02a8, 0x04100000, 0xce4c0319, 0x7d9d8002, 0x7ea14005, 0x25540001, 0x99400004, 0x06200001,
	0x2620000f, 0x800015bc, 0x09dc0001, 0x04240001, 0x7e624004, 0x06200001, 0x7d25000a, 0x2620000f,
	0x99c0fff4, 0xd8400013, 0xcd0d3330, 0xce0802b8, 0xcd8802b0, 0xc4ab02e0, 0x1aa807f0, 0xc48f02d0,
	0xc49702d8, 0xc49b02c8, 0xc49f02c0, 0x96800028, 0x7d4e000f, 0x9600000b, 0x7d964002, 0x7e6a000f,
	0x96000003, 0x7d694001, 0x800015e9, 0x7cde4002, 0x7e6a000f, 0x96000008, 0x7de94001, 0x800015e9,
	0x7cd64002, 0x7e6a000e, 0x96000003, 0x7d694001, 0x800015e9, 0xc48f0230, 0xc4930240, 0x8c00163f,
	0x800015cd, 0xc4930238, 0x7d698002, 0xcd4802d8, 0x129c0008, 0xc50f0319, 0x11a0000e, 0x11140001,
	0xc4340004, 0xd8400008, 0xd8400013, 0x7e1e000a, 0x1198000a, 0xcd953300, 0x7e0e000a, 0x12a8000a,
	0xce953301, 0xce100319, 0xcf400008, 0xc4b70280, 0xc4b30278, 0x7f73800a, 0x536c0020, 0x7ef2c01a,
	0x9780eb68, 0x8c001608, 0xd8080278, 0xd8080280, 0x7c408001, 0x88000000, 0x043c0003, 0x80001609,
	0x043c0001, 0x30b40000, 0x9b400011, 0xc4b70258, 0xc4b30250, 0x53780020, 0x7fb3801a, 0x7faf8019,
	0x04300020, 0x04280000, 0x67b40001, 0x0b300001, 0x57b80001, 0x97400002, 0x06a80001, 0x9b00fffb,
	0xc4bb0260, 0x7fab8001, 0xcf880260, 0x04300020, 0x04280000, 0x66f40001, 0x0b300001, 0x56ec0001,
	0x97400005, 0x8c001628, 0xc4353247, 0x7f7f4009, 0x9b40fffe, 0x06a80001, 0x9b00fff7, 0x90000000,
	0x269c0007, 0x11dc0008, 0x29dc0008, 0x26a00018, 0x12200003, 0x7de1c00a, 0x26a00060, 0x06200020,
	0x16200001, 0x7de1c00a, 0xcdc00013, 0x90000000, 0x269c0018, 0x26a00007, 0x26a40060, 0x11dc0006,
	0x12200006, 0x16640001, 0x29dc0008, 0x7de1c00a, 0x7de5c00a, 0xcdc00013, 0x90000000, 0xc4b70228,
	0x05100001, 0x04cc0001, 0x2510000f, 0xccc80230, 0x7f514005, 0x25540001, 0x99400004, 0x05100001,
	0x2510000f, 0x80001644, 0xc4b30248, 0xcd080240, 0x7f130005, 0x27300001, 0x9b000002, 0x8c001688,
	0x8c00120d, 0x8c001219, 0x8c001232, 0x04300001, 0x04340801, 0x7f130004, 0xcf400013, 0xcf01051e,
	0xc42d051f, 0x7ed2c005, 0x26ec0001, 0x96c0fffd, 0xcf01051f, 0xd8000055, 0xc5170309, 0x195c07f0,
	0x196007f6, 0x04340000, 0x95c00008, 0x09dc0001, 0x04340001, 0x95c00005, 0x09dc0001, 0x53740001,
	0x6b740001, 0x80001665, 0xc4a702a0, 0xc4ab0298, 0x52640020, 0x7e6a401a, 0x7f634014, 0x7e76401a,
	0xc4300004, 0xd8400008, 0xd8400013, 0x56680020, 0xd8113320, 0xce480298, 0xce8802a0, 0xc5170319,
	0xc4b702b0, 0x255c000f, 0x7f5f4001, 0xd8113330, 0xcf4802b0, 0x11340001, 0x195c07e8, 0x196007ee,
	0xd8353300, 0x7e1e4001, 0xd8353301, 0xce4802d0, 0xd8100309, 0xd8100319, 0xcf000008, 0x90000000,
	0xc4970258, 0xc48f0250, 0x51540020, 0x7cd4c01a, 0xc4af0280, 0xc4b30278, 0x52ec0020, 0x7ef2c01a,
	0x04140020, 0x04280000, 0x64d80001, 0x09540001, 0x54cc0001, 0x95800060, 0x8c001628, 0xc4193247,
	0x25980001, 0x9580005c, 0x7dc24001, 0xc41d3248, 0x25dc000f, 0x7dd2000c, 0x96000057, 0xc41d3255,
	0xc435324f, 0x7df5c00c, 0x99c00004, 0xc4193265, 0x25980040, 0x9580fffe, 0xc439325b, 0x1bb0003f,
	0x97000049, 0x1bb000e8, 0x33380003, 0x9b800046, 0x33300002, 0x9700000a, 0xc4393260, 0x1bb000e4,
	0x33300004, 0x97000040, 0xc431325d, 0x27300010, 0x9b00fffe, 0x800016f1, 0xce400013, 0xc033ffff,
	0x2f3000ff, 0xc439325b, 0x7f3b0009, 0xcf01325b, 0xc439325b, 0x27b800ff, 0x9b80fffe, 0xd8c00033,
	0xc4300009, 0x27300008, 0x9700fffe, 0x1a7003e6, 0x27380003, 0x13b80004, 0x27300003, 0x13300003,
	0x7fb38001, 0x1a7000e8, 0x7fb38001, 0x13300001, 0x7fb38001, 0x07b80002, 0xd8400013, 0x1a700064,
	0x33300002, 0x97000009, 0x17b00005, 0x07300003, 0xcf012082, 0xcc01203f, 0xd8400013, 0xcc01203f,
	0x0b300003, 0x800016df, 0x17b00005, 0xcf012082, 0xcc01203f, 0xd8400013, 0xcc01203f, 0x13300005,
	0x7fb30002, 0xc4392083, 0x7fb38005, 0x27b80001, 0x9b80ffdf, 0xd8c00034, 0xce400013, 0xc431325d,
	0x27300010, 0x9b00fffe, 0xc439325b, 0x27b000ff, 0x9b00ffca, 0xd841325d, 0x2030007b, 0xcf01325b,
	0x800016f2, 0xd841325d, 0x04300001, 0x7f2b0014, 0x7ef2c01a, 0x06a80001, 0x9940ff9c, 0x8c001608,
	0xd8080278, 0xd8080280, 0x90000000, 0xd840004f, 0xc414000e, 0x29540008, 0xcd400013, 0xc43d3265,
	0x1bc800ea, 0xd80802e9, 0x7c40c001, 0x18fc0064, 0x9bc00042, 0xc4193246, 0xc41d3245, 0x51980020,
	0x7dd9801a, 0x45980400, 0xc4313267, 0x043c3000, 0xcfc13267, 0xc43d3267, 0x9bc00001, 0x1b380057,
	0x1b340213, 0x1b300199, 0x7f7b400a, 0x7f73400a, 0xcf400024, 0x14f4001d, 0xc4bf02e9, 0x9bc0001c,
	0x7c410001, 0x192807fa, 0xc4bf0258, 0xc4a70250, 0x53fc0020, 0x7e7e401a, 0x042c0000, 0x04300000,
	0x667c0001, 0x56640001, 0x06ec0001, 0x97c0fffd, 0x07300001, 0x0aec0001, 0x7eebc00c, 0x06ec0001,
	0x97c0fff8, 0x0b300001, 0x43300007, 0x53300002, 0x7db30011, 0xd3000025, 0xc03ec005, 0x2bfca200,
	0xcfc00026, 0xccc00026, 0xcd000026, 0x192807fa, 0xc01f007f, 0x7d1d0009, 0x2110007d, 0x8c001628,
	0x203c003f, 0xcfc13256, 0x8c0017f5, 0xcd013254, 0x18fc01e8, 0xcfc13248, 0x8c00185b, 0xd8413247,
	0x0b740001, 0x9b40ffd5, 0xd800004f, 0xc4bf02e9, 0x97c0ea24, 0x90000000, 0x14d4001d, 0xc4930260,
	0x7d52400e, 0xc49f0258, 0xc4a30250, 0x51dc0020, 0x7de1801a, 0x96400017, 0x7d534002, 0xc4af0270,
	0x7dae4005, 0x26640001, 0x32e0001f, 0x9a400006, 0x06ec0001, 0x96000002, 0x042c0000, 0xcec80270,
	0x8000174f, 0x0b740001, 0x8c00178a, 0x05100001, 0x9b40fff3, 0xc4af0280, 0xc4b30278, 0x52ec0020,
	0x7ef2c01a, 0x8c001608, 0xd8080278, 0xd8080280, 0xc4ab0268, 0x7daa4005, 0x26640001, 0x32a0001f,
	0x9a400005, 0x06a80001, 0x96000002, 0x24280000, 0x80001765, 0x7c410001, 0xc01f007f, 0x09540001,
	0x7d1d0009, 0x2110007d, 0x8c001628, 0xd8013256, 0x8c0017f2, 0xcd013254, 0xc4113248, 0x15100004,
	0x11100004, 0xc4b3034b, 0x7f13000a, 0xcf013248, 0xc4930260, 0x8c001855, 0x32a4001f, 0xd8413247,
	0xd800004f, 0x09100001, 0x06a80001, 0x96400002, 0x24280000, 0xcd080260, 0xce880268, 0x9940ffc0,
	0x7c408001, 0x88000000, 0x7ec28001, 0x8c001628, 0x32e0001f, 0xc4253247, 0x26640001, 0x9640005e,
	0xc4293265, 0xc4253255, 0xc431324f, 0x7e72400c, 0x26a80040, 0x9a400002, 0x9680fff7, 0xc429325b,
	0x1aa4003f, 0x96400049, 0x1aa400e8, 0x32680003, 0x9a800046, 0x32640002, 0x9640000a, 0xc4293260,
	0x1aa400e4, 0x32640004, 0x96400040, 0xc425325d, 0x26640010, 0x9a40fffe, 0x800017e2, 0xcdc00013,
	0xc027ffff, 0x2e6400ff, 0xc429325b, 0x7e6a4009, 0xce41325b, 0xc429325b, 0x26a800ff, 0x9a80fffe,
	0xd8c00033, 0xc4240009, 0x26640008, 0x9640fffe, 0x19e403e6, 0x26680003, 0x12a80004, 0x26640003,
	0x12640003, 0x7ea68001, 0x19e400e8, 0x7ea68001, 0x12640001, 0x7ea68001, 0x06a80002, 0xd8400013,
	0x19e40064, 0x32640002, 0x96400009, 0x16a40005, 0x06640003, 0xce412082, 0xcc01203f, 0xd8400013,
	0xcc01203f, 0x0a640003, 0x800017d0, 0x16a40005, 0xce412082, 0xcc01203f, 0xd8400013, 0xcc01203f,
	0x12640005, 0x7ea64002, 0xc4292083, 0x7ea68005, 0x26a80001, 0x9a80ffdf, 0xd8c00034, 0xcdc00013,
	0xc425325d, 0x26640010, 0x9a40fffe, 0xc429325b, 0x26a400ff, 0x9a40ffca, 0xd841325d, 0x2024007b,
	0xce41325b, 0x800017e3, 0xd841325d, 0xc4a70280, 0xc4ab0278, 0x52640020, 0x7e6a401a, 0x04280001,
	0x7eae8014, 0x7e6a401a, 0x56680020, 0xce480278, 0xce880280, 0x06ec0001, 0x96000002, 0x042c0000,
	0xcec80270, 0x90000000, 0x7c438001, 0x7c420001, 0x800017fe, 0xc4bf02e9, 0x9bc00006, 0x7c438001,
	0x7c420001, 0xcf800026, 0xce000026, 0x800017fe, 0xc43b02eb, 0xc42302ec, 0xcf813245, 0xce013246,
	0x52200020, 0x7fa3801a, 0x47b8020c, 0x15e00008, 0x1220000a, 0x2a206032, 0x513c001e, 0x7e3e001a,
	0xc4bf02e9, 0x9bc00005, 0xc43c000e, 0x2bfc0008, 0xcfc00013, 0x8000180f, 0xcd400013, 0xc4313267,
	0x1b3c0077, 0x1b300199, 0x7ff3000a, 0x1330000a, 0x2b300032, 0x043c3000, 0xcfc13267, 0xc43d3267,
	0xd200000b, 0xc4200007, 0xd3800002, 0xcf000002, 0xd8000040, 0x96000002, 0xd8400040, 0xd8400018,
	0x043c2000, 0xcfc13267, 0xd8000018, 0xd8800010, 0xcdc00013, 0x7dc30001, 0xdc1e0000, 0x04380032,
	0xcf80000e, 0x8c001427, 0xcc413248, 0xc43d3269, 0x27fc000f, 0x33fc0003, 0x97c00011, 0x043c001f,
	0xdfc30000, 0xd4413249, 0x7c43c001, 0x7c43c001, 0x043c0024, 0x0bfc0021, 0xdfc30000, 0xd441326a,
	0x173c0008, 0x1b300303, 0x7f3f0001, 0x043c0001, 0x7ff3c004, 0xcfc13084, 0x80001842, 0x043c0024,
	0xdfc30000, 0xd4413249, 0x7c43c001, 0x23fc003f, 0xcfc1326d, 0x0bb80026, 0xdf830000, 0xd441326e,
	0x7c438001, 0x7c438001, 0xc4393265, 0x1fb8ffc6, 0xddc30000, 0xcf813265, 0x9a000003, 0xcdc0000c,
	0x80001852, 0xcdc0000d, 0xce000010, 0x8c00142b, 0x90000000, 0x7c41c001, 0x7c420001, 0xcdc13252,
	0xce013253, 0x8c001628, 0x80001878, 0xc49f02e9, 0x99c00018, 0x7c41c001, 0x7c420001, 0xcdc13252,
	0xce013253, 0xc43c000e, 0x2bfc0008, 0xcfc00013, 0x043c3000, 0xcfc13267, 0xc43d3267, 0x97c0ffff,
	0xcdc00026, 0xce000026, 0xd8400027, 0xc41c0012, 0x99c0ffff, 0xc43c000e, 0x2bfc0008, 0xcfc00013,
	0x043c2000, 0xcfc13267, 0x8c001628, 0x80001878, 0xc41f02ed, 0xc42302ee, 0xcdc13252, 0xce013253,
	0x04200001, 0x7e2a0004, 0xce013084, 0x90000000, 0x28340001, 0x313c0bcc, 0x9bc00010, 0x393c051f,
	0x9bc00004, 0x3d3c050e, 0x9bc0000c, 0x97c0000c, 0x393c0560, 0x9bc00004, 0x3d3c054f, 0x9bc00007,
	0x97c00007, 0x393c1538, 0x9bc00005, 0x3d3c1537, 0x9bc00002, 0x97c00002, 0x2b740800, 0x90000000,
	0xc40c000e, 0x28cc0008, 0xccc00013, 0xc43d3265, 0x1bc800ea, 0x7c40c001, 0x18e8007c, 0x7c42c001,
	0x06a8189a, 0x86800000, 0x8000189e, 0x800018c5, 0x800018f2, 0x8000016a, 0x7c414001, 0x18d0007e,
	0x50580020, 0x09200001, 0x7d59401a, 0xd1400072, 0xc8140072, 0x09240002, 0x7c418001, 0x7c41c001,
	0x99000011, 0xc4340004, 0xd8400013, 0xd8400008, 0xc42130b5, 0x1a24002c, 0x9a40fffe, 0x2020002c,
	0xc418000d, 0x1198001c, 0x10cc0004, 0x14cc0004, 0x7cd8c00a, 0xccc130b7, 0xce0130b5, 0xcf400008,
	0x80000168, 0xd1400025, 0x5978073a, 0x2bb80002, 0xcf800024, 0xcd800026, 0xcdc00026, 0xd8400027,
	0x9600e8a8, 0xc4300012, 0x9b00ffff, 0x9640e8a5, 0x800018a9, 0x04140000, 0xc55b0309, 0x3d5c0010,
	0x05540001, 0x2598ffff, 0x09780001, 0x7dad800c, 0x99c0ffd2, 0x9580fff9, 0xc4970258, 0xc4930250,
	0x51540020, 0x7d15001a, 0x04140020, 0x04280000, 0x442c0000, 0x65180001, 0x09540001, 0x55100001,
	0x9580000b, 0x8c001628, 0xc41d3248, 0x04300001, 0x7f2b0014, 0x25dc000f, 0x7df9c00c, 0x95c00004,
	0x7ef2c01a, 0xd8c13260, 0xd901325d, 0x06a80001, 0x9940fff1, 0x04140020, 0x04280000, 0x66d80001,
	0x09540001, 0x56ec0001, 0x95800005, 0x8c001628, 0xc421325d, 0x26240007, 0x9a40fffe, 0x06a80001,
	0x9940fff7, 0x8000189e, 0x04140020, 0x04280000, 0x09540001, 0x8c001628, 0xc41d3254, 0xc023007f,
	0x19e4003e, 0x7de1c009, 0x7dee000c, 0x96400008, 0x96000007, 0xd8c13260, 0xd901325d, 0xc421325d,
	0x261c0007, 0x99c0fffe, 0x8000189e, 0x06a80001, 0x9940fff0, 0x8000189e, 0xc40c000e, 0x28cc0008,
	0xccc00013, 0xc43d3265, 0x1bc800ea, 0x7c40c001, 0x18e00064, 0x06281911, 0x14f4001d, 0x24cc0003,
	0x86800000, 0x80001915, 0x800019af, 0x80001a2b, 0x8000016a, 0xcc48032b, 0xcc480333, 0xcc48033b,
	0xcc480343, 0x98800011, 0xc4213246, 0xc4253245, 0x52200020, 0x7e26401a, 0x46640400, 0xc4313267,
	0x04203000, 0xce013267, 0xc4213267, 0x9a000001, 0x1b3c0057, 0x1b200213, 0x1b300199, 0x7e3e000a,
	0x7e32000a, 0xce000024, 0xc4970258, 0xc4930250, 0x51540020, 0x7d15001a, 0xc4af0280, 0xc4b30278,
	0x52ec0020, 0x7ef2c01a, 0x04180000, 0x04140020, 0x04280000, 0x7f438001, 0x8c001628, 0xc41d3247,
	0x25dc0001, 0x95c00068, 0xc4213254, 0x1a1c003e, 0x95c00065, 0xc01f007f, 0x7e1e0009, 0x97800062,
	0x0bb80001, 0x43bc0008, 0x7fcbc001, 0xc7df032b, 0x7e1fc00c, 0x97c0fffa, 0x043c0101, 0x94c00002,
	0x043c0102, 0xc439325b, 0x1bb0003f, 0x97000049, 0x1bb000e8, 0x33380003, 0x9b800046, 0x33300002,
	0x97000009, 0xc4393260, 0x1bb000e4, 0x33300004, 0x97000040, 0xc431325d, 0x27300010, 0x9b00fffe,
	0x80001994, 0x8c001628, 0xc033ffff, 0x2f3000ff, 0xc439325b, 0x7f3b0009, 0xcf01325b, 0xc439325b,
	0x27b800ff, 0x9b80fffe, 0xd8c00033, 0xc4300009, 0x27300008, 0x9700fffe, 0x19f003e6, 0x27380003,
	0x13b80004, 0x27300003, 0x13300003, 0x7fb38001, 0x19f000e8, 0x7fb38001, 0x13300001, 0x7fb38001,
	0x07b80002, 0xd8400013, 0x19f00064, 0x33300002, 0x97000009, 0x17b00005, 0x07300003, 0xcf012082,
	0xcc01203f, 0xd8400013, 0xcc01203f, 0x0b300003, 0x80001982, 0x17b00005, 0xcf012082, 0xcc01203f,
	0xd8400013, 0xcc01203f, 0x13300005, 0x7fb30002, 0xc4392083, 0x7fb38005, 0x27b80001, 0x9b80ffdf,
	0xd8c00034, 0xcdc00013, 0xc431325d, 0x27300010, 0x9b00fffe, 0xc439325b, 0x27b000ff, 0x9b00ffcb,
	0xcfc1325d, 0x2030007b, 0xcf01325b, 0x80001995, 0xcfc1325d, 0x04300001, 0x7f2b0014, 0x7ef2c01a,
	0x98800009, 0x41bc0007, 0x53fc0002, 0x7e7fc011, 0xd3c00025, 0xd8000026, 0xd8400027, 0xc43c0012,
	0x9bc0ffff, 0x653c0001, 0x7dbd8001, 0x06a80001, 0x09540001, 0x55100001, 0x9940ff8f, 0xc43c000e,
	0x2bfc0008, 0xcfc00013, 0x043c2000, 0xcfc13267, 0xd8080278, 0xd8080280, 0x80000168, 0x7c410001,
	0x04140000, 0xc55b0309, 0x3d5c0010, 0x2598ffff, 0x05540001, 0x7d91800c, 0x95c00003, 0xd4400078,
	0x80000168, 0x9580fff8, 0x09780001, 0xc4970258, 0xc4930250, 0x51540020, 0x7d15001a, 0xc4af0280,
	0xc4b30278, 0x52ec0020, 0x7ef2c01a, 0x04140020, 0x04280000, 0x65180001, 0x09540001, 0x55100001,
	0x9580005d, 0x8c001628, 0xc4253247, 0x26640001, 0x04200101, 0x96400058, 0x7dc24001, 0xc41d3248,
	0x25dc000f, 0x7df9c00c, 0x95c00053, 0x94c00002, 0x04200102, 0x7e41c001, 0xc425325b, 0x1a70003f,
	0x97000049, 0x1a7000e8, 0x33240003, 0x9a400046, 0x33300002, 0x9700000a, 0xc4253260, 0x1a7000e4,
	0x33300004, 0x97000040, 0xc431325d, 0x27300010, 0x9b00fffe, 0x80001a21, 0xcdc00013, 0xc033ffff,
	0x2f3000ff, 0xc425325b, 0x7f270009, 0xcf01325b, 0xc425325b, 0x266400ff, 0x9a40fffe, 0xd8c00033,
	0xc4300009, 0x27300008, 0x9700fffe, 0x19f003e6, 0x27240003, 0x12640004, 0x27300003, 0x13300003,
	0x7e724001, 0x19f000e8, 0x7e724001, 0x13300001, 0x7e724001, 0x06640002, 0xd8400013, 0x19f00064,
	0x33300002, 0x97000009, 0x16700005, 0x07300003, 0xcf012082, 0xcc01203f, 0xd8400013, 0xcc01203f,
	0x0b300003, 0x80001a0f, 0x16700005, 0xcf012082, 0xcc01203f, 0xd8400013, 0xcc01203f, 0x13300005,
	0x7e730002, 0xc4252083, 0x7e724005, 0x26640001, 0x9a40ffdf, 0xd8c00034, 0xcdc00013, 0xc431325d,
	0x27300010, 0x9b00fffe, 0xc425325b, 0x267000ff, 0x9b00ffca, 0xce01325d, 0x2030007b, 0xcf01325b,
	0x80001a22, 0xce01325d, 0x04300001, 0x7f2b0014, 0x7ef2c01a, 0x06a80001, 0x9940ff9f, 0xd4400078,
	0xd8080278, 0xd8080280, 0x80000168, 0x8c001a31, 0xd4400078, 0xd8080278, 0xd8080280, 0x7c408001,
	0x88000000, 0xc4213246, 0xc4253245, 0x52200020, 0x7e26401a, 0x46640400, 0xc4313267, 0x04203000,
	0xce013267, 0xc4213267, 0x9a000001, 0x1b180057, 0x1b200213, 0x1b300199, 0x7e1a000a, 0x7e32000a,
	0xce000024, 0xc4970258, 0xc4930250, 0x51540020, 0x7d15001a, 0xc4af0280, 0xc4b30278, 0x52ec0020,
	0x7ef2c01a, 0x04140020, 0x04280000, 0x65180001, 0x95800060, 0x8c001628, 0xc4193247, 0x25980001,
	0x04200101, 0x94c00005, 0x30f00005, 0x04200005, 0x9b000002, 0x04200102, 0x95800056, 0xc439325b,
	0x1bb0003f, 0x97000049, 0x1bb000e8, 0x33380003, 0x9b800046, 0x33300002, 0x9700000a, 0xc4393260,
	0x1bb000e4, 0x33300004, 0x97000040, 0xc431325d, 0x27300010, 0x9b00fffe, 0x80001aa2, 0xcdc00013,
	0xc033ffff, 0x2f3000ff, 0xc439325b, 0x7f3b0009, 0xcf01325b, 0xc439325b, 0x27b800ff, 0x9b80fffe,
	0xd8c00033, 0xc4300009, 0x27300008, 0x9700fffe, 0x19f003e6, 0x27380003, 0x13b80004, 0x27300003,
	0x13300003, 0x7fb38001, 0x19f000e8, 0x7fb38001, 0x13300001, 0x7fb38001, 0x07b80002, 0xd8400013,
	0x19f00064, 0x33300002, 0x97000009, 0x17b00005, 0x07300003, 0xcf012082, 0xcc01203f, 0xd8400013,
	0xcc01203f, 0x0b300003, 0x80001a90, 0x17b00005, 0xcf012082, 0xcc01203f, 0xd8400013, 0xcc01203f,
	0x13300005, 0x7fb30002, 0xc4392083, 0x7fb38005, 0x27b80001, 0x9b80ffdf, 0xd8c00034, 0xcdc00013,
	0xc431325d, 0x27300010, 0x9b00fffe, 0xc439325b, 0x27b000ff, 0x9b00ffca, 0xce01325d, 0x2030007b,
	0xcf00325b, 0x80001aa3, 0xce01325d, 0x04300001, 0x7f2b0014, 0x7ef2c01a, 0xc49b02e9, 0x99800005,
	0xd2400025, 0x4664001c, 0xd8000026, 0xd8400027, 0x06a80001, 0x09540001, 0x55100001, 0x9940ff9c,
	0xc49b02e9, 0x99800008, 0xc430000e, 0x2b300008, 0xcf000013, 0x04302000, 0xcf013267, 0xc4313267,
	0x97000001, 0x90000000, 0x244c00ff, 0xcc4c0200, 0x7c408001, 0x88000000, 0xc44f0200, 0xc410000b,
	0xc414000c, 0x7d158010, 0x059cc000, 0xd8400013, 0xccdd0000, 0x7c408001, 0x88000000, 0xc40c0037,
	0x94c0ffff, 0xcc000049, 0xc40c003a, 0x94c0ffff, 0x7c40c001, 0x24d00001, 0x9500e69a, 0x18d0003b,
	0x18d40021, 0x99400006, 0xd840004a, 0xc40c003c, 0x94c0ffff, 0x14cc0001, 0x94c00028, 0xd8000033,
	0xc438000b, 0xc43c0009, 0x27fc0001, 0x97c0fffe, 0xd8400013, 0xd841c07f, 0xc43dc07f, 0x1bfc0078,
	0x7ffbc00c, 0x97c0fffd, 0x99000004, 0xc0120840, 0x282c0040, 0x80001ae8, 0xc0121841, 0x282c001a,
	0xcd01c07c, 0xcc01c07d, 0xcc01c08c, 0xcc01c079, 0xcc01c07e, 0x04200004, 0xcec0001b, 0xd8400021,
	0x0a200001, 0x9a00ffff, 0xc425c07f, 0x166c001f, 0x04200004, 0x9ac0fffb, 0xc434000f, 0x9b40ffff,
	0xd801c07f, 0xd8400013, 0xc425c07f, 0xce400078, 0xd8000034, 0x9940e66b, 0xd800004a, 0x7c408001,
	0x88000000, 0xc40c0036, 0x24d00001, 0x9900fffe, 0x18cc0021, 0xccc00047, 0xcc000046, 0xc40c0039,
	0x94c0ffff, 0xc40c003d, 0x98c0ffff, 0x7c40c001, 0x24d003ff, 0x18d47fea, 0x18d87ff4, 0xcd00004c,
	0xcd40004e, 0xcd80004d, 0xd8400013, 0xcd41c405, 0xc02a0001, 0x2aa80001, 0xce800013, 0xcd01c406,
	0xcc01c406, 0xcc01c406, 0xc40c0006, 0x98c0ffff, 0xc414000e, 0x29540008, 0x295c0001, 0xcd400013,
	0xd8c1325e, 0xcdc0001a, 0x11980002, 0x4110000c, 0xc0160800, 0x7d15000a, 0xc0164010, 0xd8400013,
	0xcd41c078, 0xcc01c080, 0xcc01c081, 0xcd81c082, 0xcc01c083, 0xcd01c084, 0xc40c0006, 0x98c0ffff,
	0xd8400048, 0xc40c003b, 0x94c0ffff, 0x80000c16, 0xd8400013, 0xd801c40a, 0xd901c40d, 0xd801c410,
	0xd801c40e, 0xd801c40f, 0xc40c0040, 0x04140001, 0x09540001, 0x9940ffff, 0x04140096, 0xd8400013,
	0xccc1c400, 0xc411c401, 0x9500fffa, 0xc424003e, 0x04d00001, 0x11100002, 0xcd01c40c, 0xc0180034,
	0xcd81c411, 0xd841c414, 0x0a540001, 0xcd41c412, 0x2468000f, 0xc419c416, 0x41980003, 0xc41c003f,
	0x7dda0001, 0x12200002, 0x10cc0002, 0xccc1c40c, 0xd901c411, 0xce41c412, 0xd8800013, 0xce292e40,
	0xcc412e01, 0xcc412e02, 0xcc412e03, 0xcc412e00, 0x80000aa7, 0xc43c0007, 0xdc120000, 0x31144000,
	0x95400005, 0xdc030000, 0xd800002a, 0xcc3c000c, 0x80001b70, 0x33f80003, 0xd4400078, 0x9780e601,
	0x188cfff0, 0x04e40002, 0x80001190, 0x7c408001, 0x88000000, 0xc424005e, 0x96400006, 0x90000000,
	0xc424005e, 0x96400003, 0x7c408001, 0x88000000, 0x80001b74, 0x80000168, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0x92100004, 0x92110501, 0x92120206, 0x92130703, 0x92100400, 0x92110105, 0x92120602, 0x92130307,
	0xbf810000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	},
	.dfy_size = 7440
};

static const PWR_DFY_Section pwr_virus_section4 = {
	.dfy_cntl = 0x80000004,
	.dfy_addr_hi = 0x000000b4,
	.dfy_addr_lo = 0x54106500,
	.dfy_data = {
	0x7e000200, 0x7e020204, 0xc00a0505, 0x00000000, 0xbf8c007f, 0xb8900904, 0xb8911a04, 0xb8920304,
	0xb8930b44, 0x921c0d0c, 0x921c1c13, 0x921d0c12, 0x811c1d1c, 0x811c111c, 0x921cff1c, 0x00000400,
	0x921dff10, 0x00000100, 0x81181d1c, 0x7e040218, 0xe0701000, 0x80050002, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0701000, 0x80050102,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0701000, 0x80050002, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0701000, 0x80050102, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0701000, 0x80050002, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0701000, 0x80050102,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302, 0xe0501000, 0x80050302,
	0xbf810000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	},
	.dfy_size = 240
};

static const PWR_DFY_Section pwr_virus_section5 = {
	.dfy_cntl = 0x80000004,
	.dfy_addr_hi = 0x000000b4,
	.dfy_addr_lo = 0x54106900,
	.dfy_data = {
	0x7e080200, 0x7e100204, 0xbefc00ff, 0x00010000, 0x24200087, 0x262200ff, 0x000001f0, 0x20222282,
	0x28182111, 0xd81a0000, 0x0000040c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000,
	0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000,
	0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000,
	0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000,
	0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000, 0x0000040c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd81a0000,
	0x0000080c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000, 0x1100000c, 0xd86c0000,
	0x1100000c, 0xbf810000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	},
	.dfy_size = 384
};

static const PWR_DFY_Section pwr_virus_section6 = {
	.dfy_cntl = 0x80000004,
	.dfy_addr_hi = 0x000000b4,
	.dfy_addr_lo = 0x54116f00,
	.dfy_data = {
	0xc0310800, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000040, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0xb4540fe8, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000041, 0x0000000c, 0x00000000, 0x07808000, 0xffffffff,
	0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0x55555555, 0x55555555, 0x55555555,
	0x55555555, 0x00000000, 0x00000000, 0x540fee40, 0x000000b4, 0x00000010, 0x00000001, 0x00000004,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x54116f00, 0x000000b4, 0x00000000, 0x00000000, 0x00005301, 0x00000000, 0x00000000, 0x00000000,
	0xb4540fef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x540fee20, 0x000000b4, 0x00000000,
	0x00000000, 0x08000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0xc0310800, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000040, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0xb454105e, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x000000c0, 0x00000010, 0x00000000, 0x07808000, 0xffffffff,
	0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0x55555555, 0x55555555, 0x55555555,
	0x55555555, 0x00000000, 0x00000000, 0x540fee40, 0x000000b4, 0x00000010, 0x00000001, 0x00000004,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x54117300, 0x000000b4, 0x00000000, 0x00000000, 0x00005301, 0x00000000, 0x00000000, 0x00000000,
	0xb4540fef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x540fee20, 0x000000b4, 0x00000000,
	0x00000000, 0x08000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0xc0310800, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000040, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0xb4541065, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000500, 0x0000001c, 0x00000000, 0x07808000, 0xffffffff,
	0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0x55555555, 0x55555555, 0x55555555,
	0x55555555, 0x00000000, 0x00000000, 0x540fee40, 0x000000b4, 0x00000010, 0x00000001, 0x00000004,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x54117700, 0x000000b4, 0x00000000, 0x00000000, 0x00005301, 0x00000000, 0x00000000, 0x00000000,
	0xb4540fef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x540fee20, 0x000000b4, 0x00000000,
	0x00000000, 0x08000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0xc0310800, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000040, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0xb4541069, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000444, 0x0000008a, 0x00000000, 0x07808000, 0xffffffff,
	0xffffffff, 0x00000000, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0xaaaaaaaa, 0x55555555, 0x55555555, 0x55555555,
	0x55555555, 0x00000000, 0x00000000, 0x540fee40, 0x000000b4, 0x00000010, 0x00000001, 0x00000004,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x54117b00, 0x000000b4, 0x00000000, 0x00000000, 0x00005301, 0x00000000, 0x00000000, 0x00000000,
	0xb4540fef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x540fee20, 0x000000b4, 0x00000000,
	0x00000000, 0x08000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	},
	.dfy_size = 1024
};

static const PWR_Command_Table pwr_virus_table_post[] = {
	{ 0x00000000, mmCP_MEC_CNTL                              },
	{ 0x00000000, mmCP_MEC_CNTL                              },
	{ 0x00000004, mmSRBM_GFX_CNTL                            },
	{ 0x54116f00, mmCP_MQD_BASE_ADDR                         },
	{ 0x000000b4, mmCP_MQD_BASE_ADDR_HI                      },
	{ 0xb4540fef, mmCP_HQD_PQ_BASE                           },
	{ 0x00000000, mmCP_HQD_PQ_BASE_HI                        },
	{ 0x540fee20, mmCP_HQD_PQ_WPTR_POLL_ADDR                 },
	{ 0x000000b4, mmCP_HQD_PQ_WPTR_POLL_ADDR_HI              },
	{ 0x00005301, mmCP_HQD_PERSISTENT_STATE                  },
	{ 0x00010000, mmCP_HQD_VMID                              },
	{ 0xc8318509, mmCP_HQD_PQ_CONTROL                        },
	{ 0x00000005, mmSRBM_GFX_CNTL                            },
	{ 0x54117300, mmCP_MQD_BASE_ADDR                         },
	{ 0x000000b4, mmCP_MQD_BASE_ADDR_HI                      },
	{ 0xb4540fef, mmCP_HQD_PQ_BASE                           },
	{ 0x00000000, mmCP_HQD_PQ_BASE_HI                        },
	{ 0x540fee20, mmCP_HQD_PQ_WPTR_POLL_ADDR                 },
	{ 0x000000b4, mmCP_HQD_PQ_WPTR_POLL_ADDR_HI              },
	{ 0x00005301, mmCP_HQD_PERSISTENT_STATE                  },
	{ 0x00010000, mmCP_HQD_VMID                              },
	{ 0xc8318509, mmCP_HQD_PQ_CONTROL                        },
	{ 0x00000006, mmSRBM_GFX_CNTL                            },
	{ 0x54117700, mmCP_MQD_BASE_ADDR                         },
	{ 0x000000b4, mmCP_MQD_BASE_ADDR_HI                      },
	{ 0xb4540fef, mmCP_HQD_PQ_BASE                           },
	{ 0x00000000, mmCP_HQD_PQ_BASE_HI                        },
	{ 0x540fee20, mmCP_HQD_PQ_WPTR_POLL_ADDR                 },
	{ 0x000000b4, mmCP_HQD_PQ_WPTR_POLL_ADDR_HI              },
	{ 0x00005301, mmCP_HQD_PERSISTENT_STATE                  },
	{ 0x00010000, mmCP_HQD_VMID                              },
	{ 0xc8318509, mmCP_HQD_PQ_CONTROL                        },
	{ 0x00000007, mmSRBM_GFX_CNTL                            },
	{ 0x54117b00, mmCP_MQD_BASE_ADDR                         },
	{ 0x000000b4, mmCP_MQD_BASE_ADDR_HI                      },
	{ 0xb4540fef, mmCP_HQD_PQ_BASE                           },
	{ 0x00000000, mmCP_HQD_PQ_BASE_HI                        },
	{ 0x540fee20, mmCP_HQD_PQ_WPTR_POLL_ADDR                 },
	{ 0x000000b4, mmCP_HQD_PQ_WPTR_POLL_ADDR_HI              },
	{ 0x00005301, mmCP_HQD_PERSISTENT_STATE                  },
	{ 0x00010000, mmCP_HQD_VMID                              },
	{ 0xc8318509, mmCP_HQD_PQ_CONTROL                        },
	{ 0x00000004, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000104, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000204, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000304, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000404, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000504, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000604, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000704, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000005, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000105, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000205, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000305, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000405, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000505, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000605, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000705, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000006, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000106, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000206, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000306, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000406, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000506, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000606, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000706, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000007, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000107, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000207, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000307, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000407, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000507, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000607, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000707, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000008, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000108, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000208, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000308, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000408, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000508, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000608, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000708, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000009, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000109, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000209, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000309, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000409, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000509, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000609, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000709, mmSRBM_GFX_CNTL                            },
	{ 0x00000000, mmCP_HQD_ACTIVE                            },
	{ 0x00000000, mmCP_HQD_PQ_RPTR                           },
	{ 0x00000000, mmCP_HQD_PQ_WPTR                           },
	{ 0x00000001, mmCP_HQD_ACTIVE                            },
	{ 0x00000004, mmSRBM_GFX_CNTL                            },
	{ 0x01010101, mmCP_PQ_WPTR_POLL_CNTL1                    },
	{ 0x00000000, mmGRBM_STATUS                              },
	{ 0x00000000, mmGRBM_STATUS                              },
	{ 0x00000000, mmGRBM_STATUS                              },
	{ 0x00000000, 0xFFFFFFFF                                 },
};


#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _HWMGR_H_
#define _HWMGR_H_

#include <linux/seq_file.h>
#include "amd_powerplay.h"
#include "hardwaremanager.h"
#include "hwmgr_ppt.h"
#include "ppatomctrl.h"
#include "power_state.h"
#include "smu_helper.h"

struct pp_hwmgr;
struct phm_fan_speed_info;
struct pp_atomctrl_voltage_table;

#define VOLTAGE_SCALE 4
#define VOLTAGE_VID_OFFSET_SCALE1   625
#define VOLTAGE_VID_OFFSET_SCALE2   100

enum DISPLAY_GAP {
	DISPLAY_GAP_VBLANK_OR_WM = 0,   /* Wait for vblank or MCHG watermark. */
	DISPLAY_GAP_VBLANK       = 1,   /* Wait for vblank. */
	DISPLAY_GAP_WATERMARK    = 2,   /* Wait for MCHG watermark. (Note that HW may deassert WM in VBI depending on DC_STUTTER_CNTL.) */
	DISPLAY_GAP_IGNORE       = 3    /* Do not wait. */
};
typedef enum DISPLAY_GAP DISPLAY_GAP;

enum BACO_STATE {
	BACO_STATE_OUT = 0,
	BACO_STATE_IN,
};

struct vi_dpm_level {
	bool enabled;
	uint32_t value;
	uint32_t param1;
};

struct vi_dpm_table {
	uint32_t count;
	struct vi_dpm_level dpm_level[];
};

#define PCIE_PERF_REQ_REMOVE_REGISTRY   0
#define PCIE_PERF_REQ_FORCE_LOWPOWER    1
#define PCIE_PERF_REQ_GEN1         2
#define PCIE_PERF_REQ_GEN2         3
#define PCIE_PERF_REQ_GEN3         4

enum PHM_BackEnd_Magic {
	PHM_Dummy_Magic       = 0xAA5555AA,
	PHM_RV770_Magic       = 0xDCBAABCD,
	PHM_Kong_Magic        = 0x239478DF,
	PHM_NIslands_Magic    = 0x736C494E,
	PHM_Sumo_Magic        = 0x8339FA11,
	PHM_SIslands_Magic    = 0x369431AC,
	PHM_Trinity_Magic     = 0x96751873,
	PHM_CIslands_Magic    = 0x38AC78B0,
	PHM_Kv_Magic          = 0xDCBBABC0,
	PHM_VIslands_Magic    = 0x20130307,
	PHM_Cz_Magic          = 0x67DCBA25,
	PHM_Rv_Magic          = 0x20161121
};

struct phm_set_power_state_input {
	const struct pp_hw_power_state *pcurrent_state;
	const struct pp_hw_power_state *pnew_state;
};

struct phm_clock_array {
	uint32_t count;
	uint32_t values[];
};

struct phm_clock_voltage_dependency_record {
	uint32_t clk;
	uint32_t v;
};

struct phm_vceclock_voltage_dependency_record {
	uint32_t ecclk;
	uint32_t evclk;
	uint32_t v;
};

struct phm_uvdclock_voltage_dependency_record {
	uint32_t vclk;
	uint32_t dclk;
	uint32_t v;
};

struct phm_samuclock_voltage_dependency_record {
	uint32_t samclk;
	uint32_t v;
};

struct phm_acpclock_voltage_dependency_record {
	uint32_t acpclk;
	uint32_t v;
};

struct phm_clock_voltage_dependency_table {
	uint32_t count;							/* Number of entries. */
	struct phm_clock_voltage_dependency_record entries[];		/* Dynamically allocate count entries. */
};

struct phm_phase_shedding_limits_record {
	uint32_t  Voltage;
	uint32_t    Sclk;
	uint32_t    Mclk;
};

struct phm_uvd_clock_voltage_dependency_record {
	uint32_t vclk;
	uint32_t dclk;
	uint32_t v;
};

struct phm_uvd_clock_voltage_dependency_table {
	uint8_t count;
	struct phm_uvd_clock_voltage_dependency_record entries[];
};

struct phm_acp_clock_voltage_dependency_record {
	uint32_t acpclk;
	uint32_t v;
};

struct phm_acp_clock_voltage_dependency_table {
	uint32_t count;
	struct phm_acp_clock_voltage_dependency_record entries[];
};

struct phm_vce_clock_voltage_dependency_record {
	uint32_t ecclk;
	uint32_t evclk;
	uint32_t v;
};

struct phm_phase_shedding_limits_table {
	uint32_t                           count;
	struct phm_phase_shedding_limits_record  entries[];
};

struct phm_vceclock_voltage_dependency_table {
	uint8_t count;                                    /* Number of entries. */
	struct phm_vceclock_voltage_dependency_record entries[1]; /* Dynamically allocate count entries. */
};

struct phm_uvdclock_voltage_dependency_table {
	uint8_t count;                                    /* Number of entries. */
	struct phm_uvdclock_voltage_dependency_record entries[1]; /* Dynamically allocate count entries. */
};

struct phm_samuclock_voltage_dependency_table {
	uint8_t count;                                    /* Number of entries. */
	struct phm_samuclock_voltage_dependency_record entries[1]; /* Dynamically allocate count entries. */
};

struct phm_acpclock_voltage_dependency_table {
	uint32_t count;                                    /* Number of entries. */
	struct phm_acpclock_voltage_dependency_record entries[1]; /* Dynamically allocate count entries. */
};

struct phm_vce_clock_voltage_dependency_table {
	uint8_t count;
	struct phm_vce_clock_voltage_dependency_record entries[];
};


enum SMU_ASIC_RESET_MODE
{
    SMU_ASIC_RESET_MODE_0,
    SMU_ASIC_RESET_MODE_1,
    SMU_ASIC_RESET_MODE_2,
};

struct pp_smumgr_func {
	char *name;
	int (*smu_init)(struct pp_hwmgr  *hwmgr);
	int (*smu_fini)(struct pp_hwmgr  *hwmgr);
	int (*start_smu)(struct pp_hwmgr  *hwmgr);
	int (*check_fw_load_finish)(struct pp_hwmgr  *hwmgr,
				    uint32_t firmware);
	int (*request_smu_load_fw)(struct pp_hwmgr  *hwmgr);
	int (*request_smu_load_specific_fw)(struct pp_hwmgr  *hwmgr,
					    uint32_t firmware);
	uint32_t (*get_argument)(struct pp_hwmgr  *hwmgr);
	int (*send_msg_to_smc)(struct pp_hwmgr  *hwmgr, uint16_t msg);
	int (*send_msg_to_smc_with_parameter)(struct pp_hwmgr  *hwmgr,
					  uint16_t msg, uint32_t parameter);
	int (*download_pptable_settings)(struct pp_hwmgr  *hwmgr,
					 void **table);
	int (*upload_pptable_settings)(struct pp_hwmgr  *hwmgr);
	int (*update_smc_table)(struct pp_hwmgr *hwmgr, uint32_t type);
	int (*process_firmware_header)(struct pp_hwmgr *hwmgr);
	int (*update_sclk_threshold)(struct pp_hwmgr *hwmgr);
	int (*thermal_setup_fan_table)(struct pp_hwmgr *hwmgr);
	int (*thermal_avfs_enable)(struct pp_hwmgr *hwmgr);
	int (*init_smc_table)(struct pp_hwmgr *hwmgr);
	int (*populate_all_graphic_levels)(struct pp_hwmgr *hwmgr);
	int (*populate_all_memory_levels)(struct pp_hwmgr *hwmgr);
	int (*initialize_mc_reg_table)(struct pp_hwmgr *hwmgr);
	uint32_t (*get_offsetof)(uint32_t type, uint32_t member);
	uint32_t (*get_mac_definition)(uint32_t value);
	bool (*is_dpm_running)(struct pp_hwmgr *hwmgr);
	bool (*is_hw_avfs_present)(struct pp_hwmgr  *hwmgr);
	int (*update_dpm_settings)(struct pp_hwmgr *hwmgr, void *profile_setting);
	int (*smc_table_manager)(struct pp_hwmgr *hwmgr, uint8_t *table, uint16_t table_id, bool rw); /*rw: true for read, false for write */
	int (*stop_smc)(struct pp_hwmgr *hwmgr);
};

struct pp_hwmgr_func {
	int (*backend_init)(struct pp_hwmgr *hw_mgr);
	int (*backend_fini)(struct pp_hwmgr *hw_mgr);
	int (*asic_setup)(struct pp_hwmgr *hw_mgr);
	int (*get_power_state_size)(struct pp_hwmgr *hw_mgr);

	int (*apply_state_adjust_rules)(struct pp_hwmgr *hwmgr,
				struct pp_power_state  *prequest_ps,
			const struct pp_power_state *pcurrent_ps);

	int (*apply_clocks_adjust_rules)(struct pp_hwmgr *hwmgr);

	int (*force_dpm_level)(struct pp_hwmgr *hw_mgr,
					enum amd_dpm_forced_level level);

	int (*dynamic_state_management_enable)(
						struct pp_hwmgr *hw_mgr);
	int (*dynamic_state_management_disable)(
						struct pp_hwmgr *hw_mgr);

	int (*patch_boot_state)(struct pp_hwmgr *hwmgr,
				     struct pp_hw_power_state *hw_ps);

	int (*get_pp_table_entry)(struct pp_hwmgr *hwmgr,
			    unsigned long, struct pp_power_state *);
	int (*get_num_of_pp_table_entries)(struct pp_hwmgr *hwmgr);
	int (*powerdown_uvd)(struct pp_hwmgr *hwmgr);
	void (*powergate_vce)(struct pp_hwmgr *hwmgr, bool bgate);
	void (*powergate_uvd)(struct pp_hwmgr *hwmgr, bool bgate);
	void (*powergate_acp)(struct pp_hwmgr *hwmgr, bool bgate);
	uint32_t (*get_mclk)(struct pp_hwmgr *hwmgr, bool low);
	uint32_t (*get_sclk)(struct pp_hwmgr *hwmgr, bool low);
	int (*power_state_set)(struct pp_hwmgr *hwmgr,
						const void *state);
	int (*notify_smc_display_config_after_ps_adjustment)(struct pp_hwmgr *hwmgr);
	int (*pre_display_config_changed)(struct pp_hwmgr *hwmgr);
	int (*display_config_changed)(struct pp_hwmgr *hwmgr);
	int (*disable_clock_power_gating)(struct pp_hwmgr *hwmgr);
	int (*update_clock_gatings)(struct pp_hwmgr *hwmgr,
						const uint32_t *msg_id);
	int (*set_max_fan_rpm_output)(struct pp_hwmgr *hwmgr, uint16_t us_max_fan_pwm);
	int (*set_max_fan_pwm_output)(struct pp_hwmgr *hwmgr, uint16_t us_max_fan_pwm);
	int (*stop_thermal_controller)(struct pp_hwmgr *hwmgr);
	int (*get_fan_speed_info)(struct pp_hwmgr *hwmgr, struct phm_fan_speed_info *fan_speed_info);
	void (*set_fan_control_mode)(struct pp_hwmgr *hwmgr, uint32_t mode);
	uint32_t (*get_fan_control_mode)(struct pp_hwmgr *hwmgr);
	int (*set_fan_speed_pwm)(struct pp_hwmgr *hwmgr, uint32_t speed);
	int (*get_fan_speed_pwm)(struct pp_hwmgr *hwmgr, uint32_t *speed);
	int (*set_fan_speed_rpm)(struct pp_hwmgr *hwmgr, uint32_t speed);
	int (*get_fan_speed_rpm)(struct pp_hwmgr *hwmgr, uint32_t *speed);
	int (*reset_fan_speed_to_default)(struct pp_hwmgr *hwmgr);
	int (*uninitialize_thermal_controller)(struct pp_hwmgr *hwmgr);
	int (*register_irq_handlers)(struct pp_hwmgr *hwmgr);
	bool (*check_smc_update_required_for_display_configuration)(struct pp_hwmgr *hwmgr);
	int (*check_states_equal)(struct pp_hwmgr *hwmgr,
					const struct pp_hw_power_state *pstate1,
					const struct pp_hw_power_state *pstate2,
					bool *equal);
	int (*set_cpu_power_state)(struct pp_hwmgr *hwmgr);
	int (*store_cc6_data)(struct pp_hwmgr *hwmgr, uint32_t separation_time,
				bool cc6_disable, bool pstate_disable,
				bool pstate_switch_disable);
	int (*get_dal_power_level)(struct pp_hwmgr *hwmgr,
			struct amd_pp_simple_clock_info *info);
	int (*get_performance_level)(struct pp_hwmgr *, const struct pp_hw_power_state *,
			PHM_PerformanceLevelDesignation, uint32_t, PHM_PerformanceLevel *);
	int (*get_current_shallow_sleep_clocks)(struct pp_hwmgr *hwmgr,
				const struct pp_hw_power_state *state, struct pp_clock_info *clock_info);
	int (*get_clock_by_type)(struct pp_hwmgr *hwmgr, enum amd_pp_clock_type type, struct amd_pp_clocks *clocks);
	int (*get_clock_by_type_with_latency)(struct pp_hwmgr *hwmgr,
			enum amd_pp_clock_type type,
			struct pp_clock_levels_with_latency *clocks);
	int (*get_clock_by_type_with_voltage)(struct pp_hwmgr *hwmgr,
			enum amd_pp_clock_type type,
			struct pp_clock_levels_with_voltage *clocks);
	int (*set_watermarks_for_clocks_ranges)(struct pp_hwmgr *hwmgr, void *clock_ranges);
	int (*display_clock_voltage_request)(struct pp_hwmgr *hwmgr,
			struct pp_display_clock_request *clock);
	int (*get_max_high_clocks)(struct pp_hwmgr *hwmgr, struct amd_pp_simple_clock_info *clocks);
	int (*power_off_asic)(struct pp_hwmgr *hwmgr);
	int (*force_clock_level)(struct pp_hwmgr *hwmgr, enum pp_clock_type type, uint32_t mask);
	int (*emit_clock_levels)(struct pp_hwmgr *hwmgr,
				 enum pp_clock_type type, char *buf, int *offset);
	int (*print_clock_levels)(struct pp_hwmgr *hwmgr, enum pp_clock_type type, char *buf);
	int (*powergate_gfx)(struct pp_hwmgr *hwmgr, bool enable);
	int (*get_sclk_od)(struct pp_hwmgr *hwmgr);
	int (*set_sclk_od)(struct pp_hwmgr *hwmgr, uint32_t value);
	int (*get_mclk_od)(struct pp_hwmgr *hwmgr);
	int (*set_mclk_od)(struct pp_hwmgr *hwmgr, uint32_t value);
	int (*read_sensor)(struct pp_hwmgr *hwmgr, int idx, void *value, int *size);
	int (*avfs_control)(struct pp_hwmgr *hwmgr, bool enable);
	int (*disable_smc_firmware_ctf)(struct pp_hwmgr *hwmgr);
	int (*set_active_display_count)(struct pp_hwmgr *hwmgr, uint32_t count);
	int (*set_min_deep_sleep_dcefclk)(struct pp_hwmgr *hwmgr, uint32_t clock);
	int (*start_thermal_controller)(struct pp_hwmgr *hwmgr, struct PP_TemperatureRange *range);
	int (*notify_cac_buffer_info)(struct pp_hwmgr *hwmgr,
					uint32_t virtual_addr_low,
					uint32_t virtual_addr_hi,
					uint32_t mc_addr_low,
					uint32_t mc_addr_hi,
					uint32_t size);
	int (*get_thermal_temperature_range)(struct pp_hwmgr *hwmgr,
					struct PP_TemperatureRange *range);
	int (*get_power_profile_mode)(struct pp_hwmgr *hwmgr, char *buf);
	int (*set_power_profile_mode)(struct pp_hwmgr *hwmgr, long *input, uint32_t size);
	int (*odn_edit_dpm_table)(struct pp_hwmgr *hwmgr,
					enum PP_OD_DPM_TABLE_COMMAND type,
					long *input, uint32_t size);
	int (*set_fine_grain_clk_vol)(struct pp_hwmgr *hwmgr,
				      enum PP_OD_DPM_TABLE_COMMAND type,
				      long *input, uint32_t size);
	int (*set_power_limit)(struct pp_hwmgr *hwmgr, uint32_t n);
	int (*powergate_mmhub)(struct pp_hwmgr *hwmgr);
	int (*smus_notify_pwe)(struct pp_hwmgr *hwmgr);
	int (*powergate_sdma)(struct pp_hwmgr *hwmgr, bool bgate);
	int (*enable_mgpu_fan_boost)(struct pp_hwmgr *hwmgr);
	int (*set_hard_min_dcefclk_by_freq)(struct pp_hwmgr *hwmgr, uint32_t clock);
	int (*set_hard_min_fclk_by_freq)(struct pp_hwmgr *hwmgr, uint32_t clock);
	int (*set_hard_min_gfxclk_by_freq)(struct pp_hwmgr *hwmgr, uint32_t clock);
	int (*set_soft_max_gfxclk_by_freq)(struct pp_hwmgr *hwmgr, uint32_t clock);
	int (*get_asic_baco_capability)(struct pp_hwmgr *hwmgr, bool *cap);
	int (*get_asic_baco_state)(struct pp_hwmgr *hwmgr, enum BACO_STATE *state);
	int (*set_asic_baco_state)(struct pp_hwmgr *hwmgr, enum BACO_STATE state);
	int (*get_ppfeature_status)(struct pp_hwmgr *hwmgr, char *buf);
	int (*set_ppfeature_status)(struct pp_hwmgr *hwmgr, uint64_t ppfeature_masks);
	int (*set_mp1_state)(struct pp_hwmgr *hwmgr, enum pp_mp1_state mp1_state);
	int (*asic_reset)(struct pp_hwmgr *hwmgr, enum SMU_ASIC_RESET_MODE mode);
	int (*smu_i2c_bus_access)(struct pp_hwmgr *hwmgr, bool aquire);
	int (*set_df_cstate)(struct pp_hwmgr *hwmgr, enum pp_df_cstate state);
	int (*set_xgmi_pstate)(struct pp_hwmgr *hwmgr, uint32_t pstate);
	int (*disable_power_features_for_compute_performance)(struct pp_hwmgr *hwmgr,
					bool disable);
	ssize_t (*get_gpu_metrics)(struct pp_hwmgr *hwmgr, void **table);
	int (*gfx_state_change)(struct pp_hwmgr *hwmgr, uint32_t state);
};

struct pp_table_func {
	int (*pptable_init)(struct pp_hwmgr *hw_mgr);
	int (*pptable_fini)(struct pp_hwmgr *hw_mgr);
	int (*pptable_get_number_of_vce_state_table_entries)(struct pp_hwmgr *hw_mgr);
	int (*pptable_get_vce_state_table_entry)(
						struct pp_hwmgr *hwmgr,
						unsigned long i,
						struct amd_vce_state *vce_state,
						void **clock_info,
						unsigned long *flag);
};

union phm_cac_leakage_record {
	struct {
		uint16_t Vddc;          /* in CI, we use it for StdVoltageHiSidd */
		uint32_t Leakage;       /* in CI, we use it for StdVoltageLoSidd */
	};
	struct {
		uint16_t Vddc1;
		uint16_t Vddc2;
		uint16_t Vddc3;
	};
};

struct phm_cac_leakage_table {
	uint32_t count;
	union phm_cac_leakage_record entries[];
};

struct phm_samu_clock_voltage_dependency_record {
	uint32_t samclk;
	uint32_t v;
};


struct phm_samu_clock_voltage_dependency_table {
	uint8_t count;
	struct phm_samu_clock_voltage_dependency_record entries[];
};

struct phm_cac_tdp_table {
	uint16_t usTDP;
	uint16_t usConfigurableTDP;
	uint16_t usTDC;
	uint16_t usBatteryPowerLimit;
	uint16_t usSmallPowerLimit;
	uint16_t usLowCACLeakage;
	uint16_t usHighCACLeakage;
	uint16_t usMaximumPowerDeliveryLimit;
	uint16_t usEDCLimit;
	uint16_t usOperatingTempMinLimit;
	uint16_t usOperatingTempMaxLimit;
	uint16_t usOperatingTempStep;
	uint16_t usOperatingTempHyst;
	uint16_t usDefaultTargetOperatingTemp;
	uint16_t usTargetOperatingTemp;
	uint16_t usPowerTuneDataSetID;
	uint16_t usSoftwareShutdownTemp;
	uint16_t usClockStretchAmount;
	uint16_t usTemperatureLimitHotspot;
	uint16_t usTemperatureLimitLiquid1;
	uint16_t usTemperatureLimitLiquid2;
	uint16_t usTemperatureLimitVrVddc;
	uint16_t usTemperatureLimitVrMvdd;
	uint16_t usTemperatureLimitPlx;
	uint8_t  ucLiquid1_I2C_address;
	uint8_t  ucLiquid2_I2C_address;
	uint8_t  ucLiquid_I2C_Line;
	uint8_t  ucVr_I2C_address;
	uint8_t  ucVr_I2C_Line;
	uint8_t  ucPlx_I2C_address;
	uint8_t  ucPlx_I2C_Line;
	uint32_t usBoostPowerLimit;
	uint8_t  ucCKS_LDO_REFSEL;
	uint8_t  ucHotSpotOnly;
};

struct phm_tdp_table {
	uint16_t usTDP;
	uint16_t usConfigurableTDP;
	uint16_t usTDC;
	uint16_t usBatteryPowerLimit;
	uint16_t usSmallPowerLimit;
	uint16_t usLowCACLeakage;
	uint16_t usHighCACLeakage;
	uint16_t usMaximumPowerDeliveryLimit;
	uint16_t usEDCLimit;
	uint16_t usOperatingTempMinLimit;
	uint16_t usOperatingTempMaxLimit;
	uint16_t usOperatingTempStep;
	uint16_t usOperatingTempHyst;
	uint16_t usDefaultTargetOperatingTemp;
	uint16_t usTargetOperatingTemp;
	uint16_t usPowerTuneDataSetID;
	uint16_t usSoftwareShutdownTemp;
	uint16_t usClockStretchAmount;
	uint16_t usTemperatureLimitTedge;
	uint16_t usTemperatureLimitHotspot;
	uint16_t usTemperatureLimitLiquid1;
	uint16_t usTemperatureLimitLiquid2;
	uint16_t usTemperatureLimitHBM;
	uint16_t usTemperatureLimitVrVddc;
	uint16_t usTemperatureLimitVrMvdd;
	uint16_t usTemperatureLimitPlx;
	uint8_t  ucLiquid1_I2C_address;
	uint8_t  ucLiquid2_I2C_address;
	uint8_t  ucLiquid_I2C_Line;
	uint8_t  ucVr_I2C_address;
	uint8_t  ucVr_I2C_Line;
	uint8_t  ucPlx_I2C_address;
	uint8_t  ucPlx_I2C_Line;
	uint8_t  ucLiquid_I2C_LineSDA;
	uint8_t  ucVr_I2C_LineSDA;
	uint8_t  ucPlx_I2C_LineSDA;
	uint32_t usBoostPowerLimit;
	uint16_t usBoostStartTemperature;
	uint16_t usBoostStopTemperature;
	uint32_t  ulBoostClock;
};

struct phm_ppm_table {
	uint8_t   ppm_design;
	uint16_t  cpu_core_number;
	uint32_t  platform_tdp;
	uint32_t  small_ac_platform_tdp;
	uint32_t  platform_tdc;
	uint32_t  small_ac_platform_tdc;
	uint32_t  apu_tdp;
	uint32_t  dgpu_tdp;
	uint32_t  dgpu_ulv_power;
	uint32_t  tj_max;
};

struct phm_vq_budgeting_record {
	uint32_t ulCUs;
	uint32_t ulSustainableSOCPowerLimitLow;
	uint32_t ulSustainableSOCPowerLimitHigh;
	uint32_t ulMinSclkLow;
	uint32_t ulMinSclkHigh;
	uint8_t  ucDispConfig;
	uint32_t ulDClk;
	uint32_t ulEClk;
	uint32_t ulSustainableSclk;
	uint32_t ulSustainableCUs;
};

struct phm_vq_budgeting_table {
	uint8_t numEntries;
	struct phm_vq_budgeting_record entries[1];
};

struct phm_clock_and_voltage_limits {
	uint32_t sclk;
	uint32_t mclk;
	uint32_t gfxclk;
	uint16_t vddc;
	uint16_t vddci;
	uint16_t vddgfx;
	uint16_t vddmem;
};

/* Structure to hold PPTable information */

struct phm_ppt_v1_information {
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_sclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_mclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_socclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_dcefclk;
	struct phm_clock_array *valid_sclk_values;
	struct phm_clock_array *valid_mclk_values;
	struct phm_clock_array *valid_socclk_values;
	struct phm_clock_array *valid_dcefclk_values;
	struct phm_clock_and_voltage_limits max_clock_voltage_on_dc;
	struct phm_clock_and_voltage_limits max_clock_voltage_on_ac;
	struct phm_clock_voltage_dependency_table *vddc_dep_on_dal_pwrl;
	struct phm_ppm_table *ppm_parameter_table;
	struct phm_cac_tdp_table *cac_dtp_table;
	struct phm_tdp_table *tdp_table;
	struct phm_ppt_v1_mm_clock_voltage_dependency_table *mm_dep_table;
	struct phm_ppt_v1_voltage_lookup_table *vddc_lookup_table;
	struct phm_ppt_v1_voltage_lookup_table *vddgfx_lookup_table;
	struct phm_ppt_v1_voltage_lookup_table *vddmem_lookup_table;
	struct phm_ppt_v1_pcie_table *pcie_table;
	struct phm_ppt_v1_gpio_table *gpio_table;
	uint16_t us_ulv_voltage_offset;
	uint16_t us_ulv_smnclk_did;
	uint16_t us_ulv_mp1clk_did;
	uint16_t us_ulv_gfxclk_bypass;
	uint16_t us_gfxclk_slew_rate;
	uint16_t us_min_gfxclk_freq_limit;
};

struct phm_ppt_v2_information {
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_sclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_mclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_socclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_dcefclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_pixclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_dispclk;
	struct phm_ppt_v1_clock_voltage_dependency_table *vdd_dep_on_phyclk;
	struct phm_ppt_v1_mm_clock_voltage_dependency_table *mm_dep_table;

	struct phm_clock_voltage_dependency_table *vddc_dep_on_dalpwrl;

	struct phm_clock_array *valid_sclk_values;
	struct phm_clock_array *valid_mclk_values;
	struct phm_clock_array *valid_socclk_values;
	struct phm_clock_array *valid_dcefclk_values;

	struct phm_clock_and_voltage_limits max_clock_voltage_on_dc;
	struct phm_clock_and_voltage_limits max_clock_voltage_on_ac;

	struct phm_ppm_table *ppm_parameter_table;
	struct phm_cac_tdp_table *cac_dtp_table;
	struct phm_tdp_table *tdp_table;

	struct phm_ppt_v1_voltage_lookup_table *vddc_lookup_table;
	struct phm_ppt_v1_voltage_lookup_table *vddgfx_lookup_table;
	struct phm_ppt_v1_voltage_lookup_table *vddmem_lookup_table;
	struct phm_ppt_v1_voltage_lookup_table *vddci_lookup_table;

	struct phm_ppt_v1_pcie_table *pcie_table;

	uint16_t us_ulv_voltage_offset;
	uint16_t us_ulv_smnclk_did;
	uint16_t us_ulv_mp1clk_did;
	uint16_t us_ulv_gfxclk_bypass;
	uint16_t us_gfxclk_slew_rate;
	uint16_t us_min_gfxclk_freq_limit;

	uint8_t  uc_gfx_dpm_voltage_mode;
	uint8_t  uc_soc_dpm_voltage_mode;
	uint8_t  uc_uclk_dpm_voltage_mode;
	uint8_t  uc_uvd_dpm_voltage_mode;
	uint8_t  uc_vce_dpm_voltage_mode;
	uint8_t  uc_mp0_dpm_voltage_mode;
	uint8_t  uc_dcef_dpm_voltage_mode;
};

struct phm_ppt_v3_information
{
	uint8_t uc_thermal_controller_type;

	uint16_t us_small_power_limit1;
	uint16_t us_small_power_limit2;
	uint16_t us_boost_power_limit;

	uint16_t us_od_turbo_power_limit;
	uint16_t us_od_powersave_power_limit;
	uint16_t us_software_shutdown_temp;

	uint32_t *power_saving_clock_max;
	uint32_t *power_saving_clock_min;

	uint8_t *od_feature_capabilities;
	uint32_t *od_settings_max;
	uint32_t *od_settings_min;

	void *smc_pptable;
};

struct phm_dynamic_state_info {
	struct phm_clock_voltage_dependency_table *vddc_dependency_on_sclk;
	struct phm_clock_voltage_dependency_table *vddci_dependency_on_mclk;
	struct phm_clock_voltage_dependency_table *vddc_dependency_on_mclk;
	struct phm_clock_voltage_dependency_table *mvdd_dependency_on_mclk;
	struct phm_clock_voltage_dependency_table *vddc_dep_on_dal_pwrl;
	struct phm_clock_array                    *valid_sclk_values;
	struct phm_clock_array                    *valid_mclk_values;
	struct phm_clock_and_voltage_limits       max_clock_voltage_on_dc;
	struct phm_clock_and_voltage_limits       max_clock_voltage_on_ac;
	uint32_t                                  mclk_sclk_ratio;
	uint32_t                                  sclk_mclk_delta;
	uint32_t                                  vddc_vddci_delta;
	uint32_t                                  min_vddc_for_pcie_gen2;
	struct phm_cac_leakage_table              *cac_leakage_table;
	struct phm_phase_shedding_limits_table  *vddc_phase_shed_limits_table;

	struct phm_vce_clock_voltage_dependency_table
					    *vce_clock_voltage_dependency_table;
	struct phm_uvd_clock_voltage_dependency_table
					    *uvd_clock_voltage_dependency_table;
	struct phm_acp_clock_voltage_dependency_table
					    *acp_clock_voltage_dependency_table;
	struct phm_samu_clock_voltage_dependency_table
					   *samu_clock_voltage_dependency_table;

	struct phm_ppm_table                          *ppm_parameter_table;
	struct phm_cac_tdp_table                      *cac_dtp_table;
	struct phm_clock_voltage_dependency_table	*vdd_gfx_dependency_on_sclk;
};

struct pp_fan_info {
	bool bNoFan;
	uint8_t   ucTachometerPulsesPerRevolution;
	uint32_t   ulMinRPM;
	uint32_t   ulMaxRPM;
};

struct pp_advance_fan_control_parameters {
	uint16_t  usTMin;                          /* The temperature, in 0.01 centigrades, below which we just run at a minimal PWM. */
	uint16_t  usTMed;                          /* The middle temperature where we change slopes. */
	uint16_t  usTHigh;                         /* The high temperature for setting the second slope. */
	uint16_t  usPWMMin;                        /* The minimum PWM value in percent (0.01% increments). */
	uint16_t  usPWMMed;                        /* The PWM value (in percent) at TMed. */
	uint16_t  usPWMHigh;                       /* The PWM value at THigh. */
	uint8_t   ucTHyst;                         /* Temperature hysteresis. Integer. */
	uint32_t   ulCycleDelay;                   /* The time between two invocations of the fan control routine in microseconds. */
	uint16_t  usTMax;                          /* The max temperature */
	uint8_t   ucFanControlMode;
	uint16_t  usFanPWMMinLimit;
	uint16_t  usFanPWMMaxLimit;
	uint16_t  usFanPWMStep;
	uint16_t  usDefaultMaxFanPWM;
	uint16_t  usFanOutputSensitivity;
	uint16_t  usDefaultFanOutputSensitivity;
	uint16_t  usMaxFanPWM;                     /* The max Fan PWM value for Fuzzy Fan Control feature */
	uint16_t  usFanRPMMinLimit;                /* Minimum limit range in percentage, need to calculate based on minRPM/MaxRpm */
	uint16_t  usFanRPMMaxLimit;                /* Maximum limit range in percentage, usually set to 100% by default */
	uint16_t  usFanRPMStep;                    /* Step increments/decerements, in percent */
	uint16_t  usDefaultMaxFanRPM;              /* The max Fan RPM value for Fuzzy Fan Control feature, default from PPTable */
	uint16_t  usMaxFanRPM;                     /* The max Fan RPM value for Fuzzy Fan Control feature, user defined */
	uint16_t  usFanCurrentLow;                 /* Low current */
	uint16_t  usFanCurrentHigh;                /* High current */
	uint16_t  usFanRPMLow;                     /* Low RPM */
	uint16_t  usFanRPMHigh;                    /* High RPM */
	uint32_t   ulMinFanSCLKAcousticLimit;      /* Minimum Fan Controller SCLK Frequency Acoustic Limit. */
	uint8_t   ucTargetTemperature;             /* Advanced fan controller target temperature. */
	uint8_t   ucMinimumPWMLimit;               /* The minimum PWM that the advanced fan controller can set.  This should be set to the highest PWM that will run the fan at its lowest RPM. */
	uint16_t  usFanGainEdge;                   /* The following is added for Fiji */
	uint16_t  usFanGainHotspot;
	uint16_t  usFanGainLiquid;
	uint16_t  usFanGainVrVddc;
	uint16_t  usFanGainVrMvdd;
	uint16_t  usFanGainPlx;
	uint16_t  usFanGainHbm;
	uint8_t   ucEnableZeroRPM;
	uint8_t   ucFanStopTemperature;
	uint8_t   ucFanStartTemperature;
	uint32_t  ulMaxFanSCLKAcousticLimit;       /* Maximum Fan Controller SCLK Frequency Acoustic Limit. */
	uint32_t  ulTargetGfxClk;
	uint16_t  usZeroRPMStartTemperature;
	uint16_t  usZeroRPMStopTemperature;
	uint16_t  usMGpuThrottlingRPMLimit;
};

struct pp_thermal_controller_info {
	uint8_t ucType;
	uint8_t ucI2cLine;
	uint8_t ucI2cAddress;
	uint8_t use_hw_fan_control;
	struct pp_fan_info fanInfo;
	struct pp_advance_fan_control_parameters advanceFanControlParameters;
};

struct phm_microcode_version_info {
	uint32_t SMC;
	uint32_t DMCU;
	uint32_t MC;
	uint32_t NB;
};

enum PP_TABLE_VERSION {
	PP_TABLE_V0 = 0,
	PP_TABLE_V1,
	PP_TABLE_V2,
	PP_TABLE_MAX
};

/**
 * The main hardware manager structure.
 */
#define Workload_Policy_Max 6

struct pp_hwmgr {
	void *adev;
	uint32_t chip_family;
	uint32_t chip_id;
	uint32_t smu_version;
	bool not_vf;
	bool pm_en;
	bool pp_one_vf;
	struct mutex msg_lock;

	uint32_t pp_table_version;
	void *device;
	struct pp_smumgr *smumgr;
	const void *soft_pp_table;
	uint32_t soft_pp_table_size;
	void *hardcode_pp_table;
	bool need_pp_table_upload;

	struct amd_vce_state vce_states[AMD_MAX_VCE_LEVELS];
	uint32_t num_vce_state_tables;

	enum amd_dpm_forced_level dpm_level;
	enum amd_dpm_forced_level saved_dpm_level;
	enum amd_dpm_forced_level request_dpm_level;
	uint32_t usec_timeout;
	void *pptable;
	struct phm_platform_descriptor platform_descriptor;
	void *backend;

	void *smu_backend;
	const struct pp_smumgr_func *smumgr_funcs;
	bool is_kicker;

	enum PP_DAL_POWERLEVEL dal_power_level;
	struct phm_dynamic_state_info dyn_state;
	const struct pp_hwmgr_func *hwmgr_func;
	const struct pp_table_func *pptable_func;

	struct pp_power_state    *ps;
	uint32_t num_ps;
	struct pp_thermal_controller_info thermal_controller;
	bool fan_ctrl_is_in_default_mode;
	uint32_t fan_ctrl_default_mode;
	bool fan_ctrl_enabled;
	uint32_t tmin;
	struct phm_microcode_version_info microcode_version_info;
	uint32_t ps_size;
	struct pp_power_state    *current_ps;
	struct pp_power_state    *request_ps;
	struct pp_power_state    *boot_ps;
	struct pp_power_state    *uvd_ps;
	const struct amd_pp_display_configuration *display_config;
	uint32_t feature_mask;
	bool avfs_supported;
	/* UMD Pstate */
	bool en_umd_pstate;
	uint32_t power_profile_mode;
	uint32_t default_power_profile_mode;
	uint32_t pstate_sclk;
	uint32_t pstate_mclk;
	bool od_enabled;
	uint32_t power_limit;
	uint32_t default_power_limit;
	uint32_t workload_mask;
	uint32_t workload_prority[Workload_Policy_Max];
	uint32_t workload_setting[Workload_Policy_Max];
	bool gfxoff_state_changed_by_workload;
};

int hwmgr_early_init(struct pp_hwmgr *hwmgr);
int hwmgr_sw_init(struct pp_hwmgr *hwmgr);
int hwmgr_sw_fini(struct pp_hwmgr *hwmgr);
int hwmgr_hw_init(struct pp_hwmgr *hwmgr);
int hwmgr_hw_fini(struct pp_hwmgr *hwmgr);
int hwmgr_suspend(struct pp_hwmgr *hwmgr);
int hwmgr_resume(struct pp_hwmgr *hwmgr);

int hwmgr_handle_task(struct pp_hwmgr *hwmgr,
				enum amd_pp_task task_id,
				enum amd_pm_state_type *user_state);


#define PHM_ENTIRE_REGISTER_MASK 0xFFFFFFFFU

int smu7_init_function_pointers(struct pp_hwmgr *hwmgr);
int smu8_init_function_pointers(struct pp_hwmgr *hwmgr);
int vega12_hwmgr_init(struct pp_hwmgr *hwmgr);
int vega20_hwmgr_init(struct pp_hwmgr *hwmgr);

#endif /* _HWMGR_H_ */
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _HARDWARE_MANAGER_H_
#define _HARDWARE_MANAGER_H_



struct pp_hwmgr;
struct pp_hw_power_state;
struct pp_power_state;
enum amd_dpm_forced_level;
struct PP_TemperatureRange;


struct phm_fan_speed_info {
	uint32_t min_percent;
	uint32_t max_percent;
	uint32_t min_rpm;
	uint32_t max_rpm;
	bool supports_percent_read;
	bool supports_percent_write;
	bool supports_rpm_read;
	bool supports_rpm_write;
};

/* Automatic Power State Throttling */
enum PHM_AutoThrottleSource
{
    PHM_AutoThrottleSource_Thermal,
    PHM_AutoThrottleSource_External
};

typedef enum PHM_AutoThrottleSource PHM_AutoThrottleSource;

enum phm_platform_caps {
	PHM_PlatformCaps_AtomBiosPpV1 = 0,
	PHM_PlatformCaps_PowerPlaySupport,
	PHM_PlatformCaps_ACOverdriveSupport,
	PHM_PlatformCaps_BacklightSupport,
	PHM_PlatformCaps_ThermalController,
	PHM_PlatformCaps_BiosPowerSourceControl,
	PHM_PlatformCaps_DisableVoltageTransition,
	PHM_PlatformCaps_DisableEngineTransition,
	PHM_PlatformCaps_DisableMemoryTransition,
	PHM_PlatformCaps_DynamicPowerManagement,
	PHM_PlatformCaps_EnableASPML0s,
	PHM_PlatformCaps_EnableASPML1,
	PHM_PlatformCaps_OD5inACSupport,
	PHM_PlatformCaps_OD5inDCSupport,
	PHM_PlatformCaps_SoftStateOD5,
	PHM_PlatformCaps_NoOD5Support,
	PHM_PlatformCaps_ContinuousHardwarePerformanceRange,
	PHM_PlatformCaps_ActivityReporting,
	PHM_PlatformCaps_EnableBackbias,
	PHM_PlatformCaps_OverdriveDisabledByPowerBudget,
	PHM_PlatformCaps_ShowPowerBudgetWarning,
	PHM_PlatformCaps_PowerBudgetWaiverAvailable,
	PHM_PlatformCaps_GFXClockGatingSupport,
	PHM_PlatformCaps_MMClockGatingSupport,
	PHM_PlatformCaps_AutomaticDCTransition,
	PHM_PlatformCaps_GeminiPrimary,
	PHM_PlatformCaps_MemorySpreadSpectrumSupport,
	PHM_PlatformCaps_EngineSpreadSpectrumSupport,
	PHM_PlatformCaps_StepVddc,
	PHM_PlatformCaps_DynamicPCIEGen2Support,
	PHM_PlatformCaps_SMC,
	PHM_PlatformCaps_FaultyInternalThermalReading,          /* Internal thermal controller reports faulty temperature value when DAC2 is active */
	PHM_PlatformCaps_EnableVoltageControl,                  /* indicates voltage can be controlled */
	PHM_PlatformCaps_EnableSideportControl,                 /* indicates Sideport can be controlled */
	PHM_PlatformCaps_VideoPlaybackEEUNotification,          /* indicates EEU notification of video start/stop is required */
	PHM_PlatformCaps_TurnOffPll_ASPML1,                     /* PCIE Turn Off PLL in ASPM L1 */
	PHM_PlatformCaps_EnableHTLinkControl,                   /* indicates HT Link can be controlled by ACPI or CLMC overridden/automated mode. */
	PHM_PlatformCaps_PerformanceStateOnly,                  /* indicates only performance power state to be used on current system. */
	PHM_PlatformCaps_ExclusiveModeAlwaysHigh,               /* In Exclusive (3D) mode always stay in High state. */
	PHM_PlatformCaps_DisableMGClockGating,                  /* to disable Medium Grain Clock Gating or not */
	PHM_PlatformCaps_DisableMGCGTSSM,                       /* TO disable Medium Grain Clock Gating Shader Complex control */
	PHM_PlatformCaps_UVDAlwaysHigh,                         /* In UVD mode always stay in High state */
	PHM_PlatformCaps_DisablePowerGating,                    /* to disable power gating */
	PHM_PlatformCaps_CustomThermalPolicy,                   /* indicates only performance power state to be used on current system. */
	PHM_PlatformCaps_StayInBootState,                       /* Stay in Boot State, do not do clock/voltage or PCIe Lane and Gen switching (RV7xx and up). */
	PHM_PlatformCaps_SMCAllowSeparateSWThermalState,        /* SMC use separate SW thermal state, instead of the default SMC thermal policy. */
	PHM_PlatformCaps_MultiUVDStateSupport,                  /* Powerplay state table supports multi UVD states. */
	PHM_PlatformCaps_EnableSCLKDeepSleepForUVD,             /* With HW ECOs, we don't need to disable SCLK Deep Sleep for UVD state. */
	PHM_PlatformCaps_EnableMCUHTLinkControl,                /* Enable HT link control by MCU */
	PHM_PlatformCaps_ABM,                                   /* ABM support.*/
	PHM_PlatformCaps_KongThermalPolicy,                     /* A thermal policy specific for Kong */
	PHM_PlatformCaps_SwitchVDDNB,                           /* if the users want to switch VDDNB */
	PHM_PlatformCaps_ULPS,                                  /* support ULPS mode either through ACPI state or ULPS state */
	PHM_PlatformCaps_NativeULPS,                            /* hardware capable of ULPS state (other than through the ACPI state) */
	PHM_PlatformCaps_EnableMVDDControl,                     /* indicates that memory voltage can be controlled */
	PHM_PlatformCaps_ControlVDDCI,                          /* Control VDDCI separately from VDDC. */
	PHM_PlatformCaps_DisableDCODT,                          /* indicates if DC ODT apply or not */
	PHM_PlatformCaps_DynamicACTiming,                       /* if the SMC dynamically re-programs MC SEQ register values */
	PHM_PlatformCaps_EnableThermalIntByGPIO,                /* enable throttle control through GPIO */
	PHM_PlatformCaps_BootStateOnAlert,                      /* Go to boot state on alerts, e.g. on an AC->DC transition. */
	PHM_PlatformCaps_DontWaitForVBlankOnAlert,              /* Do NOT wait for VBLANK during an alert (e.g. AC->DC transition). */
	PHM_PlatformCaps_Force3DClockSupport,                   /* indicates if the platform supports force 3D clock. */
	PHM_PlatformCaps_MicrocodeFanControl,                   /* Fan is controlled by the SMC microcode. */
	PHM_PlatformCaps_AdjustUVDPriorityForSP,
	PHM_PlatformCaps_DisableLightSleep,                     /* Light sleep for evergreen family. */
	PHM_PlatformCaps_DisableMCLS,                           /* MC Light sleep */
	PHM_PlatformCaps_RegulatorHot,                          /* Enable throttling on 'regulator hot' events. */
	PHM_PlatformCaps_BACO,                                  /* Support Bus Alive Chip Off mode */
	PHM_PlatformCaps_DisableDPM,                            /* Disable DPM, supported from Llano */
	PHM_PlatformCaps_DynamicM3Arbiter,                      /* support dynamically change m3 arbitor parameters */
	PHM_PlatformCaps_SclkDeepSleep,                         /* support sclk deep sleep */
	PHM_PlatformCaps_DynamicPatchPowerState,                /* this ASIC supports to patch power state dynamically */
	PHM_PlatformCaps_ThermalAutoThrottling,                 /* enabling auto thermal throttling, */
	PHM_PlatformCaps_SumoThermalPolicy,                     /* A thermal policy specific for Sumo */
	PHM_PlatformCaps_PCIEPerformanceRequest,                /* support to change RC voltage */
	PHM_PlatformCaps_BLControlledByGPU,                     /* support varibright */
	PHM_PlatformCaps_PowerContainment,                      /* support DPM2 power containment (AKA TDP clamping) */
	PHM_PlatformCaps_SQRamping,                             /* support DPM2 SQ power throttle */
	PHM_PlatformCaps_CAC,                                   /* support Capacitance * Activity power estimation */
	PHM_PlatformCaps_NIChipsets,                            /* Northern Island and beyond chipsets */
	PHM_PlatformCaps_TrinityChipsets,                       /* Trinity chipset */
	PHM_PlatformCaps_EvergreenChipsets,                     /* Evergreen family chipset */
	PHM_PlatformCaps_PowerControl,                          /* Cayman and beyond chipsets */
	PHM_PlatformCaps_DisableLSClockGating,                  /* to disable Light Sleep control for HDP memories */
	PHM_PlatformCaps_BoostState,                            /* this ASIC supports boost state */
	PHM_PlatformCaps_UserMaxClockForMultiDisplays,          /* indicates if max memory clock is used for all status when multiple displays are connected */
	PHM_PlatformCaps_RegWriteDelay,                         /* indicates if back to back reg write delay is required */
	PHM_PlatformCaps_NonABMSupportInPPLib,                  /* ABM is not supported in PPLIB, (moved from PPLIB to DAL) */
	PHM_PlatformCaps_GFXDynamicMGPowerGating,               /* Enable Dynamic MG PowerGating on Trinity */
	PHM_PlatformCaps_DisableSMUUVDHandshake,                /* Disable SMU UVD Handshake */
	PHM_PlatformCaps_DTE,                                   /* Support Digital Temperature Estimation */
	PHM_PlatformCaps_W5100Specifc_SmuSkipMsgDTE,            /* This is for the feature requested by David B., and Tonny W.*/
	PHM_PlatformCaps_UVDPowerGating,                        /* enable UVD power gating, supported from Llano */
	PHM_PlatformCaps_UVDDynamicPowerGating,                 /* enable UVD Dynamic power gating, supported from UVD5 */
	PHM_PlatformCaps_VCEPowerGating,                        /* Enable VCE power gating, supported for TN and later ASICs */
	PHM_PlatformCaps_SamuPowerGating,                       /* Enable SAMU power gating, supported for KV and later ASICs */
	PHM_PlatformCaps_UVDDPM,                                /* UVD clock DPM */
	PHM_PlatformCaps_VCEDPM,                                /* VCE clock DPM */
	PHM_PlatformCaps_SamuDPM,                               /* SAMU clock DPM */
	PHM_PlatformCaps_AcpDPM,                                /* ACP clock DPM */
	PHM_PlatformCaps_SclkDeepSleepAboveLow,                 /* Enable SCLK Deep Sleep on all DPM states */
	PHM_PlatformCaps_DynamicUVDState,                       /* Dynamic UVD State */
	PHM_PlatformCaps_WantSAMClkWithDummyBackEnd,            /* Set SAM Clk With Dummy Back End */
	PHM_PlatformCaps_WantUVDClkWithDummyBackEnd,            /* Set UVD Clk With Dummy Back End */
	PHM_PlatformCaps_WantVCEClkWithDummyBackEnd,            /* Set VCE Clk With Dummy Back End */
	PHM_PlatformCaps_WantACPClkWithDummyBackEnd,            /* Set SAM Clk With Dummy Back End */
	PHM_PlatformCaps_OD6inACSupport,                        /* indicates that the ASIC/back end supports OD6 */
	PHM_PlatformCaps_OD6inDCSupport,                        /* indicates that the ASIC/back end supports OD6 in DC */
	PHM_PlatformCaps_EnablePlatformPowerManagement,         /* indicates that Platform Power Management feature is supported */
	PHM_PlatformCaps_SurpriseRemoval,                       /* indicates that surprise removal feature is requested */
	PHM_PlatformCaps_NewCACVoltage,                         /* indicates new CAC voltage table support */
	PHM_PlatformCaps_DiDtSupport,                           /* for dI/dT feature */
	PHM_PlatformCaps_DBRamping,                             /* for dI/dT feature */
	PHM_PlatformCaps_TDRamping,                             /* for dI/dT feature */
	PHM_PlatformCaps_TCPRamping,                            /* for dI/dT feature */
	PHM_PlatformCaps_DBRRamping,                            /* for dI/dT feature */
	PHM_PlatformCaps_DiDtEDCEnable,                         /* for dI/dT feature */
	PHM_PlatformCaps_GCEDC,                                 /* for dI/dT feature */
	PHM_PlatformCaps_PSM,                                   /* for dI/dT feature */
	PHM_PlatformCaps_EnableSMU7ThermalManagement,           /* SMC will manage thermal events */
	PHM_PlatformCaps_FPS,                                   /* FPS support */
	PHM_PlatformCaps_ACP,                                   /* ACP support */
	PHM_PlatformCaps_SclkThrottleLowNotification,           /* SCLK Throttle Low Notification */
	PHM_PlatformCaps_XDMAEnabled,                           /* XDMA engine is enabled */
	PHM_PlatformCaps_UseDummyBackEnd,                       /* use dummy back end */
	PHM_PlatformCaps_EnableDFSBypass,                       /* Enable DFS bypass */
	PHM_PlatformCaps_VddNBDirectRequest,
	PHM_PlatformCaps_PauseMMSessions,
	PHM_PlatformCaps_UnTabledHardwareInterface,             /* Tableless/direct call hardware interface for CI and newer ASICs */
	PHM_PlatformCaps_SMU7,                                  /* indicates that vpuRecoveryBegin without SMU shutdown */
	PHM_PlatformCaps_RevertGPIO5Polarity,                   /* indicates revert GPIO5 plarity table support */
	PHM_PlatformCaps_Thermal2GPIO17,                        /* indicates thermal2GPIO17 table support */
	PHM_PlatformCaps_ThermalOutGPIO,                        /* indicates ThermalOutGPIO support, pin number is assigned by VBIOS */
	PHM_PlatformCaps_DisableMclkSwitchingForFrameLock,      /* Disable memory clock switch during Framelock */
	PHM_PlatformCaps_ForceMclkHigh,                         /* Disable memory clock switching by forcing memory clock high */
	PHM_PlatformCaps_VRHotGPIOConfigurable,                 /* indicates VR_HOT GPIO configurable */
	PHM_PlatformCaps_TempInversion,                         /* enable Temp Inversion feature */
	PHM_PlatformCaps_IOIC3,
	PHM_PlatformCaps_ConnectedStandby,
	PHM_PlatformCaps_EVV,
	PHM_PlatformCaps_EnableLongIdleBACOSupport,
	PHM_PlatformCaps_CombinePCCWithThermalSignal,
	PHM_PlatformCaps_DisableUsingActualTemperatureForPowerCalc,
	PHM_PlatformCaps_StablePState,
	PHM_PlatformCaps_OD6PlusinACSupport,
	PHM_PlatformCaps_OD6PlusinDCSupport,
	PHM_PlatformCaps_ODThermalLimitUnlock,
	PHM_PlatformCaps_ReducePowerLimit,
	PHM_PlatformCaps_ODFuzzyFanControlSupport,
	PHM_PlatformCaps_GeminiRegulatorFanControlSupport,
	PHM_PlatformCaps_ControlVDDGFX,
	PHM_PlatformCaps_BBBSupported,
	PHM_PlatformCaps_DisableVoltageIsland,
	PHM_PlatformCaps_FanSpeedInTableIsRPM,
	PHM_PlatformCaps_GFXClockGatingManagedInCAIL,
	PHM_PlatformCaps_IcelandULPSSWWorkAround,
	PHM_PlatformCaps_FPSEnhancement,
	PHM_PlatformCaps_LoadPostProductionFirmware,
	PHM_PlatformCaps_VpuRecoveryInProgress,
	PHM_PlatformCaps_Falcon_QuickTransition,
	PHM_PlatformCaps_AVFS,
	PHM_PlatformCaps_ClockStretcher,
	PHM_PlatformCaps_TablelessHardwareInterface,
	PHM_PlatformCaps_EnableDriverEVV,
	PHM_PlatformCaps_SPLLShutdownSupport,
	PHM_PlatformCaps_VirtualBatteryState,
	PHM_PlatformCaps_IgnoreForceHighClockRequestsInAPUs,
	PHM_PlatformCaps_DisableMclkSwitchForVR,
	PHM_PlatformCaps_SMU8,
	PHM_PlatformCaps_VRHotPolarityHigh,
	PHM_PlatformCaps_IPS_UlpsExclusive,
	PHM_PlatformCaps_SMCtoPPLIBAcdcGpioScheme,
	PHM_PlatformCaps_GeminiAsymmetricPower,
	PHM_PlatformCaps_OCLPowerOptimization,
	PHM_PlatformCaps_MaxPCIEBandWidth,
	PHM_PlatformCaps_PerfPerWattOptimizationSupport,
	PHM_PlatformCaps_UVDClientMCTuning,
	PHM_PlatformCaps_ODNinACSupport,
	PHM_PlatformCaps_ODNinDCSupport,
	PHM_PlatformCaps_OD8inACSupport,
	PHM_PlatformCaps_OD8inDCSupport,
	PHM_PlatformCaps_UMDPState,
	PHM_PlatformCaps_AutoWattmanSupport,
	PHM_PlatformCaps_AutoWattmanEnable_CCCState,
	PHM_PlatformCaps_FreeSyncActive,
	PHM_PlatformCaps_EnableShadowPstate,
	PHM_PlatformCaps_customThermalManagement,
	PHM_PlatformCaps_staticFanControl,
	PHM_PlatformCaps_Virtual_System,
	PHM_PlatformCaps_LowestUclkReservedForUlv,
	PHM_PlatformCaps_EnableBoostState,
	PHM_PlatformCaps_AVFSSupport,
	PHM_PlatformCaps_ThermalPolicyDelay,
	PHM_PlatformCaps_CustomFanControlSupport,
	PHM_PlatformCaps_BAMACO,
	PHM_PlatformCaps_Max
};

#define PHM_MAX_NUM_CAPS_BITS_PER_FIELD (sizeof(uint32_t)*8)

/* Number of uint32_t entries used by CAPS table */
#define PHM_MAX_NUM_CAPS_ULONG_ENTRIES \
	((PHM_PlatformCaps_Max + ((PHM_MAX_NUM_CAPS_BITS_PER_FIELD) - 1)) / (PHM_MAX_NUM_CAPS_BITS_PER_FIELD))

struct pp_hw_descriptor {
	uint32_t hw_caps[PHM_MAX_NUM_CAPS_ULONG_ENTRIES];
};

enum PHM_PerformanceLevelDesignation {
	PHM_PerformanceLevelDesignation_Activity,
	PHM_PerformanceLevelDesignation_PowerContainment
};

typedef enum PHM_PerformanceLevelDesignation PHM_PerformanceLevelDesignation;

struct PHM_PerformanceLevel {
    uint32_t    coreClock;
    uint32_t    memory_clock;
    uint32_t  vddc;
    uint32_t  vddci;
    uint32_t    nonLocalMemoryFreq;
    uint32_t nonLocalMemoryWidth;
};

typedef struct PHM_PerformanceLevel PHM_PerformanceLevel;

/* Function for setting a platform cap */
static inline void phm_cap_set(uint32_t *caps,
			enum phm_platform_caps c)
{
	caps[c / PHM_MAX_NUM_CAPS_BITS_PER_FIELD] |= (1UL <<
			     (c & (PHM_MAX_NUM_CAPS_BITS_PER_FIELD - 1)));
}

static inline void phm_cap_unset(uint32_t *caps,
			enum phm_platform_caps c)
{
	caps[c / PHM_MAX_NUM_CAPS_BITS_PER_FIELD] &= ~(1UL << (c & (PHM_MAX_NUM_CAPS_BITS_PER_FIELD - 1)));
}

static inline bool phm_cap_enabled(const uint32_t *caps, enum phm_platform_caps c)
{
	return (0 != (caps[c / PHM_MAX_NUM_CAPS_BITS_PER_FIELD] &
		  (1UL << (c & (PHM_MAX_NUM_CAPS_BITS_PER_FIELD - 1)))));
}

#define PP_CAP(c) phm_cap_enabled(hwmgr->platform_descriptor.platformCaps, (c))

#define PP_PCIEGenInvalid  0xffff
enum PP_PCIEGen {
    PP_PCIEGen1 = 0,                /* PCIE 1.0 - Transfer rate of 2.5 GT/s */
    PP_PCIEGen2,                    /*PCIE 2.0 - Transfer rate of 5.0 GT/s */
    PP_PCIEGen3                     /*PCIE 3.0 - Transfer rate of 8.0 GT/s */
};

typedef enum PP_PCIEGen PP_PCIEGen;

#define PP_Min_PCIEGen     PP_PCIEGen1
#define PP_Max_PCIEGen     PP_PCIEGen3
#define PP_Min_PCIELane    1
#define PP_Max_PCIELane    16

enum phm_clock_Type {
	PHM_DispClock = 1,
	PHM_SClock,
	PHM_MemClock
};

#define MAX_NUM_CLOCKS 16

struct PP_Clocks {
	uint32_t engineClock;
	uint32_t memoryClock;
	uint32_t BusBandwidth;
	uint32_t engineClockInSR;
	uint32_t dcefClock;
	uint32_t dcefClockInSR;
};

struct pp_clock_info {
	uint32_t min_mem_clk;
	uint32_t max_mem_clk;
	uint32_t min_eng_clk;
	uint32_t max_eng_clk;
	uint32_t min_bus_bandwidth;
	uint32_t max_bus_bandwidth;
};

struct phm_platform_descriptor {
	uint32_t platformCaps[PHM_MAX_NUM_CAPS_ULONG_ENTRIES];
	uint32_t vbiosInterruptId;
	struct PP_Clocks overdriveLimit;
	struct PP_Clocks clockStep;
	uint32_t hardwareActivityPerformanceLevels;
	uint32_t minimumClocksReductionPercentage;
	uint32_t minOverdriveVDDC;
	uint32_t maxOverdriveVDDC;
	uint32_t overdriveVDDCStep;
	uint32_t hardwarePerformanceLevels;
	uint16_t powerBudget;
	uint32_t TDPLimit;
	uint32_t nearTDPLimit;
	uint32_t nearTDPLimitAdjusted;
	uint32_t SQRampingThreshold;
	uint32_t CACLeakage;
	uint16_t TDPODLimit;
	uint32_t TDPAdjustment;
	bool TDPAdjustmentPolarity;
	uint16_t LoadLineSlope;
	uint32_t  VidMinLimit;
	uint32_t  VidMaxLimit;
	uint32_t  VidStep;
	uint32_t  VidAdjustment;
	bool VidAdjustmentPolarity;
};

struct phm_clocks {
	uint32_t num_of_entries;
	uint32_t clock[MAX_NUM_CLOCKS];
};

#define DPMTABLE_OD_UPDATE_SCLK     0x00000001
#define DPMTABLE_OD_UPDATE_MCLK     0x00000002
#define DPMTABLE_UPDATE_SCLK        0x00000004
#define DPMTABLE_UPDATE_MCLK        0x00000008
#define DPMTABLE_OD_UPDATE_VDDC     0x00000010
#define DPMTABLE_UPDATE_SOCCLK      0x00000020

struct phm_odn_performance_level {
	uint32_t clock;
	uint32_t vddc;
	bool enabled;
};

struct phm_odn_clock_levels {
	uint32_t size;
	uint32_t options;
	uint32_t flags;
	uint32_t num_of_pl;
	/* variable-sized array, specify by num_of_pl. */
	struct phm_odn_performance_level entries[8];
};

extern int phm_disable_clock_power_gatings(struct pp_hwmgr *hwmgr);
extern int phm_powerdown_uvd(struct pp_hwmgr *hwmgr);
extern int phm_setup_asic(struct pp_hwmgr *hwmgr);
extern int phm_enable_dynamic_state_management(struct pp_hwmgr *hwmgr);
extern int phm_disable_dynamic_state_management(struct pp_hwmgr *hwmgr);
extern bool phm_is_hw_access_blocked(struct pp_hwmgr *hwmgr);
extern int phm_block_hw_access(struct pp_hwmgr *hwmgr, bool block);
extern int phm_set_power_state(struct pp_hwmgr *hwmgr,
		    const struct pp_hw_power_state *pcurrent_state,
		 const struct pp_hw_power_state *pnew_power_state);

extern int phm_apply_state_adjust_rules(struct pp_hwmgr *hwmgr,
				   struct pp_power_state *adjusted_ps,
			     const struct pp_power_state *current_ps);

extern int phm_apply_clock_adjust_rules(struct pp_hwmgr *hwmgr);

extern int phm_force_dpm_levels(struct pp_hwmgr *hwmgr, enum amd_dpm_forced_level level);
extern int phm_pre_display_configuration_changed(struct pp_hwmgr *hwmgr);
extern int phm_display_configuration_changed(struct pp_hwmgr *hwmgr);
extern int phm_notify_smc_display_config_after_ps_adjustment(struct pp_hwmgr *hwmgr);
extern int phm_register_irq_handlers(struct pp_hwmgr *hwmgr);
extern int phm_start_thermal_controller(struct pp_hwmgr *hwmgr);
extern int phm_stop_thermal_controller(struct pp_hwmgr *hwmgr);
extern bool phm_check_smc_update_required_for_display_configuration(struct pp_hwmgr *hwmgr);

extern int phm_check_states_equal(struct pp_hwmgr *hwmgr,
				 const struct pp_hw_power_state *pstate1,
				 const struct pp_hw_power_state *pstate2,
				 bool *equal);

extern int phm_store_dal_configuration_data(struct pp_hwmgr *hwmgr,
		const struct amd_pp_display_configuration *display_config);

extern int phm_get_dal_power_level(struct pp_hwmgr *hwmgr,
		struct amd_pp_simple_clock_info *info);

extern int phm_set_cpu_power_state(struct pp_hwmgr *hwmgr);

extern int phm_power_down_asic(struct pp_hwmgr *hwmgr);

extern int phm_get_performance_level(struct pp_hwmgr *hwmgr, const struct pp_hw_power_state *state,
				PHM_PerformanceLevelDesignation designation, uint32_t index,
				PHM_PerformanceLevel *level);

extern int phm_get_clock_info(struct pp_hwmgr *hwmgr, const struct pp_hw_power_state *state,
			struct pp_clock_info *pclock_info,
			PHM_PerformanceLevelDesignation designation);

extern int phm_get_current_shallow_sleep_clocks(struct pp_hwmgr *hwmgr, const struct pp_hw_power_state *state, struct pp_clock_info *clock_info);

extern int phm_get_clock_by_type(struct pp_hwmgr *hwmgr, enum amd_pp_clock_type type, struct amd_pp_clocks *clocks);

extern int phm_get_clock_by_type_with_latency(struct pp_hwmgr *hwmgr,
		enum amd_pp_clock_type type,
		struct pp_clock_levels_with_latency *clocks);
extern int phm_get_clock_by_type_with_voltage(struct pp_hwmgr *hwmgr,
		enum amd_pp_clock_type type,
		struct pp_clock_levels_with_voltage *clocks);
extern int phm_set_watermarks_for_clocks_ranges(struct pp_hwmgr *hwmgr,
						void *clock_ranges);
extern int phm_display_clock_voltage_request(struct pp_hwmgr *hwmgr,
		struct pp_display_clock_request *clock);

extern int phm_get_max_high_clocks(struct pp_hwmgr *hwmgr, struct amd_pp_simple_clock_info *clocks);
extern int phm_disable_smc_firmware_ctf(struct pp_hwmgr *hwmgr);

extern int phm_set_active_display_count(struct pp_hwmgr *hwmgr, uint32_t count);

#endif /* _HARDWARE_MANAGER_H_ */

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */


#ifndef _FIJI_PP_SMC_H_
#define _FIJI_PP_SMC_H_

#pragma pack(push, 1)

#define PPSMC_SWSTATE_FLAG_DC                           0x01
#define PPSMC_SWSTATE_FLAG_UVD                          0x02
#define PPSMC_SWSTATE_FLAG_VCE                          0x04

#define PPSMC_THERMAL_PROTECT_TYPE_INTERNAL             0x00
#define PPSMC_THERMAL_PROTECT_TYPE_EXTERNAL             0x01
#define PPSMC_THERMAL_PROTECT_TYPE_NONE                 0xff

#define PPSMC_SYSTEMFLAG_GPIO_DC                        0x01
#define PPSMC_SYSTEMFLAG_STEPVDDC                       0x02
#define PPSMC_SYSTEMFLAG_GDDR5                          0x04

#define PPSMC_SYSTEMFLAG_DISABLE_BABYSTEP               0x08

#define PPSMC_SYSTEMFLAG_REGULATOR_HOT                  0x10
#define PPSMC_SYSTEMFLAG_REGULATOR_HOT_ANALOG           0x20

#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_MASK              0x07
#define PPSMC_EXTRAFLAGS_AC2DC_DONT_WAIT_FOR_VBLANK     0x08

#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_GOTODPMLOWSTATE   0x00
#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_GOTOINITIALSTATE  0x01

/* Defines for DPM 2.0 */
#define PPSMC_DPM2FLAGS_TDPCLMP                         0x01
#define PPSMC_DPM2FLAGS_PWRSHFT                         0x02
#define PPSMC_DPM2FLAGS_OCP                             0x04

/* Defines for display watermark level */
#define PPSMC_DISPLAY_WATERMARK_LOW                     0
#define PPSMC_DISPLAY_WATERMARK_HIGH                    1

/* In the HW performance level's state flags: */
#define PPSMC_STATEFLAG_AUTO_PULSE_SKIP    0x01
#define PPSMC_STATEFLAG_POWERBOOST         0x02
#define PPSMC_STATEFLAG_PSKIP_ON_TDP_FAULT 0x04
#define PPSMC_STATEFLAG_POWERSHIFT         0x08
#define PPSMC_STATEFLAG_SLOW_READ_MARGIN   0x10
#define PPSMC_STATEFLAG_DEEPSLEEP_THROTTLE 0x20
#define PPSMC_STATEFLAG_DEEPSLEEP_BYPASS   0x40

/* Fan control algorithm: */
#define FDO_MODE_HARDWARE 0
#define FDO_MODE_PIECE_WISE_LINEAR 1

enum FAN_CONTROL {
  FAN_CONTROL_FUZZY,
  FAN_CONTROL_TABLE
};

/* Gemini Modes*/
#define PPSMC_GeminiModeNone   0  /*Single GPU board*/
#define PPSMC_GeminiModeMaster 1  /*Master GPU on a Gemini board*/
#define PPSMC_GeminiModeSlave  2  /*Slave GPU on a Gemini board*/


/* Return codes for driver to SMC communication. */
#define PPSMC_Result_OK             ((uint16_t)0x01)
#define PPSMC_Result_NoMore         ((uint16_t)0x02)

#define PPSMC_Result_NotNow         ((uint16_t)0x03)

#define PPSMC_Result_Failed         ((uint16_t)0xFF)
#define PPSMC_Result_UnknownCmd     ((uint16_t)0xFE)
#define PPSMC_Result_UnknownVT      ((uint16_t)0xFD)

#define PPSMC_isERROR(x) ((uint16_t)0x80 & (x))


#define PPSMC_MSG_Halt                      ((uint16_t)0x10)
#define PPSMC_MSG_Resume                    ((uint16_t)0x11)
#define PPSMC_MSG_EnableDPMLevel            ((uint16_t)0x12)
#define PPSMC_MSG_ZeroLevelsDisabled        ((uint16_t)0x13)
#define PPSMC_MSG_OneLevelsDisabled         ((uint16_t)0x14)
#define PPSMC_MSG_TwoLevelsDisabled         ((uint16_t)0x15)
#define PPSMC_MSG_EnableThermalInterrupt    ((uint16_t)0x16)
#define PPSMC_MSG_RunningOnAC               ((uint16_t)0x17)
#define PPSMC_MSG_LevelUp                   ((uint16_t)0x18)
#define PPSMC_MSG_LevelDown                 ((uint16_t)0x19)
#define PPSMC_MSG_ResetDPMCounters          ((uint16_t)0x1a)
#define PPSMC_MSG_SwitchToSwState           ((uint16_t)0x20)

#define PPSMC_MSG_SwitchToSwStateLast       ((uint16_t)0x3f)
#define PPSMC_MSG_SwitchToInitialState      ((uint16_t)0x40)
#define PPSMC_MSG_NoForcedLevel             ((uint16_t)0x41)
#define PPSMC_MSG_ForceHigh                 ((uint16_t)0x42)
#define PPSMC_MSG_ForceMediumOrHigh         ((uint16_t)0x43)

#define PPSMC_MSG_SwitchToMinimumPower      ((uint16_t)0x51)
#define PPSMC_MSG_ResumeFromMinimumPower    ((uint16_t)0x52)
#define PPSMC_MSG_EnableCac                 ((uint16_t)0x53)
#define PPSMC_MSG_DisableCac                ((uint16_t)0x54)
#define PPSMC_DPMStateHistoryStart          ((uint16_t)0x55)
#define PPSMC_DPMStateHistoryStop           ((uint16_t)0x56)
#define PPSMC_CACHistoryStart               ((uint16_t)0x57)
#define PPSMC_CACHistoryStop                ((uint16_t)0x58)
#define PPSMC_TDPClampingActive             ((uint16_t)0x59)
#define PPSMC_TDPClampingInactive           ((uint16_t)0x5A)
#define PPSMC_StartFanControl               ((uint16_t)0x5B)
#define PPSMC_StopFanControl                ((uint16_t)0x5C)
#define PPSMC_NoDisplay                     ((uint16_t)0x5D)
#define PPSMC_HasDisplay                    ((uint16_t)0x5E)
#define PPSMC_MSG_UVDPowerOFF               ((uint16_t)0x60)
#define PPSMC_MSG_UVDPowerON                ((uint16_t)0x61)
#define PPSMC_MSG_EnableULV                 ((uint16_t)0x62)
#define PPSMC_MSG_DisableULV                ((uint16_t)0x63)
#define PPSMC_MSG_EnterULV                  ((uint16_t)0x64)
#define PPSMC_MSG_ExitULV                   ((uint16_t)0x65)
#define PPSMC_PowerShiftActive              ((uint16_t)0x6A)
#define PPSMC_PowerShiftInactive            ((uint16_t)0x6B)
#define PPSMC_OCPActive                     ((uint16_t)0x6C)
#define PPSMC_OCPInactive                   ((uint16_t)0x6D)
#define PPSMC_CACLongTermAvgEnable          ((uint16_t)0x6E)
#define PPSMC_CACLongTermAvgDisable         ((uint16_t)0x6F)
#define PPSMC_MSG_InferredStateSweep_Start  ((uint16_t)0x70)
#define PPSMC_MSG_InferredStateSweep_Stop   ((uint16_t)0x71)
#define PPSMC_MSG_SwitchToLowestInfState    ((uint16_t)0x72)
#define PPSMC_MSG_SwitchToNonInfState       ((uint16_t)0x73)
#define PPSMC_MSG_AllStateSweep_Start       ((uint16_t)0x74)
#define PPSMC_MSG_AllStateSweep_Stop        ((uint16_t)0x75)
#define PPSMC_MSG_SwitchNextLowerInfState   ((uint16_t)0x76)
#define PPSMC_MSG_SwitchNextHigherInfState  ((uint16_t)0x77)
#define PPSMC_MSG_MclkRetrainingTest        ((uint16_t)0x78)
#define PPSMC_MSG_ForceTDPClamping          ((uint16_t)0x79)
#define PPSMC_MSG_CollectCAC_PowerCorreln   ((uint16_t)0x7A)
#define PPSMC_MSG_CollectCAC_WeightCalib    ((uint16_t)0x7B)
#define PPSMC_MSG_CollectCAC_SQonly         ((uint16_t)0x7C)
#define PPSMC_MSG_CollectCAC_TemperaturePwr ((uint16_t)0x7D)

#define PPSMC_MSG_ExtremitiesTest_Start     ((uint16_t)0x7E)
#define PPSMC_MSG_ExtremitiesTest_Stop      ((uint16_t)0x7F)
#define PPSMC_FlushDataCache                ((uint16_t)0x80)
#define PPSMC_FlushInstrCache               ((uint16_t)0x81)

#define PPSMC_MSG_SetEnabledLevels          ((uint16_t)0x82)
#define PPSMC_MSG_SetForcedLevels           ((uint16_t)0x83)

#define PPSMC_MSG_ResetToDefaults           ((uint16_t)0x84)

#define PPSMC_MSG_SetForcedLevelsAndJump      ((uint16_t)0x85)
#define PPSMC_MSG_SetCACHistoryMode           ((uint16_t)0x86)
#define PPSMC_MSG_EnableDTE                   ((uint16_t)0x87)
#define PPSMC_MSG_DisableDTE                  ((uint16_t)0x88)

#define PPSMC_MSG_SmcSpaceSetAddress          ((uint16_t)0x89)

#define PPSMC_MSG_BREAK                       ((uint16_t)0xF8)

/* Trinity Specific Messages*/
#define PPSMC_MSG_Test                        ((uint16_t) 0x100)
#define PPSMC_MSG_DPM_Voltage_Pwrmgt          ((uint16_t) 0x101)
#define PPSMC_MSG_DPM_Config                  ((uint16_t) 0x102)
#define PPSMC_MSG_PM_Controller_Start         ((uint16_t) 0x103)
#define PPSMC_MSG_DPM_ForceState              ((uint16_t) 0x104)
#define PPSMC_MSG_PG_PowerDownSIMD            ((uint16_t) 0x105)
#define PPSMC_MSG_PG_PowerUpSIMD              ((uint16_t) 0x106)
#define PPSMC_MSG_PM_Controller_Stop          ((uint16_t) 0x107)
#define PPSMC_MSG_PG_SIMD_Config              ((uint16_t) 0x108)
#define PPSMC_MSG_Voltage_Cntl_Enable         ((uint16_t) 0x109)
#define PPSMC_MSG_Thermal_Cntl_Enable         ((uint16_t) 0x10a)
#define PPSMC_MSG_Reset_Service               ((uint16_t) 0x10b)
#define PPSMC_MSG_VCEPowerOFF                 ((uint16_t) 0x10e)
#define PPSMC_MSG_VCEPowerON                  ((uint16_t) 0x10f)
#define PPSMC_MSG_DPM_Disable_VCE_HS          ((uint16_t) 0x110)
#define PPSMC_MSG_DPM_Enable_VCE_HS           ((uint16_t) 0x111)
#define PPSMC_MSG_DPM_N_LevelsDisabled        ((uint16_t) 0x112)
#define PPSMC_MSG_DCEPowerOFF                 ((uint16_t) 0x113)
#define PPSMC_MSG_DCEPowerON                  ((uint16_t) 0x114)
#define PPSMC_MSG_PCIE_DDIPowerDown           ((uint16_t) 0x117)
#define PPSMC_MSG_PCIE_DDIPowerUp             ((uint16_t) 0x118)
#define PPSMC_MSG_PCIE_CascadePLLPowerDown    ((uint16_t) 0x119)
#define PPSMC_MSG_PCIE_CascadePLLPowerUp      ((uint16_t) 0x11a)
#define PPSMC_MSG_SYSPLLPowerOff              ((uint16_t) 0x11b)
#define PPSMC_MSG_SYSPLLPowerOn               ((uint16_t) 0x11c)
#define PPSMC_MSG_DCE_RemoveVoltageAdjustment ((uint16_t) 0x11d)
#define PPSMC_MSG_DCE_AllowVoltageAdjustment  ((uint16_t) 0x11e)
#define PPSMC_MSG_DISPLAYPHYStatusNotify      ((uint16_t) 0x11f)
#define PPSMC_MSG_EnableBAPM                  ((uint16_t) 0x120)
#define PPSMC_MSG_DisableBAPM                 ((uint16_t) 0x121)
#define PPSMC_MSG_Spmi_Enable                 ((uint16_t) 0x122)
#define PPSMC_MSG_Spmi_Timer                  ((uint16_t) 0x123)
#define PPSMC_MSG_LCLK_DPM_Config             ((uint16_t) 0x124)
#define PPSMC_MSG_VddNB_Request               ((uint16_t) 0x125)
#define PPSMC_MSG_PCIE_DDIPhyPowerDown        ((uint32_t) 0x126)
#define PPSMC_MSG_PCIE_DDIPhyPowerUp          ((uint32_t) 0x127)
#define PPSMC_MSG_MCLKDPM_Config              ((uint16_t) 0x128)

#define PPSMC_MSG_UVDDPM_Config               ((uint16_t) 0x129)
#define PPSMC_MSG_VCEDPM_Config               ((uint16_t) 0x12A)
#define PPSMC_MSG_ACPDPM_Config               ((uint16_t) 0x12B)
#define PPSMC_MSG_SAMUDPM_Config              ((uint16_t) 0x12C)
#define PPSMC_MSG_UVDDPM_SetEnabledMask       ((uint16_t) 0x12D)
#define PPSMC_MSG_VCEDPM_SetEnabledMask       ((uint16_t) 0x12E)
#define PPSMC_MSG_ACPDPM_SetEnabledMask       ((uint16_t) 0x12F)
#define PPSMC_MSG_SAMUDPM_SetEnabledMask      ((uint16_t) 0x130)
#define PPSMC_MSG_MCLKDPM_ForceState          ((uint16_t) 0x131)
#define PPSMC_MSG_MCLKDPM_NoForcedLevel       ((uint16_t) 0x132)
#define PPSMC_MSG_Thermal_Cntl_Disable        ((uint16_t) 0x133)
#define PPSMC_MSG_SetTDPLimit                 ((uint16_t) 0x134)
#define PPSMC_MSG_Voltage_Cntl_Disable        ((uint16_t) 0x135)
#define PPSMC_MSG_PCIeDPM_Enable              ((uint16_t) 0x136)
#define PPSMC_MSG_ACPPowerOFF                 ((uint16_t) 0x137)
#define PPSMC_MSG_ACPPowerON                  ((uint16_t) 0x138)
#define PPSMC_MSG_SAMPowerOFF                 ((uint16_t) 0x139)
#define PPSMC_MSG_SAMPowerON                  ((uint16_t) 0x13a)
#define PPSMC_MSG_SDMAPowerOFF                ((uint16_t) 0x13b)
#define PPSMC_MSG_SDMAPowerON                 ((uint16_t) 0x13c)
#define PPSMC_MSG_PCIeDPM_Disable             ((uint16_t) 0x13d)
#define PPSMC_MSG_IOMMUPowerOFF               ((uint16_t) 0x13e)
#define PPSMC_MSG_IOMMUPowerON                ((uint16_t) 0x13f)
#define PPSMC_MSG_NBDPM_Enable                ((uint16_t) 0x140)
#define PPSMC_MSG_NBDPM_Disable               ((uint16_t) 0x141)
#define PPSMC_MSG_NBDPM_ForceNominal          ((uint16_t) 0x142)
#define PPSMC_MSG_NBDPM_ForcePerformance      ((uint16_t) 0x143)
#define PPSMC_MSG_NBDPM_UnForce               ((uint16_t) 0x144)
#define PPSMC_MSG_SCLKDPM_SetEnabledMask      ((uint16_t) 0x145)
#define PPSMC_MSG_MCLKDPM_SetEnabledMask      ((uint16_t) 0x146)
#define PPSMC_MSG_PCIeDPM_ForceLevel          ((uint16_t) 0x147)
#define PPSMC_MSG_PCIeDPM_UnForceLevel        ((uint16_t) 0x148)
#define PPSMC_MSG_EnableACDCGPIOInterrupt     ((uint16_t) 0x149)
#define PPSMC_MSG_EnableVRHotGPIOInterrupt    ((uint16_t) 0x14a)
#define PPSMC_MSG_SwitchToAC                  ((uint16_t) 0x14b)

#define PPSMC_MSG_XDMAPowerOFF                ((uint16_t) 0x14c)
#define PPSMC_MSG_XDMAPowerON                 ((uint16_t) 0x14d)

#define PPSMC_MSG_DPM_Enable                  ((uint16_t) 0x14e)
#define PPSMC_MSG_DPM_Disable                 ((uint16_t) 0x14f)
#define PPSMC_MSG_MCLKDPM_Enable              ((uint16_t) 0x150)
#define PPSMC_MSG_MCLKDPM_Disable             ((uint16_t) 0x151)
#define PPSMC_MSG_LCLKDPM_Enable              ((uint16_t) 0x152)
#define PPSMC_MSG_LCLKDPM_Disable             ((uint16_t) 0x153)
#define PPSMC_MSG_UVDDPM_Enable               ((uint16_t) 0x154)
#define PPSMC_MSG_UVDDPM_Disable              ((uint16_t) 0x155)
#define PPSMC_MSG_SAMUDPM_Enable              ((uint16_t) 0x156)
#define PPSMC_MSG_SAMUDPM_Disable             ((uint16_t) 0x157)
#define PPSMC_MSG_ACPDPM_Enable               ((uint16_t) 0x158)
#define PPSMC_MSG_ACPDPM_Disable              ((uint16_t) 0x159)
#define PPSMC_MSG_VCEDPM_Enable               ((uint16_t) 0x15a)
#define PPSMC_MSG_VCEDPM_Disable              ((uint16_t) 0x15b)
#define PPSMC_MSG_LCLKDPM_SetEnabledMask      ((uint16_t) 0x15c)
#define PPSMC_MSG_DPM_FPS_Mode                ((uint16_t) 0x15d)
#define PPSMC_MSG_DPM_Activity_Mode           ((uint16_t) 0x15e)
#define PPSMC_MSG_VddC_Request                ((uint16_t) 0x15f)
#define PPSMC_MSG_MCLKDPM_GetEnabledMask      ((uint16_t) 0x160)
#define PPSMC_MSG_LCLKDPM_GetEnabledMask      ((uint16_t) 0x161)
#define PPSMC_MSG_SCLKDPM_GetEnabledMask      ((uint16_t) 0x162)
#define PPSMC_MSG_UVDDPM_GetEnabledMask       ((uint16_t) 0x163)
#define PPSMC_MSG_SAMUDPM_GetEnabledMask      ((uint16_t) 0x164)
#define PPSMC_MSG_ACPDPM_GetEnabledMask       ((uint16_t) 0x165)
#define PPSMC_MSG_VCEDPM_GetEnabledMask       ((uint16_t) 0x166)
#define PPSMC_MSG_PCIeDPM_SetEnabledMask      ((uint16_t) 0x167)
#define PPSMC_MSG_PCIeDPM_GetEnabledMask      ((uint16_t) 0x168)
#define PPSMC_MSG_TDCLimitEnable              ((uint16_t) 0x169)
#define PPSMC_MSG_TDCLimitDisable             ((uint16_t) 0x16a)
#define PPSMC_MSG_DPM_AutoRotate_Mode         ((uint16_t) 0x16b)
#define PPSMC_MSG_DISPCLK_FROM_FCH            ((uint16_t) 0x16c)
#define PPSMC_MSG_DISPCLK_FROM_DFS            ((uint16_t) 0x16d)
#define PPSMC_MSG_DPREFCLK_FROM_FCH           ((uint16_t) 0x16e)
#define PPSMC_MSG_DPREFCLK_FROM_DFS           ((uint16_t) 0x16f)
#define PPSMC_MSG_PmStatusLogStart            ((uint16_t) 0x170)
#define PPSMC_MSG_PmStatusLogSample           ((uint16_t) 0x171)
#define PPSMC_MSG_SCLK_AutoDPM_ON             ((uint16_t) 0x172)
#define PPSMC_MSG_MCLK_AutoDPM_ON             ((uint16_t) 0x173)
#define PPSMC_MSG_LCLK_AutoDPM_ON             ((uint16_t) 0x174)
#define PPSMC_MSG_UVD_AutoDPM_ON              ((uint16_t) 0x175)
#define PPSMC_MSG_SAMU_AutoDPM_ON             ((uint16_t) 0x176)
#define PPSMC_MSG_ACP_AutoDPM_ON              ((uint16_t) 0x177)
#define PPSMC_MSG_VCE_AutoDPM_ON              ((uint16_t) 0x178)
#define PPSMC_MSG_PCIe_AutoDPM_ON             ((uint16_t) 0x179)
#define PPSMC_MSG_MASTER_AutoDPM_ON           ((uint16_t) 0x17a)
#define PPSMC_MSG_MASTER_AutoDPM_OFF          ((uint16_t) 0x17b)
#define PPSMC_MSG_DYNAMICDISPPHYPOWER         ((uint16_t) 0x17c)
#define PPSMC_MSG_CAC_COLLECTION_ON           ((uint16_t) 0x17d)
#define PPSMC_MSG_CAC_COLLECTION_OFF          ((uint16_t) 0x17e)
#define PPSMC_MSG_CAC_CORRELATION_ON          ((uint16_t) 0x17f)
#define PPSMC_MSG_CAC_CORRELATION_OFF         ((uint16_t) 0x180)
#define PPSMC_MSG_PM_STATUS_TO_DRAM_ON        ((uint16_t) 0x181)
#define PPSMC_MSG_PM_STATUS_TO_DRAM_OFF       ((uint16_t) 0x182)
#define PPSMC_MSG_ALLOW_LOWSCLK_INTERRUPT     ((uint16_t) 0x184)
#define PPSMC_MSG_PkgPwrLimitEnable           ((uint16_t) 0x185)
#define PPSMC_MSG_PkgPwrLimitDisable          ((uint16_t) 0x186)
#define PPSMC_MSG_PkgPwrSetLimit              ((uint16_t) 0x187)
#define PPSMC_MSG_OverDriveSetTargetTdp       ((uint16_t) 0x188)
#define PPSMC_MSG_SCLKDPM_FreezeLevel         ((uint16_t) 0x189)
#define PPSMC_MSG_SCLKDPM_UnfreezeLevel       ((uint16_t) 0x18A)
#define PPSMC_MSG_MCLKDPM_FreezeLevel         ((uint16_t) 0x18B)
#define PPSMC_MSG_MCLKDPM_UnfreezeLevel       ((uint16_t) 0x18C)
#define PPSMC_MSG_START_DRAM_LOGGING          ((uint16_t) 0x18D)
#define PPSMC_MSG_STOP_DRAM_LOGGING           ((uint16_t) 0x18E)
#define PPSMC_MSG_MASTER_DeepSleep_ON         ((uint16_t) 0x18F)
#define PPSMC_MSG_MASTER_DeepSleep_OFF        ((uint16_t) 0x190)
#define PPSMC_MSG_Remove_DC_Clamp             ((uint16_t) 0x191)
#define PPSMC_MSG_DisableACDCGPIOInterrupt    ((uint16_t) 0x192)
#define PPSMC_MSG_OverrideVoltageControl_SetVddc       ((uint16_t) 0x193)
#define PPSMC_MSG_OverrideVoltageControl_SetVddci      ((uint16_t) 0x194)
#define PPSMC_MSG_SetVidOffset_1              ((uint16_t) 0x195)
#define PPSMC_MSG_SetVidOffset_2              ((uint16_t) 0x207)
#define PPSMC_MSG_GetVidOffset_1              ((uint16_t) 0x196)
#define PPSMC_MSG_GetVidOffset_2              ((uint16_t) 0x208)
#define PPSMC_MSG_THERMAL_OVERDRIVE_Enable    ((uint16_t) 0x197)
#define PPSMC_MSG_THERMAL_OVERDRIVE_Disable   ((uint16_t) 0x198)
#define PPSMC_MSG_SetTjMax                    ((uint16_t) 0x199)
#define PPSMC_MSG_SetFanPwmMax                ((uint16_t) 0x19A)
#define PPSMC_MSG_WaitForMclkSwitchFinish     ((uint16_t) 0x19B)
#define PPSMC_MSG_ENABLE_THERMAL_DPM          ((uint16_t) 0x19C)
#define PPSMC_MSG_DISABLE_THERMAL_DPM         ((uint16_t) 0x19D)

#define PPSMC_MSG_API_GetSclkFrequency        ((uint16_t) 0x200)
#define PPSMC_MSG_API_GetMclkFrequency        ((uint16_t) 0x201)
#define PPSMC_MSG_API_GetSclkBusy             ((uint16_t) 0x202)
#define PPSMC_MSG_API_GetMclkBusy             ((uint16_t) 0x203)
#define PPSMC_MSG_API_GetAsicPower            ((uint16_t) 0x204)
#define PPSMC_MSG_SetFanRpmMax                ((uint16_t) 0x205)
#define PPSMC_MSG_SetFanSclkTarget            ((uint16_t) 0x206)
#define PPSMC_MSG_SetFanMinPwm                ((uint16_t) 0x209)
#define PPSMC_MSG_SetFanTemperatureTarget     ((uint16_t) 0x20A)

#define PPSMC_MSG_BACO_StartMonitor           ((uint16_t) 0x240)
#define PPSMC_MSG_BACO_Cancel                 ((uint16_t) 0x241)
#define PPSMC_MSG_EnableVddGfx                ((uint16_t) 0x242)
#define PPSMC_MSG_DisableVddGfx               ((uint16_t) 0x243)
#define PPSMC_MSG_UcodeAddressLow             ((uint16_t) 0x244)
#define PPSMC_MSG_UcodeAddressHigh            ((uint16_t) 0x245)
#define PPSMC_MSG_UcodeLoadStatus             ((uint16_t) 0x246)

#define PPSMC_MSG_DRV_DRAM_ADDR_HI            ((uint16_t) 0x250)
#define PPSMC_MSG_DRV_DRAM_ADDR_LO            ((uint16_t) 0x251)
#define PPSMC_MSG_SMU_DRAM_ADDR_HI            ((uint16_t) 0x252)
#define PPSMC_MSG_SMU_DRAM_ADDR_LO            ((uint16_t) 0x253)
#define PPSMC_MSG_LoadUcodes                  ((uint16_t) 0x254)
#define PPSMC_MSG_PowerStateNotify            ((uint16_t) 0x255)
#define PPSMC_MSG_COND_EXEC_DRAM_ADDR_HI      ((uint16_t) 0x256)
#define PPSMC_MSG_COND_EXEC_DRAM_ADDR_LO      ((uint16_t) 0x257)
#define PPSMC_MSG_VBIOS_DRAM_ADDR_HI          ((uint16_t) 0x258)
#define PPSMC_MSG_VBIOS_DRAM_ADDR_LO          ((uint16_t) 0x259)
#define PPSMC_MSG_LoadVBios                   ((uint16_t) 0x25A)
#define PPSMC_MSG_GetUcodeVersion             ((uint16_t) 0x25B)
#define DMCUSMC_MSG_PSREntry                  ((uint16_t) 0x25C)
#define DMCUSMC_MSG_PSRExit                   ((uint16_t) 0x25D)
#define PPSMC_MSG_EnableClockGatingFeature    ((uint16_t) 0x260)
#define PPSMC_MSG_DisableClockGatingFeature   ((uint16_t) 0x261)
#define PPSMC_MSG_IsDeviceRunning             ((uint16_t) 0x262)
#define PPSMC_MSG_LoadMetaData                ((uint16_t) 0x263)
#define PPSMC_MSG_TMON_AutoCaliberate_Enable  ((uint16_t) 0x264)
#define PPSMC_MSG_TMON_AutoCaliberate_Disable ((uint16_t) 0x265)
#define PPSMC_MSG_GetTelemetry1Slope          ((uint16_t) 0x266)
#define PPSMC_MSG_GetTelemetry1Offset         ((uint16_t) 0x267)
#define PPSMC_MSG_GetTelemetry2Slope          ((uint16_t) 0x268)
#define PPSMC_MSG_GetTelemetry2Offset         ((uint16_t) 0x269)
#define PPSMC_MSG_EnableAvfs                  ((uint16_t) 0x26A)
#define PPSMC_MSG_DisableAvfs                 ((uint16_t) 0x26B)
#define PPSMC_MSG_PerformBtc                  ((uint16_t) 0x26C)
#define PPSMC_MSG_GetHbmCode                  ((uint16_t) 0x26D)
#define PPSMC_MSG_GetVrVddcTemperature        ((uint16_t) 0x26E)
#define PPSMC_MSG_GetVrMvddTemperature        ((uint16_t) 0x26F)
#define PPSMC_MSG_GetLiquidTemperature        ((uint16_t) 0x270)
#define PPSMC_MSG_GetPlxTemperature           ((uint16_t) 0x271)
#define PPSMC_MSG_RequestI2CControl           ((uint16_t) 0x272)
#define PPSMC_MSG_ReleaseI2CControl           ((uint16_t) 0x273)
#define PPSMC_MSG_LedConfig                   ((uint16_t) 0x274)
#define PPSMC_MSG_SetHbmFanCode               ((uint16_t) 0x275)
#define PPSMC_MSG_SetHbmThrottleCode          ((uint16_t) 0x276)

#define PPSMC_MSG_GetEnabledPsm               ((uint16_t) 0x400)
#define PPSMC_MSG_AgmStartPsm                 ((uint16_t) 0x401)
#define PPSMC_MSG_AgmReadPsm                  ((uint16_t) 0x402)
#define PPSMC_MSG_AgmResetPsm                 ((uint16_t) 0x403)
#define PPSMC_MSG_ReadVftCell                 ((uint16_t) 0x404)

/* AVFS Only - Remove Later */
#define PPSMC_MSG_VftTableIsValid             ((uint16_t) 0x666)

/* If the SMC firmware has an event status soft register this is what the individual bits mean.*/
#define PPSMC_EVENT_STATUS_THERMAL          0x00000001
#define PPSMC_EVENT_STATUS_REGULATORHOT     0x00000002
#define PPSMC_EVENT_STATUS_DC               0x00000004

typedef uint16_t PPSMC_Msg;

#pragma pack(pop)

#endif
/*
 * Copyright 2014 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef CZ_PP_SMC_H
#define CZ_PP_SMC_H

#pragma pack(push, 1)

/* Fan control algorithm:*/
#define FDO_MODE_HARDWARE 0
#define FDO_MODE_PIECE_WISE_LINEAR 1

enum FAN_CONTROL {
    FAN_CONTROL_FUZZY,
    FAN_CONTROL_TABLE
};

enum DPM_ARRAY {
    DPM_ARRAY_HARD_MAX,
    DPM_ARRAY_HARD_MIN,
    DPM_ARRAY_SOFT_MAX,
    DPM_ARRAY_SOFT_MIN
};

/*
 * Return codes for driver to SMC communication.
 * Leave these #define-s, enums might not be exactly 8-bits on the microcontroller.
 */
#define PPSMC_Result_OK             ((uint16_t)0x01)
#define PPSMC_Result_NoMore         ((uint16_t)0x02)
#define PPSMC_Result_NotNow         ((uint16_t)0x03)
#define PPSMC_Result_Failed         ((uint16_t)0xFF)
#define PPSMC_Result_UnknownCmd     ((uint16_t)0xFE)
#define PPSMC_Result_UnknownVT      ((uint16_t)0xFD)

#define PPSMC_isERROR(x)            ((uint16_t)0x80 & (x))

/*
 * Supported driver messages
 */
#define PPSMC_MSG_Test                        ((uint16_t) 0x1)
#define PPSMC_MSG_GetFeatureStatus            ((uint16_t) 0x2)
#define PPSMC_MSG_EnableAllSmuFeatures        ((uint16_t) 0x3)
#define PPSMC_MSG_DisableAllSmuFeatures       ((uint16_t) 0x4)
#define PPSMC_MSG_OptimizeBattery             ((uint16_t) 0x5)
#define PPSMC_MSG_MaximizePerf                ((uint16_t) 0x6)
#define PPSMC_MSG_UVDPowerOFF                 ((uint16_t) 0x7)
#define PPSMC_MSG_UVDPowerON                  ((uint16_t) 0x8)
#define PPSMC_MSG_VCEPowerOFF                 ((uint16_t) 0x9)
#define PPSMC_MSG_VCEPowerON                  ((uint16_t) 0xA)
#define PPSMC_MSG_ACPPowerOFF                 ((uint16_t) 0xB)
#define PPSMC_MSG_ACPPowerON                  ((uint16_t) 0xC)
#define PPSMC_MSG_SDMAPowerOFF                ((uint16_t) 0xD)
#define PPSMC_MSG_SDMAPowerON                 ((uint16_t) 0xE)
#define PPSMC_MSG_XDMAPowerOFF                ((uint16_t) 0xF)
#define PPSMC_MSG_XDMAPowerON                 ((uint16_t) 0x10)
#define PPSMC_MSG_SetMinDeepSleepSclk         ((uint16_t) 0x11)
#define PPSMC_MSG_SetSclkSoftMin              ((uint16_t) 0x12)
#define PPSMC_MSG_SetSclkSoftMax              ((uint16_t) 0x13)
#define PPSMC_MSG_SetSclkHardMin              ((uint16_t) 0x14)
#define PPSMC_MSG_SetSclkHardMax              ((uint16_t) 0x15)
#define PPSMC_MSG_SetLclkSoftMin              ((uint16_t) 0x16)
#define PPSMC_MSG_SetLclkSoftMax              ((uint16_t) 0x17)
#define PPSMC_MSG_SetLclkHardMin              ((uint16_t) 0x18)
#define PPSMC_MSG_SetLclkHardMax              ((uint16_t) 0x19)
#define PPSMC_MSG_SetUvdSoftMin               ((uint16_t) 0x1A)
#define PPSMC_MSG_SetUvdSoftMax               ((uint16_t) 0x1B)
#define PPSMC_MSG_SetUvdHardMin               ((uint16_t) 0x1C)
#define PPSMC_MSG_SetUvdHardMax               ((uint16_t) 0x1D)
#define PPSMC_MSG_SetEclkSoftMin              ((uint16_t) 0x1E)
#define PPSMC_MSG_SetEclkSoftMax              ((uint16_t) 0x1F)
#define PPSMC_MSG_SetEclkHardMin              ((uint16_t) 0x20)
#define PPSMC_MSG_SetEclkHardMax              ((uint16_t) 0x21)
#define PPSMC_MSG_SetAclkSoftMin              ((uint16_t) 0x22)
#define PPSMC_MSG_SetAclkSoftMax              ((uint16_t) 0x23)
#define PPSMC_MSG_SetAclkHardMin              ((uint16_t) 0x24)
#define PPSMC_MSG_SetAclkHardMax              ((uint16_t) 0x25)
#define PPSMC_MSG_SetNclkSoftMin              ((uint16_t) 0x26)
#define PPSMC_MSG_SetNclkSoftMax              ((uint16_t) 0x27)
#define PPSMC_MSG_SetNclkHardMin              ((uint16_t) 0x28)
#define PPSMC_MSG_SetNclkHardMax              ((uint16_t) 0x29)
#define PPSMC_MSG_SetPstateSoftMin            ((uint16_t) 0x2A)
#define PPSMC_MSG_SetPstateSoftMax            ((uint16_t) 0x2B)
#define PPSMC_MSG_SetPstateHardMin            ((uint16_t) 0x2C)
#define PPSMC_MSG_SetPstateHardMax            ((uint16_t) 0x2D)
#define PPSMC_MSG_DisableLowMemoryPstate      ((uint16_t) 0x2E)
#define PPSMC_MSG_EnableLowMemoryPstate       ((uint16_t) 0x2F)
#define PPSMC_MSG_UcodeAddressLow             ((uint16_t) 0x30)
#define PPSMC_MSG_UcodeAddressHigh            ((uint16_t) 0x31)
#define PPSMC_MSG_UcodeLoadStatus             ((uint16_t) 0x32)
#define PPSMC_MSG_DriverDramAddrHi            ((uint16_t) 0x33)
#define PPSMC_MSG_DriverDramAddrLo            ((uint16_t) 0x34)
#define PPSMC_MSG_CondExecDramAddrHi          ((uint16_t) 0x35)
#define PPSMC_MSG_CondExecDramAddrLo          ((uint16_t) 0x36)
#define PPSMC_MSG_LoadUcodes                  ((uint16_t) 0x37)
#define PPSMC_MSG_DriverResetMode             ((uint16_t) 0x38)
#define PPSMC_MSG_PowerStateNotify            ((uint16_t) 0x39)
#define PPSMC_MSG_SetDisplayPhyConfig         ((uint16_t) 0x3A)
#define PPSMC_MSG_GetMaxSclkLevel             ((uint16_t) 0x3B)
#define PPSMC_MSG_GetMaxLclkLevel             ((uint16_t) 0x3C)
#define PPSMC_MSG_GetMaxUvdLevel              ((uint16_t) 0x3D)
#define PPSMC_MSG_GetMaxEclkLevel             ((uint16_t) 0x3E)
#define PPSMC_MSG_GetMaxAclkLevel             ((uint16_t) 0x3F)
#define PPSMC_MSG_GetMaxNclkLevel             ((uint16_t) 0x40)
#define PPSMC_MSG_GetMaxPstate                ((uint16_t) 0x41)
#define PPSMC_MSG_DramAddrHiVirtual           ((uint16_t) 0x42)
#define PPSMC_MSG_DramAddrLoVirtual           ((uint16_t) 0x43)
#define PPSMC_MSG_DramAddrHiPhysical          ((uint16_t) 0x44)
#define PPSMC_MSG_DramAddrLoPhysical          ((uint16_t) 0x45)
#define PPSMC_MSG_DramBufferSize              ((uint16_t) 0x46)
#define PPSMC_MSG_SetMmPwrLogDramAddrHi       ((uint16_t) 0x47)
#define PPSMC_MSG_SetMmPwrLogDramAddrLo       ((uint16_t) 0x48)
#define PPSMC_MSG_SetClkTableAddrHi           ((uint16_t) 0x49)
#define PPSMC_MSG_SetClkTableAddrLo           ((uint16_t) 0x4A)
#define PPSMC_MSG_GetConservativePowerLimit   ((uint16_t) 0x4B)

#define PPSMC_MSG_InitJobs                    ((uint16_t) 0x252)
#define PPSMC_MSG_ExecuteJob                  ((uint16_t) 0x254)

#define PPSMC_MSG_NBDPM_Enable                ((uint16_t) 0x140)
#define PPSMC_MSG_NBDPM_Disable               ((uint16_t) 0x141)

#define PPSMC_MSG_DPM_FPS_Mode                ((uint16_t) 0x15d)
#define PPSMC_MSG_DPM_Activity_Mode           ((uint16_t) 0x15e)

#define PPSMC_MSG_PmStatusLogStart            ((uint16_t) 0x170)
#define PPSMC_MSG_PmStatusLogSample           ((uint16_t) 0x171)

#define PPSMC_MSG_AllowLowSclkInterrupt       ((uint16_t) 0x184)
#define PPSMC_MSG_MmPowerMonitorStart         ((uint16_t) 0x18F)
#define PPSMC_MSG_MmPowerMonitorStop          ((uint16_t) 0x190)
#define PPSMC_MSG_MmPowerMonitorRestart       ((uint16_t) 0x191)

#define PPSMC_MSG_SetClockGateMask            ((uint16_t) 0x260)
#define PPSMC_MSG_SetFpsThresholdLo           ((uint16_t) 0x264)
#define PPSMC_MSG_SetFpsThresholdHi           ((uint16_t) 0x265)
#define PPSMC_MSG_SetLowSclkIntrThreshold     ((uint16_t) 0x266)

#define PPSMC_MSG_ClkTableXferToDram          ((uint16_t) 0x267)
#define PPSMC_MSG_ClkTableXferToSmu           ((uint16_t) 0x268)
#define PPSMC_MSG_GetAverageGraphicsActivity  ((uint16_t) 0x269)
#define PPSMC_MSG_GetAverageGioActivity       ((uint16_t) 0x26A)
#define PPSMC_MSG_SetLoggerBufferSize         ((uint16_t) 0x26B)
#define PPSMC_MSG_SetLoggerAddressHigh        ((uint16_t) 0x26C)
#define PPSMC_MSG_SetLoggerAddressLow         ((uint16_t) 0x26D)
#define PPSMC_MSG_SetWatermarkFrequency       ((uint16_t) 0x26E)
#define PPSMC_MSG_SetDisplaySizePowerParams   ((uint16_t) 0x26F)

/* REMOVE LATER*/
#define PPSMC_MSG_DPM_ForceState              ((uint16_t) 0x104)

/* Feature Enable Masks*/
#define NB_DPM_MASK             0x00000800
#define VDDGFX_MASK             0x00800000
#define VCE_DPM_MASK            0x00400000
#define ACP_DPM_MASK            0x00040000
#define UVD_DPM_MASK            0x00010000
#define GFX_CU_PG_MASK          0x00004000
#define SCLK_DPM_MASK           0x00080000

#if !defined(SMC_MICROCODE)
#pragma pack(pop)

#endif

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _AMD_POWERPLAY_H_
#define _AMD_POWERPLAY_H_

#include <linux/seq_file.h>
#include <linux/types.h>
#include <linux/errno.h>
#include "amd_shared.h"
#include "cgs_common.h"
#include "dm_pp_interface.h"
#include "kgd_pp_interface.h"
#include "amdgpu.h"

#endif /* _AMD_POWERPLAY_H_ */
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA20_THERMAL_H
#define VEGA20_THERMAL_H

#include "hwmgr.h"

struct vega20_temperature {
	uint16_t edge_temp;
	uint16_t hot_spot_temp;
	uint16_t hbm_temp;
	uint16_t vr_soc_temp;
	uint16_t vr_mem_temp;
	uint16_t liquid1_temp;
	uint16_t liquid2_temp;
	uint16_t plx_temp;
};

#define VEGA20_THERMAL_HIGH_ALERT_MASK         0x1
#define VEGA20_THERMAL_LOW_ALERT_MASK          0x2

#define VEGA20_THERMAL_MINIMUM_TEMP_READING    -256
#define VEGA20_THERMAL_MAXIMUM_TEMP_READING    255

#define VEGA20_THERMAL_MINIMUM_ALERT_TEMP      0
#define VEGA20_THERMAL_MAXIMUM_ALERT_TEMP      255

#define FDO_PWM_MODE_STATIC  1
#define FDO_PWM_MODE_STATIC_RPM 5

extern int vega20_thermal_get_temperature(struct pp_hwmgr *hwmgr);
extern int vega20_fan_ctrl_get_fan_speed_info(struct pp_hwmgr *hwmgr,
		struct phm_fan_speed_info *fan_speed_info);
extern int vega20_fan_ctrl_get_fan_speed_rpm(struct pp_hwmgr *hwmgr,
		uint32_t *speed);
extern int vega20_fan_ctrl_set_fan_speed_rpm(struct pp_hwmgr *hwmgr,
		uint32_t speed);
extern int vega20_fan_ctrl_get_fan_speed_pwm(struct pp_hwmgr *hwmgr,
		uint32_t *speed);
extern int vega20_fan_ctrl_set_fan_speed_pwm(struct pp_hwmgr *hwmgr,
		uint32_t speed);
extern int vega20_fan_ctrl_stop_smc_fan_control(struct pp_hwmgr *hwmgr);
extern int vega20_fan_ctrl_start_smc_fan_control(struct pp_hwmgr *hwmgr);
extern int vega20_thermal_disable_alert(struct pp_hwmgr *hwmgr);
extern int vega20_start_thermal_controller(struct pp_hwmgr *hwmgr,
				struct PP_TemperatureRange *range);
extern int vega20_thermal_stop_thermal_controller(struct pp_hwmgr *hwmgr);

#endif

/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA20_PROCESSPPTABLES_H
#define VEGA20_PROCESSPPTABLES_H

#include "hwmgr.h"

extern const struct pp_table_func vega20_pptable_funcs;

#endif
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _VEGA20_PPTABLE_H_
#define _VEGA20_PPTABLE_H_

#pragma pack(push, 1)

#define ATOM_VEGA20_PP_THERMALCONTROLLER_NONE           0
#define ATOM_VEGA20_PP_THERMALCONTROLLER_VEGA20     26

#define ATOM_VEGA20_PP_PLATFORM_CAP_POWERPLAY                   0x1
#define ATOM_VEGA20_PP_PLATFORM_CAP_SBIOSPOWERSOURCE            0x2
#define ATOM_VEGA20_PP_PLATFORM_CAP_HARDWAREDC                  0x4
#define ATOM_VEGA20_PP_PLATFORM_CAP_BACO                        0x8
#define ATOM_VEGA20_PP_PLATFORM_CAP_BAMACO                      0x10
#define ATOM_VEGA20_PP_PLATFORM_CAP_ENABLESHADOWPSTATE          0x20

#define ATOM_VEGA20_TABLE_REVISION_VEGA20         11
#define ATOM_VEGA20_ODFEATURE_MAX_COUNT         32
#define ATOM_VEGA20_ODSETTING_MAX_COUNT         32
#define ATOM_VEGA20_PPCLOCK_MAX_COUNT           16

enum ATOM_VEGA20_ODFEATURE_ID {
  ATOM_VEGA20_ODFEATURE_GFXCLK_LIMITS = 0,
  ATOM_VEGA20_ODFEATURE_GFXCLK_CURVE,
  ATOM_VEGA20_ODFEATURE_UCLK_MAX,
  ATOM_VEGA20_ODFEATURE_POWER_LIMIT,
  ATOM_VEGA20_ODFEATURE_FAN_ACOUSTIC_LIMIT,    //FanMaximumRpm
  ATOM_VEGA20_ODFEATURE_FAN_SPEED_MIN,         //FanMinimumPwm
  ATOM_VEGA20_ODFEATURE_TEMPERATURE_FAN,       //FanTargetTemperature
  ATOM_VEGA20_ODFEATURE_TEMPERATURE_SYSTEM,    //MaxOpTemp
  ATOM_VEGA20_ODFEATURE_MEMORY_TIMING_TUNE,
  ATOM_VEGA20_ODFEATURE_FAN_ZERO_RPM_CONTROL,
  ATOM_VEGA20_ODFEATURE_COUNT,
};

enum ATOM_VEGA20_ODSETTING_ID {
  ATOM_VEGA20_ODSETTING_GFXCLKFMAX = 0,
  ATOM_VEGA20_ODSETTING_GFXCLKFMIN,
  ATOM_VEGA20_ODSETTING_VDDGFXCURVEFREQ_P1,
  ATOM_VEGA20_ODSETTING_VDDGFXCURVEVOLTAGEOFFSET_P1,
  ATOM_VEGA20_ODSETTING_VDDGFXCURVEFREQ_P2,
  ATOM_VEGA20_ODSETTING_VDDGFXCURVEVOLTAGEOFFSET_P2,
  ATOM_VEGA20_ODSETTING_VDDGFXCURVEFREQ_P3,
  ATOM_VEGA20_ODSETTING_VDDGFXCURVEVOLTAGEOFFSET_P3,
  ATOM_VEGA20_ODSETTING_UCLKFMAX,
  ATOM_VEGA20_ODSETTING_POWERPERCENTAGE,
  ATOM_VEGA20_ODSETTING_FANRPMMIN,
  ATOM_VEGA20_ODSETTING_FANRPMACOUSTICLIMIT,
  ATOM_VEGA20_ODSETTING_FANTARGETTEMPERATURE,
  ATOM_VEGA20_ODSETTING_OPERATINGTEMPMAX,
  ATOM_VEGA20_ODSETTING_COUNT,
};
typedef enum ATOM_VEGA20_ODSETTING_ID ATOM_VEGA20_ODSETTING_ID;

typedef struct _ATOM_VEGA20_OVERDRIVE8_RECORD
{
  UCHAR ucODTableRevision;
  ULONG ODFeatureCount;
  UCHAR ODFeatureCapabilities [ATOM_VEGA20_ODFEATURE_MAX_COUNT];   //OD feature support flags
  ULONG ODSettingCount;
  ULONG ODSettingsMax [ATOM_VEGA20_ODSETTING_MAX_COUNT];           //Upper Limit for each OD Setting
  ULONG ODSettingsMin [ATOM_VEGA20_ODSETTING_MAX_COUNT];           //Lower Limit for each OD Setting
} ATOM_VEGA20_OVERDRIVE8_RECORD;

enum ATOM_VEGA20_PPCLOCK_ID {
  ATOM_VEGA20_PPCLOCK_GFXCLK = 0,
  ATOM_VEGA20_PPCLOCK_VCLK,
  ATOM_VEGA20_PPCLOCK_DCLK,
  ATOM_VEGA20_PPCLOCK_ECLK,
  ATOM_VEGA20_PPCLOCK_SOCCLK,
  ATOM_VEGA20_PPCLOCK_UCLK,
  ATOM_VEGA20_PPCLOCK_FCLK,
  ATOM_VEGA20_PPCLOCK_DCEFCLK,
  ATOM_VEGA20_PPCLOCK_DISPCLK,
  ATOM_VEGA20_PPCLOCK_PIXCLK,
  ATOM_VEGA20_PPCLOCK_PHYCLK,
  ATOM_VEGA20_PPCLOCK_COUNT,
};
typedef enum ATOM_VEGA20_PPCLOCK_ID ATOM_VEGA20_PPCLOCK_ID;

typedef struct _ATOM_VEGA20_POWER_SAVING_CLOCK_RECORD
{
  UCHAR ucTableRevision;
  ULONG PowerSavingClockCount;                                 // Count of PowerSavingClock Mode
  ULONG PowerSavingClockMax  [ATOM_VEGA20_PPCLOCK_MAX_COUNT];      // PowerSavingClock Mode Clock Maximum array In MHz
  ULONG PowerSavingClockMin  [ATOM_VEGA20_PPCLOCK_MAX_COUNT];      // PowerSavingClock Mode Clock Minimum array In MHz
} ATOM_VEGA20_POWER_SAVING_CLOCK_RECORD;

typedef struct _ATOM_VEGA20_POWERPLAYTABLE
{
      struct atom_common_table_header sHeader;
      UCHAR  ucTableRevision;
      USHORT usTableSize;
      ULONG  ulGoldenPPID;
      ULONG  ulGoldenRevision;
      USHORT usFormatID;

      ULONG  ulPlatformCaps;

      UCHAR  ucThermalControllerType;

      USHORT usSmallPowerLimit1;
      USHORT usSmallPowerLimit2;
      USHORT usBoostPowerLimit;
      USHORT usODTurboPowerLimit;
      USHORT usODPowerSavePowerLimit;
      USHORT usSoftwareShutdownTemp;

      ATOM_VEGA20_POWER_SAVING_CLOCK_RECORD PowerSavingClockTable;    //PowerSavingClock Mode Clock Min/Max array

      ATOM_VEGA20_OVERDRIVE8_RECORD OverDrive8Table;       //OverDrive8 Feature capabilities and Settings Range (Max and Min)

      USHORT usReserve[5];

      PPTable_t smcPPTable;

} ATOM_Vega20_POWERPLAYTABLE;

#pragma pack(pop)

#endif
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _VEGA20_POWERTUNE_H_
#define _VEGA20_POWERTUNE_H_

int vega20_set_power_limit(struct pp_hwmgr *hwmgr, uint32_t n);
int vega20_power_control_set_level(struct pp_hwmgr *hwmgr);
int vega20_validate_power_level_request(struct pp_hwmgr *hwmgr,
		uint32_t tdp_percentage_adjustment,
		uint32_t tdp_absolute_value_adjustment);
#endif  /* _VEGA20_POWERTUNE_H_ */

/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA20_INC_H
#define VEGA20_INC_H

#include "asic_reg/thm/thm_11_0_2_offset.h"
#include "asic_reg/thm/thm_11_0_2_sh_mask.h"

#include "asic_reg/mp/mp_9_0_offset.h"
#include "asic_reg/mp/mp_9_0_sh_mask.h"

#include "asic_reg/nbio/nbio_7_4_offset.h"
#include "asic_reg/nbio/nbio_7_4_sh_mask.h"

#endif
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _VEGA20_HWMGR_H_
#define _VEGA20_HWMGR_H_

#include "hwmgr.h"
#include "smu11_driver_if.h"
#include "ppatomfwctrl.h"

#define VEGA20_MAX_HARDWARE_POWERLEVELS 2

#define WaterMarksExist  1
#define WaterMarksLoaded 2

#define VG20_PSUEDO_NUM_GFXCLK_DPM_LEVELS   8
#define VG20_PSUEDO_NUM_SOCCLK_DPM_LEVELS   8
#define VG20_PSUEDO_NUM_DCEFCLK_DPM_LEVELS  8
#define VG20_PSUEDO_NUM_UCLK_DPM_LEVELS     4

//OverDriver8 macro defs
#define AVFS_CURVE 0
#define OD8_HOTCURVE_TEMPERATURE 85

#define VG20_CLOCK_MAX_DEFAULT 0xFFFF

typedef uint32_t PP_Clock;

enum {
	GNLD_DPM_PREFETCHER = 0,
	GNLD_DPM_GFXCLK,
	GNLD_DPM_UCLK,
	GNLD_DPM_SOCCLK,
	GNLD_DPM_UVD,
	GNLD_DPM_VCE,
	GNLD_ULV,
	GNLD_DPM_MP0CLK,
	GNLD_DPM_LINK,
	GNLD_DPM_DCEFCLK,
	GNLD_DS_GFXCLK,
	GNLD_DS_SOCCLK,
	GNLD_DS_LCLK,
	GNLD_PPT,
	GNLD_TDC,
	GNLD_THERMAL,
	GNLD_GFX_PER_CU_CG,
	GNLD_RM,
	GNLD_DS_DCEFCLK,
	GNLD_ACDC,
	GNLD_VR0HOT,
	GNLD_VR1HOT,
	GNLD_FW_CTF,
	GNLD_LED_DISPLAY,
	GNLD_FAN_CONTROL,
	GNLD_DIDT,
	GNLD_GFXOFF,
	GNLD_CG,
	GNLD_DPM_FCLK,
	GNLD_DS_FCLK,
	GNLD_DS_MP1CLK,
	GNLD_DS_MP0CLK,
	GNLD_XGMI,
	GNLD_ECC,

	GNLD_FEATURES_MAX
};


#define GNLD_DPM_MAX    (GNLD_DPM_DCEFCLK + 1)

#define SMC_DPM_FEATURES    0x30F

struct smu_features {
	bool supported;
	bool enabled;
	bool allowed;
	uint32_t smu_feature_id;
	uint64_t smu_feature_bitmap;
};

struct vega20_performance_level {
	uint32_t  soc_clock;
	uint32_t  gfx_clock;
	uint32_t  mem_clock;
};

struct vega20_bacos {
	uint32_t                       baco_flags;
	/* struct vega20_performance_level  performance_level; */
};

struct vega20_uvd_clocks {
	uint32_t  vclk;
	uint32_t  dclk;
};

struct vega20_vce_clocks {
	uint32_t  evclk;
	uint32_t  ecclk;
};

struct vega20_power_state {
	uint32_t                  magic;
	struct vega20_uvd_clocks    uvd_clks;
	struct vega20_vce_clocks    vce_clks;
	uint16_t                  performance_level_count;
	bool                      dc_compatible;
	uint32_t                  sclk_threshold;
	struct vega20_performance_level  performance_levels[VEGA20_MAX_HARDWARE_POWERLEVELS];
};

struct vega20_dpm_level {
	bool		enabled;
	uint32_t	value;
	uint32_t	param1;
};

#define VEGA20_MAX_DEEPSLEEP_DIVIDER_ID 5
#define MAX_REGULAR_DPM_NUMBER 16
#define MAX_PCIE_CONF 2
#define VEGA20_MINIMUM_ENGINE_CLOCK 2500

struct vega20_max_sustainable_clocks {
	PP_Clock display_clock;
	PP_Clock phy_clock;
	PP_Clock pixel_clock;
	PP_Clock uclock;
	PP_Clock dcef_clock;
	PP_Clock soc_clock;
};

struct vega20_dpm_state {
	uint32_t  soft_min_level;
	uint32_t  soft_max_level;
	uint32_t  hard_min_level;
	uint32_t  hard_max_level;
};

struct vega20_single_dpm_table {
	uint32_t		count;
	struct vega20_dpm_state	dpm_state;
	struct vega20_dpm_level	dpm_levels[MAX_REGULAR_DPM_NUMBER];
};

struct vega20_odn_dpm_control {
	uint32_t	count;
	uint32_t	entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega20_pcie_table {
	uint16_t count;
	uint8_t  pcie_gen[MAX_PCIE_CONF];
	uint8_t  pcie_lane[MAX_PCIE_CONF];
	uint32_t lclk[MAX_PCIE_CONF];
};

struct vega20_dpm_table {
	struct vega20_single_dpm_table  soc_table;
	struct vega20_single_dpm_table  gfx_table;
	struct vega20_single_dpm_table  mem_table;
	struct vega20_single_dpm_table  eclk_table;
	struct vega20_single_dpm_table  vclk_table;
	struct vega20_single_dpm_table  dclk_table;
	struct vega20_single_dpm_table  dcef_table;
	struct vega20_single_dpm_table  pixel_table;
	struct vega20_single_dpm_table  display_table;
	struct vega20_single_dpm_table  phy_table;
	struct vega20_single_dpm_table  fclk_table;
	struct vega20_pcie_table        pcie_table;
};

#define VEGA20_MAX_LEAKAGE_COUNT  8
struct vega20_leakage_voltage {
	uint16_t  count;
	uint16_t  leakage_id[VEGA20_MAX_LEAKAGE_COUNT];
	uint16_t  actual_voltage[VEGA20_MAX_LEAKAGE_COUNT];
};

struct vega20_display_timing {
	uint32_t  min_clock_in_sr;
	uint32_t  num_existing_displays;
};

struct vega20_dpmlevel_enable_mask {
	uint32_t  uvd_dpm_enable_mask;
	uint32_t  vce_dpm_enable_mask;
	uint32_t  samu_dpm_enable_mask;
	uint32_t  sclk_dpm_enable_mask;
	uint32_t  mclk_dpm_enable_mask;
};

struct vega20_vbios_boot_state {
	uint8_t     uc_cooling_id;
	uint16_t    vddc;
	uint16_t    vddci;
	uint16_t    mvddc;
	uint16_t    vdd_gfx;
	uint32_t    gfx_clock;
	uint32_t    mem_clock;
	uint32_t    soc_clock;
	uint32_t    dcef_clock;
	uint32_t    eclock;
	uint32_t    dclock;
	uint32_t    vclock;
	uint32_t    fclock;
};

#define DPMTABLE_OD_UPDATE_SCLK     0x00000001
#define DPMTABLE_OD_UPDATE_MCLK     0x00000002
#define DPMTABLE_UPDATE_SCLK        0x00000004
#define DPMTABLE_UPDATE_MCLK        0x00000008
#define DPMTABLE_OD_UPDATE_VDDC     0x00000010
#define DPMTABLE_OD_UPDATE_SCLK_MASK     0x00000020
#define DPMTABLE_OD_UPDATE_MCLK_MASK     0x00000040

// To determine if sclk and mclk are in overdrive state
#define SCLK_MASK_OVERDRIVE_ENABLED      0x00000008
#define MCLK_MASK_OVERDRIVE_ENABLED      0x00000010
#define SOCCLK_OVERDRIVE_ENABLED         0x00000020

struct vega20_smc_state_table {
	uint32_t        soc_boot_level;
	uint32_t        gfx_boot_level;
	uint32_t        dcef_boot_level;
	uint32_t        mem_boot_level;
	uint32_t        uvd_boot_level;
	uint32_t        vce_boot_level;
	uint32_t        gfx_max_level;
	uint32_t        mem_max_level;
	uint8_t         vr_hot_gpio;
	uint8_t         ac_dc_gpio;
	uint8_t         therm_out_gpio;
	uint8_t         therm_out_polarity;
	uint8_t         therm_out_mode;
	PPTable_t       pp_table;
	Watermarks_t    water_marks_table;
	AvfsDebugTable_t avfs_debug_table;
	AvfsFuseOverride_t avfs_fuse_override_table;
	SmuMetrics_t    smu_metrics;
	DriverSmuConfig_t driver_smu_config;
	DpmActivityMonitorCoeffInt_t dpm_activity_monitor_coeffint;
	OverDriveTable_t overdrive_table;
};

struct vega20_mclk_latency_entries {
	uint32_t  frequency;
	uint32_t  latency;
};

struct vega20_mclk_latency_table {
	uint32_t  count;
	struct vega20_mclk_latency_entries  entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega20_registry_data {
	uint64_t  disallowed_features;
	uint8_t   ac_dc_switch_gpio_support;
	uint8_t   acg_loop_support;
	uint8_t   clock_stretcher_support;
	uint8_t   db_ramping_support;
	uint8_t   didt_mode;
	uint8_t   didt_support;
	uint8_t   edc_didt_support;
	uint8_t   force_dpm_high;
	uint8_t   fuzzy_fan_control_support;
	uint8_t   mclk_dpm_key_disabled;
	uint8_t   od_state_in_dc_support;
	uint8_t   pcie_lane_override;
	uint8_t   pcie_speed_override;
	uint32_t  pcie_clock_override;
	uint8_t   pcie_dpm_key_disabled;
	uint8_t   dcefclk_dpm_key_disabled;
	uint8_t   prefetcher_dpm_key_disabled;
	uint8_t   quick_transition_support;
	uint8_t   regulator_hot_gpio_support;
	uint8_t   master_deep_sleep_support;
	uint8_t   gfx_clk_deep_sleep_support;
	uint8_t   sclk_deep_sleep_support;
	uint8_t   lclk_deep_sleep_support;
	uint8_t   dce_fclk_deep_sleep_support;
	uint8_t   sclk_dpm_key_disabled;
	uint8_t   sclk_throttle_low_notification;
	uint8_t   skip_baco_hardware;
	uint8_t   socclk_dpm_key_disabled;
	uint8_t   sq_ramping_support;
	uint8_t   tcp_ramping_support;
	uint8_t   td_ramping_support;
	uint8_t   dbr_ramping_support;
	uint8_t   gc_didt_support;
	uint8_t   psm_didt_support;
	uint8_t   thermal_support;
	uint8_t   fw_ctf_enabled;
	uint8_t   led_dpm_enabled;
	uint8_t   fan_control_support;
	uint8_t   ulv_support;
	uint8_t   od8_feature_enable;
	uint8_t   disable_water_mark;
	uint8_t   disable_workload_policy;
	uint32_t  force_workload_policy_mask;
	uint8_t   disable_3d_fs_detection;
	uint8_t   disable_pp_tuning;
	uint8_t   disable_xlpp_tuning;
	uint32_t  perf_ui_tuning_profile_turbo;
	uint32_t  perf_ui_tuning_profile_powerSave;
	uint32_t  perf_ui_tuning_profile_xl;
	uint16_t  zrpm_stop_temp;
	uint16_t  zrpm_start_temp;
	uint32_t  stable_pstate_sclk_dpm_percentage;
	uint8_t   fps_support;
	uint8_t   vr0hot;
	uint8_t   vr1hot;
	uint8_t   disable_auto_wattman;
	uint32_t  auto_wattman_debug;
	uint32_t  auto_wattman_sample_period;
	uint32_t  fclk_gfxclk_ratio;
	uint8_t   auto_wattman_threshold;
	uint8_t   log_avfs_param;
	uint8_t   enable_enginess;
	uint8_t   custom_fan_support;
	uint8_t   disable_pcc_limit_control;
	uint8_t   gfxoff_controlled_by_driver;
};

struct vega20_odn_clock_voltage_dependency_table {
	uint32_t count;
	struct phm_ppt_v1_clock_voltage_dependency_record
		entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega20_odn_dpm_table {
	struct vega20_odn_dpm_control		control_gfxclk_state;
	struct vega20_odn_dpm_control		control_memclk_state;
	struct phm_odn_clock_levels		odn_core_clock_dpm_levels;
	struct phm_odn_clock_levels		odn_memory_clock_dpm_levels;
	struct vega20_odn_clock_voltage_dependency_table		vdd_dependency_on_sclk;
	struct vega20_odn_clock_voltage_dependency_table		vdd_dependency_on_mclk;
	struct vega20_odn_clock_voltage_dependency_table		vdd_dependency_on_socclk;
	uint32_t				odn_mclk_min_limit;
};

struct vega20_odn_fan_table {
	uint32_t	target_fan_speed;
	uint32_t	target_temperature;
	uint32_t	min_performance_clock;
	uint32_t	min_fan_limit;
	bool		force_fan_pwm;
};

struct vega20_odn_temp_table {
	uint16_t	target_operating_temp;
	uint16_t	default_target_operating_temp;
	uint16_t	operating_temp_min_limit;
	uint16_t	operating_temp_max_limit;
	uint16_t	operating_temp_step;
};

struct vega20_odn_data {
	uint32_t	apply_overdrive_next_settings_mask;
	uint32_t	overdrive_next_state;
	uint32_t	overdrive_next_capabilities;
	uint32_t	odn_sclk_dpm_enable_mask;
	uint32_t	odn_mclk_dpm_enable_mask;
	struct vega20_odn_dpm_table	odn_dpm_table;
	struct vega20_odn_fan_table	odn_fan_table;
	struct vega20_odn_temp_table	odn_temp_table;
};

enum OD8_FEATURE_ID
{
	OD8_GFXCLK_LIMITS               = 1 << 0,
	OD8_GFXCLK_CURVE                = 1 << 1,
	OD8_UCLK_MAX                    = 1 << 2,
	OD8_POWER_LIMIT                 = 1 << 3,
	OD8_ACOUSTIC_LIMIT_SCLK         = 1 << 4,   //FanMaximumRpm
	OD8_FAN_SPEED_MIN               = 1 << 5,   //FanMinimumPwm
	OD8_TEMPERATURE_FAN             = 1 << 6,   //FanTargetTemperature
	OD8_TEMPERATURE_SYSTEM          = 1 << 7,   //MaxOpTemp
	OD8_MEMORY_TIMING_TUNE          = 1 << 8,
	OD8_FAN_ZERO_RPM_CONTROL        = 1 << 9
};

enum OD8_SETTING_ID
{
	OD8_SETTING_GFXCLK_FMIN = 0,
	OD8_SETTING_GFXCLK_FMAX,
	OD8_SETTING_GFXCLK_FREQ1,
	OD8_SETTING_GFXCLK_VOLTAGE1,
	OD8_SETTING_GFXCLK_FREQ2,
	OD8_SETTING_GFXCLK_VOLTAGE2,
	OD8_SETTING_GFXCLK_FREQ3,
	OD8_SETTING_GFXCLK_VOLTAGE3,
	OD8_SETTING_UCLK_FMAX,
	OD8_SETTING_POWER_PERCENTAGE,
	OD8_SETTING_FAN_ACOUSTIC_LIMIT,
	OD8_SETTING_FAN_MIN_SPEED,
	OD8_SETTING_FAN_TARGET_TEMP,
	OD8_SETTING_OPERATING_TEMP_MAX,
	OD8_SETTING_AC_TIMING,
	OD8_SETTING_FAN_ZERO_RPM_CONTROL,
	OD8_SETTING_COUNT
};

struct vega20_od8_single_setting {
	uint32_t	feature_id;
	int32_t		min_value;
	int32_t		max_value;
	int32_t		current_value;
	int32_t		default_value;
};

struct vega20_od8_settings {
	uint32_t	overdrive8_capabilities;
	struct vega20_od8_single_setting	od8_settings_array[OD8_SETTING_COUNT];
};

struct vega20_hwmgr {
	struct vega20_dpm_table          dpm_table;
	struct vega20_dpm_table          golden_dpm_table;
	struct vega20_registry_data      registry_data;
	struct vega20_vbios_boot_state   vbios_boot_state;
	struct vega20_mclk_latency_table mclk_latency_table;

	struct vega20_max_sustainable_clocks max_sustainable_clocks;

	struct vega20_leakage_voltage    vddc_leakage;

	uint32_t                           vddc_control;
	struct pp_atomfwctrl_voltage_table vddc_voltage_table;
	uint32_t                           mvdd_control;
	struct pp_atomfwctrl_voltage_table mvdd_voltage_table;
	uint32_t                           vddci_control;
	struct pp_atomfwctrl_voltage_table vddci_voltage_table;

	uint32_t                           active_auto_throttle_sources;
	struct vega20_bacos                bacos;

	/* ---- General data ---- */
	uint8_t                           need_update_dpm_table;

	bool                           cac_enabled;
	bool                           battery_state;
	bool                           is_tlu_enabled;
	bool                           avfs_exist;

	uint32_t                       low_sclk_interrupt_threshold;

	uint32_t                       total_active_cus;

	uint32_t                       water_marks_bitmap;

	struct vega20_display_timing display_timing;

	/* ---- Vega20 Dyn Register Settings ---- */

	uint32_t                       debug_settings;
	uint32_t                       lowest_uclk_reserved_for_ulv;
	uint32_t                       gfxclk_average_alpha;
	uint32_t                       socclk_average_alpha;
	uint32_t                       uclk_average_alpha;
	uint32_t                       gfx_activity_average_alpha;
	uint32_t                       display_voltage_mode;
	uint32_t                       dcef_clk_quad_eqn_a;
	uint32_t                       dcef_clk_quad_eqn_b;
	uint32_t                       dcef_clk_quad_eqn_c;
	uint32_t                       disp_clk_quad_eqn_a;
	uint32_t                       disp_clk_quad_eqn_b;
	uint32_t                       disp_clk_quad_eqn_c;
	uint32_t                       pixel_clk_quad_eqn_a;
	uint32_t                       pixel_clk_quad_eqn_b;
	uint32_t                       pixel_clk_quad_eqn_c;
	uint32_t                       phy_clk_quad_eqn_a;
	uint32_t                       phy_clk_quad_eqn_b;
	uint32_t                       phy_clk_quad_eqn_c;

	/* ---- Thermal Temperature Setting ---- */
	struct vega20_dpmlevel_enable_mask     dpm_level_enable_mask;

	/* ---- Power Gating States ---- */
	bool                           uvd_power_gated;
	bool                           vce_power_gated;
	bool                           samu_power_gated;
	bool                           need_long_memory_training;

	/* Internal settings to apply the application power optimization parameters */
	bool                           apply_optimized_settings;
	uint32_t                       disable_dpm_mask;

	/* ---- Overdrive next setting ---- */
	struct vega20_odn_data         odn_data;
	bool                           gfxclk_overdrive;
	bool                           memclk_overdrive;

	/* ---- Overdrive8 Setting ---- */
	struct vega20_od8_settings     od8_settings;

	/* ---- Workload Mask ---- */
	uint32_t                       workload_mask;

	/* ---- SMU9 ---- */
	uint32_t                       smu_version;
	struct smu_features            smu_features[GNLD_FEATURES_MAX];
	struct vega20_smc_state_table  smc_state_table;

	/* ---- Gfxoff ---- */
	bool                           gfxoff_allowed;
	uint32_t                       counter_gfxoff;

	unsigned long                  metrics_time;
	SmuMetrics_t                   metrics_table;
	struct gpu_metrics_v1_0        gpu_metrics_table;

	bool                           pcie_parameters_override;
	uint32_t                       pcie_gen_level1;
	uint32_t                       pcie_width_level1;

	bool                           is_custom_profile_set;
};

#define VEGA20_DPM2_NEAR_TDP_DEC                      10
#define VEGA20_DPM2_ABOVE_SAFE_INC                    5
#define VEGA20_DPM2_BELOW_SAFE_INC                    20

#define VEGA20_DPM2_LTA_WINDOW_SIZE                   7

#define VEGA20_DPM2_LTS_TRUNCATE                      0

#define VEGA20_DPM2_TDP_SAFE_LIMIT_PERCENT            80

#define VEGA20_DPM2_MAXPS_PERCENT_M                   90
#define VEGA20_DPM2_MAXPS_PERCENT_H                   90

#define VEGA20_DPM2_PWREFFICIENCYRATIO_MARGIN         50

#define VEGA20_DPM2_SQ_RAMP_MAX_POWER                 0x3FFF
#define VEGA20_DPM2_SQ_RAMP_MIN_POWER                 0x12
#define VEGA20_DPM2_SQ_RAMP_MAX_POWER_DELTA           0x15
#define VEGA20_DPM2_SQ_RAMP_SHORT_TERM_INTERVAL_SIZE  0x1E
#define VEGA20_DPM2_SQ_RAMP_LONG_TERM_INTERVAL_RATIO  0xF

#define VEGA20_VOLTAGE_CONTROL_NONE                   0x0
#define VEGA20_VOLTAGE_CONTROL_BY_GPIO                0x1
#define VEGA20_VOLTAGE_CONTROL_BY_SVID2               0x2
#define VEGA20_VOLTAGE_CONTROL_MERGED                 0x3
/* To convert to Q8.8 format for firmware */
#define VEGA20_Q88_FORMAT_CONVERSION_UNIT             256

#define VEGA20_UNUSED_GPIO_PIN       0x7F

#define VEGA20_THERM_OUT_MODE_DISABLE       0x0
#define VEGA20_THERM_OUT_MODE_THERM_ONLY    0x1
#define VEGA20_THERM_OUT_MODE_THERM_VRHOT   0x2

#define PPVEGA20_VEGA20DISPLAYVOLTAGEMODE_DFLT   0xffffffff
#define PPREGKEY_VEGA20QUADRATICEQUATION_DFLT    0xffffffff

#define PPVEGA20_VEGA20GFXCLKAVERAGEALPHA_DFLT       25 /* 10% * 255 = 25 */
#define PPVEGA20_VEGA20SOCCLKAVERAGEALPHA_DFLT       25 /* 10% * 255 = 25 */
#define PPVEGA20_VEGA20UCLKCLKAVERAGEALPHA_DFLT      25 /* 10% * 255 = 25 */
#define PPVEGA20_VEGA20GFXACTIVITYAVERAGEALPHA_DFLT  25 /* 10% * 255 = 25 */
#define PPVEGA20_VEGA20LOWESTUCLKRESERVEDFORULV_DFLT   0xffffffff
#define PPVEGA20_VEGA20DISPLAYVOLTAGEMODE_DFLT         0xffffffff
#define PPREGKEY_VEGA20QUADRATICEQUATION_DFLT          0xffffffff

#define VEGA20_UMD_PSTATE_GFXCLK_LEVEL         0x3
#define VEGA20_UMD_PSTATE_SOCCLK_LEVEL         0x3
#define VEGA20_UMD_PSTATE_MCLK_LEVEL           0x2
#define VEGA20_UMD_PSTATE_UVDCLK_LEVEL         0x3
#define VEGA20_UMD_PSTATE_VCEMCLK_LEVEL        0x3

#endif /* _VEGA20_HWMGR_H_ */
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __VEGA20_BACO_H__
#define __VEGA20_BACO_H__
#include "hwmgr.h"
#include "common_baco.h"

extern int vega20_baco_get_capability(struct pp_hwmgr *hwmgr, bool *cap);
extern int vega20_baco_get_state(struct pp_hwmgr *hwmgr, enum BACO_STATE *state);
extern int vega20_baco_set_state(struct pp_hwmgr *hwmgr, enum BACO_STATE state);
extern int vega20_baco_apply_vdci_flush_workaround(struct pp_hwmgr *hwmgr);

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA12_THERMAL_H
#define VEGA12_THERMAL_H

#include "hwmgr.h"

struct vega12_temperature {
	uint16_t edge_temp;
	uint16_t hot_spot_temp;
	uint16_t hbm_temp;
	uint16_t vr_soc_temp;
	uint16_t vr_mem_temp;
	uint16_t liquid1_temp;
	uint16_t liquid2_temp;
	uint16_t plx_temp;
};

#define VEGA12_THERMAL_HIGH_ALERT_MASK         0x1
#define VEGA12_THERMAL_LOW_ALERT_MASK          0x2

#define VEGA12_THERMAL_MINIMUM_TEMP_READING    -256
#define VEGA12_THERMAL_MAXIMUM_TEMP_READING    255

#define VEGA12_THERMAL_MINIMUM_ALERT_TEMP      0
#define VEGA12_THERMAL_MAXIMUM_ALERT_TEMP      255

#define FDO_PWM_MODE_STATIC  1
#define FDO_PWM_MODE_STATIC_RPM 5

extern int vega12_thermal_get_temperature(struct pp_hwmgr *hwmgr);
extern int vega12_thermal_stop_thermal_controller(struct pp_hwmgr *hwmgr);
extern int vega12_fan_ctrl_get_fan_speed_info(struct pp_hwmgr *hwmgr,
		struct phm_fan_speed_info *fan_speed_info);
extern int vega12_fan_ctrl_reset_fan_speed_to_default(struct pp_hwmgr *hwmgr);
extern int vega12_fan_ctrl_get_fan_speed_rpm(struct pp_hwmgr *hwmgr,
		uint32_t *speed);
extern int vega12_fan_ctrl_stop_smc_fan_control(struct pp_hwmgr *hwmgr);
extern int vega12_thermal_disable_alert(struct pp_hwmgr *hwmgr);
extern int vega12_fan_ctrl_start_smc_fan_control(struct pp_hwmgr *hwmgr);
extern int vega12_start_thermal_controller(struct pp_hwmgr *hwmgr,
				struct PP_TemperatureRange *range);

#endif

/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA12_PROCESSPPTABLES_H
#define VEGA12_PROCESSPPTABLES_H

#include "hwmgr.h"

enum Vega12_I2CLineID {
	Vega12_I2CLineID_DDC1 = 0x90,
	Vega12_I2CLineID_DDC2 = 0x91,
	Vega12_I2CLineID_DDC3 = 0x92,
	Vega12_I2CLineID_DDC4 = 0x93,
	Vega12_I2CLineID_DDC5 = 0x94,
	Vega12_I2CLineID_DDC6 = 0x95,
	Vega12_I2CLineID_SCLSDA = 0x96,
	Vega12_I2CLineID_DDCVGA = 0x97
};

#define Vega12_I2C_DDC1DATA          0
#define Vega12_I2C_DDC1CLK           1
#define Vega12_I2C_DDC2DATA          2
#define Vega12_I2C_DDC2CLK           3
#define Vega12_I2C_DDC3DATA          4
#define Vega12_I2C_DDC3CLK           5
#define Vega12_I2C_SDA               40
#define Vega12_I2C_SCL               41
#define Vega12_I2C_DDC4DATA          65
#define Vega12_I2C_DDC4CLK           66
#define Vega12_I2C_DDC5DATA          0x48
#define Vega12_I2C_DDC5CLK           0x49
#define Vega12_I2C_DDC6DATA          0x4a
#define Vega12_I2C_DDC6CLK           0x4b
#define Vega12_I2C_DDCVGADATA        0x4c
#define Vega12_I2C_DDCVGACLK         0x4d

extern const struct pp_table_func vega12_pptable_funcs;
#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _VEGA12_PPTABLE_H_
#define _VEGA12_PPTABLE_H_

#pragma pack(push, 1)

#define ATOM_VEGA12_PP_THERMALCONTROLLER_NONE           0
#define ATOM_VEGA12_PP_THERMALCONTROLLER_VEGA12     25

#define ATOM_VEGA12_PP_PLATFORM_CAP_POWERPLAY                   0x1
#define ATOM_VEGA12_PP_PLATFORM_CAP_SBIOSPOWERSOURCE            0x2
#define ATOM_VEGA12_PP_PLATFORM_CAP_HARDWAREDC                  0x4
#define ATOM_VEGA12_PP_PLATFORM_CAP_BACO                        0x8
#define ATOM_VEGA12_PP_PLATFORM_CAP_BAMACO                      0x10
#define ATOM_VEGA12_PP_PLATFORM_CAP_ENABLESHADOWPSTATE          0x20

#define ATOM_VEGA12_TABLE_REVISION_VEGA12         9

enum ATOM_VEGA12_ODSETTING_ID {
  ATOM_VEGA12_ODSETTING_GFXCLKFMAX = 0,
  ATOM_VEGA12_ODSETTING_GFXCLKFMIN,
  ATOM_VEGA12_ODSETTING_VDDGFXCURVEFREQ_P1,
  ATOM_VEGA12_ODSETTING_VDDGFXCURVEVOLTAGEOFFSET_P1,
  ATOM_VEGA12_ODSETTING_VDDGFXCURVEFREQ_P2,
  ATOM_VEGA12_ODSETTING_VDDGFXCURVEVOLTAGEOFFSET_P2,
  ATOM_VEGA12_ODSETTING_VDDGFXCURVEFREQ_P3,
  ATOM_VEGA12_ODSETTING_VDDGFXCURVEVOLTAGEOFFSET_P3,
  ATOM_VEGA12_ODSETTING_UCLKFMAX,
  ATOM_VEGA12_ODSETTING_POWERPERCENTAGE,
  ATOM_VEGA12_ODSETTING_FANRPMMIN,
  ATOM_VEGA12_ODSETTING_FANRPMACOUSTICLIMIT,
  ATOM_VEGA12_ODSETTING_FANTARGETTEMPERATURE,
  ATOM_VEGA12_ODSETTING_OPERATINGTEMPMAX,
  ATOM_VEGA12_ODSETTING_COUNT,
};
typedef enum ATOM_VEGA12_ODSETTING_ID ATOM_VEGA12_ODSETTING_ID;

enum ATOM_VEGA12_PPCLOCK_ID {
  ATOM_VEGA12_PPCLOCK_GFXCLK = 0,
  ATOM_VEGA12_PPCLOCK_VCLK,
  ATOM_VEGA12_PPCLOCK_DCLK,
  ATOM_VEGA12_PPCLOCK_ECLK,
  ATOM_VEGA12_PPCLOCK_SOCCLK,
  ATOM_VEGA12_PPCLOCK_UCLK,
  ATOM_VEGA12_PPCLOCK_DCEFCLK,
  ATOM_VEGA12_PPCLOCK_DISPCLK,
  ATOM_VEGA12_PPCLOCK_PIXCLK,
  ATOM_VEGA12_PPCLOCK_PHYCLK,
  ATOM_VEGA12_PPCLOCK_COUNT,
};
typedef enum ATOM_VEGA12_PPCLOCK_ID ATOM_VEGA12_PPCLOCK_ID;


typedef struct _ATOM_VEGA12_POWERPLAYTABLE
{
      struct atom_common_table_header sHeader;
      UCHAR  ucTableRevision;
      USHORT usTableSize;
      ULONG  ulGoldenPPID;
      ULONG  ulGoldenRevision;
      USHORT usFormatID;

      ULONG  ulPlatformCaps;

      UCHAR  ucThermalControllerType;

      USHORT usSmallPowerLimit1;
      USHORT usSmallPowerLimit2;
      USHORT usBoostPowerLimit;
      USHORT usODTurboPowerLimit;
      USHORT usODPowerSavePowerLimit;
      USHORT usSoftwareShutdownTemp;

      ULONG PowerSavingClockMax  [ATOM_VEGA12_PPCLOCK_COUNT];
      ULONG PowerSavingClockMin  [ATOM_VEGA12_PPCLOCK_COUNT];

      ULONG ODSettingsMax [ATOM_VEGA12_ODSETTING_COUNT];
      ULONG ODSettingsMin [ATOM_VEGA12_ODSETTING_COUNT];

      USHORT usReserve[5];

      PPTable_t smcPPTable;

} ATOM_Vega12_POWERPLAYTABLE;

#pragma pack(pop)

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA12_INC_H
#define VEGA12_INC_H

#include "asic_reg/thm/thm_9_0_default.h"
#include "asic_reg/thm/thm_9_0_offset.h"
#include "asic_reg/thm/thm_9_0_sh_mask.h"

#include "asic_reg/mp/mp_9_0_offset.h"
#include "asic_reg/mp/mp_9_0_sh_mask.h"

#include "asic_reg/gc/gc_9_2_1_offset.h"
#include "asic_reg/gc/gc_9_2_1_sh_mask.h"

#include "asic_reg/nbio/nbio_6_1_offset.h"
#include "asic_reg/nbio/nbio_6_1_sh_mask.h"

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _VEGA12_HWMGR_H_
#define _VEGA12_HWMGR_H_

#include "hwmgr.h"
#include "vega12/smu9_driver_if.h"
#include "ppatomfwctrl.h"

#define VEGA12_MAX_HARDWARE_POWERLEVELS 2

#define WaterMarksExist  1
#define WaterMarksLoaded 2

#define VG12_PSUEDO_NUM_GFXCLK_DPM_LEVELS   16
#define VG12_PSUEDO_NUM_SOCCLK_DPM_LEVELS   8
#define VG12_PSUEDO_NUM_DCEFCLK_DPM_LEVELS  8
#define VG12_PSUEDO_NUM_UCLK_DPM_LEVELS     4

enum
{
	GNLD_DPM_PREFETCHER = 0,
	GNLD_DPM_GFXCLK,
	GNLD_DPM_UCLK,
	GNLD_DPM_SOCCLK,
	GNLD_DPM_UVD,
	GNLD_DPM_VCE,
	GNLD_ULV,
	GNLD_DPM_MP0CLK,
	GNLD_DPM_LINK,
	GNLD_DPM_DCEFCLK,
	GNLD_DS_GFXCLK,
	GNLD_DS_SOCCLK,
	GNLD_DS_LCLK,
	GNLD_PPT,
	GNLD_TDC,
	GNLD_THERMAL,
	GNLD_GFX_PER_CU_CG,
	GNLD_RM,
	GNLD_DS_DCEFCLK,
	GNLD_ACDC,
	GNLD_VR0HOT,
	GNLD_VR1HOT,
	GNLD_FW_CTF,
	GNLD_LED_DISPLAY,
	GNLD_FAN_CONTROL,
	GNLD_DIDT,
	GNLD_GFXOFF,
	GNLD_CG,
	GNLD_ACG,

	GNLD_FEATURES_MAX
};


#define GNLD_DPM_MAX    (GNLD_DPM_DCEFCLK + 1)

#define SMC_DPM_FEATURES    0x30F

struct smu_features {
	bool supported;
	bool enabled;
	bool allowed;
	uint32_t smu_feature_id;
	uint64_t smu_feature_bitmap;
};

struct vega12_dpm_level {
	bool		enabled;
	uint32_t	value;
	uint32_t	param1;
};

#define VEGA12_MAX_DEEPSLEEP_DIVIDER_ID 5
#define MAX_REGULAR_DPM_NUMBER 16
#define MAX_PCIE_CONF 2
#define VEGA12_MINIMUM_ENGINE_CLOCK 2500

struct vega12_dpm_state {
	uint32_t  soft_min_level;
	uint32_t  soft_max_level;
	uint32_t  hard_min_level;
	uint32_t  hard_max_level;
};

struct vega12_single_dpm_table {
	uint32_t		count;
	struct vega12_dpm_state	dpm_state;
	struct vega12_dpm_level	dpm_levels[MAX_REGULAR_DPM_NUMBER];
};

struct vega12_odn_dpm_control {
	uint32_t	count;
	uint32_t	entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega12_pcie_table {
	uint16_t count;
	uint8_t  pcie_gen[MAX_PCIE_CONF];
	uint8_t  pcie_lane[MAX_PCIE_CONF];
	uint32_t lclk[MAX_PCIE_CONF];
};

struct vega12_dpm_table {
	struct vega12_single_dpm_table  soc_table;
	struct vega12_single_dpm_table  gfx_table;
	struct vega12_single_dpm_table  mem_table;
	struct vega12_single_dpm_table  eclk_table;
	struct vega12_single_dpm_table  vclk_table;
	struct vega12_single_dpm_table  dclk_table;
	struct vega12_single_dpm_table  dcef_table;
	struct vega12_single_dpm_table  pixel_table;
	struct vega12_single_dpm_table  display_table;
	struct vega12_single_dpm_table  phy_table;
	struct vega12_pcie_table        pcie_table;
};

#define VEGA12_MAX_LEAKAGE_COUNT  8
struct vega12_leakage_voltage {
	uint16_t  count;
	uint16_t  leakage_id[VEGA12_MAX_LEAKAGE_COUNT];
	uint16_t  actual_voltage[VEGA12_MAX_LEAKAGE_COUNT];
};

struct vega12_display_timing {
	uint32_t  min_clock_in_sr;
	uint32_t  num_existing_displays;
};

struct vega12_dpmlevel_enable_mask {
	uint32_t  uvd_dpm_enable_mask;
	uint32_t  vce_dpm_enable_mask;
	uint32_t  samu_dpm_enable_mask;
	uint32_t  sclk_dpm_enable_mask;
	uint32_t  mclk_dpm_enable_mask;
};

struct vega12_vbios_boot_state {
	bool        bsoc_vddc_lock;
	uint8_t     uc_cooling_id;
	uint16_t    vddc;
	uint16_t    vddci;
	uint16_t    mvddc;
	uint16_t    vdd_gfx;
	uint32_t    gfx_clock;
	uint32_t    mem_clock;
	uint32_t    soc_clock;
	uint32_t    dcef_clock;
	uint32_t    eclock;
	uint32_t    dclock;
	uint32_t    vclock;
};

#define DPMTABLE_OD_UPDATE_SCLK     0x00000001
#define DPMTABLE_OD_UPDATE_MCLK     0x00000002
#define DPMTABLE_UPDATE_SCLK        0x00000004
#define DPMTABLE_UPDATE_MCLK        0x00000008
#define DPMTABLE_OD_UPDATE_VDDC     0x00000010

struct vega12_smc_state_table {
	uint32_t        soc_boot_level;
	uint32_t        gfx_boot_level;
	uint32_t        dcef_boot_level;
	uint32_t        mem_boot_level;
	uint32_t        uvd_boot_level;
	uint32_t        vce_boot_level;
	uint32_t        gfx_max_level;
	uint32_t        mem_max_level;
	uint8_t         vr_hot_gpio;
	uint8_t         ac_dc_gpio;
	uint8_t         therm_out_gpio;
	uint8_t         therm_out_polarity;
	uint8_t         therm_out_mode;
	PPTable_t       pp_table;
	Watermarks_t    water_marks_table;
	AvfsDebugTable_t avfs_debug_table;
	AvfsFuseOverride_t avfs_fuse_override_table;
	SmuMetrics_t    smu_metrics;
	DriverSmuConfig_t driver_smu_config;
	DpmActivityMonitorCoeffInt_t dpm_activity_monitor_coeffint;
	OverDriveTable_t overdrive_table;
};

struct vega12_mclk_latency_entries {
	uint32_t  frequency;
	uint32_t  latency;
};

struct vega12_mclk_latency_table {
	uint32_t  count;
	struct vega12_mclk_latency_entries  entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega12_registry_data {
	uint64_t  disallowed_features;
	uint8_t   ac_dc_switch_gpio_support;
	uint8_t   acg_loop_support;
	uint8_t   clock_stretcher_support;
	uint8_t   db_ramping_support;
	uint8_t   didt_mode;
	uint8_t   didt_support;
	uint8_t   edc_didt_support;
	uint8_t   force_dpm_high;
	uint8_t   fuzzy_fan_control_support;
	uint8_t   mclk_dpm_key_disabled;
	uint8_t   od_state_in_dc_support;
	uint8_t   pcie_lane_override;
	uint8_t   pcie_speed_override;
	uint32_t  pcie_clock_override;
	uint8_t   pcie_dpm_key_disabled;
	uint8_t   dcefclk_dpm_key_disabled;
	uint8_t   prefetcher_dpm_key_disabled;
	uint8_t   quick_transition_support;
	uint8_t   regulator_hot_gpio_support;
	uint8_t   master_deep_sleep_support;
	uint8_t   gfx_clk_deep_sleep_support;
	uint8_t   sclk_deep_sleep_support;
	uint8_t   lclk_deep_sleep_support;
	uint8_t   dce_fclk_deep_sleep_support;
	uint8_t   sclk_dpm_key_disabled;
	uint8_t   sclk_throttle_low_notification;
	uint8_t   skip_baco_hardware;
	uint8_t   socclk_dpm_key_disabled;
	uint8_t   sq_ramping_support;
	uint8_t   tcp_ramping_support;
	uint8_t   td_ramping_support;
	uint8_t   dbr_ramping_support;
	uint8_t   gc_didt_support;
	uint8_t   psm_didt_support;
	uint8_t   thermal_support;
	uint8_t   fw_ctf_enabled;
	uint8_t   led_dpm_enabled;
	uint8_t   fan_control_support;
	uint8_t   ulv_support;
	uint8_t   odn_feature_enable;
	uint8_t   disable_water_mark;
	uint8_t   disable_workload_policy;
	uint32_t  force_workload_policy_mask;
	uint8_t   disable_3d_fs_detection;
	uint8_t   disable_pp_tuning;
	uint8_t   disable_xlpp_tuning;
	uint32_t  perf_ui_tuning_profile_turbo;
	uint32_t  perf_ui_tuning_profile_powerSave;
	uint32_t  perf_ui_tuning_profile_xl;
	uint16_t  zrpm_stop_temp;
	uint16_t  zrpm_start_temp;
	uint32_t  stable_pstate_sclk_dpm_percentage;
	uint8_t   fps_support;
	uint8_t   vr0hot;
	uint8_t   vr1hot;
	uint8_t   disable_auto_wattman;
	uint32_t  auto_wattman_debug;
	uint32_t  auto_wattman_sample_period;
	uint8_t   auto_wattman_threshold;
	uint8_t   log_avfs_param;
	uint8_t   enable_enginess;
	uint8_t   custom_fan_support;
	uint8_t   disable_pcc_limit_control;
};

struct vega12_odn_clock_voltage_dependency_table {
	uint32_t count;
	struct phm_ppt_v1_clock_voltage_dependency_record
		entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega12_odn_dpm_table {
	struct vega12_odn_dpm_control		control_gfxclk_state;
	struct vega12_odn_dpm_control		control_memclk_state;
	struct phm_odn_clock_levels		odn_core_clock_dpm_levels;
	struct phm_odn_clock_levels		odn_memory_clock_dpm_levels;
	struct vega12_odn_clock_voltage_dependency_table		vdd_dependency_on_sclk;
	struct vega12_odn_clock_voltage_dependency_table		vdd_dependency_on_mclk;
	struct vega12_odn_clock_voltage_dependency_table		vdd_dependency_on_socclk;
	uint32_t				odn_mclk_min_limit;
};

struct vega12_odn_fan_table {
	uint32_t	target_fan_speed;
	uint32_t	target_temperature;
	uint32_t	min_performance_clock;
	uint32_t	min_fan_limit;
	bool		force_fan_pwm;
};

struct vega12_clock_range {
	uint32_t	ACMax;
	uint32_t	ACMin;
	uint32_t	DCMax;
};

struct vega12_hwmgr {
	struct vega12_dpm_table          dpm_table;
	struct vega12_dpm_table          golden_dpm_table;
	struct vega12_registry_data      registry_data;
	struct vega12_vbios_boot_state   vbios_boot_state;
	struct vega12_mclk_latency_table mclk_latency_table;

	struct vega12_leakage_voltage    vddc_leakage;

	uint32_t                           vddc_control;
	struct pp_atomfwctrl_voltage_table vddc_voltage_table;
	uint32_t                           mvdd_control;
	struct pp_atomfwctrl_voltage_table mvdd_voltage_table;
	uint32_t                           vddci_control;
	struct pp_atomfwctrl_voltage_table vddci_voltage_table;

	uint32_t                           active_auto_throttle_sources;
	uint32_t                           water_marks_bitmap;

	struct vega12_odn_dpm_table       odn_dpm_table;
	struct vega12_odn_fan_table       odn_fan_table;

	/* ---- General data ---- */
	uint8_t                           need_update_dpm_table;

	bool                           cac_enabled;
	bool                           battery_state;
	bool                           is_tlu_enabled;
	bool                           avfs_exist;

	uint32_t                       low_sclk_interrupt_threshold;

	uint32_t                       total_active_cus;

	struct vega12_display_timing display_timing;

	/* ---- Vega12 Dyn Register Settings ---- */

	uint32_t                       debug_settings;
	uint32_t                       lowest_uclk_reserved_for_ulv;
	uint32_t                       gfxclk_average_alpha;
	uint32_t                       socclk_average_alpha;
	uint32_t                       uclk_average_alpha;
	uint32_t                       gfx_activity_average_alpha;
	uint32_t                       display_voltage_mode;
	uint32_t                       dcef_clk_quad_eqn_a;
	uint32_t                       dcef_clk_quad_eqn_b;
	uint32_t                       dcef_clk_quad_eqn_c;
	uint32_t                       disp_clk_quad_eqn_a;
	uint32_t                       disp_clk_quad_eqn_b;
	uint32_t                       disp_clk_quad_eqn_c;
	uint32_t                       pixel_clk_quad_eqn_a;
	uint32_t                       pixel_clk_quad_eqn_b;
	uint32_t                       pixel_clk_quad_eqn_c;
	uint32_t                       phy_clk_quad_eqn_a;
	uint32_t                       phy_clk_quad_eqn_b;
	uint32_t                       phy_clk_quad_eqn_c;

	/* ---- Thermal Temperature Setting ---- */
	struct vega12_dpmlevel_enable_mask     dpm_level_enable_mask;

	/* ---- Power Gating States ---- */
	bool                           uvd_power_gated;
	bool                           vce_power_gated;
	bool                           samu_power_gated;
	bool                           need_long_memory_training;

	/* Internal settings to apply the application power optimization parameters */
	bool                           apply_optimized_settings;
	uint32_t                       disable_dpm_mask;

	/* ---- Overdrive next setting ---- */
	uint32_t                       apply_overdrive_next_settings_mask;

	/* ---- Workload Mask ---- */
	uint32_t                       workload_mask;

	/* ---- SMU9 ---- */
	uint32_t                       smu_version;
	struct smu_features            smu_features[GNLD_FEATURES_MAX];
	struct vega12_smc_state_table  smc_state_table;

	struct vega12_clock_range      clk_range[PPCLK_COUNT];

	/* ---- Gfxoff ---- */
	bool                           gfxoff_controlled_by_driver;

	unsigned long                  metrics_time;
	SmuMetrics_t                   metrics_table;
	struct gpu_metrics_v1_0        gpu_metrics_table;
};

#define VEGA12_DPM2_NEAR_TDP_DEC                      10
#define VEGA12_DPM2_ABOVE_SAFE_INC                    5
#define VEGA12_DPM2_BELOW_SAFE_INC                    20

#define VEGA12_DPM2_LTA_WINDOW_SIZE                   7

#define VEGA12_DPM2_LTS_TRUNCATE                      0

#define VEGA12_DPM2_TDP_SAFE_LIMIT_PERCENT            80

#define VEGA12_DPM2_MAXPS_PERCENT_M                   90
#define VEGA12_DPM2_MAXPS_PERCENT_H                   90

#define VEGA12_DPM2_PWREFFICIENCYRATIO_MARGIN         50

#define VEGA12_DPM2_SQ_RAMP_MAX_POWER                 0x3FFF
#define VEGA12_DPM2_SQ_RAMP_MIN_POWER                 0x12
#define VEGA12_DPM2_SQ_RAMP_MAX_POWER_DELTA           0x15
#define VEGA12_DPM2_SQ_RAMP_SHORT_TERM_INTERVAL_SIZE  0x1E
#define VEGA12_DPM2_SQ_RAMP_LONG_TERM_INTERVAL_RATIO  0xF

#define VEGA12_VOLTAGE_CONTROL_NONE                   0x0
#define VEGA12_VOLTAGE_CONTROL_BY_GPIO                0x1
#define VEGA12_VOLTAGE_CONTROL_BY_SVID2               0x2
#define VEGA12_VOLTAGE_CONTROL_MERGED                 0x3
/* To convert to Q8.8 format for firmware */
#define VEGA12_Q88_FORMAT_CONVERSION_UNIT             256

#define VEGA12_UNUSED_GPIO_PIN       0x7F

#define VEGA12_THERM_OUT_MODE_DISABLE       0x0
#define VEGA12_THERM_OUT_MODE_THERM_ONLY    0x1
#define VEGA12_THERM_OUT_MODE_THERM_VRHOT   0x2

#define PPVEGA12_VEGA12DISPLAYVOLTAGEMODE_DFLT   0xffffffff
#define PPREGKEY_VEGA12QUADRATICEQUATION_DFLT    0xffffffff

#define PPVEGA12_VEGA12GFXCLKAVERAGEALPHA_DFLT       25 /* 10% * 255 = 25 */
#define PPVEGA12_VEGA12SOCCLKAVERAGEALPHA_DFLT       25 /* 10% * 255 = 25 */
#define PPVEGA12_VEGA12UCLKCLKAVERAGEALPHA_DFLT      25 /* 10% * 255 = 25 */
#define PPVEGA12_VEGA12GFXACTIVITYAVERAGEALPHA_DFLT  25 /* 10% * 255 = 25 */
#define PPVEGA12_VEGA12LOWESTUCLKRESERVEDFORULV_DFLT   0xffffffff
#define PPVEGA12_VEGA12DISPLAYVOLTAGEMODE_DFLT         0xffffffff
#define PPREGKEY_VEGA12QUADRATICEQUATION_DFLT          0xffffffff

#define VEGA12_UMD_PSTATE_GFXCLK_LEVEL         0x3
#define VEGA12_UMD_PSTATE_SOCCLK_LEVEL         0x3
#define VEGA12_UMD_PSTATE_MCLK_LEVEL           0x2
#define VEGA12_UMD_PSTATE_UVDCLK_LEVEL         0x3
#define VEGA12_UMD_PSTATE_VCEMCLK_LEVEL        0x3

int vega12_enable_disable_vce_dpm(struct pp_hwmgr *hwmgr, bool enable);

#endif /* _VEGA12_HWMGR_H_ */
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __VEGA12_BACO_H__
#define __VEGA12_BACO_H__
#include "smu9_baco.h"

extern int vega12_baco_set_state(struct pp_hwmgr *hwmgr, enum BACO_STATE state);

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA10_THERMAL_H
#define VEGA10_THERMAL_H

#include "hwmgr.h"

struct vega10_temperature {
	uint16_t edge_temp;
	uint16_t hot_spot_temp;
	uint16_t hbm_temp;
	uint16_t vr_soc_temp;
	uint16_t vr_mem_temp;
	uint16_t liquid1_temp;
	uint16_t liquid2_temp;
	uint16_t plx_temp;
};

#define VEGA10_THERMAL_HIGH_ALERT_MASK         0x1
#define VEGA10_THERMAL_LOW_ALERT_MASK          0x2

#define VEGA10_THERMAL_MINIMUM_TEMP_READING    -256
#define VEGA10_THERMAL_MAXIMUM_TEMP_READING    255

#define VEGA10_THERMAL_MINIMUM_ALERT_TEMP      0
#define VEGA10_THERMAL_MAXIMUM_ALERT_TEMP      255

#define FDO_PWM_MODE_STATIC  1
#define FDO_PWM_MODE_STATIC_RPM 5


extern int vega10_thermal_get_temperature(struct pp_hwmgr *hwmgr);
extern int vega10_thermal_stop_thermal_controller(struct pp_hwmgr *hwmgr);
extern int vega10_fan_ctrl_get_fan_speed_info(struct pp_hwmgr *hwmgr,
		struct phm_fan_speed_info *fan_speed_info);
extern int vega10_fan_ctrl_get_fan_speed_pwm(struct pp_hwmgr *hwmgr,
		uint32_t *speed);
extern int vega10_fan_ctrl_set_default_mode(struct pp_hwmgr *hwmgr);
extern int vega10_fan_ctrl_set_static_mode(struct pp_hwmgr *hwmgr,
		uint32_t mode);
extern int vega10_fan_ctrl_set_fan_speed_pwm(struct pp_hwmgr *hwmgr,
		uint32_t speed);
extern int vega10_fan_ctrl_reset_fan_speed_to_default(struct pp_hwmgr *hwmgr);
extern int vega10_thermal_ctrl_uninitialize_thermal_controller(
		struct pp_hwmgr *hwmgr);
extern int vega10_fan_ctrl_set_fan_speed_rpm(struct pp_hwmgr *hwmgr,
		uint32_t speed);
extern int vega10_fan_ctrl_get_fan_speed_rpm(struct pp_hwmgr *hwmgr,
		uint32_t *speed);
extern int vega10_fan_ctrl_stop_smc_fan_control(struct pp_hwmgr *hwmgr);
extern int vega10_thermal_disable_alert(struct pp_hwmgr *hwmgr);
extern int vega10_fan_ctrl_start_smc_fan_control(struct pp_hwmgr *hwmgr);
extern int vega10_start_thermal_controller(struct pp_hwmgr *hwmgr,
				struct PP_TemperatureRange *range);
extern int vega10_enable_mgpu_fan_boost(struct pp_hwmgr *hwmgr);


#endif

/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA10_PROCESSPPTABLES_H
#define VEGA10_PROCESSPPTABLES_H

#include "hwmgr.h"

enum Vega10_I2CLineID {
	Vega10_I2CLineID_DDC1 = 0x90,
	Vega10_I2CLineID_DDC2 = 0x91,
	Vega10_I2CLineID_DDC3 = 0x92,
	Vega10_I2CLineID_DDC4 = 0x93,
	Vega10_I2CLineID_DDC5 = 0x94,
	Vega10_I2CLineID_DDC6 = 0x95,
	Vega10_I2CLineID_SCLSDA = 0x96,
	Vega10_I2CLineID_DDCVGA = 0x97
};

#define Vega10_I2C_DDC1DATA          0
#define Vega10_I2C_DDC1CLK           1
#define Vega10_I2C_DDC2DATA          2
#define Vega10_I2C_DDC2CLK           3
#define Vega10_I2C_DDC3DATA          4
#define Vega10_I2C_DDC3CLK           5
#define Vega10_I2C_SDA               40
#define Vega10_I2C_SCL               41
#define Vega10_I2C_DDC4DATA          65
#define Vega10_I2C_DDC4CLK           66
#define Vega10_I2C_DDC5DATA          0x48
#define Vega10_I2C_DDC5CLK           0x49
#define Vega10_I2C_DDC6DATA          0x4a
#define Vega10_I2C_DDC6CLK           0x4b
#define Vega10_I2C_DDCVGADATA        0x4c
#define Vega10_I2C_DDCVGACLK         0x4d

extern const struct pp_table_func vega10_pptable_funcs;
extern int vega10_get_number_of_powerplay_table_entries(struct pp_hwmgr *hwmgr);
extern int vega10_get_powerplay_table_entry(struct pp_hwmgr *hwmgr, uint32_t entry_index,
		struct pp_power_state *power_state, int (*call_back_func)(struct pp_hwmgr *, void *,
				struct pp_power_state *, void *, uint32_t));
extern int vega10_baco_set_cap(struct pp_hwmgr *hwmgr);
#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _VEGA10_PPTABLE_H_
#define _VEGA10_PPTABLE_H_

#pragma pack(push, 1)

#define ATOM_VEGA10_PP_FANPARAMETERS_TACHOMETER_PULSES_PER_REVOLUTION_MASK 0x0f
#define ATOM_VEGA10_PP_FANPARAMETERS_NOFAN                                 0x80

#define ATOM_VEGA10_PP_THERMALCONTROLLER_NONE      0
#define ATOM_VEGA10_PP_THERMALCONTROLLER_LM96163   17
#define ATOM_VEGA10_PP_THERMALCONTROLLER_VEGA10    24

#define ATOM_VEGA10_PP_THERMALCONTROLLER_ADT7473_WITH_INTERNAL   0x89
#define ATOM_VEGA10_PP_THERMALCONTROLLER_EMC2103_WITH_INTERNAL   0x8D

#define ATOM_VEGA10_PP_PLATFORM_CAP_POWERPLAY                   0x1
#define ATOM_VEGA10_PP_PLATFORM_CAP_SBIOSPOWERSOURCE            0x2
#define ATOM_VEGA10_PP_PLATFORM_CAP_HARDWAREDC                  0x4
#define ATOM_VEGA10_PP_PLATFORM_CAP_BACO                        0x8
#define ATOM_VEGA10_PP_PLATFORM_COMBINE_PCC_WITH_THERMAL_SIGNAL 0x10


/* ATOM_PPLIB_NONCLOCK_INFO::usClassification */
#define ATOM_PPLIB_CLASSIFICATION_UI_MASK               0x0007
#define ATOM_PPLIB_CLASSIFICATION_UI_SHIFT              0
#define ATOM_PPLIB_CLASSIFICATION_UI_NONE               0
#define ATOM_PPLIB_CLASSIFICATION_UI_BATTERY            1
#define ATOM_PPLIB_CLASSIFICATION_UI_BALANCED           3
#define ATOM_PPLIB_CLASSIFICATION_UI_PERFORMANCE        5
/* 2, 4, 6, 7 are reserved */

#define ATOM_PPLIB_CLASSIFICATION_BOOT                  0x0008
#define ATOM_PPLIB_CLASSIFICATION_THERMAL               0x0010
#define ATOM_PPLIB_CLASSIFICATION_LIMITEDPOWERSOURCE    0x0020
#define ATOM_PPLIB_CLASSIFICATION_REST                  0x0040
#define ATOM_PPLIB_CLASSIFICATION_FORCED                0x0080
#define ATOM_PPLIB_CLASSIFICATION_ACPI                  0x1000

/* ATOM_PPLIB_NONCLOCK_INFO::usClassification2 */
#define ATOM_PPLIB_CLASSIFICATION2_LIMITEDPOWERSOURCE_2 0x0001

#define ATOM_Vega10_DISALLOW_ON_DC                   0x00004000
#define ATOM_Vega10_ENABLE_VARIBRIGHT                0x00008000

#define ATOM_Vega10_TABLE_REVISION_VEGA10         8

#define ATOM_Vega10_VoltageMode_AVFS_Interpolate     0
#define ATOM_Vega10_VoltageMode_AVFS_WorstCase       1
#define ATOM_Vega10_VoltageMode_Static               2

typedef struct _ATOM_Vega10_POWERPLAYTABLE {
	struct atom_common_table_header sHeader;
	UCHAR  ucTableRevision;
	USHORT usTableSize;                        /* the size of header structure */
	ULONG  ulGoldenPPID;                       /* PPGen use only */
	ULONG  ulGoldenRevision;                   /* PPGen use only */
	USHORT usFormatID;                         /* PPGen use only */
	ULONG  ulPlatformCaps;                     /* See ATOM_Vega10_CAPS_* */
	ULONG  ulMaxODEngineClock;                 /* For Overdrive. */
	ULONG  ulMaxODMemoryClock;                 /* For Overdrive. */
	USHORT usPowerControlLimit;
	USHORT usUlvVoltageOffset;                 /* in mv units */
	USHORT usUlvSmnclkDid;
	USHORT usUlvMp1clkDid;
	USHORT usUlvGfxclkBypass;
	USHORT usGfxclkSlewRate;
	UCHAR  ucGfxVoltageMode;
	UCHAR  ucSocVoltageMode;
	UCHAR  ucUclkVoltageMode;
	UCHAR  ucUvdVoltageMode;
	UCHAR  ucVceVoltageMode;
	UCHAR  ucMp0VoltageMode;
	UCHAR  ucDcefVoltageMode;
	USHORT usStateArrayOffset;                 /* points to ATOM_Vega10_State_Array */
	USHORT usFanTableOffset;                   /* points to ATOM_Vega10_Fan_Table */
	USHORT usThermalControllerOffset;          /* points to ATOM_Vega10_Thermal_Controller */
	USHORT usSocclkDependencyTableOffset;      /* points to ATOM_Vega10_SOCCLK_Dependency_Table */
	USHORT usMclkDependencyTableOffset;        /* points to ATOM_Vega10_MCLK_Dependency_Table */
	USHORT usGfxclkDependencyTableOffset;      /* points to ATOM_Vega10_GFXCLK_Dependency_Table */
	USHORT usDcefclkDependencyTableOffset;     /* points to ATOM_Vega10_DCEFCLK_Dependency_Table */
	USHORT usVddcLookupTableOffset;            /* points to ATOM_Vega10_Voltage_Lookup_Table */
	USHORT usVddmemLookupTableOffset;          /* points to ATOM_Vega10_Voltage_Lookup_Table */
	USHORT usMMDependencyTableOffset;          /* points to ATOM_Vega10_MM_Dependency_Table */
	USHORT usVCEStateTableOffset;              /* points to ATOM_Vega10_VCE_State_Table */
	USHORT usReserve;                          /* No PPM Support for Vega10 */
	USHORT usPowerTuneTableOffset;             /* points to ATOM_Vega10_PowerTune_Table */
	USHORT usHardLimitTableOffset;             /* points to ATOM_Vega10_Hard_Limit_Table */
	USHORT usVddciLookupTableOffset;           /* points to ATOM_Vega10_Voltage_Lookup_Table */
	USHORT usPCIETableOffset;                  /* points to ATOM_Vega10_PCIE_Table */
	USHORT usPixclkDependencyTableOffset;      /* points to ATOM_Vega10_PIXCLK_Dependency_Table */
	USHORT usDispClkDependencyTableOffset;     /* points to ATOM_Vega10_DISPCLK_Dependency_Table */
	USHORT usPhyClkDependencyTableOffset;      /* points to ATOM_Vega10_PHYCLK_Dependency_Table */
} ATOM_Vega10_POWERPLAYTABLE;

typedef struct _ATOM_Vega10_State {
	UCHAR  ucSocClockIndexHigh;
	UCHAR  ucSocClockIndexLow;
	UCHAR  ucGfxClockIndexHigh;
	UCHAR  ucGfxClockIndexLow;
	UCHAR  ucMemClockIndexHigh;
	UCHAR  ucMemClockIndexLow;
	USHORT usClassification;
	ULONG  ulCapsAndSettings;
	USHORT usClassification2;
} ATOM_Vega10_State;

typedef struct _ATOM_Vega10_State_Array {
	UCHAR ucRevId;
	UCHAR ucNumEntries;                                         /* Number of entries. */
	ATOM_Vega10_State states[1];                             /* Dynamically allocate entries. */
} ATOM_Vega10_State_Array;

typedef struct _ATOM_Vega10_CLK_Dependency_Record {
	ULONG  ulClk;                                               /* Frequency of Clock */
	UCHAR  ucVddInd;                                            /* Base voltage */
} ATOM_Vega10_CLK_Dependency_Record;

typedef struct _ATOM_Vega10_GFXCLK_Dependency_Record {
	ULONG  ulClk;                                               /* Clock Frequency */
	UCHAR  ucVddInd;                                            /* SOC_VDD index */
	USHORT usCKSVOffsetandDisable;                              /* Bits 0~30: Voltage offset for CKS, Bit 31: Disable/enable for the GFXCLK level. */
	USHORT usAVFSOffset;                                        /* AVFS Voltage offset */
} ATOM_Vega10_GFXCLK_Dependency_Record;

typedef struct _ATOM_Vega10_GFXCLK_Dependency_Record_V2 {
	ULONG  ulClk;
	UCHAR  ucVddInd;
	USHORT usCKSVOffsetandDisable;
	USHORT usAVFSOffset;
	UCHAR  ucACGEnable;
	UCHAR  ucReserved[3];
} ATOM_Vega10_GFXCLK_Dependency_Record_V2;

typedef struct _ATOM_Vega10_MCLK_Dependency_Record {
	ULONG  ulMemClk;                                            /* Clock Frequency */
	UCHAR  ucVddInd;                                            /* SOC_VDD index */
	UCHAR  ucVddMemInd;                                         /* MEM_VDD - only non zero for MCLK record */
	UCHAR  ucVddciInd;                                          /* VDDCI   = only non zero for MCLK record */
} ATOM_Vega10_MCLK_Dependency_Record;

typedef struct _ATOM_Vega10_GFXCLK_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;					/* Number of entries. */
	ATOM_Vega10_GFXCLK_Dependency_Record entries[];		/* Dynamically allocate entries. */
} ATOM_Vega10_GFXCLK_Dependency_Table;

typedef struct _ATOM_Vega10_MCLK_Dependency_Table {
    UCHAR ucRevId;
    UCHAR ucNumEntries;                                         /* Number of entries. */
    ATOM_Vega10_MCLK_Dependency_Record entries[1];            /* Dynamically allocate entries. */
} ATOM_Vega10_MCLK_Dependency_Table;

typedef struct _ATOM_Vega10_SOCCLK_Dependency_Table {
    UCHAR ucRevId;
    UCHAR ucNumEntries;                                         /* Number of entries. */
    ATOM_Vega10_CLK_Dependency_Record entries[1];            /* Dynamically allocate entries. */
} ATOM_Vega10_SOCCLK_Dependency_Table;

typedef struct _ATOM_Vega10_DCEFCLK_Dependency_Table {
    UCHAR ucRevId;
    UCHAR ucNumEntries;                                         /* Number of entries. */
    ATOM_Vega10_CLK_Dependency_Record entries[1];            /* Dynamically allocate entries. */
} ATOM_Vega10_DCEFCLK_Dependency_Table;

typedef struct _ATOM_Vega10_PIXCLK_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;                                         /* Number of entries. */
	ATOM_Vega10_CLK_Dependency_Record entries[1];            /* Dynamically allocate entries. */
} ATOM_Vega10_PIXCLK_Dependency_Table;

typedef struct _ATOM_Vega10_DISPCLK_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;                                         /* Number of entries.*/
	ATOM_Vega10_CLK_Dependency_Record entries[1];            /* Dynamically allocate entries. */
} ATOM_Vega10_DISPCLK_Dependency_Table;

typedef struct _ATOM_Vega10_PHYCLK_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;                                         /* Number of entries. */
	ATOM_Vega10_CLK_Dependency_Record entries[1];            /* Dynamically allocate entries. */
} ATOM_Vega10_PHYCLK_Dependency_Table;

typedef struct _ATOM_Vega10_MM_Dependency_Record {
    UCHAR  ucVddcInd;                                           /* SOC_VDD voltage */
    ULONG  ulDClk;                                              /* UVD D-clock */
    ULONG  ulVClk;                                              /* UVD V-clock */
    ULONG  ulEClk;                                              /* VCE clock */
    ULONG  ulPSPClk;                                            /* PSP clock */
} ATOM_Vega10_MM_Dependency_Record;

typedef struct _ATOM_Vega10_MM_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;                                         /* Number of entries */
	ATOM_Vega10_MM_Dependency_Record entries[1];             /* Dynamically allocate entries */
} ATOM_Vega10_MM_Dependency_Table;

typedef struct _ATOM_Vega10_PCIE_Record {
	ULONG ulLCLK;                                               /* LClock */
	UCHAR ucPCIEGenSpeed;                                       /* PCIE Speed */
	UCHAR ucPCIELaneWidth;                                      /* PCIE Lane Width */
} ATOM_Vega10_PCIE_Record;

typedef struct _ATOM_Vega10_PCIE_Table {
	UCHAR  ucRevId;
	UCHAR  ucNumEntries;                                        /* Number of entries */
	ATOM_Vega10_PCIE_Record entries[1];                      /* Dynamically allocate entries. */
} ATOM_Vega10_PCIE_Table;

typedef struct _ATOM_Vega10_Voltage_Lookup_Record {
	USHORT usVdd;                                               /* Base voltage */
} ATOM_Vega10_Voltage_Lookup_Record;

typedef struct _ATOM_Vega10_Voltage_Lookup_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;                                          /* Number of entries */
	ATOM_Vega10_Voltage_Lookup_Record entries[1];             /* Dynamically allocate entries */
} ATOM_Vega10_Voltage_Lookup_Table;

typedef struct _ATOM_Vega10_Fan_Table {
	UCHAR   ucRevId;                         /* Change this if the table format changes or version changes so that the other fields are not the same. */
	USHORT  usFanOutputSensitivity;          /* Sensitivity of fan reaction to temepature changes. */
	USHORT  usFanRPMMax;                     /* The default value in RPM. */
	USHORT  usThrottlingRPM;
	USHORT  usFanAcousticLimit;              /* Minimum Fan Controller Frequency Acoustic Limit. */
	USHORT  usTargetTemperature;             /* The default ideal temperature in Celcius. */
	USHORT  usMinimumPWMLimit;               /* The minimum PWM that the advanced fan controller can set. */
	USHORT  usTargetGfxClk;                   /* The ideal Fan Controller GFXCLK Frequency Acoustic Limit. */
	USHORT  usFanGainEdge;
	USHORT  usFanGainHotspot;
	USHORT  usFanGainLiquid;
	USHORT  usFanGainVrVddc;
	USHORT  usFanGainVrMvdd;
	USHORT  usFanGainPlx;
	USHORT  usFanGainHbm;
	UCHAR   ucEnableZeroRPM;
	USHORT  usFanStopTemperature;
	USHORT  usFanStartTemperature;
} ATOM_Vega10_Fan_Table;

typedef struct _ATOM_Vega10_Fan_Table_V2 {
	UCHAR   ucRevId;
	USHORT  usFanOutputSensitivity;
	USHORT  usFanAcousticLimitRpm;
	USHORT  usThrottlingRPM;
	USHORT  usTargetTemperature;
	USHORT  usMinimumPWMLimit;
	USHORT  usTargetGfxClk;
	USHORT  usFanGainEdge;
	USHORT  usFanGainHotspot;
	USHORT  usFanGainLiquid;
	USHORT  usFanGainVrVddc;
	USHORT  usFanGainVrMvdd;
	USHORT  usFanGainPlx;
	USHORT  usFanGainHbm;
	UCHAR   ucEnableZeroRPM;
	USHORT  usFanStopTemperature;
	USHORT  usFanStartTemperature;
	UCHAR   ucFanParameters;
	UCHAR   ucFanMinRPM;
	UCHAR   ucFanMaxRPM;
} ATOM_Vega10_Fan_Table_V2;

typedef struct _ATOM_Vega10_Fan_Table_V3 {
	UCHAR   ucRevId;
	USHORT  usFanOutputSensitivity;
	USHORT  usFanAcousticLimitRpm;
	USHORT  usThrottlingRPM;
	USHORT  usTargetTemperature;
	USHORT  usMinimumPWMLimit;
	USHORT  usTargetGfxClk;
	USHORT  usFanGainEdge;
	USHORT  usFanGainHotspot;
	USHORT  usFanGainLiquid;
	USHORT  usFanGainVrVddc;
	USHORT  usFanGainVrMvdd;
	USHORT  usFanGainPlx;
	USHORT  usFanGainHbm;
	UCHAR   ucEnableZeroRPM;
	USHORT  usFanStopTemperature;
	USHORT  usFanStartTemperature;
	UCHAR   ucFanParameters;
	UCHAR   ucFanMinRPM;
	UCHAR   ucFanMaxRPM;
	USHORT  usMGpuThrottlingRPM;
} ATOM_Vega10_Fan_Table_V3;

typedef struct _ATOM_Vega10_Thermal_Controller {
	UCHAR ucRevId;
	UCHAR ucType;           /* one of ATOM_VEGA10_PP_THERMALCONTROLLER_*/
	UCHAR ucI2cLine;        /* as interpreted by DAL I2C */
	UCHAR ucI2cAddress;
	UCHAR ucFanParameters;  /* Fan Control Parameters. */
	UCHAR ucFanMinRPM;      /* Fan Minimum RPM (hundreds) -- for display purposes only.*/
	UCHAR ucFanMaxRPM;      /* Fan Maximum RPM (hundreds) -- for display purposes only.*/
    UCHAR ucFlags;          /* to be defined */
} ATOM_Vega10_Thermal_Controller;

typedef struct _ATOM_Vega10_VCE_State_Record
{
    UCHAR  ucVCEClockIndex;         /*index into usVCEDependencyTableOffset of 'ATOM_Vega10_MM_Dependency_Table' type */
    UCHAR  ucFlag;                  /* 2 bits indicates memory p-states */
    UCHAR  ucSCLKIndex;             /* index into ATOM_Vega10_SCLK_Dependency_Table */
    UCHAR  ucMCLKIndex;             /* index into ATOM_Vega10_MCLK_Dependency_Table */
} ATOM_Vega10_VCE_State_Record;

typedef struct _ATOM_Vega10_VCE_State_Table
{
    UCHAR ucRevId;
    UCHAR ucNumEntries;
    ATOM_Vega10_VCE_State_Record entries[1];
} ATOM_Vega10_VCE_State_Table;

typedef struct _ATOM_Vega10_PowerTune_Table {
	UCHAR  ucRevId;
	USHORT usSocketPowerLimit;
	USHORT usBatteryPowerLimit;
	USHORT usSmallPowerLimit;
	USHORT usTdcLimit;
	USHORT usEdcLimit;
	USHORT usSoftwareShutdownTemp;
	USHORT usTemperatureLimitHotSpot;
	USHORT usTemperatureLimitLiquid1;
	USHORT usTemperatureLimitLiquid2;
	USHORT usTemperatureLimitHBM;
	USHORT usTemperatureLimitVrSoc;
	USHORT usTemperatureLimitVrMem;
	USHORT usTemperatureLimitPlx;
	USHORT usLoadLineResistance;
	UCHAR  ucLiquid1_I2C_address;
	UCHAR  ucLiquid2_I2C_address;
	UCHAR  ucVr_I2C_address;
	UCHAR  ucPlx_I2C_address;
	UCHAR  ucLiquid_I2C_LineSCL;
	UCHAR  ucLiquid_I2C_LineSDA;
	UCHAR  ucVr_I2C_LineSCL;
	UCHAR  ucVr_I2C_LineSDA;
	UCHAR  ucPlx_I2C_LineSCL;
	UCHAR  ucPlx_I2C_LineSDA;
	USHORT usTemperatureLimitTedge;
} ATOM_Vega10_PowerTune_Table;

typedef struct _ATOM_Vega10_PowerTune_Table_V2
{
	UCHAR  ucRevId;
	USHORT usSocketPowerLimit;
	USHORT usBatteryPowerLimit;
	USHORT usSmallPowerLimit;
	USHORT usTdcLimit;
	USHORT usEdcLimit;
	USHORT usSoftwareShutdownTemp;
	USHORT usTemperatureLimitHotSpot;
	USHORT usTemperatureLimitLiquid1;
	USHORT usTemperatureLimitLiquid2;
	USHORT usTemperatureLimitHBM;
	USHORT usTemperatureLimitVrSoc;
	USHORT usTemperatureLimitVrMem;
	USHORT usTemperatureLimitPlx;
	USHORT usLoadLineResistance;
	UCHAR ucLiquid1_I2C_address;
	UCHAR ucLiquid2_I2C_address;
	UCHAR ucLiquid_I2C_Line;
	UCHAR ucVr_I2C_address;
	UCHAR ucVr_I2C_Line;
	UCHAR ucPlx_I2C_address;
	UCHAR ucPlx_I2C_Line;
	USHORT usTemperatureLimitTedge;
} ATOM_Vega10_PowerTune_Table_V2;

typedef struct _ATOM_Vega10_PowerTune_Table_V3
{
	UCHAR  ucRevId;
	USHORT usSocketPowerLimit;
	USHORT usBatteryPowerLimit;
	USHORT usSmallPowerLimit;
	USHORT usTdcLimit;
	USHORT usEdcLimit;
	USHORT usSoftwareShutdownTemp;
	USHORT usTemperatureLimitHotSpot;
	USHORT usTemperatureLimitLiquid1;
	USHORT usTemperatureLimitLiquid2;
	USHORT usTemperatureLimitHBM;
	USHORT usTemperatureLimitVrSoc;
	USHORT usTemperatureLimitVrMem;
	USHORT usTemperatureLimitPlx;
	USHORT usLoadLineResistance;
	UCHAR  ucLiquid1_I2C_address;
	UCHAR  ucLiquid2_I2C_address;
	UCHAR  ucLiquid_I2C_Line;
	UCHAR  ucVr_I2C_address;
	UCHAR  ucVr_I2C_Line;
	UCHAR  ucPlx_I2C_address;
	UCHAR  ucPlx_I2C_Line;
	USHORT usTemperatureLimitTedge;
	USHORT usBoostStartTemperature;
	USHORT usBoostStopTemperature;
	ULONG  ulBoostClock;
	ULONG  Reserved[2];
} ATOM_Vega10_PowerTune_Table_V3;

typedef struct _ATOM_Vega10_Hard_Limit_Record {
    ULONG  ulSOCCLKLimit;
    ULONG  ulGFXCLKLimit;
    ULONG  ulMCLKLimit;
    USHORT usVddcLimit;
    USHORT usVddciLimit;
    USHORT usVddMemLimit;
} ATOM_Vega10_Hard_Limit_Record;

typedef struct _ATOM_Vega10_Hard_Limit_Table
{
    UCHAR ucRevId;
    UCHAR ucNumEntries;
    ATOM_Vega10_Hard_Limit_Record entries[1];
} ATOM_Vega10_Hard_Limit_Table;

typedef struct _Vega10_PPTable_Generic_SubTable_Header
{
    UCHAR  ucRevId;
} Vega10_PPTable_Generic_SubTable_Header;

#pragma pack(pop)

#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _VEGA10_POWERTUNE_H_
#define _VEGA10_POWERTUNE_H_

enum vega10_pt_config_reg_type {
	VEGA10_CONFIGREG_MMR = 0,
	VEGA10_CONFIGREG_SMC_IND,
	VEGA10_CONFIGREG_DIDT_IND,
	VEGA10_CONFIGREG_CACHE,
	VEGA10_CONFIGREG_MAX
};

enum vega10_didt_config_reg_type {
	VEGA10_CONFIGREG_DIDT = 0,
	VEGA10_CONFIGREG_GCCAC,
	VEGA10_CONFIGREG_SECAC
};

/* PowerContainment Features */
#define POWERCONTAINMENT_FEATURE_DTE             0x00000001
#define POWERCONTAINMENT_FEATURE_TDCLimit        0x00000002
#define POWERCONTAINMENT_FEATURE_PkgPwrLimit     0x00000004

struct vega10_pt_config_reg {
	uint32_t                           offset;
	uint32_t                           mask;
	uint32_t                           shift;
	uint32_t                           value;
	enum vega10_pt_config_reg_type       type;
};

struct vega10_didt_config_reg {
	uint32_t		offset;
	uint32_t		mask;
	uint32_t		shift;
	uint32_t		value;
};

struct vega10_pt_defaults {
    uint8_t   SviLoadLineEn;
    uint8_t   SviLoadLineVddC;
    uint8_t   TDC_VDDC_ThrottleReleaseLimitPerc;
    uint8_t   TDC_MAWt;
    uint8_t   TdcWaterfallCtl;
    uint8_t   DTEAmbientTempBase;
};

void vega10_initialize_power_tune_defaults(struct pp_hwmgr *hwmgr);
int vega10_populate_bapm_parameters_in_dpm_table(struct pp_hwmgr *hwmgr);
int vega10_populate_pm_fuses(struct pp_hwmgr *hwmgr);
int vega10_enable_smc_cac(struct pp_hwmgr *hwmgr);
int vega10_enable_power_containment(struct pp_hwmgr *hwmgr);
int vega10_set_power_limit(struct pp_hwmgr *hwmgr, uint32_t n);
int vega10_power_control_set_level(struct pp_hwmgr *hwmgr);
int vega10_disable_power_containment(struct pp_hwmgr *hwmgr);

int vega10_enable_didt_config(struct pp_hwmgr *hwmgr);
int vega10_disable_didt_config(struct pp_hwmgr *hwmgr);

#endif  /* _VEGA10_POWERTUNE_H_ */

/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VEGA10_INC_H
#define VEGA10_INC_H

#include "asic_reg/thm/thm_9_0_default.h"
#include "asic_reg/thm/thm_9_0_offset.h"
#include "asic_reg/thm/thm_9_0_sh_mask.h"

#include "asic_reg/mp/mp_9_0_offset.h"
#include "asic_reg/mp/mp_9_0_sh_mask.h"

#include "asic_reg/gc/gc_9_0_default.h"
#include "asic_reg/gc/gc_9_0_offset.h"
#include "asic_reg/gc/gc_9_0_sh_mask.h"

#include "asic_reg/nbio/nbio_6_1_default.h"
#include "asic_reg/nbio/nbio_6_1_offset.h"
#include "asic_reg/nbio/nbio_6_1_sh_mask.h"


#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _VEGA10_HWMGR_H_
#define _VEGA10_HWMGR_H_

#include "hwmgr.h"
#include "smu9_driver_if.h"
#include "ppatomctrl.h"
#include "ppatomfwctrl.h"
#include "vega10_ppsmc.h"
#include "vega10_powertune.h"

#define VEGA10_MAX_HARDWARE_POWERLEVELS 2

#define WaterMarksExist  1
#define WaterMarksLoaded 2

enum {
	GNLD_DPM_PREFETCHER = 0,
	GNLD_DPM_GFXCLK,
	GNLD_DPM_UCLK,
	GNLD_DPM_SOCCLK,
	GNLD_DPM_UVD,
	GNLD_DPM_VCE,
	GNLD_ULV,
	GNLD_DPM_MP0CLK,
	GNLD_DPM_LINK,
	GNLD_DPM_DCEFCLK,
	GNLD_AVFS,
	GNLD_DS_GFXCLK,
	GNLD_DS_SOCCLK,
	GNLD_DS_LCLK,
	GNLD_PPT,
	GNLD_TDC,
	GNLD_THERMAL,
	GNLD_GFX_PER_CU_CG,
	GNLD_RM,
	GNLD_DS_DCEFCLK,
	GNLD_ACDC,
	GNLD_VR0HOT,
	GNLD_VR1HOT,
	GNLD_FW_CTF,
	GNLD_LED_DISPLAY,
	GNLD_FAN_CONTROL,
	GNLD_FEATURE_FAST_PPT_BIT,
	GNLD_DIDT,
	GNLD_ACG,
	GNLD_PCC_LIMIT,
	GNLD_FEATURES_MAX
};

#define GNLD_DPM_MAX    (GNLD_DPM_DCEFCLK + 1)

#define SMC_DPM_FEATURES    0x30F

struct smu_features {
	bool supported;
	bool enabled;
	uint32_t smu_feature_id;
	uint32_t smu_feature_bitmap;
};

struct vega10_performance_level {
	uint32_t  soc_clock;
	uint32_t  gfx_clock;
	uint32_t  mem_clock;
};

struct vega10_bacos {
	uint32_t                       baco_flags;
	/* struct vega10_performance_level  performance_level; */
};

struct vega10_uvd_clocks {
	uint32_t  vclk;
	uint32_t  dclk;
};

struct vega10_vce_clocks {
	uint32_t  evclk;
	uint32_t  ecclk;
};

struct vega10_power_state {
	uint32_t                  magic;
	struct vega10_uvd_clocks    uvd_clks;
	struct vega10_vce_clocks    vce_clks;
	uint16_t                  performance_level_count;
	bool                      dc_compatible;
	uint32_t                  sclk_threshold;
	struct vega10_performance_level  performance_levels[VEGA10_MAX_HARDWARE_POWERLEVELS];
};

struct vega10_dpm_level {
	bool	enabled;
	uint32_t	value;
	uint32_t	param1;
};

#define VEGA10_MAX_DEEPSLEEP_DIVIDER_ID 5
#define MAX_REGULAR_DPM_NUMBER 8
#define MAX_PCIE_CONF 2
#define VEGA10_MINIMUM_ENGINE_CLOCK 2500

struct vega10_dpm_state {
	uint32_t  soft_min_level;
	uint32_t  soft_max_level;
	uint32_t  hard_min_level;
	uint32_t  hard_max_level;
};

struct vega10_single_dpm_table {
	uint32_t		count;
	struct vega10_dpm_state	dpm_state;
	struct vega10_dpm_level	dpm_levels[MAX_REGULAR_DPM_NUMBER];
};

struct vega10_pcie_table {
	uint16_t count;
	uint8_t  pcie_gen[MAX_PCIE_CONF];
	uint8_t  pcie_lane[MAX_PCIE_CONF];
	uint32_t lclk[MAX_PCIE_CONF];
};

struct vega10_dpm_table {
	struct vega10_single_dpm_table  soc_table;
	struct vega10_single_dpm_table  gfx_table;
	struct vega10_single_dpm_table  mem_table;
	struct vega10_single_dpm_table  eclk_table;
	struct vega10_single_dpm_table  vclk_table;
	struct vega10_single_dpm_table  dclk_table;
	struct vega10_single_dpm_table  dcef_table;
	struct vega10_single_dpm_table  pixel_table;
	struct vega10_single_dpm_table  display_table;
	struct vega10_single_dpm_table  phy_table;
	struct vega10_pcie_table        pcie_table;
};

#define VEGA10_MAX_LEAKAGE_COUNT  8
struct vega10_leakage_voltage {
	uint16_t  count;
	uint16_t  leakage_id[VEGA10_MAX_LEAKAGE_COUNT];
	uint16_t  actual_voltage[VEGA10_MAX_LEAKAGE_COUNT];
};

struct vega10_display_timing {
	uint32_t  min_clock_in_sr;
	uint32_t  num_existing_displays;
};

struct vega10_dpmlevel_enable_mask {
	uint32_t  uvd_dpm_enable_mask;
	uint32_t  vce_dpm_enable_mask;
	uint32_t  acp_dpm_enable_mask;
	uint32_t  samu_dpm_enable_mask;
	uint32_t  sclk_dpm_enable_mask;
	uint32_t  mclk_dpm_enable_mask;
};

struct vega10_vbios_boot_state {
	bool        bsoc_vddc_lock;
	uint16_t    vddc;
	uint16_t    vddci;
	uint16_t    mvddc;
	uint16_t    vdd_gfx;
	uint32_t    gfx_clock;
	uint32_t    mem_clock;
	uint32_t    soc_clock;
	uint32_t    dcef_clock;
};

struct vega10_smc_state_table {
	uint32_t        soc_boot_level;
	uint32_t        gfx_boot_level;
	uint32_t        dcef_boot_level;
	uint32_t        mem_boot_level;
	uint32_t        uvd_boot_level;
	uint32_t        vce_boot_level;
	uint32_t        gfx_max_level;
	uint32_t        mem_max_level;
	uint32_t        soc_max_level;
	uint8_t         vr_hot_gpio;
	uint8_t         ac_dc_gpio;
	uint8_t         therm_out_gpio;
	uint8_t         therm_out_polarity;
	uint8_t         therm_out_mode;
	PPTable_t       pp_table;
	Watermarks_t    water_marks_table;
	AvfsTable_t     avfs_table;
	AvfsFuseOverride_t avfs_fuse_override_table;
};

struct vega10_mclk_latency_entries {
	uint32_t  frequency;
	uint32_t  latency;
};

struct vega10_mclk_latency_table {
	uint32_t  count;
	struct vega10_mclk_latency_entries  entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega10_registry_data {
	uint8_t   ac_dc_switch_gpio_support;
	uint8_t   avfs_support;
	uint8_t   cac_support;
	uint8_t   clock_stretcher_support;
	uint8_t   db_ramping_support;
	uint8_t   didt_mode;
	uint8_t   didt_support;
	uint8_t   edc_didt_support;
	uint8_t   dynamic_state_patching_support;
	uint8_t   enable_pkg_pwr_tracking_feature;
	uint8_t   enable_tdc_limit_feature;
	uint32_t  fast_watermark_threshold;
	uint8_t   force_dpm_high;
	uint8_t   fuzzy_fan_control_support;
	uint8_t   long_idle_baco_support;
	uint8_t   mclk_dpm_key_disabled;
	uint8_t   od_state_in_dc_support;
	uint8_t   pcieLaneOverride;
	uint8_t   pcieSpeedOverride;
	uint32_t  pcieClockOverride;
	uint8_t   pcie_dpm_key_disabled;
	uint8_t   dcefclk_dpm_key_disabled;
	uint8_t   power_containment_support;
	uint8_t   ppt_support;
	uint8_t   prefetcher_dpm_key_disabled;
	uint8_t   quick_transition_support;
	uint8_t   regulator_hot_gpio_support;
	uint8_t   sclk_deep_sleep_support;
	uint8_t   sclk_dpm_key_disabled;
	uint8_t   sclk_from_vbios;
	uint8_t   sclk_throttle_low_notification;
	uint8_t   show_baco_dbg_info;
	uint8_t   skip_baco_hardware;
	uint8_t   socclk_dpm_key_disabled;
	uint8_t   spll_shutdown_support;
	uint8_t   sq_ramping_support;
	uint32_t  stable_pstate_sclk_dpm_percentage;
	uint8_t   tcp_ramping_support;
	uint8_t   tdc_support;
	uint8_t   td_ramping_support;
	uint8_t   dbr_ramping_support;
	uint8_t   gc_didt_support;
	uint8_t   psm_didt_support;
	uint8_t   thermal_out_gpio_support;
	uint8_t   thermal_support;
	uint8_t   fw_ctf_enabled;
	uint8_t   fan_control_support;
	uint8_t   ulps_support;
	uint8_t   ulv_support;
	uint32_t  vddc_vddci_delta;
	uint8_t   odn_feature_enable;
	uint8_t   disable_water_mark;
	uint8_t   zrpm_stop_temp;
	uint8_t   zrpm_start_temp;
	uint8_t   led_dpm_enabled;
	uint8_t   vr0hot_enabled;
	uint8_t   vr1hot_enabled;
};

struct vega10_odn_clock_voltage_dependency_table {
	uint32_t count;
	struct phm_ppt_v1_clock_voltage_dependency_record entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega10_odn_vddc_lookup_table {
	uint32_t count;
	struct phm_ppt_v1_voltage_lookup_record entries[MAX_REGULAR_DPM_NUMBER];
};

struct vega10_odn_dpm_table {
	struct vega10_odn_clock_voltage_dependency_table vdd_dep_on_sclk;
	struct vega10_odn_clock_voltage_dependency_table vdd_dep_on_mclk;
	struct vega10_odn_clock_voltage_dependency_table vdd_dep_on_socclk;
	struct vega10_odn_vddc_lookup_table vddc_lookup_table;
	uint32_t max_vddc;
	uint32_t min_vddc;
};

struct vega10_odn_fan_table {
	uint32_t	target_fan_speed;
	uint32_t	target_temperature;
	uint32_t	min_performance_clock;
	uint32_t	min_fan_limit;
};

struct vega10_hwmgr {
	struct vega10_dpm_table          dpm_table;
	struct vega10_dpm_table          golden_dpm_table;
	struct vega10_registry_data      registry_data;
	struct vega10_vbios_boot_state   vbios_boot_state;
	struct vega10_mclk_latency_table mclk_latency_table;

	struct vega10_leakage_voltage    vddc_leakage;

	uint32_t                           vddc_control;
	struct pp_atomfwctrl_voltage_table vddc_voltage_table;
	uint32_t                           mvdd_control;
	struct pp_atomfwctrl_voltage_table mvdd_voltage_table;
	uint32_t                           vddci_control;
	struct pp_atomfwctrl_voltage_table vddci_voltage_table;

	uint32_t                           active_auto_throttle_sources;
	uint32_t                           water_marks_bitmap;
	struct vega10_bacos                bacos;

	struct vega10_odn_dpm_table       odn_dpm_table;
	struct vega10_odn_fan_table       odn_fan_table;

	/* ---- General data ---- */
	uint8_t                           need_update_dpm_table;

	bool                           cac_enabled;
	bool                           battery_state;
	bool                           is_tlu_enabled;

	uint32_t                       low_sclk_interrupt_threshold;

	uint32_t                       total_active_cus;

	struct vega10_display_timing display_timing;

	/* ---- Vega10 Dyn Register Settings ---- */

	uint32_t                       debug_settings;
	uint32_t                       lowest_uclk_reserved_for_ulv;
	uint32_t                       gfxclk_average_alpha;
	uint32_t                       socclk_average_alpha;
	uint32_t                       uclk_average_alpha;
	uint32_t                       gfx_activity_average_alpha;
	uint32_t                       display_voltage_mode;
	uint32_t                       dcef_clk_quad_eqn_a;
	uint32_t                       dcef_clk_quad_eqn_b;
	uint32_t                       dcef_clk_quad_eqn_c;
	uint32_t                       disp_clk_quad_eqn_a;
	uint32_t                       disp_clk_quad_eqn_b;
	uint32_t                       disp_clk_quad_eqn_c;
	uint32_t                       pixel_clk_quad_eqn_a;
	uint32_t                       pixel_clk_quad_eqn_b;
	uint32_t                       pixel_clk_quad_eqn_c;
	uint32_t                       phy_clk_quad_eqn_a;
	uint32_t                       phy_clk_quad_eqn_b;
	uint32_t                       phy_clk_quad_eqn_c;

	/* ---- Thermal Temperature Setting ---- */
	struct vega10_dpmlevel_enable_mask     dpm_level_enable_mask;

	/* ---- Power Gating States ---- */
	bool                           uvd_power_gated;
	bool                           vce_power_gated;
	bool                           need_long_memory_training;

	/* Internal settings to apply the application power optimization parameters */
	uint32_t                       disable_dpm_mask;

	/* ---- SMU9 ---- */
	struct smu_features            smu_features[GNLD_FEATURES_MAX];
	struct vega10_smc_state_table  smc_state_table;

	uint32_t                       config_telemetry;
	uint32_t                       acg_loop_state;
	uint32_t                       mem_channels;
	uint8_t                       custom_profile_mode[4];
};

#define VEGA10_DPM2_NEAR_TDP_DEC                      10
#define VEGA10_DPM2_ABOVE_SAFE_INC                    5
#define VEGA10_DPM2_BELOW_SAFE_INC                    20

#define VEGA10_DPM2_LTA_WINDOW_SIZE                   7

#define VEGA10_DPM2_LTS_TRUNCATE                      0

#define VEGA10_DPM2_TDP_SAFE_LIMIT_PERCENT            80

#define VEGA10_DPM2_MAXPS_PERCENT_M                   90
#define VEGA10_DPM2_MAXPS_PERCENT_H                   90

#define VEGA10_DPM2_PWREFFICIENCYRATIO_MARGIN         50

#define VEGA10_DPM2_SQ_RAMP_MAX_POWER                 0x3FFF
#define VEGA10_DPM2_SQ_RAMP_MIN_POWER                 0x12
#define VEGA10_DPM2_SQ_RAMP_MAX_POWER_DELTA           0x15
#define VEGA10_DPM2_SQ_RAMP_SHORT_TERM_INTERVAL_SIZE  0x1E
#define VEGA10_DPM2_SQ_RAMP_LONG_TERM_INTERVAL_RATIO  0xF

#define VEGA10_VOLTAGE_CONTROL_NONE                   0x0
#define VEGA10_VOLTAGE_CONTROL_BY_GPIO                0x1
#define VEGA10_VOLTAGE_CONTROL_BY_SVID2               0x2
#define VEGA10_VOLTAGE_CONTROL_MERGED                 0x3
/* To convert to Q8.8 format for firmware */
#define VEGA10_Q88_FORMAT_CONVERSION_UNIT             256

#define VEGA10_UNUSED_GPIO_PIN       0x7F

#define VEGA10_THERM_OUT_MODE_DISABLE       0x0
#define VEGA10_THERM_OUT_MODE_THERM_ONLY    0x1
#define VEGA10_THERM_OUT_MODE_THERM_VRHOT   0x2

#define PPVEGA10_VEGA10DISPLAYVOLTAGEMODE_DFLT   0xffffffff
#define PPREGKEY_VEGA10QUADRATICEQUATION_DFLT    0xffffffff

#define PPVEGA10_VEGA10GFXCLKAVERAGEALPHA_DFLT       25 /* 10% * 255 = 25 */
#define PPVEGA10_VEGA10SOCCLKAVERAGEALPHA_DFLT       25 /* 10% * 255 = 25 */
#define PPVEGA10_VEGA10UCLKCLKAVERAGEALPHA_DFLT      25 /* 10% * 255 = 25 */
#define PPVEGA10_VEGA10GFXACTIVITYAVERAGEALPHA_DFLT  25 /* 10% * 255 = 25 */

#define VEGA10_UMD_PSTATE_GFXCLK_LEVEL         0x3
#define VEGA10_UMD_PSTATE_SOCCLK_LEVEL         0x3
#define VEGA10_UMD_PSTATE_MCLK_LEVEL           0x2

extern int tonga_initializa_dynamic_state_adjustment_rule_settings(struct pp_hwmgr *hwmgr);
extern int tonga_hwmgr_backend_fini(struct pp_hwmgr *hwmgr);
extern int tonga_get_mc_microcode_version (struct pp_hwmgr *hwmgr);
extern int tonga_notify_smc_display_config_after_ps_adjustment(struct pp_hwmgr *hwmgr);
extern int tonga_notify_smc_display_change(struct pp_hwmgr *hwmgr, bool has_display);
int vega10_update_vce_dpm(struct pp_hwmgr *hwmgr, const void *input);
int vega10_update_uvd_dpm(struct pp_hwmgr *hwmgr, bool bgate);
int vega10_update_samu_dpm(struct pp_hwmgr *hwmgr, bool bgate);
int vega10_update_acp_dpm(struct pp_hwmgr *hwmgr, bool bgate);
int vega10_enable_disable_vce_dpm(struct pp_hwmgr *hwmgr, bool enable);
int vega10_hwmgr_init(struct pp_hwmgr *hwmgr);

#endif /* _VEGA10_HWMGR_H_ */
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __VEGA10_BACO_H__
#define __VEGA10_BACO_H__
#include "smu9_baco.h"

extern int vega10_baco_set_state(struct pp_hwmgr *hwmgr, enum BACO_STATE state);

#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __TONGA_BACO_H__
#define __TONGA_BACO_H__
#include "smu7_baco.h"

extern int tonga_baco_set_state(struct pp_hwmgr *hwmgr, enum BACO_STATE state);

#endif
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _SMU_HELPER_H_
#define _SMU_HELPER_H_

struct pp_atomctrl_voltage_table;
struct pp_hwmgr;
struct phm_ppt_v1_voltage_lookup_table;
struct Watermarks_t;
struct pp_wm_sets_with_clock_ranges_soc15;

uint8_t convert_to_vid(uint16_t vddc);
uint16_t convert_to_vddc(uint8_t vid);

struct watermark_row_generic_t {
	uint16_t MinClock;
	uint16_t MaxClock;
	uint16_t MinUclk;
	uint16_t MaxUclk;

	uint8_t  WmSetting;
	uint8_t  Padding[3];
};

struct watermarks {
	struct watermark_row_generic_t WatermarkRow[2][4];
	uint32_t     padding[7];
};

int phm_copy_clock_limits_array(
	struct pp_hwmgr *hwmgr,
	uint32_t **pptable_info_array,
	const uint32_t *pptable_array,
	uint32_t power_saving_clock_count);

int phm_copy_overdrive_settings_limits_array(
	struct pp_hwmgr *hwmgr,
	uint32_t **pptable_info_array,
	const uint32_t *pptable_array,
	uint32_t od_setting_count);

extern int phm_wait_for_register_unequal(struct pp_hwmgr *hwmgr,
					uint32_t index,
					uint32_t value, uint32_t mask);
extern int phm_wait_for_indirect_register_unequal(
				struct pp_hwmgr *hwmgr,
				uint32_t indirect_port, uint32_t index,
				uint32_t value, uint32_t mask);


extern bool phm_cf_want_uvd_power_gating(struct pp_hwmgr *hwmgr);
extern bool phm_cf_want_vce_power_gating(struct pp_hwmgr *hwmgr);
extern bool phm_cf_want_microcode_fan_ctrl(struct pp_hwmgr *hwmgr);

extern int phm_trim_voltage_table(struct pp_atomctrl_voltage_table *vol_table);
extern int phm_get_svi2_mvdd_voltage_table(struct pp_atomctrl_voltage_table *vol_table, phm_ppt_v1_clock_voltage_dependency_table *dep_table);
extern int phm_get_svi2_vddci_voltage_table(struct pp_atomctrl_voltage_table *vol_table, phm_ppt_v1_clock_voltage_dependency_table *dep_table);
extern int phm_get_svi2_vdd_voltage_table(struct pp_atomctrl_voltage_table *vol_table, phm_ppt_v1_voltage_lookup_table *lookup_table);
extern void phm_trim_voltage_table_to_fit_state_table(uint32_t max_vol_steps, struct pp_atomctrl_voltage_table *vol_table);
extern int phm_reset_single_dpm_table(void *table, uint32_t count, int max);
extern void phm_setup_pcie_table_entry(void *table, uint32_t index, uint32_t pcie_gen, uint32_t pcie_lanes);
extern int32_t phm_get_dpm_level_enable_mask_value(void *table);
extern uint8_t phm_get_voltage_id(struct pp_atomctrl_voltage_table *voltage_table,
		uint32_t voltage);
extern uint8_t phm_get_voltage_index(struct phm_ppt_v1_voltage_lookup_table *lookup_table, uint16_t voltage);
extern uint16_t phm_find_closest_vddci(struct pp_atomctrl_voltage_table *vddci_table, uint16_t vddci);
extern int phm_find_boot_level(void *table, uint32_t value, uint32_t *boot_level);
extern int phm_get_sclk_for_voltage_evv(struct pp_hwmgr *hwmgr, phm_ppt_v1_voltage_lookup_table *lookup_table,
								uint16_t virtual_voltage_id, int32_t *sclk);
extern int phm_initializa_dynamic_state_adjustment_rule_settings(struct pp_hwmgr *hwmgr);
extern uint32_t phm_get_lowest_enabled_level(struct pp_hwmgr *hwmgr, uint32_t mask);
extern void phm_apply_dal_min_voltage_request(struct pp_hwmgr *hwmgr);

extern int phm_get_voltage_evv_on_sclk(struct pp_hwmgr *hwmgr, uint8_t voltage_type,
				uint32_t sclk, uint16_t id, uint16_t *voltage);

extern uint32_t phm_set_field_to_u32(u32 offset, u32 original_data, u32 field, u32 size);

extern int phm_wait_on_register(struct pp_hwmgr *hwmgr, uint32_t index,
				uint32_t value, uint32_t mask);

extern int phm_wait_on_indirect_register(struct pp_hwmgr *hwmgr,
				uint32_t indirect_port,
				uint32_t index,
				uint32_t value,
				uint32_t mask);

int phm_irq_process(struct amdgpu_device *adev,
			   struct amdgpu_irq_src *source,
			   struct amdgpu_iv_entry *entry);

/*
 * Helper function to make sysfs_emit_at() happy. Align buf to
 * the current page boundary and record the offset.
 */
static inline void phm_get_sysfs_buf(char **buf, int *offset)
{
	if (!*buf || !offset)
		return;

	*offset = offset_in_page(*buf);
	*buf -= *offset;
}

int smu9_register_irq_handlers(struct pp_hwmgr *hwmgr);

void *smu_atom_get_data_table(void *dev, uint32_t table, uint16_t *size,
						uint8_t *frev, uint8_t *crev);

int smu_get_voltage_dependency_table_ppt_v1(
	const struct phm_ppt_v1_clock_voltage_dependency_table *allowed_dep_table,
		struct phm_ppt_v1_clock_voltage_dependency_table *dep_table);

int smu_set_watermarks_for_clocks_ranges(void *wt_table,
		struct dm_pp_wm_sets_with_clock_ranges_soc15 *wm_with_clock_ranges);

#define PHM_FIELD_SHIFT(reg, field) reg##__##field##__SHIFT
#define PHM_FIELD_MASK(reg, field) reg##__##field##_MASK

#define PHM_SET_FIELD(origval, reg, field, fieldval)	\
	(((origval) & ~PHM_FIELD_MASK(reg, field)) |	\
	 (PHM_FIELD_MASK(reg, field) & ((fieldval) << PHM_FIELD_SHIFT(reg, field))))

#define PHM_GET_FIELD(value, reg, field)	\
	(((value) & PHM_FIELD_MASK(reg, field)) >>	\
	 PHM_FIELD_SHIFT(reg, field))


/* Operations on named fields. */

#define PHM_READ_FIELD(device, reg, field)	\
	PHM_GET_FIELD(cgs_read_register(device, mm##reg), reg, field)

#define PHM_READ_INDIRECT_FIELD(device, port, reg, field)	\
	PHM_GET_FIELD(cgs_read_ind_register(device, port, ix##reg),	\
			reg, field)

#define PHM_READ_VFPF_INDIRECT_FIELD(device, port, reg, field)	\
	PHM_GET_FIELD(cgs_read_ind_register(device, port, ix##reg),	\
			reg, field)

#define PHM_WRITE_FIELD(device, reg, field, fieldval)	\
	cgs_write_register(device, mm##reg, PHM_SET_FIELD(	\
				cgs_read_register(device, mm##reg), reg, field, fieldval))

#define PHM_WRITE_INDIRECT_FIELD(device, port, reg, field, fieldval)	\
	cgs_write_ind_register(device, port, ix##reg,	\
			PHM_SET_FIELD(cgs_read_ind_register(device, port, ix##reg),	\
				reg, field, fieldval))

#define PHM_WRITE_VFPF_INDIRECT_FIELD(device, port, reg, field, fieldval)	\
	cgs_write_ind_register(device, port, ix##reg,	\
			PHM_SET_FIELD(cgs_read_ind_register(device, port, ix##reg),	\
				reg, field, fieldval))

#define PHM_WAIT_INDIRECT_REGISTER_GIVEN_INDEX(hwmgr, port, index, value, mask)        \
       phm_wait_on_indirect_register(hwmgr, mm##port##_INDEX, index, value, mask)


#define PHM_WAIT_INDIRECT_REGISTER(hwmgr, port, reg, value, mask)      \
       PHM_WAIT_INDIRECT_REGISTER_GIVEN_INDEX(hwmgr, port, ix##reg, value, mask)

#define PHM_WAIT_INDIRECT_FIELD(hwmgr, port, reg, field, fieldval)	\
	PHM_WAIT_INDIRECT_REGISTER(hwmgr, port, reg, (fieldval)	\
			<< PHM_FIELD_SHIFT(reg, field), PHM_FIELD_MASK(reg, field))

#define PHM_WAIT_INDIRECT_REGISTER_UNEQUAL_GIVEN_INDEX(hwmgr, port, index, value, mask)    \
		phm_wait_for_indirect_register_unequal(hwmgr,                   \
				mm##port##_INDEX, index, value, mask)

#define PHM_WAIT_INDIRECT_REGISTER_UNEQUAL(hwmgr, port, reg, value, mask)    \
		PHM_WAIT_INDIRECT_REGISTER_UNEQUAL_GIVEN_INDEX(hwmgr, port, ix##reg, value, mask)

#define PHM_WAIT_INDIRECT_FIELD_UNEQUAL(hwmgr, port, reg, field, fieldval)                          \
		PHM_WAIT_INDIRECT_REGISTER_UNEQUAL(hwmgr, port, reg, \
				(fieldval) << PHM_FIELD_SHIFT(reg, field), \
					PHM_FIELD_MASK(reg, field) )


#define PHM_WAIT_VFPF_INDIRECT_REGISTER_UNEQUAL_GIVEN_INDEX(hwmgr,	\
				port, index, value, mask)		\
	phm_wait_for_indirect_register_unequal(hwmgr,			\
		mm##port##_INDEX_11, index, value, mask)

#define PHM_WAIT_VFPF_INDIRECT_REGISTER_UNEQUAL(hwmgr, port, reg, value, mask)     \
		PHM_WAIT_VFPF_INDIRECT_REGISTER_UNEQUAL_GIVEN_INDEX(hwmgr, port, ix##reg, value, mask)

#define PHM_WAIT_VFPF_INDIRECT_FIELD_UNEQUAL(hwmgr, port, reg, field, fieldval) \
	PHM_WAIT_VFPF_INDIRECT_REGISTER_UNEQUAL(hwmgr, port, reg,	\
		(fieldval) << PHM_FIELD_SHIFT(reg, field),		\
		PHM_FIELD_MASK(reg, field))


#define PHM_WAIT_VFPF_INDIRECT_REGISTER_GIVEN_INDEX(hwmgr,		\
				port, index, value, mask)		\
	phm_wait_on_indirect_register(hwmgr,				\
		mm##port##_INDEX_11, index, value, mask)

#define PHM_WAIT_VFPF_INDIRECT_REGISTER(hwmgr, port, reg, value, mask) \
	PHM_WAIT_VFPF_INDIRECT_REGISTER_GIVEN_INDEX(hwmgr, port, ix##reg, value, mask)

#define PHM_WAIT_VFPF_INDIRECT_FIELD(hwmgr, port, reg, field, fieldval) \
	PHM_WAIT_VFPF_INDIRECT_REGISTER(hwmgr, port, reg,		\
		(fieldval) << PHM_FIELD_SHIFT(reg, field),		\
		PHM_FIELD_MASK(reg, field))

#define PHM_WAIT_REGISTER_UNEQUAL_GIVEN_INDEX(hwmgr,         \
							index, value, mask) \
		phm_wait_for_register_unequal(hwmgr,            \
					index, value, mask)

#define PHM_WAIT_REGISTER_UNEQUAL(hwmgr, reg, value, mask)		\
	PHM_WAIT_REGISTER_UNEQUAL_GIVEN_INDEX(hwmgr,			\
				mm##reg, value, mask)

#define PHM_WAIT_FIELD_UNEQUAL(hwmgr, reg, field, fieldval)		\
	PHM_WAIT_REGISTER_UNEQUAL(hwmgr, reg,				\
		(fieldval) << PHM_FIELD_SHIFT(reg, field),		\
		PHM_FIELD_MASK(reg, field))

#endif /* _SMU_HELPER_H_ */
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __SMU9_BACO_H__
#define __SMU9_BACO_H__
#include "hwmgr.h"
#include "common_baco.h"

extern int smu9_baco_get_capability(struct pp_hwmgr *hwmgr, bool *cap);
extern int smu9_baco_get_state(struct pp_hwmgr *hwmgr, enum BACO_STATE *state);

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _SMU8_HWMGR_H_
#define _SMU8_HWMGR_H_

#include "cgs_common.h"
#include "ppatomctrl.h"

#define SMU8_NUM_NBPSTATES               4
#define SMU8_NUM_NBPMEMORYCLOCK          2
#define MAX_DISPLAY_CLOCK_LEVEL        8
#define SMU8_MAX_HARDWARE_POWERLEVELS    8
#define SMU8_VOTINGRIGHTSCLIENTS_DFLT0   0x3FFFC102
#define SMU8_MIN_DEEP_SLEEP_SCLK         800

/* Carrizo device IDs */
#define DEVICE_ID_CZ_9870             0x9870
#define DEVICE_ID_CZ_9874             0x9874
#define DEVICE_ID_CZ_9875             0x9875
#define DEVICE_ID_CZ_9876             0x9876
#define DEVICE_ID_CZ_9877             0x9877

struct smu8_dpm_entry {
	uint32_t soft_min_clk;
	uint32_t hard_min_clk;
	uint32_t soft_max_clk;
	uint32_t hard_max_clk;
};

struct smu8_sys_info {
	uint32_t bootup_uma_clock;
	uint32_t bootup_engine_clock;
	uint32_t dentist_vco_freq;
	uint32_t nb_dpm_enable;
	uint32_t nbp_memory_clock[SMU8_NUM_NBPMEMORYCLOCK];
	uint32_t nbp_n_clock[SMU8_NUM_NBPSTATES];
	uint16_t nbp_voltage_index[SMU8_NUM_NBPSTATES];
	uint32_t display_clock[MAX_DISPLAY_CLOCK_LEVEL];
	uint16_t bootup_nb_voltage_index;
	uint8_t htc_tmp_lmt;
	uint8_t htc_hyst_lmt;
	uint32_t system_config;
	uint32_t uma_channel_number;
};

#define MAX_DISPLAYPHY_IDS			0x8
#define DISPLAYPHY_LANEMASK			0xF
#define UNKNOWN_TRANSMITTER_PHY_ID		(-1)

#define DISPLAYPHY_PHYID_SHIFT			24
#define DISPLAYPHY_LANESELECT_SHIFT		16

#define DISPLAYPHY_RX_SELECT			0x1
#define DISPLAYPHY_TX_SELECT			0x2
#define DISPLAYPHY_CORE_SELECT			0x4

#define DDI_POWERGATING_ARG(phyID, lanemask, rx, tx, core) \
		(((uint32_t)(phyID))<<DISPLAYPHY_PHYID_SHIFT | \
		((uint32_t)(lanemask))<<DISPLAYPHY_LANESELECT_SHIFT | \
		((rx) ? DISPLAYPHY_RX_SELECT : 0) | \
		((tx) ? DISPLAYPHY_TX_SELECT : 0) | \
		((core) ? DISPLAYPHY_CORE_SELECT : 0))

struct smu8_display_phy_info_entry {
	uint8_t phy_present;
	uint8_t active_lane_mapping;
	uint8_t display_config_type;
	uint8_t active_number_of_lanes;
};

#define SMU8_MAX_DISPLAYPHY_IDS			10

struct smu8_display_phy_info {
	bool display_phy_access_initialized;
	struct smu8_display_phy_info_entry entries[SMU8_MAX_DISPLAYPHY_IDS];
};

struct smu8_power_level {
	uint32_t engineClock;
	uint8_t vddcIndex;
	uint8_t dsDividerIndex;
	uint8_t ssDividerIndex;
	uint8_t allowGnbSlow;
	uint8_t forceNBPstate;
	uint8_t display_wm;
	uint8_t vce_wm;
	uint8_t numSIMDToPowerDown;
	uint8_t hysteresis_up;
	uint8_t rsv[3];
};

struct smu8_uvd_clocks {
	uint32_t vclk;
	uint32_t dclk;
	uint32_t vclk_low_divider;
	uint32_t vclk_high_divider;
	uint32_t dclk_low_divider;
	uint32_t dclk_high_divider;
};

enum smu8_pstate_previous_action {
	DO_NOTHING = 1,
	FORCE_HIGH,
	CANCEL_FORCE_HIGH
};

struct pp_disable_nb_ps_flags {
	union {
		struct {
			uint32_t entry : 1;
			uint32_t display : 1;
			uint32_t driver: 1;
			uint32_t vce : 1;
			uint32_t uvd : 1;
			uint32_t acp : 1;
			uint32_t reserved: 26;
		} bits;
		uint32_t u32All;
	};
};

struct smu8_power_state {
	unsigned int magic;
	uint32_t level;
	struct smu8_uvd_clocks uvd_clocks;
	uint32_t evclk;
	uint32_t ecclk;
	uint32_t samclk;
	uint32_t acpclk;
	bool need_dfs_bypass;
	uint32_t nbps_flags;
	uint32_t bapm_flags;
	uint8_t dpm_0_pg_nb_ps_low;
	uint8_t dpm_0_pg_nb_ps_high;
	uint8_t dpm_x_nb_ps_low;
	uint8_t dpm_x_nb_ps_high;
	enum smu8_pstate_previous_action action;
	struct smu8_power_level levels[SMU8_MAX_HARDWARE_POWERLEVELS];
	struct pp_disable_nb_ps_flags disable_nb_ps_flag;
};

#define DPMFlags_SCLK_Enabled			0x00000001
#define DPMFlags_UVD_Enabled			0x00000002
#define DPMFlags_VCE_Enabled			0x00000004
#define DPMFlags_ACP_Enabled			0x00000008
#define DPMFlags_ForceHighestValid		0x40000000
#define DPMFlags_Debug				0x80000000

#define SMU_EnabledFeatureScoreboard_AcpDpmOn   0x00000001 /* bit 0 */
#define SMU_EnabledFeatureScoreboard_UvdDpmOn   0x00800000 /* bit 23 */
#define SMU_EnabledFeatureScoreboard_VceDpmOn   0x01000000 /* bit 24 */

struct cc6_settings {
	bool cc6_setting_changed;
	bool nb_pstate_switch_disable;/* controls NB PState switch */
	bool cpu_cc6_disable; /* controls CPU CState switch ( on or off) */
	bool cpu_pstate_disable;
	uint32_t cpu_pstate_separation_time;
};

struct smu8_hwmgr {
	uint32_t dpm_interval;

	uint32_t voltage_drop_threshold;

	uint32_t voting_rights_clients;

	uint32_t disable_driver_thermal_policy;

	uint32_t static_screen_threshold;

	uint32_t gfx_power_gating_threshold;

	uint32_t activity_hysteresis;
	uint32_t bootup_sclk_divider;
	uint32_t gfx_ramp_step;
	uint32_t gfx_ramp_delay; /* in micro-seconds */

	uint32_t thermal_auto_throttling_treshold;

	struct smu8_sys_info sys_info;

	struct smu8_power_level boot_power_level;
	struct smu8_power_state *smu8_current_ps;
	struct smu8_power_state *smu8_requested_ps;

	uint32_t mgcg_cgtt_local0;
	uint32_t mgcg_cgtt_local1;

	uint32_t tdr_clock; /* in 10khz unit */

	uint32_t ddi_power_gating_disabled;
	uint32_t disable_gfx_power_gating_in_uvd;
	uint32_t disable_nb_ps3_in_battery;

	uint32_t lock_nb_ps_in_uvd_play_back;

	struct smu8_display_phy_info display_phy_info;
	uint32_t vce_slow_sclk_threshold; /* default 200mhz */
	uint32_t dce_slow_sclk_threshold; /* default 300mhz */
	uint32_t min_sclk_did;  /* minimum sclk divider */

	bool disp_clk_bypass;
	bool disp_clk_bypass_pending;
	uint32_t bapm_enabled;
	uint32_t clock_slow_down_freq;
	uint32_t skip_clock_slow_down;
	uint32_t enable_nb_ps_policy;
	uint32_t voltage_drop_in_dce_power_gating;
	uint32_t uvd_dpm_interval;
	uint32_t override_dynamic_mgpg;
	uint32_t lclk_deep_enabled;

	uint32_t uvd_performance;

	bool video_start;
	bool battery_state;
	uint32_t lowest_valid;
	uint32_t highest_valid;
	uint32_t high_voltage_threshold;
	uint32_t is_nb_dpm_enabled;
	struct cc6_settings cc6_settings;
	uint32_t is_voltage_island_enabled;

	bool pgacpinit;

	uint8_t disp_config;

	/* PowerTune */
	uint32_t power_containment_features;
	bool cac_enabled;
	bool disable_uvd_power_tune_feature;
	bool enable_ba_pm_feature;
	bool enable_tdc_limit_feature;

	uint32_t sram_end;
	uint32_t dpm_table_start;
	uint32_t soft_regs_start;

	uint8_t uvd_level_count;
	uint8_t vce_level_count;

	uint8_t acp_level_count;
	uint8_t samu_level_count;
	uint32_t fps_high_threshold;
	uint32_t fps_low_threshold;

	uint32_t dpm_flags;
	struct smu8_dpm_entry sclk_dpm;
	struct smu8_dpm_entry uvd_dpm;
	struct smu8_dpm_entry vce_dpm;
	struct smu8_dpm_entry acp_dpm;

	uint8_t uvd_boot_level;
	uint8_t vce_boot_level;
	uint8_t acp_boot_level;
	uint8_t samu_boot_level;
	uint8_t uvd_interval;
	uint8_t vce_interval;
	uint8_t acp_interval;
	uint8_t samu_interval;

	uint8_t graphics_interval;
	uint8_t graphics_therm_throttle_enable;
	uint8_t graphics_voltage_change_enable;

	uint8_t graphics_clk_slow_enable;
	uint8_t graphics_clk_slow_divider;

	uint32_t display_cac;
	uint32_t low_sclk_interrupt_threshold;

	uint32_t dram_log_addr_h;
	uint32_t dram_log_addr_l;
	uint32_t dram_log_phy_addr_h;
	uint32_t dram_log_phy_addr_l;
	uint32_t dram_log_buff_size;

	bool uvd_power_gated;
	bool vce_power_gated;
	bool samu_power_gated;
	bool acp_power_gated;
	bool acp_power_up_no_dsp;
	uint32_t active_process_mask;

	uint32_t max_sclk_level;
	uint32_t num_of_clk_entries;
};

#endif /* _SMU8_HWMGR_H_ */
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _SMU7_THERMAL_H_
#define _SMU7_THERMAL_H_

#include "hwmgr.h"

#define SMU7_THERMAL_HIGH_ALERT_MASK         0x1
#define SMU7_THERMAL_LOW_ALERT_MASK          0x2

#define SMU7_THERMAL_MINIMUM_TEMP_READING    -256
#define SMU7_THERMAL_MAXIMUM_TEMP_READING    255

#define SMU7_THERMAL_MINIMUM_ALERT_TEMP      0
#define SMU7_THERMAL_MAXIMUM_ALERT_TEMP      255

#define FDO_PWM_MODE_STATIC  1
#define FDO_PWM_MODE_STATIC_RPM 5

extern int smu7_thermal_get_temperature(struct pp_hwmgr *hwmgr);
extern int smu7_thermal_stop_thermal_controller(struct pp_hwmgr *hwmgr);
extern int smu7_fan_ctrl_get_fan_speed_info(struct pp_hwmgr *hwmgr, struct phm_fan_speed_info *fan_speed_info);
extern int smu7_fan_ctrl_get_fan_speed_pwm(struct pp_hwmgr *hwmgr, uint32_t *speed);
extern int smu7_fan_ctrl_set_default_mode(struct pp_hwmgr *hwmgr);
extern int smu7_fan_ctrl_set_static_mode(struct pp_hwmgr *hwmgr, uint32_t mode);
extern int smu7_fan_ctrl_set_fan_speed_pwm(struct pp_hwmgr *hwmgr, uint32_t speed);
extern int smu7_fan_ctrl_reset_fan_speed_to_default(struct pp_hwmgr *hwmgr);
extern int smu7_thermal_ctrl_uninitialize_thermal_controller(struct pp_hwmgr *hwmgr);
extern int smu7_fan_ctrl_set_fan_speed_rpm(struct pp_hwmgr *hwmgr, uint32_t speed);
extern int smu7_fan_ctrl_get_fan_speed_rpm(struct pp_hwmgr *hwmgr, uint32_t *speed);
extern int smu7_fan_ctrl_stop_smc_fan_control(struct pp_hwmgr *hwmgr);
extern int smu7_thermal_disable_alert(struct pp_hwmgr *hwmgr);
extern int smu7_fan_ctrl_start_smc_fan_control(struct pp_hwmgr *hwmgr);
extern int smu7_start_thermal_controller(struct pp_hwmgr *hwmgr,
				struct PP_TemperatureRange *temperature_range);
#endif

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _SMU7_POWERTUNE_H
#define _SMU7_POWERTUNE_H

#define DIDT_SQ_CTRL0__UNUSED_0_MASK    0xfffc0000
#define DIDT_SQ_CTRL0__UNUSED_0__SHIFT  0x12
#define DIDT_TD_CTRL0__UNUSED_0_MASK    0xfffc0000
#define DIDT_TD_CTRL0__UNUSED_0__SHIFT  0x12
#define DIDT_TCP_CTRL0__UNUSED_0_MASK   0xfffc0000
#define DIDT_TCP_CTRL0__UNUSED_0__SHIFT 0x12
#define DIDT_SQ_TUNING_CTRL__UNUSED_0_MASK                 0xc0000000
#define DIDT_SQ_TUNING_CTRL__UNUSED_0__SHIFT               0x0000001e
#define DIDT_TD_TUNING_CTRL__UNUSED_0_MASK                 0xc0000000
#define DIDT_TD_TUNING_CTRL__UNUSED_0__SHIFT               0x0000001e
#define DIDT_TCP_TUNING_CTRL__UNUSED_0_MASK                0xc0000000
#define DIDT_TCP_TUNING_CTRL__UNUSED_0__SHIFT              0x0000001e

/* PowerContainment Features */
#define POWERCONTAINMENT_FEATURE_DTE             0x00000001
#define POWERCONTAINMENT_FEATURE_TDCLimit        0x00000002
#define POWERCONTAINMENT_FEATURE_PkgPwrLimit     0x00000004

#define ixGC_CAC_CNTL 0x0000
#define ixDIDT_SQ_STALL_CTRL 0x0004
#define ixDIDT_SQ_TUNING_CTRL 0x0005
#define ixDIDT_TD_STALL_CTRL 0x0044
#define ixDIDT_TD_TUNING_CTRL 0x0045
#define ixDIDT_TCP_STALL_CTRL 0x0064
#define ixDIDT_TCP_TUNING_CTRL 0x0065


int smu7_enable_smc_cac(struct pp_hwmgr *hwmgr);
int smu7_disable_smc_cac(struct pp_hwmgr *hwmgr);
int smu7_enable_power_containment(struct pp_hwmgr *hwmgr);
int smu7_disable_power_containment(struct pp_hwmgr *hwmgr);
int smu7_set_power_limit(struct pp_hwmgr *hwmgr, uint32_t n);
int smu7_power_control_set_level(struct pp_hwmgr *hwmgr);
int smu7_enable_didt_config(struct pp_hwmgr *hwmgr);
int smu7_disable_didt_config(struct pp_hwmgr *hwmgr);
#endif  /* DGPU_POWERTUNE_H */

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _SMU7_HWMGR_H
#define _SMU7_HWMGR_H

#include "hwmgr.h"
#include "ppatomctrl.h"

#define SMU7_MAX_HARDWARE_POWERLEVELS   2

#define SMU7_VOLTAGE_CONTROL_NONE                   0x0
#define SMU7_VOLTAGE_CONTROL_BY_GPIO                0x1
#define SMU7_VOLTAGE_CONTROL_BY_SVID2               0x2
#define SMU7_VOLTAGE_CONTROL_MERGED                 0x3

enum gpu_pt_config_reg_type {
	GPU_CONFIGREG_MMR = 0,
	GPU_CONFIGREG_SMC_IND,
	GPU_CONFIGREG_DIDT_IND,
	GPU_CONFIGREG_GC_CAC_IND,
	GPU_CONFIGREG_CACHE,
	GPU_CONFIGREG_MAX
};

struct gpu_pt_config_reg {
	uint32_t                           offset;
	uint32_t                           mask;
	uint32_t                           shift;
	uint32_t                           value;
	enum gpu_pt_config_reg_type       type;
};

struct smu7_performance_level {
	uint32_t  memory_clock;
	uint32_t  engine_clock;
	uint16_t  pcie_gen;
	uint16_t  pcie_lane;
};

struct smu7_thermal_temperature_setting {
	long temperature_low;
	long temperature_high;
	long temperature_shutdown;
};

struct smu7_uvd_clocks {
	uint32_t  vclk;
	uint32_t  dclk;
};

struct smu7_vce_clocks {
	uint32_t  evclk;
	uint32_t  ecclk;
};

struct smu7_power_state {
	uint32_t                  magic;
	struct smu7_uvd_clocks    uvd_clks;
	struct smu7_vce_clocks    vce_clks;
	uint32_t                  sam_clk;
	uint16_t                  performance_level_count;
	bool                      dc_compatible;
	uint32_t                  sclk_threshold;
	struct smu7_performance_level  performance_levels[SMU7_MAX_HARDWARE_POWERLEVELS];
};

struct smu7_dpm_level {
	bool	enabled;
	uint32_t	value;
	uint32_t	param1;
};

#define SMU7_MAX_DEEPSLEEP_DIVIDER_ID 5
#define MAX_REGULAR_DPM_NUMBER 8
#define SMU7_MINIMUM_ENGINE_CLOCK 2500

struct smu7_single_dpm_table {
	uint32_t		count;
	struct smu7_dpm_level	dpm_levels[MAX_REGULAR_DPM_NUMBER];
};

struct smu7_dpm_table {
	struct smu7_single_dpm_table  sclk_table;
	struct smu7_single_dpm_table  mclk_table;
	struct smu7_single_dpm_table  pcie_speed_table;
	struct smu7_single_dpm_table  vddc_table;
	struct smu7_single_dpm_table  vddci_table;
	struct smu7_single_dpm_table  mvdd_table;
};

struct smu7_clock_registers {
	uint32_t  vCG_SPLL_FUNC_CNTL;
	uint32_t  vCG_SPLL_FUNC_CNTL_2;
	uint32_t  vCG_SPLL_FUNC_CNTL_3;
	uint32_t  vCG_SPLL_FUNC_CNTL_4;
	uint32_t  vCG_SPLL_SPREAD_SPECTRUM;
	uint32_t  vCG_SPLL_SPREAD_SPECTRUM_2;
	uint32_t  vDLL_CNTL;
	uint32_t  vMCLK_PWRMGT_CNTL;
	uint32_t  vMPLL_AD_FUNC_CNTL;
	uint32_t  vMPLL_DQ_FUNC_CNTL;
	uint32_t  vMPLL_FUNC_CNTL;
	uint32_t  vMPLL_FUNC_CNTL_1;
	uint32_t  vMPLL_FUNC_CNTL_2;
	uint32_t  vMPLL_SS1;
	uint32_t  vMPLL_SS2;
};

#define DISABLE_MC_LOADMICROCODE   1
#define DISABLE_MC_CFGPROGRAMMING  2

struct smu7_voltage_smio_registers {
	uint32_t vS0_VID_LOWER_SMIO_CNTL;
};

#define SMU7_MAX_LEAKAGE_COUNT  8

struct smu7_leakage_voltage {
	uint16_t  count;
	uint16_t  leakage_id[SMU7_MAX_LEAKAGE_COUNT];
	uint16_t  actual_voltage[SMU7_MAX_LEAKAGE_COUNT];
};

struct smu7_vbios_boot_state {
	uint16_t    mvdd_bootup_value;
	uint16_t    vddc_bootup_value;
	uint16_t    vddci_bootup_value;
	uint16_t    vddgfx_bootup_value;
	uint32_t    sclk_bootup_value;
	uint32_t    mclk_bootup_value;
	uint16_t    pcie_gen_bootup_value;
	uint16_t    pcie_lane_bootup_value;
};

struct smu7_display_timing {
	uint32_t  min_clock_in_sr;
	uint32_t  num_existing_displays;
	uint32_t  vrefresh;
};

struct smu7_dpmlevel_enable_mask {
	uint32_t  uvd_dpm_enable_mask;
	uint32_t  vce_dpm_enable_mask;
	uint32_t  acp_dpm_enable_mask;
	uint32_t  samu_dpm_enable_mask;
	uint32_t  sclk_dpm_enable_mask;
	uint32_t  mclk_dpm_enable_mask;
	uint32_t  pcie_dpm_enable_mask;
};

struct smu7_pcie_perf_range {
	uint16_t  max;
	uint16_t  min;
};

struct smu7_odn_clock_voltage_dependency_table {
	uint32_t count;
	phm_ppt_v1_clock_voltage_dependency_record entries[MAX_REGULAR_DPM_NUMBER];
};

struct smu7_odn_dpm_table {
	struct phm_odn_clock_levels		odn_core_clock_dpm_levels;
	struct phm_odn_clock_levels		odn_memory_clock_dpm_levels;
	struct smu7_odn_clock_voltage_dependency_table	vdd_dependency_on_sclk;
	struct smu7_odn_clock_voltage_dependency_table	vdd_dependency_on_mclk;
	uint32_t					odn_mclk_min_limit;
	uint32_t min_vddc;
	uint32_t max_vddc;
};

struct profile_mode_setting {
	uint8_t bupdate_sclk;
	uint8_t sclk_up_hyst;
	uint8_t sclk_down_hyst;
	uint16_t sclk_activity;
	uint8_t bupdate_mclk;
	uint8_t mclk_up_hyst;
	uint8_t mclk_down_hyst;
	uint16_t mclk_activity;
};

struct smu7_mclk_latency_entries {
	uint32_t  frequency;
	uint32_t  latency;
};

struct smu7_mclk_latency_table {
	uint32_t  count;
	struct smu7_mclk_latency_entries  entries[MAX_REGULAR_DPM_NUMBER];
};

struct smu7_hwmgr {
	struct smu7_dpm_table			dpm_table;
	struct smu7_dpm_table			golden_dpm_table;
	struct smu7_odn_dpm_table		odn_dpm_table;
	struct smu7_mclk_latency_table		mclk_latency_table;

	uint32_t						voting_rights_clients[8];
	uint32_t						static_screen_threshold_unit;
	uint32_t						static_screen_threshold;
	uint32_t						voltage_control;
	uint32_t						vdd_gfx_control;
	uint32_t						vddc_vddgfx_delta;
	uint32_t						active_auto_throttle_sources;

	struct smu7_clock_registers            clock_registers;

	bool                           is_memory_gddr5;
	uint16_t                       acpi_vddc;
	bool                           pspp_notify_required;
	uint16_t                       force_pcie_gen;
	uint16_t                       acpi_pcie_gen;
	uint32_t                       pcie_gen_cap;
	uint32_t                       pcie_lane_cap;
	uint32_t                       pcie_spc_cap;
	struct smu7_leakage_voltage          vddc_leakage;
	struct smu7_leakage_voltage          vddci_leakage;
	struct smu7_leakage_voltage          vddcgfx_leakage;

	uint32_t                             mvdd_control;
	uint32_t                             vddc_mask_low;
	uint32_t                             mvdd_mask_low;
	uint16_t                            max_vddc_in_pptable;
	uint16_t                            min_vddc_in_pptable;
	uint16_t                            max_vddci_in_pptable;
	uint16_t                            min_vddci_in_pptable;
	bool                                is_uvd_enabled;
	struct smu7_vbios_boot_state        vbios_boot_state;

	bool                           pcie_performance_request;
	bool                           battery_state;
	bool                           mclk_ignore_signal;
	bool                           is_tlu_enabled;
	bool                           disable_handshake;
	bool                           smc_voltage_control_enabled;
	bool                           vbi_time_out_support;

	uint32_t                       soft_regs_start;
	/* ---- Stuff originally coming from Evergreen ---- */
	uint32_t                             vddci_control;
	struct pp_atomctrl_voltage_table     vddc_voltage_table;
	struct pp_atomctrl_voltage_table     vddci_voltage_table;
	struct pp_atomctrl_voltage_table     mvdd_voltage_table;
	struct pp_atomctrl_voltage_table     vddgfx_voltage_table;

	uint32_t                             mgcg_cgtt_local2;
	uint32_t                             mgcg_cgtt_local3;
	uint32_t                             gpio_debug;
	uint32_t                             mc_micro_code_feature;
	uint32_t                             highest_mclk;
	uint16_t                             acpi_vddci;
	uint8_t                              mvdd_high_index;
	uint8_t                              mvdd_low_index;
	bool                                 dll_default_on;
	bool                                 performance_request_registered;

	/* ---- Low Power Features ---- */
	bool                           ulv_supported;

	/* ---- CAC Stuff ---- */
	uint32_t                       cac_table_start;
	bool                           cac_configuration_required;
	bool                           driver_calculate_cac_leakage;
	bool                           cac_enabled;

	/* ---- DPM2 Parameters ---- */
	uint32_t                       power_containment_features;
	bool                           enable_dte_feature;
	bool                           enable_tdc_limit_feature;
	bool                           enable_pkg_pwr_tracking_feature;
	bool                           disable_uvd_power_tune_feature;


	uint32_t                       dte_tj_offset;
	uint32_t                       fast_watermark_threshold;

	/* ---- Phase Shedding ---- */
	uint8_t                           vddc_phase_shed_control;

	/* ---- DI/DT ---- */
	struct smu7_display_timing        display_timing;

	/* ---- Thermal Temperature Setting ---- */
	struct smu7_thermal_temperature_setting  thermal_temp_setting;
	struct smu7_dpmlevel_enable_mask     dpm_level_enable_mask;
	uint32_t                                  need_update_smu7_dpm_table;
	uint32_t                                  sclk_dpm_key_disabled;
	uint32_t                                  mclk_dpm_key_disabled;
	uint32_t                                  pcie_dpm_key_disabled;
	uint32_t                                  min_engine_clocks;
	struct smu7_pcie_perf_range          pcie_gen_performance;
	struct smu7_pcie_perf_range          pcie_lane_performance;
	struct smu7_pcie_perf_range          pcie_gen_power_saving;
	struct smu7_pcie_perf_range          pcie_lane_power_saving;
	bool                                      use_pcie_performance_levels;
	bool                                      use_pcie_power_saving_levels;
	uint32_t                                  mclk_dpm0_activity_target;
	uint32_t                                  low_sclk_interrupt_threshold;
	uint32_t                                  last_mclk_dpm_enable_mask;
	bool                                      uvd_enabled;

	/* ---- Power Gating States ---- */
	bool                           uvd_power_gated;
	bool                           vce_power_gated;
	bool                           need_long_memory_training;

	/* Application power optimization parameters */
	bool                               update_up_hyst;
	bool                               update_down_hyst;
	uint32_t                           down_hyst;
	uint32_t                           up_hyst;
	uint32_t disable_dpm_mask;
	bool apply_optimized_settings;

	uint32_t                              avfs_vdroop_override_setting;
	bool                                  apply_avfs_cks_off_voltage;
	uint32_t                              frame_time_x2;
	uint32_t                              last_sent_vbi_timeout;
	uint16_t                              mem_latency_high;
	uint16_t                              mem_latency_low;
	uint32_t                              vr_config;
	struct profile_mode_setting           current_profile_setting;

	uint32_t                              ro_range_minimum;
	uint32_t                              ro_range_maximum;

	bool                                  disable_edc_leakage_controller;
	AtomCtrl_HiLoLeakageOffsetTable       edc_hilo_leakage_offset_from_vbios;
	AtomCtrl_EDCLeakgeTable               edc_leakage_table;
};

/* To convert to Q8.8 format for firmware */
#define SMU7_Q88_FORMAT_CONVERSION_UNIT             256

enum SMU7_I2CLineID {
	SMU7_I2CLineID_DDC1 = 0x90,
	SMU7_I2CLineID_DDC2 = 0x91,
	SMU7_I2CLineID_DDC3 = 0x92,
	SMU7_I2CLineID_DDC4 = 0x93,
	SMU7_I2CLineID_DDC5 = 0x94,
	SMU7_I2CLineID_DDC6 = 0x95,
	SMU7_I2CLineID_SCLSDA = 0x96,
	SMU7_I2CLineID_DDCVGA = 0x97
};

#define SMU7_I2C_DDC1DATA          0
#define SMU7_I2C_DDC1CLK           1
#define SMU7_I2C_DDC2DATA          2
#define SMU7_I2C_DDC2CLK           3
#define SMU7_I2C_DDC3DATA          4
#define SMU7_I2C_DDC3CLK           5
#define SMU7_I2C_SDA               40
#define SMU7_I2C_SCL               41
#define SMU7_I2C_DDC4DATA          65
#define SMU7_I2C_DDC4CLK           66
#define SMU7_I2C_DDC5DATA          0x48
#define SMU7_I2C_DDC5CLK           0x49
#define SMU7_I2C_DDC6DATA          0x4a
#define SMU7_I2C_DDC6CLK           0x4b
#define SMU7_I2C_DDCVGADATA        0x4c
#define SMU7_I2C_DDCVGACLK         0x4d

#define SMU7_UNUSED_GPIO_PIN       0x7F
uint8_t smu7_get_sleep_divider_id_from_clock(uint32_t clock,
		uint32_t clock_insr);
#endif

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _SMU7_DYN_DEFAULTS_H
#define _SMU7_DYN_DEFAULTS_H


/*  We need to fill in the default values */


#define SMU7_VOTINGRIGHTSCLIENTS_DFLT0              0x3FFFC102
#define SMU7_VOTINGRIGHTSCLIENTS_DFLT1              0x000400
#define SMU7_VOTINGRIGHTSCLIENTS_DFLT2              0xC00080
#define SMU7_VOTINGRIGHTSCLIENTS_DFLT3              0xC00200
#define SMU7_VOTINGRIGHTSCLIENTS_DFLT4              0xC01680
#define SMU7_VOTINGRIGHTSCLIENTS_DFLT5              0xC00033
#define SMU7_VOTINGRIGHTSCLIENTS_DFLT6              0xC00033
#define SMU7_VOTINGRIGHTSCLIENTS_DFLT7              0x3FFFC000


#define SMU7_THERMALPROTECTCOUNTER_DFLT            0x200
#define SMU7_STATICSCREENTHRESHOLDUNIT_DFLT        0
#define SMU7_STATICSCREENTHRESHOLD_DFLT            0x00C8
#define SMU7_GFXIDLECLOCKSTOPTHRESHOLD_DFLT        0x200
#define SMU7_REFERENCEDIVIDER_DFLT                  4

#define SMU7_ULVVOLTAGECHANGEDELAY_DFLT             1687

#define SMU7_CGULVPARAMETER_DFLT                    0x00040035
#define SMU7_CGULVCONTROL_DFLT                      0x00007450
#define SMU7_TARGETACTIVITY_DFLT                     50
#define SMU7_MCLK_TARGETACTIVITY_DFLT                10
#define SMU7_SCLK_TARGETACTIVITY_DFLT                30
#endif

/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _SMU7_CLOCK_POWER_GATING_H_
#define _SMU7_CLOCK_POWER_GATING_H_

#include "smu7_hwmgr.h"

void smu7_powergate_vce(struct pp_hwmgr *hwmgr, bool bgate);
void smu7_powergate_uvd(struct pp_hwmgr *hwmgr, bool bgate);
int smu7_powerdown_uvd(struct pp_hwmgr *hwmgr);
int smu7_powergate_acp(struct pp_hwmgr *hwmgr, bool bgate);
int smu7_disable_clock_power_gating(struct pp_hwmgr *hwmgr);
int smu7_update_clock_gatings(struct pp_hwmgr *hwmgr,
					const uint32_t *msg_id);
int smu7_powergate_gfx(struct pp_hwmgr *hwmgr, bool enable);

#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __SMU7_BACO_H__
#define __SMU7_BACO_H__
#include "hwmgr.h"
#include "common_baco.h"

extern int smu7_baco_get_capability(struct pp_hwmgr *hwmgr, bool *cap);
extern int smu7_baco_get_state(struct pp_hwmgr *hwmgr, enum BACO_STATE *state);
extern int smu7_baco_set_state(struct pp_hwmgr *hwmgr, enum BACO_STATE state);

#endif
/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU10_INC_H
#define SMU10_INC_H


#include "asic_reg/mp/mp_10_0_default.h"
#include "asic_reg/mp/mp_10_0_offset.h"
#include "asic_reg/mp/mp_10_0_sh_mask.h"

#include "asic_reg/nbio/nbio_7_0_default.h"
#include "asic_reg/nbio/nbio_7_0_offset.h"
#include "asic_reg/nbio/nbio_7_0_sh_mask.h"

#include "asic_reg/thm/thm_10_0_default.h"
#include "asic_reg/thm/thm_10_0_offset.h"
#include "asic_reg/thm/thm_10_0_sh_mask.h"


#define ixDDI_PHY_GEN_STATUS                       0x3FCE8

#endif
/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SMU10_HWMGR_H
#define SMU10_HWMGR_H

#include "hwmgr.h"
#include "smu10_inc.h"
#include "smu10_driver_if.h"
#include "rv_ppsmc.h"


#define SMU10_MAX_HARDWARE_POWERLEVELS               8
#define SMU10_DYNCLK_NUMBER_OF_TREND_COEFFICIENTS   15

#define DPMFlags_SCLK_Enabled                     0x00000001
#define DPMFlags_UVD_Enabled                      0x00000002
#define DPMFlags_VCE_Enabled                      0x00000004
#define DPMFlags_ACP_Enabled                      0x00000008
#define DPMFlags_ForceHighestValid                0x40000000

/* Do not change the following, it is also defined in SMU8.h */
#define SMU_EnabledFeatureScoreboard_AcpDpmOn     0x00000001
#define SMU_EnabledFeatureScoreboard_SclkDpmOn    0x00200000
#define SMU_EnabledFeatureScoreboard_UvdDpmOn     0x01000000
#define SMU_EnabledFeatureScoreboard_VceDpmOn     0x02000000

#define SMU_PHYID_SHIFT      8

#define SMU10_PCIE_POWERGATING_TARGET_GFX            0
#define SMU10_PCIE_POWERGATING_TARGET_DDI            1
#define SMU10_PCIE_POWERGATING_TARGET_PLLCASCADE     2
#define SMU10_PCIE_POWERGATING_TARGET_PHY            3

enum VQ_TYPE {
	CLOCK_TYPE_DCLK = 0L,
	CLOCK_TYPE_ECLK,
	CLOCK_TYPE_SCLK,
	CLOCK_TYPE_CCLK,
	VQ_GFX_CU
};

#define SUSTAINABLE_SCLK_MASK  0x00ffffff
#define SUSTAINABLE_SCLK_SHIFT 0
#define SUSTAINABLE_CU_MASK    0xff000000
#define SUSTAINABLE_CU_SHIFT   24

struct smu10_dpm_entry {
	uint32_t soft_min_clk;
	uint32_t hard_min_clk;
	uint32_t soft_max_clk;
	uint32_t hard_max_clk;
};

struct smu10_power_level {
	uint32_t engine_clock;
	uint8_t vddc_index;
	uint8_t ds_divider_index;
	uint8_t ss_divider_index;
	uint8_t allow_gnb_slow;
	uint8_t force_nbp_state;
	uint8_t display_wm;
	uint8_t vce_wm;
	uint8_t num_simd_to_powerdown;
	uint8_t hysteresis_up;
	uint8_t rsv[3];
};

/*used for the nbpsFlags field in smu10_power state*/
#define SMU10_POWERSTATE_FLAGS_NBPS_FORCEHIGH (1<<0)
#define SMU10_POWERSTATE_FLAGS_NBPS_LOCKTOHIGH (1<<1)
#define SMU10_POWERSTATE_FLAGS_NBPS_LOCKTOLOW (1<<2)

#define SMU10_POWERSTATE_FLAGS_BAPM_DISABLE    (1<<0)

struct smu10_uvd_clocks {
	uint32_t vclk;
	uint32_t dclk;
	uint32_t vclk_low_divider;
	uint32_t vclk_high_divider;
	uint32_t dclk_low_divider;
	uint32_t dclk_high_divider;
};

struct pp_disable_nbpslo_flags {
	union {
		struct {
			uint32_t entry : 1;
			uint32_t display : 1;
			uint32_t driver: 1;
			uint32_t vce : 1;
			uint32_t uvd : 1;
			uint32_t acp : 1;
			uint32_t reserved: 26;
		} bits;
		uint32_t u32All;
	};
};


enum smu10_pstate_previous_action {
	DO_NOTHING = 1,
	FORCE_HIGH,
	CANCEL_FORCE_HIGH
};

struct smu10_power_state {
	unsigned int magic;
	uint32_t level;
	struct smu10_uvd_clocks uvd_clocks;
	uint32_t evclk;
	uint32_t ecclk;
	uint32_t samclk;
	uint32_t acpclk;
	bool need_dfs_bypass;

	uint32_t nbps_flags;
	uint32_t bapm_flags;
	uint8_t dpm0_pg_nbps_low;
	uint8_t dpm0_pg_nbps_high;
	uint8_t dpm_x_nbps_low;
	uint8_t dpm_x_nbps_high;

	enum smu10_pstate_previous_action action;

	struct smu10_power_level levels[SMU10_MAX_HARDWARE_POWERLEVELS];
	struct pp_disable_nbpslo_flags nbpslo_flags;
};

#define SMU10_NUM_NBPSTATES        4
#define SMU10_NUM_NBPMEMORYCLOCK   2


struct smu10_display_phy_info_entry {
	uint8_t                   phy_present;
	uint8_t                   active_lane_mapping;
	uint8_t                   display_config_type;
	uint8_t                   active_num_of_lanes;
};

#define SMU10_MAX_DISPLAYPHY_IDS       10

struct smu10_display_phy_info {
	bool                         display_phy_access_initialized;
	struct smu10_display_phy_info_entry  entries[SMU10_MAX_DISPLAYPHY_IDS];
};

#define MAX_DISPLAY_CLOCK_LEVEL 8

struct smu10_system_info{
	uint8_t                      htc_tmp_lmt;
	uint8_t                      htc_hyst_lmt;
};

#define MAX_REGULAR_DPM_NUMBER 8

struct smu10_mclk_latency_entries {
	uint32_t  frequency;
	uint32_t  latency;
};

struct smu10_mclk_latency_table {
	uint32_t  count;
	struct smu10_mclk_latency_entries  entries[MAX_REGULAR_DPM_NUMBER];
};

struct smu10_clock_voltage_dependency_record {
	uint32_t clk;
	uint32_t vol;
};


struct smu10_voltage_dependency_table {
	uint32_t count;
	struct smu10_clock_voltage_dependency_record entries[];
};

struct smu10_clock_voltage_information {
	struct smu10_voltage_dependency_table    *vdd_dep_on_dcefclk;
	struct smu10_voltage_dependency_table    *vdd_dep_on_socclk;
	struct smu10_voltage_dependency_table    *vdd_dep_on_fclk;
	struct smu10_voltage_dependency_table    *vdd_dep_on_mclk;
	struct smu10_voltage_dependency_table    *vdd_dep_on_dispclk;
	struct smu10_voltage_dependency_table    *vdd_dep_on_dppclk;
	struct smu10_voltage_dependency_table    *vdd_dep_on_phyclk;
};

struct smu10_hwmgr {
	uint32_t disable_driver_thermal_policy;
	uint32_t thermal_auto_throttling_treshold;
	struct smu10_system_info sys_info;
	struct smu10_mclk_latency_table mclk_latency_table;

	uint32_t ddi_power_gating_disabled;

	struct smu10_display_phy_info_entry            display_phy_info;
	uint32_t dce_slow_sclk_threshold;

	bool disp_clk_bypass;
	bool disp_clk_bypass_pending;
	uint32_t bapm_enabled;

	bool video_start;
	bool battery_state;

	uint32_t is_nb_dpm_enabled;
	uint32_t is_voltage_island_enabled;
	uint32_t disable_smu_acp_s3_handshake;
	uint32_t disable_notify_smu_vpu_recovery;
	bool                           in_vpu_recovery;
	bool pg_acp_init;
	uint8_t disp_config;

	/* PowerTune */
	uint32_t power_containment_features;
	bool cac_enabled;
	bool disable_uvd_power_tune_feature;
	bool enable_bapm_feature;
	bool enable_tdc_limit_feature;


	/* SMC SRAM Address of firmware header tables */
	uint32_t sram_end;
	uint32_t dpm_table_start;
	uint32_t soft_regs_start;

	/* start of SMU7_Fusion_DpmTable */

	uint8_t uvd_level_count;
	uint8_t vce_level_count;
	uint8_t acp_level_count;
	uint8_t samu_level_count;

	uint32_t fps_high_threshold;
	uint32_t fps_low_threshold;

	uint32_t dpm_flags;
	struct smu10_dpm_entry sclk_dpm;
	struct smu10_dpm_entry uvd_dpm;
	struct smu10_dpm_entry vce_dpm;
	struct smu10_dpm_entry acp_dpm;
	bool acp_power_up_no_dsp;

	uint32_t max_sclk_level;
	uint32_t num_of_clk_entries;

	/* CPU Power State */
	uint32_t                          separation_time;
	bool                              cc6_disable;
	bool                              pstate_disable;
	bool                              cc6_setting_changed;

	uint32_t                             ulTotalActiveCUs;

	bool                           isp_tileA_power_gated;
	bool                           isp_tileB_power_gated;
	uint32_t                       isp_actual_hard_min_freq;
	uint32_t                       soc_actual_hard_min_freq;
	uint32_t                       dcf_actual_hard_min_freq;

	uint32_t                        f_actual_hard_min_freq;
	uint32_t                        fabric_actual_soft_min_freq;
	uint32_t                        vclk_soft_min;
	uint32_t                        dclk_soft_min;
	uint32_t                        gfx_actual_soft_min_freq;
	uint32_t                        gfx_actual_soft_max_freq;
	uint32_t                        gfx_min_freq_limit;
	uint32_t                        gfx_max_freq_limit; /* in 10Khz*/

	bool                           vcn_power_gated;
	bool                           vcn_dpg_mode;

	bool                           gfx_off_controled_by_driver;
	bool                           water_marks_exist;
	Watermarks_t                      water_marks_table;
	struct smu10_clock_voltage_information   clock_vol_info;
	DpmClocks_t                       clock_table;

	uint32_t active_process_mask;
	bool need_min_deep_sleep_dcefclk;
	uint32_t                             deep_sleep_dcefclk;
	uint32_t                             num_active_display;

	bool							fine_grain_enabled;
};

struct pp_hwmgr;

int smu10_init_function_pointers(struct pp_hwmgr *hwmgr);

/* UMD PState SMU10 Msg Parameters in MHz */
#define SMU10_UMD_PSTATE_GFXCLK                 700
#define SMU10_UMD_PSTATE_SOCCLK                 626
#define SMU10_UMD_PSTATE_FCLK                   933
#define SMU10_UMD_PSTATE_VCE                    0x03C00320
#define SMU10_UMD_PSTATE_PROFILE_VCE            0x02AD0229

#define SMU10_UMD_PSTATE_PEAK_SOCCLK            757
#define SMU10_UMD_PSTATE_PEAK_FCLK              1200

#define SMU10_UMD_PSTATE_MIN_FCLK               400
#define SMU10_UMD_PSTATE_MIN_SOCCLK             200
#define SMU10_UMD_PSTATE_MIN_VCE                0x0190012C

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * Interface Functions related to the BIOS PowerPlay Tables.
 *
 */

#ifndef PROCESSPPTABLES_H
#define PROCESSPPTABLES_H

struct pp_hwmgr;
struct pp_power_state;
struct pp_hw_power_state;

extern const struct pp_table_func pptable_funcs;

typedef int (*pp_tables_hw_clock_info_callback)(struct pp_hwmgr *hwmgr,
						struct pp_hw_power_state *hw_ps,
						unsigned int index,
						const void *clock_info);

int pp_tables_get_num_of_entries(struct pp_hwmgr *hwmgr,
				 unsigned long *num_of_entries);

int pp_tables_get_entry(struct pp_hwmgr *hwmgr,
			unsigned long entry_index,
			struct pp_power_state *ps,
			pp_tables_hw_clock_info_callback func);

int pp_tables_get_response_times(struct pp_hwmgr *hwmgr,
				 uint32_t *vol_rep_time, uint32_t *bb_rep_time);

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _PROCESSPPTABLES_V1_0_H
#define _PROCESSPPTABLES_V1_0_H

#include "hwmgr.h"

extern const struct pp_table_func pptable_v1_0_funcs;
extern int get_number_of_powerplay_table_entries_v1_0(struct pp_hwmgr *hwmgr);
extern int get_powerplay_table_entry_v1_0(struct pp_hwmgr *hwmgr, uint32_t entry_index,
		struct pp_power_state *power_state, int (*call_back_func)(struct pp_hwmgr *, void *,
				struct pp_power_state *, void *, uint32_t));

#endif

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef TONGA_PPTABLE_H
#define TONGA_PPTABLE_H

/** \file
 * This is a PowerPlay table header file
 */
#pragma pack(push, 1)

#include "hwmgr.h"

#define ATOM_TONGA_PP_FANPARAMETERS_TACHOMETER_PULSES_PER_REVOLUTION_MASK 0x0f
#define ATOM_TONGA_PP_FANPARAMETERS_NOFAN                                 0x80    /* No fan is connected to this controller. */

#define ATOM_TONGA_PP_THERMALCONTROLLER_NONE      0
#define ATOM_TONGA_PP_THERMALCONTROLLER_LM96163   17
#define ATOM_TONGA_PP_THERMALCONTROLLER_TONGA     21
#define ATOM_TONGA_PP_THERMALCONTROLLER_FIJI      22

/*
 * Thermal controller 'combo type' to use an external controller for Fan control and an internal controller for thermal.
 * We probably should reserve the bit 0x80 for this use.
 * To keep the number of these types low we should also use the same code for all ASICs (i.e. do not distinguish RV6xx and RV7xx Internal here).
 * The driver can pick the correct internal controller based on the ASIC.
 */

#define ATOM_TONGA_PP_THERMALCONTROLLER_ADT7473_WITH_INTERNAL   0x89    /* ADT7473 Fan Control + Internal Thermal Controller */
#define ATOM_TONGA_PP_THERMALCONTROLLER_EMC2103_WITH_INTERNAL   0x8D    /* EMC2103 Fan Control + Internal Thermal Controller */

/*/* ATOM_TONGA_POWERPLAYTABLE::ulPlatformCaps */
#define ATOM_TONGA_PP_PLATFORM_CAP_VDDGFX_CONTROL              0x1            /* This cap indicates whether vddgfx will be a separated power rail. */
#define ATOM_TONGA_PP_PLATFORM_CAP_POWERPLAY                   0x2            /* This cap indicates whether this is a mobile part and CCC need to show Powerplay page. */
#define ATOM_TONGA_PP_PLATFORM_CAP_SBIOSPOWERSOURCE            0x4            /* This cap indicates whether power source notificaiton is done by SBIOS directly. */
#define ATOM_TONGA_PP_PLATFORM_CAP_DISABLE_VOLTAGE_ISLAND      0x8            /* Enable the option to overwrite voltage island feature to be disabled, regardless of VddGfx power rail support. */
#define ____RETIRE16____                                0x10
#define ATOM_TONGA_PP_PLATFORM_CAP_HARDWAREDC                 0x20            /* This cap indicates whether power source notificaiton is done by GPIO directly. */
#define ____RETIRE64____                                0x40
#define ____RETIRE128____                               0x80
#define ____RETIRE256____                              0x100
#define ____RETIRE512____                              0x200
#define ____RETIRE1024____                             0x400
#define ____RETIRE2048____                             0x800
#define ATOM_TONGA_PP_PLATFORM_CAP_MVDD_CONTROL             0x1000            /* This cap indicates dynamic MVDD is required. Uncheck to disable it. */
#define ____RETIRE2000____                            0x2000
#define ____RETIRE4000____                            0x4000
#define ATOM_TONGA_PP_PLATFORM_CAP_VDDCI_CONTROL            0x8000            /* This cap indicates dynamic VDDCI is required. Uncheck to disable it. */
#define ____RETIRE10000____                          0x10000
#define ATOM_TONGA_PP_PLATFORM_CAP_BACO                    0x20000            /* Enable to indicate the driver supports BACO state. */

#define ATOM_TONGA_PP_PLATFORM_CAP_OUTPUT_THERMAL2GPIO17         0x100000     /* Enable to indicate the driver supports thermal2GPIO17. */
#define ATOM_TONGA_PP_PLATFORM_COMBINE_PCC_WITH_THERMAL_SIGNAL  0x1000000     /* Enable to indicate if thermal and PCC are sharing the same GPIO */
#define ATOM_TONGA_PLATFORM_LOAD_POST_PRODUCTION_FIRMWARE       0x2000000

/* ATOM_PPLIB_NONCLOCK_INFO::usClassification */
#define ATOM_PPLIB_CLASSIFICATION_UI_MASK               0x0007
#define ATOM_PPLIB_CLASSIFICATION_UI_SHIFT              0
#define ATOM_PPLIB_CLASSIFICATION_UI_NONE               0
#define ATOM_PPLIB_CLASSIFICATION_UI_BATTERY            1
#define ATOM_PPLIB_CLASSIFICATION_UI_BALANCED           3
#define ATOM_PPLIB_CLASSIFICATION_UI_PERFORMANCE        5
/* 2, 4, 6, 7 are reserved */

#define ATOM_PPLIB_CLASSIFICATION_BOOT                  0x0008
#define ATOM_PPLIB_CLASSIFICATION_THERMAL               0x0010
#define ATOM_PPLIB_CLASSIFICATION_LIMITEDPOWERSOURCE    0x0020
#define ATOM_PPLIB_CLASSIFICATION_REST                  0x0040
#define ATOM_PPLIB_CLASSIFICATION_FORCED                0x0080
#define ATOM_PPLIB_CLASSIFICATION_ACPI                  0x1000

/* ATOM_PPLIB_NONCLOCK_INFO::usClassification2 */
#define ATOM_PPLIB_CLASSIFICATION2_LIMITEDPOWERSOURCE_2 0x0001

#define ATOM_Tonga_DISALLOW_ON_DC                       0x00004000
#define ATOM_Tonga_ENABLE_VARIBRIGHT                    0x00008000

#define ATOM_Tonga_TABLE_REVISION_TONGA                 7

typedef struct _ATOM_Tonga_POWERPLAYTABLE {
	ATOM_COMMON_TABLE_HEADER sHeader;

	UCHAR  ucTableRevision;
	USHORT usTableSize;						/*the size of header structure */

	ULONG	ulGoldenPPID;
	ULONG	ulGoldenRevision;
	USHORT	usFormatID;

	USHORT	usVoltageTime;					 /*in microseconds */
	ULONG	ulPlatformCaps;					  /*See ATOM_Tonga_CAPS_* */

	ULONG	ulMaxODEngineClock; 			   /*For Overdrive.  */
	ULONG	ulMaxODMemoryClock; 			   /*For Overdrive. */

	USHORT	usPowerControlLimit;
	USHORT	usUlvVoltageOffset;				  /*in mv units */

	USHORT	usStateArrayOffset;				  /*points to ATOM_Tonga_State_Array */
	USHORT	usFanTableOffset;				  /*points to ATOM_Tonga_Fan_Table */
	USHORT	usThermalControllerOffset;		   /*points to ATOM_Tonga_Thermal_Controller */
	USHORT	usReserv;						   /*CustomThermalPolicy removed for Tonga. Keep this filed as reserved. */

	USHORT	usMclkDependencyTableOffset;	   /*points to ATOM_Tonga_MCLK_Dependency_Table */
	USHORT	usSclkDependencyTableOffset;	   /*points to ATOM_Tonga_SCLK_Dependency_Table */
	USHORT	usVddcLookupTableOffset;		   /*points to ATOM_Tonga_Voltage_Lookup_Table */
	USHORT	usVddgfxLookupTableOffset; 		/*points to ATOM_Tonga_Voltage_Lookup_Table */

	USHORT	usMMDependencyTableOffset;		  /*points to ATOM_Tonga_MM_Dependency_Table */

	USHORT	usVCEStateTableOffset;			   /*points to ATOM_Tonga_VCE_State_Table; */

	USHORT	usPPMTableOffset;				  /*points to ATOM_Tonga_PPM_Table */
	USHORT	usPowerTuneTableOffset;			  /*points to ATOM_PowerTune_Table */

	USHORT	usHardLimitTableOffset; 		   /*points to ATOM_Tonga_Hard_Limit_Table */

	USHORT	usPCIETableOffset;				  /*points to ATOM_Tonga_PCIE_Table */

	USHORT	usGPIOTableOffset;				  /*points to ATOM_Tonga_GPIO_Table */

	USHORT	usReserved[6];					   /*TODO: modify reserved size to fit structure aligning */
} ATOM_Tonga_POWERPLAYTABLE;

typedef struct _ATOM_Tonga_State {
	UCHAR  ucEngineClockIndexHigh;
	UCHAR  ucEngineClockIndexLow;

	UCHAR  ucMemoryClockIndexHigh;
	UCHAR  ucMemoryClockIndexLow;

	UCHAR  ucPCIEGenLow;
	UCHAR  ucPCIEGenHigh;

	UCHAR  ucPCIELaneLow;
	UCHAR  ucPCIELaneHigh;

	USHORT usClassification;
	ULONG ulCapsAndSettings;
	USHORT usClassification2;
	UCHAR  ucUnused[4];
} ATOM_Tonga_State;

typedef struct _ATOM_Tonga_State_Array {
	UCHAR ucRevId;
	UCHAR ucNumEntries;		/* Number of entries. */
	ATOM_Tonga_State entries[1];	/* Dynamically allocate entries. */
} ATOM_Tonga_State_Array;

typedef struct _ATOM_Tonga_MCLK_Dependency_Record {
	UCHAR  ucVddcInd;	/* Vddc voltage */
	USHORT usVddci;
	USHORT usVddgfxOffset;	/* Offset relative to Vddc voltage */
	USHORT usMvdd;
	ULONG ulMclk;
	USHORT usReserved;
} ATOM_Tonga_MCLK_Dependency_Record;

typedef struct _ATOM_Tonga_MCLK_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries; 										/* Number of entries. */
	ATOM_Tonga_MCLK_Dependency_Record entries[1];				/* Dynamically allocate entries. */
} ATOM_Tonga_MCLK_Dependency_Table;

typedef struct _ATOM_Tonga_SCLK_Dependency_Record {
	UCHAR  ucVddInd;											/* Base voltage */
	USHORT usVddcOffset;										/* Offset relative to base voltage */
	ULONG ulSclk;
	USHORT usEdcCurrent;
	UCHAR  ucReliabilityTemperature;
	UCHAR  ucCKSVOffsetandDisable;							  /* Bits 0~6: Voltage offset for CKS, Bit 7: Disable/enable for the SCLK level. */
} ATOM_Tonga_SCLK_Dependency_Record;

typedef struct _ATOM_Tonga_SCLK_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries; 										/* Number of entries. */
	ATOM_Tonga_SCLK_Dependency_Record entries[1];				 /* Dynamically allocate entries. */
} ATOM_Tonga_SCLK_Dependency_Table;

typedef struct _ATOM_Polaris_SCLK_Dependency_Record {
	UCHAR  ucVddInd;											/* Base voltage */
	USHORT usVddcOffset;										/* Offset relative to base voltage */
	ULONG ulSclk;
	USHORT usEdcCurrent;
	UCHAR  ucReliabilityTemperature;
	UCHAR  ucCKSVOffsetandDisable;			/* Bits 0~6: Voltage offset for CKS, Bit 7: Disable/enable for the SCLK level. */
	ULONG  ulSclkOffset;
} ATOM_Polaris_SCLK_Dependency_Record;

typedef struct _ATOM_Polaris_SCLK_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;							/* Number of entries. */
	ATOM_Polaris_SCLK_Dependency_Record entries[1];				 /* Dynamically allocate entries. */
} ATOM_Polaris_SCLK_Dependency_Table;

typedef struct _ATOM_Tonga_PCIE_Record {
	UCHAR ucPCIEGenSpeed;
	UCHAR usPCIELaneWidth;
	UCHAR ucReserved[2];
} ATOM_Tonga_PCIE_Record;

typedef struct _ATOM_Tonga_PCIE_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries; 										/* Number of entries. */
	ATOM_Tonga_PCIE_Record entries[1];							/* Dynamically allocate entries. */
} ATOM_Tonga_PCIE_Table;

typedef struct _ATOM_Polaris10_PCIE_Record {
	UCHAR ucPCIEGenSpeed;
	UCHAR usPCIELaneWidth;
	UCHAR ucReserved[2];
	ULONG ulPCIE_Sclk;
} ATOM_Polaris10_PCIE_Record;

typedef struct _ATOM_Polaris10_PCIE_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;                                         /* Number of entries. */
	ATOM_Polaris10_PCIE_Record entries[1];                      /* Dynamically allocate entries. */
} ATOM_Polaris10_PCIE_Table;


typedef struct _ATOM_Tonga_MM_Dependency_Record {
	UCHAR   ucVddcInd;											 /* VDDC voltage */
	USHORT  usVddgfxOffset;									  /* Offset relative to VDDC voltage */
	ULONG  ulDClk;												/* UVD D-clock */
	ULONG  ulVClk;												/* UVD V-clock */
	ULONG  ulEClk;												/* VCE clock */
	ULONG  ulAClk;												/* ACP clock */
	ULONG  ulSAMUClk;											/* SAMU clock */
} ATOM_Tonga_MM_Dependency_Record;

typedef struct _ATOM_Tonga_MM_Dependency_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries; 										/* Number of entries. */
	ATOM_Tonga_MM_Dependency_Record entries[1]; 			   /* Dynamically allocate entries. */
} ATOM_Tonga_MM_Dependency_Table;

typedef struct _ATOM_Tonga_Voltage_Lookup_Record {
	USHORT usVdd;											   /* Base voltage */
	USHORT usCACLow;
	USHORT usCACMid;
	USHORT usCACHigh;
} ATOM_Tonga_Voltage_Lookup_Record;

typedef struct _ATOM_Tonga_Voltage_Lookup_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries; 										/* Number of entries. */
	ATOM_Tonga_Voltage_Lookup_Record entries[1];				/* Dynamically allocate entries. */
} ATOM_Tonga_Voltage_Lookup_Table;

typedef struct _ATOM_Tonga_Fan_Table {
	UCHAR   ucRevId;						 /* Change this if the table format changes or version changes so that the other fields are not the same. */
	UCHAR   ucTHyst;						 /* Temperature hysteresis. Integer. */
	USHORT  usTMin; 						 /* The temperature, in 0.01 centigrades, below which we just run at a minimal PWM. */
	USHORT  usTMed; 						 /* The middle temperature where we change slopes. */
	USHORT  usTHigh;						 /* The high point above TMed for adjusting the second slope. */
	USHORT  usPWMMin;						 /* The minimum PWM value in percent (0.01% increments). */
	USHORT  usPWMMed;						 /* The PWM value (in percent) at TMed. */
	USHORT  usPWMHigh;						 /* The PWM value at THigh. */
	USHORT  usTMax; 						 /* The max temperature */
	UCHAR   ucFanControlMode;				  /* Legacy or Fuzzy Fan mode */
	USHORT  usFanPWMMax;					  /* Maximum allowed fan power in percent */
	USHORT  usFanOutputSensitivity;		  /* Sensitivity of fan reaction to temepature changes */
	USHORT  usFanRPMMax;					  /* The default value in RPM */
	ULONG  ulMinFanSCLKAcousticLimit;	   /* Minimum Fan Controller SCLK Frequency Acoustic Limit. */
	UCHAR   ucTargetTemperature;			 /* Advanced fan controller target temperature. */
	UCHAR   ucMinimumPWMLimit; 			  /* The minimum PWM that the advanced fan controller can set.	This should be set to the highest PWM that will run the fan at its lowest RPM. */
	USHORT  usReserved;
} ATOM_Tonga_Fan_Table;

typedef struct _ATOM_Fiji_Fan_Table {
	UCHAR   ucRevId;						 /* Change this if the table format changes or version changes so that the other fields are not the same. */
	UCHAR   ucTHyst;						 /* Temperature hysteresis. Integer. */
	USHORT  usTMin; 						 /* The temperature, in 0.01 centigrades, below which we just run at a minimal PWM. */
	USHORT  usTMed; 						 /* The middle temperature where we change slopes. */
	USHORT  usTHigh;						 /* The high point above TMed for adjusting the second slope. */
	USHORT  usPWMMin;						 /* The minimum PWM value in percent (0.01% increments). */
	USHORT  usPWMMed;						 /* The PWM value (in percent) at TMed. */
	USHORT  usPWMHigh;						 /* The PWM value at THigh. */
	USHORT  usTMax; 						 /* The max temperature */
	UCHAR   ucFanControlMode;				  /* Legacy or Fuzzy Fan mode */
	USHORT  usFanPWMMax;					  /* Maximum allowed fan power in percent */
	USHORT  usFanOutputSensitivity;		  /* Sensitivity of fan reaction to temepature changes */
	USHORT  usFanRPMMax;					  /* The default value in RPM */
	ULONG  ulMinFanSCLKAcousticLimit;		/* Minimum Fan Controller SCLK Frequency Acoustic Limit. */
	UCHAR   ucTargetTemperature;			 /* Advanced fan controller target temperature. */
	UCHAR   ucMinimumPWMLimit; 			  /* The minimum PWM that the advanced fan controller can set.	This should be set to the highest PWM that will run the fan at its lowest RPM. */
	USHORT  usFanGainEdge;
	USHORT  usFanGainHotspot;
	USHORT  usFanGainLiquid;
	USHORT  usFanGainVrVddc;
	USHORT  usFanGainVrMvdd;
	USHORT  usFanGainPlx;
	USHORT  usFanGainHbm;
	USHORT  usReserved;
} ATOM_Fiji_Fan_Table;

typedef struct _ATOM_Polaris_Fan_Table {
	UCHAR   ucRevId;						 /* Change this if the table format changes or version changes so that the other fields are not the same. */
	UCHAR   ucTHyst;						 /* Temperature hysteresis. Integer. */
	USHORT  usTMin; 						 /* The temperature, in 0.01 centigrades, below which we just run at a minimal PWM. */
	USHORT  usTMed; 						 /* The middle temperature where we change slopes. */
	USHORT  usTHigh;						 /* The high point above TMed for adjusting the second slope. */
	USHORT  usPWMMin;						 /* The minimum PWM value in percent (0.01% increments). */
	USHORT  usPWMMed;						 /* The PWM value (in percent) at TMed. */
	USHORT  usPWMHigh;						 /* The PWM value at THigh. */
	USHORT  usTMax; 						 /* The max temperature */
	UCHAR   ucFanControlMode;				  /* Legacy or Fuzzy Fan mode */
	USHORT  usFanPWMMax;					  /* Maximum allowed fan power in percent */
	USHORT  usFanOutputSensitivity;		  /* Sensitivity of fan reaction to temepature changes */
	USHORT  usFanRPMMax;					  /* The default value in RPM */
	ULONG  ulMinFanSCLKAcousticLimit;		/* Minimum Fan Controller SCLK Frequency Acoustic Limit. */
	UCHAR   ucTargetTemperature;			 /* Advanced fan controller target temperature. */
	UCHAR   ucMinimumPWMLimit; 			  /* The minimum PWM that the advanced fan controller can set.	This should be set to the highest PWM that will run the fan at its lowest RPM. */
	USHORT  usFanGainEdge;
	USHORT  usFanGainHotspot;
	USHORT  usFanGainLiquid;
	USHORT  usFanGainVrVddc;
	USHORT  usFanGainVrMvdd;
	USHORT  usFanGainPlx;
	USHORT  usFanGainHbm;
	UCHAR   ucEnableZeroRPM;
	UCHAR   ucFanStopTemperature;
	UCHAR   ucFanStartTemperature;
	USHORT  usReserved;
} ATOM_Polaris_Fan_Table;

typedef struct _ATOM_Tonga_Thermal_Controller {
	UCHAR ucRevId;
	UCHAR ucType;		   /* one of ATOM_TONGA_PP_THERMALCONTROLLER_* */
	UCHAR ucI2cLine;		/* as interpreted by DAL I2C */
	UCHAR ucI2cAddress;
	UCHAR ucFanParameters;	/* Fan Control Parameters. */
	UCHAR ucFanMinRPM; 	 /* Fan Minimum RPM (hundreds) -- for display purposes only. */
	UCHAR ucFanMaxRPM; 	 /* Fan Maximum RPM (hundreds) -- for display purposes only. */
	UCHAR ucReserved;
	UCHAR ucFlags;		   /* to be defined */
} ATOM_Tonga_Thermal_Controller;

typedef struct _ATOM_Tonga_VCE_State_Record {
	UCHAR  ucVCEClockIndex;	/*index into usVCEDependencyTableOffset of 'ATOM_Tonga_MM_Dependency_Table' type */
	UCHAR  ucFlag;		/* 2 bits indicates memory p-states */
	UCHAR  ucSCLKIndex;		/*index into ATOM_Tonga_SCLK_Dependency_Table */
	UCHAR  ucMCLKIndex;		/*index into ATOM_Tonga_MCLK_Dependency_Table */
} ATOM_Tonga_VCE_State_Record;

typedef struct _ATOM_Tonga_VCE_State_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;
	ATOM_Tonga_VCE_State_Record entries[1];
} ATOM_Tonga_VCE_State_Table;

typedef struct _ATOM_Tonga_PowerTune_Table {
	UCHAR  ucRevId;
	USHORT usTDP;
	USHORT usConfigurableTDP;
	USHORT usTDC;
	USHORT usBatteryPowerLimit;
	USHORT usSmallPowerLimit;
	USHORT usLowCACLeakage;
	USHORT usHighCACLeakage;
	USHORT usMaximumPowerDeliveryLimit;
	USHORT usTjMax;
	USHORT usPowerTuneDataSetID;
	USHORT usEDCLimit;
	USHORT usSoftwareShutdownTemp;
	USHORT usClockStretchAmount;
	USHORT usReserve[2];
} ATOM_Tonga_PowerTune_Table;

typedef struct _ATOM_Fiji_PowerTune_Table {
	UCHAR  ucRevId;
	USHORT usTDP;
	USHORT usConfigurableTDP;
	USHORT usTDC;
	USHORT usBatteryPowerLimit;
	USHORT usSmallPowerLimit;
	USHORT usLowCACLeakage;
	USHORT usHighCACLeakage;
	USHORT usMaximumPowerDeliveryLimit;
	USHORT usTjMax;  /* For Fiji, this is also usTemperatureLimitEdge; */
	USHORT usPowerTuneDataSetID;
	USHORT usEDCLimit;
	USHORT usSoftwareShutdownTemp;
	USHORT usClockStretchAmount;
	USHORT usTemperatureLimitHotspot;  /*The following are added for Fiji */
	USHORT usTemperatureLimitLiquid1;
	USHORT usTemperatureLimitLiquid2;
	USHORT usTemperatureLimitVrVddc;
	USHORT usTemperatureLimitVrMvdd;
	USHORT usTemperatureLimitPlx;
	UCHAR  ucLiquid1_I2C_address;  /*Liquid */
	UCHAR  ucLiquid2_I2C_address;
	UCHAR  ucLiquid_I2C_Line;
	UCHAR  ucVr_I2C_address;	/*VR */
	UCHAR  ucVr_I2C_Line;
	UCHAR  ucPlx_I2C_address;  /*PLX */
	UCHAR  ucPlx_I2C_Line;
	USHORT usReserved;
} ATOM_Fiji_PowerTune_Table;

typedef struct _ATOM_Polaris_PowerTune_Table
{
    UCHAR  ucRevId;
    USHORT usTDP;
    USHORT usConfigurableTDP;
    USHORT usTDC;
    USHORT usBatteryPowerLimit;
    USHORT usSmallPowerLimit;
    USHORT usLowCACLeakage;
    USHORT usHighCACLeakage;
    USHORT usMaximumPowerDeliveryLimit;
    USHORT usTjMax;  // For Fiji, this is also usTemperatureLimitEdge;
    USHORT usPowerTuneDataSetID;
    USHORT usEDCLimit;
    USHORT usSoftwareShutdownTemp;
    USHORT usClockStretchAmount;
    USHORT usTemperatureLimitHotspot;  //The following are added for Fiji
    USHORT usTemperatureLimitLiquid1;
    USHORT usTemperatureLimitLiquid2;
    USHORT usTemperatureLimitVrVddc;
    USHORT usTemperatureLimitVrMvdd;
    USHORT usTemperatureLimitPlx;
    UCHAR  ucLiquid1_I2C_address;  //Liquid
    UCHAR  ucLiquid2_I2C_address;
    UCHAR  ucLiquid_I2C_Line;
    UCHAR  ucVr_I2C_address;  //VR
    UCHAR  ucVr_I2C_Line;
    UCHAR  ucPlx_I2C_address;  //PLX
    UCHAR  ucPlx_I2C_Line;
    USHORT usBoostPowerLimit;
    UCHAR  ucCKS_LDO_REFSEL;
    UCHAR  ucHotSpotOnly;
    UCHAR  ucReserve;
    USHORT usReserve;
} ATOM_Polaris_PowerTune_Table;

#define ATOM_PPM_A_A    1
#define ATOM_PPM_A_I    2
typedef struct _ATOM_Tonga_PPM_Table {
	UCHAR   ucRevId;
	UCHAR   ucPpmDesign;		  /*A+I or A+A */
	USHORT  usCpuCoreNumber;
	ULONG  ulPlatformTDP;
	ULONG  ulSmallACPlatformTDP;
	ULONG  ulPlatformTDC;
	ULONG  ulSmallACPlatformTDC;
	ULONG  ulApuTDP;
	ULONG  ulDGpuTDP;
	ULONG  ulDGpuUlvPower;
	ULONG  ulTjmax;
} ATOM_Tonga_PPM_Table;

typedef struct _ATOM_Tonga_Hard_Limit_Record {
	ULONG  ulSCLKLimit;
	ULONG  ulMCLKLimit;
	USHORT  usVddcLimit;
	USHORT  usVddciLimit;
	USHORT  usVddgfxLimit;
} ATOM_Tonga_Hard_Limit_Record;

typedef struct _ATOM_Tonga_Hard_Limit_Table {
	UCHAR ucRevId;
	UCHAR ucNumEntries;
	ATOM_Tonga_Hard_Limit_Record entries[1];
} ATOM_Tonga_Hard_Limit_Table;

typedef struct _ATOM_Tonga_GPIO_Table {
	UCHAR  ucRevId;
	UCHAR  ucVRHotTriggeredSclkDpmIndex;		/* If VRHot signal is triggered SCLK will be limited to this DPM level */
	UCHAR  ucReserve[5];
} ATOM_Tonga_GPIO_Table;

typedef struct _PPTable_Generic_SubTable_Header {
	UCHAR  ucRevId;
} PPTable_Generic_SubTable_Header;


#pragma pack(pop)


#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PP_PCIELANES_H
#define PP_PCIELANES_H

extern uint8_t encode_pcie_lane_width(uint32_t num_lanes);
extern uint8_t decode_pcie_lane_width(uint32_t num_lanes);

#endif

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#include <asm/div64.h>

#define SHIFT_AMOUNT 16 /* We multiply all original integers with 2^SHIFT_AMOUNT to get the fInt representation */

#define PRECISION 5 /* Change this value to change the number of decimal places in the final output - 5 is a good default */

#define SHIFTED_2 (2 << SHIFT_AMOUNT)
#define MAX (1 << (SHIFT_AMOUNT - 1)) - 1 /* 32767 - Might change in the future */

/* -------------------------------------------------------------------------------
 * NEW TYPE - fINT
 * -------------------------------------------------------------------------------
 * A variable of type fInt can be accessed in 3 ways using the dot (.) operator
 * fInt A;
 * A.full => The full number as it is. Generally not easy to read
 * A.partial.real => Only the integer portion
 * A.partial.decimal => Only the fractional portion
 */
typedef union _fInt {
    int full;
    struct _partial {
        unsigned int decimal: SHIFT_AMOUNT; /*Needs to always be unsigned*/
        int real: 32 - SHIFT_AMOUNT;
    } partial;
} fInt;

/* -------------------------------------------------------------------------------
 * Function Declarations
 *  -------------------------------------------------------------------------------
 */
static fInt ConvertToFraction(int);                       /* Use this to convert an INT to a FINT */
static fInt Convert_ULONG_ToFraction(uint32_t);           /* Use this to convert an uint32_t to a FINT */
static fInt GetScaledFraction(int, int);                  /* Use this to convert an INT to a FINT after scaling it by a factor */
static int ConvertBackToInteger(fInt);                    /* Convert a FINT back to an INT that is scaled by 1000 (i.e. last 3 digits are the decimal digits) */

static fInt fNegate(fInt);                                /* Returns -1 * input fInt value */
static fInt fAdd (fInt, fInt);                            /* Returns the sum of two fInt numbers */
static fInt fSubtract (fInt A, fInt B);                   /* Returns A-B - Sometimes easier than Adding negative numbers */
static fInt fMultiply (fInt, fInt);                       /* Returns the product of two fInt numbers */
static fInt fDivide (fInt A, fInt B);                     /* Returns A/B */
static fInt fGetSquare(fInt);                             /* Returns the square of a fInt number */
static fInt fSqrt(fInt);                                  /* Returns the Square Root of a fInt number */

static int uAbs(int);                                     /* Returns the Absolute value of the Int */
static int uPow(int base, int exponent);                  /* Returns base^exponent an INT */

static void SolveQuadracticEqn(fInt, fInt, fInt, fInt[]); /* Returns the 2 roots via the array */
static bool Equal(fInt, fInt);                            /* Returns true if two fInts are equal to each other */
static bool GreaterThan(fInt A, fInt B);                  /* Returns true if A > B */

static fInt fExponential(fInt exponent);                  /* Can be used to calculate e^exponent */
static fInt fNaturalLog(fInt value);                      /* Can be used to calculate ln(value) */

/* Fuse decoding functions
 * -------------------------------------------------------------------------------------
 */
static fInt fDecodeLinearFuse(uint32_t fuse_value, fInt f_min, fInt f_range, uint32_t bitlength);
static fInt fDecodeLogisticFuse(uint32_t fuse_value, fInt f_average, fInt f_range, uint32_t bitlength);
static fInt fDecodeLeakageID (uint32_t leakageID_fuse, fInt ln_max_div_min, fInt f_min, uint32_t bitlength);

/* Internal Support Functions - Use these ONLY for testing or adding to internal functions
 * -------------------------------------------------------------------------------------
 * Some of the following functions take two INTs as their input - This is unsafe for a variety of reasons.
 */
static fInt Divide (int, int);                            /* Divide two INTs and return result as FINT */
static fInt fNegate(fInt);

static int uGetScaledDecimal (fInt);                      /* Internal function */
static int GetReal (fInt A);                              /* Internal function */

/* -------------------------------------------------------------------------------------
 * TROUBLESHOOTING INFORMATION
 * -------------------------------------------------------------------------------------
 * 1) ConvertToFraction - InputOutOfRangeException: Only accepts numbers smaller than MAX (default: 32767)
 * 2) fAdd - OutputOutOfRangeException: Output bigger than MAX (default: 32767)
 * 3) fMultiply - OutputOutOfRangeException:
 * 4) fGetSquare - OutputOutOfRangeException:
 * 5) fDivide - DivideByZeroException
 * 6) fSqrt - NegativeSquareRootException: Input cannot be a negative number
 */

/* -------------------------------------------------------------------------------------
 * START OF CODE
 * -------------------------------------------------------------------------------------
 */
static fInt fExponential(fInt exponent)        /*Can be used to calculate e^exponent*/
{
	uint32_t i;
	bool bNegated = false;

	fInt fPositiveOne = ConvertToFraction(1);
	fInt fZERO = ConvertToFraction(0);

	fInt lower_bound = Divide(78, 10000);
	fInt solution = fPositiveOne; /*Starting off with baseline of 1 */
	fInt error_term;

	static const uint32_t k_array[11] = {55452, 27726, 13863, 6931, 4055, 2231, 1178, 606, 308, 155, 78};
	static const uint32_t expk_array[11] = {2560000, 160000, 40000, 20000, 15000, 12500, 11250, 10625, 10313, 10156, 10078};

	if (GreaterThan(fZERO, exponent)) {
		exponent = fNegate(exponent);
		bNegated = true;
	}

	while (GreaterThan(exponent, lower_bound)) {
		for (i = 0; i < 11; i++) {
			if (GreaterThan(exponent, GetScaledFraction(k_array[i], 10000))) {
				exponent = fSubtract(exponent, GetScaledFraction(k_array[i], 10000));
				solution = fMultiply(solution, GetScaledFraction(expk_array[i], 10000));
			}
		}
	}

	error_term = fAdd(fPositiveOne, exponent);

	solution = fMultiply(solution, error_term);

	if (bNegated)
		solution = fDivide(fPositiveOne, solution);

	return solution;
}

static fInt fNaturalLog(fInt value)
{
	uint32_t i;
	fInt upper_bound = Divide(8, 1000);
	fInt fNegativeOne = ConvertToFraction(-1);
	fInt solution = ConvertToFraction(0); /*Starting off with baseline of 0 */
	fInt error_term;

	static const uint32_t k_array[10] = {160000, 40000, 20000, 15000, 12500, 11250, 10625, 10313, 10156, 10078};
	static const uint32_t logk_array[10] = {27726, 13863, 6931, 4055, 2231, 1178, 606, 308, 155, 78};

	while (GreaterThan(fAdd(value, fNegativeOne), upper_bound)) {
		for (i = 0; i < 10; i++) {
			if (GreaterThan(value, GetScaledFraction(k_array[i], 10000))) {
				value = fDivide(value, GetScaledFraction(k_array[i], 10000));
				solution = fAdd(solution, GetScaledFraction(logk_array[i], 10000));
			}
		}
	}

	error_term = fAdd(fNegativeOne, value);

	return (fAdd(solution, error_term));
}

static fInt fDecodeLinearFuse(uint32_t fuse_value, fInt f_min, fInt f_range, uint32_t bitlength)
{
	fInt f_fuse_value = Convert_ULONG_ToFraction(fuse_value);
	fInt f_bit_max_value = Convert_ULONG_ToFraction((uPow(2, bitlength)) - 1);

	fInt f_decoded_value;

	f_decoded_value = fDivide(f_fuse_value, f_bit_max_value);
	f_decoded_value = fMultiply(f_decoded_value, f_range);
	f_decoded_value = fAdd(f_decoded_value, f_min);

	return f_decoded_value;
}


static fInt fDecodeLogisticFuse(uint32_t fuse_value, fInt f_average, fInt f_range, uint32_t bitlength)
{
	fInt f_fuse_value = Convert_ULONG_ToFraction(fuse_value);
	fInt f_bit_max_value = Convert_ULONG_ToFraction((uPow(2, bitlength)) - 1);

	fInt f_CONSTANT_NEG13 = ConvertToFraction(-13);
	fInt f_CONSTANT1 = ConvertToFraction(1);

	fInt f_decoded_value;

	f_decoded_value = fSubtract(fDivide(f_bit_max_value, f_fuse_value), f_CONSTANT1);
	f_decoded_value = fNaturalLog(f_decoded_value);
	f_decoded_value = fMultiply(f_decoded_value, fDivide(f_range, f_CONSTANT_NEG13));
	f_decoded_value = fAdd(f_decoded_value, f_average);

	return f_decoded_value;
}

static fInt fDecodeLeakageID (uint32_t leakageID_fuse, fInt ln_max_div_min, fInt f_min, uint32_t bitlength)
{
	fInt fLeakage;
	fInt f_bit_max_value = Convert_ULONG_ToFraction((uPow(2, bitlength)) - 1);

	fLeakage = fMultiply(ln_max_div_min, Convert_ULONG_ToFraction(leakageID_fuse));
	fLeakage = fDivide(fLeakage, f_bit_max_value);
	fLeakage = fExponential(fLeakage);
	fLeakage = fMultiply(fLeakage, f_min);

	return fLeakage;
}

static fInt ConvertToFraction(int X) /*Add all range checking here. Is it possible to make fInt a private declaration? */
{
	fInt temp;

	if (X <= MAX)
		temp.full = (X << SHIFT_AMOUNT);
	else
		temp.full = 0;

	return temp;
}

static fInt fNegate(fInt X)
{
	fInt CONSTANT_NEGONE = ConvertToFraction(-1);
	return (fMultiply(X, CONSTANT_NEGONE));
}

static fInt Convert_ULONG_ToFraction(uint32_t X)
{
	fInt temp;

	if (X <= MAX)
		temp.full = (X << SHIFT_AMOUNT);
	else
		temp.full = 0;

	return temp;
}

static fInt GetScaledFraction(int X, int factor)
{
	int times_shifted, factor_shifted;
	bool bNEGATED;
	fInt fValue;

	times_shifted = 0;
	factor_shifted = 0;
	bNEGATED = false;

	if (X < 0) {
		X = -1*X;
		bNEGATED = true;
	}

	if (factor < 0) {
		factor = -1*factor;
		bNEGATED = !bNEGATED; /*If bNEGATED = true due to X < 0, this will cover the case of negative cancelling negative */
	}

	if ((X > MAX) || factor > MAX) {
		if ((X/factor) <= MAX) {
			while (X > MAX) {
				X = X >> 1;
				times_shifted++;
			}

			while (factor > MAX) {
				factor = factor >> 1;
				factor_shifted++;
			}
		} else {
			fValue.full = 0;
			return fValue;
		}
	}

	if (factor == 1)
		return ConvertToFraction(X);

	fValue = fDivide(ConvertToFraction(X * uPow(-1, bNEGATED)), ConvertToFraction(factor));

	fValue.full = fValue.full << times_shifted;
	fValue.full = fValue.full >> factor_shifted;

	return fValue;
}

/* Addition using two fInts */
static fInt fAdd (fInt X, fInt Y)
{
	fInt Sum;

	Sum.full = X.full + Y.full;

	return Sum;
}

/* Addition using two fInts */
static fInt fSubtract (fInt X, fInt Y)
{
	fInt Difference;

	Difference.full = X.full - Y.full;

	return Difference;
}

static bool Equal(fInt A, fInt B)
{
	if (A.full == B.full)
		return true;
	else
		return false;
}

static bool GreaterThan(fInt A, fInt B)
{
	if (A.full > B.full)
		return true;
	else
		return false;
}

static fInt fMultiply (fInt X, fInt Y) /* Uses 64-bit integers (int64_t) */
{
	fInt Product;
	int64_t tempProduct;

	/*The following is for a very specific common case: Non-zero number with ONLY fractional portion*/
	/* TEMPORARILY DISABLED - CAN BE USED TO IMPROVE PRECISION
	bool X_LessThanOne, Y_LessThanOne;

	X_LessThanOne = (X.partial.real == 0 && X.partial.decimal != 0 && X.full >= 0);
	Y_LessThanOne = (Y.partial.real == 0 && Y.partial.decimal != 0 && Y.full >= 0);

	if (X_LessThanOne && Y_LessThanOne) {
		Product.full = X.full * Y.full;
		return Product
	}*/

	tempProduct = ((int64_t)X.full) * ((int64_t)Y.full); /*Q(16,16)*Q(16,16) = Q(32, 32) - Might become a negative number! */
	tempProduct = tempProduct >> 16; /*Remove lagging 16 bits - Will lose some precision from decimal; */
	Product.full = (int)tempProduct; /*The int64_t will lose the leading 16 bits that were part of the integer portion */

	return Product;
}

static fInt fDivide (fInt X, fInt Y)
{
	fInt fZERO, fQuotient;
	int64_t longlongX, longlongY;

	fZERO = ConvertToFraction(0);

	if (Equal(Y, fZERO))
		return fZERO;

	longlongX = (int64_t)X.full;
	longlongY = (int64_t)Y.full;

	longlongX = longlongX << 16; /*Q(16,16) -> Q(32,32) */

	div64_s64(longlongX, longlongY); /*Q(32,32) divided by Q(16,16) = Q(16,16) Back to original format */

	fQuotient.full = (int)longlongX;
	return fQuotient;
}

static int ConvertBackToInteger (fInt A) /*THIS is the function that will be used to check with the Golden settings table*/
{
	fInt fullNumber, scaledDecimal, scaledReal;

	scaledReal.full = GetReal(A) * uPow(10, PRECISION-1); /* DOUBLE CHECK THISSSS!!! */

	scaledDecimal.full = uGetScaledDecimal(A);

	fullNumber = fAdd(scaledDecimal,scaledReal);

	return fullNumber.full;
}

static fInt fGetSquare(fInt A)
{
	return fMultiply(A,A);
}

/* x_new = x_old - (x_old^2 - C) / (2 * x_old) */
static fInt fSqrt(fInt num)
{
	fInt F_divide_Fprime, Fprime;
	fInt test;
	fInt twoShifted;
	int seed, counter, error;
	fInt x_new, x_old, C, y;

	fInt fZERO = ConvertToFraction(0);

	/* (0 > num) is the same as (num < 0), i.e., num is negative */

	if (GreaterThan(fZERO, num) || Equal(fZERO, num))
		return fZERO;

	C = num;

	if (num.partial.real > 3000)
		seed = 60;
	else if (num.partial.real > 1000)
		seed = 30;
	else if (num.partial.real > 100)
		seed = 10;
	else
		seed = 2;

	counter = 0;

	if (Equal(num, fZERO)) /*Square Root of Zero is zero */
		return fZERO;

	twoShifted = ConvertToFraction(2);
	x_new = ConvertToFraction(seed);

	do {
		counter++;

		x_old.full = x_new.full;

		test = fGetSquare(x_old); /*1.75*1.75 is reverting back to 1 when shifted down */
		y = fSubtract(test, C); /*y = f(x) = x^2 - C; */

		Fprime = fMultiply(twoShifted, x_old);
		F_divide_Fprime = fDivide(y, Fprime);

		x_new = fSubtract(x_old, F_divide_Fprime);

		error = ConvertBackToInteger(x_new) - ConvertBackToInteger(x_old);

		if (counter > 20) /*20 is already way too many iterations. If we dont have an answer by then, we never will*/
			return x_new;

	} while (uAbs(error) > 0);

	return (x_new);
}

static void SolveQuadracticEqn(fInt A, fInt B, fInt C, fInt Roots[])
{
	fInt *pRoots = &Roots[0];
	fInt temp, root_first, root_second;
	fInt f_CONSTANT10, f_CONSTANT100;

	f_CONSTANT100 = ConvertToFraction(100);
	f_CONSTANT10 = ConvertToFraction(10);

	while(GreaterThan(A, f_CONSTANT100) || GreaterThan(B, f_CONSTANT100) || GreaterThan(C, f_CONSTANT100)) {
		A = fDivide(A, f_CONSTANT10);
		B = fDivide(B, f_CONSTANT10);
		C = fDivide(C, f_CONSTANT10);
	}

	temp = fMultiply(ConvertToFraction(4), A); /* root = 4*A */
	temp = fMultiply(temp, C); /* root = 4*A*C */
	temp = fSubtract(fGetSquare(B), temp); /* root = b^2 - 4AC */
	temp = fSqrt(temp); /*root = Sqrt (b^2 - 4AC); */

	root_first = fSubtract(fNegate(B), temp); /* b - Sqrt(b^2 - 4AC) */
	root_second = fAdd(fNegate(B), temp); /* b + Sqrt(b^2 - 4AC) */

	root_first = fDivide(root_first, ConvertToFraction(2)); /* [b +- Sqrt(b^2 - 4AC)]/[2] */
	root_first = fDivide(root_first, A); /*[b +- Sqrt(b^2 - 4AC)]/[2*A] */

	root_second = fDivide(root_second, ConvertToFraction(2)); /* [b +- Sqrt(b^2 - 4AC)]/[2] */
	root_second = fDivide(root_second, A); /*[b +- Sqrt(b^2 - 4AC)]/[2*A] */

	*(pRoots + 0) = root_first;
	*(pRoots + 1) = root_second;
}

/* -----------------------------------------------------------------------------
 * SUPPORT FUNCTIONS
 * -----------------------------------------------------------------------------
 */

/* Conversion Functions */
static int GetReal (fInt A)
{
	return (A.full >> SHIFT_AMOUNT);
}

static fInt Divide (int X, int Y)
{
	fInt A, B, Quotient;

	A.full = X << SHIFT_AMOUNT;
	B.full = Y << SHIFT_AMOUNT;

	Quotient = fDivide(A, B);

	return Quotient;
}

static int uGetScaledDecimal (fInt A) /*Converts the fractional portion to whole integers - Costly function */
{
	int dec[PRECISION];
	int i, scaledDecimal = 0, tmp = A.partial.decimal;

	for (i = 0; i < PRECISION; i++) {
		dec[i] = tmp / (1 << SHIFT_AMOUNT);
		tmp = tmp - ((1 << SHIFT_AMOUNT)*dec[i]);
		tmp *= 10;
		scaledDecimal = scaledDecimal + dec[i]*uPow(10, PRECISION - 1 -i);
	}

	return scaledDecimal;
}

static int uPow(int base, int power)
{
	if (power == 0)
		return 1;
	else
		return (base)*uPow(base, power - 1);
}

static int uAbs(int X)
{
	if (X < 0)
		return (X * -1);
	else
		return X;
}

static fInt fRoundUpByStepSize(fInt A, fInt fStepSize, bool error_term)
{
	fInt solution;

	solution = fDivide(A, fStepSize);
	solution.partial.decimal = 0; /*All fractional digits changes to 0 */

	if (error_term)
		solution.partial.real += 1; /*Error term of 1 added */

	solution = fMultiply(solution, fStepSize);
	solution = fAdd(solution, fStepSize);

	return solution;
}

/*
 * Copyright 2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PP_ATOMFWCTRL_H
#define PP_ATOMFWCTRL_H

#include "hwmgr.h"

typedef enum atom_smu9_syspll0_clock_id BIOS_CLKID;

#define GetIndexIntoMasterCmdTable(FieldName) \
	(offsetof(struct atom_master_list_of_command_functions_v2_1, FieldName) / sizeof(uint16_t))
#define GetIndexIntoMasterDataTable(FieldName) \
	(offsetof(struct atom_master_list_of_data_tables_v2_1, FieldName) / sizeof(uint16_t))

#define PP_ATOMFWCTRL_MAX_VOLTAGE_ENTRIES 32

struct pp_atomfwctrl_voltage_table_entry {
	uint16_t value;
	uint32_t  smio_low;
};

struct pp_atomfwctrl_voltage_table {
	uint32_t count;
	uint32_t mask_low;
	uint32_t phase_delay;
	uint8_t psi0_enable;
	uint8_t psi1_enable;
	uint8_t max_vid_step;
	uint8_t telemetry_offset;
	uint8_t telemetry_slope;
	struct pp_atomfwctrl_voltage_table_entry entries[PP_ATOMFWCTRL_MAX_VOLTAGE_ENTRIES];
};

struct pp_atomfwctrl_gpio_pin_assignment {
	uint16_t us_gpio_pin_aindex;
	uint8_t uc_gpio_pin_bit_shift;
};

struct pp_atomfwctrl_clock_dividers_soc15 {
	uint32_t   ulClock;           /* the actual clock */
	uint32_t   ulDid;             /* DFS divider */
	uint32_t   ulPll_fb_mult;     /* Feedback Multiplier:  bit 8:0 int, bit 15:12 post_div, bit 31:16 frac */
	uint32_t   ulPll_ss_fbsmult;  /* Spread FB Multiplier: bit 8:0 int, bit 31:16 frac */
	uint16_t   usPll_ss_slew_frac;
	uint8_t    ucPll_ss_enable;
	uint8_t    ucReserve;
	uint32_t   ulReserve[2];
};

struct pp_atomfwctrl_avfs_parameters {
	uint32_t   ulMaxVddc;
	uint32_t   ulMinVddc;

	uint32_t   ulMeanNsigmaAcontant0;
	uint32_t   ulMeanNsigmaAcontant1;
	uint32_t   ulMeanNsigmaAcontant2;
	uint16_t   usMeanNsigmaDcTolSigma;
	uint16_t   usMeanNsigmaPlatformMean;
	uint16_t   usMeanNsigmaPlatformSigma;
	uint32_t   ulGbVdroopTableCksoffA0;
	uint32_t   ulGbVdroopTableCksoffA1;
	uint32_t   ulGbVdroopTableCksoffA2;
	uint32_t   ulGbVdroopTableCksonA0;
	uint32_t   ulGbVdroopTableCksonA1;
	uint32_t   ulGbVdroopTableCksonA2;

	uint32_t   ulGbFuseTableCksoffM1;
	uint32_t   ulGbFuseTableCksoffM2;
	uint32_t   ulGbFuseTableCksoffB;

	uint32_t   ulGbFuseTableCksonM1;
	uint32_t   ulGbFuseTableCksonM2;
	uint32_t   ulGbFuseTableCksonB;

	uint8_t    ucEnableGbVdroopTableCkson;
	uint8_t    ucEnableGbFuseTableCkson;
	uint16_t   usPsmAgeComfactor;

	uint32_t   ulDispclk2GfxclkM1;
	uint32_t   ulDispclk2GfxclkM2;
	uint32_t   ulDispclk2GfxclkB;
	uint32_t   ulDcefclk2GfxclkM1;
	uint32_t   ulDcefclk2GfxclkM2;
	uint32_t   ulDcefclk2GfxclkB;
	uint32_t   ulPixelclk2GfxclkM1;
	uint32_t   ulPixelclk2GfxclkM2;
	uint32_t   ulPixelclk2GfxclkB;
	uint32_t   ulPhyclk2GfxclkM1;
	uint32_t   ulPhyclk2GfxclkM2;
	uint32_t   ulPhyclk2GfxclkB;
	uint32_t   ulAcgGbVdroopTableA0;
	uint32_t   ulAcgGbVdroopTableA1;
	uint32_t   ulAcgGbVdroopTableA2;
	uint32_t   ulAcgGbFuseTableM1;
	uint32_t   ulAcgGbFuseTableM2;
	uint32_t   ulAcgGbFuseTableB;
	uint32_t   ucAcgEnableGbVdroopTable;
	uint32_t   ucAcgEnableGbFuseTable;
};

struct pp_atomfwctrl_gpio_parameters {
	uint8_t   ucAcDcGpio;
	uint8_t   ucAcDcPolarity;
	uint8_t   ucVR0HotGpio;
	uint8_t   ucVR0HotPolarity;
	uint8_t   ucVR1HotGpio;
	uint8_t   ucVR1HotPolarity;
	uint8_t   ucFwCtfGpio;
	uint8_t   ucFwCtfPolarity;
};

struct pp_atomfwctrl_bios_boot_up_values {
	uint32_t   ulRevision;
	uint32_t   ulGfxClk;
	uint32_t   ulUClk;
	uint32_t   ulSocClk;
	uint32_t   ulDCEFClk;
	uint32_t   ulEClk;
	uint32_t   ulVClk;
	uint32_t   ulDClk;
	uint32_t   ulFClk;
	uint16_t   usVddc;
	uint16_t   usVddci;
	uint16_t   usMvddc;
	uint16_t   usVddGfx;
	uint8_t    ucCoolingID;
};

struct pp_atomfwctrl_smc_dpm_parameters
{
  uint8_t  liquid1_i2c_address;
  uint8_t  liquid2_i2c_address;
  uint8_t  vr_i2c_address;
  uint8_t  plx_i2c_address;
  uint8_t  liquid_i2c_linescl;
  uint8_t  liquid_i2c_linesda;
  uint8_t  vr_i2c_linescl;
  uint8_t  vr_i2c_linesda;
  uint8_t  plx_i2c_linescl;
  uint8_t  plx_i2c_linesda;
  uint8_t  vrsensorpresent;
  uint8_t  liquidsensorpresent;
  uint16_t maxvoltagestepgfx;
  uint16_t maxvoltagestepsoc;
  uint8_t  vddgfxvrmapping;
  uint8_t  vddsocvrmapping;
  uint8_t  vddmem0vrmapping;
  uint8_t  vddmem1vrmapping;
  uint8_t  gfxulvphasesheddingmask;
  uint8_t  soculvphasesheddingmask;

  uint16_t gfxmaxcurrent;
  uint8_t  gfxoffset;
  uint8_t  padding_telemetrygfx;
  uint16_t socmaxcurrent;
  uint8_t  socoffset;
  uint8_t  padding_telemetrysoc;
  uint16_t mem0maxcurrent;
  uint8_t  mem0offset;
  uint8_t  padding_telemetrymem0;
  uint16_t mem1maxcurrent;
  uint8_t  mem1offset;
  uint8_t  padding_telemetrymem1;

  uint8_t  acdcgpio;
  uint8_t  acdcpolarity;
  uint8_t  vr0hotgpio;
  uint8_t  vr0hotpolarity;
  uint8_t  vr1hotgpio;
  uint8_t  vr1hotpolarity;
  uint8_t  padding1;
  uint8_t  padding2;

  uint8_t  ledpin0;
  uint8_t  ledpin1;
  uint8_t  ledpin2;

	uint8_t  pllgfxclkspreadenabled;
	uint8_t  pllgfxclkspreadpercent;
	uint16_t pllgfxclkspreadfreq;

  uint8_t  uclkspreadenabled;
  uint8_t  uclkspreadpercent;
  uint16_t uclkspreadfreq;

  uint8_t socclkspreadenabled;
  uint8_t socclkspreadpercent;
  uint16_t socclkspreadfreq;

	uint8_t  acggfxclkspreadenabled;
	uint8_t  acggfxclkspreadpercent;
	uint16_t acggfxclkspreadfreq;

	uint8_t Vr2_I2C_address;
};

int pp_atomfwctrl_get_gpu_pll_dividers_vega10(struct pp_hwmgr *hwmgr,
		uint32_t clock_type, uint32_t clock_value,
		struct pp_atomfwctrl_clock_dividers_soc15 *dividers);
int pp_atomfwctrl_enter_self_refresh(struct pp_hwmgr *hwmgr);
bool pp_atomfwctrl_get_pp_assign_pin(struct pp_hwmgr *hwmgr, const uint32_t pin_id,
		struct pp_atomfwctrl_gpio_pin_assignment *gpio_pin_assignment);

int pp_atomfwctrl_get_voltage_table_v4(struct pp_hwmgr *hwmgr, uint8_t voltage_type,
		uint8_t voltage_mode, struct pp_atomfwctrl_voltage_table *voltage_table);
bool pp_atomfwctrl_is_voltage_controlled_by_gpio_v4(struct pp_hwmgr *hwmgr,
		uint8_t voltage_type, uint8_t voltage_mode);

int pp_atomfwctrl_get_avfs_information(struct pp_hwmgr *hwmgr,
		struct pp_atomfwctrl_avfs_parameters *param);
int pp_atomfwctrl_get_gpio_information(struct pp_hwmgr *hwmgr,
		struct pp_atomfwctrl_gpio_parameters *param);

int pp_atomfwctrl_get_vbios_bootup_values(struct pp_hwmgr *hwmgr,
			struct pp_atomfwctrl_bios_boot_up_values *boot_values);
int pp_atomfwctrl_get_smc_dpm_information(struct pp_hwmgr *hwmgr,
			struct pp_atomfwctrl_smc_dpm_parameters *param);
int pp_atomfwctrl_get_clk_information_by_clkid(struct pp_hwmgr *hwmgr,
					uint8_t clk_id, uint8_t syspll_id,
					uint32_t *frequency);

#endif

/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PP_ATOMVOLTAGECTRL_H
#define PP_ATOMVOLTAGECTRL_H

#include "hwmgr.h"

/* As returned from PowerConnectorDetectionTable. */
#define PP_ATOM_POWER_BUDGET_DISABLE_OVERDRIVE  0x80
#define PP_ATOM_POWER_BUDGET_SHOW_WARNING       0x40
#define PP_ATOM_POWER_BUDGET_SHOW_WAIVER        0x20
#define PP_ATOM_POWER_POWER_BUDGET_BEHAVIOUR    0x0F

/* New functions for Evergreen and beyond. */
#define PP_ATOMCTRL_MAX_VOLTAGE_ENTRIES 32

struct pp_atomctrl_clock_dividers {
	uint32_t pll_post_divider;
	uint32_t pll_feedback_divider;
	uint32_t pll_ref_divider;
	bool  enable_post_divider;
};

typedef struct pp_atomctrl_clock_dividers pp_atomctrl_clock_dividers;

union pp_atomctrl_tcipll_fb_divider {
	struct {
		uint32_t ul_fb_div_frac : 14;
		uint32_t ul_fb_div : 12;
		uint32_t un_used : 6;
	};
	uint32_t ul_fb_divider;
};

typedef union pp_atomctrl_tcipll_fb_divider pp_atomctrl_tcipll_fb_divider;

struct pp_atomctrl_clock_dividers_rv730 {
	uint32_t pll_post_divider;
	pp_atomctrl_tcipll_fb_divider mpll_feedback_divider;
	uint32_t pll_ref_divider;
	bool  enable_post_divider;
	bool  enable_dithen;
	uint32_t vco_mode;
};
typedef struct pp_atomctrl_clock_dividers_rv730 pp_atomctrl_clock_dividers_rv730;


struct pp_atomctrl_clock_dividers_kong {
	uint32_t    pll_post_divider;
	uint32_t    real_clock;
};
typedef struct pp_atomctrl_clock_dividers_kong pp_atomctrl_clock_dividers_kong;

struct pp_atomctrl_clock_dividers_ci {
	uint32_t    pll_post_divider;               /* post divider value */
	uint32_t    real_clock;
	pp_atomctrl_tcipll_fb_divider   ul_fb_div;         /* Output Parameter: PLL FB divider */
	uint8_t   uc_pll_ref_div;                      /* Output Parameter: PLL ref divider */
	uint8_t   uc_pll_post_div;                      /* Output Parameter: PLL post divider */
	uint8_t   uc_pll_cntl_flag;                    /*Output Flags: control flag */
};
typedef struct pp_atomctrl_clock_dividers_ci pp_atomctrl_clock_dividers_ci;

struct pp_atomctrl_clock_dividers_vi {
	uint32_t    pll_post_divider;               /* post divider value */
	uint32_t    real_clock;
	pp_atomctrl_tcipll_fb_divider   ul_fb_div;         /*Output Parameter: PLL FB divider */
	uint8_t   uc_pll_ref_div;                      /*Output Parameter: PLL ref divider */
	uint8_t   uc_pll_post_div;                     /*Output Parameter: PLL post divider */
	uint8_t   uc_pll_cntl_flag;                    /*Output Flags: control flag */
};
typedef struct pp_atomctrl_clock_dividers_vi pp_atomctrl_clock_dividers_vi;

struct pp_atomctrl_clock_dividers_ai {
	u16 usSclk_fcw_frac;
	u16  usSclk_fcw_int;
	u8   ucSclkPostDiv;
	u8   ucSclkVcoMode;
	u8   ucSclkPllRange;
	u8   ucSscEnable;
	u16  usSsc_fcw1_frac;
	u16  usSsc_fcw1_int;
	u16  usReserved;
	u16  usPcc_fcw_int;
	u16  usSsc_fcw_slew_frac;
	u16  usPcc_fcw_slew_frac;
};
typedef struct pp_atomctrl_clock_dividers_ai pp_atomctrl_clock_dividers_ai;


union pp_atomctrl_s_mpll_fb_divider {
	struct {
		uint32_t cl_kf : 12;
		uint32_t clk_frac : 12;
		uint32_t un_used : 8;
	};
	uint32_t ul_fb_divider;
};
typedef union pp_atomctrl_s_mpll_fb_divider pp_atomctrl_s_mpll_fb_divider;

enum pp_atomctrl_spread_spectrum_mode {
	pp_atomctrl_spread_spectrum_mode_down = 0,
	pp_atomctrl_spread_spectrum_mode_center
};
typedef enum pp_atomctrl_spread_spectrum_mode pp_atomctrl_spread_spectrum_mode;

struct pp_atomctrl_memory_clock_param {
	pp_atomctrl_s_mpll_fb_divider mpll_fb_divider;
	uint32_t mpll_post_divider;
	uint32_t bw_ctrl;
	uint32_t dll_speed;
	uint32_t vco_mode;
	uint32_t yclk_sel;
	uint32_t qdr;
	uint32_t half_rate;
};
typedef struct pp_atomctrl_memory_clock_param pp_atomctrl_memory_clock_param;

struct pp_atomctrl_memory_clock_param_ai {
	uint32_t ulClock;
	uint32_t ulPostDiv;
	uint16_t ulMclk_fcw_frac;
	uint16_t ulMclk_fcw_int;
};
typedef struct pp_atomctrl_memory_clock_param_ai pp_atomctrl_memory_clock_param_ai;

struct pp_atomctrl_internal_ss_info {
	uint32_t speed_spectrum_percentage;                      /* in 1/100 percentage */
	uint32_t speed_spectrum_rate;                            /* in KHz */
	pp_atomctrl_spread_spectrum_mode speed_spectrum_mode;
};
typedef struct pp_atomctrl_internal_ss_info pp_atomctrl_internal_ss_info;

#ifndef NUMBER_OF_M3ARB_PARAMS
#define NUMBER_OF_M3ARB_PARAMS 3
#endif

#ifndef NUMBER_OF_M3ARB_PARAM_SETS
#define NUMBER_OF_M3ARB_PARAM_SETS 10
#endif

struct pp_atomctrl_kong_system_info {
	uint32_t			ul_bootup_uma_clock;          /* in 10kHz unit */
	uint16_t			us_max_nb_voltage;            /* high NB voltage, calculated using current VDDNB (D24F2xDC) and VDDNB offset fuse; */
	uint16_t			us_min_nb_voltage;            /* low NB voltage, calculated using current VDDNB (D24F2xDC) and VDDNB offset fuse; */
	uint16_t			us_bootup_nb_voltage;         /* boot up NB voltage */
	uint8_t			uc_htc_tmp_lmt;               /* bit [22:16] of D24F3x64 Hardware Thermal Control (HTC) Register, may not be needed, TBD */
	uint8_t			uc_tj_offset;                /* bit [28:22] of D24F3xE4 Thermtrip Status Register,may not be needed, TBD */
	/* 0: default 1: uvd 2: fs-3d */
	uint32_t          ul_csr_m3_srb_cntl[NUMBER_OF_M3ARB_PARAM_SETS][NUMBER_OF_M3ARB_PARAMS];/* arrays with values for CSR M3 arbiter for default */
};
typedef struct pp_atomctrl_kong_system_info pp_atomctrl_kong_system_info;

struct pp_atomctrl_memory_info {
	uint8_t memory_vendor;
	uint8_t memory_type;
};
typedef struct pp_atomctrl_memory_info pp_atomctrl_memory_info;

#define MAX_AC_TIMING_ENTRIES 16

struct pp_atomctrl_memory_clock_range_table {
	uint8_t   num_entries;
	uint8_t   rsv[3];

	uint32_t mclk[MAX_AC_TIMING_ENTRIES];
};
typedef struct pp_atomctrl_memory_clock_range_table pp_atomctrl_memory_clock_range_table;

struct pp_atomctrl_voltage_table_entry {
	uint16_t value;
	uint32_t smio_low;
};

typedef struct pp_atomctrl_voltage_table_entry pp_atomctrl_voltage_table_entry;

struct pp_atomctrl_voltage_table {
	uint32_t count;
	uint32_t mask_low;
	uint32_t phase_delay;   /* Used for ATOM_GPIO_VOLTAGE_OBJECT_V3 and later */
	pp_atomctrl_voltage_table_entry entries[PP_ATOMCTRL_MAX_VOLTAGE_ENTRIES];
};

typedef struct pp_atomctrl_voltage_table pp_atomctrl_voltage_table;

#define VBIOS_MC_REGISTER_ARRAY_SIZE           32
#define VBIOS_MAX_AC_TIMING_ENTRIES            20

struct pp_atomctrl_mc_reg_entry {
	uint32_t           mclk_max;
	uint32_t mc_data[VBIOS_MC_REGISTER_ARRAY_SIZE];
};
typedef struct pp_atomctrl_mc_reg_entry pp_atomctrl_mc_reg_entry;

struct pp_atomctrl_mc_register_address {
	uint16_t s1;
	uint8_t  uc_pre_reg_data;
};

typedef struct pp_atomctrl_mc_register_address pp_atomctrl_mc_register_address;

#define MAX_SCLK_RANGE 8

struct pp_atom_ctrl_sclk_range_table_entry{
	uint8_t  ucVco_setting;
	uint8_t  ucPostdiv;
	uint16_t usFcw_pcc;
	uint16_t usFcw_trans_upper;
	uint16_t usRcw_trans_lower;
};


struct pp_atom_ctrl_sclk_range_table{
	struct pp_atom_ctrl_sclk_range_table_entry entry[MAX_SCLK_RANGE];
};

struct pp_atomctrl_mc_reg_table {
	uint8_t                         last;                    /* number of registers */
	uint8_t                         num_entries;             /* number of AC timing entries */
	pp_atomctrl_mc_reg_entry        mc_reg_table_entry[VBIOS_MAX_AC_TIMING_ENTRIES];
	pp_atomctrl_mc_register_address mc_reg_address[VBIOS_MC_REGISTER_ARRAY_SIZE];
};
typedef struct pp_atomctrl_mc_reg_table pp_atomctrl_mc_reg_table;

struct pp_atomctrl_gpio_pin_assignment {
	uint16_t                   us_gpio_pin_aindex;
	uint8_t                    uc_gpio_pin_bit_shift;
};
typedef struct pp_atomctrl_gpio_pin_assignment pp_atomctrl_gpio_pin_assignment;

struct pp_atom_ctrl__avfs_parameters {
	uint32_t  ulAVFS_meanNsigma_Acontant0;
	uint32_t  ulAVFS_meanNsigma_Acontant1;
	uint32_t  ulAVFS_meanNsigma_Acontant2;
	uint16_t usAVFS_meanNsigma_DC_tol_sigma;
	uint16_t usAVFS_meanNsigma_Platform_mean;
	uint16_t usAVFS_meanNsigma_Platform_sigma;
	uint32_t  ulGB_VDROOP_TABLE_CKSOFF_a0;
	uint32_t  ulGB_VDROOP_TABLE_CKSOFF_a1;
	uint32_t  ulGB_VDROOP_TABLE_CKSOFF_a2;
	uint32_t  ulGB_VDROOP_TABLE_CKSON_a0;
	uint32_t  ulGB_VDROOP_TABLE_CKSON_a1;
	uint32_t  ulGB_VDROOP_TABLE_CKSON_a2;
	uint32_t  ulAVFSGB_FUSE_TABLE_CKSOFF_m1;
	uint16_t  usAVFSGB_FUSE_TABLE_CKSOFF_m2;
	uint32_t  ulAVFSGB_FUSE_TABLE_CKSOFF_b;
	uint32_t  ulAVFSGB_FUSE_TABLE_CKSON_m1;
	uint16_t  usAVFSGB_FUSE_TABLE_CKSON_m2;
	uint32_t  ulAVFSGB_FUSE_TABLE_CKSON_b;
	uint16_t  usMaxVoltage_0_25mv;
	uint8_t  ucEnableGB_VDROOP_TABLE_CKSOFF;
	uint8_t  ucEnableGB_VDROOP_TABLE_CKSON;
	uint8_t  ucEnableGB_FUSE_TABLE_CKSOFF;
	uint8_t  ucEnableGB_FUSE_TABLE_CKSON;
	uint16_t usPSM_Age_ComFactor;
	uint8_t  ucEnableApplyAVFS_CKS_OFF_Voltage;
	uint8_t  ucReserved;
};

struct _AtomCtrl_HiLoLeakageOffsetTable
{
    USHORT usHiLoLeakageThreshold;
    USHORT usEdcDidtLoDpm7TableOffset;
    USHORT usEdcDidtHiDpm7TableOffset;
};
typedef struct _AtomCtrl_HiLoLeakageOffsetTable AtomCtrl_HiLoLeakageOffsetTable;

struct _AtomCtrl_EDCLeakgeTable
{
    ULONG DIDT_REG[24];
};
typedef struct _AtomCtrl_EDCLeakgeTable AtomCtrl_EDCLeakgeTable;

extern bool atomctrl_get_pp_assign_pin(struct pp_hwmgr *hwmgr, const uint32_t pinId, pp_atomctrl_gpio_pin_assignment *gpio_pin_assignment);
extern int atomctrl_get_voltage_evv_on_sclk(struct pp_hwmgr *hwmgr, uint8_t voltage_type, uint32_t sclk, uint16_t virtual_voltage_Id, uint16_t *voltage);
extern int atomctrl_get_voltage_evv(struct pp_hwmgr *hwmgr, uint16_t virtual_voltage_id, uint16_t *voltage);
extern uint32_t atomctrl_get_mpll_reference_clock(struct pp_hwmgr *hwmgr);

bool atomctrl_is_asic_internal_ss_supported(struct pp_hwmgr *hwmgr);
extern int atomctrl_get_memory_clock_spread_spectrum(struct pp_hwmgr *hwmgr, const uint32_t memory_clock, pp_atomctrl_internal_ss_info *ssInfo);
extern int atomctrl_get_engine_clock_spread_spectrum(struct pp_hwmgr *hwmgr, const uint32_t engine_clock, pp_atomctrl_internal_ss_info *ssInfo);
extern int atomctrl_initialize_mc_reg_table(struct pp_hwmgr *hwmgr, uint8_t module_index, pp_atomctrl_mc_reg_table *table);
extern int atomctrl_initialize_mc_reg_table_v2_2(struct pp_hwmgr *hwmgr, uint8_t module_index, pp_atomctrl_mc_reg_table *table);
extern int atomctrl_set_engine_dram_timings_rv770(struct pp_hwmgr *hwmgr, uint32_t engine_clock, uint32_t memory_clock);
extern uint32_t atomctrl_get_reference_clock(struct pp_hwmgr *hwmgr);
extern int atomctrl_get_memory_pll_dividers_si(struct pp_hwmgr *hwmgr, uint32_t clock_value, pp_atomctrl_memory_clock_param *mpll_param, bool strobe_mode);
extern int atomctrl_get_engine_pll_dividers_vi(struct pp_hwmgr *hwmgr, uint32_t clock_value, pp_atomctrl_clock_dividers_vi *dividers);
extern int atomctrl_get_dfs_pll_dividers_vi(struct pp_hwmgr *hwmgr, uint32_t clock_value, pp_atomctrl_clock_dividers_vi *dividers);
extern bool atomctrl_is_voltage_controlled_by_gpio_v3(struct pp_hwmgr *hwmgr, uint8_t voltage_type, uint8_t voltage_mode);
extern int atomctrl_get_voltage_table_v3(struct pp_hwmgr *hwmgr, uint8_t voltage_type, uint8_t voltage_mode, pp_atomctrl_voltage_table *voltage_table);
extern int atomctrl_get_memory_pll_dividers_vi(struct pp_hwmgr *hwmgr,
		uint32_t clock_value, pp_atomctrl_memory_clock_param *mpll_param);
extern int atomctrl_get_memory_pll_dividers_ai(struct pp_hwmgr *hwmgr,
		uint32_t clock_value, pp_atomctrl_memory_clock_param_ai *mpll_param);
extern int atomctrl_get_engine_pll_dividers_kong(struct pp_hwmgr *hwmgr,
						 uint32_t clock_value,
						 pp_atomctrl_clock_dividers_kong *dividers);
extern int atomctrl_read_efuse(struct pp_hwmgr *hwmgr, uint16_t start_index,
		uint16_t end_index, uint32_t *efuse);
extern int atomctrl_calculate_voltage_evv_on_sclk(struct pp_hwmgr *hwmgr, uint8_t voltage_type,
		uint32_t sclk, uint16_t virtual_voltage_Id, uint16_t *voltage, uint16_t dpm_level, bool debug);
extern int atomctrl_get_engine_pll_dividers_ai(struct pp_hwmgr *hwmgr, uint32_t clock_value, pp_atomctrl_clock_dividers_ai *dividers);
extern int atomctrl_set_ac_timing_ai(struct pp_hwmgr *hwmgr, uint32_t memory_clock,
								uint8_t level);
extern int atomctrl_get_voltage_evv_on_sclk_ai(struct pp_hwmgr *hwmgr, uint8_t voltage_type,
				uint32_t sclk, uint16_t virtual_voltage_Id, uint32_t *voltage);
extern int atomctrl_get_smc_sclk_range_table(struct pp_hwmgr *hwmgr, struct pp_atom_ctrl_sclk_range_table *table);

extern int atomctrl_get_avfs_information(struct pp_hwmgr *hwmgr, struct pp_atom_ctrl__avfs_parameters *param);

extern int  atomctrl_get_svi2_info(struct pp_hwmgr *hwmgr, uint8_t voltage_type,
				uint8_t *svd_gpio_id, uint8_t *svc_gpio_id,
				uint16_t *load_line);

extern int atomctrl_get_leakage_vddc_base_on_leakage(struct pp_hwmgr *hwmgr,
					uint16_t *vddc, uint16_t *vddci,
					uint16_t virtual_voltage_id,
					uint16_t efuse_voltage_id);
extern int atomctrl_get_leakage_id_from_efuse(struct pp_hwmgr *hwmgr, uint16_t *virtual_voltage_id);

extern void atomctrl_get_voltage_range(struct pp_hwmgr *hwmgr, uint32_t *max_vddc,
							uint32_t *min_vddc);

extern int atomctrl_get_edc_hilo_leakage_offset_table(struct pp_hwmgr *hwmgr,
						      AtomCtrl_HiLoLeakageOffsetTable *table);

extern int atomctrl_get_edc_leakage_table(struct pp_hwmgr *hwmgr,
					  AtomCtrl_EDCLeakgeTable *table,
					  uint16_t offset);

extern int atomctrl_get_vddc_shared_railinfo(struct pp_hwmgr *hwmgr, uint8_t *shared_rail);
#endif

/*
 * Copyright 2017 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PP_PSM_H
#define PP_PSM_H

#include "hwmgr.h"

int psm_init_power_state_table(struct pp_hwmgr *hwmgr);
int psm_fini_power_state_table(struct pp_hwmgr *hwmgr);
int psm_set_boot_states(struct pp_hwmgr *hwmgr);
int psm_set_performance_states(struct pp_hwmgr *hwmgr);
int psm_set_user_performance_state(struct pp_hwmgr *hwmgr,
					enum PP_StateUILabel label_id,
					struct pp_power_state **state);
int psm_adjust_power_state_dynamic(struct pp_hwmgr *hwmgr,
				bool skip_display_settings,
				struct pp_power_state *new_ps);

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef _PP_OVERDRIVER_H_
#define _PP_OVERDRIVER_H_

#include <linux/types.h>
#include <linux/kernel.h>

struct phm_fuses_default {
	uint64_t key;
	uint32_t VFT2_m1;
	uint32_t VFT2_m2;
	uint32_t VFT2_b;
	uint32_t VFT1_m1;
	uint32_t VFT1_m2;
	uint32_t VFT1_b;
	uint32_t VFT0_m1;
	uint32_t VFT0_m2;
	uint32_t VFT0_b;
};

extern int pp_override_get_default_fuse_value(uint64_t key,
			struct phm_fuses_default *result);

#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __POLARIS_BACO_H__
#define __POLARIS_BACO_H__
#include "smu7_baco.h"

extern int polaris_baco_set_state(struct pp_hwmgr *hwmgr, enum BACO_STATE state);

#endif
/*
 * Copyright 2015 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PP_HWMGR_PPT_H
#define PP_HWMGR_PPT_H

#include "hardwaremanager.h"
#include "smumgr.h"
#include "atom-types.h"

struct phm_ppt_v1_clock_voltage_dependency_record {
	uint32_t clk;
	uint8_t  vddInd;
	uint8_t  vddciInd;
	uint8_t  mvddInd;
	uint16_t vdd_offset;
	uint16_t vddc;
	uint16_t vddgfx;
	uint16_t vddci;
	uint16_t mvdd;
	uint8_t  phases;
	uint8_t  cks_enable;
	uint8_t  cks_voffset;
	uint32_t sclk_offset;
};

typedef struct phm_ppt_v1_clock_voltage_dependency_record phm_ppt_v1_clock_voltage_dependency_record;

struct phm_ppt_v1_clock_voltage_dependency_table {
	uint32_t count;                                            /* Number of entries. */
	phm_ppt_v1_clock_voltage_dependency_record entries[];	   /* Dynamically allocate count entries. */
};

typedef struct phm_ppt_v1_clock_voltage_dependency_table phm_ppt_v1_clock_voltage_dependency_table;


/* Multimedia Clock Voltage Dependency records and table */
struct phm_ppt_v1_mm_clock_voltage_dependency_record {
	uint32_t  dclk;                                              /* UVD D-clock */
	uint32_t  vclk;                                              /* UVD V-clock */
	uint32_t  eclk;                                              /* VCE clock */
	uint32_t  aclk;                                              /* ACP clock */
	uint32_t  samclock;                                          /* SAMU clock */
	uint8_t	vddcInd;
	uint16_t vddgfx_offset;
	uint16_t vddc;
	uint16_t vddgfx;
	uint8_t phases;
};
typedef struct phm_ppt_v1_mm_clock_voltage_dependency_record phm_ppt_v1_mm_clock_voltage_dependency_record;

struct phm_ppt_v1_mm_clock_voltage_dependency_table {
	uint32_t count;													/* Number of entries. */
	phm_ppt_v1_mm_clock_voltage_dependency_record entries[];		/* Dynamically allocate count entries. */
};
typedef struct phm_ppt_v1_mm_clock_voltage_dependency_table phm_ppt_v1_mm_clock_voltage_dependency_table;

struct phm_ppt_v1_voltage_lookup_record {
	uint16_t us_calculated;
	uint16_t us_vdd;												/* Base voltage */
	uint16_t us_cac_low;
	uint16_t us_cac_mid;
	uint16_t us_cac_high;
};
typedef struct phm_ppt_v1_voltage_lookup_record phm_ppt_v1_voltage_lookup_record;

struct phm_ppt_v1_voltage_lookup_table {
	uint32_t count;
	phm_ppt_v1_voltage_lookup_record entries[];    /* Dynamically allocate count entries. */
};
typedef struct phm_ppt_v1_voltage_lookup_table phm_ppt_v1_voltage_lookup_table;

/* PCIE records and Table */

struct phm_ppt_v1_pcie_record {
	uint8_t gen_speed;
	uint8_t lane_width;
	uint16_t usreserved;
	uint16_t reserved;
	uint32_t pcie_sclk;
};
typedef struct phm_ppt_v1_pcie_record phm_ppt_v1_pcie_record;

struct phm_ppt_v1_pcie_table {
	uint32_t count;                                            /* Number of entries. */
	phm_ppt_v1_pcie_record entries[];			   /* Dynamically allocate count entries. */
};
typedef struct phm_ppt_v1_pcie_table phm_ppt_v1_pcie_table;

struct phm_ppt_v1_gpio_table {
	uint8_t vrhot_triggered_sclk_dpm_index;           /* SCLK DPM level index to switch to when VRHot is triggered */
};
typedef struct phm_ppt_v1_gpio_table phm_ppt_v1_gpio_table;

#endif

/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __FIJI_BACO_H__
#define __FIJI_BACO_H__
#include "smu7_baco.h"

extern int fiji_baco_set_state(struct pp_hwmgr *hwmgr, enum BACO_STATE state);

#endif
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __COMMON_BOCO_H__
#define __COMMON_BOCO_H__
#include "hwmgr.h"


enum baco_cmd_type {
	CMD_WRITE = 0,
	CMD_READMODIFYWRITE,
	CMD_WAITFOR,
	CMD_DELAY_MS,
	CMD_DELAY_US,
};

struct baco_cmd_entry {
	enum baco_cmd_type cmd;
	uint32_t 	reg_offset;
	uint32_t     	mask;
	uint32_t     	shift;
	uint32_t     	timeout;
	uint32_t     	val;
};

struct soc15_baco_cmd_entry {
	enum baco_cmd_type cmd;
	uint32_t 	hwip;
	uint32_t 	inst;
	uint32_t 	seg;
	uint32_t 	reg_offset;
	uint32_t     	mask;
	uint32_t     	shift;
	uint32_t     	timeout;
	uint32_t     	val;
};

extern bool baco_program_registers(struct pp_hwmgr *hwmgr,
				   const struct baco_cmd_entry *entry,
				   const u32 array_size);
extern bool soc15_baco_program_registers(struct pp_hwmgr *hwmgr,
					const struct soc15_baco_cmd_entry *entry,
					const u32 array_size);
#endif
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __CI_BACO_H__
#define __CI_BACO_H__
#include "smu7_baco.h"

extern int ci_baco_set_state(struct pp_hwmgr *hwmgr, enum BACO_STATE state);

#endif
/*
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef PP_SISLANDS_SMC_H
#define PP_SISLANDS_SMC_H

#include "ppsmc.h"

#pragma pack(push, 1)

#define SISLANDS_MAX_SMC_PERFORMANCE_LEVELS_PER_SWSTATE 16

struct PP_SIslands_Dpm2PerfLevel
{
    uint8_t MaxPS;
    uint8_t TgtAct;
    uint8_t MaxPS_StepInc;
    uint8_t MaxPS_StepDec;
    uint8_t PSSamplingTime;
    uint8_t NearTDPDec;
    uint8_t AboveSafeInc;
    uint8_t BelowSafeInc;
    uint8_t PSDeltaLimit;
    uint8_t PSDeltaWin;
    uint16_t PwrEfficiencyRatio;
    uint8_t Reserved[4];
};

typedef struct PP_SIslands_Dpm2PerfLevel PP_SIslands_Dpm2PerfLevel;

struct PP_SIslands_DPM2Status
{
    uint32_t    dpm2Flags;
    uint8_t     CurrPSkip;
    uint8_t     CurrPSkipPowerShift;
    uint8_t     CurrPSkipTDP;
    uint8_t     CurrPSkipOCP;
    uint8_t     MaxSPLLIndex;
    uint8_t     MinSPLLIndex;
    uint8_t     CurrSPLLIndex;
    uint8_t     InfSweepMode;
    uint8_t     InfSweepDir;
    uint8_t     TDPexceeded;
    uint8_t     reserved;
    uint8_t     SwitchDownThreshold;
    uint32_t    SwitchDownCounter;
    uint32_t    SysScalingFactor;
};

typedef struct PP_SIslands_DPM2Status PP_SIslands_DPM2Status;

struct PP_SIslands_DPM2Parameters
{
    uint32_t    TDPLimit;
    uint32_t    NearTDPLimit;
    uint32_t    SafePowerLimit;
    uint32_t    PowerBoostLimit;
    uint32_t    MinLimitDelta;
};
typedef struct PP_SIslands_DPM2Parameters PP_SIslands_DPM2Parameters;

struct PP_SIslands_PAPMStatus
{
    uint32_t    EstimatedDGPU_T;
    uint32_t    EstimatedDGPU_P;
    uint32_t    EstimatedAPU_T;
    uint32_t    EstimatedAPU_P;
    uint8_t     dGPU_T_Limit_Exceeded;
    uint8_t     reserved[3];
};
typedef struct PP_SIslands_PAPMStatus PP_SIslands_PAPMStatus;

struct PP_SIslands_PAPMParameters
{
    uint32_t    NearTDPLimitTherm;
    uint32_t    NearTDPLimitPAPM;
    uint32_t    PlatformPowerLimit;
    uint32_t    dGPU_T_Limit;
    uint32_t    dGPU_T_Warning;
    uint32_t    dGPU_T_Hysteresis;
};
typedef struct PP_SIslands_PAPMParameters PP_SIslands_PAPMParameters;

struct SISLANDS_SMC_SCLK_VALUE
{
    uint32_t    vCG_SPLL_FUNC_CNTL;
    uint32_t    vCG_SPLL_FUNC_CNTL_2;
    uint32_t    vCG_SPLL_FUNC_CNTL_3;
    uint32_t    vCG_SPLL_FUNC_CNTL_4;
    uint32_t    vCG_SPLL_SPREAD_SPECTRUM;
    uint32_t    vCG_SPLL_SPREAD_SPECTRUM_2;
    uint32_t    sclk_value;
};

typedef struct SISLANDS_SMC_SCLK_VALUE SISLANDS_SMC_SCLK_VALUE;

struct SISLANDS_SMC_MCLK_VALUE
{
    uint32_t    vMPLL_FUNC_CNTL;
    uint32_t    vMPLL_FUNC_CNTL_1;
    uint32_t    vMPLL_FUNC_CNTL_2;
    uint32_t    vMPLL_AD_FUNC_CNTL;
    uint32_t    vMPLL_DQ_FUNC_CNTL;
    uint32_t    vMCLK_PWRMGT_CNTL;
    uint32_t    vDLL_CNTL;
    uint32_t    vMPLL_SS;
    uint32_t    vMPLL_SS2;
    uint32_t    mclk_value;
};

typedef struct SISLANDS_SMC_MCLK_VALUE SISLANDS_SMC_MCLK_VALUE;

struct SISLANDS_SMC_VOLTAGE_VALUE
{
    uint16_t    value;
    uint8_t     index;
    uint8_t     phase_settings;
};

typedef struct SISLANDS_SMC_VOLTAGE_VALUE SISLANDS_SMC_VOLTAGE_VALUE;

struct SISLANDS_SMC_HW_PERFORMANCE_LEVEL
{
    uint8_t                     ACIndex;
    uint8_t                     displayWatermark;
    uint8_t                     gen2PCIE;
    uint8_t                     UVDWatermark;
    uint8_t                     VCEWatermark;
    uint8_t                     strobeMode;
    uint8_t                     mcFlags;
    uint8_t                     padding;
    uint32_t                    aT;
    uint32_t                    bSP;
    SISLANDS_SMC_SCLK_VALUE     sclk;
    SISLANDS_SMC_MCLK_VALUE     mclk;
    SISLANDS_SMC_VOLTAGE_VALUE  vddc;
    SISLANDS_SMC_VOLTAGE_VALUE  mvdd;
    SISLANDS_SMC_VOLTAGE_VALUE  vddci;
    SISLANDS_SMC_VOLTAGE_VALUE  std_vddc;
    uint8_t                     hysteresisUp;
    uint8_t                     hysteresisDown;
    uint8_t                     stateFlags;
    uint8_t                     arbRefreshState;
    uint32_t                    SQPowerThrottle;
    uint32_t                    SQPowerThrottle_2;
    uint32_t                    MaxPoweredUpCU;
    SISLANDS_SMC_VOLTAGE_VALUE  high_temp_vddc;
    SISLANDS_SMC_VOLTAGE_VALUE  low_temp_vddc;
    uint32_t                    reserved[2];
    PP_SIslands_Dpm2PerfLevel   dpm2;
};

#define SISLANDS_SMC_STROBE_RATIO    0x0F
#define SISLANDS_SMC_STROBE_ENABLE   0x10

#define SISLANDS_SMC_MC_EDC_RD_FLAG  0x01
#define SISLANDS_SMC_MC_EDC_WR_FLAG  0x02
#define SISLANDS_SMC_MC_RTT_ENABLE   0x04
#define SISLANDS_SMC_MC_STUTTER_EN   0x08
#define SISLANDS_SMC_MC_PG_EN        0x10

typedef struct SISLANDS_SMC_HW_PERFORMANCE_LEVEL SISLANDS_SMC_HW_PERFORMANCE_LEVEL;

struct SISLANDS_SMC_SWSTATE
{
	uint8_t                             flags;
	uint8_t                             levelCount;
	uint8_t                             padding2;
	uint8_t                             padding3;
	SISLANDS_SMC_HW_PERFORMANCE_LEVEL   levels[];
};

typedef struct SISLANDS_SMC_SWSTATE SISLANDS_SMC_SWSTATE;

struct SISLANDS_SMC_SWSTATE_SINGLE {
	uint8_t                             flags;
	uint8_t                             levelCount;
	uint8_t                             padding2;
	uint8_t                             padding3;
	SISLANDS_SMC_HW_PERFORMANCE_LEVEL   level;
};

#define SISLANDS_SMC_VOLTAGEMASK_VDDC  0
#define SISLANDS_SMC_VOLTAGEMASK_MVDD  1
#define SISLANDS_SMC_VOLTAGEMASK_VDDCI 2
#define SISLANDS_SMC_VOLTAGEMASK_VDDC_PHASE_SHEDDING 3
#define SISLANDS_SMC_VOLTAGEMASK_MAX   4

struct SISLANDS_SMC_VOLTAGEMASKTABLE
{
    uint32_t lowMask[SISLANDS_SMC_VOLTAGEMASK_MAX];
};

typedef struct SISLANDS_SMC_VOLTAGEMASKTABLE SISLANDS_SMC_VOLTAGEMASKTABLE;

#define SISLANDS_MAX_NO_VREG_STEPS 32

struct SISLANDS_SMC_STATETABLE
{
	uint8_t					thermalProtectType;
	uint8_t					systemFlags;
	uint8_t					maxVDDCIndexInPPTable;
	uint8_t					extraFlags;
	uint32_t				lowSMIO[SISLANDS_MAX_NO_VREG_STEPS];
	SISLANDS_SMC_VOLTAGEMASKTABLE		voltageMaskTable;
	SISLANDS_SMC_VOLTAGEMASKTABLE		phaseMaskTable;
	PP_SIslands_DPM2Parameters		dpm2Params;
	struct SISLANDS_SMC_SWSTATE_SINGLE	initialState;
	struct SISLANDS_SMC_SWSTATE_SINGLE	ACPIState;
	struct SISLANDS_SMC_SWSTATE_SINGLE	ULVState;
	SISLANDS_SMC_SWSTATE			driverState;
	SISLANDS_SMC_HW_PERFORMANCE_LEVEL	dpmLevels[SISLANDS_MAX_SMC_PERFORMANCE_LEVELS_PER_SWSTATE];
};

typedef struct SISLANDS_SMC_STATETABLE SISLANDS_SMC_STATETABLE;

#define SI_SMC_SOFT_REGISTER_mclk_chg_timeout         0x0
#define SI_SMC_SOFT_REGISTER_delay_vreg               0xC
#define SI_SMC_SOFT_REGISTER_delay_acpi               0x28
#define SI_SMC_SOFT_REGISTER_seq_index                0x5C
#define SI_SMC_SOFT_REGISTER_mvdd_chg_time            0x60
#define SI_SMC_SOFT_REGISTER_mclk_switch_lim          0x70
#define SI_SMC_SOFT_REGISTER_watermark_threshold      0x78
#define SI_SMC_SOFT_REGISTER_phase_shedding_delay     0x88
#define SI_SMC_SOFT_REGISTER_ulv_volt_change_delay    0x8C
#define SI_SMC_SOFT_REGISTER_mc_block_delay           0x98
#define SI_SMC_SOFT_REGISTER_ticks_per_us             0xA8
#define SI_SMC_SOFT_REGISTER_crtc_index               0xC4
#define SI_SMC_SOFT_REGISTER_mclk_change_block_cp_min 0xC8
#define SI_SMC_SOFT_REGISTER_mclk_change_block_cp_max 0xCC
#define SI_SMC_SOFT_REGISTER_non_ulv_pcie_link_width  0xF4
#define SI_SMC_SOFT_REGISTER_tdr_is_about_to_happen   0xFC
#define SI_SMC_SOFT_REGISTER_vr_hot_gpio              0x100
#define SI_SMC_SOFT_REGISTER_svi_rework_plat_type     0x118
#define SI_SMC_SOFT_REGISTER_svi_rework_gpio_id_svd   0x11c
#define SI_SMC_SOFT_REGISTER_svi_rework_gpio_id_svc   0x120

struct PP_SIslands_FanTable
{
	uint8_t  fdo_mode;
	uint8_t  padding;
	int16_t  temp_min;
	int16_t  temp_med;
	int16_t  temp_max;
	int16_t  slope1;
	int16_t  slope2;
	int16_t  fdo_min;
	int16_t  hys_up;
	int16_t  hys_down;
	int16_t  hys_slope;
	int16_t  temp_resp_lim;
	int16_t  temp_curr;
	int16_t  slope_curr;
	int16_t  pwm_curr;
	uint32_t refresh_period;
	int16_t  fdo_max;
	uint8_t  temp_src;
	int8_t  padding2;
};

typedef struct PP_SIslands_FanTable PP_SIslands_FanTable;

#define SMC_SISLANDS_LKGE_LUT_NUM_OF_TEMP_ENTRIES 16
#define SMC_SISLANDS_LKGE_LUT_NUM_OF_VOLT_ENTRIES 32

#define SMC_SISLANDS_SCALE_I  7
#define SMC_SISLANDS_SCALE_R 12

struct PP_SIslands_CacConfig
{
    uint16_t   cac_lkge_lut[SMC_SISLANDS_LKGE_LUT_NUM_OF_TEMP_ENTRIES][SMC_SISLANDS_LKGE_LUT_NUM_OF_VOLT_ENTRIES];
    uint32_t   lkge_lut_V0;
    uint32_t   lkge_lut_Vstep;
    uint32_t   WinTime;
    uint32_t   R_LL;
    uint32_t   calculation_repeats;
    uint32_t   l2numWin_TDP;
    uint32_t   dc_cac;
    uint8_t    lts_truncate_n;
    uint8_t    SHIFT_N;
    uint8_t    log2_PG_LKG_SCALE;
    uint8_t    cac_temp;
    uint32_t   lkge_lut_T0;
    uint32_t   lkge_lut_Tstep;
};

typedef struct PP_SIslands_CacConfig PP_SIslands_CacConfig;

#define SMC_SISLANDS_MC_REGISTER_ARRAY_SIZE 16
#define SMC_SISLANDS_MC_REGISTER_ARRAY_SET_COUNT 20

struct SMC_SIslands_MCRegisterAddress
{
    uint16_t s0;
    uint16_t s1;
};

typedef struct SMC_SIslands_MCRegisterAddress SMC_SIslands_MCRegisterAddress;

struct SMC_SIslands_MCRegisterSet
{
    uint32_t value[SMC_SISLANDS_MC_REGISTER_ARRAY_SIZE];
};

typedef struct SMC_SIslands_MCRegisterSet SMC_SIslands_MCRegisterSet;

struct SMC_SIslands_MCRegisters
{
    uint8_t                             last;
    uint8_t                             reserved[3];
    SMC_SIslands_MCRegisterAddress      address[SMC_SISLANDS_MC_REGISTER_ARRAY_SIZE];
    SMC_SIslands_MCRegisterSet          data[SMC_SISLANDS_MC_REGISTER_ARRAY_SET_COUNT];
};

typedef struct SMC_SIslands_MCRegisters SMC_SIslands_MCRegisters;

struct SMC_SIslands_MCArbDramTimingRegisterSet
{
    uint32_t mc_arb_dram_timing;
    uint32_t mc_arb_dram_timing2;
    uint8_t  mc_arb_rfsh_rate;
    uint8_t  mc_arb_burst_time;
    uint8_t  padding[2];
};

typedef struct SMC_SIslands_MCArbDramTimingRegisterSet SMC_SIslands_MCArbDramTimingRegisterSet;

struct SMC_SIslands_MCArbDramTimingRegisters
{
    uint8_t                                     arb_current;
    uint8_t                                     reserved[3];
    SMC_SIslands_MCArbDramTimingRegisterSet     data[16];
};

typedef struct SMC_SIslands_MCArbDramTimingRegisters SMC_SIslands_MCArbDramTimingRegisters;

struct SMC_SISLANDS_SPLL_DIV_TABLE
{
    uint32_t    freq[256];
    uint32_t    ss[256];
};

#define SMC_SISLANDS_SPLL_DIV_TABLE_FBDIV_MASK  0x01ffffff
#define SMC_SISLANDS_SPLL_DIV_TABLE_FBDIV_SHIFT 0
#define SMC_SISLANDS_SPLL_DIV_TABLE_PDIV_MASK   0xfe000000
#define SMC_SISLANDS_SPLL_DIV_TABLE_PDIV_SHIFT  25
#define SMC_SISLANDS_SPLL_DIV_TABLE_CLKV_MASK   0x000fffff
#define SMC_SISLANDS_SPLL_DIV_TABLE_CLKV_SHIFT  0
#define SMC_SISLANDS_SPLL_DIV_TABLE_CLKS_MASK   0xfff00000
#define SMC_SISLANDS_SPLL_DIV_TABLE_CLKS_SHIFT  20

typedef struct SMC_SISLANDS_SPLL_DIV_TABLE SMC_SISLANDS_SPLL_DIV_TABLE;

#define SMC_SISLANDS_DTE_MAX_FILTER_STAGES 5

#define SMC_SISLANDS_DTE_MAX_TEMPERATURE_DEPENDENT_ARRAY_SIZE 16

struct Smc_SIslands_DTE_Configuration
{
    uint32_t tau[SMC_SISLANDS_DTE_MAX_FILTER_STAGES];
    uint32_t R[SMC_SISLANDS_DTE_MAX_FILTER_STAGES];
    uint32_t K;
    uint32_t T0;
    uint32_t MaxT;
    uint8_t  WindowSize;
    uint8_t  Tdep_count;
    uint8_t  temp_select;
    uint8_t  DTE_mode;
    uint8_t  T_limits[SMC_SISLANDS_DTE_MAX_TEMPERATURE_DEPENDENT_ARRAY_SIZE];
    uint32_t Tdep_tau[SMC_SISLANDS_DTE_MAX_TEMPERATURE_DEPENDENT_ARRAY_SIZE];
    uint32_t Tdep_R[SMC_SISLANDS_DTE_MAX_TEMPERATURE_DEPENDENT_ARRAY_SIZE];
    uint32_t Tthreshold;
};

typedef struct Smc_SIslands_DTE_Configuration Smc_SIslands_DTE_Configuration;

#define SMC_SISLANDS_DTE_STATUS_FLAG_DTE_ON 1

#define SISLANDS_SMC_FIRMWARE_HEADER_LOCATION 0x10000

#define SISLANDS_SMC_FIRMWARE_HEADER_version                   0x0
#define SISLANDS_SMC_FIRMWARE_HEADER_flags                     0x4
#define SISLANDS_SMC_FIRMWARE_HEADER_softRegisters             0xC
#define SISLANDS_SMC_FIRMWARE_HEADER_stateTable                0x10
#define SISLANDS_SMC_FIRMWARE_HEADER_fanTable                  0x14
#define SISLANDS_SMC_FIRMWARE_HEADER_CacConfigTable            0x18
#define SISLANDS_SMC_FIRMWARE_HEADER_mcRegisterTable           0x24
#define SISLANDS_SMC_FIRMWARE_HEADER_mcArbDramAutoRefreshTable 0x30
#define SISLANDS_SMC_FIRMWARE_HEADER_spllTable                 0x38
#define SISLANDS_SMC_FIRMWARE_HEADER_DteConfiguration          0x40
#define SISLANDS_SMC_FIRMWARE_HEADER_PAPMParameters            0x48

#pragma pack(pop)

int amdgpu_si_copy_bytes_to_smc(struct amdgpu_device *adev,
				u32 smc_start_address,
				const u8 *src, u32 byte_count, u32 limit);
void amdgpu_si_start_smc(struct amdgpu_device *adev);
void amdgpu_si_reset_smc(struct amdgpu_device *adev);
int amdgpu_si_program_jump_on_start(struct amdgpu_device *adev);
void amdgpu_si_smc_clock(struct amdgpu_device *adev, bool enable);
bool amdgpu_si_is_smc_running(struct amdgpu_device *adev);
PPSMC_Result amdgpu_si_send_msg_to_smc(struct amdgpu_device *adev, PPSMC_Msg msg);
PPSMC_Result amdgpu_si_wait_for_smc_inactive(struct amdgpu_device *adev);
int amdgpu_si_load_smc_ucode(struct amdgpu_device *adev, u32 limit);
int amdgpu_si_read_smc_sram_dword(struct amdgpu_device *adev, u32 smc_address,
				  u32 *value, u32 limit);
int amdgpu_si_write_smc_sram_dword(struct amdgpu_device *adev, u32 smc_address,
				   u32 value, u32 limit);

#endif

/*
 * Copyright 2012 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __SI_DPM_H__
#define __SI_DPM_H__

#include "amdgpu_atombios.h"
#include "sislands_smc.h"

#define MC_CG_CONFIG                                    0x96f
#define MC_ARB_CG                                       0x9fa
#define		CG_ARB_REQ(x)				((x) << 0)
#define		CG_ARB_REQ_MASK				(0xff << 0)

#define	MC_ARB_DRAM_TIMING_1				0x9fc
#define	MC_ARB_DRAM_TIMING_2				0x9fd
#define	MC_ARB_DRAM_TIMING_3				0x9fe
#define	MC_ARB_DRAM_TIMING2_1				0x9ff
#define	MC_ARB_DRAM_TIMING2_2				0xa00
#define	MC_ARB_DRAM_TIMING2_3				0xa01

#define MAX_NO_OF_MVDD_VALUES 2
#define MAX_NO_VREG_STEPS 32
#define NISLANDS_MAX_SMC_PERFORMANCE_LEVELS_PER_SWSTATE 16
#define SMC_NISLANDS_MC_REGISTER_ARRAY_SIZE 32
#define SMC_NISLANDS_MC_REGISTER_ARRAY_SET_COUNT 20
#define RV770_ASI_DFLT                                1000
#define CYPRESS_HASI_DFLT                               400000
#define PCIE_PERF_REQ_PECI_GEN1         2
#define PCIE_PERF_REQ_PECI_GEN2         3
#define PCIE_PERF_REQ_PECI_GEN3         4
#define RV770_DEFAULT_VCLK_FREQ  53300 /* 10 khz */
#define RV770_DEFAULT_DCLK_FREQ  40000 /* 10 khz */

#define SMC_EVERGREEN_MC_REGISTER_ARRAY_SIZE 16

#define RV770_SMC_TABLE_ADDRESS 0xB000
#define RV770_SMC_PERFORMANCE_LEVELS_PER_SWSTATE    3

#define SMC_STROBE_RATIO    0x0F
#define SMC_STROBE_ENABLE   0x10

#define SMC_MC_EDC_RD_FLAG  0x01
#define SMC_MC_EDC_WR_FLAG  0x02
#define SMC_MC_RTT_ENABLE   0x04
#define SMC_MC_STUTTER_EN   0x08

#define RV770_SMC_VOLTAGEMASK_VDDC 0
#define RV770_SMC_VOLTAGEMASK_MVDD 1
#define RV770_SMC_VOLTAGEMASK_VDDCI 2
#define RV770_SMC_VOLTAGEMASK_MAX  4

#define NISLANDS_MAX_SMC_PERFORMANCE_LEVELS_PER_SWSTATE 16
#define NISLANDS_SMC_STROBE_RATIO    0x0F
#define NISLANDS_SMC_STROBE_ENABLE   0x10

#define NISLANDS_SMC_MC_EDC_RD_FLAG  0x01
#define NISLANDS_SMC_MC_EDC_WR_FLAG  0x02
#define NISLANDS_SMC_MC_RTT_ENABLE   0x04
#define NISLANDS_SMC_MC_STUTTER_EN   0x08

#define MAX_NO_VREG_STEPS 32

#define NISLANDS_SMC_VOLTAGEMASK_VDDC  0
#define NISLANDS_SMC_VOLTAGEMASK_MVDD  1
#define NISLANDS_SMC_VOLTAGEMASK_VDDCI 2
#define NISLANDS_SMC_VOLTAGEMASK_MAX   4

#define SISLANDS_MCREGISTERTABLE_INITIAL_SLOT               0
#define SISLANDS_MCREGISTERTABLE_ACPI_SLOT                  1
#define SISLANDS_MCREGISTERTABLE_ULV_SLOT                   2
#define SISLANDS_MCREGISTERTABLE_FIRST_DRIVERSTATE_SLOT     3

#define SISLANDS_LEAKAGE_INDEX0     0xff01
#define SISLANDS_MAX_LEAKAGE_COUNT  4

#define SISLANDS_MAX_HARDWARE_POWERLEVELS 5
#define SISLANDS_INITIAL_STATE_ARB_INDEX    0
#define SISLANDS_ACPI_STATE_ARB_INDEX       1
#define SISLANDS_ULV_STATE_ARB_INDEX        2
#define SISLANDS_DRIVER_STATE_ARB_INDEX     3

#define SISLANDS_DPM2_MAX_PULSE_SKIP        256

#define SISLANDS_DPM2_NEAR_TDP_DEC          10
#define SISLANDS_DPM2_ABOVE_SAFE_INC        5
#define SISLANDS_DPM2_BELOW_SAFE_INC        20

#define SISLANDS_DPM2_TDP_SAFE_LIMIT_PERCENT            80

#define SISLANDS_DPM2_MAXPS_PERCENT_H                   99
#define SISLANDS_DPM2_MAXPS_PERCENT_M                   99

#define SISLANDS_DPM2_SQ_RAMP_MAX_POWER                 0x3FFF
#define SISLANDS_DPM2_SQ_RAMP_MIN_POWER                 0x12
#define SISLANDS_DPM2_SQ_RAMP_MAX_POWER_DELTA           0x15
#define SISLANDS_DPM2_SQ_RAMP_STI_SIZE                  0x1E
#define SISLANDS_DPM2_SQ_RAMP_LTI_RATIO                 0xF

#define SISLANDS_DPM2_PWREFFICIENCYRATIO_MARGIN         10

#define SISLANDS_VRC_DFLT                               0xC000B3
#define SISLANDS_ULVVOLTAGECHANGEDELAY_DFLT             1687
#define SISLANDS_CGULVPARAMETER_DFLT                    0x00040035
#define SISLANDS_CGULVCONTROL_DFLT                      0x1f007550

#define SI_ASI_DFLT                                10000
#define SI_BSP_DFLT                                0x41EB
#define SI_BSU_DFLT                                0x2
#define SI_AH_DFLT                                 5
#define SI_RLP_DFLT                                25
#define SI_RMP_DFLT                                65
#define SI_LHP_DFLT                                40
#define SI_LMP_DFLT                                15
#define SI_TD_DFLT                                 0
#define SI_UTC_DFLT_00                             0x24
#define SI_UTC_DFLT_01                             0x22
#define SI_UTC_DFLT_02                             0x22
#define SI_UTC_DFLT_03                             0x22
#define SI_UTC_DFLT_04                             0x22
#define SI_UTC_DFLT_05                             0x22
#define SI_UTC_DFLT_06                             0x22
#define SI_UTC_DFLT_07                             0x22
#define SI_UTC_DFLT_08                             0x22
#define SI_UTC_DFLT_09                             0x22
#define SI_UTC_DFLT_10                             0x22
#define SI_UTC_DFLT_11                             0x22
#define SI_UTC_DFLT_12                             0x22
#define SI_UTC_DFLT_13                             0x22
#define SI_UTC_DFLT_14                             0x22
#define SI_DTC_DFLT_00                             0x24
#define SI_DTC_DFLT_01                             0x22
#define SI_DTC_DFLT_02                             0x22
#define SI_DTC_DFLT_03                             0x22
#define SI_DTC_DFLT_04                             0x22
#define SI_DTC_DFLT_05                             0x22
#define SI_DTC_DFLT_06                             0x22
#define SI_DTC_DFLT_07                             0x22
#define SI_DTC_DFLT_08                             0x22
#define SI_DTC_DFLT_09                             0x22
#define SI_DTC_DFLT_10                             0x22
#define SI_DTC_DFLT_11                             0x22
#define SI_DTC_DFLT_12                             0x22
#define SI_DTC_DFLT_13                             0x22
#define SI_DTC_DFLT_14                             0x22
#define SI_VRC_DFLT                                0x0000C003
#define SI_VOLTAGERESPONSETIME_DFLT                1000
#define SI_BACKBIASRESPONSETIME_DFLT               1000
#define SI_VRU_DFLT                                0x3
#define SI_SPLLSTEPTIME_DFLT                       0x1000
#define SI_SPLLSTEPUNIT_DFLT                       0x3
#define SI_TPU_DFLT                                0
#define SI_TPC_DFLT                                0x200
#define SI_SSTU_DFLT                               0
#define SI_SST_DFLT                                0x00C8
#define SI_GICST_DFLT                              0x200
#define SI_FCT_DFLT                                0x0400
#define SI_FCTU_DFLT                               0
#define SI_CTXCGTT3DRPHC_DFLT                      0x20
#define SI_CTXCGTT3DRSDC_DFLT                      0x40
#define SI_VDDC3DOORPHC_DFLT                       0x100
#define SI_VDDC3DOORSDC_DFLT                       0x7
#define SI_VDDC3DOORSU_DFLT                        0
#define SI_MPLLLOCKTIME_DFLT                       100
#define SI_MPLLRESETTIME_DFLT                      150
#define SI_VCOSTEPPCT_DFLT                          20
#define SI_ENDINGVCOSTEPPCT_DFLT                    5
#define SI_REFERENCEDIVIDER_DFLT                    4

#define SI_PM_NUMBER_OF_TC 15
#define SI_PM_NUMBER_OF_SCLKS 20
#define SI_PM_NUMBER_OF_MCLKS 4
#define SI_PM_NUMBER_OF_VOLTAGE_LEVELS 4
#define SI_PM_NUMBER_OF_ACTIVITY_LEVELS 3

/* XXX are these ok? */
#define SI_TEMP_RANGE_MIN (90 * 1000)
#define SI_TEMP_RANGE_MAX (120 * 1000)

#define FDO_PWM_MODE_STATIC  1
#define FDO_PWM_MODE_STATIC_RPM 5

enum ni_dc_cac_level
{
	NISLANDS_DCCAC_LEVEL_0 = 0,
	NISLANDS_DCCAC_LEVEL_1,
	NISLANDS_DCCAC_LEVEL_2,
	NISLANDS_DCCAC_LEVEL_3,
	NISLANDS_DCCAC_LEVEL_4,
	NISLANDS_DCCAC_LEVEL_5,
	NISLANDS_DCCAC_LEVEL_6,
	NISLANDS_DCCAC_LEVEL_7,
	NISLANDS_DCCAC_MAX_LEVELS
};

enum si_cac_config_reg_type
{
	SISLANDS_CACCONFIG_MMR = 0,
	SISLANDS_CACCONFIG_CGIND,
	SISLANDS_CACCONFIG_MAX
};

enum si_power_level {
	SI_POWER_LEVEL_LOW = 0,
	SI_POWER_LEVEL_MEDIUM = 1,
	SI_POWER_LEVEL_HIGH = 2,
	SI_POWER_LEVEL_CTXSW = 3,
};

enum si_td {
	SI_TD_AUTO,
	SI_TD_UP,
	SI_TD_DOWN,
};

enum si_display_watermark {
	SI_DISPLAY_WATERMARK_LOW = 0,
	SI_DISPLAY_WATERMARK_HIGH = 1,
};

enum si_display_gap
{
    SI_PM_DISPLAY_GAP_VBLANK_OR_WM = 0,
    SI_PM_DISPLAY_GAP_VBLANK       = 1,
    SI_PM_DISPLAY_GAP_WATERMARK    = 2,
    SI_PM_DISPLAY_GAP_IGNORE       = 3,
};

extern const struct amdgpu_ip_block_version si_smu_ip_block;

struct ni_leakage_coeffients
{
	u32 at;
	u32 bt;
	u32 av;
	u32 bv;
	s32 t_slope;
	s32 t_intercept;
	u32 t_ref;
};

struct SMC_Evergreen_MCRegisterAddress
{
    uint16_t s0;
    uint16_t s1;
};

typedef struct SMC_Evergreen_MCRegisterAddress SMC_Evergreen_MCRegisterAddress;

struct evergreen_mc_reg_entry {
	u32 mclk_max;
	u32 mc_data[SMC_EVERGREEN_MC_REGISTER_ARRAY_SIZE];
};

struct evergreen_mc_reg_table {
	u8 last;
	u8 num_entries;
	u16 valid_flag;
	struct evergreen_mc_reg_entry mc_reg_table_entry[MAX_AC_TIMING_ENTRIES];
	SMC_Evergreen_MCRegisterAddress mc_reg_address[SMC_EVERGREEN_MC_REGISTER_ARRAY_SIZE];
};

struct SMC_Evergreen_MCRegisterSet
{
    uint32_t value[SMC_EVERGREEN_MC_REGISTER_ARRAY_SIZE];
};

typedef struct SMC_Evergreen_MCRegisterSet SMC_Evergreen_MCRegisterSet;

struct SMC_Evergreen_MCRegisters
{
    uint8_t                             last;
    uint8_t                             reserved[3];
    SMC_Evergreen_MCRegisterAddress     address[SMC_EVERGREEN_MC_REGISTER_ARRAY_SIZE];
    SMC_Evergreen_MCRegisterSet         data[5];
};

typedef struct SMC_Evergreen_MCRegisters SMC_Evergreen_MCRegisters;

struct SMC_NIslands_MCRegisterSet
{
    uint32_t value[SMC_NISLANDS_MC_REGISTER_ARRAY_SIZE];
};

typedef struct SMC_NIslands_MCRegisterSet SMC_NIslands_MCRegisterSet;

struct ni_mc_reg_entry {
	u32 mclk_max;
	u32 mc_data[SMC_NISLANDS_MC_REGISTER_ARRAY_SIZE];
};

struct SMC_NIslands_MCRegisterAddress
{
    uint16_t s0;
    uint16_t s1;
};

typedef struct SMC_NIslands_MCRegisterAddress SMC_NIslands_MCRegisterAddress;

struct SMC_NIslands_MCRegisters
{
    uint8_t                             last;
    uint8_t                             reserved[3];
    SMC_NIslands_MCRegisterAddress      address[SMC_NISLANDS_MC_REGISTER_ARRAY_SIZE];
    SMC_NIslands_MCRegisterSet          data[SMC_NISLANDS_MC_REGISTER_ARRAY_SET_COUNT];
};

typedef struct SMC_NIslands_MCRegisters SMC_NIslands_MCRegisters;

struct evergreen_ulv_param {
	bool supported;
	struct rv7xx_pl *pl;
};

struct evergreen_arb_registers {
	u32 mc_arb_dram_timing;
	u32 mc_arb_dram_timing2;
	u32 mc_arb_rfsh_rate;
	u32 mc_arb_burst_time;
};

struct at {
	u32 rlp;
	u32 rmp;
	u32 lhp;
	u32 lmp;
};

struct ni_clock_registers {
	u32 cg_spll_func_cntl;
	u32 cg_spll_func_cntl_2;
	u32 cg_spll_func_cntl_3;
	u32 cg_spll_func_cntl_4;
	u32 cg_spll_spread_spectrum;
	u32 cg_spll_spread_spectrum_2;
	u32 mclk_pwrmgt_cntl;
	u32 dll_cntl;
	u32 mpll_ad_func_cntl;
	u32 mpll_ad_func_cntl_2;
	u32 mpll_dq_func_cntl;
	u32 mpll_dq_func_cntl_2;
	u32 mpll_ss1;
	u32 mpll_ss2;
};

struct RV770_SMC_SCLK_VALUE
{
    uint32_t        vCG_SPLL_FUNC_CNTL;
    uint32_t        vCG_SPLL_FUNC_CNTL_2;
    uint32_t        vCG_SPLL_FUNC_CNTL_3;
    uint32_t        vCG_SPLL_SPREAD_SPECTRUM;
    uint32_t        vCG_SPLL_SPREAD_SPECTRUM_2;
    uint32_t        sclk_value;
};

typedef struct RV770_SMC_SCLK_VALUE RV770_SMC_SCLK_VALUE;

struct RV770_SMC_MCLK_VALUE
{
    uint32_t        vMPLL_AD_FUNC_CNTL;
    uint32_t        vMPLL_AD_FUNC_CNTL_2;
    uint32_t        vMPLL_DQ_FUNC_CNTL;
    uint32_t        vMPLL_DQ_FUNC_CNTL_2;
    uint32_t        vMCLK_PWRMGT_CNTL;
    uint32_t        vDLL_CNTL;
    uint32_t        vMPLL_SS;
    uint32_t        vMPLL_SS2;
    uint32_t        mclk_value;
};

typedef struct RV770_SMC_MCLK_VALUE RV770_SMC_MCLK_VALUE;


struct RV730_SMC_MCLK_VALUE
{
    uint32_t        vMCLK_PWRMGT_CNTL;
    uint32_t        vDLL_CNTL;
    uint32_t        vMPLL_FUNC_CNTL;
    uint32_t        vMPLL_FUNC_CNTL2;
    uint32_t        vMPLL_FUNC_CNTL3;
    uint32_t        vMPLL_SS;
    uint32_t        vMPLL_SS2;
    uint32_t        mclk_value;
};

typedef struct RV730_SMC_MCLK_VALUE RV730_SMC_MCLK_VALUE;

struct RV770_SMC_VOLTAGE_VALUE
{
    uint16_t             value;
    uint8_t              index;
    uint8_t              padding;
};

typedef struct RV770_SMC_VOLTAGE_VALUE RV770_SMC_VOLTAGE_VALUE;

union RV7XX_SMC_MCLK_VALUE
{
    RV770_SMC_MCLK_VALUE    mclk770;
    RV730_SMC_MCLK_VALUE    mclk730;
};

typedef union RV7XX_SMC_MCLK_VALUE RV7XX_SMC_MCLK_VALUE, *LPRV7XX_SMC_MCLK_VALUE;

struct RV770_SMC_HW_PERFORMANCE_LEVEL
{
    uint8_t                 arbValue;
    union{
        uint8_t             seqValue;
        uint8_t             ACIndex;
    };
    uint8_t                 displayWatermark;
    uint8_t                 gen2PCIE;
    uint8_t                 gen2XSP;
    uint8_t                 backbias;
    uint8_t                 strobeMode;
    uint8_t                 mcFlags;
    uint32_t                aT;
    uint32_t                bSP;
    RV770_SMC_SCLK_VALUE    sclk;
    RV7XX_SMC_MCLK_VALUE    mclk;
    RV770_SMC_VOLTAGE_VALUE vddc;
    RV770_SMC_VOLTAGE_VALUE mvdd;
    RV770_SMC_VOLTAGE_VALUE vddci;
    uint8_t                 reserved1;
    uint8_t                 reserved2;
    uint8_t                 stateFlags;
    uint8_t                 padding;
};

typedef struct RV770_SMC_HW_PERFORMANCE_LEVEL RV770_SMC_HW_PERFORMANCE_LEVEL;

struct RV770_SMC_SWSTATE
{
    uint8_t           flags;
    uint8_t           padding1;
    uint8_t           padding2;
    uint8_t           padding3;
    RV770_SMC_HW_PERFORMANCE_LEVEL levels[RV770_SMC_PERFORMANCE_LEVELS_PER_SWSTATE];
};

typedef struct RV770_SMC_SWSTATE RV770_SMC_SWSTATE;

struct RV770_SMC_VOLTAGEMASKTABLE
{
    uint8_t  highMask[RV770_SMC_VOLTAGEMASK_MAX];
    uint32_t lowMask[RV770_SMC_VOLTAGEMASK_MAX];
};

typedef struct RV770_SMC_VOLTAGEMASKTABLE RV770_SMC_VOLTAGEMASKTABLE;

struct RV770_SMC_STATETABLE
{
    uint8_t             thermalProtectType;
    uint8_t             systemFlags;
    uint8_t             maxVDDCIndexInPPTable;
    uint8_t             extraFlags;
    uint8_t             highSMIO[MAX_NO_VREG_STEPS];
    uint32_t            lowSMIO[MAX_NO_VREG_STEPS];
    RV770_SMC_VOLTAGEMASKTABLE voltageMaskTable;
    RV770_SMC_SWSTATE   initialState;
    RV770_SMC_SWSTATE   ACPIState;
    RV770_SMC_SWSTATE   driverState;
    RV770_SMC_SWSTATE   ULVState;
};

typedef struct RV770_SMC_STATETABLE RV770_SMC_STATETABLE;

struct vddc_table_entry {
	u16 vddc;
	u8 vddc_index;
	u8 high_smio;
	u32 low_smio;
};

struct rv770_clock_registers {
	u32 cg_spll_func_cntl;
	u32 cg_spll_func_cntl_2;
	u32 cg_spll_func_cntl_3;
	u32 cg_spll_spread_spectrum;
	u32 cg_spll_spread_spectrum_2;
	u32 mpll_ad_func_cntl;
	u32 mpll_ad_func_cntl_2;
	u32 mpll_dq_func_cntl;
	u32 mpll_dq_func_cntl_2;
	u32 mclk_pwrmgt_cntl;
	u32 dll_cntl;
	u32 mpll_ss1;
	u32 mpll_ss2;
};

struct rv730_clock_registers {
	u32 cg_spll_func_cntl;
	u32 cg_spll_func_cntl_2;
	u32 cg_spll_func_cntl_3;
	u32 cg_spll_spread_spectrum;
	u32 cg_spll_spread_spectrum_2;
	u32 mclk_pwrmgt_cntl;
	u32 dll_cntl;
	u32 mpll_func_cntl;
	u32 mpll_func_cntl2;
	u32 mpll_func_cntl3;
	u32 mpll_ss;
	u32 mpll_ss2;
};

union r7xx_clock_registers {
	struct rv770_clock_registers rv770;
	struct rv730_clock_registers rv730;
};

struct rv7xx_power_info {
	/* flags */
	bool mem_gddr5;
	bool pcie_gen2;
	bool dynamic_pcie_gen2;
	bool acpi_pcie_gen2;
	bool boot_in_gen2;
	bool voltage_control; /* vddc */
	bool mvdd_control;
	bool sclk_ss;
	bool mclk_ss;
	bool dynamic_ss;
	bool gfx_clock_gating;
	bool mg_clock_gating;
	bool mgcgtssm;
	bool power_gating;
	bool thermal_protection;
	bool display_gap;
	bool dcodt;
	bool ulps;
	/* registers */
	union r7xx_clock_registers clk_regs;
	u32 s0_vid_lower_smio_cntl;
	/* voltage */
	u32 vddc_mask_low;
	u32 mvdd_mask_low;
	u32 mvdd_split_frequency;
	u32 mvdd_low_smio[MAX_NO_OF_MVDD_VALUES];
	u16 max_vddc;
	u16 max_vddc_in_table;
	u16 min_vddc_in_table;
	struct vddc_table_entry vddc_table[MAX_NO_VREG_STEPS];
	u8 valid_vddc_entries;
	/* dc odt */
	u32 mclk_odt_threshold;
	u8 odt_value_0[2];
	u8 odt_value_1[2];
	/* stored values */
	u32 boot_sclk;
	u16 acpi_vddc;
	u32 ref_div;
	u32 active_auto_throttle_sources;
	u32 mclk_stutter_mode_threshold;
	u32 mclk_strobe_mode_threshold;
	u32 mclk_edc_enable_threshold;
	u32 bsp;
	u32 bsu;
	u32 pbsp;
	u32 pbsu;
	u32 dsp;
	u32 psp;
	u32 asi;
	u32 pasi;
	u32 vrc;
	u32 restricted_levels;
	u32 rlp;
	u32 rmp;
	u32 lhp;
	u32 lmp;
	/* smc offsets */
	u16 state_table_start;
	u16 soft_regs_start;
	u16 sram_end;
	/* scratch structs */
	RV770_SMC_STATETABLE smc_statetable;
};

enum si_pcie_gen {
	SI_PCIE_GEN1 = 0,
	SI_PCIE_GEN2 = 1,
	SI_PCIE_GEN3 = 2,
	SI_PCIE_GEN_INVALID = 0xffff
};

struct rv7xx_pl {
	u32 sclk;
	u32 mclk;
	u16 vddc;
	u16 vddci; /* eg+ only */
	u32 flags;
	enum si_pcie_gen pcie_gen; /* si+ only */
};

struct rv7xx_ps {
	struct rv7xx_pl high;
	struct rv7xx_pl medium;
	struct rv7xx_pl low;
	bool dc_compatible;
};

struct si_ps {
	u16 performance_level_count;
	bool dc_compatible;
	struct rv7xx_pl performance_levels[NISLANDS_MAX_SMC_PERFORMANCE_LEVELS_PER_SWSTATE];
};

struct ni_mc_reg_table {
	u8 last;
	u8 num_entries;
	u16 valid_flag;
	struct ni_mc_reg_entry mc_reg_table_entry[MAX_AC_TIMING_ENTRIES];
	SMC_NIslands_MCRegisterAddress mc_reg_address[SMC_NISLANDS_MC_REGISTER_ARRAY_SIZE];
};

struct ni_cac_data
{
	struct ni_leakage_coeffients leakage_coefficients;
	u32 i_leakage;
	s32 leakage_minimum_temperature;
	u32 pwr_const;
	u32 dc_cac_value;
	u32 bif_cac_value;
	u32 lkge_pwr;
	u8 mc_wr_weight;
	u8 mc_rd_weight;
	u8 allow_ovrflw;
	u8 num_win_tdp;
	u8 l2num_win_tdp;
	u8 lts_truncate_n;
};

struct evergreen_power_info {
	/* must be first! */
	struct rv7xx_power_info rv7xx;
	/* flags */
	bool vddci_control;
	bool dynamic_ac_timing;
	bool abm;
	bool mcls;
	bool light_sleep;
	bool memory_transition;
	bool pcie_performance_request;
	bool pcie_performance_request_registered;
	bool sclk_deep_sleep;
	bool dll_default_on;
	bool ls_clock_gating;
	bool smu_uvd_hs;
	bool uvd_enabled;
	/* stored values */
	u16 acpi_vddci;
	u8 mvdd_high_index;
	u8 mvdd_low_index;
	u32 mclk_edc_wr_enable_threshold;
	struct evergreen_mc_reg_table mc_reg_table;
	struct atom_voltage_table vddc_voltage_table;
	struct atom_voltage_table vddci_voltage_table;
	struct evergreen_arb_registers bootup_arb_registers;
	struct evergreen_ulv_param ulv;
	struct at ats[2];
	/* smc offsets */
	u16 mc_reg_table_start;
	struct amdgpu_ps current_rps;
	struct rv7xx_ps current_ps;
	struct amdgpu_ps requested_rps;
	struct rv7xx_ps requested_ps;
};

struct PP_NIslands_Dpm2PerfLevel
{
    uint8_t     MaxPS;
    uint8_t     TgtAct;
    uint8_t     MaxPS_StepInc;
    uint8_t     MaxPS_StepDec;
    uint8_t     PSST;
    uint8_t     NearTDPDec;
    uint8_t     AboveSafeInc;
    uint8_t     BelowSafeInc;
    uint8_t     PSDeltaLimit;
    uint8_t     PSDeltaWin;
    uint8_t     Reserved[6];
};

typedef struct PP_NIslands_Dpm2PerfLevel PP_NIslands_Dpm2PerfLevel;

struct PP_NIslands_DPM2Parameters
{
    uint32_t    TDPLimit;
    uint32_t    NearTDPLimit;
    uint32_t    SafePowerLimit;
    uint32_t    PowerBoostLimit;
};
typedef struct PP_NIslands_DPM2Parameters PP_NIslands_DPM2Parameters;

struct NISLANDS_SMC_SCLK_VALUE
{
    uint32_t        vCG_SPLL_FUNC_CNTL;
    uint32_t        vCG_SPLL_FUNC_CNTL_2;
    uint32_t        vCG_SPLL_FUNC_CNTL_3;
    uint32_t        vCG_SPLL_FUNC_CNTL_4;
    uint32_t        vCG_SPLL_SPREAD_SPECTRUM;
    uint32_t        vCG_SPLL_SPREAD_SPECTRUM_2;
    uint32_t        sclk_value;
};

typedef struct NISLANDS_SMC_SCLK_VALUE NISLANDS_SMC_SCLK_VALUE;

struct NISLANDS_SMC_MCLK_VALUE
{
    uint32_t        vMPLL_FUNC_CNTL;
    uint32_t        vMPLL_FUNC_CNTL_1;
    uint32_t        vMPLL_FUNC_CNTL_2;
    uint32_t        vMPLL_AD_FUNC_CNTL;
    uint32_t        vMPLL_AD_FUNC_CNTL_2;
    uint32_t        vMPLL_DQ_FUNC_CNTL;
    uint32_t        vMPLL_DQ_FUNC_CNTL_2;
    uint32_t        vMCLK_PWRMGT_CNTL;
    uint32_t        vDLL_CNTL;
    uint32_t        vMPLL_SS;
    uint32_t        vMPLL_SS2;
    uint32_t        mclk_value;
};

typedef struct NISLANDS_SMC_MCLK_VALUE NISLANDS_SMC_MCLK_VALUE;

struct NISLANDS_SMC_VOLTAGE_VALUE
{
    uint16_t             value;
    uint8_t              index;
    uint8_t              padding;
};

typedef struct NISLANDS_SMC_VOLTAGE_VALUE NISLANDS_SMC_VOLTAGE_VALUE;

struct NISLANDS_SMC_HW_PERFORMANCE_LEVEL
{
    uint8_t                     arbValue;
    uint8_t                     ACIndex;
    uint8_t                     displayWatermark;
    uint8_t                     gen2PCIE;
    uint8_t                     reserved1;
    uint8_t                     reserved2;
    uint8_t                     strobeMode;
    uint8_t                     mcFlags;
    uint32_t                    aT;
    uint32_t                    bSP;
    NISLANDS_SMC_SCLK_VALUE     sclk;
    NISLANDS_SMC_MCLK_VALUE     mclk;
    NISLANDS_SMC_VOLTAGE_VALUE  vddc;
    NISLANDS_SMC_VOLTAGE_VALUE  mvdd;
    NISLANDS_SMC_VOLTAGE_VALUE  vddci;
    NISLANDS_SMC_VOLTAGE_VALUE  std_vddc;
    uint32_t                    powergate_en;
    uint8_t                     hUp;
    uint8_t                     hDown;
    uint8_t                     stateFlags;
    uint8_t                     arbRefreshState;
    uint32_t                    SQPowerThrottle;
    uint32_t                    SQPowerThrottle_2;
    uint32_t                    reserved[2];
    PP_NIslands_Dpm2PerfLevel   dpm2;
};

typedef struct NISLANDS_SMC_HW_PERFORMANCE_LEVEL NISLANDS_SMC_HW_PERFORMANCE_LEVEL;

struct NISLANDS_SMC_SWSTATE
{
    uint8_t                             flags;
    uint8_t                             levelCount;
    uint8_t                             padding2;
    uint8_t                             padding3;
    NISLANDS_SMC_HW_PERFORMANCE_LEVEL   levels[];
};

typedef struct NISLANDS_SMC_SWSTATE NISLANDS_SMC_SWSTATE;

struct NISLANDS_SMC_VOLTAGEMASKTABLE
{
    uint8_t  highMask[NISLANDS_SMC_VOLTAGEMASK_MAX];
    uint32_t lowMask[NISLANDS_SMC_VOLTAGEMASK_MAX];
};

typedef struct NISLANDS_SMC_VOLTAGEMASKTABLE NISLANDS_SMC_VOLTAGEMASKTABLE;

#define NISLANDS_MAX_NO_VREG_STEPS 32

struct NISLANDS_SMC_STATETABLE
{
    uint8_t                             thermalProtectType;
    uint8_t                             systemFlags;
    uint8_t                             maxVDDCIndexInPPTable;
    uint8_t                             extraFlags;
    uint8_t                             highSMIO[NISLANDS_MAX_NO_VREG_STEPS];
    uint32_t                            lowSMIO[NISLANDS_MAX_NO_VREG_STEPS];
    NISLANDS_SMC_VOLTAGEMASKTABLE       voltageMaskTable;
    PP_NIslands_DPM2Parameters          dpm2Params;
    NISLANDS_SMC_SWSTATE                initialState;
    NISLANDS_SMC_SWSTATE                ACPIState;
    NISLANDS_SMC_SWSTATE                ULVState;
    NISLANDS_SMC_SWSTATE                driverState;
    NISLANDS_SMC_HW_PERFORMANCE_LEVEL   dpmLevels[NISLANDS_MAX_SMC_PERFORMANCE_LEVELS_PER_SWSTATE - 1];
};

typedef struct NISLANDS_SMC_STATETABLE NISLANDS_SMC_STATETABLE;

struct ni_power_info {
	/* must be first! */
	struct evergreen_power_info eg;
	struct ni_clock_registers clock_registers;
	struct ni_mc_reg_table mc_reg_table;
	u32 mclk_rtt_mode_threshold;
	/* flags */
	bool use_power_boost_limit;
	bool support_cac_long_term_average;
	bool cac_enabled;
	bool cac_configuration_required;
	bool driver_calculate_cac_leakage;
	bool pc_enabled;
	bool enable_power_containment;
	bool enable_cac;
	bool enable_sq_ramping;
	/* smc offsets */
	u16 arb_table_start;
	u16 fan_table_start;
	u16 cac_table_start;
	u16 spll_table_start;
	/* CAC stuff */
	struct ni_cac_data cac_data;
	u32 dc_cac_table[NISLANDS_DCCAC_MAX_LEVELS];
	const struct ni_cac_weights *cac_weights;
	u8 lta_window_size;
	u8 lts_truncate;
	struct si_ps current_ps;
	struct si_ps requested_ps;
	/* scratch structs */
	SMC_NIslands_MCRegisters smc_mc_reg_table;
	NISLANDS_SMC_STATETABLE smc_statetable;
};

struct si_cac_config_reg
{
	u32 offset;
	u32 mask;
	u32 shift;
	u32 value;
	enum si_cac_config_reg_type type;
};

struct si_powertune_data
{
	u32 cac_window;
	u32 l2_lta_window_size_default;
	u8 lts_truncate_default;
	u8 shift_n_default;
	u8 operating_temp;
	struct ni_leakage_coeffients leakage_coefficients;
	u32 fixed_kt;
	u32 lkge_lut_v0_percent;
	u8 dc_cac[NISLANDS_DCCAC_MAX_LEVELS];
	bool enable_powertune_by_default;
};

struct si_dyn_powertune_data
{
	u32 cac_leakage;
	s32 leakage_minimum_temperature;
	u32 wintime;
	u32 l2_lta_window_size;
	u8 lts_truncate;
	u8 shift_n;
	u8 dc_pwr_value;
	bool disable_uvd_powertune;
};

struct si_dte_data
{
	u32 tau[SMC_SISLANDS_DTE_MAX_FILTER_STAGES];
	u32 r[SMC_SISLANDS_DTE_MAX_FILTER_STAGES];
	u32 k;
	u32 t0;
	u32 max_t;
	u8 window_size;
	u8 temp_select;
	u8 dte_mode;
	u8 tdep_count;
	u8 t_limits[SMC_SISLANDS_DTE_MAX_TEMPERATURE_DEPENDENT_ARRAY_SIZE];
	u32 tdep_tau[SMC_SISLANDS_DTE_MAX_TEMPERATURE_DEPENDENT_ARRAY_SIZE];
	u32 tdep_r[SMC_SISLANDS_DTE_MAX_TEMPERATURE_DEPENDENT_ARRAY_SIZE];
	u32 t_threshold;
	bool enable_dte_by_default;
};

struct si_clock_registers {
	u32 cg_spll_func_cntl;
	u32 cg_spll_func_cntl_2;
	u32 cg_spll_func_cntl_3;
	u32 cg_spll_func_cntl_4;
	u32 cg_spll_spread_spectrum;
	u32 cg_spll_spread_spectrum_2;
	u32 dll_cntl;
	u32 mclk_pwrmgt_cntl;
	u32 mpll_ad_func_cntl;
	u32 mpll_dq_func_cntl;
	u32 mpll_func_cntl;
	u32 mpll_func_cntl_1;
	u32 mpll_func_cntl_2;
	u32 mpll_ss1;
	u32 mpll_ss2;
};

struct si_mc_reg_entry {
	u32 mclk_max;
	u32 mc_data[SMC_SISLANDS_MC_REGISTER_ARRAY_SIZE];
};

struct si_mc_reg_table {
	u8 last;
	u8 num_entries;
	u16 valid_flag;
	struct si_mc_reg_entry mc_reg_table_entry[MAX_AC_TIMING_ENTRIES];
	SMC_NIslands_MCRegisterAddress mc_reg_address[SMC_SISLANDS_MC_REGISTER_ARRAY_SIZE];
};

struct si_leakage_voltage_entry
{
	u16 voltage;
	u16 leakage_index;
};

struct si_leakage_voltage
{
	u16 count;
	struct si_leakage_voltage_entry entries[SISLANDS_MAX_LEAKAGE_COUNT];
};


struct si_ulv_param {
	bool supported;
	u32 cg_ulv_control;
	u32 cg_ulv_parameter;
	u32 volt_change_delay;
	struct rv7xx_pl pl;
	bool one_pcie_lane_in_ulv;
};

struct si_power_info {
	/* must be first! */
	struct ni_power_info ni;
	struct si_clock_registers clock_registers;
	struct si_mc_reg_table mc_reg_table;
	struct atom_voltage_table mvdd_voltage_table;
	struct atom_voltage_table vddc_phase_shed_table;
	struct si_leakage_voltage leakage_voltage;
	u16 mvdd_bootup_value;
	struct si_ulv_param ulv;
	u32 max_cu;
	/* pcie gen */
	enum si_pcie_gen force_pcie_gen;
	enum si_pcie_gen boot_pcie_gen;
	enum si_pcie_gen acpi_pcie_gen;
	u32 sys_pcie_mask;
	/* flags */
	bool enable_dte;
	bool enable_ppm;
	bool vddc_phase_shed_control;
	bool pspp_notify_required;
	bool sclk_deep_sleep_above_low;
	bool voltage_control_svi2;
	bool vddci_control_svi2;
	/* smc offsets */
	u32 sram_end;
	u32 state_table_start;
	u32 soft_regs_start;
	u32 mc_reg_table_start;
	u32 arb_table_start;
	u32 cac_table_start;
	u32 dte_table_start;
	u32 spll_table_start;
	u32 papm_cfg_table_start;
	u32 fan_table_start;
	/* CAC stuff */
	const struct si_cac_config_reg *cac_weights;
	const struct si_cac_config_reg *lcac_config;
	const struct si_cac_config_reg *cac_override;
	const struct si_powertune_data *powertune_data;
	struct si_dyn_powertune_data dyn_powertune_data;
	/* DTE stuff */
	struct si_dte_data dte_data;
	/* scratch structs */
	SMC_SIslands_MCRegisters smc_mc_reg_table;
	SISLANDS_SMC_STATETABLE smc_statetable;
	PP_SIslands_PAPMParameters papm_parm;
	/* SVI2 */
	u8 svd_gpio_id;
	u8 svc_gpio_id;
	/* fan control */
	bool fan_ctrl_is_in_default_mode;
	u32 t_min;
	u32 fan_ctrl_default_mode;
	bool fan_is_controlled_by_smc;
};

#endif
/*
 * Copyright 2011 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __R600_DPM_H__
#define __R600_DPM_H__

#define R600_ASI_DFLT                                10000
#define R600_BSP_DFLT                                0x41EB
#define R600_BSU_DFLT                                0x2
#define R600_AH_DFLT                                 5
#define R600_RLP_DFLT                                25
#define R600_RMP_DFLT                                65
#define R600_LHP_DFLT                                40
#define R600_LMP_DFLT                                15
#define R600_TD_DFLT                                 0
#define R600_UTC_DFLT_00                             0x24
#define R600_UTC_DFLT_01                             0x22
#define R600_UTC_DFLT_02                             0x22
#define R600_UTC_DFLT_03                             0x22
#define R600_UTC_DFLT_04                             0x22
#define R600_UTC_DFLT_05                             0x22
#define R600_UTC_DFLT_06                             0x22
#define R600_UTC_DFLT_07                             0x22
#define R600_UTC_DFLT_08                             0x22
#define R600_UTC_DFLT_09                             0x22
#define R600_UTC_DFLT_10                             0x22
#define R600_UTC_DFLT_11                             0x22
#define R600_UTC_DFLT_12                             0x22
#define R600_UTC_DFLT_13                             0x22
#define R600_UTC_DFLT_14                             0x22
#define R600_DTC_DFLT_00                             0x24
#define R600_DTC_DFLT_01                             0x22
#define R600_DTC_DFLT_02                             0x22
#define R600_DTC_DFLT_03                             0x22
#define R600_DTC_DFLT_04                             0x22
#define R600_DTC_DFLT_05                             0x22
#define R600_DTC_DFLT_06                             0x22
#define R600_DTC_DFLT_07                             0x22
#define R600_DTC_DFLT_08                             0x22
#define R600_DTC_DFLT_09                             0x22
#define R600_DTC_DFLT_10                             0x22
#define R600_DTC_DFLT_11                             0x22
#define R600_DTC_DFLT_12                             0x22
#define R600_DTC_DFLT_13                             0x22
#define R600_DTC_DFLT_14                             0x22
#define R600_VRC_DFLT                                0x0000C003
#define R600_VOLTAGERESPONSETIME_DFLT                1000
#define R600_BACKBIASRESPONSETIME_DFLT               1000
#define R600_VRU_DFLT                                0x3
#define R600_SPLLSTEPTIME_DFLT                       0x1000
#define R600_SPLLSTEPUNIT_DFLT                       0x3
#define R600_TPU_DFLT                                0
#define R600_TPC_DFLT                                0x200
#define R600_SSTU_DFLT                               0
#define R600_SST_DFLT                                0x00C8
#define R600_GICST_DFLT                              0x200
#define R600_FCT_DFLT                                0x0400
#define R600_FCTU_DFLT                               0
#define R600_CTXCGTT3DRPHC_DFLT                      0x20
#define R600_CTXCGTT3DRSDC_DFLT                      0x40
#define R600_VDDC3DOORPHC_DFLT                       0x100
#define R600_VDDC3DOORSDC_DFLT                       0x7
#define R600_VDDC3DOORSU_DFLT                        0
#define R600_MPLLLOCKTIME_DFLT                       100
#define R600_MPLLRESETTIME_DFLT                      150
#define R600_VCOSTEPPCT_DFLT                          20
#define R600_ENDINGVCOSTEPPCT_DFLT                    5
#define R600_REFERENCEDIVIDER_DFLT                    4

#define R600_PM_NUMBER_OF_TC 15
#define R600_PM_NUMBER_OF_SCLKS 20
#define R600_PM_NUMBER_OF_MCLKS 4
#define R600_PM_NUMBER_OF_VOLTAGE_LEVELS 4
#define R600_PM_NUMBER_OF_ACTIVITY_LEVELS 3

/* XXX are these ok? */
#define R600_TEMP_RANGE_MIN (90 * 1000)
#define R600_TEMP_RANGE_MAX (120 * 1000)

#define FDO_PWM_MODE_STATIC  1
#define FDO_PWM_MODE_STATIC_RPM 5

enum r600_power_level {
	R600_POWER_LEVEL_LOW = 0,
	R600_POWER_LEVEL_MEDIUM = 1,
	R600_POWER_LEVEL_HIGH = 2,
	R600_POWER_LEVEL_CTXSW = 3,
};

enum r600_td {
	R600_TD_AUTO,
	R600_TD_UP,
	R600_TD_DOWN,
};

enum r600_display_watermark {
	R600_DISPLAY_WATERMARK_LOW = 0,
	R600_DISPLAY_WATERMARK_HIGH = 1,
};

enum r600_display_gap
{
    R600_PM_DISPLAY_GAP_VBLANK_OR_WM = 0,
    R600_PM_DISPLAY_GAP_VBLANK       = 1,
    R600_PM_DISPLAY_GAP_WATERMARK    = 2,
    R600_PM_DISPLAY_GAP_IGNORE       = 3,
};
#endif
/*
 * Copyright 2011 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef PP_SMC_H
#define PP_SMC_H

#pragma pack(push, 1)

#define PPSMC_SWSTATE_FLAG_DC                           0x01
#define PPSMC_SWSTATE_FLAG_UVD                          0x02
#define PPSMC_SWSTATE_FLAG_VCE                          0x04
#define PPSMC_SWSTATE_FLAG_PCIE_X1                      0x08

#define PPSMC_THERMAL_PROTECT_TYPE_INTERNAL             0x00
#define PPSMC_THERMAL_PROTECT_TYPE_EXTERNAL             0x01
#define PPSMC_THERMAL_PROTECT_TYPE_NONE                 0xff

#define PPSMC_SYSTEMFLAG_GPIO_DC                        0x01
#define PPSMC_SYSTEMFLAG_STEPVDDC                       0x02
#define PPSMC_SYSTEMFLAG_GDDR5                          0x04
#define PPSMC_SYSTEMFLAG_DISABLE_BABYSTEP               0x08
#define PPSMC_SYSTEMFLAG_REGULATOR_HOT                  0x10
#define PPSMC_SYSTEMFLAG_REGULATOR_HOT_ANALOG           0x20
#define PPSMC_SYSTEMFLAG_REGULATOR_HOT_PROG_GPIO        0x40

#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_MASK              0x07
#define PPSMC_EXTRAFLAGS_AC2DC_DONT_WAIT_FOR_VBLANK     0x08
#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_GOTODPMLOWSTATE   0x00
#define PPSMC_EXTRAFLAGS_AC2DC_ACTION_GOTOINITIALSTATE  0x01
#define PPSMC_EXTRAFLAGS_AC2DC_GPIO5_POLARITY_HIGH      0x02

#define PPSMC_DISPLAY_WATERMARK_LOW                     0
#define PPSMC_DISPLAY_WATERMARK_HIGH                    1

#define PPSMC_STATEFLAG_AUTO_PULSE_SKIP    0x01
#define PPSMC_STATEFLAG_POWERBOOST         0x02
#define PPSMC_STATEFLAG_DEEPSLEEP_THROTTLE 0x20
#define PPSMC_STATEFLAG_DEEPSLEEP_BYPASS   0x40

#define FDO_MODE_HARDWARE 0
#define FDO_MODE_PIECE_WISE_LINEAR 1

enum FAN_CONTROL {
	FAN_CONTROL_FUZZY,
	FAN_CONTROL_TABLE
};

#define PPSMC_Result_OK             ((uint8_t)0x01)
#define PPSMC_Result_Failed         ((uint8_t)0xFF)

typedef uint8_t PPSMC_Result;

#define PPSMC_MSG_Halt                      ((uint8_t)0x10)
#define PPSMC_MSG_Resume                    ((uint8_t)0x11)
#define PPSMC_MSG_ZeroLevelsDisabled        ((uint8_t)0x13)
#define PPSMC_MSG_OneLevelsDisabled         ((uint8_t)0x14)
#define PPSMC_MSG_TwoLevelsDisabled         ((uint8_t)0x15)
#define PPSMC_MSG_EnableThermalInterrupt    ((uint8_t)0x16)
#define PPSMC_MSG_RunningOnAC               ((uint8_t)0x17)
#define PPSMC_MSG_SwitchToSwState           ((uint8_t)0x20)
#define PPSMC_MSG_SwitchToInitialState      ((uint8_t)0x40)
#define PPSMC_MSG_NoForcedLevel             ((uint8_t)0x41)
#define PPSMC_MSG_ForceHigh                 ((uint8_t)0x42)
#define PPSMC_MSG_ForceMediumOrHigh         ((uint8_t)0x43)
#define PPSMC_MSG_SwitchToMinimumPower      ((uint8_t)0x51)
#define PPSMC_MSG_ResumeFromMinimumPower    ((uint8_t)0x52)
#define PPSMC_MSG_EnableCac                 ((uint8_t)0x53)
#define PPSMC_MSG_DisableCac                ((uint8_t)0x54)
#define PPSMC_TDPClampingActive             ((uint8_t)0x59)
#define PPSMC_TDPClampingInactive           ((uint8_t)0x5A)
#define PPSMC_StartFanControl               ((uint8_t)0x5B)
#define PPSMC_StopFanControl                ((uint8_t)0x5C)
#define PPSMC_MSG_NoDisplay                 ((uint8_t)0x5D)
#define PPSMC_NoDisplay                     ((uint8_t)0x5D)
#define PPSMC_MSG_HasDisplay                ((uint8_t)0x5E)
#define PPSMC_HasDisplay                    ((uint8_t)0x5E)
#define PPSMC_MSG_UVDPowerOFF               ((uint8_t)0x60)
#define PPSMC_MSG_UVDPowerON                ((uint8_t)0x61)
#define PPSMC_MSG_EnableULV                 ((uint8_t)0x62)
#define PPSMC_MSG_DisableULV                ((uint8_t)0x63)
#define PPSMC_MSG_EnterULV                  ((uint8_t)0x64)
#define PPSMC_MSG_ExitULV                   ((uint8_t)0x65)
#define PPSMC_CACLongTermAvgEnable          ((uint8_t)0x6E)
#define PPSMC_CACLongTermAvgDisable         ((uint8_t)0x6F)
#define PPSMC_MSG_CollectCAC_PowerCorreln   ((uint8_t)0x7A)
#define PPSMC_FlushDataCache                ((uint8_t)0x80)
#define PPSMC_MSG_SetEnabledLevels          ((uint8_t)0x82)
#define PPSMC_MSG_SetForcedLevels           ((uint8_t)0x83)
#define PPSMC_MSG_ResetToDefaults           ((uint8_t)0x84)
#define PPSMC_MSG_EnableDTE                 ((uint8_t)0x87)
#define PPSMC_MSG_DisableDTE                ((uint8_t)0x88)
#define PPSMC_MSG_ThrottleOVRDSCLKDS        ((uint8_t)0x96)
#define PPSMC_MSG_CancelThrottleOVRDSCLKDS  ((uint8_t)0x97)
#define PPSMC_MSG_EnableACDCGPIOInterrupt   ((uint16_t) 0x149)

/* CI/KV/KB */
#define PPSMC_MSG_UVDDPM_SetEnabledMask       ((uint16_t) 0x12D)
#define PPSMC_MSG_VCEDPM_SetEnabledMask       ((uint16_t) 0x12E)
#define PPSMC_MSG_ACPDPM_SetEnabledMask       ((uint16_t) 0x12F)
#define PPSMC_MSG_SAMUDPM_SetEnabledMask      ((uint16_t) 0x130)
#define PPSMC_MSG_MCLKDPM_ForceState          ((uint16_t) 0x131)
#define PPSMC_MSG_MCLKDPM_NoForcedLevel       ((uint16_t) 0x132)
#define PPSMC_MSG_Thermal_Cntl_Disable        ((uint16_t) 0x133)
#define PPSMC_MSG_Voltage_Cntl_Disable        ((uint16_t) 0x135)
#define PPSMC_MSG_PCIeDPM_Enable              ((uint16_t) 0x136)
#define PPSMC_MSG_PCIeDPM_Disable             ((uint16_t) 0x13d)
#define PPSMC_MSG_ACPPowerOFF                 ((uint16_t) 0x137)
#define PPSMC_MSG_ACPPowerON                  ((uint16_t) 0x138)
#define PPSMC_MSG_SAMPowerOFF                 ((uint16_t) 0x139)
#define PPSMC_MSG_SAMPowerON                  ((uint16_t) 0x13a)
#define PPSMC_MSG_PCIeDPM_Disable             ((uint16_t) 0x13d)
#define PPSMC_MSG_NBDPM_Enable                ((uint16_t) 0x140)
#define PPSMC_MSG_NBDPM_Disable               ((uint16_t) 0x141)
#define PPSMC_MSG_SCLKDPM_SetEnabledMask      ((uint16_t) 0x145)
#define PPSMC_MSG_MCLKDPM_SetEnabledMask      ((uint16_t) 0x146)
#define PPSMC_MSG_PCIeDPM_ForceLevel          ((uint16_t) 0x147)
#define PPSMC_MSG_PCIeDPM_UnForceLevel        ((uint16_t) 0x148)
#define PPSMC_MSG_EnableVRHotGPIOInterrupt    ((uint16_t) 0x14a)
#define PPSMC_MSG_DPM_Enable                  ((uint16_t) 0x14e)
#define PPSMC_MSG_DPM_Disable                 ((uint16_t) 0x14f)
#define PPSMC_MSG_MCLKDPM_Enable              ((uint16_t) 0x150)
#define PPSMC_MSG_MCLKDPM_Disable             ((uint16_t) 0x151)
#define PPSMC_MSG_UVDDPM_Enable               ((uint16_t) 0x154)
#define PPSMC_MSG_UVDDPM_Disable              ((uint16_t) 0x155)
#define PPSMC_MSG_SAMUDPM_Enable              ((uint16_t) 0x156)
#define PPSMC_MSG_SAMUDPM_Disable             ((uint16_t) 0x157)
#define PPSMC_MSG_ACPDPM_Enable               ((uint16_t) 0x158)
#define PPSMC_MSG_ACPDPM_Disable              ((uint16_t) 0x159)
#define PPSMC_MSG_VCEDPM_Enable               ((uint16_t) 0x15a)
#define PPSMC_MSG_VCEDPM_Disable              ((uint16_t) 0x15b)
#define PPSMC_MSG_VddC_Request                ((uint16_t) 0x15f)
#define PPSMC_MSG_SCLKDPM_GetEnabledMask      ((uint16_t) 0x162)
#define PPSMC_MSG_PCIeDPM_SetEnabledMask      ((uint16_t) 0x167)
#define PPSMC_MSG_TDCLimitEnable              ((uint16_t) 0x169)
#define PPSMC_MSG_TDCLimitDisable             ((uint16_t) 0x16a)
#define PPSMC_MSG_PkgPwrLimitEnable           ((uint16_t) 0x185)
#define PPSMC_MSG_PkgPwrLimitDisable          ((uint16_t) 0x186)
#define PPSMC_MSG_PkgPwrSetLimit              ((uint16_t) 0x187)
#define PPSMC_MSG_OverDriveSetTargetTdp       ((uint16_t) 0x188)
#define PPSMC_MSG_SCLKDPM_FreezeLevel         ((uint16_t) 0x189)
#define PPSMC_MSG_SCLKDPM_UnfreezeLevel       ((uint16_t) 0x18A)
#define PPSMC_MSG_MCLKDPM_FreezeLevel         ((uint16_t) 0x18B)
#define PPSMC_MSG_MCLKDPM_UnfreezeLevel       ((uint16_t) 0x18C)
#define PPSMC_MSG_MASTER_DeepSleep_ON         ((uint16_t) 0x18F)
#define PPSMC_MSG_MASTER_DeepSleep_OFF        ((uint16_t) 0x190)
#define PPSMC_MSG_Remove_DC_Clamp             ((uint16_t) 0x191)
#define PPSMC_MSG_SetFanPwmMax                ((uint16_t) 0x19A)
#define PPSMC_MSG_SetFanRpmMax                ((uint16_t) 0x205)

#define PPSMC_MSG_ENABLE_THERMAL_DPM          ((uint16_t) 0x19C)
#define PPSMC_MSG_DISABLE_THERMAL_DPM         ((uint16_t) 0x19D)

#define PPSMC_MSG_API_GetSclkFrequency        ((uint16_t) 0x200)
#define PPSMC_MSG_API_GetMclkFrequency        ((uint16_t) 0x201)

/* TN */
#define PPSMC_MSG_DPM_Config                ((uint32_t) 0x102)
#define PPSMC_MSG_DPM_ForceState            ((uint32_t) 0x104)
#define PPSMC_MSG_PG_SIMD_Config            ((uint32_t) 0x108)
#define PPSMC_MSG_Voltage_Cntl_Enable       ((uint32_t) 0x109)
#define PPSMC_MSG_Thermal_Cntl_Enable       ((uint32_t) 0x10a)
#define PPSMC_MSG_VCEPowerOFF               ((uint32_t) 0x10e)
#define PPSMC_MSG_VCEPowerON                ((uint32_t) 0x10f)
#define PPSMC_MSG_DPM_N_LevelsDisabled      ((uint32_t) 0x112)
#define PPSMC_MSG_DCE_RemoveVoltageAdjustment   ((uint32_t) 0x11d)
#define PPSMC_MSG_DCE_AllowVoltageAdjustment    ((uint32_t) 0x11e)
#define PPSMC_MSG_EnableBAPM                ((uint32_t) 0x120)
#define PPSMC_MSG_DisableBAPM               ((uint32_t) 0x121)
#define PPSMC_MSG_UVD_DPM_Config            ((uint32_t) 0x124)

#define PPSMC_MSG_DRV_DRAM_ADDR_HI            ((uint16_t) 0x250)
#define PPSMC_MSG_DRV_DRAM_ADDR_LO            ((uint16_t) 0x251)
#define PPSMC_MSG_SMU_DRAM_ADDR_HI            ((uint16_t) 0x252)
#define PPSMC_MSG_SMU_DRAM_ADDR_LO            ((uint16_t) 0x253)
#define PPSMC_MSG_LoadUcodes                  ((uint16_t) 0x254)

typedef uint16_t PPSMC_Msg;

#pragma pack(pop)

#endif
/*
 * Copyright 2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __LEGACY_DPM_H__
#define __LEGACY_DPM_H__

void amdgpu_dpm_print_class_info(u32 class, u32 class2);
void amdgpu_dpm_print_cap_info(u32 caps);
void amdgpu_dpm_print_ps_status(struct amdgpu_device *adev,
				struct amdgpu_ps *rps);
int amdgpu_get_platform_caps(struct amdgpu_device *adev);
int amdgpu_parse_extended_power_table(struct amdgpu_device *adev);
void amdgpu_free_extended_power_table(struct amdgpu_device *adev);
void amdgpu_add_thermal_controller(struct amdgpu_device *adev);
struct amd_vce_state* amdgpu_get_vce_clock_state(void *handle, u32 idx);
void amdgpu_pm_print_power_states(struct amdgpu_device *adev);
void amdgpu_legacy_dpm_compute_clocks(void *handle);
void amdgpu_dpm_thermal_work_handler(struct work_struct *work);
#endif
/*
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef __KV_DPM_H__
#define __KV_DPM_H__

#define SMU__NUM_SCLK_DPM_STATE  8
#define SMU__NUM_MCLK_DPM_LEVELS 4
#define SMU__NUM_LCLK_DPM_LEVELS 8
#define SMU__NUM_PCIE_DPM_LEVELS 0 /* ??? */
#include "smu7_fusion.h"
#include "ppsmc.h"

#define SUMO_MAX_HARDWARE_POWERLEVELS 5

#define SUMO_MAX_NUMBER_VOLTAGES    4

struct sumo_vid_mapping_entry {
	u16 vid_2bit;
	u16 vid_7bit;
};

struct sumo_vid_mapping_table {
	u32 num_entries;
	struct sumo_vid_mapping_entry entries[SUMO_MAX_NUMBER_VOLTAGES];
};

struct sumo_sclk_voltage_mapping_entry {
	u32 sclk_frequency;
	u16 vid_2bit;
	u16 rsv;
};

struct sumo_sclk_voltage_mapping_table {
	u32 num_max_dpm_entries;
	struct sumo_sclk_voltage_mapping_entry entries[SUMO_MAX_HARDWARE_POWERLEVELS];
};

#define TRINITY_AT_DFLT            30

#define KV_NUM_NBPSTATES   4

enum kv_pt_config_reg_type {
	KV_CONFIGREG_MMR = 0,
	KV_CONFIGREG_SMC_IND,
	KV_CONFIGREG_DIDT_IND,
	KV_CONFIGREG_CACHE,
	KV_CONFIGREG_MAX
};

struct kv_pt_config_reg {
	u32 offset;
	u32 mask;
	u32 shift;
	u32 value;
	enum kv_pt_config_reg_type type;
};

struct kv_lcac_config_values {
	u32 block_id;
	u32 signal_id;
	u32 t;
};

struct kv_lcac_config_reg {
	u32 cntl;
	u32 block_mask;
	u32 block_shift;
	u32 signal_mask;
	u32 signal_shift;
	u32 t_mask;
	u32 t_shift;
	u32 enable_mask;
	u32 enable_shift;
};

struct kv_pl {
	u32 sclk;
	u8 vddc_index;
	u8 ds_divider_index;
	u8 ss_divider_index;
	u8 allow_gnb_slow;
	u8 force_nbp_state;
	u8 display_wm;
	u8 vce_wm;
};

struct kv_ps {
	struct kv_pl levels[SUMO_MAX_HARDWARE_POWERLEVELS];
	u32 num_levels;
	bool need_dfs_bypass;
	u8 dpm0_pg_nb_ps_lo;
	u8 dpm0_pg_nb_ps_hi;
	u8 dpmx_nb_ps_lo;
	u8 dpmx_nb_ps_hi;
};

struct kv_sys_info {
	u32 bootup_uma_clk;
	u32 bootup_sclk;
	u32 dentist_vco_freq;
	u32 nb_dpm_enable;
	u32 nbp_memory_clock[KV_NUM_NBPSTATES];
	u32 nbp_n_clock[KV_NUM_NBPSTATES];
	u16 bootup_nb_voltage_index;
	u8 htc_tmp_lmt;
	u8 htc_hyst_lmt;
	struct sumo_sclk_voltage_mapping_table sclk_voltage_mapping_table;
	struct sumo_vid_mapping_table vid_mapping_table;
	u32 uma_channel_number;
};

struct kv_power_info {
	u32 at[SUMO_MAX_HARDWARE_POWERLEVELS];
	u32 voltage_drop_t;
	struct kv_sys_info sys_info;
	struct kv_pl boot_pl;
	bool enable_nb_ps_policy;
	bool disable_nb_ps3_in_battery;
	bool video_start;
	bool battery_state;
	u32 lowest_valid;
	u32 highest_valid;
	u16 high_voltage_t;
	bool cac_enabled;
	bool bapm_enable;
	/* smc offsets */
	u32 sram_end;
	u32 dpm_table_start;
	u32 soft_regs_start;
	/* dpm SMU tables */
	u8 graphics_dpm_level_count;
	u8 uvd_level_count;
	u8 vce_level_count;
	u8 acp_level_count;
	u8 samu_level_count;
	u16 fps_high_t;
	SMU7_Fusion_GraphicsLevel graphics_level[SMU__NUM_SCLK_DPM_STATE];
	SMU7_Fusion_ACPILevel acpi_level;
	SMU7_Fusion_UvdLevel uvd_level[SMU7_MAX_LEVELS_UVD];
	SMU7_Fusion_ExtClkLevel vce_level[SMU7_MAX_LEVELS_VCE];
	SMU7_Fusion_ExtClkLevel acp_level[SMU7_MAX_LEVELS_ACP];
	SMU7_Fusion_ExtClkLevel samu_level[SMU7_MAX_LEVELS_SAMU];
	u8 uvd_boot_level;
	u8 vce_boot_level;
	u8 acp_boot_level;
	u8 samu_boot_level;
	u8 uvd_interval;
	u8 vce_interval;
	u8 acp_interval;
	u8 samu_interval;
	u8 graphics_boot_level;
	u8 graphics_interval;
	u8 graphics_therm_throttle_enable;
	u8 graphics_voltage_change_enable;
	u8 graphics_clk_slow_enable;
	u8 graphics_clk_slow_divider;
	u8 fps_low_t;
	u32 low_sclk_interrupt_t;
	bool uvd_power_gated;
	bool vce_power_gated;
	bool acp_power_gated;
	bool samu_power_gated;
	bool nb_dpm_enabled;
	/* flags */
	bool enable_didt;
	bool enable_dpm;
	bool enable_auto_thermal_throttling;
	bool enable_nb_dpm;
	/* caps */
	bool caps_cac;
	bool caps_power_containment;
	bool caps_sq_ramping;
	bool caps_db_ramping;
	bool caps_td_ramping;
	bool caps_tcp_ramping;
	bool caps_sclk_throttle_low_notification;
	bool caps_fps;
	bool caps_uvd_dpm;
	bool caps_uvd_pg;
	bool caps_vce_pg;
	bool caps_samu_pg;
	bool caps_acp_pg;
	bool caps_stable_p_state;
	bool caps_enable_dfs_bypass;
	bool caps_sclk_ds;
	struct amdgpu_ps current_rps;
	struct kv_ps current_ps;
	struct amdgpu_ps requested_rps;
	struct kv_ps requested_ps;
};

/* XXX are these ok? */
#define KV_TEMP_RANGE_MIN (90 * 1000)
#define KV_TEMP_RANGE_MAX (120 * 1000)

/* kv_smc.c */
int amdgpu_kv_notify_message_to_smu(struct amdgpu_device *adev, u32 id);
int amdgpu_kv_dpm_get_enable_mask(struct amdgpu_device *adev, u32 *enable_mask);
int amdgpu_kv_send_msg_to_smc_with_parameter(struct amdgpu_device *adev,
				      PPSMC_Msg msg, u32 parameter);
int amdgpu_kv_read_smc_sram_dword(struct amdgpu_device *adev, u32 smc_address,
			   u32 *value, u32 limit);
int amdgpu_kv_smc_dpm_enable(struct amdgpu_device *adev, bool enable);
int amdgpu_kv_smc_bapm_enable(struct amdgpu_device *adev, bool enable);
int amdgpu_kv_copy_bytes_to_smc(struct amdgpu_device *adev,
			 u32 smc_start_address,
			 const u8 *src, u32 byte_count, u32 limit);

#endif
/*
 * Copyright 2014 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __CIK_DPM_H__
#define __CIK_DPM_H__

extern const struct amdgpu_ip_block_version kv_smu_ip_block;

#endif
#ifndef YELLOW_CARP_OFFSET_H
#define YELLOW_CARP_OFFSET_H


#define MAX_INSTANCE                                        7
#define MAX_SEGMENT                                         6


struct IP_BASE_INSTANCE
{
    unsigned int segment[MAX_SEGMENT];
} __maybe_unused;

struct IP_BASE
{
    struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
} __maybe_unused;


static const struct IP_BASE ACP_BASE = { { { { 0x02403800, 0x00480000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE ATHUB_BASE = { { { { 0x00000C00, 0x00013300, 0x02408C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE CLK_BASE = { { { { 0x00016C00, 0x02401800, 0, 0, 0, 0 } },
                                        { { 0x00016E00, 0x02401C00, 0, 0, 0, 0 } },
                                        { { 0x00017000, 0x02402000, 0, 0, 0, 0 } },
                                        { { 0x00017200, 0x02402400, 0, 0, 0, 0 } },
                                        { { 0x0001B000, 0x0242D800, 0, 0, 0, 0 } },
                                        { { 0x0001B200, 0x0242DC00, 0, 0, 0, 0 } },
                                        { { 0x0001B400, 0x0242E000, 0, 0, 0, 0 } } } };
static const struct IP_BASE DBGU_IO_BASE = { { { { 0x000001E0, 0x00000260, 0x00000280, 0x0240B400, 0x02413C00, 0x02416000 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DCN_BASE = { { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DPCS_BASE = { { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DF_BASE = { { { { 0x00007000, 0x0240B800, 0x02447800, 0x00C00000, 0x03640000, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FCH_BASE = { { { { 0x0240C000, 0x00B40000, 0x11000000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FUSE_BASE = { { { { 0x00017400, 0x02401400, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE GC_BASE = { { { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDP_BASE = { { { { 0x00000F20, 0x0240A400, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE IOHC0_BASE = { { { { 0x00010000, 0x02406000, 0x04EC0000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MMHUB_BASE = { { { { 0x00013200, 0x0001A000, 0x02408800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP0_BASE = { { { { 0x00016000, 0x0243FC00, 0x00DC0000, 0x00E00000, 0x00E40000, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP1_BASE = { { { { 0x00016000, 0x0243FC00, 0x00DC0000, 0x00E00000, 0x00E40000, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP2_BASE = { { { { 0x00016000, 0x0243FC00, 0x00DC0000, 0x00E00000, 0x00E40000, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE NBIO_BASE = { { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000, 0x04040000 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE OSSSYS_BASE = { { { { 0x000010A0, 0x0240A000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE PCIE_BASE = { { { { 0x02411800, 0x04440000, 0, 0, 0, 0 } },
                                        { { 0x02411C00, 0x04480000, 0, 0, 0, 0 } },
                                        { { 0x02412000, 0x044C0000, 0, 0, 0, 0 } },
                                        { { 0x02412400, 0x04500000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SDMA0_BASE = { { { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SMUIO_BASE = { { { { 0x00016800, 0x00016A00, 0x02401000, 0x00440000, 0, 0 } },
                                        { { 0x0001BC00, 0x0242D400, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE THM_BASE = { { { { 0x00016600, 0x02400C00, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UMC_BASE = { { { { 0x00014000, 0x00054000, 0x02425800, 0x02425C00, 0, 0 } },
                                        { { 0x00094000, 0x000D4000, 0x02426000, 0x02426400, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE VCN_BASE = { { { { 0x00007800, 0x00007E00, 0x02403000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };


#define ACP_BASE__INST0_SEG0                       0x02403800
#define ACP_BASE__INST0_SEG1                       0x00480000
#define ACP_BASE__INST0_SEG2                       0
#define ACP_BASE__INST0_SEG3                       0
#define ACP_BASE__INST0_SEG4                       0
#define ACP_BASE__INST0_SEG5                       0

#define ACP_BASE__INST1_SEG0                       0
#define ACP_BASE__INST1_SEG1                       0
#define ACP_BASE__INST1_SEG2                       0
#define ACP_BASE__INST1_SEG3                       0
#define ACP_BASE__INST1_SEG4                       0
#define ACP_BASE__INST1_SEG5                       0

#define ACP_BASE__INST2_SEG0                       0
#define ACP_BASE__INST2_SEG1                       0
#define ACP_BASE__INST2_SEG2                       0
#define ACP_BASE__INST2_SEG3                       0
#define ACP_BASE__INST2_SEG4                       0
#define ACP_BASE__INST2_SEG5                       0

#define ACP_BASE__INST3_SEG0                       0
#define ACP_BASE__INST3_SEG1                       0
#define ACP_BASE__INST3_SEG2                       0
#define ACP_BASE__INST3_SEG3                       0
#define ACP_BASE__INST3_SEG4                       0
#define ACP_BASE__INST3_SEG5                       0

#define ACP_BASE__INST4_SEG0                       0
#define ACP_BASE__INST4_SEG1                       0
#define ACP_BASE__INST4_SEG2                       0
#define ACP_BASE__INST4_SEG3                       0
#define ACP_BASE__INST4_SEG4                       0
#define ACP_BASE__INST4_SEG5                       0

#define ACP_BASE__INST5_SEG0                       0
#define ACP_BASE__INST5_SEG1                       0
#define ACP_BASE__INST5_SEG2                       0
#define ACP_BASE__INST5_SEG3                       0
#define ACP_BASE__INST5_SEG4                       0
#define ACP_BASE__INST5_SEG5                       0

#define ACP_BASE__INST6_SEG0                       0
#define ACP_BASE__INST6_SEG1                       0
#define ACP_BASE__INST6_SEG2                       0
#define ACP_BASE__INST6_SEG3                       0
#define ACP_BASE__INST6_SEG4                       0
#define ACP_BASE__INST6_SEG5                       0

#define ATHUB_BASE__INST0_SEG0                     0x00000C00
#define ATHUB_BASE__INST0_SEG1                     0x00013300
#define ATHUB_BASE__INST0_SEG2                     0x02408C00
#define ATHUB_BASE__INST0_SEG3                     0
#define ATHUB_BASE__INST0_SEG4                     0
#define ATHUB_BASE__INST0_SEG5                     0

#define ATHUB_BASE__INST1_SEG0                     0
#define ATHUB_BASE__INST1_SEG1                     0
#define ATHUB_BASE__INST1_SEG2                     0
#define ATHUB_BASE__INST1_SEG3                     0
#define ATHUB_BASE__INST1_SEG4                     0
#define ATHUB_BASE__INST1_SEG5                     0

#define ATHUB_BASE__INST2_SEG0                     0
#define ATHUB_BASE__INST2_SEG1                     0
#define ATHUB_BASE__INST2_SEG2                     0
#define ATHUB_BASE__INST2_SEG3                     0
#define ATHUB_BASE__INST2_SEG4                     0
#define ATHUB_BASE__INST2_SEG5                     0

#define ATHUB_BASE__INST3_SEG0                     0
#define ATHUB_BASE__INST3_SEG1                     0
#define ATHUB_BASE__INST3_SEG2                     0
#define ATHUB_BASE__INST3_SEG3                     0
#define ATHUB_BASE__INST3_SEG4                     0
#define ATHUB_BASE__INST3_SEG5                     0

#define ATHUB_BASE__INST4_SEG0                     0
#define ATHUB_BASE__INST4_SEG1                     0
#define ATHUB_BASE__INST4_SEG2                     0
#define ATHUB_BASE__INST4_SEG3                     0
#define ATHUB_BASE__INST4_SEG4                     0
#define ATHUB_BASE__INST4_SEG5                     0

#define ATHUB_BASE__INST5_SEG0                     0
#define ATHUB_BASE__INST5_SEG1                     0
#define ATHUB_BASE__INST5_SEG2                     0
#define ATHUB_BASE__INST5_SEG3                     0
#define ATHUB_BASE__INST5_SEG4                     0
#define ATHUB_BASE__INST5_SEG5                     0

#define ATHUB_BASE__INST6_SEG0                     0
#define ATHUB_BASE__INST6_SEG1                     0
#define ATHUB_BASE__INST6_SEG2                     0
#define ATHUB_BASE__INST6_SEG3                     0
#define ATHUB_BASE__INST6_SEG4                     0
#define ATHUB_BASE__INST6_SEG5                     0

#define CLK_BASE__INST0_SEG0                       0x00016C00
#define CLK_BASE__INST0_SEG1                       0x02401800
#define CLK_BASE__INST0_SEG2                       0
#define CLK_BASE__INST0_SEG3                       0
#define CLK_BASE__INST0_SEG4                       0
#define CLK_BASE__INST0_SEG5                       0

#define CLK_BASE__INST1_SEG0                       0x00016E00
#define CLK_BASE__INST1_SEG1                       0x02401C00
#define CLK_BASE__INST1_SEG2                       0
#define CLK_BASE__INST1_SEG3                       0
#define CLK_BASE__INST1_SEG4                       0
#define CLK_BASE__INST1_SEG5                       0

#define CLK_BASE__INST2_SEG0                       0x00017000
#define CLK_BASE__INST2_SEG1                       0x02402000
#define CLK_BASE__INST2_SEG2                       0
#define CLK_BASE__INST2_SEG3                       0
#define CLK_BASE__INST2_SEG4                       0
#define CLK_BASE__INST2_SEG5                       0

#define CLK_BASE__INST3_SEG0                       0x00017200
#define CLK_BASE__INST3_SEG1                       0x02402400
#define CLK_BASE__INST3_SEG2                       0
#define CLK_BASE__INST3_SEG3                       0
#define CLK_BASE__INST3_SEG4                       0
#define CLK_BASE__INST3_SEG5                       0

#define CLK_BASE__INST4_SEG0                       0x0001B000
#define CLK_BASE__INST4_SEG1                       0x0242D800
#define CLK_BASE__INST4_SEG2                       0
#define CLK_BASE__INST4_SEG3                       0
#define CLK_BASE__INST4_SEG4                       0
#define CLK_BASE__INST4_SEG5                       0

#define CLK_BASE__INST5_SEG0                       0x0001B200
#define CLK_BASE__INST5_SEG1                       0x0242DC00
#define CLK_BASE__INST5_SEG2                       0
#define CLK_BASE__INST5_SEG3                       0
#define CLK_BASE__INST5_SEG4                       0
#define CLK_BASE__INST5_SEG5                       0

#define CLK_BASE__INST6_SEG0                       0x0001B400
#define CLK_BASE__INST6_SEG1                       0x0242E000
#define CLK_BASE__INST6_SEG2                       0
#define CLK_BASE__INST6_SEG3                       0
#define CLK_BASE__INST6_SEG4                       0
#define CLK_BASE__INST6_SEG5                       0

#define DBGU_IO_BASE__INST0_SEG0                   0x000001E0
#define DBGU_IO_BASE__INST0_SEG1                   0x00000260
#define DBGU_IO_BASE__INST0_SEG2                   0x00000280
#define DBGU_IO_BASE__INST0_SEG3                   0x0240B400
#define DBGU_IO_BASE__INST0_SEG4                   0x02413C00
#define DBGU_IO_BASE__INST0_SEG5                   0x02416000

#define DBGU_IO_BASE__INST1_SEG0                   0
#define DBGU_IO_BASE__INST1_SEG1                   0
#define DBGU_IO_BASE__INST1_SEG2                   0
#define DBGU_IO_BASE__INST1_SEG3                   0
#define DBGU_IO_BASE__INST1_SEG4                   0
#define DBGU_IO_BASE__INST1_SEG5                   0

#define DBGU_IO_BASE__INST2_SEG0                   0
#define DBGU_IO_BASE__INST2_SEG1                   0
#define DBGU_IO_BASE__INST2_SEG2                   0
#define DBGU_IO_BASE__INST2_SEG3                   0
#define DBGU_IO_BASE__INST2_SEG4                   0
#define DBGU_IO_BASE__INST2_SEG5                   0

#define DBGU_IO_BASE__INST3_SEG0                   0
#define DBGU_IO_BASE__INST3_SEG1                   0
#define DBGU_IO_BASE__INST3_SEG2                   0
#define DBGU_IO_BASE__INST3_SEG3                   0
#define DBGU_IO_BASE__INST3_SEG4                   0
#define DBGU_IO_BASE__INST3_SEG5                   0

#define DBGU_IO_BASE__INST4_SEG0                   0
#define DBGU_IO_BASE__INST4_SEG1                   0
#define DBGU_IO_BASE__INST4_SEG2                   0
#define DBGU_IO_BASE__INST4_SEG3                   0
#define DBGU_IO_BASE__INST4_SEG4                   0
#define DBGU_IO_BASE__INST4_SEG5                   0

#define DBGU_IO_BASE__INST5_SEG0                   0
#define DBGU_IO_BASE__INST5_SEG1                   0
#define DBGU_IO_BASE__INST5_SEG2                   0
#define DBGU_IO_BASE__INST5_SEG3                   0
#define DBGU_IO_BASE__INST5_SEG4                   0
#define DBGU_IO_BASE__INST5_SEG5                   0

#define DBGU_IO_BASE__INST6_SEG0                   0
#define DBGU_IO_BASE__INST6_SEG1                   0
#define DBGU_IO_BASE__INST6_SEG2                   0
#define DBGU_IO_BASE__INST6_SEG3                   0
#define DBGU_IO_BASE__INST6_SEG4                   0
#define DBGU_IO_BASE__INST6_SEG5                   0

#define DCN_BASE__INST0_SEG0                       0x00000012
#define DCN_BASE__INST0_SEG1                       0x000000C0
#define DCN_BASE__INST0_SEG2                       0x000034C0
#define DCN_BASE__INST0_SEG3                       0x00009000
#define DCN_BASE__INST0_SEG4                       0x02403C00
#define DCN_BASE__INST0_SEG5                       0

#define DCN_BASE__INST1_SEG0                       0
#define DCN_BASE__INST1_SEG1                       0
#define DCN_BASE__INST1_SEG2                       0
#define DCN_BASE__INST1_SEG3                       0
#define DCN_BASE__INST1_SEG4                       0
#define DCN_BASE__INST1_SEG5                       0

#define DCN_BASE__INST2_SEG0                       0
#define DCN_BASE__INST2_SEG1                       0
#define DCN_BASE__INST2_SEG2                       0
#define DCN_BASE__INST2_SEG3                       0
#define DCN_BASE__INST2_SEG4                       0
#define DCN_BASE__INST2_SEG5                       0

#define DCN_BASE__INST3_SEG0                       0
#define DCN_BASE__INST3_SEG1                       0
#define DCN_BASE__INST3_SEG2                       0
#define DCN_BASE__INST3_SEG3                       0
#define DCN_BASE__INST3_SEG4                       0
#define DCN_BASE__INST3_SEG5                       0

#define DCN_BASE__INST4_SEG0                       0
#define DCN_BASE__INST4_SEG1                       0
#define DCN_BASE__INST4_SEG2                       0
#define DCN_BASE__INST4_SEG3                       0
#define DCN_BASE__INST4_SEG4                       0
#define DCN_BASE__INST4_SEG5                       0

#define DCN_BASE__INST5_SEG0                       0
#define DCN_BASE__INST5_SEG1                       0
#define DCN_BASE__INST5_SEG2                       0
#define DCN_BASE__INST5_SEG3                       0
#define DCN_BASE__INST5_SEG4                       0
#define DCN_BASE__INST5_SEG5                       0

#define DCN_BASE__INST6_SEG0                       0
#define DCN_BASE__INST6_SEG1                       0
#define DCN_BASE__INST6_SEG2                       0
#define DCN_BASE__INST6_SEG3                       0
#define DCN_BASE__INST6_SEG4                       0
#define DCN_BASE__INST6_SEG5                       0

#define DPCS_BASE__INST0_SEG0                      0x00000012
#define DPCS_BASE__INST0_SEG1                      0x000000C0
#define DPCS_BASE__INST0_SEG2                      0x000034C0
#define DPCS_BASE__INST0_SEG3                      0x00009000
#define DPCS_BASE__INST0_SEG4                      0x02403C00
#define DPCS_BASE__INST0_SEG5                      0

#define DPCS_BASE__INST1_SEG0                      0
#define DPCS_BASE__INST1_SEG1                      0
#define DPCS_BASE__INST1_SEG2                      0
#define DPCS_BASE__INST1_SEG3                      0
#define DPCS_BASE__INST1_SEG4                      0
#define DPCS_BASE__INST1_SEG5                      0

#define DPCS_BASE__INST2_SEG0                      0
#define DPCS_BASE__INST2_SEG1                      0
#define DPCS_BASE__INST2_SEG2                      0
#define DPCS_BASE__INST2_SEG3                      0
#define DPCS_BASE__INST2_SEG4                      0
#define DPCS_BASE__INST2_SEG5                      0

#define DPCS_BASE__INST3_SEG0                      0
#define DPCS_BASE__INST3_SEG1                      0
#define DPCS_BASE__INST3_SEG2                      0
#define DPCS_BASE__INST3_SEG3                      0
#define DPCS_BASE__INST3_SEG4                      0
#define DPCS_BASE__INST3_SEG5                      0

#define DPCS_BASE__INST4_SEG0                      0
#define DPCS_BASE__INST4_SEG1                      0
#define DPCS_BASE__INST4_SEG2                      0
#define DPCS_BASE__INST4_SEG3                      0
#define DPCS_BASE__INST4_SEG4                      0
#define DPCS_BASE__INST4_SEG5                      0

#define DPCS_BASE__INST5_SEG0                      0
#define DPCS_BASE__INST5_SEG1                      0
#define DPCS_BASE__INST5_SEG2                      0
#define DPCS_BASE__INST5_SEG3                      0
#define DPCS_BASE__INST5_SEG4                      0
#define DPCS_BASE__INST5_SEG5                      0

#define DPCS_BASE__INST6_SEG0                      0
#define DPCS_BASE__INST6_SEG1                      0
#define DPCS_BASE__INST6_SEG2                      0
#define DPCS_BASE__INST6_SEG3                      0
#define DPCS_BASE__INST6_SEG4                      0
#define DPCS_BASE__INST6_SEG5                      0

#define DF_BASE__INST0_SEG0                        0x00007000
#define DF_BASE__INST0_SEG1                        0x0240B800
#define DF_BASE__INST0_SEG2                        0x02447800
#define DF_BASE__INST0_SEG3                        0x00C00000
#define DF_BASE__INST0_SEG4                        0x03640000
#define DF_BASE__INST0_SEG5                        0

#define DF_BASE__INST1_SEG0                        0
#define DF_BASE__INST1_SEG1                        0
#define DF_BASE__INST1_SEG2                        0
#define DF_BASE__INST1_SEG3                        0
#define DF_BASE__INST1_SEG4                        0
#define DF_BASE__INST1_SEG5                        0

#define DF_BASE__INST2_SEG0                        0
#define DF_BASE__INST2_SEG1                        0
#define DF_BASE__INST2_SEG2                        0
#define DF_BASE__INST2_SEG3                        0
#define DF_BASE__INST2_SEG4                        0
#define DF_BASE__INST2_SEG5                        0

#define DF_BASE__INST3_SEG0                        0
#define DF_BASE__INST3_SEG1                        0
#define DF_BASE__INST3_SEG2                        0
#define DF_BASE__INST3_SEG3                        0
#define DF_BASE__INST3_SEG4                        0
#define DF_BASE__INST3_SEG5                        0

#define DF_BASE__INST4_SEG0                        0
#define DF_BASE__INST4_SEG1                        0
#define DF_BASE__INST4_SEG2                        0
#define DF_BASE__INST4_SEG3                        0
#define DF_BASE__INST4_SEG4                        0
#define DF_BASE__INST4_SEG5                        0

#define DF_BASE__INST5_SEG0                        0
#define DF_BASE__INST5_SEG1                        0
#define DF_BASE__INST5_SEG2                        0
#define DF_BASE__INST5_SEG3                        0
#define DF_BASE__INST5_SEG4                        0
#define DF_BASE__INST5_SEG5                        0

#define DF_BASE__INST6_SEG0                        0
#define DF_BASE__INST6_SEG1                        0
#define DF_BASE__INST6_SEG2                        0
#define DF_BASE__INST6_SEG3                        0
#define DF_BASE__INST6_SEG4                        0
#define DF_BASE__INST6_SEG5                        0

#define FCH_BASE__INST0_SEG0                       0x0240C000
#define FCH_BASE__INST0_SEG1                       0x00B40000
#define FCH_BASE__INST0_SEG2                       0x11000000
#define FCH_BASE__INST0_SEG3                       0
#define FCH_BASE__INST0_SEG4                       0
#define FCH_BASE__INST0_SEG5                       0

#define FCH_BASE__INST1_SEG0                       0
#define FCH_BASE__INST1_SEG1                       0
#define FCH_BASE__INST1_SEG2                       0
#define FCH_BASE__INST1_SEG3                       0
#define FCH_BASE__INST1_SEG4                       0
#define FCH_BASE__INST1_SEG5                       0

#define FCH_BASE__INST2_SEG0                       0
#define FCH_BASE__INST2_SEG1                       0
#define FCH_BASE__INST2_SEG2                       0
#define FCH_BASE__INST2_SEG3                       0
#define FCH_BASE__INST2_SEG4                       0
#define FCH_BASE__INST2_SEG5                       0

#define FCH_BASE__INST3_SEG0                       0
#define FCH_BASE__INST3_SEG1                       0
#define FCH_BASE__INST3_SEG2                       0
#define FCH_BASE__INST3_SEG3                       0
#define FCH_BASE__INST3_SEG4                       0
#define FCH_BASE__INST3_SEG5                       0

#define FCH_BASE__INST4_SEG0                       0
#define FCH_BASE__INST4_SEG1                       0
#define FCH_BASE__INST4_SEG2                       0
#define FCH_BASE__INST4_SEG3                       0
#define FCH_BASE__INST4_SEG4                       0
#define FCH_BASE__INST4_SEG5                       0

#define FCH_BASE__INST5_SEG0                       0
#define FCH_BASE__INST5_SEG1                       0
#define FCH_BASE__INST5_SEG2                       0
#define FCH_BASE__INST5_SEG3                       0
#define FCH_BASE__INST5_SEG4                       0
#define FCH_BASE__INST5_SEG5                       0

#define FCH_BASE__INST6_SEG0                       0
#define FCH_BASE__INST6_SEG1                       0
#define FCH_BASE__INST6_SEG2                       0
#define FCH_BASE__INST6_SEG3                       0
#define FCH_BASE__INST6_SEG4                       0
#define FCH_BASE__INST6_SEG5                       0

#define FUSE_BASE__INST0_SEG0                      0x00017400
#define FUSE_BASE__INST0_SEG1                      0x02401400
#define FUSE_BASE__INST0_SEG2                      0
#define FUSE_BASE__INST0_SEG3                      0
#define FUSE_BASE__INST0_SEG4                      0
#define FUSE_BASE__INST0_SEG5                      0

#define FUSE_BASE__INST1_SEG0                      0
#define FUSE_BASE__INST1_SEG1                      0
#define FUSE_BASE__INST1_SEG2                      0
#define FUSE_BASE__INST1_SEG3                      0
#define FUSE_BASE__INST1_SEG4                      0
#define FUSE_BASE__INST1_SEG5                      0

#define FUSE_BASE__INST2_SEG0                      0
#define FUSE_BASE__INST2_SEG1                      0
#define FUSE_BASE__INST2_SEG2                      0
#define FUSE_BASE__INST2_SEG3                      0
#define FUSE_BASE__INST2_SEG4                      0
#define FUSE_BASE__INST2_SEG5                      0

#define FUSE_BASE__INST3_SEG0                      0
#define FUSE_BASE__INST3_SEG1                      0
#define FUSE_BASE__INST3_SEG2                      0
#define FUSE_BASE__INST3_SEG3                      0
#define FUSE_BASE__INST3_SEG4                      0
#define FUSE_BASE__INST3_SEG5                      0

#define FUSE_BASE__INST4_SEG0                      0
#define FUSE_BASE__INST4_SEG1                      0
#define FUSE_BASE__INST4_SEG2                      0
#define FUSE_BASE__INST4_SEG3                      0
#define FUSE_BASE__INST4_SEG4                      0
#define FUSE_BASE__INST4_SEG5                      0

#define FUSE_BASE__INST5_SEG0                      0
#define FUSE_BASE__INST5_SEG1                      0
#define FUSE_BASE__INST5_SEG2                      0
#define FUSE_BASE__INST5_SEG3                      0
#define FUSE_BASE__INST5_SEG4                      0
#define FUSE_BASE__INST5_SEG5                      0

#define FUSE_BASE__INST6_SEG0                      0
#define FUSE_BASE__INST6_SEG1                      0
#define FUSE_BASE__INST6_SEG2                      0
#define FUSE_BASE__INST6_SEG3                      0
#define FUSE_BASE__INST6_SEG4                      0
#define FUSE_BASE__INST6_SEG5                      0

#define GC_BASE__INST0_SEG0                        0x00001260
#define GC_BASE__INST0_SEG1                        0x0000A000
#define GC_BASE__INST0_SEG2                        0x02402C00
#define GC_BASE__INST0_SEG3                        0
#define GC_BASE__INST0_SEG4                        0
#define GC_BASE__INST0_SEG5                        0

#define GC_BASE__INST1_SEG0                        0
#define GC_BASE__INST1_SEG1                        0
#define GC_BASE__INST1_SEG2                        0
#define GC_BASE__INST1_SEG3                        0
#define GC_BASE__INST1_SEG4                        0
#define GC_BASE__INST1_SEG5                        0

#define GC_BASE__INST2_SEG0                        0
#define GC_BASE__INST2_SEG1                        0
#define GC_BASE__INST2_SEG2                        0
#define GC_BASE__INST2_SEG3                        0
#define GC_BASE__INST2_SEG4                        0
#define GC_BASE__INST2_SEG5                        0

#define GC_BASE__INST3_SEG0                        0
#define GC_BASE__INST3_SEG1                        0
#define GC_BASE__INST3_SEG2                        0
#define GC_BASE__INST3_SEG3                        0
#define GC_BASE__INST3_SEG4                        0
#define GC_BASE__INST3_SEG5                        0

#define GC_BASE__INST4_SEG0                        0
#define GC_BASE__INST4_SEG1                        0
#define GC_BASE__INST4_SEG2                        0
#define GC_BASE__INST4_SEG3                        0
#define GC_BASE__INST4_SEG4                        0
#define GC_BASE__INST4_SEG5                        0

#define GC_BASE__INST5_SEG0                        0
#define GC_BASE__INST5_SEG1                        0
#define GC_BASE__INST5_SEG2                        0
#define GC_BASE__INST5_SEG3                        0
#define GC_BASE__INST5_SEG4                        0
#define GC_BASE__INST5_SEG5                        0

#define GC_BASE__INST6_SEG0                        0
#define GC_BASE__INST6_SEG1                        0
#define GC_BASE__INST6_SEG2                        0
#define GC_BASE__INST6_SEG3                        0
#define GC_BASE__INST6_SEG4                        0
#define GC_BASE__INST6_SEG5                        0

#define HDP_BASE__INST0_SEG0                       0x00000F20
#define HDP_BASE__INST0_SEG1                       0x0240A400
#define HDP_BASE__INST0_SEG2                       0
#define HDP_BASE__INST0_SEG3                       0
#define HDP_BASE__INST0_SEG4                       0
#define HDP_BASE__INST0_SEG5                       0

#define HDP_BASE__INST1_SEG0                       0
#define HDP_BASE__INST1_SEG1                       0
#define HDP_BASE__INST1_SEG2                       0
#define HDP_BASE__INST1_SEG3                       0
#define HDP_BASE__INST1_SEG4                       0
#define HDP_BASE__INST1_SEG5                       0

#define HDP_BASE__INST2_SEG0                       0
#define HDP_BASE__INST2_SEG1                       0
#define HDP_BASE__INST2_SEG2                       0
#define HDP_BASE__INST2_SEG3                       0
#define HDP_BASE__INST2_SEG4                       0
#define HDP_BASE__INST2_SEG5                       0

#define HDP_BASE__INST3_SEG0                       0
#define HDP_BASE__INST3_SEG1                       0
#define HDP_BASE__INST3_SEG2                       0
#define HDP_BASE__INST3_SEG3                       0
#define HDP_BASE__INST3_SEG4                       0
#define HDP_BASE__INST3_SEG5                       0

#define HDP_BASE__INST4_SEG0                       0
#define HDP_BASE__INST4_SEG1                       0
#define HDP_BASE__INST4_SEG2                       0
#define HDP_BASE__INST4_SEG3                       0
#define HDP_BASE__INST4_SEG4                       0
#define HDP_BASE__INST4_SEG5                       0

#define HDP_BASE__INST5_SEG0                       0
#define HDP_BASE__INST5_SEG1                       0
#define HDP_BASE__INST5_SEG2                       0
#define HDP_BASE__INST5_SEG3                       0
#define HDP_BASE__INST5_SEG4                       0
#define HDP_BASE__INST5_SEG5                       0

#define HDP_BASE__INST6_SEG0                       0
#define HDP_BASE__INST6_SEG1                       0
#define HDP_BASE__INST6_SEG2                       0
#define HDP_BASE__INST6_SEG3                       0
#define HDP_BASE__INST6_SEG4                       0
#define HDP_BASE__INST6_SEG5                       0

#define IOHC0_BASE__INST0_SEG0                     0x00010000
#define IOHC0_BASE__INST0_SEG1                     0x02406000
#define IOHC0_BASE__INST0_SEG2                     0x04EC0000
#define IOHC0_BASE__INST0_SEG3                     0
#define IOHC0_BASE__INST0_SEG4                     0
#define IOHC0_BASE__INST0_SEG5                     0

#define IOHC0_BASE__INST1_SEG0                     0
#define IOHC0_BASE__INST1_SEG1                     0
#define IOHC0_BASE__INST1_SEG2                     0
#define IOHC0_BASE__INST1_SEG3                     0
#define IOHC0_BASE__INST1_SEG4                     0
#define IOHC0_BASE__INST1_SEG5                     0

#define IOHC0_BASE__INST2_SEG0                     0
#define IOHC0_BASE__INST2_SEG1                     0
#define IOHC0_BASE__INST2_SEG2                     0
#define IOHC0_BASE__INST2_SEG3                     0
#define IOHC0_BASE__INST2_SEG4                     0
#define IOHC0_BASE__INST2_SEG5                     0

#define IOHC0_BASE__INST3_SEG0                     0
#define IOHC0_BASE__INST3_SEG1                     0
#define IOHC0_BASE__INST3_SEG2                     0
#define IOHC0_BASE__INST3_SEG3                     0
#define IOHC0_BASE__INST3_SEG4                     0
#define IOHC0_BASE__INST3_SEG5                     0

#define IOHC0_BASE__INST4_SEG0                     0
#define IOHC0_BASE__INST4_SEG1                     0
#define IOHC0_BASE__INST4_SEG2                     0
#define IOHC0_BASE__INST4_SEG3                     0
#define IOHC0_BASE__INST4_SEG4                     0
#define IOHC0_BASE__INST4_SEG5                     0

#define IOHC0_BASE__INST5_SEG0                     0
#define IOHC0_BASE__INST5_SEG1                     0
#define IOHC0_BASE__INST5_SEG2                     0
#define IOHC0_BASE__INST5_SEG3                     0
#define IOHC0_BASE__INST5_SEG4                     0
#define IOHC0_BASE__INST5_SEG5                     0

#define IOHC0_BASE__INST6_SEG0                     0
#define IOHC0_BASE__INST6_SEG1                     0
#define IOHC0_BASE__INST6_SEG2                     0
#define IOHC0_BASE__INST6_SEG3                     0
#define IOHC0_BASE__INST6_SEG4                     0
#define IOHC0_BASE__INST6_SEG5                     0

#define MMHUB_BASE__INST0_SEG0                     0x00013200
#define MMHUB_BASE__INST0_SEG1                     0x0001A000
#define MMHUB_BASE__INST0_SEG2                     0x02408800
#define MMHUB_BASE__INST0_SEG3                     0
#define MMHUB_BASE__INST0_SEG4                     0
#define MMHUB_BASE__INST0_SEG5                     0

#define MMHUB_BASE__INST1_SEG0                     0
#define MMHUB_BASE__INST1_SEG1                     0
#define MMHUB_BASE__INST1_SEG2                     0
#define MMHUB_BASE__INST1_SEG3                     0
#define MMHUB_BASE__INST1_SEG4                     0
#define MMHUB_BASE__INST1_SEG5                     0

#define MMHUB_BASE__INST2_SEG0                     0
#define MMHUB_BASE__INST2_SEG1                     0
#define MMHUB_BASE__INST2_SEG2                     0
#define MMHUB_BASE__INST2_SEG3                     0
#define MMHUB_BASE__INST2_SEG4                     0
#define MMHUB_BASE__INST2_SEG5                     0

#define MMHUB_BASE__INST3_SEG0                     0
#define MMHUB_BASE__INST3_SEG1                     0
#define MMHUB_BASE__INST3_SEG2                     0
#define MMHUB_BASE__INST3_SEG3                     0
#define MMHUB_BASE__INST3_SEG4                     0
#define MMHUB_BASE__INST3_SEG5                     0

#define MMHUB_BASE__INST4_SEG0                     0
#define MMHUB_BASE__INST4_SEG1                     0
#define MMHUB_BASE__INST4_SEG2                     0
#define MMHUB_BASE__INST4_SEG3                     0
#define MMHUB_BASE__INST4_SEG4                     0
#define MMHUB_BASE__INST4_SEG5                     0

#define MMHUB_BASE__INST5_SEG0                     0
#define MMHUB_BASE__INST5_SEG1                     0
#define MMHUB_BASE__INST5_SEG2                     0
#define MMHUB_BASE__INST5_SEG3                     0
#define MMHUB_BASE__INST5_SEG4                     0
#define MMHUB_BASE__INST5_SEG5                     0

#define MMHUB_BASE__INST6_SEG0                     0
#define MMHUB_BASE__INST6_SEG1                     0
#define MMHUB_BASE__INST6_SEG2                     0
#define MMHUB_BASE__INST6_SEG3                     0
#define MMHUB_BASE__INST6_SEG4                     0
#define MMHUB_BASE__INST6_SEG5                     0

#define MP0_BASE__INST0_SEG0                       0x00016000
#define MP0_BASE__INST0_SEG1                       0x0243FC00
#define MP0_BASE__INST0_SEG2                       0x00DC0000
#define MP0_BASE__INST0_SEG3                       0x00E00000
#define MP0_BASE__INST0_SEG4                       0x00E40000
#define MP0_BASE__INST0_SEG5                       0

#define MP0_BASE__INST1_SEG0                       0
#define MP0_BASE__INST1_SEG1                       0
#define MP0_BASE__INST1_SEG2                       0
#define MP0_BASE__INST1_SEG3                       0
#define MP0_BASE__INST1_SEG4                       0
#define MP0_BASE__INST1_SEG5                       0

#define MP0_BASE__INST2_SEG0                       0
#define MP0_BASE__INST2_SEG1                       0
#define MP0_BASE__INST2_SEG2                       0
#define MP0_BASE__INST2_SEG3                       0
#define MP0_BASE__INST2_SEG4                       0
#define MP0_BASE__INST2_SEG5                       0

#define MP0_BASE__INST3_SEG0                       0
#define MP0_BASE__INST3_SEG1                       0
#define MP0_BASE__INST3_SEG2                       0
#define MP0_BASE__INST3_SEG3                       0
#define MP0_BASE__INST3_SEG4                       0
#define MP0_BASE__INST3_SEG5                       0

#define MP0_BASE__INST4_SEG0                       0
#define MP0_BASE__INST4_SEG1                       0
#define MP0_BASE__INST4_SEG2                       0
#define MP0_BASE__INST4_SEG3                       0
#define MP0_BASE__INST4_SEG4                       0
#define MP0_BASE__INST4_SEG5                       0

#define MP0_BASE__INST5_SEG0                       0
#define MP0_BASE__INST5_SEG1                       0
#define MP0_BASE__INST5_SEG2                       0
#define MP0_BASE__INST5_SEG3                       0
#define MP0_BASE__INST5_SEG4                       0
#define MP0_BASE__INST5_SEG5                       0

#define MP0_BASE__INST6_SEG0                       0
#define MP0_BASE__INST6_SEG1                       0
#define MP0_BASE__INST6_SEG2                       0
#define MP0_BASE__INST6_SEG3                       0
#define MP0_BASE__INST6_SEG4                       0
#define MP0_BASE__INST6_SEG5                       0

#define MP1_BASE__INST0_SEG0                       0x00016000
#define MP1_BASE__INST0_SEG1                       0x0243FC00
#define MP1_BASE__INST0_SEG2                       0x00DC0000
#define MP1_BASE__INST0_SEG3                       0x00E00000
#define MP1_BASE__INST0_SEG4                       0x00E40000
#define MP1_BASE__INST0_SEG5                       0

#define MP1_BASE__INST1_SEG0                       0
#define MP1_BASE__INST1_SEG1                       0
#define MP1_BASE__INST1_SEG2                       0
#define MP1_BASE__INST1_SEG3                       0
#define MP1_BASE__INST1_SEG4                       0
#define MP1_BASE__INST1_SEG5                       0

#define MP1_BASE__INST2_SEG0                       0
#define MP1_BASE__INST2_SEG1                       0
#define MP1_BASE__INST2_SEG2                       0
#define MP1_BASE__INST2_SEG3                       0
#define MP1_BASE__INST2_SEG4                       0
#define MP1_BASE__INST2_SEG5                       0

#define MP1_BASE__INST3_SEG0                       0
#define MP1_BASE__INST3_SEG1                       0
#define MP1_BASE__INST3_SEG2                       0
#define MP1_BASE__INST3_SEG3                       0
#define MP1_BASE__INST3_SEG4                       0
#define MP1_BASE__INST3_SEG5                       0

#define MP1_BASE__INST4_SEG0                       0
#define MP1_BASE__INST4_SEG1                       0
#define MP1_BASE__INST4_SEG2                       0
#define MP1_BASE__INST4_SEG3                       0
#define MP1_BASE__INST4_SEG4                       0
#define MP1_BASE__INST4_SEG5                       0

#define MP1_BASE__INST5_SEG0                       0
#define MP1_BASE__INST5_SEG1                       0
#define MP1_BASE__INST5_SEG2                       0
#define MP1_BASE__INST5_SEG3                       0
#define MP1_BASE__INST5_SEG4                       0
#define MP1_BASE__INST5_SEG5                       0

#define MP1_BASE__INST6_SEG0                       0
#define MP1_BASE__INST6_SEG1                       0
#define MP1_BASE__INST6_SEG2                       0
#define MP1_BASE__INST6_SEG3                       0
#define MP1_BASE__INST6_SEG4                       0
#define MP1_BASE__INST6_SEG5                       0

#define MP2_BASE__INST0_SEG0                       0x00016000
#define MP2_BASE__INST0_SEG1                       0x0243FC00
#define MP2_BASE__INST0_SEG2                       0x00DC0000
#define MP2_BASE__INST0_SEG3                       0x00E00000
#define MP2_BASE__INST0_SEG4                       0x00E40000
#define MP2_BASE__INST0_SEG5                       0

#define MP2_BASE__INST1_SEG0                       0
#define MP2_BASE__INST1_SEG1                       0
#define MP2_BASE__INST1_SEG2                       0
#define MP2_BASE__INST1_SEG3                       0
#define MP2_BASE__INST1_SEG4                       0
#define MP2_BASE__INST1_SEG5                       0

#define MP2_BASE__INST2_SEG0                       0
#define MP2_BASE__INST2_SEG1                       0
#define MP2_BASE__INST2_SEG2                       0
#define MP2_BASE__INST2_SEG3                       0
#define MP2_BASE__INST2_SEG4                       0
#define MP2_BASE__INST2_SEG5                       0

#define MP2_BASE__INST3_SEG0                       0
#define MP2_BASE__INST3_SEG1                       0
#define MP2_BASE__INST3_SEG2                       0
#define MP2_BASE__INST3_SEG3                       0
#define MP2_BASE__INST3_SEG4                       0
#define MP2_BASE__INST3_SEG5                       0

#define MP2_BASE__INST4_SEG0                       0
#define MP2_BASE__INST4_SEG1                       0
#define MP2_BASE__INST4_SEG2                       0
#define MP2_BASE__INST4_SEG3                       0
#define MP2_BASE__INST4_SEG4                       0
#define MP2_BASE__INST4_SEG5                       0

#define MP2_BASE__INST5_SEG0                       0
#define MP2_BASE__INST5_SEG1                       0
#define MP2_BASE__INST5_SEG2                       0
#define MP2_BASE__INST5_SEG3                       0
#define MP2_BASE__INST5_SEG4                       0
#define MP2_BASE__INST5_SEG5                       0

#define MP2_BASE__INST6_SEG0                       0
#define MP2_BASE__INST6_SEG1                       0
#define MP2_BASE__INST6_SEG2                       0
#define MP2_BASE__INST6_SEG3                       0
#define MP2_BASE__INST6_SEG4                       0
#define MP2_BASE__INST6_SEG5                       0

#define NBIO_BASE__INST0_SEG0                      0x00000000
#define NBIO_BASE__INST0_SEG1                      0x00000014
#define NBIO_BASE__INST0_SEG2                      0x00000D20
#define NBIO_BASE__INST0_SEG3                      0x00010400
#define NBIO_BASE__INST0_SEG4                      0x0241B000
#define NBIO_BASE__INST0_SEG5                      0x04040000

#define NBIO_BASE__INST1_SEG0                      0
#define NBIO_BASE__INST1_SEG1                      0
#define NBIO_BASE__INST1_SEG2                      0
#define NBIO_BASE__INST1_SEG3                      0
#define NBIO_BASE__INST1_SEG4                      0
#define NBIO_BASE__INST1_SEG5                      0

#define NBIO_BASE__INST2_SEG0                      0
#define NBIO_BASE__INST2_SEG1                      0
#define NBIO_BASE__INST2_SEG2                      0
#define NBIO_BASE__INST2_SEG3                      0
#define NBIO_BASE__INST2_SEG4                      0
#define NBIO_BASE__INST2_SEG5                      0

#define NBIO_BASE__INST3_SEG0                      0
#define NBIO_BASE__INST3_SEG1                      0
#define NBIO_BASE__INST3_SEG2                      0
#define NBIO_BASE__INST3_SEG3                      0
#define NBIO_BASE__INST3_SEG4                      0
#define NBIO_BASE__INST3_SEG5                      0

#define NBIO_BASE__INST4_SEG0                      0
#define NBIO_BASE__INST4_SEG1                      0
#define NBIO_BASE__INST4_SEG2                      0
#define NBIO_BASE__INST4_SEG3                      0
#define NBIO_BASE__INST4_SEG4                      0
#define NBIO_BASE__INST4_SEG5                      0

#define NBIO_BASE__INST5_SEG0                      0
#define NBIO_BASE__INST5_SEG1                      0
#define NBIO_BASE__INST5_SEG2                      0
#define NBIO_BASE__INST5_SEG3                      0
#define NBIO_BASE__INST5_SEG4                      0
#define NBIO_BASE__INST5_SEG5                      0

#define NBIO_BASE__INST6_SEG0                      0
#define NBIO_BASE__INST6_SEG1                      0
#define NBIO_BASE__INST6_SEG2                      0
#define NBIO_BASE__INST6_SEG3                      0
#define NBIO_BASE__INST6_SEG4                      0
#define NBIO_BASE__INST6_SEG5                      0

#define OSSSYS_BASE__INST0_SEG0                    0x000010A0
#define OSSSYS_BASE__INST0_SEG1                    0x0240A000
#define OSSSYS_BASE__INST0_SEG2                    0
#define OSSSYS_BASE__INST0_SEG3                    0
#define OSSSYS_BASE__INST0_SEG4                    0
#define OSSSYS_BASE__INST0_SEG5                    0

#define OSSSYS_BASE__INST1_SEG0                    0
#define OSSSYS_BASE__INST1_SEG1                    0
#define OSSSYS_BASE__INST1_SEG2                    0
#define OSSSYS_BASE__INST1_SEG3                    0
#define OSSSYS_BASE__INST1_SEG4                    0
#define OSSSYS_BASE__INST1_SEG5                    0

#define OSSSYS_BASE__INST2_SEG0                    0
#define OSSSYS_BASE__INST2_SEG1                    0
#define OSSSYS_BASE__INST2_SEG2                    0
#define OSSSYS_BASE__INST2_SEG3                    0
#define OSSSYS_BASE__INST2_SEG4                    0
#define OSSSYS_BASE__INST2_SEG5                    0

#define OSSSYS_BASE__INST3_SEG0                    0
#define OSSSYS_BASE__INST3_SEG1                    0
#define OSSSYS_BASE__INST3_SEG2                    0
#define OSSSYS_BASE__INST3_SEG3                    0
#define OSSSYS_BASE__INST3_SEG4                    0
#define OSSSYS_BASE__INST3_SEG5                    0

#define OSSSYS_BASE__INST4_SEG0                    0
#define OSSSYS_BASE__INST4_SEG1                    0
#define OSSSYS_BASE__INST4_SEG2                    0
#define OSSSYS_BASE__INST4_SEG3                    0
#define OSSSYS_BASE__INST4_SEG4                    0
#define OSSSYS_BASE__INST4_SEG5                    0

#define OSSSYS_BASE__INST5_SEG0                    0
#define OSSSYS_BASE__INST5_SEG1                    0
#define OSSSYS_BASE__INST5_SEG2                    0
#define OSSSYS_BASE__INST5_SEG3                    0
#define OSSSYS_BASE__INST5_SEG4                    0
#define OSSSYS_BASE__INST5_SEG5                    0

#define OSSSYS_BASE__INST6_SEG0                    0
#define OSSSYS_BASE__INST6_SEG1                    0
#define OSSSYS_BASE__INST6_SEG2                    0
#define OSSSYS_BASE__INST6_SEG3                    0
#define OSSSYS_BASE__INST6_SEG4                    0
#define OSSSYS_BASE__INST6_SEG5                    0

#define PCIE_BASE__INST0_SEG0                      0x02411800
#define PCIE_BASE__INST0_SEG1                      0x04440000
#define PCIE_BASE__INST0_SEG2                      0
#define PCIE_BASE__INST0_SEG3                      0
#define PCIE_BASE__INST0_SEG4                      0
#define PCIE_BASE__INST0_SEG5                      0

#define PCIE_BASE__INST1_SEG0                      0x02411C00
#define PCIE_BASE__INST1_SEG1                      0x04480000
#define PCIE_BASE__INST1_SEG2                      0
#define PCIE_BASE__INST1_SEG3                      0
#define PCIE_BASE__INST1_SEG4                      0
#define PCIE_BASE__INST1_SEG5                      0

#define PCIE_BASE__INST2_SEG0                      0x02412000
#define PCIE_BASE__INST2_SEG1                      0x044C0000
#define PCIE_BASE__INST2_SEG2                      0
#define PCIE_BASE__INST2_SEG3                      0
#define PCIE_BASE__INST2_SEG4                      0
#define PCIE_BASE__INST2_SEG5                      0

#define PCIE_BASE__INST3_SEG0                      0x02412400
#define PCIE_BASE__INST3_SEG1                      0x04500000
#define PCIE_BASE__INST3_SEG2                      0
#define PCIE_BASE__INST3_SEG3                      0
#define PCIE_BASE__INST3_SEG4                      0
#define PCIE_BASE__INST3_SEG5                      0

#define PCIE_BASE__INST4_SEG0                      0
#define PCIE_BASE__INST4_SEG1                      0
#define PCIE_BASE__INST4_SEG2                      0
#define PCIE_BASE__INST4_SEG3                      0
#define PCIE_BASE__INST4_SEG4                      0
#define PCIE_BASE__INST4_SEG5                      0

#define PCIE_BASE__INST5_SEG0                      0
#define PCIE_BASE__INST5_SEG1                      0
#define PCIE_BASE__INST5_SEG2                      0
#define PCIE_BASE__INST5_SEG3                      0
#define PCIE_BASE__INST5_SEG4                      0
#define PCIE_BASE__INST5_SEG5                      0

#define PCIE_BASE__INST6_SEG0                      0
#define PCIE_BASE__INST6_SEG1                      0
#define PCIE_BASE__INST6_SEG2                      0
#define PCIE_BASE__INST6_SEG3                      0
#define PCIE_BASE__INST6_SEG4                      0
#define PCIE_BASE__INST6_SEG5                      0

#define SDMA0_BASE__INST0_SEG0                     0x00001260
#define SDMA0_BASE__INST0_SEG1                     0x0000A000
#define SDMA0_BASE__INST0_SEG2                     0x02402C00
#define SDMA0_BASE__INST0_SEG3                     0
#define SDMA0_BASE__INST0_SEG4                     0
#define SDMA0_BASE__INST0_SEG5                     0

#define SDMA0_BASE__INST1_SEG0                     0
#define SDMA0_BASE__INST1_SEG1                     0
#define SDMA0_BASE__INST1_SEG2                     0
#define SDMA0_BASE__INST1_SEG3                     0
#define SDMA0_BASE__INST1_SEG4                     0
#define SDMA0_BASE__INST1_SEG5                     0

#define SDMA0_BASE__INST2_SEG0                     0
#define SDMA0_BASE__INST2_SEG1                     0
#define SDMA0_BASE__INST2_SEG2                     0
#define SDMA0_BASE__INST2_SEG3                     0
#define SDMA0_BASE__INST2_SEG4                     0
#define SDMA0_BASE__INST2_SEG5                     0

#define SDMA0_BASE__INST3_SEG0                     0
#define SDMA0_BASE__INST3_SEG1                     0
#define SDMA0_BASE__INST3_SEG2                     0
#define SDMA0_BASE__INST3_SEG3                     0
#define SDMA0_BASE__INST3_SEG4                     0
#define SDMA0_BASE__INST3_SEG5                     0

#define SDMA0_BASE__INST4_SEG0                     0
#define SDMA0_BASE__INST4_SEG1                     0
#define SDMA0_BASE__INST4_SEG2                     0
#define SDMA0_BASE__INST4_SEG3                     0
#define SDMA0_BASE__INST4_SEG4                     0
#define SDMA0_BASE__INST4_SEG5                     0

#define SDMA0_BASE__INST5_SEG0                     0
#define SDMA0_BASE__INST5_SEG1                     0
#define SDMA0_BASE__INST5_SEG2                     0
#define SDMA0_BASE__INST5_SEG3                     0
#define SDMA0_BASE__INST5_SEG4                     0
#define SDMA0_BASE__INST5_SEG5                     0

#define SDMA0_BASE__INST6_SEG0                     0
#define SDMA0_BASE__INST6_SEG1                     0
#define SDMA0_BASE__INST6_SEG2                     0
#define SDMA0_BASE__INST6_SEG3                     0
#define SDMA0_BASE__INST6_SEG4                     0
#define SDMA0_BASE__INST6_SEG5                     0

#define SMUIO_BASE__INST0_SEG0                     0x00016800
#define SMUIO_BASE__INST0_SEG1                     0x00016A00
#define SMUIO_BASE__INST0_SEG2                     0x02401000
#define SMUIO_BASE__INST0_SEG3                     0x00440000
#define SMUIO_BASE__INST0_SEG4                     0
#define SMUIO_BASE__INST0_SEG5                     0

#define SMUIO_BASE__INST1_SEG0                     0x0001BC00
#define SMUIO_BASE__INST1_SEG1                     0x0242D400
#define SMUIO_BASE__INST1_SEG2                     0
#define SMUIO_BASE__INST1_SEG3                     0
#define SMUIO_BASE__INST1_SEG4                     0
#define SMUIO_BASE__INST1_SEG5                     0

#define SMUIO_BASE__INST2_SEG0                     0
#define SMUIO_BASE__INST2_SEG1                     0
#define SMUIO_BASE__INST2_SEG2                     0
#define SMUIO_BASE__INST2_SEG3                     0
#define SMUIO_BASE__INST2_SEG4                     0
#define SMUIO_BASE__INST2_SEG5                     0

#define SMUIO_BASE__INST3_SEG0                     0
#define SMUIO_BASE__INST3_SEG1                     0
#define SMUIO_BASE__INST3_SEG2                     0
#define SMUIO_BASE__INST3_SEG3                     0
#define SMUIO_BASE__INST3_SEG4                     0
#define SMUIO_BASE__INST3_SEG5                     0

#define SMUIO_BASE__INST4_SEG0                     0
#define SMUIO_BASE__INST4_SEG1                     0
#define SMUIO_BASE__INST4_SEG2                     0
#define SMUIO_BASE__INST4_SEG3                     0
#define SMUIO_BASE__INST4_SEG4                     0
#define SMUIO_BASE__INST4_SEG5                     0

#define SMUIO_BASE__INST5_SEG0                     0
#define SMUIO_BASE__INST5_SEG1                     0
#define SMUIO_BASE__INST5_SEG2                     0
#define SMUIO_BASE__INST5_SEG3                     0
#define SMUIO_BASE__INST5_SEG4                     0
#define SMUIO_BASE__INST5_SEG5                     0

#define SMUIO_BASE__INST6_SEG0                     0
#define SMUIO_BASE__INST6_SEG1                     0
#define SMUIO_BASE__INST6_SEG2                     0
#define SMUIO_BASE__INST6_SEG3                     0
#define SMUIO_BASE__INST6_SEG4                     0
#define SMUIO_BASE__INST6_SEG5                     0

#define THM_BASE__INST0_SEG0                       0x00016600
#define THM_BASE__INST0_SEG1                       0x02400C00
#define THM_BASE__INST0_SEG2                       0
#define THM_BASE__INST0_SEG3                       0
#define THM_BASE__INST0_SEG4                       0
#define THM_BASE__INST0_SEG5                       0

#define THM_BASE__INST1_SEG0                       0
#define THM_BASE__INST1_SEG1                       0
#define THM_BASE__INST1_SEG2                       0
#define THM_BASE__INST1_SEG3                       0
#define THM_BASE__INST1_SEG4                       0
#define THM_BASE__INST1_SEG5                       0

#define THM_BASE__INST2_SEG0                       0
#define THM_BASE__INST2_SEG1                       0
#define THM_BASE__INST2_SEG2                       0
#define THM_BASE__INST2_SEG3                       0
#define THM_BASE__INST2_SEG4                       0
#define THM_BASE__INST2_SEG5                       0

#define THM_BASE__INST3_SEG0                       0
#define THM_BASE__INST3_SEG1                       0
#define THM_BASE__INST3_SEG2                       0
#define THM_BASE__INST3_SEG3                       0
#define THM_BASE__INST3_SEG4                       0
#define THM_BASE__INST3_SEG5                       0

#define THM_BASE__INST4_SEG0                       0
#define THM_BASE__INST4_SEG1                       0
#define THM_BASE__INST4_SEG2                       0
#define THM_BASE__INST4_SEG3                       0
#define THM_BASE__INST4_SEG4                       0
#define THM_BASE__INST4_SEG5                       0

#define THM_BASE__INST5_SEG0                       0
#define THM_BASE__INST5_SEG1                       0
#define THM_BASE__INST5_SEG2                       0
#define THM_BASE__INST5_SEG3                       0
#define THM_BASE__INST5_SEG4                       0
#define THM_BASE__INST5_SEG5                       0

#define THM_BASE__INST6_SEG0                       0
#define THM_BASE__INST6_SEG1                       0
#define THM_BASE__INST6_SEG2                       0
#define THM_BASE__INST6_SEG3                       0
#define THM_BASE__INST6_SEG4                       0
#define THM_BASE__INST6_SEG5                       0

#define UMC_BASE__INST0_SEG0                       0x00014000
#define UMC_BASE__INST0_SEG1                       0x00054000
#define UMC_BASE__INST0_SEG2                       0x02425800
#define UMC_BASE__INST0_SEG3                       0x02425C00
#define UMC_BASE__INST0_SEG4                       0
#define UMC_BASE__INST0_SEG5                       0

#define UMC_BASE__INST1_SEG0                       0x00094000
#define UMC_BASE__INST1_SEG1                       0x000D4000
#define UMC_BASE__INST1_SEG2                       0x02426000
#define UMC_BASE__INST1_SEG3                       0x02426400
#define UMC_BASE__INST1_SEG4                       0
#define UMC_BASE__INST1_SEG5                       0

#define UMC_BASE__INST2_SEG0                       0
#define UMC_BASE__INST2_SEG1                       0
#define UMC_BASE__INST2_SEG2                       0
#define UMC_BASE__INST2_SEG3                       0
#define UMC_BASE__INST2_SEG4                       0
#define UMC_BASE__INST2_SEG5                       0

#define UMC_BASE__INST3_SEG0                       0
#define UMC_BASE__INST3_SEG1                       0
#define UMC_BASE__INST3_SEG2                       0
#define UMC_BASE__INST3_SEG3                       0
#define UMC_BASE__INST3_SEG4                       0
#define UMC_BASE__INST3_SEG5                       0

#define UMC_BASE__INST4_SEG0                       0
#define UMC_BASE__INST4_SEG1                       0
#define UMC_BASE__INST4_SEG2                       0
#define UMC_BASE__INST4_SEG3                       0
#define UMC_BASE__INST4_SEG4                       0
#define UMC_BASE__INST4_SEG5                       0

#define UMC_BASE__INST5_SEG0                       0
#define UMC_BASE__INST5_SEG1                       0
#define UMC_BASE__INST5_SEG2                       0
#define UMC_BASE__INST5_SEG3                       0
#define UMC_BASE__INST5_SEG4                       0
#define UMC_BASE__INST5_SEG5                       0

#define UMC_BASE__INST6_SEG0                       0
#define UMC_BASE__INST6_SEG1                       0
#define UMC_BASE__INST6_SEG2                       0
#define UMC_BASE__INST6_SEG3                       0
#define UMC_BASE__INST6_SEG4                       0
#define UMC_BASE__INST6_SEG5                       0

#define VCN_BASE__INST0_SEG0                       0x00007800
#define VCN_BASE__INST0_SEG1                       0x00007E00
#define VCN_BASE__INST0_SEG2                       0x02403000
#define VCN_BASE__INST0_SEG3                       0
#define VCN_BASE__INST0_SEG4                       0
#define VCN_BASE__INST0_SEG5                       0

#define VCN_BASE__INST1_SEG0                       0
#define VCN_BASE__INST1_SEG1                       0
#define VCN_BASE__INST1_SEG2                       0
#define VCN_BASE__INST1_SEG3                       0
#define VCN_BASE__INST1_SEG4                       0
#define VCN_BASE__INST1_SEG5                       0

#define VCN_BASE__INST2_SEG0                       0
#define VCN_BASE__INST2_SEG1                       0
#define VCN_BASE__INST2_SEG2                       0
#define VCN_BASE__INST2_SEG3                       0
#define VCN_BASE__INST2_SEG4                       0
#define VCN_BASE__INST2_SEG5                       0

#define VCN_BASE__INST3_SEG0                       0
#define VCN_BASE__INST3_SEG1                       0
#define VCN_BASE__INST3_SEG2                       0
#define VCN_BASE__INST3_SEG3                       0
#define VCN_BASE__INST3_SEG4                       0
#define VCN_BASE__INST3_SEG5                       0

#define VCN_BASE__INST4_SEG0                       0
#define VCN_BASE__INST4_SEG1                       0
#define VCN_BASE__INST4_SEG2                       0
#define VCN_BASE__INST4_SEG3                       0
#define VCN_BASE__INST4_SEG4                       0
#define VCN_BASE__INST4_SEG5                       0

#define VCN_BASE__INST5_SEG0                       0
#define VCN_BASE__INST5_SEG1                       0
#define VCN_BASE__INST5_SEG2                       0
#define VCN_BASE__INST5_SEG3                       0
#define VCN_BASE__INST5_SEG4                       0
#define VCN_BASE__INST5_SEG5                       0

#define VCN_BASE__INST6_SEG0                       0
#define VCN_BASE__INST6_SEG1                       0
#define VCN_BASE__INST6_SEG2                       0
#define VCN_BASE__INST6_SEG3                       0
#define VCN_BASE__INST6_SEG4                       0
#define VCN_BASE__INST6_SEG5                       0

#endif
/*
 * Copyright 2012 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef VI_STRUCTS_H_
#define VI_STRUCTS_H_

struct vi_sdma_mqd {
	uint32_t sdmax_rlcx_rb_cntl;
	uint32_t sdmax_rlcx_rb_base;
	uint32_t sdmax_rlcx_rb_base_hi;
	uint32_t sdmax_rlcx_rb_rptr;
	uint32_t sdmax_rlcx_rb_wptr;
	uint32_t sdmax_rlcx_rb_wptr_poll_cntl;
	uint32_t sdmax_rlcx_rb_wptr_poll_addr_hi;
	uint32_t sdmax_rlcx_rb_wptr_poll_addr_lo;
	uint32_t sdmax_rlcx_rb_rptr_addr_hi;
	uint32_t sdmax_rlcx_rb_rptr_addr_lo;
	uint32_t sdmax_rlcx_ib_cntl;
	uint32_t sdmax_rlcx_ib_rptr;
	uint32_t sdmax_rlcx_ib_offset;
	uint32_t sdmax_rlcx_ib_base_lo;
	uint32_t sdmax_rlcx_ib_base_hi;
	uint32_t sdmax_rlcx_ib_size;
	uint32_t sdmax_rlcx_skip_cntl;
	uint32_t sdmax_rlcx_context_status;
	uint32_t sdmax_rlcx_doorbell;
	uint32_t sdmax_rlcx_virtual_addr;
	uint32_t sdmax_rlcx_ape1_cntl;
	uint32_t sdmax_rlcx_doorbell_log;
	uint32_t reserved_22;
	uint32_t reserved_23;
	uint32_t reserved_24;
	uint32_t reserved_25;
	uint32_t reserved_26;
	uint32_t reserved_27;
	uint32_t reserved_28;
	uint32_t reserved_29;
	uint32_t reserved_30;
	uint32_t reserved_31;
	uint32_t reserved_32;
	uint32_t reserved_33;
	uint32_t reserved_34;
	uint32_t reserved_35;
	uint32_t reserved_36;
	uint32_t reserved_37;
	uint32_t reserved_38;
	uint32_t reserved_39;
	uint32_t reserved_40;
	uint32_t reserved_41;
	uint32_t reserved_42;
	uint32_t reserved_43;
	uint32_t reserved_44;
	uint32_t reserved_45;
	uint32_t reserved_46;
	uint32_t reserved_47;
	uint32_t reserved_48;
	uint32_t reserved_49;
	uint32_t reserved_50;
	uint32_t reserved_51;
	uint32_t reserved_52;
	uint32_t reserved_53;
	uint32_t reserved_54;
	uint32_t reserved_55;
	uint32_t reserved_56;
	uint32_t reserved_57;
	uint32_t reserved_58;
	uint32_t reserved_59;
	uint32_t reserved_60;
	uint32_t reserved_61;
	uint32_t reserved_62;
	uint32_t reserved_63;
	uint32_t reserved_64;
	uint32_t reserved_65;
	uint32_t reserved_66;
	uint32_t reserved_67;
	uint32_t reserved_68;
	uint32_t reserved_69;
	uint32_t reserved_70;
	uint32_t reserved_71;
	uint32_t reserved_72;
	uint32_t reserved_73;
	uint32_t reserved_74;
	uint32_t reserved_75;
	uint32_t reserved_76;
	uint32_t reserved_77;
	uint32_t reserved_78;
	uint32_t reserved_79;
	uint32_t reserved_80;
	uint32_t reserved_81;
	uint32_t reserved_82;
	uint32_t reserved_83;
	uint32_t reserved_84;
	uint32_t reserved_85;
	uint32_t reserved_86;
	uint32_t reserved_87;
	uint32_t reserved_88;
	uint32_t reserved_89;
	uint32_t reserved_90;
	uint32_t reserved_91;
	uint32_t reserved_92;
	uint32_t reserved_93;
	uint32_t reserved_94;
	uint32_t reserved_95;
	uint32_t reserved_96;
	uint32_t reserved_97;
	uint32_t reserved_98;
	uint32_t reserved_99;
	uint32_t reserved_100;
	uint32_t reserved_101;
	uint32_t reserved_102;
	uint32_t reserved_103;
	uint32_t reserved_104;
	uint32_t reserved_105;
	uint32_t reserved_106;
	uint32_t reserved_107;
	uint32_t reserved_108;
	uint32_t reserved_109;
	uint32_t reserved_110;
	uint32_t reserved_111;
	uint32_t reserved_112;
	uint32_t reserved_113;
	uint32_t reserved_114;
	uint32_t reserved_115;
	uint32_t reserved_116;
	uint32_t reserved_117;
	uint32_t reserved_118;
	uint32_t reserved_119;
	uint32_t reserved_120;
	uint32_t reserved_121;
	uint32_t reserved_122;
	uint32_t reserved_123;
	uint32_t reserved_124;
	uint32_t reserved_125;
	/* reserved_126,127: repurposed for driver-internal use */
	uint32_t sdma_engine_id;
	uint32_t sdma_queue_id;
};

struct vi_mqd {
	uint32_t header;
	uint32_t compute_dispatch_initiator;
	uint32_t compute_dim_x;
	uint32_t compute_dim_y;
	uint32_t compute_dim_z;
	uint32_t compute_start_x;
	uint32_t compute_start_y;
	uint32_t compute_start_z;
	uint32_t compute_num_thread_x;
	uint32_t compute_num_thread_y;
	uint32_t compute_num_thread_z;
	uint32_t compute_pipelinestat_enable;
	uint32_t compute_perfcount_enable;
	uint32_t compute_pgm_lo;
	uint32_t compute_pgm_hi;
	uint32_t compute_tba_lo;
	uint32_t compute_tba_hi;
	uint32_t compute_tma_lo;
	uint32_t compute_tma_hi;
	uint32_t compute_pgm_rsrc1;
	uint32_t compute_pgm_rsrc2;
	uint32_t compute_vmid;
	uint32_t compute_resource_limits;
	uint32_t compute_static_thread_mgmt_se0;
	uint32_t compute_static_thread_mgmt_se1;
	uint32_t compute_tmpring_size;
	uint32_t compute_static_thread_mgmt_se2;
	uint32_t compute_static_thread_mgmt_se3;
	uint32_t compute_restart_x;
	uint32_t compute_restart_y;
	uint32_t compute_restart_z;
	uint32_t compute_thread_trace_enable;
	uint32_t compute_misc_reserved;
	uint32_t compute_dispatch_id;
	uint32_t compute_threadgroup_id;
	uint32_t compute_relaunch;
	uint32_t compute_wave_restore_addr_lo;
	uint32_t compute_wave_restore_addr_hi;
	uint32_t compute_wave_restore_control;
	uint32_t reserved9;
	uint32_t reserved10;
	uint32_t reserved11;
	uint32_t reserved12;
	uint32_t reserved13;
	uint32_t reserved14;
	uint32_t reserved15;
	uint32_t reserved16;
	uint32_t reserved17;
	uint32_t reserved18;
	uint32_t reserved19;
	uint32_t reserved20;
	uint32_t reserved21;
	uint32_t reserved22;
	uint32_t reserved23;
	uint32_t reserved24;
	uint32_t reserved25;
	uint32_t reserved26;
	uint32_t reserved27;
	uint32_t reserved28;
	uint32_t reserved29;
	uint32_t reserved30;
	uint32_t reserved31;
	uint32_t reserved32;
	uint32_t reserved33;
	uint32_t reserved34;
	uint32_t compute_user_data_0;
	uint32_t compute_user_data_1;
	uint32_t compute_user_data_2;
	uint32_t compute_user_data_3;
	uint32_t compute_user_data_4;
	uint32_t compute_user_data_5;
	uint32_t compute_user_data_6;
	uint32_t compute_user_data_7;
	uint32_t compute_user_data_8;
	uint32_t compute_user_data_9;
	uint32_t compute_user_data_10;
	uint32_t compute_user_data_11;
	uint32_t compute_user_data_12;
	uint32_t compute_user_data_13;
	uint32_t compute_user_data_14;
	uint32_t compute_user_data_15;
	uint32_t cp_compute_csinvoc_count_lo;
	uint32_t cp_compute_csinvoc_count_hi;
	uint32_t reserved35;
	uint32_t reserved36;
	uint32_t reserved37;
	uint32_t cp_mqd_query_time_lo;
	uint32_t cp_mqd_query_time_hi;
	uint32_t cp_mqd_connect_start_time_lo;
	uint32_t cp_mqd_connect_start_time_hi;
	uint32_t cp_mqd_connect_end_time_lo;
	uint32_t cp_mqd_connect_end_time_hi;
	uint32_t cp_mqd_connect_end_wf_count;
	uint32_t cp_mqd_connect_end_pq_rptr;
	uint32_t cp_mqd_connect_endvi_sdma_mqd_pq_wptr;
	uint32_t cp_mqd_connect_end_ib_rptr;
	uint32_t reserved38;
	uint32_t reserved39;
	uint32_t cp_mqd_save_start_time_lo;
	uint32_t cp_mqd_save_start_time_hi;
	uint32_t cp_mqd_save_end_time_lo;
	uint32_t cp_mqd_save_end_time_hi;
	uint32_t cp_mqd_restore_start_time_lo;
	uint32_t cp_mqd_restore_start_time_hi;
	uint32_t cp_mqd_restore_end_time_lo;
	uint32_t cp_mqd_restore_end_time_hi;
	uint32_t disable_queue;
	uint32_t reserved41;
	uint32_t gds_cs_ctxsw_cnt0;
	uint32_t gds_cs_ctxsw_cnt1;
	uint32_t gds_cs_ctxsw_cnt2;
	uint32_t gds_cs_ctxsw_cnt3;
	uint32_t reserved42;
	uint32_t reserved43;
	uint32_t cp_pq_exe_status_lo;
	uint32_t cp_pq_exe_status_hi;
	uint32_t cp_packet_id_lo;
	uint32_t cp_packet_id_hi;
	uint32_t cp_packet_exe_status_lo;
	uint32_t cp_packet_exe_status_hi;
	uint32_t gds_save_base_addr_lo;
	uint32_t gds_save_base_addr_hi;
	uint32_t gds_save_mask_lo;
	uint32_t gds_save_mask_hi;
	uint32_t ctx_save_base_addr_lo;
	uint32_t ctx_save_base_addr_hi;
	uint32_t dynamic_cu_mask_addr_lo;
	uint32_t dynamic_cu_mask_addr_hi;
	uint32_t cp_mqd_base_addr_lo;
	uint32_t cp_mqd_base_addr_hi;
	uint32_t cp_hqd_active;
	uint32_t cp_hqd_vmid;
	uint32_t cp_hqd_persistent_state;
	uint32_t cp_hqd_pipe_priority;
	uint32_t cp_hqd_queue_priority;
	uint32_t cp_hqd_quantum;
	uint32_t cp_hqd_pq_base_lo;
	uint32_t cp_hqd_pq_base_hi;
	uint32_t cp_hqd_pq_rptr;
	uint32_t cp_hqd_pq_rptr_report_addr_lo;
	uint32_t cp_hqd_pq_rptr_report_addr_hi;
	uint32_t cp_hqd_pq_wptr_poll_addr_lo;
	uint32_t cp_hqd_pq_wptr_poll_addr_hi;
	uint32_t cp_hqd_pq_doorbell_control;
	uint32_t cp_hqd_pq_wptr;
	uint32_t cp_hqd_pq_control;
	uint32_t cp_hqd_ib_base_addr_lo;
	uint32_t cp_hqd_ib_base_addr_hi;
	uint32_t cp_hqd_ib_rptr;
	uint32_t cp_hqd_ib_control;
	uint32_t cp_hqd_iq_timer;
	uint32_t cp_hqd_iq_rptr;
	uint32_t cp_hqd_dequeue_request;
	uint32_t cp_hqd_dma_offload;
	uint32_t cp_hqd_sema_cmd;
	uint32_t cp_hqd_msg_type;
	uint32_t cp_hqd_atomic0_preop_lo;
	uint32_t cp_hqd_atomic0_preop_hi;
	uint32_t cp_hqd_atomic1_preop_lo;
	uint32_t cp_hqd_atomic1_preop_hi;
	uint32_t cp_hqd_hq_status0;
	uint32_t cp_hqd_hq_control0;
	uint32_t cp_mqd_control;
	uint32_t cp_hqd_hq_status1;
	uint32_t cp_hqd_hq_control1;
	uint32_t cp_hqd_eop_base_addr_lo;
	uint32_t cp_hqd_eop_base_addr_hi;
	uint32_t cp_hqd_eop_control;
	uint32_t cp_hqd_eop_rptr;
	uint32_t cp_hqd_eop_wptr;
	uint32_t cp_hqd_eop_done_events;
	uint32_t cp_hqd_ctx_save_base_addr_lo;
	uint32_t cp_hqd_ctx_save_base_addr_hi;
	uint32_t cp_hqd_ctx_save_control;
	uint32_t cp_hqd_cntl_stack_offset;
	uint32_t cp_hqd_cntl_stack_size;
	uint32_t cp_hqd_wg_state_offset;
	uint32_t cp_hqd_ctx_save_size;
	uint32_t cp_hqd_gds_resource_state;
	uint32_t cp_hqd_error;
	uint32_t cp_hqd_eop_wptr_mem;
	uint32_t cp_hqd_eop_dones;
	uint32_t reserved46;
	uint32_t reserved47;
	uint32_t reserved48;
	uint32_t reserved49;
	uint32_t reserved50;
	uint32_t reserved51;
	uint32_t reserved52;
	uint32_t reserved53;
	uint32_t reserved54;
	uint32_t reserved55;
	uint32_t iqtimer_pkt_header;
	uint32_t iqtimer_pkt_dw0;
	uint32_t iqtimer_pkt_dw1;
	uint32_t iqtimer_pkt_dw2;
	uint32_t iqtimer_pkt_dw3;
	uint32_t iqtimer_pkt_dw4;
	uint32_t iqtimer_pkt_dw5;
	uint32_t iqtimer_pkt_dw6;
	uint32_t iqtimer_pkt_dw7;
	uint32_t iqtimer_pkt_dw8;
	uint32_t iqtimer_pkt_dw9;
	uint32_t iqtimer_pkt_dw10;
	uint32_t iqtimer_pkt_dw11;
	uint32_t iqtimer_pkt_dw12;
	uint32_t iqtimer_pkt_dw13;
	uint32_t iqtimer_pkt_dw14;
	uint32_t iqtimer_pkt_dw15;
	uint32_t iqtimer_pkt_dw16;
	uint32_t iqtimer_pkt_dw17;
	uint32_t iqtimer_pkt_dw18;
	uint32_t iqtimer_pkt_dw19;
	uint32_t iqtimer_pkt_dw20;
	uint32_t iqtimer_pkt_dw21;
	uint32_t iqtimer_pkt_dw22;
	uint32_t iqtimer_pkt_dw23;
	uint32_t iqtimer_pkt_dw24;
	uint32_t iqtimer_pkt_dw25;
	uint32_t iqtimer_pkt_dw26;
	uint32_t iqtimer_pkt_dw27;
	uint32_t iqtimer_pkt_dw28;
	uint32_t iqtimer_pkt_dw29;
	uint32_t iqtimer_pkt_dw30;
	uint32_t iqtimer_pkt_dw31;
	uint32_t reserved56;
	uint32_t reserved57;
	uint32_t reserved58;
	uint32_t set_resources_header;
	uint32_t set_resources_dw1;
	uint32_t set_resources_dw2;
	uint32_t set_resources_dw3;
	uint32_t set_resources_dw4;
	uint32_t set_resources_dw5;
	uint32_t set_resources_dw6;
	uint32_t set_resources_dw7;
	uint32_t reserved59;
	uint32_t reserved60;
	uint32_t reserved61;
	uint32_t reserved62;
	uint32_t queue_doorbell_id0;
	uint32_t queue_doorbell_id1;
	uint32_t queue_doorbell_id2;
	uint32_t queue_doorbell_id3;
	uint32_t queue_doorbell_id4;
	uint32_t queue_doorbell_id5;
	uint32_t queue_doorbell_id6;
	uint32_t queue_doorbell_id7;
	uint32_t queue_doorbell_id8;
	uint32_t queue_doorbell_id9;
	uint32_t queue_doorbell_id10;
	uint32_t queue_doorbell_id11;
	uint32_t queue_doorbell_id12;
	uint32_t queue_doorbell_id13;
	uint32_t queue_doorbell_id14;
	uint32_t queue_doorbell_id15;
	uint32_t reserved_t[256];
};

struct vi_mqd_allocation {
	struct vi_mqd mqd;
	uint32_t wptr_poll_mem;
	uint32_t rptr_report_mem;
	uint32_t dynamic_cu_mask;
	uint32_t dynamic_rb_mask;
};

struct vi_ce_ib_state {
	uint32_t    ce_ib_completion_status;
	uint32_t    ce_constegnine_count;
	uint32_t    ce_ibOffset_ib1;
	uint32_t    ce_ibOffset_ib2;
}; /* Total of 4 DWORD */

struct vi_de_ib_state {
	uint32_t    ib_completion_status;
	uint32_t    de_constEngine_count;
	uint32_t    ib_offset_ib1;
	uint32_t    ib_offset_ib2;
	uint32_t    preamble_begin_ib1;
	uint32_t    preamble_begin_ib2;
	uint32_t    preamble_end_ib1;
	uint32_t    preamble_end_ib2;
	uint32_t    draw_indirect_baseLo;
	uint32_t    draw_indirect_baseHi;
	uint32_t    disp_indirect_baseLo;
	uint32_t    disp_indirect_baseHi;
	uint32_t    gds_backup_addrlo;
	uint32_t    gds_backup_addrhi;
	uint32_t    index_base_addrlo;
	uint32_t    index_base_addrhi;
	uint32_t    sample_cntl;
}; /* Total of 17 DWORD */

struct vi_ce_ib_state_chained_ib {
	/* section of non chained ib part */
	uint32_t    ce_ib_completion_status;
	uint32_t    ce_constegnine_count;
	uint32_t    ce_ibOffset_ib1;
	uint32_t    ce_ibOffset_ib2;

	/* section of chained ib */
	uint32_t    ce_chainib_addrlo_ib1;
	uint32_t    ce_chainib_addrlo_ib2;
	uint32_t    ce_chainib_addrhi_ib1;
	uint32_t    ce_chainib_addrhi_ib2;
	uint32_t    ce_chainib_size_ib1;
	uint32_t    ce_chainib_size_ib2;
}; /* total 10 DWORD */

struct vi_de_ib_state_chained_ib {
	/* section of non chained ib part */
	uint32_t    ib_completion_status;
	uint32_t    de_constEngine_count;
	uint32_t    ib_offset_ib1;
	uint32_t    ib_offset_ib2;

	/* section of chained ib */
	uint32_t    chain_ib_addrlo_ib1;
	uint32_t    chain_ib_addrlo_ib2;
	uint32_t    chain_ib_addrhi_ib1;
	uint32_t    chain_ib_addrhi_ib2;
	uint32_t    chain_ib_size_ib1;
	uint32_t    chain_ib_size_ib2;

	/* section of non chained ib part */
	uint32_t    preamble_begin_ib1;
	uint32_t    preamble_begin_ib2;
	uint32_t    preamble_end_ib1;
	uint32_t    preamble_end_ib2;

	/* section of chained ib */
	uint32_t    chain_ib_pream_addrlo_ib1;
	uint32_t    chain_ib_pream_addrlo_ib2;
	uint32_t    chain_ib_pream_addrhi_ib1;
	uint32_t    chain_ib_pream_addrhi_ib2;

	/* section of non chained ib part */
	uint32_t    draw_indirect_baseLo;
	uint32_t    draw_indirect_baseHi;
	uint32_t    disp_indirect_baseLo;
	uint32_t    disp_indirect_baseHi;
	uint32_t    gds_backup_addrlo;
	uint32_t    gds_backup_addrhi;
	uint32_t    index_base_addrlo;
	uint32_t    index_base_addrhi;
	uint32_t    sample_cntl;
}; /* Total of 27 DWORD */

struct vi_gfx_meta_data {
	/* 4 DWORD, address must be 4KB aligned */
	struct vi_ce_ib_state        ce_payload;
	uint32_t                     reserved1[60];
	/* 17 DWORD, address must be 64B aligned */
	struct vi_de_ib_state        de_payload;
	/* PFP IB base address which get pre-empted */
	uint32_t                     DeIbBaseAddrLo;
	uint32_t                     DeIbBaseAddrHi;
	uint32_t                     reserved2[941];
}; /* Total of 4K Bytes */

struct vi_gfx_meta_data_chained_ib {
	/* 10 DWORD, address must be 4KB aligned */
	struct vi_ce_ib_state_chained_ib       ce_payload;
	uint32_t                               reserved1[54];
	/* 27 DWORD, address must be 64B aligned */
	struct vi_de_ib_state_chained_ib       de_payload;
	/* PFP IB base address which get pre-empted */
	uint32_t                               DeIbBaseAddrLo;
	uint32_t                               DeIbBaseAddrHi;
	uint32_t                               reserved2[931];
}; /* Total of 4K Bytes */

#endif /* VI_STRUCTS_H_ */
/*
 * Copyright (C) 2018  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _vega20_ip_offset_HEADER
#define _vega20_ip_offset_HEADER

#define MAX_INSTANCE                                       6
#define MAX_SEGMENT                                        6


struct IP_BASE_INSTANCE
{
    unsigned int segment[MAX_SEGMENT];
};

struct IP_BASE
{
    struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
} __maybe_unused;


static const struct IP_BASE ATHUB_BASE            ={ { { { 0x00000C20, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE CLK_BASE            ={ { { { 0x00016C00, 0x00016E00, 0x00017000, 0x00017200, 0x0001B000, 0x0001B200 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DCE_BASE            ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DF_BASE            ={ { { { 0x00007000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FUSE_BASE            ={ { { { 0x00017400, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE GC_BASE            ={ { { { 0x00002000, 0x0000A000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDP_BASE            ={ { { { 0x00000F20, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MMHUB_BASE            ={ { { { 0x0001A000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP0_BASE            ={ { { { 0x00016000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP1_BASE            ={ { { { 0x00016000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE NBIO_BASE            ={ { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE OSSSYS_BASE            ={ { { { 0x000010A0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SDMA0_BASE            ={ { { { 0x00001260, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SDMA1_BASE            ={ { { { 0x00001860, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SMUIO_BASE            ={ { { { 0x00016800, 0x00016A00, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE THM_BASE            ={ { { { 0x00016600, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UMC_BASE            ={ { { { 0x00014000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UVD_BASE            ={ { { { 0x00007800, 0x00007E00, 0, 0, 0, 0 } },
                                        { { 0, 0x00009000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
/* Adjust VCE_BASE to make vce_4_1 use vce_4_0 offset header files*/
static const struct IP_BASE VCE_BASE            ={ { { { 0x00007E00/* 0x00008800 */, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE XDMA_BASE            ={ { { { 0x00003400, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE RSMU_BASE            ={ { { { 0x00012000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };


#define ATHUB_BASE__INST0_SEG0                     0x00000C20
#define ATHUB_BASE__INST0_SEG1                     0
#define ATHUB_BASE__INST0_SEG2                     0
#define ATHUB_BASE__INST0_SEG3                     0
#define ATHUB_BASE__INST0_SEG4                     0
#define ATHUB_BASE__INST0_SEG5                     0

#define ATHUB_BASE__INST1_SEG0                     0
#define ATHUB_BASE__INST1_SEG1                     0
#define ATHUB_BASE__INST1_SEG2                     0
#define ATHUB_BASE__INST1_SEG3                     0
#define ATHUB_BASE__INST1_SEG4                     0
#define ATHUB_BASE__INST1_SEG5                     0

#define ATHUB_BASE__INST2_SEG0                     0
#define ATHUB_BASE__INST2_SEG1                     0
#define ATHUB_BASE__INST2_SEG2                     0
#define ATHUB_BASE__INST2_SEG3                     0
#define ATHUB_BASE__INST2_SEG4                     0
#define ATHUB_BASE__INST2_SEG5                     0

#define ATHUB_BASE__INST3_SEG0                     0
#define ATHUB_BASE__INST3_SEG1                     0
#define ATHUB_BASE__INST3_SEG2                     0
#define ATHUB_BASE__INST3_SEG3                     0
#define ATHUB_BASE__INST3_SEG4                     0
#define ATHUB_BASE__INST3_SEG5                     0

#define ATHUB_BASE__INST4_SEG0                     0
#define ATHUB_BASE__INST4_SEG1                     0
#define ATHUB_BASE__INST4_SEG2                     0
#define ATHUB_BASE__INST4_SEG3                     0
#define ATHUB_BASE__INST4_SEG4                     0
#define ATHUB_BASE__INST4_SEG5                     0

#define ATHUB_BASE__INST5_SEG0                     0
#define ATHUB_BASE__INST5_SEG1                     0
#define ATHUB_BASE__INST5_SEG2                     0
#define ATHUB_BASE__INST5_SEG3                     0
#define ATHUB_BASE__INST5_SEG4                     0
#define ATHUB_BASE__INST5_SEG5                     0

#define CLK_BASE__INST0_SEG0                       0x00016C00
#define CLK_BASE__INST0_SEG1                       0x00016E00
#define CLK_BASE__INST0_SEG2                       0x00017000
#define CLK_BASE__INST0_SEG3                       0x00017200
#define CLK_BASE__INST0_SEG4                       0x0001B000
#define CLK_BASE__INST0_SEG5                       0x0001B200

#define CLK_BASE__INST1_SEG0                       0
#define CLK_BASE__INST1_SEG1                       0
#define CLK_BASE__INST1_SEG2                       0
#define CLK_BASE__INST1_SEG3                       0
#define CLK_BASE__INST1_SEG4                       0
#define CLK_BASE__INST1_SEG5                       0

#define CLK_BASE__INST2_SEG0                       0
#define CLK_BASE__INST2_SEG1                       0
#define CLK_BASE__INST2_SEG2                       0
#define CLK_BASE__INST2_SEG3                       0
#define CLK_BASE__INST2_SEG4                       0
#define CLK_BASE__INST2_SEG5                       0

#define CLK_BASE__INST3_SEG0                       0
#define CLK_BASE__INST3_SEG1                       0
#define CLK_BASE__INST3_SEG2                       0
#define CLK_BASE__INST3_SEG3                       0
#define CLK_BASE__INST3_SEG4                       0
#define CLK_BASE__INST3_SEG5                       0

#define CLK_BASE__INST4_SEG0                       0
#define CLK_BASE__INST4_SEG1                       0
#define CLK_BASE__INST4_SEG2                       0
#define CLK_BASE__INST4_SEG3                       0
#define CLK_BASE__INST4_SEG4                       0
#define CLK_BASE__INST4_SEG5                       0

#define CLK_BASE__INST5_SEG0                       0
#define CLK_BASE__INST5_SEG1                       0
#define CLK_BASE__INST5_SEG2                       0
#define CLK_BASE__INST5_SEG3                       0
#define CLK_BASE__INST5_SEG4                       0
#define CLK_BASE__INST5_SEG5                       0

#define DCE_BASE__INST0_SEG0                       0x00000012
#define DCE_BASE__INST0_SEG1                       0x000000C0
#define DCE_BASE__INST0_SEG2                       0x000034C0
#define DCE_BASE__INST0_SEG3                       0
#define DCE_BASE__INST0_SEG4                       0
#define DCE_BASE__INST0_SEG5                       0

#define DCE_BASE__INST1_SEG0                       0
#define DCE_BASE__INST1_SEG1                       0
#define DCE_BASE__INST1_SEG2                       0
#define DCE_BASE__INST1_SEG3                       0
#define DCE_BASE__INST1_SEG4                       0
#define DCE_BASE__INST1_SEG5                       0

#define DCE_BASE__INST2_SEG0                       0
#define DCE_BASE__INST2_SEG1                       0
#define DCE_BASE__INST2_SEG2                       0
#define DCE_BASE__INST2_SEG3                       0
#define DCE_BASE__INST2_SEG4                       0
#define DCE_BASE__INST2_SEG5                       0

#define DCE_BASE__INST3_SEG0                       0
#define DCE_BASE__INST3_SEG1                       0
#define DCE_BASE__INST3_SEG2                       0
#define DCE_BASE__INST3_SEG3                       0
#define DCE_BASE__INST3_SEG4                       0
#define DCE_BASE__INST3_SEG5                       0

#define DCE_BASE__INST4_SEG0                       0
#define DCE_BASE__INST4_SEG1                       0
#define DCE_BASE__INST4_SEG2                       0
#define DCE_BASE__INST4_SEG3                       0
#define DCE_BASE__INST4_SEG4                       0
#define DCE_BASE__INST4_SEG5                       0

#define DCE_BASE__INST5_SEG0                       0
#define DCE_BASE__INST5_SEG1                       0
#define DCE_BASE__INST5_SEG2                       0
#define DCE_BASE__INST5_SEG3                       0
#define DCE_BASE__INST5_SEG4                       0
#define DCE_BASE__INST5_SEG5                       0

#define DF_BASE__INST0_SEG0                        0x00007000
#define DF_BASE__INST0_SEG1                        0
#define DF_BASE__INST0_SEG2                        0
#define DF_BASE__INST0_SEG3                        0
#define DF_BASE__INST0_SEG4                        0
#define DF_BASE__INST0_SEG5                        0

#define DF_BASE__INST1_SEG0                        0
#define DF_BASE__INST1_SEG1                        0
#define DF_BASE__INST1_SEG2                        0
#define DF_BASE__INST1_SEG3                        0
#define DF_BASE__INST1_SEG4                        0
#define DF_BASE__INST1_SEG5                        0

#define DF_BASE__INST2_SEG0                        0
#define DF_BASE__INST2_SEG1                        0
#define DF_BASE__INST2_SEG2                        0
#define DF_BASE__INST2_SEG3                        0
#define DF_BASE__INST2_SEG4                        0
#define DF_BASE__INST2_SEG5                        0

#define DF_BASE__INST3_SEG0                        0
#define DF_BASE__INST3_SEG1                        0
#define DF_BASE__INST3_SEG2                        0
#define DF_BASE__INST3_SEG3                        0
#define DF_BASE__INST3_SEG4                        0
#define DF_BASE__INST3_SEG5                        0

#define DF_BASE__INST4_SEG0                        0
#define DF_BASE__INST4_SEG1                        0
#define DF_BASE__INST4_SEG2                        0
#define DF_BASE__INST4_SEG3                        0
#define DF_BASE__INST4_SEG4                        0
#define DF_BASE__INST4_SEG5                        0

#define DF_BASE__INST5_SEG0                        0
#define DF_BASE__INST5_SEG1                        0
#define DF_BASE__INST5_SEG2                        0
#define DF_BASE__INST5_SEG3                        0
#define DF_BASE__INST5_SEG4                        0
#define DF_BASE__INST5_SEG5                        0

#define FUSE_BASE__INST0_SEG0                      0x00017400
#define FUSE_BASE__INST0_SEG1                      0
#define FUSE_BASE__INST0_SEG2                      0
#define FUSE_BASE__INST0_SEG3                      0
#define FUSE_BASE__INST0_SEG4                      0
#define FUSE_BASE__INST0_SEG5                      0

#define FUSE_BASE__INST1_SEG0                      0
#define FUSE_BASE__INST1_SEG1                      0
#define FUSE_BASE__INST1_SEG2                      0
#define FUSE_BASE__INST1_SEG3                      0
#define FUSE_BASE__INST1_SEG4                      0
#define FUSE_BASE__INST1_SEG5                      0

#define FUSE_BASE__INST2_SEG0                      0
#define FUSE_BASE__INST2_SEG1                      0
#define FUSE_BASE__INST2_SEG2                      0
#define FUSE_BASE__INST2_SEG3                      0
#define FUSE_BASE__INST2_SEG4                      0
#define FUSE_BASE__INST2_SEG5                      0

#define FUSE_BASE__INST3_SEG0                      0
#define FUSE_BASE__INST3_SEG1                      0
#define FUSE_BASE__INST3_SEG2                      0
#define FUSE_BASE__INST3_SEG3                      0
#define FUSE_BASE__INST3_SEG4                      0
#define FUSE_BASE__INST3_SEG5                      0

#define FUSE_BASE__INST4_SEG0                      0
#define FUSE_BASE__INST4_SEG1                      0
#define FUSE_BASE__INST4_SEG2                      0
#define FUSE_BASE__INST4_SEG3                      0
#define FUSE_BASE__INST4_SEG4                      0
#define FUSE_BASE__INST4_SEG5                      0

#define FUSE_BASE__INST5_SEG0                      0
#define FUSE_BASE__INST5_SEG1                      0
#define FUSE_BASE__INST5_SEG2                      0
#define FUSE_BASE__INST5_SEG3                      0
#define FUSE_BASE__INST5_SEG4                      0
#define FUSE_BASE__INST5_SEG5                      0

#define GC_BASE__INST0_SEG0                        0x00002000
#define GC_BASE__INST0_SEG1                        0x0000A000
#define GC_BASE__INST0_SEG2                        0
#define GC_BASE__INST0_SEG3                        0
#define GC_BASE__INST0_SEG4                        0
#define GC_BASE__INST0_SEG5                        0

#define GC_BASE__INST1_SEG0                        0
#define GC_BASE__INST1_SEG1                        0
#define GC_BASE__INST1_SEG2                        0
#define GC_BASE__INST1_SEG3                        0
#define GC_BASE__INST1_SEG4                        0
#define GC_BASE__INST1_SEG5                        0

#define GC_BASE__INST2_SEG0                        0
#define GC_BASE__INST2_SEG1                        0
#define GC_BASE__INST2_SEG2                        0
#define GC_BASE__INST2_SEG3                        0
#define GC_BASE__INST2_SEG4                        0
#define GC_BASE__INST2_SEG5                        0

#define GC_BASE__INST3_SEG0                        0
#define GC_BASE__INST3_SEG1                        0
#define GC_BASE__INST3_SEG2                        0
#define GC_BASE__INST3_SEG3                        0
#define GC_BASE__INST3_SEG4                        0
#define GC_BASE__INST3_SEG5                        0

#define GC_BASE__INST4_SEG0                        0
#define GC_BASE__INST4_SEG1                        0
#define GC_BASE__INST4_SEG2                        0
#define GC_BASE__INST4_SEG3                        0
#define GC_BASE__INST4_SEG4                        0
#define GC_BASE__INST4_SEG5                        0

#define GC_BASE__INST5_SEG0                        0
#define GC_BASE__INST5_SEG1                        0
#define GC_BASE__INST5_SEG2                        0
#define GC_BASE__INST5_SEG3                        0
#define GC_BASE__INST5_SEG4                        0
#define GC_BASE__INST5_SEG5                        0

#define HDP_BASE__INST0_SEG0                       0x00000F20
#define HDP_BASE__INST0_SEG1                       0
#define HDP_BASE__INST0_SEG2                       0
#define HDP_BASE__INST0_SEG3                       0
#define HDP_BASE__INST0_SEG4                       0
#define HDP_BASE__INST0_SEG5                       0

#define HDP_BASE__INST1_SEG0                       0
#define HDP_BASE__INST1_SEG1                       0
#define HDP_BASE__INST1_SEG2                       0
#define HDP_BASE__INST1_SEG3                       0
#define HDP_BASE__INST1_SEG4                       0
#define HDP_BASE__INST1_SEG5                       0

#define HDP_BASE__INST2_SEG0                       0
#define HDP_BASE__INST2_SEG1                       0
#define HDP_BASE__INST2_SEG2                       0
#define HDP_BASE__INST2_SEG3                       0
#define HDP_BASE__INST2_SEG4                       0
#define HDP_BASE__INST2_SEG5                       0

#define HDP_BASE__INST3_SEG0                       0
#define HDP_BASE__INST3_SEG1                       0
#define HDP_BASE__INST3_SEG2                       0
#define HDP_BASE__INST3_SEG3                       0
#define HDP_BASE__INST3_SEG4                       0
#define HDP_BASE__INST3_SEG5                       0

#define HDP_BASE__INST4_SEG0                       0
#define HDP_BASE__INST4_SEG1                       0
#define HDP_BASE__INST4_SEG2                       0
#define HDP_BASE__INST4_SEG3                       0
#define HDP_BASE__INST4_SEG4                       0
#define HDP_BASE__INST4_SEG5                       0

#define HDP_BASE__INST5_SEG0                       0
#define HDP_BASE__INST5_SEG1                       0
#define HDP_BASE__INST5_SEG2                       0
#define HDP_BASE__INST5_SEG3                       0
#define HDP_BASE__INST5_SEG4                       0
#define HDP_BASE__INST5_SEG5                       0

#define MMHUB_BASE__INST0_SEG0                     0x0001A000
#define MMHUB_BASE__INST0_SEG1                     0
#define MMHUB_BASE__INST0_SEG2                     0
#define MMHUB_BASE__INST0_SEG3                     0
#define MMHUB_BASE__INST0_SEG4                     0
#define MMHUB_BASE__INST0_SEG5                     0

#define MMHUB_BASE__INST1_SEG0                     0
#define MMHUB_BASE__INST1_SEG1                     0
#define MMHUB_BASE__INST1_SEG2                     0
#define MMHUB_BASE__INST1_SEG3                     0
#define MMHUB_BASE__INST1_SEG4                     0
#define MMHUB_BASE__INST1_SEG5                     0

#define MMHUB_BASE__INST2_SEG0                     0
#define MMHUB_BASE__INST2_SEG1                     0
#define MMHUB_BASE__INST2_SEG2                     0
#define MMHUB_BASE__INST2_SEG3                     0
#define MMHUB_BASE__INST2_SEG4                     0
#define MMHUB_BASE__INST2_SEG5                     0

#define MMHUB_BASE__INST3_SEG0                     0
#define MMHUB_BASE__INST3_SEG1                     0
#define MMHUB_BASE__INST3_SEG2                     0
#define MMHUB_BASE__INST3_SEG3                     0
#define MMHUB_BASE__INST3_SEG4                     0
#define MMHUB_BASE__INST3_SEG5                     0

#define MMHUB_BASE__INST4_SEG0                     0
#define MMHUB_BASE__INST4_SEG1                     0
#define MMHUB_BASE__INST4_SEG2                     0
#define MMHUB_BASE__INST4_SEG3                     0
#define MMHUB_BASE__INST4_SEG4                     0
#define MMHUB_BASE__INST4_SEG5                     0

#define MMHUB_BASE__INST5_SEG0                     0
#define MMHUB_BASE__INST5_SEG1                     0
#define MMHUB_BASE__INST5_SEG2                     0
#define MMHUB_BASE__INST5_SEG3                     0
#define MMHUB_BASE__INST5_SEG4                     0
#define MMHUB_BASE__INST5_SEG5                     0

#define MP0_BASE__INST0_SEG0                       0x00016000
#define MP0_BASE__INST0_SEG1                       0
#define MP0_BASE__INST0_SEG2                       0
#define MP0_BASE__INST0_SEG3                       0
#define MP0_BASE__INST0_SEG4                       0
#define MP0_BASE__INST0_SEG5                       0

#define MP0_BASE__INST1_SEG0                       0
#define MP0_BASE__INST1_SEG1                       0
#define MP0_BASE__INST1_SEG2                       0
#define MP0_BASE__INST1_SEG3                       0
#define MP0_BASE__INST1_SEG4                       0
#define MP0_BASE__INST1_SEG5                       0

#define MP0_BASE__INST2_SEG0                       0
#define MP0_BASE__INST2_SEG1                       0
#define MP0_BASE__INST2_SEG2                       0
#define MP0_BASE__INST2_SEG3                       0
#define MP0_BASE__INST2_SEG4                       0
#define MP0_BASE__INST2_SEG5                       0

#define MP0_BASE__INST3_SEG0                       0
#define MP0_BASE__INST3_SEG1                       0
#define MP0_BASE__INST3_SEG2                       0
#define MP0_BASE__INST3_SEG3                       0
#define MP0_BASE__INST3_SEG4                       0
#define MP0_BASE__INST3_SEG5                       0

#define MP0_BASE__INST4_SEG0                       0
#define MP0_BASE__INST4_SEG1                       0
#define MP0_BASE__INST4_SEG2                       0
#define MP0_BASE__INST4_SEG3                       0
#define MP0_BASE__INST4_SEG4                       0
#define MP0_BASE__INST4_SEG5                       0

#define MP0_BASE__INST5_SEG0                       0
#define MP0_BASE__INST5_SEG1                       0
#define MP0_BASE__INST5_SEG2                       0
#define MP0_BASE__INST5_SEG3                       0
#define MP0_BASE__INST5_SEG4                       0
#define MP0_BASE__INST5_SEG5                       0

#define MP1_BASE__INST0_SEG0                       0x00016000
#define MP1_BASE__INST0_SEG1                       0
#define MP1_BASE__INST0_SEG2                       0
#define MP1_BASE__INST0_SEG3                       0
#define MP1_BASE__INST0_SEG4                       0
#define MP1_BASE__INST0_SEG5                       0

#define MP1_BASE__INST1_SEG0                       0
#define MP1_BASE__INST1_SEG1                       0
#define MP1_BASE__INST1_SEG2                       0
#define MP1_BASE__INST1_SEG3                       0
#define MP1_BASE__INST1_SEG4                       0
#define MP1_BASE__INST1_SEG5                       0

#define MP1_BASE__INST2_SEG0                       0
#define MP1_BASE__INST2_SEG1                       0
#define MP1_BASE__INST2_SEG2                       0
#define MP1_BASE__INST2_SEG3                       0
#define MP1_BASE__INST2_SEG4                       0
#define MP1_BASE__INST2_SEG5                       0

#define MP1_BASE__INST3_SEG0                       0
#define MP1_BASE__INST3_SEG1                       0
#define MP1_BASE__INST3_SEG2                       0
#define MP1_BASE__INST3_SEG3                       0
#define MP1_BASE__INST3_SEG4                       0
#define MP1_BASE__INST3_SEG5                       0

#define MP1_BASE__INST4_SEG0                       0
#define MP1_BASE__INST4_SEG1                       0
#define MP1_BASE__INST4_SEG2                       0
#define MP1_BASE__INST4_SEG3                       0
#define MP1_BASE__INST4_SEG4                       0
#define MP1_BASE__INST4_SEG5                       0

#define MP1_BASE__INST5_SEG0                       0
#define MP1_BASE__INST5_SEG1                       0
#define MP1_BASE__INST5_SEG2                       0
#define MP1_BASE__INST5_SEG3                       0
#define MP1_BASE__INST5_SEG4                       0
#define MP1_BASE__INST5_SEG5                       0

#define NBIO_BASE__INST0_SEG0                      0x00000000
#define NBIO_BASE__INST0_SEG1                      0x00000014
#define NBIO_BASE__INST0_SEG2                      0x00000D20
#define NBIO_BASE__INST0_SEG3                      0x00010400
#define NBIO_BASE__INST0_SEG4                      0
#define NBIO_BASE__INST0_SEG5                      0

#define NBIO_BASE__INST1_SEG0                      0
#define NBIO_BASE__INST1_SEG1                      0
#define NBIO_BASE__INST1_SEG2                      0
#define NBIO_BASE__INST1_SEG3                      0
#define NBIO_BASE__INST1_SEG4                      0
#define NBIO_BASE__INST1_SEG5                      0

#define NBIO_BASE__INST2_SEG0                      0
#define NBIO_BASE__INST2_SEG1                      0
#define NBIO_BASE__INST2_SEG2                      0
#define NBIO_BASE__INST2_SEG3                      0
#define NBIO_BASE__INST2_SEG4                      0
#define NBIO_BASE__INST2_SEG5                      0

#define NBIO_BASE__INST3_SEG0                      0
#define NBIO_BASE__INST3_SEG1                      0
#define NBIO_BASE__INST3_SEG2                      0
#define NBIO_BASE__INST3_SEG3                      0
#define NBIO_BASE__INST3_SEG4                      0
#define NBIO_BASE__INST3_SEG5                      0

#define NBIO_BASE__INST4_SEG0                      0
#define NBIO_BASE__INST4_SEG1                      0
#define NBIO_BASE__INST4_SEG2                      0
#define NBIO_BASE__INST4_SEG3                      0
#define NBIO_BASE__INST4_SEG4                      0
#define NBIO_BASE__INST4_SEG5                      0

#define NBIO_BASE__INST5_SEG0                      0
#define NBIO_BASE__INST5_SEG1                      0
#define NBIO_BASE__INST5_SEG2                      0
#define NBIO_BASE__INST5_SEG3                      0
#define NBIO_BASE__INST5_SEG4                      0
#define NBIO_BASE__INST5_SEG5                      0

#define OSSSYS_BASE__INST0_SEG0                    0x000010A0
#define OSSSYS_BASE__INST0_SEG1                    0
#define OSSSYS_BASE__INST0_SEG2                    0
#define OSSSYS_BASE__INST0_SEG3                    0
#define OSSSYS_BASE__INST0_SEG4                    0
#define OSSSYS_BASE__INST0_SEG5                    0

#define OSSSYS_BASE__INST1_SEG0                    0
#define OSSSYS_BASE__INST1_SEG1                    0
#define OSSSYS_BASE__INST1_SEG2                    0
#define OSSSYS_BASE__INST1_SEG3                    0
#define OSSSYS_BASE__INST1_SEG4                    0
#define OSSSYS_BASE__INST1_SEG5                    0

#define OSSSYS_BASE__INST2_SEG0                    0
#define OSSSYS_BASE__INST2_SEG1                    0
#define OSSSYS_BASE__INST2_SEG2                    0
#define OSSSYS_BASE__INST2_SEG3                    0
#define OSSSYS_BASE__INST2_SEG4                    0
#define OSSSYS_BASE__INST2_SEG5                    0

#define OSSSYS_BASE__INST3_SEG0                    0
#define OSSSYS_BASE__INST3_SEG1                    0
#define OSSSYS_BASE__INST3_SEG2                    0
#define OSSSYS_BASE__INST3_SEG3                    0
#define OSSSYS_BASE__INST3_SEG4                    0
#define OSSSYS_BASE__INST3_SEG5                    0

#define OSSSYS_BASE__INST4_SEG0                    0
#define OSSSYS_BASE__INST4_SEG1                    0
#define OSSSYS_BASE__INST4_SEG2                    0
#define OSSSYS_BASE__INST4_SEG3                    0
#define OSSSYS_BASE__INST4_SEG4                    0
#define OSSSYS_BASE__INST4_SEG5                    0

#define OSSSYS_BASE__INST5_SEG0                    0
#define OSSSYS_BASE__INST5_SEG1                    0
#define OSSSYS_BASE__INST5_SEG2                    0
#define OSSSYS_BASE__INST5_SEG3                    0
#define OSSSYS_BASE__INST5_SEG4                    0
#define OSSSYS_BASE__INST5_SEG5                    0

#define SDMA0_BASE__INST0_SEG0                     0x00001260
#define SDMA0_BASE__INST0_SEG1                     0
#define SDMA0_BASE__INST0_SEG2                     0
#define SDMA0_BASE__INST0_SEG3                     0
#define SDMA0_BASE__INST0_SEG4                     0
#define SDMA0_BASE__INST0_SEG5                     0

#define SDMA0_BASE__INST1_SEG0                     0
#define SDMA0_BASE__INST1_SEG1                     0
#define SDMA0_BASE__INST1_SEG2                     0
#define SDMA0_BASE__INST1_SEG3                     0
#define SDMA0_BASE__INST1_SEG4                     0
#define SDMA0_BASE__INST1_SEG5                     0

#define SDMA0_BASE__INST2_SEG0                     0
#define SDMA0_BASE__INST2_SEG1                     0
#define SDMA0_BASE__INST2_SEG2                     0
#define SDMA0_BASE__INST2_SEG3                     0
#define SDMA0_BASE__INST2_SEG4                     0
#define SDMA0_BASE__INST2_SEG5                     0

#define SDMA0_BASE__INST3_SEG0                     0
#define SDMA0_BASE__INST3_SEG1                     0
#define SDMA0_BASE__INST3_SEG2                     0
#define SDMA0_BASE__INST3_SEG3                     0
#define SDMA0_BASE__INST3_SEG4                     0
#define SDMA0_BASE__INST3_SEG5                     0

#define SDMA0_BASE__INST4_SEG0                     0
#define SDMA0_BASE__INST4_SEG1                     0
#define SDMA0_BASE__INST4_SEG2                     0
#define SDMA0_BASE__INST4_SEG3                     0
#define SDMA0_BASE__INST4_SEG4                     0
#define SDMA0_BASE__INST4_SEG5                     0

#define SDMA0_BASE__INST5_SEG0                     0
#define SDMA0_BASE__INST5_SEG1                     0
#define SDMA0_BASE__INST5_SEG2                     0
#define SDMA0_BASE__INST5_SEG3                     0
#define SDMA0_BASE__INST5_SEG4                     0
#define SDMA0_BASE__INST5_SEG5                     0

#define SDMA1_BASE__INST0_SEG0                     0x00001860
#define SDMA1_BASE__INST0_SEG1                     0
#define SDMA1_BASE__INST0_SEG2                     0
#define SDMA1_BASE__INST0_SEG3                     0
#define SDMA1_BASE__INST0_SEG4                     0
#define SDMA1_BASE__INST0_SEG5                     0

#define SDMA1_BASE__INST1_SEG0                     0
#define SDMA1_BASE__INST1_SEG1                     0
#define SDMA1_BASE__INST1_SEG2                     0
#define SDMA1_BASE__INST1_SEG3                     0
#define SDMA1_BASE__INST1_SEG4                     0
#define SDMA1_BASE__INST1_SEG5                     0

#define SDMA1_BASE__INST2_SEG0                     0
#define SDMA1_BASE__INST2_SEG1                     0
#define SDMA1_BASE__INST2_SEG2                     0
#define SDMA1_BASE__INST2_SEG3                     0
#define SDMA1_BASE__INST2_SEG4                     0
#define SDMA1_BASE__INST2_SEG5                     0

#define SDMA1_BASE__INST3_SEG0                     0
#define SDMA1_BASE__INST3_SEG1                     0
#define SDMA1_BASE__INST3_SEG2                     0
#define SDMA1_BASE__INST3_SEG3                     0
#define SDMA1_BASE__INST3_SEG4                     0
#define SDMA1_BASE__INST3_SEG5                     0

#define SDMA1_BASE__INST4_SEG0                     0
#define SDMA1_BASE__INST4_SEG1                     0
#define SDMA1_BASE__INST4_SEG2                     0
#define SDMA1_BASE__INST4_SEG3                     0
#define SDMA1_BASE__INST4_SEG4                     0
#define SDMA1_BASE__INST4_SEG5                     0

#define SDMA1_BASE__INST5_SEG0                     0
#define SDMA1_BASE__INST5_SEG1                     0
#define SDMA1_BASE__INST5_SEG2                     0
#define SDMA1_BASE__INST5_SEG3                     0
#define SDMA1_BASE__INST5_SEG4                     0
#define SDMA1_BASE__INST5_SEG5                     0

#define SMUIO_BASE__INST0_SEG0                     0x00016800
#define SMUIO_BASE__INST0_SEG1                     0x00016A00
#define SMUIO_BASE__INST0_SEG2                     0
#define SMUIO_BASE__INST0_SEG3                     0
#define SMUIO_BASE__INST0_SEG4                     0
#define SMUIO_BASE__INST0_SEG5                     0

#define SMUIO_BASE__INST1_SEG0                     0
#define SMUIO_BASE__INST1_SEG1                     0
#define SMUIO_BASE__INST1_SEG2                     0
#define SMUIO_BASE__INST1_SEG3                     0
#define SMUIO_BASE__INST1_SEG4                     0
#define SMUIO_BASE__INST1_SEG5                     0

#define SMUIO_BASE__INST2_SEG0                     0
#define SMUIO_BASE__INST2_SEG1                     0
#define SMUIO_BASE__INST2_SEG2                     0
#define SMUIO_BASE__INST2_SEG3                     0
#define SMUIO_BASE__INST2_SEG4                     0
#define SMUIO_BASE__INST2_SEG5                     0

#define SMUIO_BASE__INST3_SEG0                     0
#define SMUIO_BASE__INST3_SEG1                     0
#define SMUIO_BASE__INST3_SEG2                     0
#define SMUIO_BASE__INST3_SEG3                     0
#define SMUIO_BASE__INST3_SEG4                     0
#define SMUIO_BASE__INST3_SEG5                     0

#define SMUIO_BASE__INST4_SEG0                     0
#define SMUIO_BASE__INST4_SEG1                     0
#define SMUIO_BASE__INST4_SEG2                     0
#define SMUIO_BASE__INST4_SEG3                     0
#define SMUIO_BASE__INST4_SEG4                     0
#define SMUIO_BASE__INST4_SEG5                     0

#define SMUIO_BASE__INST5_SEG0                     0
#define SMUIO_BASE__INST5_SEG1                     0
#define SMUIO_BASE__INST5_SEG2                     0
#define SMUIO_BASE__INST5_SEG3                     0
#define SMUIO_BASE__INST5_SEG4                     0
#define SMUIO_BASE__INST5_SEG5                     0

#define THM_BASE__INST0_SEG0                       0x00016600
#define THM_BASE__INST0_SEG1                       0
#define THM_BASE__INST0_SEG2                       0
#define THM_BASE__INST0_SEG3                       0
#define THM_BASE__INST0_SEG4                       0
#define THM_BASE__INST0_SEG5                       0

#define THM_BASE__INST1_SEG0                       0
#define THM_BASE__INST1_SEG1                       0
#define THM_BASE__INST1_SEG2                       0
#define THM_BASE__INST1_SEG3                       0
#define THM_BASE__INST1_SEG4                       0
#define THM_BASE__INST1_SEG5                       0

#define THM_BASE__INST2_SEG0                       0
#define THM_BASE__INST2_SEG1                       0
#define THM_BASE__INST2_SEG2                       0
#define THM_BASE__INST2_SEG3                       0
#define THM_BASE__INST2_SEG4                       0
#define THM_BASE__INST2_SEG5                       0

#define THM_BASE__INST3_SEG0                       0
#define THM_BASE__INST3_SEG1                       0
#define THM_BASE__INST3_SEG2                       0
#define THM_BASE__INST3_SEG3                       0
#define THM_BASE__INST3_SEG4                       0
#define THM_BASE__INST3_SEG5                       0

#define THM_BASE__INST4_SEG0                       0
#define THM_BASE__INST4_SEG1                       0
#define THM_BASE__INST4_SEG2                       0
#define THM_BASE__INST4_SEG3                       0
#define THM_BASE__INST4_SEG4                       0
#define THM_BASE__INST4_SEG5                       0

#define THM_BASE__INST5_SEG0                       0
#define THM_BASE__INST5_SEG1                       0
#define THM_BASE__INST5_SEG2                       0
#define THM_BASE__INST5_SEG3                       0
#define THM_BASE__INST5_SEG4                       0
#define THM_BASE__INST5_SEG5                       0

#define UMC_BASE__INST0_SEG0                       0x00014000
#define UMC_BASE__INST0_SEG1                       0
#define UMC_BASE__INST0_SEG2                       0
#define UMC_BASE__INST0_SEG3                       0
#define UMC_BASE__INST0_SEG4                       0
#define UMC_BASE__INST0_SEG5                       0

#define UMC_BASE__INST1_SEG0                       0
#define UMC_BASE__INST1_SEG1                       0
#define UMC_BASE__INST1_SEG2                       0
#define UMC_BASE__INST1_SEG3                       0
#define UMC_BASE__INST1_SEG4                       0
#define UMC_BASE__INST1_SEG5                       0

#define UMC_BASE__INST2_SEG0                       0
#define UMC_BASE__INST2_SEG1                       0
#define UMC_BASE__INST2_SEG2                       0
#define UMC_BASE__INST2_SEG3                       0
#define UMC_BASE__INST2_SEG4                       0
#define UMC_BASE__INST2_SEG5                       0

#define UMC_BASE__INST3_SEG0                       0
#define UMC_BASE__INST3_SEG1                       0
#define UMC_BASE__INST3_SEG2                       0
#define UMC_BASE__INST3_SEG3                       0
#define UMC_BASE__INST3_SEG4                       0
#define UMC_BASE__INST3_SEG5                       0

#define UMC_BASE__INST4_SEG0                       0
#define UMC_BASE__INST4_SEG1                       0
#define UMC_BASE__INST4_SEG2                       0
#define UMC_BASE__INST4_SEG3                       0
#define UMC_BASE__INST4_SEG4                       0
#define UMC_BASE__INST4_SEG5                       0

#define UMC_BASE__INST5_SEG0                       0
#define UMC_BASE__INST5_SEG1                       0
#define UMC_BASE__INST5_SEG2                       0
#define UMC_BASE__INST5_SEG3                       0
#define UMC_BASE__INST5_SEG4                       0
#define UMC_BASE__INST5_SEG5                       0

#define UVD_BASE__INST0_SEG0                       0x00007800
#define UVD_BASE__INST0_SEG1                       0x00007E00
#define UVD_BASE__INST0_SEG2                       0
#define UVD_BASE__INST0_SEG3                       0
#define UVD_BASE__INST0_SEG4                       0
#define UVD_BASE__INST0_SEG5                       0

#define UVD_BASE__INST1_SEG0                       0
#define UVD_BASE__INST1_SEG1                       0x00009000
#define UVD_BASE__INST1_SEG2                       0
#define UVD_BASE__INST1_SEG3                       0
#define UVD_BASE__INST1_SEG4                       0
#define UVD_BASE__INST1_SEG5                       0

#define UVD_BASE__INST2_SEG0                       0
#define UVD_BASE__INST2_SEG1                       0
#define UVD_BASE__INST2_SEG2                       0
#define UVD_BASE__INST2_SEG3                       0
#define UVD_BASE__INST2_SEG4                       0
#define UVD_BASE__INST2_SEG5                       0

#define UVD_BASE__INST3_SEG0                       0
#define UVD_BASE__INST3_SEG1                       0
#define UVD_BASE__INST3_SEG2                       0
#define UVD_BASE__INST3_SEG3                       0
#define UVD_BASE__INST3_SEG4                       0
#define UVD_BASE__INST3_SEG5                       0

#define UVD_BASE__INST4_SEG0                       0
#define UVD_BASE__INST4_SEG1                       0
#define UVD_BASE__INST4_SEG2                       0
#define UVD_BASE__INST4_SEG3                       0
#define UVD_BASE__INST4_SEG4                       0
#define UVD_BASE__INST4_SEG5                       0

#define UVD_BASE__INST5_SEG0                       0
#define UVD_BASE__INST5_SEG1                       0
#define UVD_BASE__INST5_SEG2                       0
#define UVD_BASE__INST5_SEG3                       0
#define UVD_BASE__INST5_SEG4                       0
#define UVD_BASE__INST5_SEG5                       0

#define VCE_BASE__INST0_SEG0                       0x00008800
#define VCE_BASE__INST0_SEG1                       0
#define VCE_BASE__INST0_SEG2                       0
#define VCE_BASE__INST0_SEG3                       0
#define VCE_BASE__INST0_SEG4                       0
#define VCE_BASE__INST0_SEG5                       0

#define VCE_BASE__INST1_SEG0                       0
#define VCE_BASE__INST1_SEG1                       0
#define VCE_BASE__INST1_SEG2                       0
#define VCE_BASE__INST1_SEG3                       0
#define VCE_BASE__INST1_SEG4                       0
#define VCE_BASE__INST1_SEG5                       0

#define VCE_BASE__INST2_SEG0                       0
#define VCE_BASE__INST2_SEG1                       0
#define VCE_BASE__INST2_SEG2                       0
#define VCE_BASE__INST2_SEG3                       0
#define VCE_BASE__INST2_SEG4                       0
#define VCE_BASE__INST2_SEG5                       0

#define VCE_BASE__INST3_SEG0                       0
#define VCE_BASE__INST3_SEG1                       0
#define VCE_BASE__INST3_SEG2                       0
#define VCE_BASE__INST3_SEG3                       0
#define VCE_BASE__INST3_SEG4                       0
#define VCE_BASE__INST3_SEG5                       0

#define VCE_BASE__INST4_SEG0                       0
#define VCE_BASE__INST4_SEG1                       0
#define VCE_BASE__INST4_SEG2                       0
#define VCE_BASE__INST4_SEG3                       0
#define VCE_BASE__INST4_SEG4                       0
#define VCE_BASE__INST4_SEG5                       0

#define VCE_BASE__INST5_SEG0                       0
#define VCE_BASE__INST5_SEG1                       0
#define VCE_BASE__INST5_SEG2                       0
#define VCE_BASE__INST5_SEG3                       0
#define VCE_BASE__INST5_SEG4                       0
#define VCE_BASE__INST5_SEG5                       0

#define XDMA_BASE__INST0_SEG0                      0x00003400
#define XDMA_BASE__INST0_SEG1                      0
#define XDMA_BASE__INST0_SEG2                      0
#define XDMA_BASE__INST0_SEG3                      0
#define XDMA_BASE__INST0_SEG4                      0
#define XDMA_BASE__INST0_SEG5                      0

#define XDMA_BASE__INST1_SEG0                      0
#define XDMA_BASE__INST1_SEG1                      0
#define XDMA_BASE__INST1_SEG2                      0
#define XDMA_BASE__INST1_SEG3                      0
#define XDMA_BASE__INST1_SEG4                      0
#define XDMA_BASE__INST1_SEG5                      0

#define XDMA_BASE__INST2_SEG0                      0
#define XDMA_BASE__INST2_SEG1                      0
#define XDMA_BASE__INST2_SEG2                      0
#define XDMA_BASE__INST2_SEG3                      0
#define XDMA_BASE__INST2_SEG4                      0
#define XDMA_BASE__INST2_SEG5                      0

#define XDMA_BASE__INST3_SEG0                      0
#define XDMA_BASE__INST3_SEG1                      0
#define XDMA_BASE__INST3_SEG2                      0
#define XDMA_BASE__INST3_SEG3                      0
#define XDMA_BASE__INST3_SEG4                      0
#define XDMA_BASE__INST3_SEG5                      0

#define XDMA_BASE__INST4_SEG0                      0
#define XDMA_BASE__INST4_SEG1                      0
#define XDMA_BASE__INST4_SEG2                      0
#define XDMA_BASE__INST4_SEG3                      0
#define XDMA_BASE__INST4_SEG4                      0
#define XDMA_BASE__INST4_SEG5                      0

#define XDMA_BASE__INST5_SEG0                      0
#define XDMA_BASE__INST5_SEG1                      0
#define XDMA_BASE__INST5_SEG2                      0
#define XDMA_BASE__INST5_SEG3                      0
#define XDMA_BASE__INST5_SEG4                      0
#define XDMA_BASE__INST5_SEG5                      0

#define RSMU_BASE__INST0_SEG0                      0x00012000
#define RSMU_BASE__INST0_SEG1                      0
#define RSMU_BASE__INST0_SEG2                      0
#define RSMU_BASE__INST0_SEG3                      0
#define RSMU_BASE__INST0_SEG4                      0
#define RSMU_BASE__INST0_SEG5                      0

#define RSMU_BASE__INST1_SEG0                      0
#define RSMU_BASE__INST1_SEG1                      0
#define RSMU_BASE__INST1_SEG2                      0
#define RSMU_BASE__INST1_SEG3                      0
#define RSMU_BASE__INST1_SEG4                      0
#define RSMU_BASE__INST1_SEG5                      0

#define RSMU_BASE__INST2_SEG0                      0
#define RSMU_BASE__INST2_SEG1                      0
#define RSMU_BASE__INST2_SEG2                      0
#define RSMU_BASE__INST2_SEG3                      0
#define RSMU_BASE__INST2_SEG4                      0
#define RSMU_BASE__INST2_SEG5                      0

#define RSMU_BASE__INST3_SEG0                      0
#define RSMU_BASE__INST3_SEG1                      0
#define RSMU_BASE__INST3_SEG2                      0
#define RSMU_BASE__INST3_SEG3                      0
#define RSMU_BASE__INST3_SEG4                      0
#define RSMU_BASE__INST3_SEG5                      0

#define RSMU_BASE__INST4_SEG0                      0
#define RSMU_BASE__INST4_SEG1                      0
#define RSMU_BASE__INST4_SEG2                      0
#define RSMU_BASE__INST4_SEG3                      0
#define RSMU_BASE__INST4_SEG4                      0
#define RSMU_BASE__INST4_SEG5                      0

#define RSMU_BASE__INST5_SEG0                      0
#define RSMU_BASE__INST5_SEG1                      0
#define RSMU_BASE__INST5_SEG2                      0
#define RSMU_BASE__INST5_SEG3                      0
#define RSMU_BASE__INST5_SEG4                      0
#define RSMU_BASE__INST5_SEG5                      0

#endif

/*
 * Copyright (C) 2018  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _vega10_ip_offset_HEADER
#define _vega10_ip_offset_HEADER

#define MAX_INSTANCE                                       5
#define MAX_SEGMENT                                        5

struct IP_BASE_INSTANCE
{
    unsigned int segment[MAX_SEGMENT];
};

struct IP_BASE
{
    struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
};


static const struct IP_BASE __maybe_unused NBIF_BASE	= { { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused NBIO_BASE	= { { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused DCE_BASE	= { { { { 0x00000012, 0x000000C0, 0x000034C0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused DCN_BASE	= { { { { 0x00000012, 0x000000C0, 0x000034C0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused MP0_BASE	= { { { { 0x00016000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused MP1_BASE	= { { { { 0x00016000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused MP2_BASE	= { { { { 0x00016000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused DF_BASE	= { { { { 0x00007000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused UVD_BASE	= { { { { 0x00007800, 0x00007E00, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };  //note: GLN does not use the first segment
static const struct IP_BASE __maybe_unused VCN_BASE	= { { { { 0x00007800, 0x00007E00, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };  //note: GLN does not use the first segment
static const struct IP_BASE __maybe_unused DBGU_BASE	= { { { { 0x00000180, 0x000001A0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } }; // not exist
static const struct IP_BASE __maybe_unused DBGU_NBIO_BASE	= { { { { 0x000001C0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } }; // not exist
static const struct IP_BASE __maybe_unused DBGU_IO_BASE	= { { { { 0x000001E0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } }; // not exist
static const struct IP_BASE __maybe_unused DFX_DAP_BASE	= { { { { 0x000005A0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } }; // not exist
static const struct IP_BASE __maybe_unused DFX_BASE	= { { { { 0x00000580, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } }; // this file does not contain registers
static const struct IP_BASE __maybe_unused ISP_BASE	= { { { { 0x00018000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } }; // not exist
static const struct IP_BASE __maybe_unused SYSTEMHUB_BASE	= { { { { 0x00000EA0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } }; // not exist
static const struct IP_BASE __maybe_unused L2IMU_BASE	= { { { { 0x00007DC0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused IOHC_BASE	= { { { { 0x00010000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused ATHUB_BASE	= { { { { 0x00000C20, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused VCE_BASE	= { { { { 0x00007E00, 0x00048800, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused GC_BASE	= { { { { 0x00002000, 0x0000A000, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused MMHUB_BASE	= { { { { 0x0001A000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused RSMU_BASE	= { { { { 0x00012000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused HDP_BASE	= { { { { 0x00000F20, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused OSSSYS_BASE	 = { { { { 0x000010A0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused SDMA0_BASE	= { { { { 0x00001260, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused SDMA1_BASE	= { { { { 0x00001460, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused XDMA_BASE	= { { { { 0x00003400, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused UMC_BASE	= { { { { 0x00014000, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused THM_BASE	= { { { { 0x00016600, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused SMUIO_BASE	= { { { { 0x00016800, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused PWR_BASE	= { { { { 0x00016A00, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused CLK_BASE	= { { { { 0x00016C00, 0, 0, 0, 0 } },
										{ { 0x00016E00, 0, 0, 0, 0 } },
										{ { 0x00017000, 0, 0, 0, 0 } },
										{ { 0x00017200, 0, 0, 0, 0 } },
										{ { 0x00017E00, 0, 0, 0, 0 } } } };
static const struct IP_BASE __maybe_unused FUSE_BASE	= { { { { 0x00017400, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } },
										{ { 0, 0, 0, 0, 0 } } } };


#define NBIF_BASE__INST0_SEG0                     0x00000000
#define NBIF_BASE__INST0_SEG1                     0x00000014
#define NBIF_BASE__INST0_SEG2                     0x00000D20
#define NBIF_BASE__INST0_SEG3                     0x00010400
#define NBIF_BASE__INST0_SEG4                     0

#define NBIF_BASE__INST1_SEG0                     0
#define NBIF_BASE__INST1_SEG1                     0
#define NBIF_BASE__INST1_SEG2                     0
#define NBIF_BASE__INST1_SEG3                     0
#define NBIF_BASE__INST1_SEG4                     0

#define NBIF_BASE__INST2_SEG0                     0
#define NBIF_BASE__INST2_SEG1                     0
#define NBIF_BASE__INST2_SEG2                     0
#define NBIF_BASE__INST2_SEG3                     0
#define NBIF_BASE__INST2_SEG4                     0

#define NBIF_BASE__INST3_SEG0                     0
#define NBIF_BASE__INST3_SEG1                     0
#define NBIF_BASE__INST3_SEG2                     0
#define NBIF_BASE__INST3_SEG3                     0
#define NBIF_BASE__INST3_SEG4                     0

#define NBIF_BASE__INST4_SEG0                     0
#define NBIF_BASE__INST4_SEG1                     0
#define NBIF_BASE__INST4_SEG2                     0
#define NBIF_BASE__INST4_SEG3                     0
#define NBIF_BASE__INST4_SEG4                     0

#define NBIO_BASE__INST0_SEG0                     0x00000000
#define NBIO_BASE__INST0_SEG1                     0x00000014
#define NBIO_BASE__INST0_SEG2                     0x00000D20
#define NBIO_BASE__INST0_SEG3                     0x00010400
#define NBIO_BASE__INST0_SEG4                     0

#define NBIO_BASE__INST1_SEG0                     0
#define NBIO_BASE__INST1_SEG1                     0
#define NBIO_BASE__INST1_SEG2                     0
#define NBIO_BASE__INST1_SEG3                     0
#define NBIO_BASE__INST1_SEG4                     0

#define NBIO_BASE__INST2_SEG0                     0
#define NBIO_BASE__INST2_SEG1                     0
#define NBIO_BASE__INST2_SEG2                     0
#define NBIO_BASE__INST2_SEG3                     0
#define NBIO_BASE__INST2_SEG4                     0

#define NBIO_BASE__INST3_SEG0                     0
#define NBIO_BASE__INST3_SEG1                     0
#define NBIO_BASE__INST3_SEG2                     0
#define NBIO_BASE__INST3_SEG3                     0
#define NBIO_BASE__INST3_SEG4                     0

#define NBIO_BASE__INST4_SEG0                     0
#define NBIO_BASE__INST4_SEG1                     0
#define NBIO_BASE__INST4_SEG2                     0
#define NBIO_BASE__INST4_SEG3                     0
#define NBIO_BASE__INST4_SEG4                     0

#define DCE_BASE__INST0_SEG0                      0x00000012
#define DCE_BASE__INST0_SEG1                      0x000000C0
#define DCE_BASE__INST0_SEG2                      0x000034C0
#define DCE_BASE__INST0_SEG3                      0
#define DCE_BASE__INST0_SEG4                      0

#define DCE_BASE__INST1_SEG0                      0
#define DCE_BASE__INST1_SEG1                      0
#define DCE_BASE__INST1_SEG2                      0
#define DCE_BASE__INST1_SEG3                      0
#define DCE_BASE__INST1_SEG4                      0

#define DCE_BASE__INST2_SEG0                      0
#define DCE_BASE__INST2_SEG1                      0
#define DCE_BASE__INST2_SEG2                      0
#define DCE_BASE__INST2_SEG3                      0
#define DCE_BASE__INST2_SEG4                      0

#define DCE_BASE__INST3_SEG0                      0
#define DCE_BASE__INST3_SEG1                      0
#define DCE_BASE__INST3_SEG2                      0
#define DCE_BASE__INST3_SEG3                      0
#define DCE_BASE__INST3_SEG4                      0

#define DCE_BASE__INST4_SEG0                      0
#define DCE_BASE__INST4_SEG1                      0
#define DCE_BASE__INST4_SEG2                      0
#define DCE_BASE__INST4_SEG3                      0
#define DCE_BASE__INST4_SEG4                      0

#define DCN_BASE__INST0_SEG0                      0x00000012
#define DCN_BASE__INST0_SEG1                      0x000000C0
#define DCN_BASE__INST0_SEG2                      0x000034C0
#define DCN_BASE__INST0_SEG3                      0
#define DCN_BASE__INST0_SEG4                      0

#define DCN_BASE__INST1_SEG0                      0
#define DCN_BASE__INST1_SEG1                      0
#define DCN_BASE__INST1_SEG2                      0
#define DCN_BASE__INST1_SEG3                      0
#define DCN_BASE__INST1_SEG4                      0

#define DCN_BASE__INST2_SEG0                      0
#define DCN_BASE__INST2_SEG1                      0
#define DCN_BASE__INST2_SEG2                      0
#define DCN_BASE__INST2_SEG3                      0
#define DCN_BASE__INST2_SEG4                      0

#define DCN_BASE__INST3_SEG0                      0
#define DCN_BASE__INST3_SEG1                      0
#define DCN_BASE__INST3_SEG2                      0
#define DCN_BASE__INST3_SEG3                      0
#define DCN_BASE__INST3_SEG4                      0

#define DCN_BASE__INST4_SEG0                      0
#define DCN_BASE__INST4_SEG1                      0
#define DCN_BASE__INST4_SEG2                      0
#define DCN_BASE__INST4_SEG3                      0
#define DCN_BASE__INST4_SEG4                      0

#define MP0_BASE__INST0_SEG0                      0x00016000
#define MP0_BASE__INST0_SEG1                      0
#define MP0_BASE__INST0_SEG2                      0
#define MP0_BASE__INST0_SEG3                      0
#define MP0_BASE__INST0_SEG4                      0

#define MP0_BASE__INST1_SEG0                      0
#define MP0_BASE__INST1_SEG1                      0
#define MP0_BASE__INST1_SEG2                      0
#define MP0_BASE__INST1_SEG3                      0
#define MP0_BASE__INST1_SEG4                      0

#define MP0_BASE__INST2_SEG0                      0
#define MP0_BASE__INST2_SEG1                      0
#define MP0_BASE__INST2_SEG2                      0
#define MP0_BASE__INST2_SEG3                      0
#define MP0_BASE__INST2_SEG4                      0

#define MP0_BASE__INST3_SEG0                      0
#define MP0_BASE__INST3_SEG1                      0
#define MP0_BASE__INST3_SEG2                      0
#define MP0_BASE__INST3_SEG3                      0
#define MP0_BASE__INST3_SEG4                      0

#define MP0_BASE__INST4_SEG0                      0
#define MP0_BASE__INST4_SEG1                      0
#define MP0_BASE__INST4_SEG2                      0
#define MP0_BASE__INST4_SEG3                      0
#define MP0_BASE__INST4_SEG4                      0

#define MP1_BASE__INST0_SEG0                      0x00016200
#define MP1_BASE__INST0_SEG1                      0
#define MP1_BASE__INST0_SEG2                      0
#define MP1_BASE__INST0_SEG3                      0
#define MP1_BASE__INST0_SEG4                      0

#define MP1_BASE__INST1_SEG0                      0
#define MP1_BASE__INST1_SEG1                      0
#define MP1_BASE__INST1_SEG2                      0
#define MP1_BASE__INST1_SEG3                      0
#define MP1_BASE__INST1_SEG4                      0

#define MP1_BASE__INST2_SEG0                      0
#define MP1_BASE__INST2_SEG1                      0
#define MP1_BASE__INST2_SEG2                      0
#define MP1_BASE__INST2_SEG3                      0
#define MP1_BASE__INST2_SEG4                      0

#define MP1_BASE__INST3_SEG0                      0
#define MP1_BASE__INST3_SEG1                      0
#define MP1_BASE__INST3_SEG2                      0
#define MP1_BASE__INST3_SEG3                      0
#define MP1_BASE__INST3_SEG4                      0

#define MP1_BASE__INST4_SEG0                      0
#define MP1_BASE__INST4_SEG1                      0
#define MP1_BASE__INST4_SEG2                      0
#define MP1_BASE__INST4_SEG3                      0
#define MP1_BASE__INST4_SEG4                      0

#define MP2_BASE__INST0_SEG0                      0x00016400
#define MP2_BASE__INST0_SEG1                      0
#define MP2_BASE__INST0_SEG2                      0
#define MP2_BASE__INST0_SEG3                      0
#define MP2_BASE__INST0_SEG4                      0

#define MP2_BASE__INST1_SEG0                      0
#define MP2_BASE__INST1_SEG1                      0
#define MP2_BASE__INST1_SEG2                      0
#define MP2_BASE__INST1_SEG3                      0
#define MP2_BASE__INST1_SEG4                      0

#define MP2_BASE__INST2_SEG0                      0
#define MP2_BASE__INST2_SEG1                      0
#define MP2_BASE__INST2_SEG2                      0
#define MP2_BASE__INST2_SEG3                      0
#define MP2_BASE__INST2_SEG4                      0

#define MP2_BASE__INST3_SEG0                      0
#define MP2_BASE__INST3_SEG1                      0
#define MP2_BASE__INST3_SEG2                      0
#define MP2_BASE__INST3_SEG3                      0
#define MP2_BASE__INST3_SEG4                      0

#define MP2_BASE__INST4_SEG0                      0
#define MP2_BASE__INST4_SEG1                      0
#define MP2_BASE__INST4_SEG2                      0
#define MP2_BASE__INST4_SEG3                      0
#define MP2_BASE__INST4_SEG4                      0

#define DF_BASE__INST0_SEG0                       0x00007000
#define DF_BASE__INST0_SEG1                       0
#define DF_BASE__INST0_SEG2                       0
#define DF_BASE__INST0_SEG3                       0
#define DF_BASE__INST0_SEG4                       0

#define DF_BASE__INST1_SEG0                       0
#define DF_BASE__INST1_SEG1                       0
#define DF_BASE__INST1_SEG2                       0
#define DF_BASE__INST1_SEG3                       0
#define DF_BASE__INST1_SEG4                       0

#define DF_BASE__INST2_SEG0                       0
#define DF_BASE__INST2_SEG1                       0
#define DF_BASE__INST2_SEG2                       0
#define DF_BASE__INST2_SEG3                       0
#define DF_BASE__INST2_SEG4                       0

#define DF_BASE__INST3_SEG0                       0
#define DF_BASE__INST3_SEG1                       0
#define DF_BASE__INST3_SEG2                       0
#define DF_BASE__INST3_SEG3                       0
#define DF_BASE__INST3_SEG4                       0

#define DF_BASE__INST4_SEG0                       0
#define DF_BASE__INST4_SEG1                       0
#define DF_BASE__INST4_SEG2                       0
#define DF_BASE__INST4_SEG3                       0
#define DF_BASE__INST4_SEG4                       0

#define UVD_BASE__INST0_SEG0                      0x00007800
#define UVD_BASE__INST0_SEG1                      0x00007E00
#define UVD_BASE__INST0_SEG2                      0
#define UVD_BASE__INST0_SEG3                      0
#define UVD_BASE__INST0_SEG4                      0

#define UVD_BASE__INST1_SEG0                      0
#define UVD_BASE__INST1_SEG1                      0
#define UVD_BASE__INST1_SEG2                      0
#define UVD_BASE__INST1_SEG3                      0
#define UVD_BASE__INST1_SEG4                      0

#define UVD_BASE__INST2_SEG0                      0
#define UVD_BASE__INST2_SEG1                      0
#define UVD_BASE__INST2_SEG2                      0
#define UVD_BASE__INST2_SEG3                      0
#define UVD_BASE__INST2_SEG4                      0

#define UVD_BASE__INST3_SEG0                      0
#define UVD_BASE__INST3_SEG1                      0
#define UVD_BASE__INST3_SEG2                      0
#define UVD_BASE__INST3_SEG3                      0
#define UVD_BASE__INST3_SEG4                      0

#define UVD_BASE__INST4_SEG0                      0
#define UVD_BASE__INST4_SEG1                      0
#define UVD_BASE__INST4_SEG2                      0
#define UVD_BASE__INST4_SEG3                      0
#define UVD_BASE__INST4_SEG4                      0

#define VCN_BASE__INST0_SEG0                      0x00007800
#define VCN_BASE__INST0_SEG1                      0x00007E00
#define VCN_BASE__INST0_SEG2                      0
#define VCN_BASE__INST0_SEG3                      0
#define VCN_BASE__INST0_SEG4                      0

#define VCN_BASE__INST1_SEG0                      0
#define VCN_BASE__INST1_SEG1                      0
#define VCN_BASE__INST1_SEG2                      0
#define VCN_BASE__INST1_SEG3                      0
#define VCN_BASE__INST1_SEG4                      0

#define VCN_BASE__INST2_SEG0                      0
#define VCN_BASE__INST2_SEG1                      0
#define VCN_BASE__INST2_SEG2                      0
#define VCN_BASE__INST2_SEG3                      0
#define VCN_BASE__INST2_SEG4                      0

#define VCN_BASE__INST3_SEG0                      0
#define VCN_BASE__INST3_SEG1                      0
#define VCN_BASE__INST3_SEG2                      0
#define VCN_BASE__INST3_SEG3                      0
#define VCN_BASE__INST3_SEG4                      0

#define VCN_BASE__INST4_SEG0                      0
#define VCN_BASE__INST4_SEG1                      0
#define VCN_BASE__INST4_SEG2                      0
#define VCN_BASE__INST4_SEG3                      0
#define VCN_BASE__INST4_SEG4                      0

#define DBGU_BASE__INST0_SEG0                     0x00000180
#define DBGU_BASE__INST0_SEG1                     0x000001A0
#define DBGU_BASE__INST0_SEG2                     0
#define DBGU_BASE__INST0_SEG3                     0
#define DBGU_BASE__INST0_SEG4                     0

#define DBGU_BASE__INST1_SEG0                     0
#define DBGU_BASE__INST1_SEG1                     0
#define DBGU_BASE__INST1_SEG2                     0
#define DBGU_BASE__INST1_SEG3                     0
#define DBGU_BASE__INST1_SEG4                     0

#define DBGU_BASE__INST2_SEG0                     0
#define DBGU_BASE__INST2_SEG1                     0
#define DBGU_BASE__INST2_SEG2                     0
#define DBGU_BASE__INST2_SEG3                     0
#define DBGU_BASE__INST2_SEG4                     0

#define DBGU_BASE__INST3_SEG0                     0
#define DBGU_BASE__INST3_SEG1                     0
#define DBGU_BASE__INST3_SEG2                     0
#define DBGU_BASE__INST3_SEG3                     0
#define DBGU_BASE__INST3_SEG4                     0

#define DBGU_BASE__INST4_SEG0                     0
#define DBGU_BASE__INST4_SEG1                     0
#define DBGU_BASE__INST4_SEG2                     0
#define DBGU_BASE__INST4_SEG3                     0
#define DBGU_BASE__INST4_SEG4                     0

#define DBGU_NBIO_BASE__INST0_SEG0                0x000001C0
#define DBGU_NBIO_BASE__INST0_SEG1                0
#define DBGU_NBIO_BASE__INST0_SEG2                0
#define DBGU_NBIO_BASE__INST0_SEG3                0
#define DBGU_NBIO_BASE__INST0_SEG4                0

#define DBGU_NBIO_BASE__INST1_SEG0                0
#define DBGU_NBIO_BASE__INST1_SEG1                0
#define DBGU_NBIO_BASE__INST1_SEG2                0
#define DBGU_NBIO_BASE__INST1_SEG3                0
#define DBGU_NBIO_BASE__INST1_SEG4                0

#define DBGU_NBIO_BASE__INST2_SEG0                0
#define DBGU_NBIO_BASE__INST2_SEG1                0
#define DBGU_NBIO_BASE__INST2_SEG2                0
#define DBGU_NBIO_BASE__INST2_SEG3                0
#define DBGU_NBIO_BASE__INST2_SEG4                0

#define DBGU_NBIO_BASE__INST3_SEG0                0
#define DBGU_NBIO_BASE__INST3_SEG1                0
#define DBGU_NBIO_BASE__INST3_SEG2                0
#define DBGU_NBIO_BASE__INST3_SEG3                0
#define DBGU_NBIO_BASE__INST3_SEG4                0

#define DBGU_NBIO_BASE__INST4_SEG0                0
#define DBGU_NBIO_BASE__INST4_SEG1                0
#define DBGU_NBIO_BASE__INST4_SEG2                0
#define DBGU_NBIO_BASE__INST4_SEG3                0
#define DBGU_NBIO_BASE__INST4_SEG4                0

#define DBGU_IO_BASE__INST0_SEG0                  0x000001E0
#define DBGU_IO_BASE__INST0_SEG1                  0
#define DBGU_IO_BASE__INST0_SEG2                  0
#define DBGU_IO_BASE__INST0_SEG3                  0
#define DBGU_IO_BASE__INST0_SEG4                  0

#define DBGU_IO_BASE__INST1_SEG0                  0
#define DBGU_IO_BASE__INST1_SEG1                  0
#define DBGU_IO_BASE__INST1_SEG2                  0
#define DBGU_IO_BASE__INST1_SEG3                  0
#define DBGU_IO_BASE__INST1_SEG4                  0

#define DBGU_IO_BASE__INST2_SEG0                  0
#define DBGU_IO_BASE__INST2_SEG1                  0
#define DBGU_IO_BASE__INST2_SEG2                  0
#define DBGU_IO_BASE__INST2_SEG3                  0
#define DBGU_IO_BASE__INST2_SEG4                  0

#define DBGU_IO_BASE__INST3_SEG0                  0
#define DBGU_IO_BASE__INST3_SEG1                  0
#define DBGU_IO_BASE__INST3_SEG2                  0
#define DBGU_IO_BASE__INST3_SEG3                  0
#define DBGU_IO_BASE__INST3_SEG4                  0

#define DBGU_IO_BASE__INST4_SEG0                  0
#define DBGU_IO_BASE__INST4_SEG1                  0
#define DBGU_IO_BASE__INST4_SEG2                  0
#define DBGU_IO_BASE__INST4_SEG3                  0
#define DBGU_IO_BASE__INST4_SEG4                  0

#define DFX_DAP_BASE__INST0_SEG0                  0x000005A0
#define DFX_DAP_BASE__INST0_SEG1                  0
#define DFX_DAP_BASE__INST0_SEG2                  0
#define DFX_DAP_BASE__INST0_SEG3                  0
#define DFX_DAP_BASE__INST0_SEG4                  0

#define DFX_DAP_BASE__INST1_SEG0                  0
#define DFX_DAP_BASE__INST1_SEG1                  0
#define DFX_DAP_BASE__INST1_SEG2                  0
#define DFX_DAP_BASE__INST1_SEG3                  0
#define DFX_DAP_BASE__INST1_SEG4                  0

#define DFX_DAP_BASE__INST2_SEG0                  0
#define DFX_DAP_BASE__INST2_SEG1                  0
#define DFX_DAP_BASE__INST2_SEG2                  0
#define DFX_DAP_BASE__INST2_SEG3                  0
#define DFX_DAP_BASE__INST2_SEG4                  0

#define DFX_DAP_BASE__INST3_SEG0                  0
#define DFX_DAP_BASE__INST3_SEG1                  0
#define DFX_DAP_BASE__INST3_SEG2                  0
#define DFX_DAP_BASE__INST3_SEG3                  0
#define DFX_DAP_BASE__INST3_SEG4                  0

#define DFX_DAP_BASE__INST4_SEG0                  0
#define DFX_DAP_BASE__INST4_SEG1                  0
#define DFX_DAP_BASE__INST4_SEG2                  0
#define DFX_DAP_BASE__INST4_SEG3                  0
#define DFX_DAP_BASE__INST4_SEG4                  0

#define DFX_BASE__INST0_SEG0                      0x00000580
#define DFX_BASE__INST0_SEG1                      0
#define DFX_BASE__INST0_SEG2                      0
#define DFX_BASE__INST0_SEG3                      0
#define DFX_BASE__INST0_SEG4                      0

#define DFX_BASE__INST1_SEG0                      0
#define DFX_BASE__INST1_SEG1                      0
#define DFX_BASE__INST1_SEG2                      0
#define DFX_BASE__INST1_SEG3                      0
#define DFX_BASE__INST1_SEG4                      0

#define DFX_BASE__INST2_SEG0                      0
#define DFX_BASE__INST2_SEG1                      0
#define DFX_BASE__INST2_SEG2                      0
#define DFX_BASE__INST2_SEG3                      0
#define DFX_BASE__INST2_SEG4                      0

#define DFX_BASE__INST3_SEG0                      0
#define DFX_BASE__INST3_SEG1                      0
#define DFX_BASE__INST3_SEG2                      0
#define DFX_BASE__INST3_SEG3                      0
#define DFX_BASE__INST3_SEG4                      0

#define DFX_BASE__INST4_SEG0                      0
#define DFX_BASE__INST4_SEG1                      0
#define DFX_BASE__INST4_SEG2                      0
#define DFX_BASE__INST4_SEG3                      0
#define DFX_BASE__INST4_SEG4                      0

#define ISP_BASE__INST0_SEG0                      0x00018000
#define ISP_BASE__INST0_SEG1                      0
#define ISP_BASE__INST0_SEG2                      0
#define ISP_BASE__INST0_SEG3                      0
#define ISP_BASE__INST0_SEG4                      0

#define ISP_BASE__INST1_SEG0                      0
#define ISP_BASE__INST1_SEG1                      0
#define ISP_BASE__INST1_SEG2                      0
#define ISP_BASE__INST1_SEG3                      0
#define ISP_BASE__INST1_SEG4                      0

#define ISP_BASE__INST2_SEG0                      0
#define ISP_BASE__INST2_SEG1                      0
#define ISP_BASE__INST2_SEG2                      0
#define ISP_BASE__INST2_SEG3                      0
#define ISP_BASE__INST2_SEG4                      0

#define ISP_BASE__INST3_SEG0                      0
#define ISP_BASE__INST3_SEG1                      0
#define ISP_BASE__INST3_SEG2                      0
#define ISP_BASE__INST3_SEG3                      0
#define ISP_BASE__INST3_SEG4                      0

#define ISP_BASE__INST4_SEG0                      0
#define ISP_BASE__INST4_SEG1                      0
#define ISP_BASE__INST4_SEG2                      0
#define ISP_BASE__INST4_SEG3                      0
#define ISP_BASE__INST4_SEG4                      0

#define SYSTEMHUB_BASE__INST0_SEG0                0x00000EA0
#define SYSTEMHUB_BASE__INST0_SEG1                0
#define SYSTEMHUB_BASE__INST0_SEG2                0
#define SYSTEMHUB_BASE__INST0_SEG3                0
#define SYSTEMHUB_BASE__INST0_SEG4                0

#define SYSTEMHUB_BASE__INST1_SEG0                0
#define SYSTEMHUB_BASE__INST1_SEG1                0
#define SYSTEMHUB_BASE__INST1_SEG2                0
#define SYSTEMHUB_BASE__INST1_SEG3                0
#define SYSTEMHUB_BASE__INST1_SEG4                0

#define SYSTEMHUB_BASE__INST2_SEG0                0
#define SYSTEMHUB_BASE__INST2_SEG1                0
#define SYSTEMHUB_BASE__INST2_SEG2                0
#define SYSTEMHUB_BASE__INST2_SEG3                0
#define SYSTEMHUB_BASE__INST2_SEG4                0

#define SYSTEMHUB_BASE__INST3_SEG0                0
#define SYSTEMHUB_BASE__INST3_SEG1                0
#define SYSTEMHUB_BASE__INST3_SEG2                0
#define SYSTEMHUB_BASE__INST3_SEG3                0
#define SYSTEMHUB_BASE__INST3_SEG4                0

#define SYSTEMHUB_BASE__INST4_SEG0                0
#define SYSTEMHUB_BASE__INST4_SEG1                0
#define SYSTEMHUB_BASE__INST4_SEG2                0
#define SYSTEMHUB_BASE__INST4_SEG3                0
#define SYSTEMHUB_BASE__INST4_SEG4                0

#define L2IMU_BASE__INST0_SEG0                    0x00007DC0
#define L2IMU_BASE__INST0_SEG1                    0
#define L2IMU_BASE__INST0_SEG2                    0
#define L2IMU_BASE__INST0_SEG3                    0
#define L2IMU_BASE__INST0_SEG4                    0

#define L2IMU_BASE__INST1_SEG0                    0
#define L2IMU_BASE__INST1_SEG1                    0
#define L2IMU_BASE__INST1_SEG2                    0
#define L2IMU_BASE__INST1_SEG3                    0
#define L2IMU_BASE__INST1_SEG4                    0

#define L2IMU_BASE__INST2_SEG0                    0
#define L2IMU_BASE__INST2_SEG1                    0
#define L2IMU_BASE__INST2_SEG2                    0
#define L2IMU_BASE__INST2_SEG3                    0
#define L2IMU_BASE__INST2_SEG4                    0

#define L2IMU_BASE__INST3_SEG0                    0
#define L2IMU_BASE__INST3_SEG1                    0
#define L2IMU_BASE__INST3_SEG2                    0
#define L2IMU_BASE__INST3_SEG3                    0
#define L2IMU_BASE__INST3_SEG4                    0

#define L2IMU_BASE__INST4_SEG0                    0
#define L2IMU_BASE__INST4_SEG1                    0
#define L2IMU_BASE__INST4_SEG2                    0
#define L2IMU_BASE__INST4_SEG3                    0
#define L2IMU_BASE__INST4_SEG4                    0

#define IOHC_BASE__INST0_SEG0                     0x00010000
#define IOHC_BASE__INST0_SEG1                     0
#define IOHC_BASE__INST0_SEG2                     0
#define IOHC_BASE__INST0_SEG3                     0
#define IOHC_BASE__INST0_SEG4                     0

#define IOHC_BASE__INST1_SEG0                     0
#define IOHC_BASE__INST1_SEG1                     0
#define IOHC_BASE__INST1_SEG2                     0
#define IOHC_BASE__INST1_SEG3                     0
#define IOHC_BASE__INST1_SEG4                     0

#define IOHC_BASE__INST2_SEG0                     0
#define IOHC_BASE__INST2_SEG1                     0
#define IOHC_BASE__INST2_SEG2                     0
#define IOHC_BASE__INST2_SEG3                     0
#define IOHC_BASE__INST2_SEG4                     0

#define IOHC_BASE__INST3_SEG0                     0
#define IOHC_BASE__INST3_SEG1                     0
#define IOHC_BASE__INST3_SEG2                     0
#define IOHC_BASE__INST3_SEG3                     0
#define IOHC_BASE__INST3_SEG4                     0

#define IOHC_BASE__INST4_SEG0                     0
#define IOHC_BASE__INST4_SEG1                     0
#define IOHC_BASE__INST4_SEG2                     0
#define IOHC_BASE__INST4_SEG3                     0
#define IOHC_BASE__INST4_SEG4                     0

#define ATHUB_BASE__INST0_SEG0                    0x00000C20
#define ATHUB_BASE__INST0_SEG1                    0
#define ATHUB_BASE__INST0_SEG2                    0
#define ATHUB_BASE__INST0_SEG3                    0
#define ATHUB_BASE__INST0_SEG4                    0

#define ATHUB_BASE__INST1_SEG0                    0
#define ATHUB_BASE__INST1_SEG1                    0
#define ATHUB_BASE__INST1_SEG2                    0
#define ATHUB_BASE__INST1_SEG3                    0
#define ATHUB_BASE__INST1_SEG4                    0

#define ATHUB_BASE__INST2_SEG0                    0
#define ATHUB_BASE__INST2_SEG1                    0
#define ATHUB_BASE__INST2_SEG2                    0
#define ATHUB_BASE__INST2_SEG3                    0
#define ATHUB_BASE__INST2_SEG4                    0

#define ATHUB_BASE__INST3_SEG0                    0
#define ATHUB_BASE__INST3_SEG1                    0
#define ATHUB_BASE__INST3_SEG2                    0
#define ATHUB_BASE__INST3_SEG3                    0
#define ATHUB_BASE__INST3_SEG4                    0

#define ATHUB_BASE__INST4_SEG0                    0
#define ATHUB_BASE__INST4_SEG1                    0
#define ATHUB_BASE__INST4_SEG2                    0
#define ATHUB_BASE__INST4_SEG3                    0
#define ATHUB_BASE__INST4_SEG4                    0

#define VCE_BASE__INST0_SEG0                      0x00007E00
#define VCE_BASE__INST0_SEG1                      0x00048800
#define VCE_BASE__INST0_SEG2                      0
#define VCE_BASE__INST0_SEG3                      0
#define VCE_BASE__INST0_SEG4                      0

#define VCE_BASE__INST1_SEG0                      0
#define VCE_BASE__INST1_SEG1                      0
#define VCE_BASE__INST1_SEG2                      0
#define VCE_BASE__INST1_SEG3                      0
#define VCE_BASE__INST1_SEG4                      0

#define VCE_BASE__INST2_SEG0                      0
#define VCE_BASE__INST2_SEG1                      0
#define VCE_BASE__INST2_SEG2                      0
#define VCE_BASE__INST2_SEG3                      0
#define VCE_BASE__INST2_SEG4                      0

#define VCE_BASE__INST3_SEG0                      0
#define VCE_BASE__INST3_SEG1                      0
#define VCE_BASE__INST3_SEG2                      0
#define VCE_BASE__INST3_SEG3                      0
#define VCE_BASE__INST3_SEG4                      0

#define VCE_BASE__INST4_SEG0                      0
#define VCE_BASE__INST4_SEG1                      0
#define VCE_BASE__INST4_SEG2                      0
#define VCE_BASE__INST4_SEG3                      0
#define VCE_BASE__INST4_SEG4                      0

#define GC_BASE__INST0_SEG0                       0x00002000
#define GC_BASE__INST0_SEG1                       0x0000A000
#define GC_BASE__INST0_SEG2                       0
#define GC_BASE__INST0_SEG3                       0
#define GC_BASE__INST0_SEG4                       0

#define GC_BASE__INST1_SEG0                       0
#define GC_BASE__INST1_SEG1                       0
#define GC_BASE__INST1_SEG2                       0
#define GC_BASE__INST1_SEG3                       0
#define GC_BASE__INST1_SEG4                       0

#define GC_BASE__INST2_SEG0                       0
#define GC_BASE__INST2_SEG1                       0
#define GC_BASE__INST2_SEG2                       0
#define GC_BASE__INST2_SEG3                       0
#define GC_BASE__INST2_SEG4                       0

#define GC_BASE__INST3_SEG0                       0
#define GC_BASE__INST3_SEG1                       0
#define GC_BASE__INST3_SEG2                       0
#define GC_BASE__INST3_SEG3                       0
#define GC_BASE__INST3_SEG4                       0

#define GC_BASE__INST4_SEG0                       0
#define GC_BASE__INST4_SEG1                       0
#define GC_BASE__INST4_SEG2                       0
#define GC_BASE__INST4_SEG3                       0
#define GC_BASE__INST4_SEG4                       0

#define MMHUB_BASE__INST0_SEG0                    0x0001A000
#define MMHUB_BASE__INST0_SEG1                    0
#define MMHUB_BASE__INST0_SEG2                    0
#define MMHUB_BASE__INST0_SEG3                    0
#define MMHUB_BASE__INST0_SEG4                    0

#define MMHUB_BASE__INST1_SEG0                    0
#define MMHUB_BASE__INST1_SEG1                    0
#define MMHUB_BASE__INST1_SEG2                    0
#define MMHUB_BASE__INST1_SEG3                    0
#define MMHUB_BASE__INST1_SEG4                    0

#define MMHUB_BASE__INST2_SEG0                    0
#define MMHUB_BASE__INST2_SEG1                    0
#define MMHUB_BASE__INST2_SEG2                    0
#define MMHUB_BASE__INST2_SEG3                    0
#define MMHUB_BASE__INST2_SEG4                    0

#define MMHUB_BASE__INST3_SEG0                    0
#define MMHUB_BASE__INST3_SEG1                    0
#define MMHUB_BASE__INST3_SEG2                    0
#define MMHUB_BASE__INST3_SEG3                    0
#define MMHUB_BASE__INST3_SEG4                    0

#define MMHUB_BASE__INST4_SEG0                    0
#define MMHUB_BASE__INST4_SEG1                    0
#define MMHUB_BASE__INST4_SEG2                    0
#define MMHUB_BASE__INST4_SEG3                    0
#define MMHUB_BASE__INST4_SEG4                    0

#define RSMU_BASE__INST0_SEG0                     0x00012000
#define RSMU_BASE__INST0_SEG1                     0
#define RSMU_BASE__INST0_SEG2                     0
#define RSMU_BASE__INST0_SEG3                     0
#define RSMU_BASE__INST0_SEG4                     0

#define RSMU_BASE__INST1_SEG0                     0
#define RSMU_BASE__INST1_SEG1                     0
#define RSMU_BASE__INST1_SEG2                     0
#define RSMU_BASE__INST1_SEG3                     0
#define RSMU_BASE__INST1_SEG4                     0

#define RSMU_BASE__INST2_SEG0                     0
#define RSMU_BASE__INST2_SEG1                     0
#define RSMU_BASE__INST2_SEG2                     0
#define RSMU_BASE__INST2_SEG3                     0
#define RSMU_BASE__INST2_SEG4                     0

#define RSMU_BASE__INST3_SEG0                     0
#define RSMU_BASE__INST3_SEG1                     0
#define RSMU_BASE__INST3_SEG2                     0
#define RSMU_BASE__INST3_SEG3                     0
#define RSMU_BASE__INST3_SEG4                     0

#define RSMU_BASE__INST4_SEG0                     0
#define RSMU_BASE__INST4_SEG1                     0
#define RSMU_BASE__INST4_SEG2                     0
#define RSMU_BASE__INST4_SEG3                     0
#define RSMU_BASE__INST4_SEG4                     0

#define HDP_BASE__INST0_SEG0                      0x00000F20
#define HDP_BASE__INST0_SEG1                      0
#define HDP_BASE__INST0_SEG2                      0
#define HDP_BASE__INST0_SEG3                      0
#define HDP_BASE__INST0_SEG4                      0

#define HDP_BASE__INST1_SEG0                      0
#define HDP_BASE__INST1_SEG1                      0
#define HDP_BASE__INST1_SEG2                      0
#define HDP_BASE__INST1_SEG3                      0
#define HDP_BASE__INST1_SEG4                      0

#define HDP_BASE__INST2_SEG0                      0
#define HDP_BASE__INST2_SEG1                      0
#define HDP_BASE__INST2_SEG2                      0
#define HDP_BASE__INST2_SEG3                      0
#define HDP_BASE__INST2_SEG4                      0

#define HDP_BASE__INST3_SEG0                      0
#define HDP_BASE__INST3_SEG1                      0
#define HDP_BASE__INST3_SEG2                      0
#define HDP_BASE__INST3_SEG3                      0
#define HDP_BASE__INST3_SEG4                      0

#define HDP_BASE__INST4_SEG0                      0
#define HDP_BASE__INST4_SEG1                      0
#define HDP_BASE__INST4_SEG2                      0
#define HDP_BASE__INST4_SEG3                      0
#define HDP_BASE__INST4_SEG4                      0

#define OSSSYS_BASE__INST0_SEG0                   0x000010A0
#define OSSSYS_BASE__INST0_SEG1                   0
#define OSSSYS_BASE__INST0_SEG2                   0
#define OSSSYS_BASE__INST0_SEG3                   0
#define OSSSYS_BASE__INST0_SEG4                   0

#define OSSSYS_BASE__INST1_SEG0                   0
#define OSSSYS_BASE__INST1_SEG1                   0
#define OSSSYS_BASE__INST1_SEG2                   0
#define OSSSYS_BASE__INST1_SEG3                   0
#define OSSSYS_BASE__INST1_SEG4                   0

#define OSSSYS_BASE__INST2_SEG0                   0
#define OSSSYS_BASE__INST2_SEG1                   0
#define OSSSYS_BASE__INST2_SEG2                   0
#define OSSSYS_BASE__INST2_SEG3                   0
#define OSSSYS_BASE__INST2_SEG4                   0

#define OSSSYS_BASE__INST3_SEG0                   0
#define OSSSYS_BASE__INST3_SEG1                   0
#define OSSSYS_BASE__INST3_SEG2                   0
#define OSSSYS_BASE__INST3_SEG3                   0
#define OSSSYS_BASE__INST3_SEG4                   0

#define OSSSYS_BASE__INST4_SEG0                   0
#define OSSSYS_BASE__INST4_SEG1                   0
#define OSSSYS_BASE__INST4_SEG2                   0
#define OSSSYS_BASE__INST4_SEG3                   0
#define OSSSYS_BASE__INST4_SEG4                   0

#define SDMA0_BASE__INST0_SEG0                    0x00001260
#define SDMA0_BASE__INST0_SEG1                    0
#define SDMA0_BASE__INST0_SEG2                    0
#define SDMA0_BASE__INST0_SEG3                    0
#define SDMA0_BASE__INST0_SEG4                    0

#define SDMA0_BASE__INST1_SEG0                    0
#define SDMA0_BASE__INST1_SEG1                    0
#define SDMA0_BASE__INST1_SEG2                    0
#define SDMA0_BASE__INST1_SEG3                    0
#define SDMA0_BASE__INST1_SEG4                    0

#define SDMA0_BASE__INST2_SEG0                    0
#define SDMA0_BASE__INST2_SEG1                    0
#define SDMA0_BASE__INST2_SEG2                    0
#define SDMA0_BASE__INST2_SEG3                    0
#define SDMA0_BASE__INST2_SEG4                    0

#define SDMA0_BASE__INST3_SEG0                    0
#define SDMA0_BASE__INST3_SEG1                    0
#define SDMA0_BASE__INST3_SEG2                    0
#define SDMA0_BASE__INST3_SEG3                    0
#define SDMA0_BASE__INST3_SEG4                    0

#define SDMA0_BASE__INST4_SEG0                    0
#define SDMA0_BASE__INST4_SEG1                    0
#define SDMA0_BASE__INST4_SEG2                    0
#define SDMA0_BASE__INST4_SEG3                    0
#define SDMA0_BASE__INST4_SEG4                    0

#define SDMA1_BASE__INST0_SEG0                    0x00001460
#define SDMA1_BASE__INST0_SEG1                    0
#define SDMA1_BASE__INST0_SEG2                    0
#define SDMA1_BASE__INST0_SEG3                    0
#define SDMA1_BASE__INST0_SEG4                    0

#define SDMA1_BASE__INST1_SEG0                    0
#define SDMA1_BASE__INST1_SEG1                    0
#define SDMA1_BASE__INST1_SEG2                    0
#define SDMA1_BASE__INST1_SEG3                    0
#define SDMA1_BASE__INST1_SEG4                    0

#define SDMA1_BASE__INST2_SEG0                    0
#define SDMA1_BASE__INST2_SEG1                    0
#define SDMA1_BASE__INST2_SEG2                    0
#define SDMA1_BASE__INST2_SEG3                    0
#define SDMA1_BASE__INST2_SEG4                    0

#define SDMA1_BASE__INST3_SEG0                    0
#define SDMA1_BASE__INST3_SEG1                    0
#define SDMA1_BASE__INST3_SEG2                    0
#define SDMA1_BASE__INST3_SEG3                    0
#define SDMA1_BASE__INST3_SEG4                    0

#define SDMA1_BASE__INST4_SEG0                    0
#define SDMA1_BASE__INST4_SEG1                    0
#define SDMA1_BASE__INST4_SEG2                    0
#define SDMA1_BASE__INST4_SEG3                    0
#define SDMA1_BASE__INST4_SEG4                    0

#define XDMA_BASE__INST0_SEG0                     0x00003400
#define XDMA_BASE__INST0_SEG1                     0
#define XDMA_BASE__INST0_SEG2                     0
#define XDMA_BASE__INST0_SEG3                     0
#define XDMA_BASE__INST0_SEG4                     0

#define XDMA_BASE__INST1_SEG0                     0
#define XDMA_BASE__INST1_SEG1                     0
#define XDMA_BASE__INST1_SEG2                     0
#define XDMA_BASE__INST1_SEG3                     0
#define XDMA_BASE__INST1_SEG4                     0

#define XDMA_BASE__INST2_SEG0                     0
#define XDMA_BASE__INST2_SEG1                     0
#define XDMA_BASE__INST2_SEG2                     0
#define XDMA_BASE__INST2_SEG3                     0
#define XDMA_BASE__INST2_SEG4                     0

#define XDMA_BASE__INST3_SEG0                     0
#define XDMA_BASE__INST3_SEG1                     0
#define XDMA_BASE__INST3_SEG2                     0
#define XDMA_BASE__INST3_SEG3                     0
#define XDMA_BASE__INST3_SEG4                     0

#define XDMA_BASE__INST4_SEG0                     0
#define XDMA_BASE__INST4_SEG1                     0
#define XDMA_BASE__INST4_SEG2                     0
#define XDMA_BASE__INST4_SEG3                     0
#define XDMA_BASE__INST4_SEG4                     0

#define UMC_BASE__INST0_SEG0                      0x00014000
#define UMC_BASE__INST0_SEG1                      0
#define UMC_BASE__INST0_SEG2                      0
#define UMC_BASE__INST0_SEG3                      0
#define UMC_BASE__INST0_SEG4                      0

#define UMC_BASE__INST1_SEG0                      0
#define UMC_BASE__INST1_SEG1                      0
#define UMC_BASE__INST1_SEG2                      0
#define UMC_BASE__INST1_SEG3                      0
#define UMC_BASE__INST1_SEG4                      0

#define UMC_BASE__INST2_SEG0                      0
#define UMC_BASE__INST2_SEG1                      0
#define UMC_BASE__INST2_SEG2                      0
#define UMC_BASE__INST2_SEG3                      0
#define UMC_BASE__INST2_SEG4                      0

#define UMC_BASE__INST3_SEG0                      0
#define UMC_BASE__INST3_SEG1                      0
#define UMC_BASE__INST3_SEG2                      0
#define UMC_BASE__INST3_SEG3                      0
#define UMC_BASE__INST3_SEG4                      0

#define UMC_BASE__INST4_SEG0                      0
#define UMC_BASE__INST4_SEG1                      0
#define UMC_BASE__INST4_SEG2                      0
#define UMC_BASE__INST4_SEG3                      0
#define UMC_BASE__INST4_SEG4                      0

#define THM_BASE__INST0_SEG0                      0x00016600
#define THM_BASE__INST0_SEG1                      0
#define THM_BASE__INST0_SEG2                      0
#define THM_BASE__INST0_SEG3                      0
#define THM_BASE__INST0_SEG4                      0

#define THM_BASE__INST1_SEG0                      0
#define THM_BASE__INST1_SEG1                      0
#define THM_BASE__INST1_SEG2                      0
#define THM_BASE__INST1_SEG3                      0
#define THM_BASE__INST1_SEG4                      0

#define THM_BASE__INST2_SEG0                      0
#define THM_BASE__INST2_SEG1                      0
#define THM_BASE__INST2_SEG2                      0
#define THM_BASE__INST2_SEG3                      0
#define THM_BASE__INST2_SEG4                      0

#define THM_BASE__INST3_SEG0                      0
#define THM_BASE__INST3_SEG1                      0
#define THM_BASE__INST3_SEG2                      0
#define THM_BASE__INST3_SEG3                      0
#define THM_BASE__INST3_SEG4                      0

#define THM_BASE__INST4_SEG0                      0
#define THM_BASE__INST4_SEG1                      0
#define THM_BASE__INST4_SEG2                      0
#define THM_BASE__INST4_SEG3                      0
#define THM_BASE__INST4_SEG4                      0

#define SMUIO_BASE__INST0_SEG0                    0x00016800
#define SMUIO_BASE__INST0_SEG1                    0
#define SMUIO_BASE__INST0_SEG2                    0
#define SMUIO_BASE__INST0_SEG3                    0
#define SMUIO_BASE__INST0_SEG4                    0

#define SMUIO_BASE__INST1_SEG0                    0
#define SMUIO_BASE__INST1_SEG1                    0
#define SMUIO_BASE__INST1_SEG2                    0
#define SMUIO_BASE__INST1_SEG3                    0
#define SMUIO_BASE__INST1_SEG4                    0

#define SMUIO_BASE__INST2_SEG0                    0
#define SMUIO_BASE__INST2_SEG1                    0
#define SMUIO_BASE__INST2_SEG2                    0
#define SMUIO_BASE__INST2_SEG3                    0
#define SMUIO_BASE__INST2_SEG4                    0

#define SMUIO_BASE__INST3_SEG0                    0
#define SMUIO_BASE__INST3_SEG1                    0
#define SMUIO_BASE__INST3_SEG2                    0
#define SMUIO_BASE__INST3_SEG3                    0
#define SMUIO_BASE__INST3_SEG4                    0

#define SMUIO_BASE__INST4_SEG0                    0
#define SMUIO_BASE__INST4_SEG1                    0
#define SMUIO_BASE__INST4_SEG2                    0
#define SMUIO_BASE__INST4_SEG3                    0
#define SMUIO_BASE__INST4_SEG4                    0

#define PWR_BASE__INST0_SEG0                      0x00016A00
#define PWR_BASE__INST0_SEG1                      0
#define PWR_BASE__INST0_SEG2                      0
#define PWR_BASE__INST0_SEG3                      0
#define PWR_BASE__INST0_SEG4                      0

#define PWR_BASE__INST1_SEG0                      0
#define PWR_BASE__INST1_SEG1                      0
#define PWR_BASE__INST1_SEG2                      0
#define PWR_BASE__INST1_SEG3                      0
#define PWR_BASE__INST1_SEG4                      0

#define PWR_BASE__INST2_SEG0                      0
#define PWR_BASE__INST2_SEG1                      0
#define PWR_BASE__INST2_SEG2                      0
#define PWR_BASE__INST2_SEG3                      0
#define PWR_BASE__INST2_SEG4                      0

#define PWR_BASE__INST3_SEG0                      0
#define PWR_BASE__INST3_SEG1                      0
#define PWR_BASE__INST3_SEG2                      0
#define PWR_BASE__INST3_SEG3                      0
#define PWR_BASE__INST3_SEG4                      0

#define PWR_BASE__INST4_SEG0                      0
#define PWR_BASE__INST4_SEG1                      0
#define PWR_BASE__INST4_SEG2                      0
#define PWR_BASE__INST4_SEG3                      0
#define PWR_BASE__INST4_SEG4                      0

#define CLK_BASE__INST0_SEG0                      0x00016C00
#define CLK_BASE__INST0_SEG1                      0
#define CLK_BASE__INST0_SEG2                      0
#define CLK_BASE__INST0_SEG3                      0
#define CLK_BASE__INST0_SEG4                      0

#define CLK_BASE__INST1_SEG0                      0x00016E00
#define CLK_BASE__INST1_SEG1                      0
#define CLK_BASE__INST1_SEG2                      0
#define CLK_BASE__INST1_SEG3                      0
#define CLK_BASE__INST1_SEG4                      0

#define CLK_BASE__INST2_SEG0                      0x00017000
#define CLK_BASE__INST2_SEG1                      0
#define CLK_BASE__INST2_SEG2                      0
#define CLK_BASE__INST2_SEG3                      0
#define CLK_BASE__INST2_SEG4                      0

#define CLK_BASE__INST3_SEG0                      0x00017200
#define CLK_BASE__INST3_SEG1                      0
#define CLK_BASE__INST3_SEG2                      0
#define CLK_BASE__INST3_SEG3                      0
#define CLK_BASE__INST3_SEG4                      0

#define CLK_BASE__INST4_SEG0                      0x00017E00
#define CLK_BASE__INST4_SEG1                      0
#define CLK_BASE__INST4_SEG2                      0
#define CLK_BASE__INST4_SEG3                      0
#define CLK_BASE__INST4_SEG4                      0

#define FUSE_BASE__INST0_SEG0                     0x00017400
#define FUSE_BASE__INST0_SEG1                     0
#define FUSE_BASE__INST0_SEG2                     0
#define FUSE_BASE__INST0_SEG3                     0
#define FUSE_BASE__INST0_SEG4                     0

#define FUSE_BASE__INST1_SEG0                     0
#define FUSE_BASE__INST1_SEG1                     0
#define FUSE_BASE__INST1_SEG2                     0
#define FUSE_BASE__INST1_SEG3                     0
#define FUSE_BASE__INST1_SEG4                     0

#define FUSE_BASE__INST2_SEG0                     0
#define FUSE_BASE__INST2_SEG1                     0
#define FUSE_BASE__INST2_SEG2                     0
#define FUSE_BASE__INST2_SEG3                     0
#define FUSE_BASE__INST2_SEG4                     0

#define FUSE_BASE__INST3_SEG0                     0
#define FUSE_BASE__INST3_SEG1                     0
#define FUSE_BASE__INST3_SEG2                     0
#define FUSE_BASE__INST3_SEG3                     0
#define FUSE_BASE__INST3_SEG4                     0

#define FUSE_BASE__INST4_SEG0                     0
#define FUSE_BASE__INST4_SEG1                     0
#define FUSE_BASE__INST4_SEG2                     0
#define FUSE_BASE__INST4_SEG3                     0
#define FUSE_BASE__INST4_SEG4                     0
#endif

/*
 * Copyright (C) 2017  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#if !defined (_vega10_ENUM_HEADER)
#define _vega10_ENUM_HEADER

#ifndef _DRIVER_BUILD
#ifndef GL_ZERO
#define GL__ZERO                      BLEND_ZERO
#define GL__ONE                       BLEND_ONE
#define GL__SRC_COLOR                 BLEND_SRC_COLOR
#define GL__ONE_MINUS_SRC_COLOR       BLEND_ONE_MINUS_SRC_COLOR
#define GL__DST_COLOR                 BLEND_DST_COLOR
#define GL__ONE_MINUS_DST_COLOR       BLEND_ONE_MINUS_DST_COLOR
#define GL__SRC_ALPHA                 BLEND_SRC_ALPHA
#define GL__ONE_MINUS_SRC_ALPHA       BLEND_ONE_MINUS_SRC_ALPHA
#define GL__DST_ALPHA                 BLEND_DST_ALPHA
#define GL__ONE_MINUS_DST_ALPHA       BLEND_ONE_MINUS_DST_ALPHA
#define GL__SRC_ALPHA_SATURATE        BLEND_SRC_ALPHA_SATURATE
#define GL__CONSTANT_COLOR            BLEND_CONSTANT_COLOR
#define GL__ONE_MINUS_CONSTANT_COLOR  BLEND_ONE_MINUS_CONSTANT_COLOR
#define GL__CONSTANT_ALPHA            BLEND_CONSTANT_ALPHA
#define GL__ONE_MINUS_CONSTANT_ALPHA  BLEND_ONE_MINUS_CONSTANT_ALPHA
#endif
#endif

/*******************************************************
 * GDS DATA_TYPE Enums
 *******************************************************/

#ifndef ENUMS_GDS_PERFCOUNT_SELECT_H
#define ENUMS_GDS_PERFCOUNT_SELECT_H
typedef enum GDS_PERFCOUNT_SELECT {
 GDS_PERF_SEL_DS_ADDR_CONFL = 0,
 GDS_PERF_SEL_DS_BANK_CONFL = 1,
 GDS_PERF_SEL_WBUF_FLUSH = 2,
 GDS_PERF_SEL_WR_COMP = 3,
 GDS_PERF_SEL_WBUF_WR = 4,
 GDS_PERF_SEL_RBUF_HIT = 5,
 GDS_PERF_SEL_RBUF_MISS = 6,
 GDS_PERF_SEL_SE0_SH0_NORET = 7,
 GDS_PERF_SEL_SE0_SH0_RET = 8,
 GDS_PERF_SEL_SE0_SH0_ORD_CNT = 9,
 GDS_PERF_SEL_SE0_SH0_2COMP_REQ = 10,
 GDS_PERF_SEL_SE0_SH0_ORD_WAVE_VALID = 11,
 GDS_PERF_SEL_SE0_SH0_GDS_DATA_VALID = 12,
 GDS_PERF_SEL_SE0_SH0_GDS_STALL_BY_ORD = 13,
 GDS_PERF_SEL_SE0_SH0_GDS_WR_OP = 14,
 GDS_PERF_SEL_SE0_SH0_GDS_RD_OP = 15,
 GDS_PERF_SEL_SE0_SH0_GDS_ATOM_OP = 16,
 GDS_PERF_SEL_SE0_SH0_GDS_REL_OP = 17,
 GDS_PERF_SEL_SE0_SH0_GDS_CMPXCH_OP = 18,
 GDS_PERF_SEL_SE0_SH0_GDS_BYTE_OP = 19,
 GDS_PERF_SEL_SE0_SH0_GDS_SHORT_OP = 20,
 GDS_PERF_SEL_SE0_SH1_NORET = 21,
 GDS_PERF_SEL_SE0_SH1_RET = 22,
 GDS_PERF_SEL_SE0_SH1_ORD_CNT = 23,
 GDS_PERF_SEL_SE0_SH1_2COMP_REQ = 24,
 GDS_PERF_SEL_SE0_SH1_ORD_WAVE_VALID = 25,
 GDS_PERF_SEL_SE0_SH1_GDS_DATA_VALID = 26,
 GDS_PERF_SEL_SE0_SH1_GDS_STALL_BY_ORD = 27,
 GDS_PERF_SEL_SE0_SH1_GDS_WR_OP = 28,
 GDS_PERF_SEL_SE0_SH1_GDS_RD_OP = 29,
 GDS_PERF_SEL_SE0_SH1_GDS_ATOM_OP = 30,
 GDS_PERF_SEL_SE0_SH1_GDS_REL_OP = 31,
 GDS_PERF_SEL_SE0_SH1_GDS_CMPXCH_OP = 32,
 GDS_PERF_SEL_SE0_SH1_GDS_BYTE_OP = 33,
 GDS_PERF_SEL_SE0_SH1_GDS_SHORT_OP = 34,
 GDS_PERF_SEL_SE1_SH0_NORET = 35,
 GDS_PERF_SEL_SE1_SH0_RET = 36,
 GDS_PERF_SEL_SE1_SH0_ORD_CNT = 37,
 GDS_PERF_SEL_SE1_SH0_2COMP_REQ = 38,
 GDS_PERF_SEL_SE1_SH0_ORD_WAVE_VALID = 39,
 GDS_PERF_SEL_SE1_SH0_GDS_DATA_VALID = 40,
 GDS_PERF_SEL_SE1_SH0_GDS_STALL_BY_ORD = 41,
 GDS_PERF_SEL_SE1_SH0_GDS_WR_OP = 42,
 GDS_PERF_SEL_SE1_SH0_GDS_RD_OP = 43,
 GDS_PERF_SEL_SE1_SH0_GDS_ATOM_OP = 44,
 GDS_PERF_SEL_SE1_SH0_GDS_REL_OP = 45,
 GDS_PERF_SEL_SE1_SH0_GDS_CMPXCH_OP = 46,
 GDS_PERF_SEL_SE1_SH0_GDS_BYTE_OP = 47,
 GDS_PERF_SEL_SE1_SH0_GDS_SHORT_OP = 48,
 GDS_PERF_SEL_SE1_SH1_NORET = 49,
 GDS_PERF_SEL_SE1_SH1_RET = 50,
 GDS_PERF_SEL_SE1_SH1_ORD_CNT = 51,
 GDS_PERF_SEL_SE1_SH1_2COMP_REQ = 52,
 GDS_PERF_SEL_SE1_SH1_ORD_WAVE_VALID = 53,
 GDS_PERF_SEL_SE1_SH1_GDS_DATA_VALID = 54,
 GDS_PERF_SEL_SE1_SH1_GDS_STALL_BY_ORD = 55,
 GDS_PERF_SEL_SE1_SH1_GDS_WR_OP = 56,
 GDS_PERF_SEL_SE1_SH1_GDS_RD_OP = 57,
 GDS_PERF_SEL_SE1_SH1_GDS_ATOM_OP = 58,
 GDS_PERF_SEL_SE1_SH1_GDS_REL_OP = 59,
 GDS_PERF_SEL_SE1_SH1_GDS_CMPXCH_OP = 60,
 GDS_PERF_SEL_SE1_SH1_GDS_BYTE_OP = 61,
 GDS_PERF_SEL_SE1_SH1_GDS_SHORT_OP = 62,
 GDS_PERF_SEL_SE2_SH0_NORET = 63,
 GDS_PERF_SEL_SE2_SH0_RET = 64,
 GDS_PERF_SEL_SE2_SH0_ORD_CNT = 65,
 GDS_PERF_SEL_SE2_SH0_2COMP_REQ = 66,
 GDS_PERF_SEL_SE2_SH0_ORD_WAVE_VALID = 67,
 GDS_PERF_SEL_SE2_SH0_GDS_DATA_VALID = 68,
 GDS_PERF_SEL_SE2_SH0_GDS_STALL_BY_ORD = 69,
 GDS_PERF_SEL_SE2_SH0_GDS_WR_OP = 70,
 GDS_PERF_SEL_SE2_SH0_GDS_RD_OP = 71,
 GDS_PERF_SEL_SE2_SH0_GDS_ATOM_OP = 72,
 GDS_PERF_SEL_SE2_SH0_GDS_REL_OP = 73,
 GDS_PERF_SEL_SE2_SH0_GDS_CMPXCH_OP = 74,
 GDS_PERF_SEL_SE2_SH0_GDS_BYTE_OP = 75,
 GDS_PERF_SEL_SE2_SH0_GDS_SHORT_OP = 76,
 GDS_PERF_SEL_SE2_SH1_NORET = 77,
 GDS_PERF_SEL_SE2_SH1_RET = 78,
 GDS_PERF_SEL_SE2_SH1_ORD_CNT = 79,
 GDS_PERF_SEL_SE2_SH1_2COMP_REQ = 80,
 GDS_PERF_SEL_SE2_SH1_ORD_WAVE_VALID = 81,
 GDS_PERF_SEL_SE2_SH1_GDS_DATA_VALID = 82,
 GDS_PERF_SEL_SE2_SH1_GDS_STALL_BY_ORD = 83,
 GDS_PERF_SEL_SE2_SH1_GDS_WR_OP = 84,
 GDS_PERF_SEL_SE2_SH1_GDS_RD_OP = 85,
 GDS_PERF_SEL_SE2_SH1_GDS_ATOM_OP = 86,
 GDS_PERF_SEL_SE2_SH1_GDS_REL_OP = 87,
 GDS_PERF_SEL_SE2_SH1_GDS_CMPXCH_OP = 88,
 GDS_PERF_SEL_SE2_SH1_GDS_BYTE_OP = 89,
 GDS_PERF_SEL_SE2_SH1_GDS_SHORT_OP = 90,
 GDS_PERF_SEL_SE3_SH0_NORET = 91,
 GDS_PERF_SEL_SE3_SH0_RET = 92,
 GDS_PERF_SEL_SE3_SH0_ORD_CNT = 93,
 GDS_PERF_SEL_SE3_SH0_2COMP_REQ = 94,
 GDS_PERF_SEL_SE3_SH0_ORD_WAVE_VALID = 95,
 GDS_PERF_SEL_SE3_SH0_GDS_DATA_VALID = 96,
 GDS_PERF_SEL_SE3_SH0_GDS_STALL_BY_ORD = 97,
 GDS_PERF_SEL_SE3_SH0_GDS_WR_OP = 98,
 GDS_PERF_SEL_SE3_SH0_GDS_RD_OP = 99,
 GDS_PERF_SEL_SE3_SH0_GDS_ATOM_OP = 100,
 GDS_PERF_SEL_SE3_SH0_GDS_REL_OP = 101,
 GDS_PERF_SEL_SE3_SH0_GDS_CMPXCH_OP = 102,
 GDS_PERF_SEL_SE3_SH0_GDS_BYTE_OP = 103,
 GDS_PERF_SEL_SE3_SH0_GDS_SHORT_OP = 104,
 GDS_PERF_SEL_SE3_SH1_NORET = 105,
 GDS_PERF_SEL_SE3_SH1_RET = 106,
 GDS_PERF_SEL_SE3_SH1_ORD_CNT = 107,
 GDS_PERF_SEL_SE3_SH1_2COMP_REQ = 108,
 GDS_PERF_SEL_SE3_SH1_ORD_WAVE_VALID = 109,
 GDS_PERF_SEL_SE3_SH1_GDS_DATA_VALID = 110,
 GDS_PERF_SEL_SE3_SH1_GDS_STALL_BY_ORD = 111,
 GDS_PERF_SEL_SE3_SH1_GDS_WR_OP = 112,
 GDS_PERF_SEL_SE3_SH1_GDS_RD_OP = 113,
 GDS_PERF_SEL_SE3_SH1_GDS_ATOM_OP = 114,
 GDS_PERF_SEL_SE3_SH1_GDS_REL_OP = 115,
 GDS_PERF_SEL_SE3_SH1_GDS_CMPXCH_OP = 116,
 GDS_PERF_SEL_SE3_SH1_GDS_BYTE_OP = 117,
 GDS_PERF_SEL_SE3_SH1_GDS_SHORT_OP = 118,
 GDS_PERF_SEL_GWS_RELEASED = 119,
 GDS_PERF_SEL_GWS_BYPASS = 120,
} GDS_PERFCOUNT_SELECT;
#endif /*ENUMS_GDS_PERFCOUNT_SELECT_H*/

/*******************************************************
 * Chip Enums
 *******************************************************/

/*
 * MEM_PWR_FORCE_CTRL enum
 */

typedef enum MEM_PWR_FORCE_CTRL {
NO_FORCE_REQUEST                         = 0x00000000,
FORCE_LIGHT_SLEEP_REQUEST                = 0x00000001,
FORCE_DEEP_SLEEP_REQUEST                 = 0x00000002,
FORCE_SHUT_DOWN_REQUEST                  = 0x00000003,
} MEM_PWR_FORCE_CTRL;

/*
 * MEM_PWR_FORCE_CTRL2 enum
 */

typedef enum MEM_PWR_FORCE_CTRL2 {
NO_FORCE_REQ                             = 0x00000000,
FORCE_LIGHT_SLEEP_REQ                    = 0x00000001,
} MEM_PWR_FORCE_CTRL2;

/*
 * MEM_PWR_DIS_CTRL enum
 */

typedef enum MEM_PWR_DIS_CTRL {
ENABLE_MEM_PWR_CTRL                      = 0x00000000,
DISABLE_MEM_PWR_CTRL                     = 0x00000001,
} MEM_PWR_DIS_CTRL;

/*
 * MEM_PWR_SEL_CTRL enum
 */

typedef enum MEM_PWR_SEL_CTRL {
DYNAMIC_SHUT_DOWN_ENABLE                 = 0x00000000,
DYNAMIC_DEEP_SLEEP_ENABLE                = 0x00000001,
DYNAMIC_LIGHT_SLEEP_ENABLE               = 0x00000002,
} MEM_PWR_SEL_CTRL;

/*
 * MEM_PWR_SEL_CTRL2 enum
 */

typedef enum MEM_PWR_SEL_CTRL2 {
DYNAMIC_DEEP_SLEEP_EN                    = 0x00000000,
DYNAMIC_LIGHT_SLEEP_EN                   = 0x00000001,
} MEM_PWR_SEL_CTRL2;

/*
 * RowSize enum
 */

typedef enum RowSize {
ADDR_CONFIG_1KB_ROW                      = 0x00000000,
ADDR_CONFIG_2KB_ROW                      = 0x00000001,
ADDR_CONFIG_4KB_ROW                      = 0x00000002,
} RowSize;

/*
 * SurfaceEndian enum
 */

typedef enum SurfaceEndian {
ENDIAN_NONE                              = 0x00000000,
ENDIAN_8IN16                             = 0x00000001,
ENDIAN_8IN32                             = 0x00000002,
ENDIAN_8IN64                             = 0x00000003,
} SurfaceEndian;

/*
 * ArrayMode enum
 */

typedef enum ArrayMode {
ARRAY_LINEAR_GENERAL                     = 0x00000000,
ARRAY_LINEAR_ALIGNED                     = 0x00000001,
ARRAY_1D_TILED_THIN1                     = 0x00000002,
ARRAY_1D_TILED_THICK                     = 0x00000003,
ARRAY_2D_TILED_THIN1                     = 0x00000004,
ARRAY_PRT_TILED_THIN1                    = 0x00000005,
ARRAY_PRT_2D_TILED_THIN1                 = 0x00000006,
ARRAY_2D_TILED_THICK                     = 0x00000007,
ARRAY_2D_TILED_XTHICK                    = 0x00000008,
ARRAY_PRT_TILED_THICK                    = 0x00000009,
ARRAY_PRT_2D_TILED_THICK                 = 0x0000000a,
ARRAY_PRT_3D_TILED_THIN1                 = 0x0000000b,
ARRAY_3D_TILED_THIN1                     = 0x0000000c,
ARRAY_3D_TILED_THICK                     = 0x0000000d,
ARRAY_3D_TILED_XTHICK                    = 0x0000000e,
ARRAY_PRT_3D_TILED_THICK                 = 0x0000000f,
} ArrayMode;

/*
 * NumPipes enum
 */

typedef enum NumPipes {
ADDR_CONFIG_1_PIPE                       = 0x00000000,
ADDR_CONFIG_2_PIPE                       = 0x00000001,
ADDR_CONFIG_4_PIPE                       = 0x00000002,
ADDR_CONFIG_8_PIPE                       = 0x00000003,
ADDR_CONFIG_16_PIPE                      = 0x00000004,
ADDR_CONFIG_32_PIPE                      = 0x00000005,
} NumPipes;

/*
 * NumBanksConfig enum
 */

typedef enum NumBanksConfig {
ADDR_CONFIG_1_BANK                       = 0x00000000,
ADDR_CONFIG_2_BANK                       = 0x00000001,
ADDR_CONFIG_4_BANK                       = 0x00000002,
ADDR_CONFIG_8_BANK                       = 0x00000003,
ADDR_CONFIG_16_BANK                      = 0x00000004,
} NumBanksConfig;

/*
 * PipeInterleaveSize enum
 */

typedef enum PipeInterleaveSize {
ADDR_CONFIG_PIPE_INTERLEAVE_256B         = 0x00000000,
ADDR_CONFIG_PIPE_INTERLEAVE_512B         = 0x00000001,
ADDR_CONFIG_PIPE_INTERLEAVE_1KB          = 0x00000002,
ADDR_CONFIG_PIPE_INTERLEAVE_2KB          = 0x00000003,
} PipeInterleaveSize;

/*
 * BankInterleaveSize enum
 */

typedef enum BankInterleaveSize {
ADDR_CONFIG_BANK_INTERLEAVE_1            = 0x00000000,
ADDR_CONFIG_BANK_INTERLEAVE_2            = 0x00000001,
ADDR_CONFIG_BANK_INTERLEAVE_4            = 0x00000002,
ADDR_CONFIG_BANK_INTERLEAVE_8            = 0x00000003,
} BankInterleaveSize;

/*
 * NumShaderEngines enum
 */

typedef enum NumShaderEngines {
ADDR_CONFIG_1_SHADER_ENGINE              = 0x00000000,
ADDR_CONFIG_2_SHADER_ENGINE              = 0x00000001,
ADDR_CONFIG_4_SHADER_ENGINE              = 0x00000002,
ADDR_CONFIG_8_SHADER_ENGINE              = 0x00000003,
} NumShaderEngines;

/*
 * NumRbPerShaderEngine enum
 */

typedef enum NumRbPerShaderEngine {
ADDR_CONFIG_1_RB_PER_SHADER_ENGINE       = 0x00000000,
ADDR_CONFIG_2_RB_PER_SHADER_ENGINE       = 0x00000001,
ADDR_CONFIG_4_RB_PER_SHADER_ENGINE       = 0x00000002,
} NumRbPerShaderEngine;

/*
 * NumGPUs enum
 */

typedef enum NumGPUs {
ADDR_CONFIG_1_GPU                        = 0x00000000,
ADDR_CONFIG_2_GPU                        = 0x00000001,
ADDR_CONFIG_4_GPU                        = 0x00000002,
ADDR_CONFIG_8_GPU                        = 0x00000003,
} NumGPUs;

/*
 * NumMaxCompressedFragments enum
 */

typedef enum NumMaxCompressedFragments {
ADDR_CONFIG_1_MAX_COMPRESSED_FRAGMENTS   = 0x00000000,
ADDR_CONFIG_2_MAX_COMPRESSED_FRAGMENTS   = 0x00000001,
ADDR_CONFIG_4_MAX_COMPRESSED_FRAGMENTS   = 0x00000002,
ADDR_CONFIG_8_MAX_COMPRESSED_FRAGMENTS   = 0x00000003,
} NumMaxCompressedFragments;

/*
 * ShaderEngineTileSize enum
 */

typedef enum ShaderEngineTileSize {
ADDR_CONFIG_SE_TILE_16                   = 0x00000000,
ADDR_CONFIG_SE_TILE_32                   = 0x00000001,
} ShaderEngineTileSize;

/*
 * MultiGPUTileSize enum
 */

typedef enum MultiGPUTileSize {
ADDR_CONFIG_GPU_TILE_16                  = 0x00000000,
ADDR_CONFIG_GPU_TILE_32                  = 0x00000001,
ADDR_CONFIG_GPU_TILE_64                  = 0x00000002,
ADDR_CONFIG_GPU_TILE_128                 = 0x00000003,
} MultiGPUTileSize;

/*
 * NumLowerPipes enum
 */

typedef enum NumLowerPipes {
ADDR_CONFIG_1_LOWER_PIPES                = 0x00000000,
ADDR_CONFIG_2_LOWER_PIPES                = 0x00000001,
} NumLowerPipes;

/*
 * ColorTransform enum
 */

typedef enum ColorTransform {
DCC_CT_AUTO                              = 0x00000000,
DCC_CT_NONE                              = 0x00000001,
ABGR_TO_A_BG_G_RB                        = 0x00000002,
BGRA_TO_BG_G_RB_A                        = 0x00000003,
} ColorTransform;

/*
 * CompareRef enum
 */

typedef enum CompareRef {
REF_NEVER                                = 0x00000000,
REF_LESS                                 = 0x00000001,
REF_EQUAL                                = 0x00000002,
REF_LEQUAL                               = 0x00000003,
REF_GREATER                              = 0x00000004,
REF_NOTEQUAL                             = 0x00000005,
REF_GEQUAL                               = 0x00000006,
REF_ALWAYS                               = 0x00000007,
} CompareRef;

/*
 * ReadSize enum
 */

typedef enum ReadSize {
READ_256_BITS                            = 0x00000000,
READ_512_BITS                            = 0x00000001,
} ReadSize;

/*
 * DepthFormat enum
 */

typedef enum DepthFormat {
DEPTH_INVALID                            = 0x00000000,
DEPTH_16                                 = 0x00000001,
DEPTH_X8_24                              = 0x00000002,
DEPTH_8_24                               = 0x00000003,
DEPTH_X8_24_FLOAT                        = 0x00000004,
DEPTH_8_24_FLOAT                         = 0x00000005,
DEPTH_32_FLOAT                           = 0x00000006,
DEPTH_X24_8_32_FLOAT                     = 0x00000007,
} DepthFormat;

/*
 * ZFormat enum
 */

typedef enum ZFormat {
Z_INVALID                                = 0x00000000,
Z_16                                     = 0x00000001,
Z_24                                     = 0x00000002,
Z_32_FLOAT                               = 0x00000003,
} ZFormat;

/*
 * StencilFormat enum
 */

typedef enum StencilFormat {
STENCIL_INVALID                          = 0x00000000,
STENCIL_8                                = 0x00000001,
} StencilFormat;

/*
 * CmaskMode enum
 */

typedef enum CmaskMode {
CMASK_CLEAR_NONE                         = 0x00000000,
CMASK_CLEAR_ONE                          = 0x00000001,
CMASK_CLEAR_ALL                          = 0x00000002,
CMASK_ANY_EXPANDED                       = 0x00000003,
CMASK_ALPHA0_FRAG1                       = 0x00000004,
CMASK_ALPHA0_FRAG2                       = 0x00000005,
CMASK_ALPHA0_FRAG4                       = 0x00000006,
CMASK_ALPHA0_FRAGS                       = 0x00000007,
CMASK_ALPHA1_FRAG1                       = 0x00000008,
CMASK_ALPHA1_FRAG2                       = 0x00000009,
CMASK_ALPHA1_FRAG4                       = 0x0000000a,
CMASK_ALPHA1_FRAGS                       = 0x0000000b,
CMASK_ALPHAX_FRAG1                       = 0x0000000c,
CMASK_ALPHAX_FRAG2                       = 0x0000000d,
CMASK_ALPHAX_FRAG4                       = 0x0000000e,
CMASK_ALPHAX_FRAGS                       = 0x0000000f,
} CmaskMode;

/*
 * QuadExportFormat enum
 */

typedef enum QuadExportFormat {
EXPORT_UNUSED                            = 0x00000000,
EXPORT_32_R                              = 0x00000001,
EXPORT_32_GR                             = 0x00000002,
EXPORT_32_AR                             = 0x00000003,
EXPORT_FP16_ABGR                         = 0x00000004,
EXPORT_UNSIGNED16_ABGR                   = 0x00000005,
EXPORT_SIGNED16_ABGR                     = 0x00000006,
EXPORT_32_ABGR                           = 0x00000007,
EXPORT_32BPP_8PIX                        = 0x00000008,
EXPORT_16_16_UNSIGNED_8PIX               = 0x00000009,
EXPORT_16_16_SIGNED_8PIX                 = 0x0000000a,
EXPORT_16_16_FLOAT_8PIX                  = 0x0000000b,
} QuadExportFormat;

/*
 * QuadExportFormatOld enum
 */

typedef enum QuadExportFormatOld {
EXPORT_4P_32BPC_ABGR                     = 0x00000000,
EXPORT_4P_16BPC_ABGR                     = 0x00000001,
EXPORT_4P_32BPC_GR                       = 0x00000002,
EXPORT_4P_32BPC_AR                       = 0x00000003,
EXPORT_2P_32BPC_ABGR                     = 0x00000004,
EXPORT_8P_32BPC_R                        = 0x00000005,
} QuadExportFormatOld;

/*
 * ColorFormat enum
 */

typedef enum ColorFormat {
COLOR_INVALID                            = 0x00000000,
COLOR_8                                  = 0x00000001,
COLOR_16                                 = 0x00000002,
COLOR_8_8                                = 0x00000003,
COLOR_32                                 = 0x00000004,
COLOR_16_16                              = 0x00000005,
COLOR_10_11_11                           = 0x00000006,
COLOR_11_11_10                           = 0x00000007,
COLOR_10_10_10_2                         = 0x00000008,
COLOR_2_10_10_10                         = 0x00000009,
COLOR_8_8_8_8                            = 0x0000000a,
COLOR_32_32                              = 0x0000000b,
COLOR_16_16_16_16                        = 0x0000000c,
COLOR_RESERVED_13                        = 0x0000000d,
COLOR_32_32_32_32                        = 0x0000000e,
COLOR_RESERVED_15                        = 0x0000000f,
COLOR_5_6_5                              = 0x00000010,
COLOR_1_5_5_5                            = 0x00000011,
COLOR_5_5_5_1                            = 0x00000012,
COLOR_4_4_4_4                            = 0x00000013,
COLOR_8_24                               = 0x00000014,
COLOR_24_8                               = 0x00000015,
COLOR_X24_8_32_FLOAT                     = 0x00000016,
COLOR_RESERVED_23                        = 0x00000017,
COLOR_RESERVED_24                        = 0x00000018,
COLOR_RESERVED_25                        = 0x00000019,
COLOR_RESERVED_26                        = 0x0000001a,
COLOR_RESERVED_27                        = 0x0000001b,
COLOR_RESERVED_28                        = 0x0000001c,
COLOR_RESERVED_29                        = 0x0000001d,
COLOR_RESERVED_30                        = 0x0000001e,
COLOR_2_10_10_10_6E4                     = 0x0000001f,
} ColorFormat;

/*
 * SurfaceFormat enum
 */

typedef enum SurfaceFormat {
FMT_INVALID                              = 0x00000000,
FMT_8                                    = 0x00000001,
FMT_16                                   = 0x00000002,
FMT_8_8                                  = 0x00000003,
FMT_32                                   = 0x00000004,
FMT_16_16                                = 0x00000005,
FMT_10_11_11                             = 0x00000006,
FMT_11_11_10                             = 0x00000007,
FMT_10_10_10_2                           = 0x00000008,
FMT_2_10_10_10                           = 0x00000009,
FMT_8_8_8_8                              = 0x0000000a,
FMT_32_32                                = 0x0000000b,
FMT_16_16_16_16                          = 0x0000000c,
FMT_32_32_32                             = 0x0000000d,
FMT_32_32_32_32                          = 0x0000000e,
FMT_RESERVED_4                           = 0x0000000f,
FMT_5_6_5                                = 0x00000010,
FMT_1_5_5_5                              = 0x00000011,
FMT_5_5_5_1                              = 0x00000012,
FMT_4_4_4_4                              = 0x00000013,
FMT_8_24                                 = 0x00000014,
FMT_24_8                                 = 0x00000015,
FMT_X24_8_32_FLOAT                       = 0x00000016,
FMT_RESERVED_33                          = 0x00000017,
FMT_11_11_10_FLOAT                       = 0x00000018,
FMT_16_FLOAT                             = 0x00000019,
FMT_32_FLOAT                             = 0x0000001a,
FMT_16_16_FLOAT                          = 0x0000001b,
FMT_8_24_FLOAT                           = 0x0000001c,
FMT_24_8_FLOAT                           = 0x0000001d,
FMT_32_32_FLOAT                          = 0x0000001e,
FMT_10_11_11_FLOAT                       = 0x0000001f,
FMT_16_16_16_16_FLOAT                    = 0x00000020,
FMT_3_3_2                                = 0x00000021,
FMT_6_5_5                                = 0x00000022,
FMT_32_32_32_32_FLOAT                    = 0x00000023,
FMT_RESERVED_36                          = 0x00000024,
FMT_1                                    = 0x00000025,
FMT_1_REVERSED                           = 0x00000026,
FMT_GB_GR                                = 0x00000027,
FMT_BG_RG                                = 0x00000028,
FMT_32_AS_8                              = 0x00000029,
FMT_32_AS_8_8                            = 0x0000002a,
FMT_5_9_9_9_SHAREDEXP                    = 0x0000002b,
FMT_8_8_8                                = 0x0000002c,
FMT_16_16_16                             = 0x0000002d,
FMT_16_16_16_FLOAT                       = 0x0000002e,
FMT_4_4                                  = 0x0000002f,
FMT_32_32_32_FLOAT                       = 0x00000030,
FMT_BC1                                  = 0x00000031,
FMT_BC2                                  = 0x00000032,
FMT_BC3                                  = 0x00000033,
FMT_BC4                                  = 0x00000034,
FMT_BC5                                  = 0x00000035,
FMT_BC6                                  = 0x00000036,
FMT_BC7                                  = 0x00000037,
FMT_32_AS_32_32_32_32                    = 0x00000038,
FMT_APC3                                 = 0x00000039,
FMT_APC4                                 = 0x0000003a,
FMT_APC5                                 = 0x0000003b,
FMT_APC6                                 = 0x0000003c,
FMT_APC7                                 = 0x0000003d,
FMT_CTX1                                 = 0x0000003e,
FMT_RESERVED_63                          = 0x0000003f,
} SurfaceFormat;

/*
 * BUF_DATA_FORMAT enum
 */

typedef enum BUF_DATA_FORMAT {
BUF_DATA_FORMAT_INVALID                  = 0x00000000,
BUF_DATA_FORMAT_8                        = 0x00000001,
BUF_DATA_FORMAT_16                       = 0x00000002,
BUF_DATA_FORMAT_8_8                      = 0x00000003,
BUF_DATA_FORMAT_32                       = 0x00000004,
BUF_DATA_FORMAT_16_16                    = 0x00000005,
BUF_DATA_FORMAT_10_11_11                 = 0x00000006,
BUF_DATA_FORMAT_11_11_10                 = 0x00000007,
BUF_DATA_FORMAT_10_10_10_2               = 0x00000008,
BUF_DATA_FORMAT_2_10_10_10               = 0x00000009,
BUF_DATA_FORMAT_8_8_8_8                  = 0x0000000a,
BUF_DATA_FORMAT_32_32                    = 0x0000000b,
BUF_DATA_FORMAT_16_16_16_16              = 0x0000000c,
BUF_DATA_FORMAT_32_32_32                 = 0x0000000d,
BUF_DATA_FORMAT_32_32_32_32              = 0x0000000e,
BUF_DATA_FORMAT_RESERVED_15              = 0x0000000f,
} BUF_DATA_FORMAT;

/*
 * IMG_DATA_FORMAT enum
 */

typedef enum IMG_DATA_FORMAT {
IMG_DATA_FORMAT_INVALID                  = 0x00000000,
IMG_DATA_FORMAT_8                        = 0x00000001,
IMG_DATA_FORMAT_16                       = 0x00000002,
IMG_DATA_FORMAT_8_8                      = 0x00000003,
IMG_DATA_FORMAT_32                       = 0x00000004,
IMG_DATA_FORMAT_16_16                    = 0x00000005,
IMG_DATA_FORMAT_10_11_11                 = 0x00000006,
IMG_DATA_FORMAT_11_11_10                 = 0x00000007,
IMG_DATA_FORMAT_10_10_10_2               = 0x00000008,
IMG_DATA_FORMAT_2_10_10_10               = 0x00000009,
IMG_DATA_FORMAT_8_8_8_8                  = 0x0000000a,
IMG_DATA_FORMAT_32_32                    = 0x0000000b,
IMG_DATA_FORMAT_16_16_16_16              = 0x0000000c,
IMG_DATA_FORMAT_32_32_32                 = 0x0000000d,
IMG_DATA_FORMAT_32_32_32_32              = 0x0000000e,
IMG_DATA_FORMAT_RESERVED_15              = 0x0000000f,
IMG_DATA_FORMAT_5_6_5                    = 0x00000010,
IMG_DATA_FORMAT_1_5_5_5                  = 0x00000011,
IMG_DATA_FORMAT_5_5_5_1                  = 0x00000012,
IMG_DATA_FORMAT_4_4_4_4                  = 0x00000013,
IMG_DATA_FORMAT_8_24                     = 0x00000014,
IMG_DATA_FORMAT_24_8                     = 0x00000015,
IMG_DATA_FORMAT_X24_8_32                 = 0x00000016,
IMG_DATA_FORMAT_8_AS_8_8_8_8             = 0x00000017,
IMG_DATA_FORMAT_ETC2_RGB                 = 0x00000018,
IMG_DATA_FORMAT_ETC2_RGBA                = 0x00000019,
IMG_DATA_FORMAT_ETC2_R                   = 0x0000001a,
IMG_DATA_FORMAT_ETC2_RG                  = 0x0000001b,
IMG_DATA_FORMAT_ETC2_RGBA1               = 0x0000001c,
IMG_DATA_FORMAT_RESERVED_29              = 0x0000001d,
IMG_DATA_FORMAT_RESERVED_30              = 0x0000001e,
IMG_DATA_FORMAT_6E4                      = 0x0000001f,
IMG_DATA_FORMAT_GB_GR                    = 0x00000020,
IMG_DATA_FORMAT_BG_RG                    = 0x00000021,
IMG_DATA_FORMAT_5_9_9_9                  = 0x00000022,
IMG_DATA_FORMAT_BC1                      = 0x00000023,
IMG_DATA_FORMAT_BC2                      = 0x00000024,
IMG_DATA_FORMAT_BC3                      = 0x00000025,
IMG_DATA_FORMAT_BC4                      = 0x00000026,
IMG_DATA_FORMAT_BC5                      = 0x00000027,
IMG_DATA_FORMAT_BC6                      = 0x00000028,
IMG_DATA_FORMAT_BC7                      = 0x00000029,
IMG_DATA_FORMAT_16_AS_32_32              = 0x0000002a,
IMG_DATA_FORMAT_16_AS_16_16_16_16        = 0x0000002b,
IMG_DATA_FORMAT_16_AS_32_32_32_32        = 0x0000002c,
IMG_DATA_FORMAT_FMASK                    = 0x0000002d,
IMG_DATA_FORMAT_ASTC_2D_LDR              = 0x0000002e,
IMG_DATA_FORMAT_ASTC_2D_HDR              = 0x0000002f,
IMG_DATA_FORMAT_ASTC_2D_LDR_SRGB         = 0x00000030,
IMG_DATA_FORMAT_ASTC_3D_LDR              = 0x00000031,
IMG_DATA_FORMAT_ASTC_3D_HDR              = 0x00000032,
IMG_DATA_FORMAT_ASTC_3D_LDR_SRGB         = 0x00000033,
IMG_DATA_FORMAT_N_IN_16                  = 0x00000034,
IMG_DATA_FORMAT_N_IN_16_16               = 0x00000035,
IMG_DATA_FORMAT_N_IN_16_16_16_16         = 0x00000036,
IMG_DATA_FORMAT_N_IN_16_AS_16_16_16_16   = 0x00000037,
IMG_DATA_FORMAT_RESERVED_56              = 0x00000038,
IMG_DATA_FORMAT_4_4                      = 0x00000039,
IMG_DATA_FORMAT_6_5_5                    = 0x0000003a,
IMG_DATA_FORMAT_RESERVED_59              = 0x0000003b,
IMG_DATA_FORMAT_RESERVED_60              = 0x0000003c,
IMG_DATA_FORMAT_8_AS_32                  = 0x0000003d,
IMG_DATA_FORMAT_8_AS_32_32               = 0x0000003e,
IMG_DATA_FORMAT_32_AS_32_32_32_32        = 0x0000003f,
} IMG_DATA_FORMAT;

/*
 * BUF_NUM_FORMAT enum
 */

typedef enum BUF_NUM_FORMAT {
BUF_NUM_FORMAT_UNORM                     = 0x00000000,
BUF_NUM_FORMAT_SNORM                     = 0x00000001,
BUF_NUM_FORMAT_USCALED                   = 0x00000002,
BUF_NUM_FORMAT_SSCALED                   = 0x00000003,
BUF_NUM_FORMAT_UINT                      = 0x00000004,
BUF_NUM_FORMAT_SINT                      = 0x00000005,
BUF_NUM_FORMAT_UNORM_UINT                = 0x00000006,
BUF_NUM_FORMAT_FLOAT                     = 0x00000007,
} BUF_NUM_FORMAT;

/*
 * IMG_NUM_FORMAT enum
 */

typedef enum IMG_NUM_FORMAT {
IMG_NUM_FORMAT_UNORM                     = 0x00000000,
IMG_NUM_FORMAT_SNORM                     = 0x00000001,
IMG_NUM_FORMAT_USCALED                   = 0x00000002,
IMG_NUM_FORMAT_SSCALED                   = 0x00000003,
IMG_NUM_FORMAT_UINT                      = 0x00000004,
IMG_NUM_FORMAT_SINT                      = 0x00000005,
IMG_NUM_FORMAT_UNORM_UINT                = 0x00000006,
IMG_NUM_FORMAT_FLOAT                     = 0x00000007,
IMG_NUM_FORMAT_RESERVED_8                = 0x00000008,
IMG_NUM_FORMAT_SRGB                      = 0x00000009,
IMG_NUM_FORMAT_RESERVED_10               = 0x0000000a,
IMG_NUM_FORMAT_RESERVED_11               = 0x0000000b,
IMG_NUM_FORMAT_RESERVED_12               = 0x0000000c,
IMG_NUM_FORMAT_RESERVED_13               = 0x0000000d,
IMG_NUM_FORMAT_RESERVED_14               = 0x0000000e,
IMG_NUM_FORMAT_RESERVED_15               = 0x0000000f,
} IMG_NUM_FORMAT;

/*
 * IMG_NUM_FORMAT_FMASK enum
 */

typedef enum IMG_NUM_FORMAT_FMASK {
IMG_NUM_FORMAT_FMASK_8_2_1               = 0x00000000,
IMG_NUM_FORMAT_FMASK_8_4_1               = 0x00000001,
IMG_NUM_FORMAT_FMASK_8_8_1               = 0x00000002,
IMG_NUM_FORMAT_FMASK_8_2_2               = 0x00000003,
IMG_NUM_FORMAT_FMASK_8_4_2               = 0x00000004,
IMG_NUM_FORMAT_FMASK_8_4_4               = 0x00000005,
IMG_NUM_FORMAT_FMASK_16_16_1             = 0x00000006,
IMG_NUM_FORMAT_FMASK_16_8_2              = 0x00000007,
IMG_NUM_FORMAT_FMASK_32_16_2             = 0x00000008,
IMG_NUM_FORMAT_FMASK_32_8_4              = 0x00000009,
IMG_NUM_FORMAT_FMASK_32_8_8              = 0x0000000a,
IMG_NUM_FORMAT_FMASK_64_16_4             = 0x0000000b,
IMG_NUM_FORMAT_FMASK_64_16_8             = 0x0000000c,
IMG_NUM_FORMAT_FMASK_RESERVED_13         = 0x0000000d,
IMG_NUM_FORMAT_FMASK_RESERVED_14         = 0x0000000e,
IMG_NUM_FORMAT_FMASK_RESERVED_15         = 0x0000000f,
} IMG_NUM_FORMAT_FMASK;

/*
 * IMG_NUM_FORMAT_N_IN_16 enum
 */

typedef enum IMG_NUM_FORMAT_N_IN_16 {
IMG_NUM_FORMAT_N_IN_16_RESERVED_0        = 0x00000000,
IMG_NUM_FORMAT_N_IN_16_UNORM_10          = 0x00000001,
IMG_NUM_FORMAT_N_IN_16_UNORM_9           = 0x00000002,
IMG_NUM_FORMAT_N_IN_16_RESERVED_3        = 0x00000003,
IMG_NUM_FORMAT_N_IN_16_UINT_10           = 0x00000004,
IMG_NUM_FORMAT_N_IN_16_UINT_9            = 0x00000005,
IMG_NUM_FORMAT_N_IN_16_RESERVED_6        = 0x00000006,
IMG_NUM_FORMAT_N_IN_16_UNORM_UINT_10     = 0x00000007,
IMG_NUM_FORMAT_N_IN_16_UNORM_UINT_9      = 0x00000008,
IMG_NUM_FORMAT_N_IN_16_RESERVED_9        = 0x00000009,
IMG_NUM_FORMAT_N_IN_16_RESERVED_10       = 0x0000000a,
IMG_NUM_FORMAT_N_IN_16_RESERVED_11       = 0x0000000b,
IMG_NUM_FORMAT_N_IN_16_RESERVED_12       = 0x0000000c,
IMG_NUM_FORMAT_N_IN_16_RESERVED_13       = 0x0000000d,
IMG_NUM_FORMAT_N_IN_16_RESERVED_14       = 0x0000000e,
IMG_NUM_FORMAT_N_IN_16_RESERVED_15       = 0x0000000f,
} IMG_NUM_FORMAT_N_IN_16;

/*
 * IMG_NUM_FORMAT_ASTC_2D enum
 */

typedef enum IMG_NUM_FORMAT_ASTC_2D {
IMG_NUM_FORMAT_ASTC_2D_4x4               = 0x00000000,
IMG_NUM_FORMAT_ASTC_2D_5x4               = 0x00000001,
IMG_NUM_FORMAT_ASTC_2D_5x5               = 0x00000002,
IMG_NUM_FORMAT_ASTC_2D_6x5               = 0x00000003,
IMG_NUM_FORMAT_ASTC_2D_6x6               = 0x00000004,
IMG_NUM_FORMAT_ASTC_2D_8x5               = 0x00000005,
IMG_NUM_FORMAT_ASTC_2D_8x6               = 0x00000006,
IMG_NUM_FORMAT_ASTC_2D_8x8               = 0x00000007,
IMG_NUM_FORMAT_ASTC_2D_10x5              = 0x00000008,
IMG_NUM_FORMAT_ASTC_2D_10x6              = 0x00000009,
IMG_NUM_FORMAT_ASTC_2D_10x8              = 0x0000000a,
IMG_NUM_FORMAT_ASTC_2D_10x10             = 0x0000000b,
IMG_NUM_FORMAT_ASTC_2D_12x10             = 0x0000000c,
IMG_NUM_FORMAT_ASTC_2D_12x12             = 0x0000000d,
IMG_NUM_FORMAT_ASTC_2D_RESERVED_14       = 0x0000000e,
IMG_NUM_FORMAT_ASTC_2D_RESERVED_15       = 0x0000000f,
} IMG_NUM_FORMAT_ASTC_2D;

/*
 * IMG_NUM_FORMAT_ASTC_3D enum
 */

typedef enum IMG_NUM_FORMAT_ASTC_3D {
IMG_NUM_FORMAT_ASTC_3D_3x3x3             = 0x00000000,
IMG_NUM_FORMAT_ASTC_3D_4x3x3             = 0x00000001,
IMG_NUM_FORMAT_ASTC_3D_4x4x3             = 0x00000002,
IMG_NUM_FORMAT_ASTC_3D_4x4x4             = 0x00000003,
IMG_NUM_FORMAT_ASTC_3D_5x4x4             = 0x00000004,
IMG_NUM_FORMAT_ASTC_3D_5x5x4             = 0x00000005,
IMG_NUM_FORMAT_ASTC_3D_5x5x5             = 0x00000006,
IMG_NUM_FORMAT_ASTC_3D_6x5x5             = 0x00000007,
IMG_NUM_FORMAT_ASTC_3D_6x6x5             = 0x00000008,
IMG_NUM_FORMAT_ASTC_3D_6x6x6             = 0x00000009,
IMG_NUM_FORMAT_ASTC_3D_RESERVED_10       = 0x0000000a,
IMG_NUM_FORMAT_ASTC_3D_RESERVED_11       = 0x0000000b,
IMG_NUM_FORMAT_ASTC_3D_RESERVED_12       = 0x0000000c,
IMG_NUM_FORMAT_ASTC_3D_RESERVED_13       = 0x0000000d,
IMG_NUM_FORMAT_ASTC_3D_RESERVED_14       = 0x0000000e,
IMG_NUM_FORMAT_ASTC_3D_RESERVED_15       = 0x0000000f,
} IMG_NUM_FORMAT_ASTC_3D;

/*
 * TileType enum
 */

typedef enum TileType {
ARRAY_COLOR_TILE                         = 0x00000000,
ARRAY_DEPTH_TILE                         = 0x00000001,
} TileType;

/*
 * NonDispTilingOrder enum
 */

typedef enum NonDispTilingOrder {
ADDR_SURF_MICRO_TILING_DISPLAY           = 0x00000000,
ADDR_SURF_MICRO_TILING_NON_DISPLAY       = 0x00000001,
} NonDispTilingOrder;

/*
 * MicroTileMode enum
 */

typedef enum MicroTileMode {
ADDR_SURF_DISPLAY_MICRO_TILING           = 0x00000000,
ADDR_SURF_THIN_MICRO_TILING              = 0x00000001,
ADDR_SURF_DEPTH_MICRO_TILING             = 0x00000002,
ADDR_SURF_ROTATED_MICRO_TILING           = 0x00000003,
ADDR_SURF_THICK_MICRO_TILING             = 0x00000004,
} MicroTileMode;

/*
 * TileSplit enum
 */

typedef enum TileSplit {
ADDR_SURF_TILE_SPLIT_64B                 = 0x00000000,
ADDR_SURF_TILE_SPLIT_128B                = 0x00000001,
ADDR_SURF_TILE_SPLIT_256B                = 0x00000002,
ADDR_SURF_TILE_SPLIT_512B                = 0x00000003,
ADDR_SURF_TILE_SPLIT_1KB                 = 0x00000004,
ADDR_SURF_TILE_SPLIT_2KB                 = 0x00000005,
ADDR_SURF_TILE_SPLIT_4KB                 = 0x00000006,
} TileSplit;

/*
 * SampleSplit enum
 */

typedef enum SampleSplit {
ADDR_SURF_SAMPLE_SPLIT_1                 = 0x00000000,
ADDR_SURF_SAMPLE_SPLIT_2                 = 0x00000001,
ADDR_SURF_SAMPLE_SPLIT_4                 = 0x00000002,
ADDR_SURF_SAMPLE_SPLIT_8                 = 0x00000003,
} SampleSplit;

/*
 * PipeConfig enum
 */

typedef enum PipeConfig {
ADDR_SURF_P2                             = 0x00000000,
ADDR_SURF_P2_RESERVED0                   = 0x00000001,
ADDR_SURF_P2_RESERVED1                   = 0x00000002,
ADDR_SURF_P2_RESERVED2                   = 0x00000003,
ADDR_SURF_P4_8x16                        = 0x00000004,
ADDR_SURF_P4_16x16                       = 0x00000005,
ADDR_SURF_P4_16x32                       = 0x00000006,
ADDR_SURF_P4_32x32                       = 0x00000007,
ADDR_SURF_P8_16x16_8x16                  = 0x00000008,
ADDR_SURF_P8_16x32_8x16                  = 0x00000009,
ADDR_SURF_P8_32x32_8x16                  = 0x0000000a,
ADDR_SURF_P8_16x32_16x16                 = 0x0000000b,
ADDR_SURF_P8_32x32_16x16                 = 0x0000000c,
ADDR_SURF_P8_32x32_16x32                 = 0x0000000d,
ADDR_SURF_P8_32x64_32x32                 = 0x0000000e,
ADDR_SURF_P8_RESERVED0                   = 0x0000000f,
ADDR_SURF_P16_32x32_8x16                 = 0x00000010,
ADDR_SURF_P16_32x32_16x16                = 0x00000011,
} PipeConfig;

/*
 * SeEnable enum
 */

typedef enum SeEnable {
ADDR_CONFIG_DISABLE_SE                   = 0x00000000,
ADDR_CONFIG_ENABLE_SE                    = 0x00000001,
} SeEnable;

/*
 * NumBanks enum
 */

typedef enum NumBanks {
ADDR_SURF_2_BANK                         = 0x00000000,
ADDR_SURF_4_BANK                         = 0x00000001,
ADDR_SURF_8_BANK                         = 0x00000002,
ADDR_SURF_16_BANK                        = 0x00000003,
} NumBanks;

/*
 * BankWidth enum
 */

typedef enum BankWidth {
ADDR_SURF_BANK_WIDTH_1                   = 0x00000000,
ADDR_SURF_BANK_WIDTH_2                   = 0x00000001,
ADDR_SURF_BANK_WIDTH_4                   = 0x00000002,
ADDR_SURF_BANK_WIDTH_8                   = 0x00000003,
} BankWidth;

/*
 * BankHeight enum
 */

typedef enum BankHeight {
ADDR_SURF_BANK_HEIGHT_1                  = 0x00000000,
ADDR_SURF_BANK_HEIGHT_2                  = 0x00000001,
ADDR_SURF_BANK_HEIGHT_4                  = 0x00000002,
ADDR_SURF_BANK_HEIGHT_8                  = 0x00000003,
} BankHeight;

/*
 * BankWidthHeight enum
 */

typedef enum BankWidthHeight {
ADDR_SURF_BANK_WH_1                      = 0x00000000,
ADDR_SURF_BANK_WH_2                      = 0x00000001,
ADDR_SURF_BANK_WH_4                      = 0x00000002,
ADDR_SURF_BANK_WH_8                      = 0x00000003,
} BankWidthHeight;

/*
 * MacroTileAspect enum
 */

typedef enum MacroTileAspect {
ADDR_SURF_MACRO_ASPECT_1                 = 0x00000000,
ADDR_SURF_MACRO_ASPECT_2                 = 0x00000001,
ADDR_SURF_MACRO_ASPECT_4                 = 0x00000002,
ADDR_SURF_MACRO_ASPECT_8                 = 0x00000003,
} MacroTileAspect;

/*
 * GATCL1RequestType enum
 */

typedef enum GATCL1RequestType {
GATCL1_TYPE_NORMAL                       = 0x00000000,
GATCL1_TYPE_SHOOTDOWN                    = 0x00000001,
GATCL1_TYPE_BYPASS                       = 0x00000002,
} GATCL1RequestType;

/*
 * UTCL1RequestType enum
 */

typedef enum UTCL1RequestType {
UTCL1_TYPE_NORMAL                        = 0x00000000,
UTCL1_TYPE_SHOOTDOWN                     = 0x00000001,
UTCL1_TYPE_BYPASS                        = 0x00000002,
} UTCL1RequestType;

/*
 * UTCL1FaultType enum
 */

typedef enum UTCL1FaultType {
UTCL1_XNACK_SUCCESS                      = 0x00000000,
UTCL1_XNACK_RETRY                        = 0x00000001,
UTCL1_XNACK_PRT                          = 0x00000002,
UTCL1_XNACK_NO_RETRY                     = 0x00000003,
} UTCL1FaultType;

/*
 * TCC_CACHE_POLICIES enum
 */

typedef enum TCC_CACHE_POLICIES {
TCC_CACHE_POLICY_LRU                     = 0x00000000,
TCC_CACHE_POLICY_STREAM                  = 0x00000001,
} TCC_CACHE_POLICIES;

/*
 * MTYPE enum
 */

typedef enum MTYPE {
MTYPE_NC                                 = 0x00000000,
MTYPE_WC                                 = 0x00000001,
MTYPE_RW                                 = 0x00000001,
MTYPE_CC                                 = 0x00000002,
MTYPE_UC                                 = 0x00000003,
} MTYPE;

/*
 * RMI_CID enum
 */

typedef enum RMI_CID {
RMI_CID_CC                               = 0x00000000,
RMI_CID_FC                               = 0x00000001,
RMI_CID_CM                               = 0x00000002,
RMI_CID_DC                               = 0x00000003,
RMI_CID_Z                                = 0x00000004,
RMI_CID_S                                = 0x00000005,
RMI_CID_TILE                             = 0x00000006,
RMI_CID_ZPCPSD                           = 0x00000007,
} RMI_CID;

/*
 * PERFMON_COUNTER_MODE enum
 */

typedef enum PERFMON_COUNTER_MODE {
PERFMON_COUNTER_MODE_ACCUM               = 0x00000000,
PERFMON_COUNTER_MODE_ACTIVE_CYCLES       = 0x00000001,
PERFMON_COUNTER_MODE_MAX                 = 0x00000002,
PERFMON_COUNTER_MODE_DIRTY               = 0x00000003,
PERFMON_COUNTER_MODE_SAMPLE              = 0x00000004,
PERFMON_COUNTER_MODE_CYCLES_SINCE_FIRST_EVENT  = 0x00000005,
PERFMON_COUNTER_MODE_CYCLES_SINCE_LAST_EVENT  = 0x00000006,
PERFMON_COUNTER_MODE_CYCLES_GE_HI        = 0x00000007,
PERFMON_COUNTER_MODE_CYCLES_EQ_HI        = 0x00000008,
PERFMON_COUNTER_MODE_INACTIVE_CYCLES     = 0x00000009,
PERFMON_COUNTER_MODE_RESERVED            = 0x0000000f,
} PERFMON_COUNTER_MODE;

/*
 * PERFMON_SPM_MODE enum
 */

typedef enum PERFMON_SPM_MODE {
PERFMON_SPM_MODE_OFF                     = 0x00000000,
PERFMON_SPM_MODE_16BIT_CLAMP             = 0x00000001,
PERFMON_SPM_MODE_16BIT_NO_CLAMP          = 0x00000002,
PERFMON_SPM_MODE_32BIT_CLAMP             = 0x00000003,
PERFMON_SPM_MODE_32BIT_NO_CLAMP          = 0x00000004,
PERFMON_SPM_MODE_RESERVED_5              = 0x00000005,
PERFMON_SPM_MODE_RESERVED_6              = 0x00000006,
PERFMON_SPM_MODE_RESERVED_7              = 0x00000007,
PERFMON_SPM_MODE_TEST_MODE_0             = 0x00000008,
PERFMON_SPM_MODE_TEST_MODE_1             = 0x00000009,
PERFMON_SPM_MODE_TEST_MODE_2             = 0x0000000a,
} PERFMON_SPM_MODE;

/*
 * SurfaceTiling enum
 */

typedef enum SurfaceTiling {
ARRAY_LINEAR                             = 0x00000000,
ARRAY_TILED                              = 0x00000001,
} SurfaceTiling;

/*
 * SurfaceArray enum
 */

typedef enum SurfaceArray {
ARRAY_1D                                 = 0x00000000,
ARRAY_2D                                 = 0x00000001,
ARRAY_3D                                 = 0x00000002,
ARRAY_3D_SLICE                           = 0x00000003,
} SurfaceArray;

/*
 * ColorArray enum
 */

typedef enum ColorArray {
ARRAY_2D_ALT_COLOR                       = 0x00000000,
ARRAY_2D_COLOR                           = 0x00000001,
ARRAY_3D_SLICE_COLOR                     = 0x00000003,
} ColorArray;

/*
 * DepthArray enum
 */

typedef enum DepthArray {
ARRAY_2D_ALT_DEPTH                       = 0x00000000,
ARRAY_2D_DEPTH                           = 0x00000001,
} DepthArray;

/*
 * ENUM_NUM_SIMD_PER_CU enum
 */

typedef enum ENUM_NUM_SIMD_PER_CU {
NUM_SIMD_PER_CU                          = 0x00000004,
} ENUM_NUM_SIMD_PER_CU;

/*
 * DSM_ENABLE_ERROR_INJECT enum
 */

typedef enum DSM_ENABLE_ERROR_INJECT {
DSM_ENABLE_ERROR_INJECT_FED_IN           = 0x00000000,
DSM_ENABLE_ERROR_INJECT_SINGLE           = 0x00000001,
DSM_ENABLE_ERROR_INJECT_DOUBLE           = 0x00000002,
DSM_ENABLE_ERROR_INJECT_DOUBLE_LIMITED   = 0x00000003,
} DSM_ENABLE_ERROR_INJECT;

/*
 * DSM_SELECT_INJECT_DELAY enum
 */

typedef enum DSM_SELECT_INJECT_DELAY {
DSM_SELECT_INJECT_DELAY_NO_DELAY         = 0x00000000,
DSM_SELECT_INJECT_DELAY_DELAY_ERROR      = 0x00000001,
} DSM_SELECT_INJECT_DELAY;

/*
 * SWIZZLE_TYPE_ENUM enum
 */

typedef enum SWIZZLE_TYPE_ENUM {
SW_Z                                     = 0x00000000,
SW_S                                     = 0x00000001,
SW_D                                     = 0x00000002,
SW_R                                     = 0x00000003,
SW_L                                     = 0x00000004,
} SWIZZLE_TYPE_ENUM;

/*
 * TC_MICRO_TILE_MODE enum
 */

typedef enum TC_MICRO_TILE_MODE {
MICRO_TILE_MODE_LINEAR                   = 0x00000000,
MICRO_TILE_MODE_ROTATED                  = 0x00000001,
MICRO_TILE_MODE_STD_2D                   = 0x00000002,
MICRO_TILE_MODE_STD_3D                   = 0x00000003,
MICRO_TILE_MODE_DISPLAY_2D               = 0x00000004,
MICRO_TILE_MODE_DISPLAY_3D               = 0x00000005,
MICRO_TILE_MODE_Z_2D                     = 0x00000006,
MICRO_TILE_MODE_Z_3D                     = 0x00000007,
} TC_MICRO_TILE_MODE;

/*
 * SWIZZLE_MODE_ENUM enum
 */

typedef enum SWIZZLE_MODE_ENUM {
SW_LINEAR                                = 0x00000000,
SW_256B_S                                = 0x00000001,
SW_256B_D                                = 0x00000002,
SW_256B_R                                = 0x00000003,
SW_4KB_Z                                 = 0x00000004,
SW_4KB_S                                 = 0x00000005,
SW_4KB_D                                 = 0x00000006,
SW_4KB_R                                 = 0x00000007,
SW_64KB_Z                                = 0x00000008,
SW_64KB_S                                = 0x00000009,
SW_64KB_D                                = 0x0000000a,
SW_64KB_R                                = 0x0000000b,
SW_VAR_Z                                 = 0x0000000c,
SW_VAR_S                                 = 0x0000000d,
SW_VAR_D                                 = 0x0000000e,
SW_VAR_R                                 = 0x0000000f,
SW_RESERVED_16                           = 0x00000010,
SW_RESERVED_17                           = 0x00000011,
SW_RESERVED_18                           = 0x00000012,
SW_RESERVED_19                           = 0x00000013,
SW_4KB_Z_X                               = 0x00000014,
SW_4KB_S_X                               = 0x00000015,
SW_4KB_D_X                               = 0x00000016,
SW_4KB_R_X                               = 0x00000017,
SW_64KB_Z_X                              = 0x00000018,
SW_64KB_S_X                              = 0x00000019,
SW_64KB_D_X                              = 0x0000001a,
SW_64KB_R_X                              = 0x0000001b,
SW_VAR_Z_X                               = 0x0000001c,
SW_VAR_S_X                               = 0x0000001d,
SW_VAR_D_X                               = 0x0000001e,
SW_VAR_R_X                               = 0x0000001f,
SW_RESERVED_12                           = 0x00000020,
SW_RESERVED_13                           = 0x00000021,
SW_RESERVED_14                           = 0x00000022,
SW_RESERVED_15                           = 0x00000023,
} SWIZZLE_MODE_ENUM;

/*
 * PipeTiling enum
 */

typedef enum PipeTiling {
CONFIG_1_PIPE                            = 0x00000000,
CONFIG_2_PIPE                            = 0x00000001,
CONFIG_4_PIPE                            = 0x00000002,
CONFIG_8_PIPE                            = 0x00000003,
} PipeTiling;

/*
 * BankTiling enum
 */

typedef enum BankTiling {
CONFIG_4_BANK                            = 0x00000000,
CONFIG_8_BANK                            = 0x00000001,
} BankTiling;

/*
 * GroupInterleave enum
 */

typedef enum GroupInterleave {
CONFIG_256B_GROUP                        = 0x00000000,
CONFIG_512B_GROUP                        = 0x00000001,
} GroupInterleave;

/*
 * RowTiling enum
 */

typedef enum RowTiling {
CONFIG_1KB_ROW                           = 0x00000000,
CONFIG_2KB_ROW                           = 0x00000001,
CONFIG_4KB_ROW                           = 0x00000002,
CONFIG_8KB_ROW                           = 0x00000003,
CONFIG_1KB_ROW_OPT                       = 0x00000004,
CONFIG_2KB_ROW_OPT                       = 0x00000005,
CONFIG_4KB_ROW_OPT                       = 0x00000006,
CONFIG_8KB_ROW_OPT                       = 0x00000007,
} RowTiling;

/*
 * BankSwapBytes enum
 */

typedef enum BankSwapBytes {
CONFIG_128B_SWAPS                        = 0x00000000,
CONFIG_256B_SWAPS                        = 0x00000001,
CONFIG_512B_SWAPS                        = 0x00000002,
CONFIG_1KB_SWAPS                         = 0x00000003,
} BankSwapBytes;

/*
 * SampleSplitBytes enum
 */

typedef enum SampleSplitBytes {
CONFIG_1KB_SPLIT                         = 0x00000000,
CONFIG_2KB_SPLIT                         = 0x00000001,
CONFIG_4KB_SPLIT                         = 0x00000002,
CONFIG_8KB_SPLIT                         = 0x00000003,
} SampleSplitBytes;

/*******************************************************
 * AZSTREAM Enums
 *******************************************************/

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_STATUS_NOT_SET  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_STATUS_SET  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_STATUS_NOT_SET  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_STATUS_SET  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS_NOT_SET  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS_SET  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_NO_TRAFFIC_PRIORITY  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_YES_TRAFFIC_PRIORITY  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_DISABLED  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLED  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_DISABLED  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLED  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE_INTERRUPT_DISABLED  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE_INTERRUPT_ENABLED  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_NOT_RUN  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_DO_RUN  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_NOT_RESET  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_IS_RESET  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE_48KHZ  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE_44P1KHZ  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY1  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY2  = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED  = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY4  = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED  = 0x00000004,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY1  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED  = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY3  = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED  = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED  = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED  = 0x00000005,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED  = 0x00000006,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED  = 0x00000007,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_8_RESERVED  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_16  = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_20  = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_24  = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_32_RESERVED  = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_RESERVED  = 0x00000005,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_1  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_2  = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_3  = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_4  = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_5  = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_6  = 0x00000005,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_7  = 0x00000006,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_8  = 0x00000007,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_9_RESERVED  = 0x00000008,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_10_RESERVED  = 0x00000009,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_11_RESERVED  = 0x0000000a,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_12_RESERVED  = 0x0000000b,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_13_RESERVED  = 0x0000000c,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_14_RESERVED  = 0x0000000d,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_15_RESERVED  = 0x0000000e,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_16_RESERVED  = 0x0000000f,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS;

/*******************************************************
 * BLNDV Enums
 *******************************************************/

/*
 * BLNDV_CONTROL_BLND_MODE enum
 */

typedef enum BLNDV_CONTROL_BLND_MODE {
BLNDV_CONTROL_BLND_MODE_CURRENT_PIPE_ONLY = 0x00000000,
BLNDV_CONTROL_BLND_MODE_OTHER_PIPE_ONLY  = 0x00000001,
BLNDV_CONTROL_BLND_MODE_ALPHA_BLENDING_MODE = 0x00000002,
BLNDV_CONTROL_BLND_MODE_OTHER_STEREO_TYPE = 0x00000003,
} BLNDV_CONTROL_BLND_MODE;

/*
 * BLNDV_CONTROL_BLND_STEREO_TYPE enum
 */

typedef enum BLNDV_CONTROL_BLND_STEREO_TYPE {
BLNDV_CONTROL_BLND_STEREO_TYPE_NON_SINGLE_PIPE_STEREO = 0x00000000,
BLNDV_CONTROL_BLND_STEREO_TYPE_SIDE_BY_SIDE_SINGLE_PIPE_STEREO = 0x00000001,
BLNDV_CONTROL_BLND_STEREO_TYPE_TOP_BOTTOM_SINGLE_PIPE_STEREO = 0x00000002,
BLNDV_CONTROL_BLND_STEREO_TYPE_UNUSED    = 0x00000003,
} BLNDV_CONTROL_BLND_STEREO_TYPE;

/*
 * BLNDV_CONTROL_BLND_STEREO_POLARITY enum
 */

typedef enum BLNDV_CONTROL_BLND_STEREO_POLARITY {
BLNDV_CONTROL_BLND_STEREO_POLARITY_LOW   = 0x00000000,
BLNDV_CONTROL_BLND_STEREO_POLARITY_HIGH  = 0x00000001,
} BLNDV_CONTROL_BLND_STEREO_POLARITY;

/*
 * BLNDV_CONTROL_BLND_FEEDTHROUGH_EN enum
 */

typedef enum BLNDV_CONTROL_BLND_FEEDTHROUGH_EN {
BLNDV_CONTROL_BLND_FEEDTHROUGH_EN_FALSE  = 0x00000000,
BLNDV_CONTROL_BLND_FEEDTHROUGH_EN_TRUE   = 0x00000001,
} BLNDV_CONTROL_BLND_FEEDTHROUGH_EN;

/*
 * BLNDV_CONTROL_BLND_ALPHA_MODE enum
 */

typedef enum BLNDV_CONTROL_BLND_ALPHA_MODE {
BLNDV_CONTROL_BLND_ALPHA_MODE_CURRENT_PIXEL_ALPHA = 0x00000000,
BLNDV_CONTROL_BLND_ALPHA_MODE_PIXEL_ALPHA_COMBINED_GLOBAL_GAIN = 0x00000001,
BLNDV_CONTROL_BLND_ALPHA_MODE_GLOBAL_ALPHA_ONLY = 0x00000002,
BLNDV_CONTROL_BLND_ALPHA_MODE_UNUSED     = 0x00000003,
} BLNDV_CONTROL_BLND_ALPHA_MODE;

/*
 * BLNDV_CONTROL_BLND_ACTIVE_OVERLAP_ONLY enum
 */

typedef enum BLNDV_CONTROL_BLND_ACTIVE_OVERLAP_ONLY {
BLNDV_CONTROL_BLND_ACTIVE_OVERLAP_ONLY_FALSE  = 0x00000000,
BLNDV_CONTROL_BLND_ACTIVE_OVERLAP_ONLY_TRUE  = 0x00000001,
} BLNDV_CONTROL_BLND_ACTIVE_OVERLAP_ONLY;

/*
 * BLNDV_CONTROL_BLND_MULTIPLIED_MODE enum
 */

typedef enum BLNDV_CONTROL_BLND_MULTIPLIED_MODE {
BLNDV_CONTROL_BLND_MULTIPLIED_MODE_FALSE = 0x00000000,
BLNDV_CONTROL_BLND_MULTIPLIED_MODE_TRUE  = 0x00000001,
} BLNDV_CONTROL_BLND_MULTIPLIED_MODE;

/*
 * BLNDV_SM_CONTROL2_SM_MODE enum
 */

typedef enum BLNDV_SM_CONTROL2_SM_MODE {
BLNDV_SM_CONTROL2_SM_MODE_SINGLE_PLANE   = 0x00000000,
BLNDV_SM_CONTROL2_SM_MODE_ROW_SUBSAMPLING = 0x00000002,
BLNDV_SM_CONTROL2_SM_MODE_COLUMN_SUBSAMPLING = 0x00000004,
BLNDV_SM_CONTROL2_SM_MODE_CHECKERBOARD_SUBSAMPLING = 0x00000006,
} BLNDV_SM_CONTROL2_SM_MODE;

/*
 * BLNDV_SM_CONTROL2_SM_FRAME_ALTERNATE enum
 */

typedef enum BLNDV_SM_CONTROL2_SM_FRAME_ALTERNATE {
BLNDV_SM_CONTROL2_SM_FRAME_ALTERNATE_FALSE = 0x00000000,
BLNDV_SM_CONTROL2_SM_FRAME_ALTERNATE_TRUE = 0x00000001,
} BLNDV_SM_CONTROL2_SM_FRAME_ALTERNATE;

/*
 * BLNDV_SM_CONTROL2_SM_FIELD_ALTERNATE enum
 */

typedef enum BLNDV_SM_CONTROL2_SM_FIELD_ALTERNATE {
BLNDV_SM_CONTROL2_SM_FIELD_ALTERNATE_FALSE = 0x00000000,
BLNDV_SM_CONTROL2_SM_FIELD_ALTERNATE_TRUE = 0x00000001,
} BLNDV_SM_CONTROL2_SM_FIELD_ALTERNATE;

/*
 * BLNDV_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL enum
 */

typedef enum BLNDV_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL {
BLNDV_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL_NO_FORCE = 0x00000000,
BLNDV_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL_RESERVED = 0x00000001,
BLNDV_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL_FORCE_LOW = 0x00000002,
BLNDV_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL_FORCE_HIGH = 0x00000003,
} BLNDV_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL;

/*
 * BLNDV_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL enum
 */

typedef enum BLNDV_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL {
BLNDV_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL_NO_FORCE = 0x00000000,
BLNDV_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL_RESERVED = 0x00000001,
BLNDV_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL_FORCE_LOW = 0x00000002,
BLNDV_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL_FORCE_HIGH = 0x00000003,
} BLNDV_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL;

/*
 * BLNDV_CONTROL2_PTI_ENABLE enum
 */

typedef enum BLNDV_CONTROL2_PTI_ENABLE {
BLNDV_CONTROL2_PTI_ENABLE_FALSE          = 0x00000000,
BLNDV_CONTROL2_PTI_ENABLE_TRUE           = 0x00000001,
} BLNDV_CONTROL2_PTI_ENABLE;

/*
 * BLNDV_CONTROL2_BLND_SUPERAA_DEGAMMA_EN enum
 */

typedef enum BLNDV_CONTROL2_BLND_SUPERAA_DEGAMMA_EN {
BLNDV_CONTROL2_BLND_SUPERAA_DEGAMMA_EN_FALSE = 0x00000000,
BLNDV_CONTROL2_BLND_SUPERAA_DEGAMMA_EN_TRUE = 0x00000001,
} BLNDV_CONTROL2_BLND_SUPERAA_DEGAMMA_EN;

/*
 * BLNDV_CONTROL2_BLND_SUPERAA_REGAMMA_EN enum
 */

typedef enum BLNDV_CONTROL2_BLND_SUPERAA_REGAMMA_EN {
BLNDV_CONTROL2_BLND_SUPERAA_REGAMMA_EN_FALSE = 0x00000000,
BLNDV_CONTROL2_BLND_SUPERAA_REGAMMA_EN_TRUE = 0x00000001,
} BLNDV_CONTROL2_BLND_SUPERAA_REGAMMA_EN;

/*
 * BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK enum
 */

typedef enum BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK {
BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK_FALSE = 0x00000000,
BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK_TRUE = 0x00000001,
} BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK;

/*
 * BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK enum
 */

typedef enum BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK {
BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK_FALSE = 0x00000000,
BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK_TRUE = 0x00000001,
} BLNDV_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK;

/*
 * BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK enum
 */

typedef enum BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK {
BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK_FALSE = 0x00000000,
BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK;

/*
 * BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK enum
 */

typedef enum BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK {
BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK_FALSE = 0x00000000,
BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLNDV_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK;

/*
 * BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK enum
 */

typedef enum BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK {
BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK_FALSE = 0x00000000,
BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK;

/*
 * BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK enum
 */

typedef enum BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK {
BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK_FALSE = 0x00000000,
BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLNDV_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK;

/*
 * BLNDV_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK enum
 */

typedef enum BLNDV_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK {
BLNDV_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK_FALSE = 0x00000000,
BLNDV_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLNDV_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK;

/*
 * BLNDV_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK enum
 */

typedef enum BLNDV_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK {
BLNDV_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK_FALSE = 0x00000000,
BLNDV_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLNDV_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK;

/*
 * BLNDV_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE enum
 */

typedef enum BLNDV_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE {
BLNDV_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE_FALSE = 0x00000000,
BLNDV_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE_TRUE = 0x00000001,
} BLNDV_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE;

/*
 * BLNDV_DEBUG_BLND_CNV_MUX_SELECT enum
 */

typedef enum BLNDV_DEBUG_BLND_CNV_MUX_SELECT {
BLNDV_DEBUG_BLND_CNV_MUX_SELECT_LOW      = 0x00000000,
BLNDV_DEBUG_BLND_CNV_MUX_SELECT_HIGH     = 0x00000001,
} BLNDV_DEBUG_BLND_CNV_MUX_SELECT;

/*
 * BLNDV_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN enum
 */

typedef enum BLNDV_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN {
BLNDV_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN_FALSE = 0x00000000,
BLNDV_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN_TRUE = 0x00000001,
} BLNDV_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN;

/*******************************************************
 * LBV Enums
 *******************************************************/

/*
 * LBV_PIXEL_DEPTH enum
 */

typedef enum LBV_PIXEL_DEPTH {
PIXEL_DEPTH_30BPP                        = 0x00000000,
PIXEL_DEPTH_24BPP                        = 0x00000001,
PIXEL_DEPTH_18BPP                        = 0x00000002,
PIXEL_DEPTH_38BPP                        = 0x00000003,
} LBV_PIXEL_DEPTH;

/*
 * LBV_PIXEL_EXPAN_MODE enum
 */

typedef enum LBV_PIXEL_EXPAN_MODE {
PIXEL_EXPAN_MODE_ZERO_EXP                = 0x00000000,
PIXEL_EXPAN_MODE_DYN_EXP                 = 0x00000001,
} LBV_PIXEL_EXPAN_MODE;

/*
 * LBV_INTERLEAVE_EN enum
 */

typedef enum LBV_INTERLEAVE_EN {
INTERLEAVE_DIS                           = 0x00000000,
INTERLEAVE_EN                            = 0x00000001,
} LBV_INTERLEAVE_EN;

/*
 * LBV_PIXEL_REDUCE_MODE enum
 */

typedef enum LBV_PIXEL_REDUCE_MODE {
PIXEL_REDUCE_MODE_TRUNCATION             = 0x00000000,
PIXEL_REDUCE_MODE_ROUNDING               = 0x00000001,
} LBV_PIXEL_REDUCE_MODE;

/*
 * LBV_DYNAMIC_PIXEL_DEPTH enum
 */

typedef enum LBV_DYNAMIC_PIXEL_DEPTH {
DYNAMIC_PIXEL_DEPTH_36BPP                = 0x00000000,
DYNAMIC_PIXEL_DEPTH_30BPP                = 0x00000001,
} LBV_DYNAMIC_PIXEL_DEPTH;

/*
 * LBV_DITHER_EN enum
 */

typedef enum LBV_DITHER_EN {
DITHER_DIS                               = 0x00000000,
DITHER_EN                                = 0x00000001,
} LBV_DITHER_EN;

/*
 * LBV_DOWNSCALE_PREFETCH_EN enum
 */

typedef enum LBV_DOWNSCALE_PREFETCH_EN {
DOWNSCALE_PREFETCH_DIS                   = 0x00000000,
DOWNSCALE_PREFETCH_EN                    = 0x00000001,
} LBV_DOWNSCALE_PREFETCH_EN;

/*
 * LBV_MEMORY_CONFIG enum
 */

typedef enum LBV_MEMORY_CONFIG {
MEMORY_CONFIG_0                          = 0x00000000,
MEMORY_CONFIG_1                          = 0x00000001,
MEMORY_CONFIG_2                          = 0x00000002,
MEMORY_CONFIG_3                          = 0x00000003,
} LBV_MEMORY_CONFIG;

/*
 * LBV_SYNC_RESET_SEL2 enum
 */

typedef enum LBV_SYNC_RESET_SEL2 {
SYNC_RESET_SEL2_VBLANK                   = 0x00000000,
SYNC_RESET_SEL2_VSYNC                    = 0x00000001,
} LBV_SYNC_RESET_SEL2;

/*
 * LBV_SYNC_DURATION enum
 */

typedef enum LBV_SYNC_DURATION {
SYNC_DURATION_16                         = 0x00000000,
SYNC_DURATION_32                         = 0x00000001,
SYNC_DURATION_64                         = 0x00000002,
SYNC_DURATION_128                        = 0x00000003,
} LBV_SYNC_DURATION;

/*******************************************************
 * CRTC Enums
 *******************************************************/

/*
 * CRTC_CONTROL_CRTC_START_POINT_CNTL enum
 */

typedef enum CRTC_CONTROL_CRTC_START_POINT_CNTL {
CRTC_CONTROL_CRTC_START_POINT_CNTL_NORMAL = 0x00000000,
CRTC_CONTROL_CRTC_START_POINT_CNTL_DP    = 0x00000001,
} CRTC_CONTROL_CRTC_START_POINT_CNTL;

/*
 * CRTC_CONTROL_CRTC_FIELD_NUMBER_CNTL enum
 */

typedef enum CRTC_CONTROL_CRTC_FIELD_NUMBER_CNTL {
CRTC_CONTROL_CRTC_FIELD_NUMBER_CNTL_NORMAL = 0x00000000,
CRTC_CONTROL_CRTC_FIELD_NUMBER_CNTL_DP   = 0x00000001,
} CRTC_CONTROL_CRTC_FIELD_NUMBER_CNTL;

/*
 * CRTC_CONTROL_CRTC_DISABLE_POINT_CNTL enum
 */

typedef enum CRTC_CONTROL_CRTC_DISABLE_POINT_CNTL {
CRTC_CONTROL_CRTC_DISABLE_POINT_CNTL_DISABLE  = 0x00000000,
CRTC_CONTROL_CRTC_DISABLE_POINT_CNTL_DISABLE_CURRENT  = 0x00000001,
CRTC_CONTROL_CRTC_DISABLE_POINT_CNTL_RESERVED  = 0x00000002,
CRTC_CONTROL_CRTC_DISABLE_POINT_CNTL_DISABLE_FIRST  = 0x00000003,
} CRTC_CONTROL_CRTC_DISABLE_POINT_CNTL;

/*
 * CRTC_CONTROL_CRTC_FIELD_NUMBER_POLARITY enum
 */

typedef enum CRTC_CONTROL_CRTC_FIELD_NUMBER_POLARITY {
CRTC_CONTROL_CRTC_FIELD_NUMBER_POLARITY_FALSE  = 0x00000000,
CRTC_CONTROL_CRTC_FIELD_NUMBER_POLARITY_TRUE  = 0x00000001,
} CRTC_CONTROL_CRTC_FIELD_NUMBER_POLARITY;

/*
 * CRTC_CONTROL_CRTC_DISP_READ_REQUEST_DISABLE enum
 */

typedef enum CRTC_CONTROL_CRTC_DISP_READ_REQUEST_DISABLE {
CRTC_CONTROL_CRTC_DISP_READ_REQUEST_DISABLE_FALSE  = 0x00000000,
CRTC_CONTROL_CRTC_DISP_READ_REQUEST_DISABLE_TRUE  = 0x00000001,
} CRTC_CONTROL_CRTC_DISP_READ_REQUEST_DISABLE;

/*
 * CRTC_CONTROL_CRTC_SOF_PULL_EN enum
 */

typedef enum CRTC_CONTROL_CRTC_SOF_PULL_EN {
CRTC_CONTROL_CRTC_SOF_PULL_EN_FALSE      = 0x00000000,
CRTC_CONTROL_CRTC_SOF_PULL_EN_TRUE       = 0x00000001,
} CRTC_CONTROL_CRTC_SOF_PULL_EN;

/*
 * CRTC_H_SYNC_B_CNTL_CRTC_H_SYNC_B_POL enum
 */

typedef enum CRTC_H_SYNC_B_CNTL_CRTC_H_SYNC_B_POL {
CRTC_H_SYNC_B_CNTL_CRTC_H_SYNC_B_POL_FALSE  = 0x00000000,
CRTC_H_SYNC_B_CNTL_CRTC_H_SYNC_B_POL_TRUE  = 0x00000001,
} CRTC_H_SYNC_B_CNTL_CRTC_H_SYNC_B_POL;

/*
 * CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MAX_SEL enum
 */

typedef enum CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MAX_SEL {
CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MAX_SEL_FALSE  = 0x00000000,
CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MAX_SEL_TRUE  = 0x00000001,
} CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MAX_SEL;

/*
 * CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MIN_SEL enum
 */

typedef enum CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MIN_SEL {
CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MIN_SEL_FALSE  = 0x00000000,
CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MIN_SEL_TRUE  = 0x00000001,
} CRTC_V_TOTAL_CONTROL_CRTC_V_TOTAL_MIN_SEL;

/*
 * CRTC_V_TOTAL_CONTROL_CRTC_SET_V_TOTAL_MIN_MASK_EN enum
 */

typedef enum CRTC_V_TOTAL_CONTROL_CRTC_SET_V_TOTAL_MIN_MASK_EN {
CRTC_V_TOTAL_CONTROL_CRTC_SET_V_TOTAL_MIN_MASK_EN_FALSE  = 0x00000000,
CRTC_V_TOTAL_CONTROL_CRTC_SET_V_TOTAL_MIN_MASK_EN_TRUE  = 0x00000001,
} CRTC_V_TOTAL_CONTROL_CRTC_SET_V_TOTAL_MIN_MASK_EN;

/*
 * CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_TO_MASTER_VSYNC enum
 */

typedef enum CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_TO_MASTER_VSYNC {
CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_TO_MASTER_VSYNC_DISABLE = 0x00000000,
CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_TO_MASTER_VSYNC_ENABLE  = 0x00000001,
} CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_TO_MASTER_VSYNC;

/*
 * CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_ON_EVENT enum
 */

typedef enum CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_ON_EVENT {
CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_ON_EVENT_DISABLE = 0x00000000,
CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_ON_EVENT_ENABLE  = 0x00000001,
} CRTC_V_TOTAL_CONTROL_CRTC_FORCE_LOCK_ON_EVENT;

/*
 * CRTC_V_TOTAL_INT_STATUS_CRTC_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK enum
 */

typedef enum CRTC_V_TOTAL_INT_STATUS_CRTC_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK {
CRTC_V_TOTAL_INT_STATUS_CRTC_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK_FALSE = 0x00000000,
CRTC_V_TOTAL_INT_STATUS_CRTC_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK_TRUE  = 0x00000001,
} CRTC_V_TOTAL_INT_STATUS_CRTC_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK;

/*
 * CRTC_VSYNC_NOM_INT_STATUS_CRTC_VSYNC_NOM_INT_CLEAR enum
 */

typedef enum CRTC_VSYNC_NOM_INT_STATUS_CRTC_VSYNC_NOM_INT_CLEAR {
CRTC_VSYNC_NOM_INT_STATUS_CRTC_VSYNC_NOM_INT_CLEAR_FALSE = 0x00000000,
CRTC_VSYNC_NOM_INT_STATUS_CRTC_VSYNC_NOM_INT_CLEAR_TRUE  = 0x00000001,
} CRTC_VSYNC_NOM_INT_STATUS_CRTC_VSYNC_NOM_INT_CLEAR;

/*
 * CRTC_V_SYNC_B_CNTL_CRTC_V_SYNC_B_POL enum
 */

typedef enum CRTC_V_SYNC_B_CNTL_CRTC_V_SYNC_B_POL {
CRTC_V_SYNC_B_CNTL_CRTC_V_SYNC_B_POL_FALSE  = 0x00000000,
CRTC_V_SYNC_B_CNTL_CRTC_V_SYNC_B_POL_TRUE  = 0x00000001,
} CRTC_V_SYNC_B_CNTL_CRTC_V_SYNC_B_POL;

/*
 * CRTC_DTMTEST_CNTL_CRTC_DTMTEST_CRTC_EN enum
 */

typedef enum CRTC_DTMTEST_CNTL_CRTC_DTMTEST_CRTC_EN {
CRTC_DTMTEST_CNTL_CRTC_DTMTEST_CRTC_EN_FALSE  = 0x00000000,
CRTC_DTMTEST_CNTL_CRTC_DTMTEST_CRTC_EN_TRUE  = 0x00000001,
} CRTC_DTMTEST_CNTL_CRTC_DTMTEST_CRTC_EN;

/*
 * CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT enum
 */

typedef enum CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT {
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_VSYNCA_OTHER  = 0x00000001,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_HSYNCA_OTHER  = 0x00000002,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_GENERICF  = 0x00000005,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_GENERICE  = 0x00000006,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_VSYNCA  = 0x00000007,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_HSYNCA  = 0x00000008,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_VSYNCB  = 0x00000009,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_HSYNCB  = 0x0000000a,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_HPD1  = 0x0000000b,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_HPD2  = 0x0000000c,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_GENERICD  = 0x0000000d,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_GENERICC  = 0x0000000e,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_IGSL0  = 0x00000010,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_IGSL1  = 0x00000011,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_IGSL2  = 0x00000012,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_IBLON  = 0x00000013,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_GENERICA  = 0x00000014,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_GENERICB  = 0x00000015,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_IGSL_ALLOW  = 0x00000016,
CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT_MANUAL_FLOW  = 0x00000017,
} CRTC_TRIGA_CNTL_CRTC_TRIGA_SOURCE_SELECT;

/*
 * CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT enum
 */

typedef enum CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT {
CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT_INTERLACE  = 0x00000001,
CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT_GENERICA  = 0x00000002,
CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT_GENERICB  = 0x00000003,
CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT_HSYNCA  = 0x00000004,
CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT_HSYNCB  = 0x00000005,
CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT_VIDEO  = 0x00000006,
CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT_GENERICC  = 0x00000007,
} CRTC_TRIGA_CNTL_CRTC_TRIGA_POLARITY_SELECT;

/*
 * CRTC_TRIGA_CNTL_CRTC_TRIGA_RESYNC_BYPASS_EN enum
 */

typedef enum CRTC_TRIGA_CNTL_CRTC_TRIGA_RESYNC_BYPASS_EN {
CRTC_TRIGA_CNTL_CRTC_TRIGA_RESYNC_BYPASS_EN_FALSE  = 0x00000000,
CRTC_TRIGA_CNTL_CRTC_TRIGA_RESYNC_BYPASS_EN_TRUE  = 0x00000001,
} CRTC_TRIGA_CNTL_CRTC_TRIGA_RESYNC_BYPASS_EN;

/*
 * CRTC_TRIGA_CNTL_CRTC_TRIGA_CLEAR enum
 */

typedef enum CRTC_TRIGA_CNTL_CRTC_TRIGA_CLEAR {
CRTC_TRIGA_CNTL_CRTC_TRIGA_CLEAR_FALSE   = 0x00000000,
CRTC_TRIGA_CNTL_CRTC_TRIGA_CLEAR_TRUE    = 0x00000001,
} CRTC_TRIGA_CNTL_CRTC_TRIGA_CLEAR;

/*
 * CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT enum
 */

typedef enum CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT {
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_VSYNCA_OTHER  = 0x00000001,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_HSYNCA_OTHER  = 0x00000002,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_GENERICF  = 0x00000005,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_GENERICE  = 0x00000006,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_VSYNCA  = 0x00000007,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_HSYNCA  = 0x00000008,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_VSYNCB  = 0x00000009,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_HSYNCB  = 0x0000000a,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_HPD1  = 0x0000000b,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_HPD2  = 0x0000000c,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_GENERICD  = 0x0000000d,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_GENERICC  = 0x0000000e,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_IGSL0  = 0x00000010,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_IGSL1  = 0x00000011,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_IGSL2  = 0x00000012,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_IBLON  = 0x00000013,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_GENERICA  = 0x00000014,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_GENERICB  = 0x00000015,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_IGSL_ALLOW  = 0x00000016,
CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT_MANUAL_FLOW  = 0x00000017,
} CRTC_TRIGB_CNTL_CRTC_TRIGB_SOURCE_SELECT;

/*
 * CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT enum
 */

typedef enum CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT {
CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT_INTERLACE  = 0x00000001,
CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT_GENERICA  = 0x00000002,
CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT_GENERICB  = 0x00000003,
CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT_HSYNCA  = 0x00000004,
CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT_HSYNCB  = 0x00000005,
CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT_VIDEO  = 0x00000006,
CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT_GENERICC  = 0x00000007,
} CRTC_TRIGB_CNTL_CRTC_TRIGB_POLARITY_SELECT;

/*
 * CRTC_TRIGB_CNTL_CRTC_TRIGB_RESYNC_BYPASS_EN enum
 */

typedef enum CRTC_TRIGB_CNTL_CRTC_TRIGB_RESYNC_BYPASS_EN {
CRTC_TRIGB_CNTL_CRTC_TRIGB_RESYNC_BYPASS_EN_FALSE  = 0x00000000,
CRTC_TRIGB_CNTL_CRTC_TRIGB_RESYNC_BYPASS_EN_TRUE  = 0x00000001,
} CRTC_TRIGB_CNTL_CRTC_TRIGB_RESYNC_BYPASS_EN;

/*
 * CRTC_TRIGB_CNTL_CRTC_TRIGB_CLEAR enum
 */

typedef enum CRTC_TRIGB_CNTL_CRTC_TRIGB_CLEAR {
CRTC_TRIGB_CNTL_CRTC_TRIGB_CLEAR_FALSE   = 0x00000000,
CRTC_TRIGB_CNTL_CRTC_TRIGB_CLEAR_TRUE    = 0x00000001,
} CRTC_TRIGB_CNTL_CRTC_TRIGB_CLEAR;

/*
 * CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_MODE enum
 */

typedef enum CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_MODE {
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_MODE_DISABLE  = 0x00000000,
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_MODE_HCOUNT  = 0x00000001,
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_MODE_HCOUNT_VCOUNT  = 0x00000002,
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_MODE_RESERVED  = 0x00000003,
} CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_MODE;

/*
 * CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CHECK enum
 */

typedef enum CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CHECK {
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CHECK_FALSE  = 0x00000000,
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CHECK_TRUE  = 0x00000001,
} CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CHECK;

/*
 * CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_TRIG_SEL enum
 */

typedef enum CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_TRIG_SEL {
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_TRIG_SEL_FALSE  = 0x00000000,
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_TRIG_SEL_TRUE  = 0x00000001,
} CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_TRIG_SEL;

/*
 * CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CLEAR enum
 */

typedef enum CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CLEAR {
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CLEAR_FALSE = 0x00000000,
CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CLEAR_TRUE  = 0x00000001,
} CRTC_FORCE_COUNT_NOW_CNTL_CRTC_FORCE_COUNT_NOW_CLEAR;

/*
 * CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT enum
 */

typedef enum CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT {
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_LOGIC0  = 0x00000000,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_GENERICF  = 0x00000001,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_GENERICE  = 0x00000002,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_HPD1  = 0x00000003,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_HPD2  = 0x00000004,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_DDC1DATA  = 0x00000005,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_DDC1CLK  = 0x00000006,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_DDC2DATA  = 0x00000007,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_DDC2CLK  = 0x00000008,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_DVOCLK  = 0x00000009,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_MANUAL  = 0x0000000a,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_LOGIC1  = 0x0000000b,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_GENERICB  = 0x0000000c,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_GENERICA  = 0x0000000d,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_GENERICD  = 0x0000000e,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT_GENERICC  = 0x0000000f,
} CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_SOURCE_SELECT;

/*
 * CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_POLARITY enum
 */

typedef enum CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_POLARITY {
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_POLARITY_FALSE  = 0x00000000,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_POLARITY_TRUE  = 0x00000001,
} CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_POLARITY;

/*
 * CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_GRANULARITY enum
 */

typedef enum CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_GRANULARITY {
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_GRANULARITY_FALSE  = 0x00000000,
CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_GRANULARITY_TRUE  = 0x00000001,
} CRTC_FLOW_CONTROL_CRTC_FLOW_CONTROL_GRANULARITY;

/*
 * CRTC_STEREO_FORCE_NEXT_EYE_CRTC_STEREO_FORCE_NEXT_EYE enum
 */

typedef enum CRTC_STEREO_FORCE_NEXT_EYE_CRTC_STEREO_FORCE_NEXT_EYE {
CRTC_STEREO_FORCE_NEXT_EYE_CRTC_STEREO_FORCE_NEXT_EYE_NO  = 0x00000000,
CRTC_STEREO_FORCE_NEXT_EYE_CRTC_STEREO_FORCE_NEXT_EYE_RIGHT  = 0x00000001,
CRTC_STEREO_FORCE_NEXT_EYE_CRTC_STEREO_FORCE_NEXT_EYE_LEFT  = 0x00000002,
CRTC_STEREO_FORCE_NEXT_EYE_CRTC_STEREO_FORCE_NEXT_EYE_RESERVED  = 0x00000003,
} CRTC_STEREO_FORCE_NEXT_EYE_CRTC_STEREO_FORCE_NEXT_EYE;

/*
 * CRTC_CONTROL_CRTC_MASTER_EN enum
 */

typedef enum CRTC_CONTROL_CRTC_MASTER_EN {
CRTC_CONTROL_CRTC_MASTER_EN_FALSE        = 0x00000000,
CRTC_CONTROL_CRTC_MASTER_EN_TRUE         = 0x00000001,
} CRTC_CONTROL_CRTC_MASTER_EN;

/*
 * CRTC_BLANK_CONTROL_CRTC_BLANK_DATA_EN enum
 */

typedef enum CRTC_BLANK_CONTROL_CRTC_BLANK_DATA_EN {
CRTC_BLANK_CONTROL_CRTC_BLANK_DATA_EN_FALSE  = 0x00000000,
CRTC_BLANK_CONTROL_CRTC_BLANK_DATA_EN_TRUE  = 0x00000001,
} CRTC_BLANK_CONTROL_CRTC_BLANK_DATA_EN;

/*
 * CRTC_BLANK_CONTROL_CRTC_BLANK_DE_MODE enum
 */

typedef enum CRTC_BLANK_CONTROL_CRTC_BLANK_DE_MODE {
CRTC_BLANK_CONTROL_CRTC_BLANK_DE_MODE_FALSE  = 0x00000000,
CRTC_BLANK_CONTROL_CRTC_BLANK_DE_MODE_TRUE  = 0x00000001,
} CRTC_BLANK_CONTROL_CRTC_BLANK_DE_MODE;

/*
 * CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_ENABLE enum
 */

typedef enum CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_ENABLE {
CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_ENABLE_FALSE  = 0x00000000,
CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_ENABLE_TRUE  = 0x00000001,
} CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_ENABLE;

/*
 * CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_FORCE_NEXT_FIELD enum
 */

typedef enum CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_FORCE_NEXT_FIELD {
CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_FORCE_NEXT_FIELD_NOT  = 0x00000000,
CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_FORCE_NEXT_FIELD_ODD  = 0x00000001,
CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_FORCE_NEXT_FIELD_EVEN  = 0x00000002,
CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_FORCE_NEXT_FIELD_NOT2  = 0x00000003,
} CRTC_INTERLACE_CONTROL_CRTC_INTERLACE_FORCE_NEXT_FIELD;

/*
 * CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_INDICATION_OUTPUT_POLARITY enum
 */

typedef enum CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_INDICATION_OUTPUT_POLARITY {
CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_INDICATION_OUTPUT_POLARITY_FALSE  = 0x00000000,
CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_INDICATION_OUTPUT_POLARITY_TRUE  = 0x00000001,
} CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_INDICATION_OUTPUT_POLARITY;

/*
 * CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_ALIGNMENT enum
 */

typedef enum CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_ALIGNMENT {
CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_ALIGNMENT_FALSE  = 0x00000000,
CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_ALIGNMENT_TRUE  = 0x00000001,
} CRTC_FIELD_INDICATION_CONTROL_CRTC_FIELD_ALIGNMENT;

/*
 * CRTC_COUNT_CONTROL_CRTC_HORZ_COUNT_BY2_EN enum
 */

typedef enum CRTC_COUNT_CONTROL_CRTC_HORZ_COUNT_BY2_EN {
CRTC_COUNT_CONTROL_CRTC_HORZ_COUNT_BY2_EN_FALSE  = 0x00000000,
CRTC_COUNT_CONTROL_CRTC_HORZ_COUNT_BY2_EN_TRUE  = 0x00000001,
} CRTC_COUNT_CONTROL_CRTC_HORZ_COUNT_BY2_EN;

/*
 * CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE_CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE enum
 */

typedef enum CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE_CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE {
CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE_CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE_FALSE = 0x00000000,
CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE_CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE_TRUE  = 0x00000001,
} CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE_CRTC_MANUAL_FORCE_VSYNC_NEXT_LINE;

/*
 * CRTC_VERT_SYNC_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_CLEAR enum
 */

typedef enum CRTC_VERT_SYNC_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_CLEAR {
CRTC_VERT_SYNC_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_CLEAR_FALSE = 0x00000000,
CRTC_VERT_SYNC_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_CLEAR_TRUE  = 0x00000001,
} CRTC_VERT_SYNC_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_CLEAR;

/*
 * CRTC_VERT_SYNC_CONTROL_CRTC_AUTO_FORCE_VSYNC_MODE enum
 */

typedef enum CRTC_VERT_SYNC_CONTROL_CRTC_AUTO_FORCE_VSYNC_MODE {
CRTC_VERT_SYNC_CONTROL_CRTC_AUTO_FORCE_VSYNC_MODE_DISABLE  = 0x00000000,
CRTC_VERT_SYNC_CONTROL_CRTC_AUTO_FORCE_VSYNC_MODE_TRIGGERA  = 0x00000001,
CRTC_VERT_SYNC_CONTROL_CRTC_AUTO_FORCE_VSYNC_MODE_TRIGGERB  = 0x00000002,
CRTC_VERT_SYNC_CONTROL_CRTC_AUTO_FORCE_VSYNC_MODE_RESERVED  = 0x00000003,
} CRTC_VERT_SYNC_CONTROL_CRTC_AUTO_FORCE_VSYNC_MODE;

/*
 * CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_OUTPUT_POLARITY enum
 */

typedef enum CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_OUTPUT_POLARITY {
CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_OUTPUT_POLARITY_FALSE  = 0x00000000,
CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_OUTPUT_POLARITY_TRUE  = 0x00000001,
} CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_OUTPUT_POLARITY;

/*
 * CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_SELECT_POLARITY enum
 */

typedef enum CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_SELECT_POLARITY {
CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_SELECT_POLARITY_FALSE  = 0x00000000,
CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_SELECT_POLARITY_TRUE  = 0x00000001,
} CRTC_STEREO_CONTROL_CRTC_STEREO_SYNC_SELECT_POLARITY;

/*
 * CRTC_STEREO_CONTROL_CRTC_STEREO_EYE_FLAG_POLARITY enum
 */

typedef enum CRTC_STEREO_CONTROL_CRTC_STEREO_EYE_FLAG_POLARITY {
CRTC_STEREO_CONTROL_CRTC_STEREO_EYE_FLAG_POLARITY_FALSE  = 0x00000000,
CRTC_STEREO_CONTROL_CRTC_STEREO_EYE_FLAG_POLARITY_TRUE  = 0x00000001,
} CRTC_STEREO_CONTROL_CRTC_STEREO_EYE_FLAG_POLARITY;

/*
 * CRTC_STEREO_CONTROL_CRTC_STEREO_EN enum
 */

typedef enum CRTC_STEREO_CONTROL_CRTC_STEREO_EN {
CRTC_STEREO_CONTROL_CRTC_STEREO_EN_FALSE  = 0x00000000,
CRTC_STEREO_CONTROL_CRTC_STEREO_EN_TRUE  = 0x00000001,
} CRTC_STEREO_CONTROL_CRTC_STEREO_EN;

/*
 * CRTC_SNAPSHOT_STATUS_CRTC_SNAPSHOT_CLEAR enum
 */

typedef enum CRTC_SNAPSHOT_STATUS_CRTC_SNAPSHOT_CLEAR {
CRTC_SNAPSHOT_STATUS_CRTC_SNAPSHOT_CLEAR_FALSE = 0x00000000,
CRTC_SNAPSHOT_STATUS_CRTC_SNAPSHOT_CLEAR_TRUE  = 0x00000001,
} CRTC_SNAPSHOT_STATUS_CRTC_SNAPSHOT_CLEAR;

/*
 * CRTC_SNAPSHOT_CONTROL_CRTC_AUTO_SNAPSHOT_TRIG_SEL enum
 */

typedef enum CRTC_SNAPSHOT_CONTROL_CRTC_AUTO_SNAPSHOT_TRIG_SEL {
CRTC_SNAPSHOT_CONTROL_CRTC_AUTO_SNAPSHOT_TRIG_SEL_DISABLE  = 0x00000000,
CRTC_SNAPSHOT_CONTROL_CRTC_AUTO_SNAPSHOT_TRIG_SEL_TRIGGERA  = 0x00000001,
CRTC_SNAPSHOT_CONTROL_CRTC_AUTO_SNAPSHOT_TRIG_SEL_TRIGGERB  = 0x00000002,
CRTC_SNAPSHOT_CONTROL_CRTC_AUTO_SNAPSHOT_TRIG_SEL_RESERVED  = 0x00000003,
} CRTC_SNAPSHOT_CONTROL_CRTC_AUTO_SNAPSHOT_TRIG_SEL;

/*
 * CRTC_START_LINE_CONTROL_CRTC_PROGRESSIVE_START_LINE_EARLY enum
 */

typedef enum CRTC_START_LINE_CONTROL_CRTC_PROGRESSIVE_START_LINE_EARLY {
CRTC_START_LINE_CONTROL_CRTC_PROGRESSIVE_START_LINE_EARLY_FALSE = 0x00000000,
CRTC_START_LINE_CONTROL_CRTC_PROGRESSIVE_START_LINE_EARLY_TRUE  = 0x00000001,
} CRTC_START_LINE_CONTROL_CRTC_PROGRESSIVE_START_LINE_EARLY;

/*
 * CRTC_START_LINE_CONTROL_CRTC_INTERLACE_START_LINE_EARLY enum
 */

typedef enum CRTC_START_LINE_CONTROL_CRTC_INTERLACE_START_LINE_EARLY {
CRTC_START_LINE_CONTROL_CRTC_INTERLACE_START_LINE_EARLY_FALSE = 0x00000000,
CRTC_START_LINE_CONTROL_CRTC_INTERLACE_START_LINE_EARLY_TRUE  = 0x00000001,
} CRTC_START_LINE_CONTROL_CRTC_INTERLACE_START_LINE_EARLY;

/*
 * CRTC_START_LINE_CONTROL_CRTC_LEGACY_REQUESTOR_EN enum
 */

typedef enum CRTC_START_LINE_CONTROL_CRTC_LEGACY_REQUESTOR_EN {
CRTC_START_LINE_CONTROL_CRTC_LEGACY_REQUESTOR_EN_FALSE  = 0x00000000,
CRTC_START_LINE_CONTROL_CRTC_LEGACY_REQUESTOR_EN_TRUE  = 0x00000001,
} CRTC_START_LINE_CONTROL_CRTC_LEGACY_REQUESTOR_EN;

/*
 * CRTC_START_LINE_CONTROL_CRTC_PREFETCH_EN enum
 */

typedef enum CRTC_START_LINE_CONTROL_CRTC_PREFETCH_EN {
CRTC_START_LINE_CONTROL_CRTC_PREFETCH_EN_FALSE  = 0x00000000,
CRTC_START_LINE_CONTROL_CRTC_PREFETCH_EN_TRUE  = 0x00000001,
} CRTC_START_LINE_CONTROL_CRTC_PREFETCH_EN;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_MSK enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_MSK {
CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_MSK_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_MSK_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_MSK;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_TYPE enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_TYPE {
CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_TYPE_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_TYPE_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_SNAPSHOT_INT_TYPE;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_MSK enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_MSK {
CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_MSK_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_MSK_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_MSK;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_TYPE enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_TYPE {
CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_TYPE_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_TYPE_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_V_UPDATE_INT_TYPE;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_MSK enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_MSK {
CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_MSK_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_MSK_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_MSK;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_TYPE enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_TYPE {
CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_TYPE_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_TYPE_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_FORCE_COUNT_NOW_INT_TYPE;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_MSK enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_MSK {
CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_MSK_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_MSK_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_MSK;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_TYPE enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_TYPE {
CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_TYPE_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_TYPE_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_FORCE_VSYNC_NEXT_LINE_INT_TYPE;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_MSK enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_MSK {
CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_MSK_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_MSK_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_MSK;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_TYPE enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_TYPE {
CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_TYPE_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_TYPE_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_TRIGA_INT_TYPE;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_MSK enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_MSK {
CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_MSK_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_MSK_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_MSK;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_TYPE enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_TYPE {
CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_TYPE_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_TYPE_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_TRIGB_INT_TYPE;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_MSK enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_MSK {
CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_MSK_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_MSK_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_MSK;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_TYPE enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_TYPE {
CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_TYPE_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_TYPE_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_VSYNC_NOM_INT_TYPE;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_MSK enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_MSK {
CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_MSK_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_MSK_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_MSK;

/*
 * CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_TYPE enum
 */

typedef enum CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_TYPE {
CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_TYPE_FALSE  = 0x00000000,
CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_TYPE_TRUE  = 0x00000001,
} CRTC_INTERRUPT_CONTROL_CRTC_GSL_VSYNC_GAP_INT_TYPE;

/*
 * CRTC_UPDATE_LOCK_CRTC_UPDATE_LOCK enum
 */

typedef enum CRTC_UPDATE_LOCK_CRTC_UPDATE_LOCK {
CRTC_UPDATE_LOCK_CRTC_UPDATE_LOCK_FALSE  = 0x00000000,
CRTC_UPDATE_LOCK_CRTC_UPDATE_LOCK_TRUE   = 0x00000001,
} CRTC_UPDATE_LOCK_CRTC_UPDATE_LOCK;

/*
 * CRTC_DOUBLE_BUFFER_CONTROL_CRTC_UPDATE_INSTANTLY enum
 */

typedef enum CRTC_DOUBLE_BUFFER_CONTROL_CRTC_UPDATE_INSTANTLY {
CRTC_DOUBLE_BUFFER_CONTROL_CRTC_UPDATE_INSTANTLY_FALSE  = 0x00000000,
CRTC_DOUBLE_BUFFER_CONTROL_CRTC_UPDATE_INSTANTLY_TRUE  = 0x00000001,
} CRTC_DOUBLE_BUFFER_CONTROL_CRTC_UPDATE_INSTANTLY;

/*
 * CRTC_DOUBLE_BUFFER_CONTROL_CRTC_BLANK_DATA_DOUBLE_BUFFER_EN enum
 */

typedef enum CRTC_DOUBLE_BUFFER_CONTROL_CRTC_BLANK_DATA_DOUBLE_BUFFER_EN {
CRTC_DOUBLE_BUFFER_CONTROL_CRTC_BLANK_DATA_DOUBLE_BUFFER_EN_FALSE  = 0x00000000,
CRTC_DOUBLE_BUFFER_CONTROL_CRTC_BLANK_DATA_DOUBLE_BUFFER_EN_TRUE  = 0x00000001,
} CRTC_DOUBLE_BUFFER_CONTROL_CRTC_BLANK_DATA_DOUBLE_BUFFER_EN;

/*
 * CRTC_DOUBLE_BUFFER_CONTROL_CRTC_RANGE_TIMING_DBUF_UPDATE_MODE enum
 */

typedef enum CRTC_DOUBLE_BUFFER_CONTROL_CRTC_RANGE_TIMING_DBUF_UPDATE_MODE {
CRTC_DOUBLE_BUFFER_CONTROL_CRTC_RANGE_TIMING_DBUF_UPDATE_MODE_0  = 0x00000000,
CRTC_DOUBLE_BUFFER_CONTROL_CRTC_RANGE_TIMING_DBUF_UPDATE_MODE_1  = 0x00000001,
} CRTC_DOUBLE_BUFFER_CONTROL_CRTC_RANGE_TIMING_DBUF_UPDATE_MODE;

/*
 * CRTC_VGA_PARAMETER_CAPTURE_MODE_CRTC_VGA_PARAMETER_CAPTURE_MODE enum
 */

typedef enum CRTC_VGA_PARAMETER_CAPTURE_MODE_CRTC_VGA_PARAMETER_CAPTURE_MODE {
CRTC_VGA_PARAMETER_CAPTURE_MODE_CRTC_VGA_PARAMETER_CAPTURE_MODE_FALSE  = 0x00000000,
CRTC_VGA_PARAMETER_CAPTURE_MODE_CRTC_VGA_PARAMETER_CAPTURE_MODE_TRUE  = 0x00000001,
} CRTC_VGA_PARAMETER_CAPTURE_MODE_CRTC_VGA_PARAMETER_CAPTURE_MODE;

/*
 * CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_EN enum
 */

typedef enum CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_EN {
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_EN_FALSE  = 0x00000000,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_EN_TRUE  = 0x00000001,
} CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_EN;

/*
 * CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE enum
 */

typedef enum CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE {
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE_RGB  = 0x00000000,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE_YCBCR601  = 0x00000001,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE_YCBCR709  = 0x00000002,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE_VBARS  = 0x00000003,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE_HBARS  = 0x00000004,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE_SRRGB  = 0x00000005,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE_DRRGB  = 0x00000006,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE_XRBIAS  = 0x00000007,
} CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_MODE;

/*
 * CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_DYNAMIC_RANGE enum
 */

typedef enum CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_DYNAMIC_RANGE {
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_DYNAMIC_RANGE_FALSE  = 0x00000000,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_DYNAMIC_RANGE_TRUE  = 0x00000001,
} CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_DYNAMIC_RANGE;

/*
 * CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_COLOR_FORMAT enum
 */

typedef enum CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_COLOR_FORMAT {
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_COLOR_FORMAT_6BPC  = 0x00000000,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_COLOR_FORMAT_8BPC  = 0x00000001,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_COLOR_FORMAT_10BPC  = 0x00000002,
CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_COLOR_FORMAT_RESERVED  = 0x00000003,
} CRTC_TEST_PATTERN_CONTROL_CRTC_TEST_PATTERN_COLOR_FORMAT;

/*
 * MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK enum
 */

typedef enum MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK {
MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK_FALSE  = 0x00000000,
MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK_TRUE  = 0x00000001,
} MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK;

/*
 * MASTER_UPDATE_LOCK_GSL_CONTROL_MASTER_UPDATE_LOCK enum
 */

typedef enum MASTER_UPDATE_LOCK_GSL_CONTROL_MASTER_UPDATE_LOCK {
MASTER_UPDATE_LOCK_GSL_CONTROL_MASTER_UPDATE_LOCK_FALSE  = 0x00000000,
MASTER_UPDATE_LOCK_GSL_CONTROL_MASTER_UPDATE_LOCK_TRUE  = 0x00000001,
} MASTER_UPDATE_LOCK_GSL_CONTROL_MASTER_UPDATE_LOCK;

/*
 * MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK enum
 */

typedef enum MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK {
MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK_FALSE  = 0x00000000,
MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK_TRUE  = 0x00000001,
} MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK;

/*
 * MASTER_UPDATE_MODE_MASTER_UPDATE_MODE enum
 */

typedef enum MASTER_UPDATE_MODE_MASTER_UPDATE_MODE {
MASTER_UPDATE_MODE_MASTER_UPDATE_MODE_BETWEEN  = 0x00000000,
MASTER_UPDATE_MODE_MASTER_UPDATE_MODE_HSYNCA  = 0x00000001,
MASTER_UPDATE_MODE_MASTER_UPDATE_MODE_VSYNCA  = 0x00000002,
MASTER_UPDATE_MODE_MASTER_UPDATE_MODE_BEFORE  = 0x00000003,
} MASTER_UPDATE_MODE_MASTER_UPDATE_MODE;

/*
 * MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE enum
 */

typedef enum MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE {
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_BOTH  = 0x00000000,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_EVEN  = 0x00000001,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_ODD  = 0x00000002,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_RESERVED  = 0x00000003,
} MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE;

/*
 * CRTC_MVP_INBAND_CNTL_INSERT_CRTC_MVP_INBAND_OUT_MODE enum
 */

typedef enum CRTC_MVP_INBAND_CNTL_INSERT_CRTC_MVP_INBAND_OUT_MODE {
CRTC_MVP_INBAND_CNTL_INSERT_CRTC_MVP_INBAND_OUT_MODE_DISABLE  = 0x00000000,
CRTC_MVP_INBAND_CNTL_INSERT_CRTC_MVP_INBAND_OUT_MODE_DEBUG  = 0x00000001,
CRTC_MVP_INBAND_CNTL_INSERT_CRTC_MVP_INBAND_OUT_MODE_NORMAL  = 0x00000002,
} CRTC_MVP_INBAND_CNTL_INSERT_CRTC_MVP_INBAND_OUT_MODE;

/*
 * CRTC_MVP_STATUS_CRTC_FLIP_NOW_CLEAR enum
 */

typedef enum CRTC_MVP_STATUS_CRTC_FLIP_NOW_CLEAR {
CRTC_MVP_STATUS_CRTC_FLIP_NOW_CLEAR_FALSE = 0x00000000,
CRTC_MVP_STATUS_CRTC_FLIP_NOW_CLEAR_TRUE  = 0x00000001,
} CRTC_MVP_STATUS_CRTC_FLIP_NOW_CLEAR;

/*
 * CRTC_MVP_STATUS_CRTC_AFR_HSYNC_SWITCH_DONE_CLEAR enum
 */

typedef enum CRTC_MVP_STATUS_CRTC_AFR_HSYNC_SWITCH_DONE_CLEAR {
CRTC_MVP_STATUS_CRTC_AFR_HSYNC_SWITCH_DONE_CLEAR_FALSE = 0x00000000,
CRTC_MVP_STATUS_CRTC_AFR_HSYNC_SWITCH_DONE_CLEAR_TRUE  = 0x00000001,
} CRTC_MVP_STATUS_CRTC_AFR_HSYNC_SWITCH_DONE_CLEAR;

/*
 * CRTC_V_UPDATE_INT_STATUS_CRTC_V_UPDATE_INT_CLEAR enum
 */

typedef enum CRTC_V_UPDATE_INT_STATUS_CRTC_V_UPDATE_INT_CLEAR {
CRTC_V_UPDATE_INT_STATUS_CRTC_V_UPDATE_INT_CLEAR_FALSE = 0x00000000,
CRTC_V_UPDATE_INT_STATUS_CRTC_V_UPDATE_INT_CLEAR_TRUE  = 0x00000001,
} CRTC_V_UPDATE_INT_STATUS_CRTC_V_UPDATE_INT_CLEAR;

/*
 * CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_OUTPUT_POLARITY enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_OUTPUT_POLARITY {
CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_OUTPUT_POLARITY_FALSE  = 0x00000000,
CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_OUTPUT_POLARITY_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_OUTPUT_POLARITY;

/*
 * CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_ENABLE enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_ENABLE {
CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_ENABLE_FALSE = 0x00000000,
CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_ENABLE_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_ENABLE;

/*
 * CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_CLEAR enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_CLEAR {
CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_CLEAR_FALSE = 0x00000000,
CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_CLEAR_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_CLEAR;

/*
 * CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_TYPE enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_TYPE {
CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_TYPE_FALSE  = 0x00000000,
CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_TYPE_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT0_CONTROL_CRTC_VERTICAL_INTERRUPT0_INT_TYPE;

/*
 * CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_CLEAR enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_CLEAR {
CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_CLEAR_CLEAR_FALSE = 0x00000000,
CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_CLEAR_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_CLEAR;

/*
 * CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_ENABLE enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_ENABLE {
CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_ENABLE_FALSE = 0x00000000,
CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_ENABLE_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_ENABLE;

/*
 * CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_TYPE enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_TYPE {
CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_TYPE_FALSE  = 0x00000000,
CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_TYPE_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT1_CONTROL_CRTC_VERTICAL_INTERRUPT1_INT_TYPE;

/*
 * CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_CLEAR enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_CLEAR {
CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_CLEAR_CLEAR_FALSE = 0x00000000,
CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_CLEAR_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_CLEAR;

/*
 * CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_ENABLE enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_ENABLE {
CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_ENABLE_FALSE = 0x00000000,
CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_ENABLE_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_ENABLE;

/*
 * CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_TYPE enum
 */

typedef enum CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_TYPE {
CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_TYPE_FALSE  = 0x00000000,
CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_TYPE_TRUE  = 0x00000001,
} CRTC_VERTICAL_INTERRUPT2_CONTROL_CRTC_VERTICAL_INTERRUPT2_INT_TYPE;

/*
 * CRTC_CRC_CNTL_CRTC_CRC_EN enum
 */

typedef enum CRTC_CRC_CNTL_CRTC_CRC_EN {
CRTC_CRC_CNTL_CRTC_CRC_EN_FALSE          = 0x00000000,
CRTC_CRC_CNTL_CRTC_CRC_EN_TRUE           = 0x00000001,
} CRTC_CRC_CNTL_CRTC_CRC_EN;

/*
 * CRTC_CRC_CNTL_CRTC_CRC_CONT_EN enum
 */

typedef enum CRTC_CRC_CNTL_CRTC_CRC_CONT_EN {
CRTC_CRC_CNTL_CRTC_CRC_CONT_EN_FALSE     = 0x00000000,
CRTC_CRC_CNTL_CRTC_CRC_CONT_EN_TRUE      = 0x00000001,
} CRTC_CRC_CNTL_CRTC_CRC_CONT_EN;

/*
 * CRTC_CRC_CNTL_CRTC_CRC_STEREO_MODE enum
 */

typedef enum CRTC_CRC_CNTL_CRTC_CRC_STEREO_MODE {
CRTC_CRC_CNTL_CRTC_CRC_STEREO_MODE_LEFT  = 0x00000000,
CRTC_CRC_CNTL_CRTC_CRC_STEREO_MODE_RIGHT  = 0x00000001,
CRTC_CRC_CNTL_CRTC_CRC_STEREO_MODE_BOTH_EYES  = 0x00000002,
CRTC_CRC_CNTL_CRTC_CRC_STEREO_MODE_BOTH_FIELDS  = 0x00000003,
} CRTC_CRC_CNTL_CRTC_CRC_STEREO_MODE;

/*
 * CRTC_CRC_CNTL_CRTC_CRC_INTERLACE_MODE enum
 */

typedef enum CRTC_CRC_CNTL_CRTC_CRC_INTERLACE_MODE {
CRTC_CRC_CNTL_CRTC_CRC_INTERLACE_MODE_TOP  = 0x00000000,
CRTC_CRC_CNTL_CRTC_CRC_INTERLACE_MODE_BOTTOM  = 0x00000001,
CRTC_CRC_CNTL_CRTC_CRC_INTERLACE_MODE_BOTH_BOTTOM  = 0x00000002,
CRTC_CRC_CNTL_CRTC_CRC_INTERLACE_MODE_BOTH_FIELD  = 0x00000003,
} CRTC_CRC_CNTL_CRTC_CRC_INTERLACE_MODE;

/*
 * CRTC_CRC_CNTL_CRTC_CRC_USE_NEW_AND_REPEATED_PIXELS enum
 */

typedef enum CRTC_CRC_CNTL_CRTC_CRC_USE_NEW_AND_REPEATED_PIXELS {
CRTC_CRC_CNTL_CRTC_CRC_USE_NEW_AND_REPEATED_PIXELS_FALSE = 0x00000000,
CRTC_CRC_CNTL_CRTC_CRC_USE_NEW_AND_REPEATED_PIXELS_TRUE  = 0x00000001,
} CRTC_CRC_CNTL_CRTC_CRC_USE_NEW_AND_REPEATED_PIXELS;

/*
 * CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT enum
 */

typedef enum CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT {
CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT_UAB  = 0x00000000,
CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT_UA_B  = 0x00000001,
CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT_U_AB  = 0x00000002,
CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT_U_A_B  = 0x00000003,
CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT_IAB  = 0x00000004,
CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT_IA_B  = 0x00000005,
CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT_I_AB  = 0x00000006,
CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT_I_A_B  = 0x00000007,
} CRTC_CRC_CNTL_CRTC_CRTC_CRC0_SELECT;

/*
 * CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT enum
 */

typedef enum CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT {
CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT_UAB  = 0x00000000,
CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT_UA_B  = 0x00000001,
CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT_U_AB  = 0x00000002,
CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT_U_A_B  = 0x00000003,
CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT_IAB  = 0x00000004,
CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT_IA_B  = 0x00000005,
CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT_I_AB  = 0x00000006,
CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT_I_A_B  = 0x00000007,
} CRTC_CRC_CNTL_CRTC_CRTC_CRC1_SELECT;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_ENABLE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_ENABLE {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_ENABLE_DISABLE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_ENABLE_ONESHOT  = 0x00000001,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_ENABLE_CONTINUOUS  = 0x00000002,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_ENABLE_RESERVED  = 0x00000003,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_ENABLE;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW_1pixel  = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW_2pixel  = 0x00000001,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW_3pixel  = 0x00000002,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW_4pixel  = 0x00000003,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_ENABLE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_ENABLE {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_ENABLE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_ENABLE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_ENABLE;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_UPDATE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_UPDATE {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_UPDATE_FALSE = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_UPDATE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_WINDOW_UPDATE;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_VSYNC_POLARITY enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_VSYNC_POLARITY {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_VSYNC_POLARITY_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_VSYNC_POLARITY_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_VSYNC_POLARITY;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HSYNC_POLARITY enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HSYNC_POLARITY {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HSYNC_POLARITY_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HSYNC_POLARITY_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_HSYNC_POLARITY;

/*
 * CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_INTERLACE_MODE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_INTERLACE_MODE {
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_INTERLACE_MODE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_INTERLACE_MODE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_CONTROL_CRTC_EXT_TIMING_SYNC_INTERLACE_MODE;

/*
 * CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_ENABLE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_ENABLE {
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_ENABLE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_ENABLE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_ENABLE;

/*
 * CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_CLEAR enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_CLEAR {
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_CLEAR_FALSE = 0x00000000,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_CLEAR_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_CLEAR;

/*
 * CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_TYPE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_TYPE {
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_TYPE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_TYPE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_INT_TYPE;

/*
 * CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT {
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_1FRAME  = 0x00000000,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_2FRAME  = 0x00000001,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_4FRAME  = 0x00000002,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_8FRAME  = 0x00000003,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_16FRAME  = 0x00000004,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_32FRAME  = 0x00000005,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_64FRAME  = 0x00000006,
CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_128FRAME  = 0x00000007,
} CRTC_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_LOSS_FRAME_COUNT;

/*
 * CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_ENABLE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_ENABLE {
CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_ENABLE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_ENABLE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_ENABLE;

/*
 * CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_CLEAR enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_CLEAR {
CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_CLEAR_FALSE = 0x00000000,
CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_CLEAR_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_CLEAR;

/*
 * CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_TYPE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_TYPE {
CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_TYPE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_TYPE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_INT_TYPE;

/*
 * CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE {
CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE;

/*
 * CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_CLEAR enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_CLEAR {
CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_CLEAR_FALSE = 0x00000000,
CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_CLEAR_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_CLEAR;

/*
 * CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_TYPE enum
 */

typedef enum CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_TYPE {
CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_TYPE_FALSE  = 0x00000000,
CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_TYPE_TRUE  = 0x00000001,
} CRTC_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_CRTC_EXT_TIMING_SYNC_SIGNAL_INT_TYPE;

/*
 * CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_ENABLE enum
 */

typedef enum CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_ENABLE {
CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_ENABLE_FALSE  = 0x00000000,
CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_ENABLE_TRUE  = 0x00000001,
} CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_ENABLE;

/*
 * CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_CLEAR enum
 */

typedef enum CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_CLEAR {
CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_CLEAR_FALSE = 0x00000000,
CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_CLEAR_TRUE  = 0x00000001,
} CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_CLEAR;

/*
 * CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_TYPE enum
 */

typedef enum CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_TYPE {
CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_TYPE_FALSE  = 0x00000000,
CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_TYPE_TRUE  = 0x00000001,
} CRTC_STATIC_SCREEN_CONTROL_CRTC_CPU_SS_INT_TYPE;

/*
 * CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE enum
 */

typedef enum CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE {
CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE_FALSE  = 0x00000000,
CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE_TRUE  = 0x00000001,
} CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE;

/*
 * CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE_VALUE enum
 */

typedef enum CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE_VALUE {
CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE_VALUE_OFF  = 0x00000000,
CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE_VALUE_ON  = 0x00000001,
} CRTC_STATIC_SCREEN_CONTROL_CRTC_STATIC_SCREEN_OVERRIDE_VALUE;

/*
 * CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN enum
 */

typedef enum CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN {
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN_FALSE  = 0x00000000,
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN_TRUE  = 0x00000001,
} CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN;

/*
 * CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN_DB enum
 */

typedef enum CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN_DB {
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN_DB_FALSE  = 0x00000000,
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN_DB_TRUE  = 0x00000001,
} CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_EN_DB;

/*
 * CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_V_UPDATE_MODE enum
 */

typedef enum CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_V_UPDATE_MODE {
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_BOTH  = 0x00000000,
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_INTERLACE  = 0x00000001,
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_PROGRASSIVE  = 0x00000002,
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_V_UPDATE_MODE_RESERVED  = 0x00000003,
} CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_V_UPDATE_MODE;

/*
 * CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_STEREO_SEL_OVR enum
 */

typedef enum CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_STEREO_SEL_OVR {
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_STEREO_SEL_OVR_FALSE  = 0x00000000,
CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_STEREO_SEL_OVR_TRUE  = 0x00000001,
} CRTC_3D_STRUCTURE_CONTROL_CRTC_3D_STRUCTURE_STEREO_SEL_OVR;

/*
 * CRTC_V_SYNC_A_POL enum
 */

typedef enum CRTC_V_SYNC_A_POL {
CRTC_V_SYNC_A_POL_HIGH                   = 0x00000000,
CRTC_V_SYNC_A_POL_LOW                    = 0x00000001,
} CRTC_V_SYNC_A_POL;

/*
 * CRTC_H_SYNC_A_POL enum
 */

typedef enum CRTC_H_SYNC_A_POL {
CRTC_H_SYNC_A_POL_HIGH                   = 0x00000000,
CRTC_H_SYNC_A_POL_LOW                    = 0x00000001,
} CRTC_H_SYNC_A_POL;

/*
 * CRTC_HORZ_REPETITION_COUNT enum
 */

typedef enum CRTC_HORZ_REPETITION_COUNT {
CRTC_HORZ_REPETITION_COUNT_0             = 0x00000000,
CRTC_HORZ_REPETITION_COUNT_1             = 0x00000001,
CRTC_HORZ_REPETITION_COUNT_2             = 0x00000002,
CRTC_HORZ_REPETITION_COUNT_3             = 0x00000003,
CRTC_HORZ_REPETITION_COUNT_4             = 0x00000004,
CRTC_HORZ_REPETITION_COUNT_5             = 0x00000005,
CRTC_HORZ_REPETITION_COUNT_6             = 0x00000006,
CRTC_HORZ_REPETITION_COUNT_7             = 0x00000007,
CRTC_HORZ_REPETITION_COUNT_8             = 0x00000008,
CRTC_HORZ_REPETITION_COUNT_9             = 0x00000009,
CRTC_HORZ_REPETITION_COUNT_10            = 0x0000000a,
CRTC_HORZ_REPETITION_COUNT_11            = 0x0000000b,
CRTC_HORZ_REPETITION_COUNT_12            = 0x0000000c,
CRTC_HORZ_REPETITION_COUNT_13            = 0x0000000d,
CRTC_HORZ_REPETITION_COUNT_14            = 0x0000000e,
CRTC_HORZ_REPETITION_COUNT_15            = 0x0000000f,
} CRTC_HORZ_REPETITION_COUNT;

/*
 * CRTC_DRR_MODE_DBUF_UPDATE_MODE enum
 */

typedef enum CRTC_DRR_MODE_DBUF_UPDATE_MODE {
CRTC_DRR_MODE_DBUF_UPDATE_MODE_00_IMMEDIATE  = 0x00000000,
CRTC_DRR_MODE_DBUF_UPDATE_MODE_01_MANUAL  = 0x00000001,
CRTC_DRR_MODE_DBUF_UPDATE_MODE_10_DBUF   = 0x00000002,
CRTC_DRR_MODE_DBUF_UPDATE_MODE_11_SYNCED_DBUF  = 0x00000003,
} CRTC_DRR_MODE_DBUF_UPDATE_MODE;

/*******************************************************
 * FMT Enums
 *******************************************************/

/*
 * FMT_CONTROL_PIXEL_ENCODING enum
 */

typedef enum FMT_CONTROL_PIXEL_ENCODING {
FMT_CONTROL_PIXEL_ENCODING_RGB444_OR_YCBCR444  = 0x00000000,
FMT_CONTROL_PIXEL_ENCODING_YCBCR422      = 0x00000001,
FMT_CONTROL_PIXEL_ENCODING_YCBCR420      = 0x00000002,
FMT_CONTROL_PIXEL_ENCODING_RESERVED      = 0x00000003,
} FMT_CONTROL_PIXEL_ENCODING;

/*
 * FMT_CONTROL_SUBSAMPLING_MODE enum
 */

typedef enum FMT_CONTROL_SUBSAMPLING_MODE {
FMT_CONTROL_SUBSAMPLING_MODE_DROP        = 0x00000000,
FMT_CONTROL_SUBSAMPLING_MODE_AVERAGE     = 0x00000001,
FMT_CONTROL_SUBSAMPLING_MOME_3_TAP       = 0x00000002,
FMT_CONTROL_SUBSAMPLING_MOME_RESERVED    = 0x00000003,
} FMT_CONTROL_SUBSAMPLING_MODE;

/*
 * FMT_CONTROL_SUBSAMPLING_ORDER enum
 */

typedef enum FMT_CONTROL_SUBSAMPLING_ORDER {
FMT_CONTROL_SUBSAMPLING_ORDER_CB_BEFORE_CR  = 0x00000000,
FMT_CONTROL_SUBSAMPLING_ORDER_CR_BEFORE_CB  = 0x00000001,
} FMT_CONTROL_SUBSAMPLING_ORDER;

/*
 * FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS enum
 */

typedef enum FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS {
FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS_DISABLE  = 0x00000000,
FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS_ENABLE  = 0x00000001,
} FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS;

/*
 * FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE {
FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE_TRUNCATION  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE_ROUNDING  = 0x00000001,
} FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE;

/*
 * FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH {
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_18BPP  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_24BPP  = 0x00000001,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_30BPP  = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH {
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_18BPP  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_24BPP  = 0x00000001,
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_30BPP  = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH {
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_18BPP  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_24BPP  = 0x00000001,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_30BPP  = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL {
FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL_GREY_LEVEL2  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL_GREY_LEVEL4  = 0x00000001,
} FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL;

/*
 * FMT_BIT_DEPTH_CONTROL_25FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_25FRC_SEL {
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Ei       = 0x00000000,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Fi       = 0x00000001,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Gi       = 0x00000002,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_RESERVED  = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_25FRC_SEL;

/*
 * FMT_BIT_DEPTH_CONTROL_50FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_50FRC_SEL {
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_A        = 0x00000000,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_B        = 0x00000001,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_C        = 0x00000002,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_D        = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_50FRC_SEL;

/*
 * FMT_BIT_DEPTH_CONTROL_75FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_75FRC_SEL {
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_E        = 0x00000000,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_F        = 0x00000001,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_G        = 0x00000002,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_RESERVED  = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_75FRC_SEL;

/*
 * FMT_TEMPORAL_DITHER_PATTERN_CONTROL_SELECT enum
 */

typedef enum FMT_TEMPORAL_DITHER_PATTERN_CONTROL_SELECT {
FMT_TEMPORAL_DITHER_PATTERN_CONTROL_SELECT_LEGACY_HARDCODED_PATTERN  = 0x00000000,
FMT_TEMPORAL_DITHER_PATTERN_CONTROL_SELECT_PROGRAMMABLE_PATTERN  = 0x00000001,
} FMT_TEMPORAL_DITHER_PATTERN_CONTROL_SELECT;

/*
 * FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0 enum
 */

typedef enum FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0 {
FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0_BGR  = 0x00000000,
FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0_RGB  = 0x00000001,
} FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0;

/*
 * FMT_CLAMP_CNTL_COLOR_FORMAT enum
 */

typedef enum FMT_CLAMP_CNTL_COLOR_FORMAT {
FMT_CLAMP_CNTL_COLOR_FORMAT_6BPC         = 0x00000000,
FMT_CLAMP_CNTL_COLOR_FORMAT_8BPC         = 0x00000001,
FMT_CLAMP_CNTL_COLOR_FORMAT_10BPC        = 0x00000002,
FMT_CLAMP_CNTL_COLOR_FORMAT_12BPC        = 0x00000003,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED1    = 0x00000004,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED2    = 0x00000005,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED3    = 0x00000006,
FMT_CLAMP_CNTL_COLOR_FORMAT_PROGRAMMABLE  = 0x00000007,
} FMT_CLAMP_CNTL_COLOR_FORMAT;

/*
 * FMT_CRC_CNTL_CONT_EN enum
 */

typedef enum FMT_CRC_CNTL_CONT_EN {
FMT_CRC_CNTL_CONT_EN_ONE_SHOT            = 0x00000000,
FMT_CRC_CNTL_CONT_EN_CONT                = 0x00000001,
} FMT_CRC_CNTL_CONT_EN;

/*
 * FMT_CRC_CNTL_INCLUDE_OVERSCAN enum
 */

typedef enum FMT_CRC_CNTL_INCLUDE_OVERSCAN {
FMT_CRC_CNTL_INCLUDE_OVERSCAN_NOT_INCLUDE  = 0x00000000,
FMT_CRC_CNTL_INCLUDE_OVERSCAN_INCLUDE    = 0x00000001,
} FMT_CRC_CNTL_INCLUDE_OVERSCAN;

/*
 * FMT_CRC_CNTL_ONLY_BLANKB enum
 */

typedef enum FMT_CRC_CNTL_ONLY_BLANKB {
FMT_CRC_CNTL_ONLY_BLANKB_ENTIRE_FIELD    = 0x00000000,
FMT_CRC_CNTL_ONLY_BLANKB_NON_BLANK       = 0x00000001,
} FMT_CRC_CNTL_ONLY_BLANKB;

/*
 * FMT_CRC_CNTL_PSR_MODE_ENABLE enum
 */

typedef enum FMT_CRC_CNTL_PSR_MODE_ENABLE {
FMT_CRC_CNTL_PSR_MODE_ENABLE_NORMAL      = 0x00000000,
FMT_CRC_CNTL_PSR_MODE_ENABLE_EDP_PSR_CRC  = 0x00000001,
} FMT_CRC_CNTL_PSR_MODE_ENABLE;

/*
 * FMT_CRC_CNTL_INTERLACE_MODE enum
 */

typedef enum FMT_CRC_CNTL_INTERLACE_MODE {
FMT_CRC_CNTL_INTERLACE_MODE_TOP          = 0x00000000,
FMT_CRC_CNTL_INTERLACE_MODE_BOTTOM       = 0x00000001,
FMT_CRC_CNTL_INTERLACE_MODE_BOTH_BOTTOM  = 0x00000002,
FMT_CRC_CNTL_INTERLACE_MODE_BOTH_EACH    = 0x00000003,
} FMT_CRC_CNTL_INTERLACE_MODE;

/*
 * FMT_CRC_CNTL_EVEN_ODD_PIX_ENABLE enum
 */

typedef enum FMT_CRC_CNTL_EVEN_ODD_PIX_ENABLE {
FMT_CRC_CNTL_EVEN_ODD_PIX_ENABLE_ALL     = 0x00000000,
FMT_CRC_CNTL_EVEN_ODD_PIX_ENABLE_ODD_EVEN  = 0x00000001,
} FMT_CRC_CNTL_EVEN_ODD_PIX_ENABLE;

/*
 * FMT_CRC_CNTL_EVEN_ODD_PIX_SELECT enum
 */

typedef enum FMT_CRC_CNTL_EVEN_ODD_PIX_SELECT {
FMT_CRC_CNTL_EVEN_ODD_PIX_SELECT_EVEN    = 0x00000000,
FMT_CRC_CNTL_EVEN_ODD_PIX_SELECT_ODD     = 0x00000001,
} FMT_CRC_CNTL_EVEN_ODD_PIX_SELECT;

/*
 * FMT_DEBUG_CNTL_COLOR_SELECT enum
 */

typedef enum FMT_DEBUG_CNTL_COLOR_SELECT {
FMT_DEBUG_CNTL_COLOR_SELECT_BLUE         = 0x00000000,
FMT_DEBUG_CNTL_COLOR_SELECT_GREEN        = 0x00000001,
FMT_DEBUG_CNTL_COLOR_SELECT_RED1         = 0x00000002,
FMT_DEBUG_CNTL_COLOR_SELECT_RED2         = 0x00000003,
} FMT_DEBUG_CNTL_COLOR_SELECT;

/*
 * FMT_SPATIAL_DITHER_MODE enum
 */

typedef enum FMT_SPATIAL_DITHER_MODE {
FMT_SPATIAL_DITHER_MODE_0                = 0x00000000,
FMT_SPATIAL_DITHER_MODE_1                = 0x00000001,
FMT_SPATIAL_DITHER_MODE_2                = 0x00000002,
FMT_SPATIAL_DITHER_MODE_3                = 0x00000003,
} FMT_SPATIAL_DITHER_MODE;

/*
 * FMT_STEREOSYNC_OVR_POL enum
 */

typedef enum FMT_STEREOSYNC_OVR_POL {
FMT_STEREOSYNC_OVR_POL_INVERTED          = 0x00000000,
FMT_STEREOSYNC_OVR_POL_NOT_INVERTED      = 0x00000001,
} FMT_STEREOSYNC_OVR_POL;

/*
 * FMT_DYNAMIC_EXP_MODE enum
 */

typedef enum FMT_DYNAMIC_EXP_MODE {
FMT_DYNAMIC_EXP_MODE_10to12              = 0x00000000,
FMT_DYNAMIC_EXP_MODE_8to12               = 0x00000001,
} FMT_DYNAMIC_EXP_MODE;

/*******************************************************
 * HPD Enums
 *******************************************************/

/*
 * HPD_INT_CONTROL_ACK enum
 */

typedef enum HPD_INT_CONTROL_ACK {
HPD_INT_CONTROL_ACK_0                    = 0x00000000,
HPD_INT_CONTROL_ACK_1                    = 0x00000001,
} HPD_INT_CONTROL_ACK;

/*
 * HPD_INT_CONTROL_POLARITY enum
 */

typedef enum HPD_INT_CONTROL_POLARITY {
HPD_INT_CONTROL_GEN_INT_ON_DISCON        = 0x00000000,
HPD_INT_CONTROL_GEN_INT_ON_CON           = 0x00000001,
} HPD_INT_CONTROL_POLARITY;

/*
 * HPD_INT_CONTROL_RX_INT_ACK enum
 */

typedef enum HPD_INT_CONTROL_RX_INT_ACK {
HPD_INT_CONTROL_RX_INT_ACK_0             = 0x00000000,
HPD_INT_CONTROL_RX_INT_ACK_1             = 0x00000001,
} HPD_INT_CONTROL_RX_INT_ACK;

/*******************************************************
 * LB Enums
 *******************************************************/

/*
 * LB_DATA_FORMAT_PIXEL_DEPTH enum
 */

typedef enum LB_DATA_FORMAT_PIXEL_DEPTH {
LB_DATA_FORMAT_PIXEL_DEPTH_30BPP         = 0x00000000,
LB_DATA_FORMAT_PIXEL_DEPTH_24BPP         = 0x00000001,
LB_DATA_FORMAT_PIXEL_DEPTH_18BPP         = 0x00000002,
LB_DATA_FORMAT_PIXEL_DEPTH_36BPP         = 0x00000003,
} LB_DATA_FORMAT_PIXEL_DEPTH;

/*
 * LB_DATA_FORMAT_PIXEL_EXPAN_MODE enum
 */

typedef enum LB_DATA_FORMAT_PIXEL_EXPAN_MODE {
LB_DATA_FORMAT_PIXEL_EXPAN_MODE_ZERO_PIXEL_EXPANSION = 0x00000000,
LB_DATA_FORMAT_PIXEL_EXPAN_MODE_DYNAMIC_PIXEL_EXPANSION = 0x00000001,
} LB_DATA_FORMAT_PIXEL_EXPAN_MODE;

/*
 * LB_DATA_FORMAT_PIXEL_REDUCE_MODE enum
 */

typedef enum LB_DATA_FORMAT_PIXEL_REDUCE_MODE {
LB_DATA_FORMAT_PIXEL_REDUCE_MODE_TRUNCATION = 0x00000000,
LB_DATA_FORMAT_PIXEL_REDUCE_MODE_ROUNDING = 0x00000001,
} LB_DATA_FORMAT_PIXEL_REDUCE_MODE;

/*
 * LB_DATA_FORMAT_DYNAMIC_PIXEL_DEPTH enum
 */

typedef enum LB_DATA_FORMAT_DYNAMIC_PIXEL_DEPTH {
LB_DATA_FORMAT_DYNAMIC_PIXEL_DEPTH_36BPP = 0x00000000,
LB_DATA_FORMAT_DYNAMIC_PIXEL_DEPTH_30BPP = 0x00000001,
} LB_DATA_FORMAT_DYNAMIC_PIXEL_DEPTH;

/*
 * LB_DATA_FORMAT_INTERLEAVE_EN enum
 */

typedef enum LB_DATA_FORMAT_INTERLEAVE_EN {
LB_DATA_FORMAT_INTERLEAVE_DISABLE        = 0x00000000,
LB_DATA_FORMAT_INTERLEAVE_ENABLE         = 0x00000001,
} LB_DATA_FORMAT_INTERLEAVE_EN;

/*
 * LB_DATA_FORMAT_REQUEST_MODE enum
 */

typedef enum LB_DATA_FORMAT_REQUEST_MODE {
LB_DATA_FORMAT_REQUEST_MODE_NORMAL       = 0x00000000,
LB_DATA_FORMAT_REQUEST_MODE_START_OF_LINE  = 0x00000001,
} LB_DATA_FORMAT_REQUEST_MODE;

/*
 * LB_DATA_FORMAT_ALPHA_EN enum
 */

typedef enum LB_DATA_FORMAT_ALPHA_EN {
LB_DATA_FORMAT_ALPHA_DISABLE             = 0x00000000,
LB_DATA_FORMAT_ALPHA_ENABLE              = 0x00000001,
} LB_DATA_FORMAT_ALPHA_EN;

/*
 * LB_VLINE_START_END_VLINE_INV enum
 */

typedef enum LB_VLINE_START_END_VLINE_INV {
LB_VLINE_START_END_VLINE_NORMAL          = 0x00000000,
LB_VLINE_START_END_VLINE_INVERSE         = 0x00000001,
} LB_VLINE_START_END_VLINE_INV;

/*
 * LB_VLINE2_START_END_VLINE2_INV enum
 */

typedef enum LB_VLINE2_START_END_VLINE2_INV {
LB_VLINE2_START_END_VLINE2_NORMAL        = 0x00000000,
LB_VLINE2_START_END_VLINE2_INVERSE       = 0x00000001,
} LB_VLINE2_START_END_VLINE2_INV;

/*
 * LB_INTERRUPT_MASK_VBLANK_INTERRUPT_MASK enum
 */

typedef enum LB_INTERRUPT_MASK_VBLANK_INTERRUPT_MASK {
LB_INTERRUPT_MASK_VBLANK_INTERRUPT_DISABLE = 0x00000000,
LB_INTERRUPT_MASK_VBLANK_INTERRUPT_ENABLE = 0x00000001,
} LB_INTERRUPT_MASK_VBLANK_INTERRUPT_MASK;

/*
 * LB_INTERRUPT_MASK_VLINE_INTERRUPT_MASK enum
 */

typedef enum LB_INTERRUPT_MASK_VLINE_INTERRUPT_MASK {
LB_INTERRUPT_MASK_VLINE_INTERRUPT_DISABLE = 0x00000000,
LB_INTERRUPT_MASK_VLINE_INTERRUPT_ENABLE = 0x00000001,
} LB_INTERRUPT_MASK_VLINE_INTERRUPT_MASK;

/*
 * LB_INTERRUPT_MASK_VLINE2_INTERRUPT_MASK enum
 */

typedef enum LB_INTERRUPT_MASK_VLINE2_INTERRUPT_MASK {
LB_INTERRUPT_MASK_VLINE2_INTERRUPT_DISABLE = 0x00000000,
LB_INTERRUPT_MASK_VLINE2_INTERRUPT_ENABLE = 0x00000001,
} LB_INTERRUPT_MASK_VLINE2_INTERRUPT_MASK;

/*
 * LB_VLINE_STATUS_VLINE_ACK enum
 */

typedef enum LB_VLINE_STATUS_VLINE_ACK {
LB_VLINE_STATUS_VLINE_NORMAL             = 0x00000000,
LB_VLINE_STATUS_VLINE_CLEAR              = 0x00000001,
} LB_VLINE_STATUS_VLINE_ACK;

/*
 * LB_VLINE_STATUS_VLINE_INTERRUPT_TYPE enum
 */

typedef enum LB_VLINE_STATUS_VLINE_INTERRUPT_TYPE {
LB_VLINE_STATUS_VLINE_INTERRUPT_TYPE_LEVEL_BASED  = 0x00000000,
LB_VLINE_STATUS_VLINE_INTERRUPT_TYPE_PULSE_BASED  = 0x00000001,
} LB_VLINE_STATUS_VLINE_INTERRUPT_TYPE;

/*
 * LB_VLINE2_STATUS_VLINE2_ACK enum
 */

typedef enum LB_VLINE2_STATUS_VLINE2_ACK {
LB_VLINE2_STATUS_VLINE2_NORMAL           = 0x00000000,
LB_VLINE2_STATUS_VLINE2_CLEAR            = 0x00000001,
} LB_VLINE2_STATUS_VLINE2_ACK;

/*
 * LB_VLINE2_STATUS_VLINE2_INTERRUPT_TYPE enum
 */

typedef enum LB_VLINE2_STATUS_VLINE2_INTERRUPT_TYPE {
LB_VLINE2_STATUS_VLINE2_INTERRUPT_TYPE_LEVEL_BASED  = 0x00000000,
LB_VLINE2_STATUS_VLINE2_INTERRUPT_TYPE_PULSE_BASED  = 0x00000001,
} LB_VLINE2_STATUS_VLINE2_INTERRUPT_TYPE;

/*
 * LB_VBLANK_STATUS_VBLANK_ACK enum
 */

typedef enum LB_VBLANK_STATUS_VBLANK_ACK {
LB_VBLANK_STATUS_VBLANK_NORMAL           = 0x00000000,
LB_VBLANK_STATUS_VBLANK_CLEAR            = 0x00000001,
} LB_VBLANK_STATUS_VBLANK_ACK;

/*
 * LB_VBLANK_STATUS_VBLANK_INTERRUPT_TYPE enum
 */

typedef enum LB_VBLANK_STATUS_VBLANK_INTERRUPT_TYPE {
LB_VBLANK_STATUS_VBLANK_INTERRUPT_TYPE_LEVEL_BASED  = 0x00000000,
LB_VBLANK_STATUS_VBLANK_INTERRUPT_TYPE_PULSE_BASED  = 0x00000001,
} LB_VBLANK_STATUS_VBLANK_INTERRUPT_TYPE;

/*
 * LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL enum
 */

typedef enum LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL {
LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL_DISABLE  = 0x00000000,
LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL_FROM_VSYNC_VBLANK  = 0x00000001,
LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL_FROM_POWERDOWN_RESET  = 0x00000002,
LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL_FROM_VSYNC_VBLANK_POWERDOWN_RESET  = 0x00000003,
} LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL;

/*
 * LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL2 enum
 */

typedef enum LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL2 {
LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL2_USE_VBLANK  = 0x00000000,
LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL2_USE_VSYNC  = 0x00000001,
} LB_SYNC_RESET_SEL_LB_SYNC_RESET_SEL2;

/*
 * LB_SYNC_RESET_SEL_LB_SYNC_DURATION enum
 */

typedef enum LB_SYNC_RESET_SEL_LB_SYNC_DURATION {
LB_SYNC_RESET_SEL_LB_SYNC_DURATION_16_CLOCKS = 0x00000000,
LB_SYNC_RESET_SEL_LB_SYNC_DURATION_32_CLOCKS = 0x00000001,
LB_SYNC_RESET_SEL_LB_SYNC_DURATION_64_CLOCKS = 0x00000002,
LB_SYNC_RESET_SEL_LB_SYNC_DURATION_128_CLOCKS = 0x00000003,
} LB_SYNC_RESET_SEL_LB_SYNC_DURATION;

/*
 * LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_EN enum
 */

typedef enum LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_EN {
LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_DISABLE = 0x00000000,
LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_ENABLE = 0x00000001,
} LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_EN;

/*
 * LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_REP_EN enum
 */

typedef enum LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_REP_EN {
LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_REPLACEMENT_DISABLE = 0x00000000,
LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_REPLACEMENT_ENABLE = 0x00000001,
} LB_KEYER_COLOR_CTRL_LB_KEYER_COLOR_REP_EN;

/*
 * LB_BUFFER_STATUS_LB_BUFFER_EMPTY_ACK enum
 */

typedef enum LB_BUFFER_STATUS_LB_BUFFER_EMPTY_ACK {
LB_BUFFER_STATUS_LB_BUFFER_EMPTY_NORMAL  = 0x00000000,
LB_BUFFER_STATUS_LB_BUFFER_EMPTY_RESET   = 0x00000001,
} LB_BUFFER_STATUS_LB_BUFFER_EMPTY_ACK;

/*
 * LB_BUFFER_STATUS_LB_BUFFER_FULL_ACK enum
 */

typedef enum LB_BUFFER_STATUS_LB_BUFFER_FULL_ACK {
LB_BUFFER_STATUS_LB_BUFFER_FULL_NORMAL   = 0x00000000,
LB_BUFFER_STATUS_LB_BUFFER_FULL_RESET    = 0x00000001,
} LB_BUFFER_STATUS_LB_BUFFER_FULL_ACK;

/*
 * LB_MVP_AFR_FLIP_MODE_MVP_AFR_FLIP_MODE enum
 */

typedef enum LB_MVP_AFR_FLIP_MODE_MVP_AFR_FLIP_MODE {
LB_MVP_AFR_FLIP_MODE_MVP_AFR_FLIP_MODE_REAL_FLIP  = 0x00000002,
LB_MVP_AFR_FLIP_MODE_MVP_AFR_FLIP_MODE_DUMMY_FLIP  = 0x00000003,
} LB_MVP_AFR_FLIP_MODE_MVP_AFR_FLIP_MODE;

/*
 * LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET enum
 */

typedef enum LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET {
LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_NORMAL = 0x00000000,
LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET_ACTIVE  = 0x00000001,
} LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET;

/*
 * LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET_ACK enum
 */

typedef enum LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET_ACK {
LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET_ACK_NOT_USED0 = 0x00000000,
LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET_ACK_NOT_USED1 = 0x00000001,
} LB_MVP_AFR_FLIP_FIFO_CNTL_MVP_AFR_FLIP_FIFO_RESET_ACK;

/*
 * LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_LINE_NUM_INSERT_MODE enum
 */

typedef enum LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_LINE_NUM_INSERT_MODE {
LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_LINE_NUM_INSERT_MODE_NO_INSERT  = 0x00000000,
LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_LINE_NUM_INSERT_MODE_DEBUG  = 0x00000001,
LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_LINE_NUM_INSERT_MODE_HSYNC_MODE  = 0x00000002,
} LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_LINE_NUM_INSERT_MODE;

/*
 * LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_AUTO_ENABLE enum
 */

typedef enum LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_AUTO_ENABLE {
LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_AUTO_DISABLE  = 0x00000000,
LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_AUTO_EN  = 0x00000001,
} LB_MVP_FLIP_LINE_NUM_INSERT_MVP_FLIP_AUTO_ENABLE;

/*
 * LB_DC_MVP_LB_CONTROL_MVP_SWAP_LOCK_IN_MODE enum
 */

typedef enum LB_DC_MVP_LB_CONTROL_MVP_SWAP_LOCK_IN_MODE {
ALPHA_LB_DC_MVP_LB_CONTROL_MVP_SWAP_LOCK_IN_MODE_MASTER  = 0x00000001,
ALPHA_LB_DC_MVP_LB_CONTROL_MVP_SWAP_LOCK_IN_MODE_SLAVE  = 0x00000002,
} LB_DC_MVP_LB_CONTROL_MVP_SWAP_LOCK_IN_MODE;

/*
 * LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_SEL enum
 */

typedef enum LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_SEL {
LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_SEL_NOT_USED0 = 0x00000000,
LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_SEL_NOT_USED1 = 0x00000001,
} LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_SEL;

/*
 * LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_FORCE_ONE enum
 */

typedef enum LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_FORCE_ONE {
LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_NO_FORCE_ONE = 0x00000000,
LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_FORCE_TO_ONE  = 0x00000001,
} LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_FORCE_ONE;

/*
 * LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_FORCE_ZERO enum
 */

typedef enum LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_FORCE_ZERO {
LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_NO_FORCE_ZERO = 0x00000000,
LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_FORCE_TO_ZERO  = 0x00000001,
} LB_DC_MVP_LB_CONTROL_DC_MVP_SWAP_LOCK_OUT_FORCE_ZERO;

/*
 * LB_TEST_DEBUG_INDEX_LB_TEST_DEBUG_WRITE_EN enum
 */

typedef enum LB_TEST_DEBUG_INDEX_LB_TEST_DEBUG_WRITE_EN {
LB_TEST_DEBUG_INDEX_LB_TEST_DEBUG_WRITE_EN_NOT_USED0 = 0x00000000,
LB_TEST_DEBUG_INDEX_LB_TEST_DEBUG_WRITE_EN_NOT_USED1 = 0x00000001,
} LB_TEST_DEBUG_INDEX_LB_TEST_DEBUG_WRITE_EN;

/*******************************************************
 * DIG Enums
 *******************************************************/

/*
 * HDMI_KEEPOUT_MODE enum
 */

typedef enum HDMI_KEEPOUT_MODE {
HDMI_KEEPOUT_0_650PIX_AFTER_VSYNC        = 0x00000000,
HDMI_KEEPOUT_509_650PIX_AFTER_VSYNC      = 0x00000001,
} HDMI_KEEPOUT_MODE;

/*
 * HDMI_DATA_SCRAMBLE_EN enum
 */

typedef enum HDMI_DATA_SCRAMBLE_EN {
HDMI_DATA_SCRAMBLE_DISABLE               = 0x00000000,
HDMI_DATA_SCRAMBLE_ENABLE                = 0x00000001,
} HDMI_DATA_SCRAMBLE_EN;

/*
 * HDMI_CLOCK_CHANNEL_RATE enum
 */

typedef enum HDMI_CLOCK_CHANNEL_RATE {
HDMI_CLOCK_CHANNEL_FREQ_EQUAL_TO_CHAR_RATE  = 0x00000000,
HDMI_CLOCK_CHANNEL_FREQ_QUARTER_TO_CHAR_RATE  = 0x00000001,
} HDMI_CLOCK_CHANNEL_RATE;

/*
 * HDMI_NO_EXTRA_NULL_PACKET_FILLED enum
 */

typedef enum HDMI_NO_EXTRA_NULL_PACKET_FILLED {
HDMI_EXTRA_NULL_PACKET_FILLED_ENABLE     = 0x00000000,
HDMI_EXTRA_NULL_PACKET_FILLED_DISABLE    = 0x00000001,
} HDMI_NO_EXTRA_NULL_PACKET_FILLED;

/*
 * HDMI_PACKET_GEN_VERSION enum
 */

typedef enum HDMI_PACKET_GEN_VERSION {
HDMI_PACKET_GEN_VERSION_OLD              = 0x00000000,
HDMI_PACKET_GEN_VERSION_NEW              = 0x00000001,
} HDMI_PACKET_GEN_VERSION;

/*
 * HDMI_ERROR_ACK enum
 */

typedef enum HDMI_ERROR_ACK {
HDMI_ERROR_ACK_INT                       = 0x00000000,
HDMI_ERROR_NOT_ACK                       = 0x00000001,
} HDMI_ERROR_ACK;

/*
 * HDMI_ERROR_MASK enum
 */

typedef enum HDMI_ERROR_MASK {
HDMI_ERROR_MASK_INT                      = 0x00000000,
HDMI_ERROR_NOT_MASK                      = 0x00000001,
} HDMI_ERROR_MASK;

/*
 * HDMI_DEEP_COLOR_DEPTH enum
 */

typedef enum HDMI_DEEP_COLOR_DEPTH {
HDMI_DEEP_COLOR_DEPTH_24BPP              = 0x00000000,
HDMI_DEEP_COLOR_DEPTH_30BPP              = 0x00000001,
HDMI_DEEP_COLOR_DEPTH_36BPP              = 0x00000002,
HDMI_DEEP_COLOR_DEPTH_RESERVED           = 0x00000003,
} HDMI_DEEP_COLOR_DEPTH;

/*
 * HDMI_AUDIO_DELAY_EN enum
 */

typedef enum HDMI_AUDIO_DELAY_EN {
HDMI_AUDIO_DELAY_DISABLE                 = 0x00000000,
HDMI_AUDIO_DELAY_58CLK                   = 0x00000001,
HDMI_AUDIO_DELAY_56CLK                   = 0x00000002,
HDMI_AUDIO_DELAY_RESERVED                = 0x00000003,
} HDMI_AUDIO_DELAY_EN;

/*
 * HDMI_AUDIO_SEND_MAX_PACKETS enum
 */

typedef enum HDMI_AUDIO_SEND_MAX_PACKETS {
HDMI_NOT_SEND_MAX_AUDIO_PACKETS          = 0x00000000,
HDMI_SEND_MAX_AUDIO_PACKETS              = 0x00000001,
} HDMI_AUDIO_SEND_MAX_PACKETS;

/*
 * HDMI_ACR_SEND enum
 */

typedef enum HDMI_ACR_SEND {
HDMI_ACR_NOT_SEND                        = 0x00000000,
HDMI_ACR_PKT_SEND                        = 0x00000001,
} HDMI_ACR_SEND;

/*
 * HDMI_ACR_CONT enum
 */

typedef enum HDMI_ACR_CONT {
HDMI_ACR_CONT_DISABLE                    = 0x00000000,
HDMI_ACR_CONT_ENABLE                     = 0x00000001,
} HDMI_ACR_CONT;

/*
 * HDMI_ACR_SELECT enum
 */

typedef enum HDMI_ACR_SELECT {
HDMI_ACR_SELECT_HW                       = 0x00000000,
HDMI_ACR_SELECT_32K                      = 0x00000001,
HDMI_ACR_SELECT_44K                      = 0x00000002,
HDMI_ACR_SELECT_48K                      = 0x00000003,
} HDMI_ACR_SELECT;

/*
 * HDMI_ACR_SOURCE enum
 */

typedef enum HDMI_ACR_SOURCE {
HDMI_ACR_SOURCE_HW                       = 0x00000000,
HDMI_ACR_SOURCE_SW                       = 0x00000001,
} HDMI_ACR_SOURCE;

/*
 * HDMI_ACR_N_MULTIPLE enum
 */

typedef enum HDMI_ACR_N_MULTIPLE {
HDMI_ACR_0_MULTIPLE_RESERVED             = 0x00000000,
HDMI_ACR_1_MULTIPLE                      = 0x00000001,
HDMI_ACR_2_MULTIPLE                      = 0x00000002,
HDMI_ACR_3_MULTIPLE_RESERVED             = 0x00000003,
HDMI_ACR_4_MULTIPLE                      = 0x00000004,
HDMI_ACR_5_MULTIPLE_RESERVED             = 0x00000005,
HDMI_ACR_6_MULTIPLE_RESERVED             = 0x00000006,
HDMI_ACR_7_MULTIPLE_RESERVED             = 0x00000007,
} HDMI_ACR_N_MULTIPLE;

/*
 * HDMI_ACR_AUDIO_PRIORITY enum
 */

typedef enum HDMI_ACR_AUDIO_PRIORITY {
HDMI_ACR_PKT_HIGH_PRIORITY_THAN_AUDIO_SAMPLE  = 0x00000000,
HDMI_AUDIO_SAMPLE_HIGH_PRIORITY_THAN_ACR_PKT  = 0x00000001,
} HDMI_ACR_AUDIO_PRIORITY;

/*
 * HDMI_NULL_SEND enum
 */

typedef enum HDMI_NULL_SEND {
HDMI_NULL_NOT_SEND                       = 0x00000000,
HDMI_NULL_PKT_SEND                       = 0x00000001,
} HDMI_NULL_SEND;

/*
 * HDMI_GC_SEND enum
 */

typedef enum HDMI_GC_SEND {
HDMI_GC_NOT_SEND                         = 0x00000000,
HDMI_GC_PKT_SEND                         = 0x00000001,
} HDMI_GC_SEND;

/*
 * HDMI_GC_CONT enum
 */

typedef enum HDMI_GC_CONT {
HDMI_GC_CONT_DISABLE                     = 0x00000000,
HDMI_GC_CONT_ENABLE                      = 0x00000001,
} HDMI_GC_CONT;

/*
 * HDMI_ISRC_SEND enum
 */

typedef enum HDMI_ISRC_SEND {
HDMI_ISRC_NOT_SEND                       = 0x00000000,
HDMI_ISRC_PKT_SEND                       = 0x00000001,
} HDMI_ISRC_SEND;

/*
 * HDMI_ISRC_CONT enum
 */

typedef enum HDMI_ISRC_CONT {
HDMI_ISRC_CONT_DISABLE                   = 0x00000000,
HDMI_ISRC_CONT_ENABLE                    = 0x00000001,
} HDMI_ISRC_CONT;

/*
 * HDMI_AVI_INFO_SEND enum
 */

typedef enum HDMI_AVI_INFO_SEND {
HDMI_AVI_INFO_NOT_SEND                   = 0x00000000,
HDMI_AVI_INFO_PKT_SEND                   = 0x00000001,
} HDMI_AVI_INFO_SEND;

/*
 * HDMI_AVI_INFO_CONT enum
 */

typedef enum HDMI_AVI_INFO_CONT {
HDMI_AVI_INFO_CONT_DISABLE               = 0x00000000,
HDMI_AVI_INFO_CONT_ENABLE                = 0x00000001,
} HDMI_AVI_INFO_CONT;

/*
 * HDMI_AUDIO_INFO_SEND enum
 */

typedef enum HDMI_AUDIO_INFO_SEND {
HDMI_AUDIO_INFO_NOT_SEND                 = 0x00000000,
HDMI_AUDIO_INFO_PKT_SEND                 = 0x00000001,
} HDMI_AUDIO_INFO_SEND;

/*
 * HDMI_AUDIO_INFO_CONT enum
 */

typedef enum HDMI_AUDIO_INFO_CONT {
HDMI_AUDIO_INFO_CONT_DISABLE             = 0x00000000,
HDMI_AUDIO_INFO_CONT_ENABLE              = 0x00000001,
} HDMI_AUDIO_INFO_CONT;

/*
 * HDMI_MPEG_INFO_SEND enum
 */

typedef enum HDMI_MPEG_INFO_SEND {
HDMI_MPEG_INFO_NOT_SEND                  = 0x00000000,
HDMI_MPEG_INFO_PKT_SEND                  = 0x00000001,
} HDMI_MPEG_INFO_SEND;

/*
 * HDMI_MPEG_INFO_CONT enum
 */

typedef enum HDMI_MPEG_INFO_CONT {
HDMI_MPEG_INFO_CONT_DISABLE              = 0x00000000,
HDMI_MPEG_INFO_CONT_ENABLE               = 0x00000001,
} HDMI_MPEG_INFO_CONT;

/*
 * HDMI_GENERIC0_SEND enum
 */

typedef enum HDMI_GENERIC0_SEND {
HDMI_GENERIC0_NOT_SEND                   = 0x00000000,
HDMI_GENERIC0_PKT_SEND                   = 0x00000001,
} HDMI_GENERIC0_SEND;

/*
 * HDMI_GENERIC0_CONT enum
 */

typedef enum HDMI_GENERIC0_CONT {
HDMI_GENERIC0_CONT_DISABLE               = 0x00000000,
HDMI_GENERIC0_CONT_ENABLE                = 0x00000001,
} HDMI_GENERIC0_CONT;

/*
 * HDMI_GENERIC1_SEND enum
 */

typedef enum HDMI_GENERIC1_SEND {
HDMI_GENERIC1_NOT_SEND                   = 0x00000000,
HDMI_GENERIC1_PKT_SEND                   = 0x00000001,
} HDMI_GENERIC1_SEND;

/*
 * HDMI_GENERIC1_CONT enum
 */

typedef enum HDMI_GENERIC1_CONT {
HDMI_GENERIC1_CONT_DISABLE               = 0x00000000,
HDMI_GENERIC1_CONT_ENABLE                = 0x00000001,
} HDMI_GENERIC1_CONT;

/*
 * HDMI_GC_AVMUTE_CONT enum
 */

typedef enum HDMI_GC_AVMUTE_CONT {
HDMI_GC_AVMUTE_CONT_DISABLE              = 0x00000000,
HDMI_GC_AVMUTE_CONT_ENABLE               = 0x00000001,
} HDMI_GC_AVMUTE_CONT;

/*
 * HDMI_PACKING_PHASE_OVERRIDE enum
 */

typedef enum HDMI_PACKING_PHASE_OVERRIDE {
HDMI_PACKING_PHASE_SET_BY_HW             = 0x00000000,
HDMI_PACKING_PHASE_SET_BY_SW             = 0x00000001,
} HDMI_PACKING_PHASE_OVERRIDE;

/*
 * HDMI_GENERIC2_SEND enum
 */

typedef enum HDMI_GENERIC2_SEND {
HDMI_GENERIC2_NOT_SEND                   = 0x00000000,
HDMI_GENERIC2_PKT_SEND                   = 0x00000001,
} HDMI_GENERIC2_SEND;

/*
 * HDMI_GENERIC2_CONT enum
 */

typedef enum HDMI_GENERIC2_CONT {
HDMI_GENERIC2_CONT_DISABLE               = 0x00000000,
HDMI_GENERIC2_CONT_ENABLE                = 0x00000001,
} HDMI_GENERIC2_CONT;

/*
 * HDMI_GENERIC3_SEND enum
 */

typedef enum HDMI_GENERIC3_SEND {
HDMI_GENERIC3_NOT_SEND                   = 0x00000000,
HDMI_GENERIC3_PKT_SEND                   = 0x00000001,
} HDMI_GENERIC3_SEND;

/*
 * HDMI_GENERIC3_CONT enum
 */

typedef enum HDMI_GENERIC3_CONT {
HDMI_GENERIC3_CONT_DISABLE               = 0x00000000,
HDMI_GENERIC3_CONT_ENABLE                = 0x00000001,
} HDMI_GENERIC3_CONT;

/*
 * TMDS_PIXEL_ENCODING enum
 */

typedef enum TMDS_PIXEL_ENCODING {
TMDS_PIXEL_ENCODING_444_OR_420           = 0x00000000,
TMDS_PIXEL_ENCODING_422                  = 0x00000001,
} TMDS_PIXEL_ENCODING;

/*
 * TMDS_COLOR_FORMAT enum
 */

typedef enum TMDS_COLOR_FORMAT {
TMDS_COLOR_FORMAT__24BPP__TWIN30BPP_MSB__DUAL48BPP  = 0x00000000,
TMDS_COLOR_FORMAT_TWIN30BPP_LSB          = 0x00000001,
TMDS_COLOR_FORMAT_DUAL30BPP              = 0x00000002,
TMDS_COLOR_FORMAT_RESERVED               = 0x00000003,
} TMDS_COLOR_FORMAT;

/*
 * TMDS_STEREOSYNC_CTL_SEL_REG enum
 */

typedef enum TMDS_STEREOSYNC_CTL_SEL_REG {
TMDS_STEREOSYNC_CTL0                     = 0x00000000,
TMDS_STEREOSYNC_CTL1                     = 0x00000001,
TMDS_STEREOSYNC_CTL2                     = 0x00000002,
TMDS_STEREOSYNC_CTL3                     = 0x00000003,
} TMDS_STEREOSYNC_CTL_SEL_REG;

/*
 * TMDS_CTL0_DATA_SEL enum
 */

typedef enum TMDS_CTL0_DATA_SEL {
TMDS_CTL0_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL0_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL0_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL0_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL0_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL0_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL0_DATA_SEL8_RANDOM_DATA          = 0x00000006,
TMDS_CTL0_DATA_SEL9_SEL15_RANDOM_DATA    = 0x00000007,
} TMDS_CTL0_DATA_SEL;

/*
 * TMDS_CTL0_DATA_INVERT enum
 */

typedef enum TMDS_CTL0_DATA_INVERT {
TMDS_CTL0_DATA_NORMAL                    = 0x00000000,
TMDS_CTL0_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL0_DATA_INVERT;

/*
 * TMDS_CTL0_DATA_MODULATION enum
 */

typedef enum TMDS_CTL0_DATA_MODULATION {
TMDS_CTL0_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL0_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL0_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL0_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL0_DATA_MODULATION;

/*
 * TMDS_CTL0_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL0_PATTERN_OUT_EN {
TMDS_CTL0_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL0_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL0_PATTERN_OUT_EN;

/*
 * TMDS_CTL1_DATA_SEL enum
 */

typedef enum TMDS_CTL1_DATA_SEL {
TMDS_CTL1_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL1_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL1_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL1_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL1_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL1_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL1_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL1_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL1_DATA_SEL;

/*
 * TMDS_CTL1_DATA_INVERT enum
 */

typedef enum TMDS_CTL1_DATA_INVERT {
TMDS_CTL1_DATA_NORMAL                    = 0x00000000,
TMDS_CTL1_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL1_DATA_INVERT;

/*
 * TMDS_CTL1_DATA_MODULATION enum
 */

typedef enum TMDS_CTL1_DATA_MODULATION {
TMDS_CTL1_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL1_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL1_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL1_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL1_DATA_MODULATION;

/*
 * TMDS_CTL1_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL1_PATTERN_OUT_EN {
TMDS_CTL1_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL1_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL1_PATTERN_OUT_EN;

/*
 * TMDS_CTL2_DATA_SEL enum
 */

typedef enum TMDS_CTL2_DATA_SEL {
TMDS_CTL2_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL2_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL2_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL2_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL2_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL2_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL2_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL2_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL2_DATA_SEL;

/*
 * TMDS_CTL2_DATA_INVERT enum
 */

typedef enum TMDS_CTL2_DATA_INVERT {
TMDS_CTL2_DATA_NORMAL                    = 0x00000000,
TMDS_CTL2_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL2_DATA_INVERT;

/*
 * TMDS_CTL2_DATA_MODULATION enum
 */

typedef enum TMDS_CTL2_DATA_MODULATION {
TMDS_CTL2_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL2_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL2_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL2_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL2_DATA_MODULATION;

/*
 * TMDS_CTL2_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL2_PATTERN_OUT_EN {
TMDS_CTL2_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL2_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL2_PATTERN_OUT_EN;

/*
 * TMDS_CTL3_DATA_INVERT enum
 */

typedef enum TMDS_CTL3_DATA_INVERT {
TMDS_CTL3_DATA_NORMAL                    = 0x00000000,
TMDS_CTL3_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL3_DATA_INVERT;

/*
 * TMDS_CTL3_DATA_MODULATION enum
 */

typedef enum TMDS_CTL3_DATA_MODULATION {
TMDS_CTL3_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL3_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL3_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL3_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL3_DATA_MODULATION;

/*
 * TMDS_CTL3_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL3_PATTERN_OUT_EN {
TMDS_CTL3_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL3_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL3_PATTERN_OUT_EN;

/*
 * TMDS_CTL3_DATA_SEL enum
 */

typedef enum TMDS_CTL3_DATA_SEL {
TMDS_CTL3_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL3_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL3_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL3_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL3_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL3_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL3_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL3_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL3_DATA_SEL;

/*
 * DIG_FE_CNTL_SOURCE_SELECT enum
 */

typedef enum DIG_FE_CNTL_SOURCE_SELECT {
DIG_FE_SOURCE_FROM_FMT0                  = 0x00000000,
DIG_FE_SOURCE_FROM_FMT1                  = 0x00000001,
DIG_FE_SOURCE_FROM_FMT2                  = 0x00000002,
DIG_FE_SOURCE_FROM_FMT3                  = 0x00000003,
DIG_FE_SOURCE_FROM_FMT4                  = 0x00000004,
DIG_FE_SOURCE_FROM_FMT5                  = 0x00000005,
} DIG_FE_CNTL_SOURCE_SELECT;

/*
 * DIG_FE_CNTL_STEREOSYNC_SELECT enum
 */

typedef enum DIG_FE_CNTL_STEREOSYNC_SELECT {
DIG_FE_STEREOSYNC_FROM_FMT0              = 0x00000000,
DIG_FE_STEREOSYNC_FROM_FMT1              = 0x00000001,
DIG_FE_STEREOSYNC_FROM_FMT2              = 0x00000002,
DIG_FE_STEREOSYNC_FROM_FMT3              = 0x00000003,
DIG_FE_STEREOSYNC_FROM_FMT4              = 0x00000004,
DIG_FE_STEREOSYNC_FROM_FMT5              = 0x00000005,
} DIG_FE_CNTL_STEREOSYNC_SELECT;

/*
 * DIG_FIFO_READ_CLOCK_SRC enum
 */

typedef enum DIG_FIFO_READ_CLOCK_SRC {
DIG_FIFO_READ_CLOCK_SRC_FROM_DCCG        = 0x00000000,
DIG_FIFO_READ_CLOCK_SRC_FROM_DISPLAY_PIPE  = 0x00000001,
} DIG_FIFO_READ_CLOCK_SRC;

/*
 * DIG_OUTPUT_CRC_CNTL_LINK_SEL enum
 */

typedef enum DIG_OUTPUT_CRC_CNTL_LINK_SEL {
DIG_OUTPUT_CRC_ON_LINK0                  = 0x00000000,
DIG_OUTPUT_CRC_ON_LINK1                  = 0x00000001,
} DIG_OUTPUT_CRC_CNTL_LINK_SEL;

/*
 * DIG_OUTPUT_CRC_DATA_SEL enum
 */

typedef enum DIG_OUTPUT_CRC_DATA_SEL {
DIG_OUTPUT_CRC_FOR_FULLFRAME             = 0x00000000,
DIG_OUTPUT_CRC_FOR_ACTIVEONLY            = 0x00000001,
DIG_OUTPUT_CRC_FOR_VBI                   = 0x00000002,
DIG_OUTPUT_CRC_FOR_AUDIO                 = 0x00000003,
} DIG_OUTPUT_CRC_DATA_SEL;

/*
 * DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN enum
 */

typedef enum DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN {
DIG_IN_NORMAL_OPERATION                  = 0x00000000,
DIG_IN_DEBUG_MODE                        = 0x00000001,
} DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN;

/*
 * DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL enum
 */

typedef enum DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL {
DIG_10BIT_TEST_PATTERN                   = 0x00000000,
DIG_ALTERNATING_TEST_PATTERN             = 0x00000001,
} DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL;

/*
 * DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN enum
 */

typedef enum DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN {
DIG_TEST_PATTERN_NORMAL                  = 0x00000000,
DIG_TEST_PATTERN_RANDOM                  = 0x00000001,
} DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN;

/*
 * DIG_TEST_PATTERN_RANDOM_PATTERN_RESET enum
 */

typedef enum DIG_TEST_PATTERN_RANDOM_PATTERN_RESET {
DIG_RANDOM_PATTERN_ENABLED               = 0x00000000,
DIG_RANDOM_PATTERN_RESETED               = 0x00000001,
} DIG_TEST_PATTERN_RANDOM_PATTERN_RESET;

/*
 * DIG_TEST_PATTERN_EXTERNAL_RESET_EN enum
 */

typedef enum DIG_TEST_PATTERN_EXTERNAL_RESET_EN {
DIG_TEST_PATTERN_EXTERNAL_RESET_ENABLE   = 0x00000000,
DIG_TEST_PATTERN_EXTERNAL_RESET_BY_EXT_SIG  = 0x00000001,
} DIG_TEST_PATTERN_EXTERNAL_RESET_EN;

/*
 * DIG_RANDOM_PATTERN_SEED_RAN_PAT enum
 */

typedef enum DIG_RANDOM_PATTERN_SEED_RAN_PAT {
DIG_RANDOM_PATTERN_SEED_RAN_PAT_ALL_PIXELS  = 0x00000000,
DIG_RANDOM_PATTERN_SEED_RAN_PAT_DE_HIGH  = 0x00000001,
} DIG_RANDOM_PATTERN_SEED_RAN_PAT;

/*
 * DIG_FIFO_STATUS_USE_OVERWRITE_LEVEL enum
 */

typedef enum DIG_FIFO_STATUS_USE_OVERWRITE_LEVEL {
DIG_FIFO_USE_OVERWRITE_LEVEL             = 0x00000000,
DIG_FIFO_USE_CAL_AVERAGE_LEVEL           = 0x00000001,
} DIG_FIFO_STATUS_USE_OVERWRITE_LEVEL;

/*
 * DIG_FIFO_ERROR_ACK enum
 */

typedef enum DIG_FIFO_ERROR_ACK {
DIG_FIFO_ERROR_ACK_INT                   = 0x00000000,
DIG_FIFO_ERROR_NOT_ACK                   = 0x00000001,
} DIG_FIFO_ERROR_ACK;

/*
 * DIG_FIFO_STATUS_FORCE_RECAL_AVERAGE enum
 */

typedef enum DIG_FIFO_STATUS_FORCE_RECAL_AVERAGE {
DIG_FIFO_NOT_FORCE_RECAL_AVERAGE         = 0x00000000,
DIG_FIFO_FORCE_RECAL_AVERAGE_LEVEL       = 0x00000001,
} DIG_FIFO_STATUS_FORCE_RECAL_AVERAGE;

/*
 * DIG_FIFO_STATUS_FORCE_RECOMP_MINMAX enum
 */

typedef enum DIG_FIFO_STATUS_FORCE_RECOMP_MINMAX {
DIG_FIFO_NOT_FORCE_RECOMP_MINMAX         = 0x00000000,
DIG_FIFO_FORCE_RECOMP_MINMAX             = 0x00000001,
} DIG_FIFO_STATUS_FORCE_RECOMP_MINMAX;

/*
 * AFMT_INTERRUPT_STATUS_CHG_MASK enum
 */

typedef enum AFMT_INTERRUPT_STATUS_CHG_MASK {
AFMT_INTERRUPT_DISABLE                   = 0x00000000,
AFMT_INTERRUPT_ENABLE                    = 0x00000001,
} AFMT_INTERRUPT_STATUS_CHG_MASK;

/*
 * HDMI_GC_AVMUTE enum
 */

typedef enum HDMI_GC_AVMUTE {
HDMI_GC_AVMUTE_SET                       = 0x00000000,
HDMI_GC_AVMUTE_UNSET                     = 0x00000001,
} HDMI_GC_AVMUTE;

/*
 * HDMI_DEFAULT_PAHSE enum
 */

typedef enum HDMI_DEFAULT_PAHSE {
HDMI_DEFAULT_PHASE_IS_0                  = 0x00000000,
HDMI_DEFAULT_PHASE_IS_1                  = 0x00000001,
} HDMI_DEFAULT_PAHSE;

/*
 * AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD {
AFMT_AUDIO_LAYOUT_DETERMINED_BY_AZ_AUDIO_CHANNEL_STATUS  = 0x00000000,
AFMT_AUDIO_LAYOUT_OVRD_BY_REGISTER       = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD;

/*
 * AUDIO_LAYOUT_SELECT enum
 */

typedef enum AUDIO_LAYOUT_SELECT {
AUDIO_LAYOUT_0                           = 0x00000000,
AUDIO_LAYOUT_1                           = 0x00000001,
} AUDIO_LAYOUT_SELECT;

/*
 * AFMT_AUDIO_CRC_CONTROL_CONT enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_CONT {
AFMT_AUDIO_CRC_ONESHOT                   = 0x00000000,
AFMT_AUDIO_CRC_AUTO_RESTART              = 0x00000001,
} AFMT_AUDIO_CRC_CONTROL_CONT;

/*
 * AFMT_AUDIO_CRC_CONTROL_SOURCE enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_SOURCE {
AFMT_AUDIO_CRC_SOURCE_FROM_FIFO_INPUT    = 0x00000000,
AFMT_AUDIO_CRC_SOURCE_FROM_FIFO_OUTPUT   = 0x00000001,
} AFMT_AUDIO_CRC_CONTROL_SOURCE;

/*
 * AFMT_AUDIO_CRC_CONTROL_CH_SEL enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_CH_SEL {
AFMT_AUDIO_CRC_CH0_SIG                   = 0x00000000,
AFMT_AUDIO_CRC_CH1_SIG                   = 0x00000001,
AFMT_AUDIO_CRC_CH2_SIG                   = 0x00000002,
AFMT_AUDIO_CRC_CH3_SIG                   = 0x00000003,
AFMT_AUDIO_CRC_CH4_SIG                   = 0x00000004,
AFMT_AUDIO_CRC_CH5_SIG                   = 0x00000005,
AFMT_AUDIO_CRC_CH6_SIG                   = 0x00000006,
AFMT_AUDIO_CRC_CH7_SIG                   = 0x00000007,
AFMT_AUDIO_CRC_RESERVED_8                = 0x00000008,
AFMT_AUDIO_CRC_RESERVED_9                = 0x00000009,
AFMT_AUDIO_CRC_RESERVED_10               = 0x0000000a,
AFMT_AUDIO_CRC_RESERVED_11               = 0x0000000b,
AFMT_AUDIO_CRC_RESERVED_12               = 0x0000000c,
AFMT_AUDIO_CRC_RESERVED_13               = 0x0000000d,
AFMT_AUDIO_CRC_RESERVED_14               = 0x0000000e,
AFMT_AUDIO_CRC_AUDIO_SAMPLE_COUNT        = 0x0000000f,
} AFMT_AUDIO_CRC_CONTROL_CH_SEL;

/*
 * AFMT_RAMP_CONTROL0_SIGN enum
 */

typedef enum AFMT_RAMP_CONTROL0_SIGN {
AFMT_RAMP_SIGNED                         = 0x00000000,
AFMT_RAMP_UNSIGNED                       = 0x00000001,
} AFMT_RAMP_CONTROL0_SIGN;

/*
 * AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND {
AFMT_AUDIO_PACKET_SENT_DISABLED          = 0x00000000,
AFMT_AUDIO_PACKET_SENT_ENABLED           = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND;

/*
 * AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS {
AFMT_NOT_RESET_AUDIO_FIFO_WHEN_AUDIO_DISABLED_RESERVED  = 0x00000000,
AFMT_RESET_AUDIO_FIFO_WHEN_AUDIO_DISABLED  = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS;

/*
 * AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE enum
 */

typedef enum AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE {
AFMT_INFOFRAME_SOURCE_FROM_AZALIA_BLOCK  = 0x00000000,
AFMT_INFOFRAME_SOURCE_FROM_AFMT_REGISTERS  = 0x00000001,
} AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE;

/*
 * AFMT_AUDIO_SRC_CONTROL_SELECT enum
 */

typedef enum AFMT_AUDIO_SRC_CONTROL_SELECT {
AFMT_AUDIO_SRC_FROM_AZ_STREAM0           = 0x00000000,
AFMT_AUDIO_SRC_FROM_AZ_STREAM1           = 0x00000001,
AFMT_AUDIO_SRC_FROM_AZ_STREAM2           = 0x00000002,
AFMT_AUDIO_SRC_FROM_AZ_STREAM3           = 0x00000003,
AFMT_AUDIO_SRC_FROM_AZ_STREAM4           = 0x00000004,
AFMT_AUDIO_SRC_FROM_AZ_STREAM5           = 0x00000005,
AFMT_AUDIO_SRC_RESERVED                  = 0x00000006,
} AFMT_AUDIO_SRC_CONTROL_SELECT;

/*
 * DIG_BE_CNTL_MODE enum
 */

typedef enum DIG_BE_CNTL_MODE {
DIG_BE_DP_SST_MODE                       = 0x00000000,
DIG_BE_RESERVED1                         = 0x00000001,
DIG_BE_TMDS_DVI_MODE                     = 0x00000002,
DIG_BE_TMDS_HDMI_MODE                    = 0x00000003,
DIG_BE_SDVO_RESERVED                     = 0x00000004,
DIG_BE_DP_MST_MODE                       = 0x00000005,
DIG_BE_RESERVED2                         = 0x00000006,
DIG_BE_RESERVED3                         = 0x00000007,
} DIG_BE_CNTL_MODE;

/*
 * DIG_BE_CNTL_HPD_SELECT enum
 */

typedef enum DIG_BE_CNTL_HPD_SELECT {
DIG_BE_CNTL_HPD1                         = 0x00000000,
DIG_BE_CNTL_HPD2                         = 0x00000001,
DIG_BE_CNTL_HPD3                         = 0x00000002,
DIG_BE_CNTL_HPD4                         = 0x00000003,
DIG_BE_CNTL_HPD5                         = 0x00000004,
DIG_BE_CNTL_HPD6                         = 0x00000005,
} DIG_BE_CNTL_HPD_SELECT;

/*
 * LVTMA_RANDOM_PATTERN_SEED_RAN_PAT enum
 */

typedef enum LVTMA_RANDOM_PATTERN_SEED_RAN_PAT {
LVTMA_RANDOM_PATTERN_SEED_ALL_PIXELS     = 0x00000000,
LVTMA_RANDOM_PATTERN_SEED_ONLY_DE_HIGH   = 0x00000001,
} LVTMA_RANDOM_PATTERN_SEED_RAN_PAT;

/*
 * TMDS_SYNC_PHASE enum
 */

typedef enum TMDS_SYNC_PHASE {
TMDS_NOT_SYNC_PHASE_ON_FRAME_START       = 0x00000000,
TMDS_SYNC_PHASE_ON_FRAME_START           = 0x00000001,
} TMDS_SYNC_PHASE;

/*
 * TMDS_DATA_SYNCHRONIZATION_DSINTSEL enum
 */

typedef enum TMDS_DATA_SYNCHRONIZATION_DSINTSEL {
TMDS_DATA_SYNCHRONIZATION_DSINTSEL_PCLK_TMDS  = 0x00000000,
TMDS_DATA_SYNCHRONIZATION_DSINTSEL_TMDS_PLL  = 0x00000001,
} TMDS_DATA_SYNCHRONIZATION_DSINTSEL;

/*
 * TMDS_TRANSMITTER_ENABLE_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_HPD_MASK {
TMDS_TRANSMITTER_HPD_MASK_NOT_OVERRIDE   = 0x00000000,
TMDS_TRANSMITTER_HPD_MASK_OVERRIDE       = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_HPD_MASK;

/*
 * TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK {
TMDS_TRANSMITTER_LNKCEN_HPD_MASK_NOT_OVERRIDE  = 0x00000000,
TMDS_TRANSMITTER_LNKCEN_HPD_MASK_OVERRIDE  = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK;

/*
 * TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK {
TMDS_TRANSMITTER_LNKDEN_HPD_MASK_NOT_OVERRIDE  = 0x00000000,
TMDS_TRANSMITTER_LNKDEN_HPD_MASK_OVERRIDE  = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK {
TMDS_TRANSMITTER_HPD_NOT_OVERRIDE_PLL_ENABLE  = 0x00000000,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE_ON_DISCON  = 0x00000001,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE_ON_CON  = 0x00000002,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE  = 0x00000003,
} TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK;

/*
 * TMDS_TRANSMITTER_CONTROL_IDSCKSELA enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_IDSCKSELA {
TMDS_TRANSMITTER_IDSCKSELA_USE_IPIXCLK   = 0x00000000,
TMDS_TRANSMITTER_IDSCKSELA_USE_IDCLK     = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_IDSCKSELA;

/*
 * TMDS_TRANSMITTER_CONTROL_IDSCKSELB enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_IDSCKSELB {
TMDS_TRANSMITTER_IDSCKSELB_USE_IPIXCLK   = 0x00000000,
TMDS_TRANSMITTER_IDSCKSELB_USE_IDCLK     = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_IDSCKSELB;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN {
TMDS_TRANSMITTER_PLL_PWRUP_SEQ_DISABLE   = 0x00000000,
TMDS_TRANSMITTER_PLL_PWRUP_SEQ_ENABLE    = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK {
TMDS_TRANSMITTER_PLL_NOT_RST_ON_HPD      = 0x00000000,
TMDS_TRANSMITTER_PLL_RST_ON_HPD          = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK;

/*
 * TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS {
TMDS_TRANSMITTER_TMCLK_FROM_TMDS_TMCLK   = 0x00000000,
TMDS_TRANSMITTER_TMCLK_FROM_PADS         = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS;

/*
 * TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS {
TMDS_TRANSMITTER_TDCLK_FROM_TMDS_TDCLK   = 0x00000000,
TMDS_TRANSMITTER_TDCLK_FROM_PADS         = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS;

/*
 * TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN {
TMDS_TRANSMITTER_PLLSEL_BY_HW            = 0x00000000,
TMDS_TRANSMITTER_PLLSEL_OVERWRITE_BY_SW  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN;

/*
 * TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA {
TMDS_TRANSMITTER_BYPASS_PLLA_COHERENT    = 0x00000000,
TMDS_TRANSMITTER_BYPASS_PLLA_INCOHERENT  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA;

/*
 * TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB {
TMDS_TRANSMITTER_BYPASS_PLLB_COHERENT    = 0x00000000,
TMDS_TRANSMITTER_BYPASS_PLLB_INCOHERENT  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB;

/*
 * TMDS_REG_TEST_OUTPUTA_CNTLA enum
 */

typedef enum TMDS_REG_TEST_OUTPUTA_CNTLA {
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA0      = 0x00000000,
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA1      = 0x00000001,
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA2      = 0x00000002,
TMDS_REG_TEST_OUTPUTA_CNTLA_NA           = 0x00000003,
} TMDS_REG_TEST_OUTPUTA_CNTLA;

/*
 * TMDS_REG_TEST_OUTPUTB_CNTLB enum
 */

typedef enum TMDS_REG_TEST_OUTPUTB_CNTLB {
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB0      = 0x00000000,
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB1      = 0x00000001,
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB2      = 0x00000002,
TMDS_REG_TEST_OUTPUTB_CNTLB_NA           = 0x00000003,
} TMDS_REG_TEST_OUTPUTB_CNTLB;

/*******************************************************
 * DCP Enums
 *******************************************************/

/*
 * DCP_GRPH_ENABLE enum
 */

typedef enum DCP_GRPH_ENABLE {
DCP_GRPH_ENABLE_FALSE                    = 0x00000000,
DCP_GRPH_ENABLE_TRUE                     = 0x00000001,
} DCP_GRPH_ENABLE;

/*
 * DCP_GRPH_KEYER_ALPHA_SEL enum
 */

typedef enum DCP_GRPH_KEYER_ALPHA_SEL {
DCP_GRPH_KEYER_ALPHA_SEL_FALSE           = 0x00000000,
DCP_GRPH_KEYER_ALPHA_SEL_TRUE            = 0x00000001,
} DCP_GRPH_KEYER_ALPHA_SEL;

/*
 * DCP_GRPH_DEPTH enum
 */

typedef enum DCP_GRPH_DEPTH {
DCP_GRPH_DEPTH_8BPP                      = 0x00000000,
DCP_GRPH_DEPTH_16BPP                     = 0x00000001,
DCP_GRPH_DEPTH_32BPP                     = 0x00000002,
DCP_GRPH_DEPTH_64BPP                     = 0x00000003,
} DCP_GRPH_DEPTH;

/*
 * DCP_GRPH_NUM_BANKS enum
 */

typedef enum DCP_GRPH_NUM_BANKS {
DCP_GRPH_NUM_BANKS_1BANK                 = 0x00000000,
DCP_GRPH_NUM_BANKS_2BANK                 = 0x00000001,
DCP_GRPH_NUM_BANKS_4BANK                 = 0x00000002,
DCP_GRPH_NUM_BANKS_8BANK                 = 0x00000003,
DCP_GRPH_NUM_BANKS_16BANK                = 0x00000004,
} DCP_GRPH_NUM_BANKS;

/*
 * DCP_GRPH_NUM_PIPES enum
 */

typedef enum DCP_GRPH_NUM_PIPES {
DCP_GRPH_NUM_PIPES_1PIPE                 = 0x00000000,
DCP_GRPH_NUM_PIPES_2PIPE                 = 0x00000001,
DCP_GRPH_NUM_PIPES_4PIPE                 = 0x00000002,
DCP_GRPH_NUM_PIPES_8PIPE                 = 0x00000003,
} DCP_GRPH_NUM_PIPES;

/*
 * DCP_GRPH_FORMAT enum
 */

typedef enum DCP_GRPH_FORMAT {
DCP_GRPH_FORMAT_8BPP                     = 0x00000000,
DCP_GRPH_FORMAT_16BPP                    = 0x00000001,
DCP_GRPH_FORMAT_32BPP                    = 0x00000002,
DCP_GRPH_FORMAT_64BPP                    = 0x00000003,
} DCP_GRPH_FORMAT;

/*
 * DCP_GRPH_ADDRESS_TRANSLATION_ENABLE enum
 */

typedef enum DCP_GRPH_ADDRESS_TRANSLATION_ENABLE {
DCP_GRPH_ADDRESS_TRANSLATION_ENABLE_FALSE  = 0x00000000,
DCP_GRPH_ADDRESS_TRANSLATION_ENABLE_TRUE  = 0x00000001,
} DCP_GRPH_ADDRESS_TRANSLATION_ENABLE;

/*
 * DCP_GRPH_SW_MODE enum
 */

typedef enum DCP_GRPH_SW_MODE {
DCP_GRPH_SW_MODE_0                       = 0x00000000,
DCP_GRPH_SW_MODE_2                       = 0x00000002,
DCP_GRPH_SW_MODE_3                       = 0x00000003,
DCP_GRPH_SW_MODE_22                      = 0x00000016,
DCP_GRPH_SW_MODE_23                      = 0x00000017,
DCP_GRPH_SW_MODE_26                      = 0x0000001a,
DCP_GRPH_SW_MODE_27                      = 0x0000001b,
DCP_GRPH_SW_MODE_30                      = 0x0000001e,
DCP_GRPH_SW_MODE_31                      = 0x0000001f,
} DCP_GRPH_SW_MODE;

/*
 * DCP_GRPH_COLOR_EXPANSION_MODE enum
 */

typedef enum DCP_GRPH_COLOR_EXPANSION_MODE {
DCP_GRPH_COLOR_EXPANSION_MODE_DEXP       = 0x00000000,
DCP_GRPH_COLOR_EXPANSION_MODE_ZEXP       = 0x00000001,
} DCP_GRPH_COLOR_EXPANSION_MODE;

/*
 * DCP_GRPH_LUT_10BIT_BYPASS_EN enum
 */

typedef enum DCP_GRPH_LUT_10BIT_BYPASS_EN {
DCP_GRPH_LUT_10BIT_BYPASS_EN_FALSE       = 0x00000000,
DCP_GRPH_LUT_10BIT_BYPASS_EN_TRUE        = 0x00000001,
} DCP_GRPH_LUT_10BIT_BYPASS_EN;

/*
 * DCP_GRPH_LUT_10BIT_BYPASS_DBL_BUF_EN enum
 */

typedef enum DCP_GRPH_LUT_10BIT_BYPASS_DBL_BUF_EN {
DCP_GRPH_LUT_10BIT_BYPASS_DBL_BUF_EN_FALSE  = 0x00000000,
DCP_GRPH_LUT_10BIT_BYPASS_DBL_BUF_EN_TRUE  = 0x00000001,
} DCP_GRPH_LUT_10BIT_BYPASS_DBL_BUF_EN;

/*
 * DCP_GRPH_ENDIAN_SWAP enum
 */

typedef enum DCP_GRPH_ENDIAN_SWAP {
DCP_GRPH_ENDIAN_SWAP_NONE                = 0x00000000,
DCP_GRPH_ENDIAN_SWAP_8IN16               = 0x00000001,
DCP_GRPH_ENDIAN_SWAP_8IN32               = 0x00000002,
DCP_GRPH_ENDIAN_SWAP_8IN64               = 0x00000003,
} DCP_GRPH_ENDIAN_SWAP;

/*
 * DCP_GRPH_RED_CROSSBAR enum
 */

typedef enum DCP_GRPH_RED_CROSSBAR {
DCP_GRPH_RED_CROSSBAR_FROM_R             = 0x00000000,
DCP_GRPH_RED_CROSSBAR_FROM_G             = 0x00000001,
DCP_GRPH_RED_CROSSBAR_FROM_B             = 0x00000002,
DCP_GRPH_RED_CROSSBAR_FROM_A             = 0x00000003,
} DCP_GRPH_RED_CROSSBAR;

/*
 * DCP_GRPH_GREEN_CROSSBAR enum
 */

typedef enum DCP_GRPH_GREEN_CROSSBAR {
DCP_GRPH_GREEN_CROSSBAR_FROM_G           = 0x00000000,
DCP_GRPH_GREEN_CROSSBAR_FROM_B           = 0x00000001,
DCP_GRPH_GREEN_CROSSBAR_FROM_A           = 0x00000002,
DCP_GRPH_GREEN_CROSSBAR_FROM_R           = 0x00000003,
} DCP_GRPH_GREEN_CROSSBAR;

/*
 * DCP_GRPH_BLUE_CROSSBAR enum
 */

typedef enum DCP_GRPH_BLUE_CROSSBAR {
DCP_GRPH_BLUE_CROSSBAR_FROM_B            = 0x00000000,
DCP_GRPH_BLUE_CROSSBAR_FROM_A            = 0x00000001,
DCP_GRPH_BLUE_CROSSBAR_FROM_R            = 0x00000002,
DCP_GRPH_BLUE_CROSSBAR_FROM_G            = 0x00000003,
} DCP_GRPH_BLUE_CROSSBAR;

/*
 * DCP_GRPH_ALPHA_CROSSBAR enum
 */

typedef enum DCP_GRPH_ALPHA_CROSSBAR {
DCP_GRPH_ALPHA_CROSSBAR_FROM_A           = 0x00000000,
DCP_GRPH_ALPHA_CROSSBAR_FROM_R           = 0x00000001,
DCP_GRPH_ALPHA_CROSSBAR_FROM_G           = 0x00000002,
DCP_GRPH_ALPHA_CROSSBAR_FROM_B           = 0x00000003,
} DCP_GRPH_ALPHA_CROSSBAR;

/*
 * DCP_GRPH_PRIMARY_DFQ_ENABLE enum
 */

typedef enum DCP_GRPH_PRIMARY_DFQ_ENABLE {
DCP_GRPH_PRIMARY_DFQ_ENABLE_FALSE        = 0x00000000,
DCP_GRPH_PRIMARY_DFQ_ENABLE_TRUE         = 0x00000001,
} DCP_GRPH_PRIMARY_DFQ_ENABLE;

/*
 * DCP_GRPH_SECONDARY_DFQ_ENABLE enum
 */

typedef enum DCP_GRPH_SECONDARY_DFQ_ENABLE {
DCP_GRPH_SECONDARY_DFQ_ENABLE_FALSE      = 0x00000000,
DCP_GRPH_SECONDARY_DFQ_ENABLE_TRUE       = 0x00000001,
} DCP_GRPH_SECONDARY_DFQ_ENABLE;

/*
 * DCP_GRPH_INPUT_GAMMA_MODE enum
 */

typedef enum DCP_GRPH_INPUT_GAMMA_MODE {
DCP_GRPH_INPUT_GAMMA_MODE_LUT            = 0x00000000,
DCP_GRPH_INPUT_GAMMA_MODE_BYPASS         = 0x00000001,
} DCP_GRPH_INPUT_GAMMA_MODE;

/*
 * DCP_GRPH_MODE_UPDATE_PENDING enum
 */

typedef enum DCP_GRPH_MODE_UPDATE_PENDING {
DCP_GRPH_MODE_UPDATE_PENDING_FALSE       = 0x00000000,
DCP_GRPH_MODE_UPDATE_PENDING_TRUE        = 0x00000001,
} DCP_GRPH_MODE_UPDATE_PENDING;

/*
 * DCP_GRPH_MODE_UPDATE_TAKEN enum
 */

typedef enum DCP_GRPH_MODE_UPDATE_TAKEN {
DCP_GRPH_MODE_UPDATE_TAKEN_FALSE         = 0x00000000,
DCP_GRPH_MODE_UPDATE_TAKEN_TRUE          = 0x00000001,
} DCP_GRPH_MODE_UPDATE_TAKEN;

/*
 * DCP_GRPH_SURFACE_UPDATE_PENDING enum
 */

typedef enum DCP_GRPH_SURFACE_UPDATE_PENDING {
DCP_GRPH_SURFACE_UPDATE_PENDING_FALSE    = 0x00000000,
DCP_GRPH_SURFACE_UPDATE_PENDING_TRUE     = 0x00000001,
} DCP_GRPH_SURFACE_UPDATE_PENDING;

/*
 * DCP_GRPH_SURFACE_UPDATE_TAKEN enum
 */

typedef enum DCP_GRPH_SURFACE_UPDATE_TAKEN {
DCP_GRPH_SURFACE_UPDATE_TAKEN_FALSE      = 0x00000000,
DCP_GRPH_SURFACE_UPDATE_TAKEN_TRUE       = 0x00000001,
} DCP_GRPH_SURFACE_UPDATE_TAKEN;

/*
 * DCP_GRPH_SURFACE_XDMA_PENDING_ENABLE enum
 */

typedef enum DCP_GRPH_SURFACE_XDMA_PENDING_ENABLE {
DCP_GRPH_SURFACE_XDMA_PENDING_ENABLE_FALSE = 0x00000000,
DCP_GRPH_SURFACE_XDMA_PENDING_ENABLE_TRUE = 0x00000001,
} DCP_GRPH_SURFACE_XDMA_PENDING_ENABLE;

/*
 * DCP_GRPH_UPDATE_LOCK enum
 */

typedef enum DCP_GRPH_UPDATE_LOCK {
DCP_GRPH_UPDATE_LOCK_FALSE               = 0x00000000,
DCP_GRPH_UPDATE_LOCK_TRUE                = 0x00000001,
} DCP_GRPH_UPDATE_LOCK;

/*
 * DCP_GRPH_SURFACE_IGNORE_UPDATE_LOCK enum
 */

typedef enum DCP_GRPH_SURFACE_IGNORE_UPDATE_LOCK {
DCP_GRPH_SURFACE_IGNORE_UPDATE_LOCK_FALSE  = 0x00000000,
DCP_GRPH_SURFACE_IGNORE_UPDATE_LOCK_TRUE  = 0x00000001,
} DCP_GRPH_SURFACE_IGNORE_UPDATE_LOCK;

/*
 * DCP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE enum
 */

typedef enum DCP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE {
DCP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE_FALSE  = 0x00000000,
DCP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE_TRUE  = 0x00000001,
} DCP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE;

/*
 * DCP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE enum
 */

typedef enum DCP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE {
DCP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE_FALSE  = 0x00000000,
DCP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE_TRUE  = 0x00000001,
} DCP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE;

/*
 * DCP_GRPH_SURFACE_UPDATE_H_RETRACE_EN enum
 */

typedef enum DCP_GRPH_SURFACE_UPDATE_H_RETRACE_EN {
DCP_GRPH_SURFACE_UPDATE_H_RETRACE_EN_FALSE  = 0x00000000,
DCP_GRPH_SURFACE_UPDATE_H_RETRACE_EN_TRUE  = 0x00000001,
} DCP_GRPH_SURFACE_UPDATE_H_RETRACE_EN;

/*
 * DCP_GRPH_XDMA_SUPER_AA_EN enum
 */

typedef enum DCP_GRPH_XDMA_SUPER_AA_EN {
DCP_GRPH_XDMA_SUPER_AA_EN_FALSE          = 0x00000000,
DCP_GRPH_XDMA_SUPER_AA_EN_TRUE           = 0x00000001,
} DCP_GRPH_XDMA_SUPER_AA_EN;

/*
 * DCP_GRPH_DFQ_RESET enum
 */

typedef enum DCP_GRPH_DFQ_RESET {
DCP_GRPH_DFQ_RESET_FALSE                 = 0x00000000,
DCP_GRPH_DFQ_RESET_TRUE                  = 0x00000001,
} DCP_GRPH_DFQ_RESET;

/*
 * DCP_GRPH_DFQ_SIZE enum
 */

typedef enum DCP_GRPH_DFQ_SIZE {
DCP_GRPH_DFQ_SIZE_DEEP1                  = 0x00000000,
DCP_GRPH_DFQ_SIZE_DEEP2                  = 0x00000001,
DCP_GRPH_DFQ_SIZE_DEEP3                  = 0x00000002,
DCP_GRPH_DFQ_SIZE_DEEP4                  = 0x00000003,
DCP_GRPH_DFQ_SIZE_DEEP5                  = 0x00000004,
DCP_GRPH_DFQ_SIZE_DEEP6                  = 0x00000005,
DCP_GRPH_DFQ_SIZE_DEEP7                  = 0x00000006,
DCP_GRPH_DFQ_SIZE_DEEP8                  = 0x00000007,
} DCP_GRPH_DFQ_SIZE;

/*
 * DCP_GRPH_DFQ_MIN_FREE_ENTRIES enum
 */

typedef enum DCP_GRPH_DFQ_MIN_FREE_ENTRIES {
DCP_GRPH_DFQ_MIN_FREE_ENTRIES_1          = 0x00000000,
DCP_GRPH_DFQ_MIN_FREE_ENTRIES_2          = 0x00000001,
DCP_GRPH_DFQ_MIN_FREE_ENTRIES_3          = 0x00000002,
DCP_GRPH_DFQ_MIN_FREE_ENTRIES_4          = 0x00000003,
DCP_GRPH_DFQ_MIN_FREE_ENTRIES_5          = 0x00000004,
DCP_GRPH_DFQ_MIN_FREE_ENTRIES_6          = 0x00000005,
DCP_GRPH_DFQ_MIN_FREE_ENTRIES_7          = 0x00000006,
DCP_GRPH_DFQ_MIN_FREE_ENTRIES_8          = 0x00000007,
} DCP_GRPH_DFQ_MIN_FREE_ENTRIES;

/*
 * DCP_GRPH_DFQ_RESET_ACK enum
 */

typedef enum DCP_GRPH_DFQ_RESET_ACK {
DCP_GRPH_DFQ_RESET_ACK_FALSE             = 0x00000000,
DCP_GRPH_DFQ_RESET_ACK_TRUE              = 0x00000001,
} DCP_GRPH_DFQ_RESET_ACK;

/*
 * DCP_GRPH_PFLIP_INT_CLEAR enum
 */

typedef enum DCP_GRPH_PFLIP_INT_CLEAR {
DCP_GRPH_PFLIP_INT_CLEAR_FALSE           = 0x00000000,
DCP_GRPH_PFLIP_INT_CLEAR_TRUE            = 0x00000001,
} DCP_GRPH_PFLIP_INT_CLEAR;

/*
 * DCP_GRPH_PFLIP_INT_MASK enum
 */

typedef enum DCP_GRPH_PFLIP_INT_MASK {
DCP_GRPH_PFLIP_INT_MASK_FALSE            = 0x00000000,
DCP_GRPH_PFLIP_INT_MASK_TRUE             = 0x00000001,
} DCP_GRPH_PFLIP_INT_MASK;

/*
 * DCP_GRPH_PFLIP_INT_TYPE enum
 */

typedef enum DCP_GRPH_PFLIP_INT_TYPE {
DCP_GRPH_PFLIP_INT_TYPE_LEGACY_LEVEL     = 0x00000000,
DCP_GRPH_PFLIP_INT_TYPE_PULSE            = 0x00000001,
} DCP_GRPH_PFLIP_INT_TYPE;

/*
 * DCP_GRPH_PRESCALE_SELECT enum
 */

typedef enum DCP_GRPH_PRESCALE_SELECT {
DCP_GRPH_PRESCALE_SELECT_FIXED           = 0x00000000,
DCP_GRPH_PRESCALE_SELECT_FLOATING        = 0x00000001,
} DCP_GRPH_PRESCALE_SELECT;

/*
 * DCP_GRPH_PRESCALE_R_SIGN enum
 */

typedef enum DCP_GRPH_PRESCALE_R_SIGN {
DCP_GRPH_PRESCALE_R_SIGN_UNSIGNED        = 0x00000000,
DCP_GRPH_PRESCALE_R_SIGN_SIGNED          = 0x00000001,
} DCP_GRPH_PRESCALE_R_SIGN;

/*
 * DCP_GRPH_PRESCALE_G_SIGN enum
 */

typedef enum DCP_GRPH_PRESCALE_G_SIGN {
DCP_GRPH_PRESCALE_G_SIGN_UNSIGNED        = 0x00000000,
DCP_GRPH_PRESCALE_G_SIGN_SIGNED          = 0x00000001,
} DCP_GRPH_PRESCALE_G_SIGN;

/*
 * DCP_GRPH_PRESCALE_B_SIGN enum
 */

typedef enum DCP_GRPH_PRESCALE_B_SIGN {
DCP_GRPH_PRESCALE_B_SIGN_UNSIGNED        = 0x00000000,
DCP_GRPH_PRESCALE_B_SIGN_SIGNED          = 0x00000001,
} DCP_GRPH_PRESCALE_B_SIGN;

/*
 * DCP_GRPH_PRESCALE_BYPASS enum
 */

typedef enum DCP_GRPH_PRESCALE_BYPASS {
DCP_GRPH_PRESCALE_BYPASS_FALSE           = 0x00000000,
DCP_GRPH_PRESCALE_BYPASS_TRUE            = 0x00000001,
} DCP_GRPH_PRESCALE_BYPASS;

/*
 * DCP_INPUT_CSC_GRPH_MODE enum
 */

typedef enum DCP_INPUT_CSC_GRPH_MODE {
DCP_INPUT_CSC_GRPH_MODE_BYPASS           = 0x00000000,
DCP_INPUT_CSC_GRPH_MODE_INPUT_CSC_COEF   = 0x00000001,
DCP_INPUT_CSC_GRPH_MODE_SHARED_COEF      = 0x00000002,
DCP_INPUT_CSC_GRPH_MODE_RESERVED         = 0x00000003,
} DCP_INPUT_CSC_GRPH_MODE;

/*
 * DCP_OUTPUT_CSC_GRPH_MODE enum
 */

typedef enum DCP_OUTPUT_CSC_GRPH_MODE {
DCP_OUTPUT_CSC_GRPH_MODE_BYPASS          = 0x00000000,
DCP_OUTPUT_CSC_GRPH_MODE_RGB             = 0x00000001,
DCP_OUTPUT_CSC_GRPH_MODE_YCBCR601        = 0x00000002,
DCP_OUTPUT_CSC_GRPH_MODE_YCBCR709        = 0x00000003,
DCP_OUTPUT_CSC_GRPH_MODE_OUTPUT_CSC_COEF  = 0x00000004,
DCP_OUTPUT_CSC_GRPH_MODE_SHARED_COEF     = 0x00000005,
DCP_OUTPUT_CSC_GRPH_MODE_RESERVED0       = 0x00000006,
DCP_OUTPUT_CSC_GRPH_MODE_RESERVED1       = 0x00000007,
} DCP_OUTPUT_CSC_GRPH_MODE;

/*
 * DCP_DENORM_MODE enum
 */

typedef enum DCP_DENORM_MODE {
DCP_DENORM_MODE_UNITY                    = 0x00000000,
DCP_DENORM_MODE_6BIT                     = 0x00000001,
DCP_DENORM_MODE_8BIT                     = 0x00000002,
DCP_DENORM_MODE_10BIT                    = 0x00000003,
DCP_DENORM_MODE_11BIT                    = 0x00000004,
DCP_DENORM_MODE_12BIT                    = 0x00000005,
DCP_DENORM_MODE_RESERVED0                = 0x00000006,
DCP_DENORM_MODE_RESERVED1                = 0x00000007,
} DCP_DENORM_MODE;

/*
 * DCP_DENORM_14BIT_OUT enum
 */

typedef enum DCP_DENORM_14BIT_OUT {
DCP_DENORM_14BIT_OUT_FALSE               = 0x00000000,
DCP_DENORM_14BIT_OUT_TRUE                = 0x00000001,
} DCP_DENORM_14BIT_OUT;

/*
 * DCP_OUT_ROUND_TRUNC_MODE enum
 */

typedef enum DCP_OUT_ROUND_TRUNC_MODE {
DCP_OUT_ROUND_TRUNC_MODE_TRUNCATE_12     = 0x00000000,
DCP_OUT_ROUND_TRUNC_MODE_TRUNCATE_11     = 0x00000001,
DCP_OUT_ROUND_TRUNC_MODE_TRUNCATE_10     = 0x00000002,
DCP_OUT_ROUND_TRUNC_MODE_TRUNCATE_9      = 0x00000003,
DCP_OUT_ROUND_TRUNC_MODE_TRUNCATE_8      = 0x00000004,
DCP_OUT_ROUND_TRUNC_MODE_TRUNCATE_RESERVED  = 0x00000005,
DCP_OUT_ROUND_TRUNC_MODE_TRUNCATE_14     = 0x00000006,
DCP_OUT_ROUND_TRUNC_MODE_TRUNCATE_13     = 0x00000007,
DCP_OUT_ROUND_TRUNC_MODE_ROUND_12        = 0x00000008,
DCP_OUT_ROUND_TRUNC_MODE_ROUND_11        = 0x00000009,
DCP_OUT_ROUND_TRUNC_MODE_ROUND_10        = 0x0000000a,
DCP_OUT_ROUND_TRUNC_MODE_ROUND_9         = 0x0000000b,
DCP_OUT_ROUND_TRUNC_MODE_ROUND_8         = 0x0000000c,
DCP_OUT_ROUND_TRUNC_MODE_ROUND_RESERVED  = 0x0000000d,
DCP_OUT_ROUND_TRUNC_MODE_ROUND_14        = 0x0000000e,
DCP_OUT_ROUND_TRUNC_MODE_ROUND_13        = 0x0000000f,
} DCP_OUT_ROUND_TRUNC_MODE;

/*
 * DCP_KEY_MODE enum
 */

typedef enum DCP_KEY_MODE {
DCP_KEY_MODE_ALPHA0                      = 0x00000000,
DCP_KEY_MODE_ALPHA1                      = 0x00000001,
DCP_KEY_MODE_IN_RANGE_ALPHA1             = 0x00000002,
DCP_KEY_MODE_IN_RANGE_ALPHA0             = 0x00000003,
} DCP_KEY_MODE;

/*
 * DCP_GRPH_DEGAMMA_MODE enum
 */

typedef enum DCP_GRPH_DEGAMMA_MODE {
DCP_GRPH_DEGAMMA_MODE_BYPASS             = 0x00000000,
DCP_GRPH_DEGAMMA_MODE_ROMA               = 0x00000001,
DCP_GRPH_DEGAMMA_MODE_ROMB               = 0x00000002,
DCP_GRPH_DEGAMMA_MODE_RESERVED           = 0x00000003,
} DCP_GRPH_DEGAMMA_MODE;

/*
 * DCP_CURSOR_DEGAMMA_MODE enum
 */

typedef enum DCP_CURSOR_DEGAMMA_MODE {
DCP_CURSOR_DEGAMMA_MODE_BYPASS           = 0x00000000,
DCP_CURSOR_DEGAMMA_MODE_ROMA             = 0x00000001,
DCP_CURSOR_DEGAMMA_MODE_ROMB             = 0x00000002,
DCP_CURSOR_DEGAMMA_MODE_RESERVED         = 0x00000003,
} DCP_CURSOR_DEGAMMA_MODE;

/*
 * DCP_GRPH_GAMUT_REMAP_MODE enum
 */

typedef enum DCP_GRPH_GAMUT_REMAP_MODE {
DCP_GRPH_GAMUT_REMAP_MODE_BYPASS         = 0x00000000,
DCP_GRPH_GAMUT_REMAP_MODE_ROMA           = 0x00000001,
DCP_GRPH_GAMUT_REMAP_MODE_ROMB           = 0x00000002,
DCP_GRPH_GAMUT_REMAP_MODE_RESERVED       = 0x00000003,
} DCP_GRPH_GAMUT_REMAP_MODE;

/*
 * DCP_SPATIAL_DITHER_EN enum
 */

typedef enum DCP_SPATIAL_DITHER_EN {
DCP_SPATIAL_DITHER_EN_FALSE              = 0x00000000,
DCP_SPATIAL_DITHER_EN_TRUE               = 0x00000001,
} DCP_SPATIAL_DITHER_EN;

/*
 * DCP_SPATIAL_DITHER_MODE enum
 */

typedef enum DCP_SPATIAL_DITHER_MODE {
DCP_SPATIAL_DITHER_MODE_BYPASS           = 0x00000000,
DCP_SPATIAL_DITHER_MODE_ROMA             = 0x00000001,
DCP_SPATIAL_DITHER_MODE_ROMB             = 0x00000002,
DCP_SPATIAL_DITHER_MODE_RESERVED         = 0x00000003,
} DCP_SPATIAL_DITHER_MODE;

/*
 * DCP_SPATIAL_DITHER_DEPTH enum
 */

typedef enum DCP_SPATIAL_DITHER_DEPTH {
DCP_SPATIAL_DITHER_DEPTH_30BPP           = 0x00000000,
DCP_SPATIAL_DITHER_DEPTH_24BPP           = 0x00000001,
DCP_SPATIAL_DITHER_DEPTH_36BPP           = 0x00000002,
DCP_SPATIAL_DITHER_DEPTH_UNDEFINED       = 0x00000003,
} DCP_SPATIAL_DITHER_DEPTH;

/*
 * DCP_FRAME_RANDOM_ENABLE enum
 */

typedef enum DCP_FRAME_RANDOM_ENABLE {
DCP_FRAME_RANDOM_ENABLE_FALSE            = 0x00000000,
DCP_FRAME_RANDOM_ENABLE_TRUE             = 0x00000001,
} DCP_FRAME_RANDOM_ENABLE;

/*
 * DCP_RGB_RANDOM_ENABLE enum
 */

typedef enum DCP_RGB_RANDOM_ENABLE {
DCP_RGB_RANDOM_ENABLE_FALSE              = 0x00000000,
DCP_RGB_RANDOM_ENABLE_TRUE               = 0x00000001,
} DCP_RGB_RANDOM_ENABLE;

/*
 * DCP_HIGHPASS_RANDOM_ENABLE enum
 */

typedef enum DCP_HIGHPASS_RANDOM_ENABLE {
DCP_HIGHPASS_RANDOM_ENABLE_FALSE         = 0x00000000,
DCP_HIGHPASS_RANDOM_ENABLE_TRUE          = 0x00000001,
} DCP_HIGHPASS_RANDOM_ENABLE;

/*
 * DCP_CURSOR_EN enum
 */

typedef enum DCP_CURSOR_EN {
DCP_CURSOR_EN_FALSE                      = 0x00000000,
DCP_CURSOR_EN_TRUE                       = 0x00000001,
} DCP_CURSOR_EN;

/*
 * DCP_CUR_INV_TRANS_CLAMP enum
 */

typedef enum DCP_CUR_INV_TRANS_CLAMP {
DCP_CUR_INV_TRANS_CLAMP_FALSE            = 0x00000000,
DCP_CUR_INV_TRANS_CLAMP_TRUE             = 0x00000001,
} DCP_CUR_INV_TRANS_CLAMP;

/*
 * DCP_CURSOR_MODE enum
 */

typedef enum DCP_CURSOR_MODE {
DCP_CURSOR_MODE_MONO_2BPP                = 0x00000000,
DCP_CURSOR_MODE_24BPP_1BIT               = 0x00000001,
DCP_CURSOR_MODE_24BPP_8BIT_PREMULTI      = 0x00000002,
DCP_CURSOR_MODE_24BPP_8BIT_UNPREMULTI    = 0x00000003,
} DCP_CURSOR_MODE;

/*
 * DCP_CURSOR_MAX_OUTSTANDING_GROUP_NUM enum
 */

typedef enum DCP_CURSOR_MAX_OUTSTANDING_GROUP_NUM {
DCP_CURSOR_MAX_OUTSTANDING_GROUP_NUM_ONE  = 0x00000000,
DCP_CURSOR_MAX_OUTSTANDING_GROUP_NUM_TWO  = 0x00000001,
} DCP_CURSOR_MAX_OUTSTANDING_GROUP_NUM;

/*
 * DCP_CURSOR_2X_MAGNIFY enum
 */

typedef enum DCP_CURSOR_2X_MAGNIFY {
DCP_CURSOR_2X_MAGNIFY_FALSE              = 0x00000000,
DCP_CURSOR_2X_MAGNIFY_TRUE               = 0x00000001,
} DCP_CURSOR_2X_MAGNIFY;

/*
 * DCP_CURSOR_FORCE_MC_ON enum
 */

typedef enum DCP_CURSOR_FORCE_MC_ON {
DCP_CURSOR_FORCE_MC_ON_FALSE             = 0x00000000,
DCP_CURSOR_FORCE_MC_ON_TRUE              = 0x00000001,
} DCP_CURSOR_FORCE_MC_ON;

/*
 * DCP_CURSOR_URGENT_CONTROL enum
 */

typedef enum DCP_CURSOR_URGENT_CONTROL {
DCP_CURSOR_URGENT_CONTROL_MODE_0         = 0x00000000,
DCP_CURSOR_URGENT_CONTROL_MODE_1         = 0x00000001,
DCP_CURSOR_URGENT_CONTROL_MODE_2         = 0x00000002,
DCP_CURSOR_URGENT_CONTROL_MODE_3         = 0x00000003,
DCP_CURSOR_URGENT_CONTROL_MODE_4         = 0x00000004,
} DCP_CURSOR_URGENT_CONTROL;

/*
 * DCP_CURSOR_UPDATE_PENDING enum
 */

typedef enum DCP_CURSOR_UPDATE_PENDING {
DCP_CURSOR_UPDATE_PENDING_FALSE          = 0x00000000,
DCP_CURSOR_UPDATE_PENDING_TRUE           = 0x00000001,
} DCP_CURSOR_UPDATE_PENDING;

/*
 * DCP_CURSOR_UPDATE_TAKEN enum
 */

typedef enum DCP_CURSOR_UPDATE_TAKEN {
DCP_CURSOR_UPDATE_TAKEN_FALSE            = 0x00000000,
DCP_CURSOR_UPDATE_TAKEN_TRUE             = 0x00000001,
} DCP_CURSOR_UPDATE_TAKEN;

/*
 * DCP_CURSOR_UPDATE_LOCK enum
 */

typedef enum DCP_CURSOR_UPDATE_LOCK {
DCP_CURSOR_UPDATE_LOCK_FALSE             = 0x00000000,
DCP_CURSOR_UPDATE_LOCK_TRUE              = 0x00000001,
} DCP_CURSOR_UPDATE_LOCK;

/*
 * DCP_CURSOR_DISABLE_MULTIPLE_UPDATE enum
 */

typedef enum DCP_CURSOR_DISABLE_MULTIPLE_UPDATE {
DCP_CURSOR_DISABLE_MULTIPLE_UPDATE_FALSE  = 0x00000000,
DCP_CURSOR_DISABLE_MULTIPLE_UPDATE_TRUE  = 0x00000001,
} DCP_CURSOR_DISABLE_MULTIPLE_UPDATE;

/*
 * DCP_CURSOR_UPDATE_STEREO_MODE enum
 */

typedef enum DCP_CURSOR_UPDATE_STEREO_MODE {
DCP_CURSOR_UPDATE_STEREO_MODE_BOTH       = 0x00000000,
DCP_CURSOR_UPDATE_STEREO_MODE_SECONDARY_ONLY  = 0x00000001,
DCP_CURSOR_UPDATE_STEREO_MODE_UNDEFINED  = 0x00000002,
DCP_CURSOR_UPDATE_STEREO_MODE_PRIMARY_ONLY  = 0x00000003,
} DCP_CURSOR_UPDATE_STEREO_MODE;

/*
 * DCP_CUR2_INV_TRANS_CLAMP enum
 */

typedef enum DCP_CUR2_INV_TRANS_CLAMP {
DCP_CUR2_INV_TRANS_CLAMP_FALSE           = 0x00000000,
DCP_CUR2_INV_TRANS_CLAMP_TRUE            = 0x00000001,
} DCP_CUR2_INV_TRANS_CLAMP;

/*
 * DCP_CUR_REQUEST_FILTER_DIS enum
 */

typedef enum DCP_CUR_REQUEST_FILTER_DIS {
DCP_CUR_REQUEST_FILTER_DIS_FALSE         = 0x00000000,
DCP_CUR_REQUEST_FILTER_DIS_TRUE          = 0x00000001,
} DCP_CUR_REQUEST_FILTER_DIS;

/*
 * DCP_CURSOR_STEREO_EN enum
 */

typedef enum DCP_CURSOR_STEREO_EN {
DCP_CURSOR_STEREO_EN_FALSE               = 0x00000000,
DCP_CURSOR_STEREO_EN_TRUE                = 0x00000001,
} DCP_CURSOR_STEREO_EN;

/*
 * DCP_CURSOR_STEREO_OFFSET_YNX enum
 */

typedef enum DCP_CURSOR_STEREO_OFFSET_YNX {
DCP_CURSOR_STEREO_OFFSET_YNX_X_POSITION  = 0x00000000,
DCP_CURSOR_STEREO_OFFSET_YNX_Y_POSITION  = 0x00000001,
} DCP_CURSOR_STEREO_OFFSET_YNX;

/*
 * DCP_DC_LUT_RW_MODE enum
 */

typedef enum DCP_DC_LUT_RW_MODE {
DCP_DC_LUT_RW_MODE_256_ENTRY             = 0x00000000,
DCP_DC_LUT_RW_MODE_PWL                   = 0x00000001,
} DCP_DC_LUT_RW_MODE;

/*
 * DCP_DC_LUT_VGA_ACCESS_ENABLE enum
 */

typedef enum DCP_DC_LUT_VGA_ACCESS_ENABLE {
DCP_DC_LUT_VGA_ACCESS_ENABLE_FALSE       = 0x00000000,
DCP_DC_LUT_VGA_ACCESS_ENABLE_TRUE        = 0x00000001,
} DCP_DC_LUT_VGA_ACCESS_ENABLE;

/*
 * DCP_DC_LUT_AUTOFILL enum
 */

typedef enum DCP_DC_LUT_AUTOFILL {
DCP_DC_LUT_AUTOFILL_FALSE                = 0x00000000,
DCP_DC_LUT_AUTOFILL_TRUE                 = 0x00000001,
} DCP_DC_LUT_AUTOFILL;

/*
 * DCP_DC_LUT_AUTOFILL_DONE enum
 */

typedef enum DCP_DC_LUT_AUTOFILL_DONE {
DCP_DC_LUT_AUTOFILL_DONE_FALSE           = 0x00000000,
DCP_DC_LUT_AUTOFILL_DONE_TRUE            = 0x00000001,
} DCP_DC_LUT_AUTOFILL_DONE;

/*
 * DCP_DC_LUT_INC_B enum
 */

typedef enum DCP_DC_LUT_INC_B {
DCP_DC_LUT_INC_B_NA                      = 0x00000000,
DCP_DC_LUT_INC_B_2                       = 0x00000001,
DCP_DC_LUT_INC_B_4                       = 0x00000002,
DCP_DC_LUT_INC_B_8                       = 0x00000003,
DCP_DC_LUT_INC_B_16                      = 0x00000004,
DCP_DC_LUT_INC_B_32                      = 0x00000005,
DCP_DC_LUT_INC_B_64                      = 0x00000006,
DCP_DC_LUT_INC_B_128                     = 0x00000007,
DCP_DC_LUT_INC_B_256                     = 0x00000008,
DCP_DC_LUT_INC_B_512                     = 0x00000009,
} DCP_DC_LUT_INC_B;

/*
 * DCP_DC_LUT_DATA_B_SIGNED_EN enum
 */

typedef enum DCP_DC_LUT_DATA_B_SIGNED_EN {
DCP_DC_LUT_DATA_B_SIGNED_EN_FALSE        = 0x00000000,
DCP_DC_LUT_DATA_B_SIGNED_EN_TRUE         = 0x00000001,
} DCP_DC_LUT_DATA_B_SIGNED_EN;

/*
 * DCP_DC_LUT_DATA_B_FLOAT_POINT_EN enum
 */

typedef enum DCP_DC_LUT_DATA_B_FLOAT_POINT_EN {
DCP_DC_LUT_DATA_B_FLOAT_POINT_EN_FALSE   = 0x00000000,
DCP_DC_LUT_DATA_B_FLOAT_POINT_EN_TRUE    = 0x00000001,
} DCP_DC_LUT_DATA_B_FLOAT_POINT_EN;

/*
 * DCP_DC_LUT_DATA_B_FORMAT enum
 */

typedef enum DCP_DC_LUT_DATA_B_FORMAT {
DCP_DC_LUT_DATA_B_FORMAT_U0P10           = 0x00000000,
DCP_DC_LUT_DATA_B_FORMAT_S1P10           = 0x00000001,
DCP_DC_LUT_DATA_B_FORMAT_U1P11           = 0x00000002,
DCP_DC_LUT_DATA_B_FORMAT_U0P12           = 0x00000003,
} DCP_DC_LUT_DATA_B_FORMAT;

/*
 * DCP_DC_LUT_INC_G enum
 */

typedef enum DCP_DC_LUT_INC_G {
DCP_DC_LUT_INC_G_NA                      = 0x00000000,
DCP_DC_LUT_INC_G_2                       = 0x00000001,
DCP_DC_LUT_INC_G_4                       = 0x00000002,
DCP_DC_LUT_INC_G_8                       = 0x00000003,
DCP_DC_LUT_INC_G_16                      = 0x00000004,
DCP_DC_LUT_INC_G_32                      = 0x00000005,
DCP_DC_LUT_INC_G_64                      = 0x00000006,
DCP_DC_LUT_INC_G_128                     = 0x00000007,
DCP_DC_LUT_INC_G_256                     = 0x00000008,
DCP_DC_LUT_INC_G_512                     = 0x00000009,
} DCP_DC_LUT_INC_G;

/*
 * DCP_DC_LUT_DATA_G_SIGNED_EN enum
 */

typedef enum DCP_DC_LUT_DATA_G_SIGNED_EN {
DCP_DC_LUT_DATA_G_SIGNED_EN_FALSE        = 0x00000000,
DCP_DC_LUT_DATA_G_SIGNED_EN_TRUE         = 0x00000001,
} DCP_DC_LUT_DATA_G_SIGNED_EN;

/*
 * DCP_DC_LUT_DATA_G_FLOAT_POINT_EN enum
 */

typedef enum DCP_DC_LUT_DATA_G_FLOAT_POINT_EN {
DCP_DC_LUT_DATA_G_FLOAT_POINT_EN_FALSE   = 0x00000000,
DCP_DC_LUT_DATA_G_FLOAT_POINT_EN_TRUE    = 0x00000001,
} DCP_DC_LUT_DATA_G_FLOAT_POINT_EN;

/*
 * DCP_DC_LUT_DATA_G_FORMAT enum
 */

typedef enum DCP_DC_LUT_DATA_G_FORMAT {
DCP_DC_LUT_DATA_G_FORMAT_U0P10           = 0x00000000,
DCP_DC_LUT_DATA_G_FORMAT_S1P10           = 0x00000001,
DCP_DC_LUT_DATA_G_FORMAT_U1P11           = 0x00000002,
DCP_DC_LUT_DATA_G_FORMAT_U0P12           = 0x00000003,
} DCP_DC_LUT_DATA_G_FORMAT;

/*
 * DCP_DC_LUT_INC_R enum
 */

typedef enum DCP_DC_LUT_INC_R {
DCP_DC_LUT_INC_R_NA                      = 0x00000000,
DCP_DC_LUT_INC_R_2                       = 0x00000001,
DCP_DC_LUT_INC_R_4                       = 0x00000002,
DCP_DC_LUT_INC_R_8                       = 0x00000003,
DCP_DC_LUT_INC_R_16                      = 0x00000004,
DCP_DC_LUT_INC_R_32                      = 0x00000005,
DCP_DC_LUT_INC_R_64                      = 0x00000006,
DCP_DC_LUT_INC_R_128                     = 0x00000007,
DCP_DC_LUT_INC_R_256                     = 0x00000008,
DCP_DC_LUT_INC_R_512                     = 0x00000009,
} DCP_DC_LUT_INC_R;

/*
 * DCP_DC_LUT_DATA_R_SIGNED_EN enum
 */

typedef enum DCP_DC_LUT_DATA_R_SIGNED_EN {
DCP_DC_LUT_DATA_R_SIGNED_EN_FALSE        = 0x00000000,
DCP_DC_LUT_DATA_R_SIGNED_EN_TRUE         = 0x00000001,
} DCP_DC_LUT_DATA_R_SIGNED_EN;

/*
 * DCP_DC_LUT_DATA_R_FLOAT_POINT_EN enum
 */

typedef enum DCP_DC_LUT_DATA_R_FLOAT_POINT_EN {
DCP_DC_LUT_DATA_R_FLOAT_POINT_EN_FALSE   = 0x00000000,
DCP_DC_LUT_DATA_R_FLOAT_POINT_EN_TRUE    = 0x00000001,
} DCP_DC_LUT_DATA_R_FLOAT_POINT_EN;

/*
 * DCP_DC_LUT_DATA_R_FORMAT enum
 */

typedef enum DCP_DC_LUT_DATA_R_FORMAT {
DCP_DC_LUT_DATA_R_FORMAT_U0P10           = 0x00000000,
DCP_DC_LUT_DATA_R_FORMAT_S1P10           = 0x00000001,
DCP_DC_LUT_DATA_R_FORMAT_U1P11           = 0x00000002,
DCP_DC_LUT_DATA_R_FORMAT_U0P12           = 0x00000003,
} DCP_DC_LUT_DATA_R_FORMAT;

/*
 * DCP_CRC_ENABLE enum
 */

typedef enum DCP_CRC_ENABLE {
DCP_CRC_ENABLE_FALSE                     = 0x00000000,
DCP_CRC_ENABLE_TRUE                      = 0x00000001,
} DCP_CRC_ENABLE;

/*
 * DCP_CRC_SOURCE_SEL enum
 */

typedef enum DCP_CRC_SOURCE_SEL {
DCP_CRC_SOURCE_SEL_OUTPUT_PIX            = 0x00000000,
DCP_CRC_SOURCE_SEL_INPUT_L32             = 0x00000001,
DCP_CRC_SOURCE_SEL_INPUT_H32             = 0x00000002,
DCP_CRC_SOURCE_SEL_OUTPUT_CNTL           = 0x00000004,
} DCP_CRC_SOURCE_SEL;

/*
 * DCP_CRC_LINE_SEL enum
 */

typedef enum DCP_CRC_LINE_SEL {
DCP_CRC_LINE_SEL_RESERVED                = 0x00000000,
DCP_CRC_LINE_SEL_EVEN                    = 0x00000001,
DCP_CRC_LINE_SEL_ODD                     = 0x00000002,
DCP_CRC_LINE_SEL_BOTH                    = 0x00000003,
} DCP_CRC_LINE_SEL;

/*
 * DCP_GRPH_FLIP_RATE enum
 */

typedef enum DCP_GRPH_FLIP_RATE {
DCP_GRPH_FLIP_RATE_1FRAME                = 0x00000000,
DCP_GRPH_FLIP_RATE_2FRAME                = 0x00000001,
DCP_GRPH_FLIP_RATE_3FRAME                = 0x00000002,
DCP_GRPH_FLIP_RATE_4FRAME                = 0x00000003,
DCP_GRPH_FLIP_RATE_5FRAME                = 0x00000004,
DCP_GRPH_FLIP_RATE_6FRAME                = 0x00000005,
DCP_GRPH_FLIP_RATE_7FRAME                = 0x00000006,
DCP_GRPH_FLIP_RATE_8FRAME                = 0x00000007,
} DCP_GRPH_FLIP_RATE;

/*
 * DCP_GRPH_FLIP_RATE_ENABLE enum
 */

typedef enum DCP_GRPH_FLIP_RATE_ENABLE {
DCP_GRPH_FLIP_RATE_ENABLE_FALSE          = 0x00000000,
DCP_GRPH_FLIP_RATE_ENABLE_TRUE           = 0x00000001,
} DCP_GRPH_FLIP_RATE_ENABLE;

/*
 * DCP_GSL0_EN enum
 */

typedef enum DCP_GSL0_EN {
DCP_GSL0_EN_FALSE                        = 0x00000000,
DCP_GSL0_EN_TRUE                         = 0x00000001,
} DCP_GSL0_EN;

/*
 * DCP_GSL1_EN enum
 */

typedef enum DCP_GSL1_EN {
DCP_GSL1_EN_FALSE                        = 0x00000000,
DCP_GSL1_EN_TRUE                         = 0x00000001,
} DCP_GSL1_EN;

/*
 * DCP_GSL2_EN enum
 */

typedef enum DCP_GSL2_EN {
DCP_GSL2_EN_FALSE                        = 0x00000000,
DCP_GSL2_EN_TRUE                         = 0x00000001,
} DCP_GSL2_EN;

/*
 * DCP_GSL_MASTER_EN enum
 */

typedef enum DCP_GSL_MASTER_EN {
DCP_GSL_MASTER_EN_FALSE                  = 0x00000000,
DCP_GSL_MASTER_EN_TRUE                   = 0x00000001,
} DCP_GSL_MASTER_EN;

/*
 * DCP_GSL_XDMA_GROUP enum
 */

typedef enum DCP_GSL_XDMA_GROUP {
DCP_GSL_XDMA_GROUP_VSYNC                 = 0x00000000,
DCP_GSL_XDMA_GROUP_HSYNC0                = 0x00000001,
DCP_GSL_XDMA_GROUP_HSYNC1                = 0x00000002,
DCP_GSL_XDMA_GROUP_HSYNC2                = 0x00000003,
} DCP_GSL_XDMA_GROUP;

/*
 * DCP_GSL_XDMA_GROUP_UNDERFLOW_EN enum
 */

typedef enum DCP_GSL_XDMA_GROUP_UNDERFLOW_EN {
DCP_GSL_XDMA_GROUP_UNDERFLOW_EN_FALSE    = 0x00000000,
DCP_GSL_XDMA_GROUP_UNDERFLOW_EN_TRUE     = 0x00000001,
} DCP_GSL_XDMA_GROUP_UNDERFLOW_EN;

/*
 * DCP_GSL_SYNC_SOURCE enum
 */

typedef enum DCP_GSL_SYNC_SOURCE {
DCP_GSL_SYNC_SOURCE_FLIP                 = 0x00000000,
DCP_GSL_SYNC_SOURCE_PHASE0               = 0x00000001,
DCP_GSL_SYNC_SOURCE_RESET                = 0x00000002,
DCP_GSL_SYNC_SOURCE_PHASE1               = 0x00000003,
} DCP_GSL_SYNC_SOURCE;

/*
 * DCP_GSL_USE_CHECKPOINT_WINDOW_IN_VSYNC enum
 */

typedef enum DCP_GSL_USE_CHECKPOINT_WINDOW_IN_VSYNC {
DCP_GSL_USE_CHECKPOINT_WINDOW_IN_VSYNC_DIS  = 0x00000000,
DCP_GSL_USE_CHECKPOINT_WINDOW_IN_VSYNC_EN  = 0x00000001,
} DCP_GSL_USE_CHECKPOINT_WINDOW_IN_VSYNC;

/*
 * DCP_GSL_DELAY_SURFACE_UPDATE_PENDING enum
 */

typedef enum DCP_GSL_DELAY_SURFACE_UPDATE_PENDING {
DCP_GSL_DELAY_SURFACE_UPDATE_PENDING_FALSE  = 0x00000000,
DCP_GSL_DELAY_SURFACE_UPDATE_PENDING_TRUE  = 0x00000001,
} DCP_GSL_DELAY_SURFACE_UPDATE_PENDING;

/*
 * DCP_TEST_DEBUG_WRITE_EN enum
 */

typedef enum DCP_TEST_DEBUG_WRITE_EN {
DCP_TEST_DEBUG_WRITE_EN_FALSE            = 0x00000000,
DCP_TEST_DEBUG_WRITE_EN_TRUE             = 0x00000001,
} DCP_TEST_DEBUG_WRITE_EN;

/*
 * DCP_GRPH_STEREOSYNC_FLIP_EN enum
 */

typedef enum DCP_GRPH_STEREOSYNC_FLIP_EN {
DCP_GRPH_STEREOSYNC_FLIP_EN_FALSE        = 0x00000000,
DCP_GRPH_STEREOSYNC_FLIP_EN_TRUE         = 0x00000001,
} DCP_GRPH_STEREOSYNC_FLIP_EN;

/*
 * DCP_GRPH_STEREOSYNC_FLIP_MODE enum
 */

typedef enum DCP_GRPH_STEREOSYNC_FLIP_MODE {
DCP_GRPH_STEREOSYNC_FLIP_MODE_FLIP       = 0x00000000,
DCP_GRPH_STEREOSYNC_FLIP_MODE_PHASE0     = 0x00000001,
DCP_GRPH_STEREOSYNC_FLIP_MODE_RESET      = 0x00000002,
DCP_GRPH_STEREOSYNC_FLIP_MODE_PHASE1     = 0x00000003,
} DCP_GRPH_STEREOSYNC_FLIP_MODE;

/*
 * DCP_GRPH_STEREOSYNC_SELECT_DISABLE enum
 */

typedef enum DCP_GRPH_STEREOSYNC_SELECT_DISABLE {
DCP_GRPH_STEREOSYNC_SELECT_DISABLE_FALSE  = 0x00000000,
DCP_GRPH_STEREOSYNC_SELECT_DISABLE_TRUE  = 0x00000001,
} DCP_GRPH_STEREOSYNC_SELECT_DISABLE;

/*
 * DCP_GRPH_ROTATION_ANGLE enum
 */

typedef enum DCP_GRPH_ROTATION_ANGLE {
DCP_GRPH_ROTATION_ANGLE_0                = 0x00000000,
DCP_GRPH_ROTATION_ANGLE_90               = 0x00000001,
DCP_GRPH_ROTATION_ANGLE_180              = 0x00000002,
DCP_GRPH_ROTATION_ANGLE_270              = 0x00000003,
} DCP_GRPH_ROTATION_ANGLE;

/*
 * DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_EN enum
 */

typedef enum DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_EN {
DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_EN_FALSE  = 0x00000000,
DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_EN_TRUE  = 0x00000001,
} DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_EN;

/*
 * DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_MODE enum
 */

typedef enum DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_MODE {
DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_MODE_RELY_NUM  = 0x00000000,
DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_MODE_RELY_ENABLE  = 0x00000001,
} DCP_GRPH_XDMA_CACHE_UNDERFLOW_CNT_MODE;

/*
 * DCP_GRPH_REGAMMA_MODE enum
 */

typedef enum DCP_GRPH_REGAMMA_MODE {
DCP_GRPH_REGAMMA_MODE_BYPASS             = 0x00000000,
DCP_GRPH_REGAMMA_MODE_SRGB               = 0x00000001,
DCP_GRPH_REGAMMA_MODE_XVYCC              = 0x00000002,
DCP_GRPH_REGAMMA_MODE_PROGA              = 0x00000003,
DCP_GRPH_REGAMMA_MODE_PROGB              = 0x00000004,
} DCP_GRPH_REGAMMA_MODE;

/*
 * DCP_ALPHA_ROUND_TRUNC_MODE enum
 */

typedef enum DCP_ALPHA_ROUND_TRUNC_MODE {
DCP_ALPHA_ROUND_TRUNC_MODE_ROUND         = 0x00000000,
DCP_ALPHA_ROUND_TRUNC_MODE_TRUNC         = 0x00000001,
} DCP_ALPHA_ROUND_TRUNC_MODE;

/*
 * DCP_CURSOR_ALPHA_BLND_ENA enum
 */

typedef enum DCP_CURSOR_ALPHA_BLND_ENA {
DCP_CURSOR_ALPHA_BLND_ENA_FALSE          = 0x00000000,
DCP_CURSOR_ALPHA_BLND_ENA_TRUE           = 0x00000001,
} DCP_CURSOR_ALPHA_BLND_ENA;

/*
 * DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_MASK enum
 */

typedef enum DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_MASK {
DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_MASK_FALSE  = 0x00000000,
DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_MASK_TRUE  = 0x00000001,
} DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_MASK;

/*
 * DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_ACK enum
 */

typedef enum DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_ACK {
DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_ACK_FALSE = 0x00000000,
DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_ACK_TRUE  = 0x00000001,
} DCP_GRPH_XDMA_CACHE_UNDERFLOW_FRAME_ACK;

/*
 * DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_MASK enum
 */

typedef enum DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_MASK {
DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_MASK_FALSE  = 0x00000000,
DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_MASK_TRUE  = 0x00000001,
} DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_MASK;

/*
 * DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_ACK enum
 */

typedef enum DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_ACK {
DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_ACK_FALSE = 0x00000000,
DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_ACK_TRUE  = 0x00000001,
} DCP_GRPH_XDMA_CACHE_UNDERFLOW_INT_ACK;

/*
 * DCP_GRPH_SURFACE_COUNTER_EN enum
 */

typedef enum DCP_GRPH_SURFACE_COUNTER_EN {
DCP_GRPH_SURFACE_COUNTER_EN_DISABLE      = 0x00000000,
DCP_GRPH_SURFACE_COUNTER_EN_ENABLE       = 0x00000001,
} DCP_GRPH_SURFACE_COUNTER_EN;

/*
 * DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT enum
 */

typedef enum DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT {
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_0  = 0x00000000,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_1  = 0x00000001,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_2  = 0x00000002,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_3  = 0x00000003,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_4  = 0x00000004,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_5  = 0x00000005,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_6  = 0x00000006,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_7  = 0x00000007,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_8  = 0x00000008,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_9  = 0x00000009,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_10  = 0x0000000a,
DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT_11  = 0x0000000b,
} DCP_GRPH_SURFACE_COUNTER_EVENT_SELECT;

/*
 * DCP_GRPH_SURFACE_COUNTER_ERR_WRAP_OCCURED enum
 */

typedef enum DCP_GRPH_SURFACE_COUNTER_ERR_WRAP_OCCURED {
DCP_GRPH_SURFACE_COUNTER_ERR_WRAP_OCCURED_NO  = 0x00000000,
DCP_GRPH_SURFACE_COUNTER_ERR_WRAP_OCCURED_YES  = 0x00000001,
} DCP_GRPH_SURFACE_COUNTER_ERR_WRAP_OCCURED;

/*
 * DCP_GRPH_XDMA_FLIP_TYPE_CLEAR enum
 */

typedef enum DCP_GRPH_XDMA_FLIP_TYPE_CLEAR {
DCP_GRPH_XDMA_FLIP_TYPE_CLEAR_DISABLE    = 0x00000000,
DCP_GRPH_XDMA_FLIP_TYPE_CLEAR_ENABLE     = 0x00000001,
} DCP_GRPH_XDMA_FLIP_TYPE_CLEAR;

/*
 * DCP_GRPH_XDMA_DRR_MODE_ENABLE enum
 */

typedef enum DCP_GRPH_XDMA_DRR_MODE_ENABLE {
DCP_GRPH_XDMA_DRR_MODE_ENABLE_DISABLE    = 0x00000000,
DCP_GRPH_XDMA_DRR_MODE_ENABLE_ENABLE     = 0x00000001,
} DCP_GRPH_XDMA_DRR_MODE_ENABLE;

/*
 * DCP_GRPH_XDMA_MULTIFLIP_ENABLE enum
 */

typedef enum DCP_GRPH_XDMA_MULTIFLIP_ENABLE {
DCP_GRPH_XDMA_MULTIFLIP_ENABLE_DISABLE   = 0x00000000,
DCP_GRPH_XDMA_MULTIFLIP_ENABLE_ENABLE    = 0x00000001,
} DCP_GRPH_XDMA_MULTIFLIP_ENABLE;

/*
 * DCP_GRPH_XDMA_FLIP_TIMEOUT_MASK enum
 */

typedef enum DCP_GRPH_XDMA_FLIP_TIMEOUT_MASK {
DCP_GRPH_XDMA_FLIP_TIMEOUT_MASK_FALSE    = 0x00000000,
DCP_GRPH_XDMA_FLIP_TIMEOUT_MASK_TRUE     = 0x00000001,
} DCP_GRPH_XDMA_FLIP_TIMEOUT_MASK;

/*
 * DCP_GRPH_XDMA_FLIP_TIMEOUT_ACK enum
 */

typedef enum DCP_GRPH_XDMA_FLIP_TIMEOUT_ACK {
DCP_GRPH_XDMA_FLIP_TIMEOUT_ACK_FALSE     = 0x00000000,
DCP_GRPH_XDMA_FLIP_TIMEOUT_ACK_TRUE      = 0x00000001,
} DCP_GRPH_XDMA_FLIP_TIMEOUT_ACK;

/*******************************************************
 * DC_PERFMON Enums
 *******************************************************/

/*
 * PERFCOUNTER_CVALUE_SEL enum
 */

typedef enum PERFCOUNTER_CVALUE_SEL {
PERFCOUNTER_CVALUE_SEL_47_0              = 0x00000000,
PERFCOUNTER_CVALUE_SEL_15_0              = 0x00000001,
PERFCOUNTER_CVALUE_SEL_31_16             = 0x00000002,
PERFCOUNTER_CVALUE_SEL_47_32             = 0x00000003,
PERFCOUNTER_CVALUE_SEL_11_0              = 0x00000004,
PERFCOUNTER_CVALUE_SEL_23_12             = 0x00000005,
PERFCOUNTER_CVALUE_SEL_35_24             = 0x00000006,
PERFCOUNTER_CVALUE_SEL_47_36             = 0x00000007,
} PERFCOUNTER_CVALUE_SEL;

/*
 * PERFCOUNTER_INC_MODE enum
 */

typedef enum PERFCOUNTER_INC_MODE {
PERFCOUNTER_INC_MODE_MULTI_BIT           = 0x00000000,
PERFCOUNTER_INC_MODE_BOTH_EDGE           = 0x00000001,
PERFCOUNTER_INC_MODE_LSB                 = 0x00000002,
PERFCOUNTER_INC_MODE_POS_EDGE            = 0x00000003,
PERFCOUNTER_INC_MODE_NEG_EDGE            = 0x00000004,
} PERFCOUNTER_INC_MODE;

/*
 * PERFCOUNTER_HW_CNTL_SEL enum
 */

typedef enum PERFCOUNTER_HW_CNTL_SEL {
PERFCOUNTER_HW_CNTL_SEL_RUNEN            = 0x00000000,
PERFCOUNTER_HW_CNTL_SEL_CNTOFF           = 0x00000001,
} PERFCOUNTER_HW_CNTL_SEL;

/*
 * PERFCOUNTER_RUNEN_MODE enum
 */

typedef enum PERFCOUNTER_RUNEN_MODE {
PERFCOUNTER_RUNEN_MODE_LEVEL             = 0x00000000,
PERFCOUNTER_RUNEN_MODE_EDGE              = 0x00000001,
} PERFCOUNTER_RUNEN_MODE;

/*
 * PERFCOUNTER_CNTOFF_START_DIS enum
 */

typedef enum PERFCOUNTER_CNTOFF_START_DIS {
PERFCOUNTER_CNTOFF_START_ENABLE          = 0x00000000,
PERFCOUNTER_CNTOFF_START_DISABLE         = 0x00000001,
} PERFCOUNTER_CNTOFF_START_DIS;

/*
 * PERFCOUNTER_RESTART_EN enum
 */

typedef enum PERFCOUNTER_RESTART_EN {
PERFCOUNTER_RESTART_DISABLE              = 0x00000000,
PERFCOUNTER_RESTART_ENABLE               = 0x00000001,
} PERFCOUNTER_RESTART_EN;

/*
 * PERFCOUNTER_INT_EN enum
 */

typedef enum PERFCOUNTER_INT_EN {
PERFCOUNTER_INT_DISABLE                  = 0x00000000,
PERFCOUNTER_INT_ENABLE                   = 0x00000001,
} PERFCOUNTER_INT_EN;

/*
 * PERFCOUNTER_OFF_MASK enum
 */

typedef enum PERFCOUNTER_OFF_MASK {
PERFCOUNTER_OFF_MASK_DISABLE             = 0x00000000,
PERFCOUNTER_OFF_MASK_ENABLE              = 0x00000001,
} PERFCOUNTER_OFF_MASK;

/*
 * PERFCOUNTER_ACTIVE enum
 */

typedef enum PERFCOUNTER_ACTIVE {
PERFCOUNTER_IS_IDLE                      = 0x00000000,
PERFCOUNTER_IS_ACTIVE                    = 0x00000001,
} PERFCOUNTER_ACTIVE;

/*
 * PERFCOUNTER_INT_TYPE enum
 */

typedef enum PERFCOUNTER_INT_TYPE {
PERFCOUNTER_INT_TYPE_LEVEL               = 0x00000000,
PERFCOUNTER_INT_TYPE_PULSE               = 0x00000001,
} PERFCOUNTER_INT_TYPE;

/*
 * PERFCOUNTER_COUNTED_VALUE_TYPE enum
 */

typedef enum PERFCOUNTER_COUNTED_VALUE_TYPE {
PERFCOUNTER_COUNTED_VALUE_TYPE_ACC       = 0x00000000,
PERFCOUNTER_COUNTED_VALUE_TYPE_MAX       = 0x00000001,
PERFCOUNTER_COUNTED_VALUE_TYPE_MIN       = 0x00000002,
} PERFCOUNTER_COUNTED_VALUE_TYPE;

/*
 * PERFCOUNTER_CNTL_SEL enum
 */

typedef enum PERFCOUNTER_CNTL_SEL {
PERFCOUNTER_CNTL_SEL_0                   = 0x00000000,
PERFCOUNTER_CNTL_SEL_1                   = 0x00000001,
PERFCOUNTER_CNTL_SEL_2                   = 0x00000002,
PERFCOUNTER_CNTL_SEL_3                   = 0x00000003,
PERFCOUNTER_CNTL_SEL_4                   = 0x00000004,
PERFCOUNTER_CNTL_SEL_5                   = 0x00000005,
PERFCOUNTER_CNTL_SEL_6                   = 0x00000006,
PERFCOUNTER_CNTL_SEL_7                   = 0x00000007,
} PERFCOUNTER_CNTL_SEL;

/*
 * PERFCOUNTER_CNT0_STATE enum
 */

typedef enum PERFCOUNTER_CNT0_STATE {
PERFCOUNTER_CNT0_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT0_STATE_START             = 0x00000001,
PERFCOUNTER_CNT0_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT0_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT0_STATE;

/*
 * PERFCOUNTER_STATE_SEL0 enum
 */

typedef enum PERFCOUNTER_STATE_SEL0 {
PERFCOUNTER_STATE_SEL0_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL0_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL0;

/*
 * PERFCOUNTER_CNT1_STATE enum
 */

typedef enum PERFCOUNTER_CNT1_STATE {
PERFCOUNTER_CNT1_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT1_STATE_START             = 0x00000001,
PERFCOUNTER_CNT1_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT1_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT1_STATE;

/*
 * PERFCOUNTER_STATE_SEL1 enum
 */

typedef enum PERFCOUNTER_STATE_SEL1 {
PERFCOUNTER_STATE_SEL1_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL1_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL1;

/*
 * PERFCOUNTER_CNT2_STATE enum
 */

typedef enum PERFCOUNTER_CNT2_STATE {
PERFCOUNTER_CNT2_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT2_STATE_START             = 0x00000001,
PERFCOUNTER_CNT2_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT2_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT2_STATE;

/*
 * PERFCOUNTER_STATE_SEL2 enum
 */

typedef enum PERFCOUNTER_STATE_SEL2 {
PERFCOUNTER_STATE_SEL2_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL2_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL2;

/*
 * PERFCOUNTER_CNT3_STATE enum
 */

typedef enum PERFCOUNTER_CNT3_STATE {
PERFCOUNTER_CNT3_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT3_STATE_START             = 0x00000001,
PERFCOUNTER_CNT3_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT3_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT3_STATE;

/*
 * PERFCOUNTER_STATE_SEL3 enum
 */

typedef enum PERFCOUNTER_STATE_SEL3 {
PERFCOUNTER_STATE_SEL3_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL3_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL3;

/*
 * PERFCOUNTER_CNT4_STATE enum
 */

typedef enum PERFCOUNTER_CNT4_STATE {
PERFCOUNTER_CNT4_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT4_STATE_START             = 0x00000001,
PERFCOUNTER_CNT4_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT4_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT4_STATE;

/*
 * PERFCOUNTER_STATE_SEL4 enum
 */

typedef enum PERFCOUNTER_STATE_SEL4 {
PERFCOUNTER_STATE_SEL4_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL4_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL4;

/*
 * PERFCOUNTER_CNT5_STATE enum
 */

typedef enum PERFCOUNTER_CNT5_STATE {
PERFCOUNTER_CNT5_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT5_STATE_START             = 0x00000001,
PERFCOUNTER_CNT5_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT5_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT5_STATE;

/*
 * PERFCOUNTER_STATE_SEL5 enum
 */

typedef enum PERFCOUNTER_STATE_SEL5 {
PERFCOUNTER_STATE_SEL5_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL5_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL5;

/*
 * PERFCOUNTER_CNT6_STATE enum
 */

typedef enum PERFCOUNTER_CNT6_STATE {
PERFCOUNTER_CNT6_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT6_STATE_START             = 0x00000001,
PERFCOUNTER_CNT6_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT6_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT6_STATE;

/*
 * PERFCOUNTER_STATE_SEL6 enum
 */

typedef enum PERFCOUNTER_STATE_SEL6 {
PERFCOUNTER_STATE_SEL6_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL6_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL6;

/*
 * PERFCOUNTER_CNT7_STATE enum
 */

typedef enum PERFCOUNTER_CNT7_STATE {
PERFCOUNTER_CNT7_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT7_STATE_START             = 0x00000001,
PERFCOUNTER_CNT7_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT7_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT7_STATE;

/*
 * PERFCOUNTER_STATE_SEL7 enum
 */

typedef enum PERFCOUNTER_STATE_SEL7 {
PERFCOUNTER_STATE_SEL7_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL7_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL7;

/*
 * PERFMON_STATE enum
 */

typedef enum PERFMON_STATE {
PERFMON_STATE_RESET                      = 0x00000000,
PERFMON_STATE_START                      = 0x00000001,
PERFMON_STATE_FREEZE                     = 0x00000002,
PERFMON_STATE_HW                         = 0x00000003,
} PERFMON_STATE;

/*
 * PERFMON_CNTOFF_AND_OR enum
 */

typedef enum PERFMON_CNTOFF_AND_OR {
PERFMON_CNTOFF_OR                        = 0x00000000,
PERFMON_CNTOFF_AND                       = 0x00000001,
} PERFMON_CNTOFF_AND_OR;

/*
 * PERFMON_CNTOFF_INT_EN enum
 */

typedef enum PERFMON_CNTOFF_INT_EN {
PERFMON_CNTOFF_INT_DISABLE               = 0x00000000,
PERFMON_CNTOFF_INT_ENABLE                = 0x00000001,
} PERFMON_CNTOFF_INT_EN;

/*
 * PERFMON_CNTOFF_INT_TYPE enum
 */

typedef enum PERFMON_CNTOFF_INT_TYPE {
PERFMON_CNTOFF_INT_TYPE_LEVEL            = 0x00000000,
PERFMON_CNTOFF_INT_TYPE_PULSE            = 0x00000001,
} PERFMON_CNTOFF_INT_TYPE;

/*******************************************************
 * SCL Enums
 *******************************************************/

/*
 * SCL_C_RAM_TAP_PAIR_IDX enum
 */

typedef enum SCL_C_RAM_TAP_PAIR_IDX {
SCL_C_RAM_TAP_PAIR_ID0                   = 0x00000000,
SCL_C_RAM_TAP_PAIR_ID1                   = 0x00000001,
SCL_C_RAM_TAP_PAIR_ID2                   = 0x00000002,
SCL_C_RAM_TAP_PAIR_ID3                   = 0x00000003,
SCL_C_RAM_TAP_PAIR_ID4                   = 0x00000004,
} SCL_C_RAM_TAP_PAIR_IDX;

/*
 * SCL_C_RAM_PHASE enum
 */

typedef enum SCL_C_RAM_PHASE {
SCL_C_RAM_PHASE_0                        = 0x00000000,
SCL_C_RAM_PHASE_1                        = 0x00000001,
SCL_C_RAM_PHASE_2                        = 0x00000002,
SCL_C_RAM_PHASE_3                        = 0x00000003,
SCL_C_RAM_PHASE_4                        = 0x00000004,
SCL_C_RAM_PHASE_5                        = 0x00000005,
SCL_C_RAM_PHASE_6                        = 0x00000006,
SCL_C_RAM_PHASE_7                        = 0x00000007,
SCL_C_RAM_PHASE_8                        = 0x00000008,
} SCL_C_RAM_PHASE;

/*
 * SCL_C_RAM_FILTER_TYPE enum
 */

typedef enum SCL_C_RAM_FILTER_TYPE {
SCL_C_RAM_FILTER_TYPE_VERT_LUMA_RGB_LUT  = 0x00000000,
SCL_C_RAM_FILTER_TYPE_VERT_CHROMA_LUT    = 0x00000001,
SCL_C_RAM_FILTER_TYPE_HORI_LUMA_RGB_LUT  = 0x00000002,
SCL_C_RAM_FILTER_TYPE_HORI_CHROMA_LUT    = 0x00000003,
} SCL_C_RAM_FILTER_TYPE;

/*
 * SCL_MODE_SEL enum
 */

typedef enum SCL_MODE_SEL {
SCL_MODE_RGB_BYPASS                      = 0x00000000,
SCL_MODE_RGB_SCALING                     = 0x00000001,
SCL_MODE_YCBCR_SCALING                   = 0x00000002,
SCL_MODE_YCBCR_BYPASS                    = 0x00000003,
} SCL_MODE_SEL;

/*
 * SCL_PSCL_EN enum
 */

typedef enum SCL_PSCL_EN {
SCL_PSCL_DISABLE                         = 0x00000000,
SCL_PSCL_ENANBLE                         = 0x00000001,
} SCL_PSCL_EN;

/*
 * SCL_V_NUM_OF_TAPS enum
 */

typedef enum SCL_V_NUM_OF_TAPS {
SCL_V_NUM_OF_TAPS_1                      = 0x00000000,
SCL_V_NUM_OF_TAPS_2                      = 0x00000001,
SCL_V_NUM_OF_TAPS_3                      = 0x00000002,
SCL_V_NUM_OF_TAPS_4                      = 0x00000003,
SCL_V_NUM_OF_TAPS_5                      = 0x00000004,
SCL_V_NUM_OF_TAPS_6                      = 0x00000005,
} SCL_V_NUM_OF_TAPS;

/*
 * SCL_H_NUM_OF_TAPS enum
 */

typedef enum SCL_H_NUM_OF_TAPS {
SCL_H_NUM_OF_TAPS_1                      = 0x00000000,
SCL_H_NUM_OF_TAPS_2                      = 0x00000001,
SCL_H_NUM_OF_TAPS_4                      = 0x00000003,
SCL_H_NUM_OF_TAPS_6                      = 0x00000005,
SCL_H_NUM_OF_TAPS_8                      = 0x00000007,
SCL_H_NUM_OF_TAPS_10                     = 0x00000009,
} SCL_H_NUM_OF_TAPS;

/*
 * SCL_BOUNDARY_MODE enum
 */

typedef enum SCL_BOUNDARY_MODE {
SCL_BOUNDARY_MODE_BLACK                  = 0x00000000,
SCL_BOUNDARY_MODE_EDGE                   = 0x00000001,
} SCL_BOUNDARY_MODE;

/*
 * SCL_EARLY_EOL_MOD enum
 */

typedef enum SCL_EARLY_EOL_MOD {
SCL_EARLY_EOL_MODE_CRTC                  = 0x00000000,
SCL_EARLY_EOL_MODE_INTERNAL              = 0x00000001,
} SCL_EARLY_EOL_MOD;

/*
 * SCL_BYPASS_MODE enum
 */

typedef enum SCL_BYPASS_MODE {
SCL_BYPASS_MODE_MC_MR                    = 0x00000000,
SCL_BYPASS_MODE_AC_NR                    = 0x00000001,
SCL_BYPASS_MODE_AC_AR                    = 0x00000002,
SCL_BYPASS_MODE_RESERVED                 = 0x00000003,
} SCL_BYPASS_MODE;

/*
 * SCL_V_MANUAL_REPLICATE_FACTOR enum
 */

typedef enum SCL_V_MANUAL_REPLICATE_FACTOR {
SCL_V_MANUAL_REPLICATE_FACTOR_1          = 0x00000000,
SCL_V_MANUAL_REPLICATE_FACTOR_2          = 0x00000001,
SCL_V_MANUAL_REPLICATE_FACTOR_3          = 0x00000002,
SCL_V_MANUAL_REPLICATE_FACTOR_4          = 0x00000003,
SCL_V_MANUAL_REPLICATE_FACTOR_5          = 0x00000004,
SCL_V_MANUAL_REPLICATE_FACTOR_6          = 0x00000005,
SCL_V_MANUAL_REPLICATE_FACTOR_7          = 0x00000006,
SCL_V_MANUAL_REPLICATE_FACTOR_8          = 0x00000007,
SCL_V_MANUAL_REPLICATE_FACTOR_9          = 0x00000008,
SCL_V_MANUAL_REPLICATE_FACTOR_10         = 0x00000009,
SCL_V_MANUAL_REPLICATE_FACTOR_11         = 0x0000000a,
SCL_V_MANUAL_REPLICATE_FACTOR_12         = 0x0000000b,
SCL_V_MANUAL_REPLICATE_FACTOR_13         = 0x0000000c,
SCL_V_MANUAL_REPLICATE_FACTOR_14         = 0x0000000d,
SCL_V_MANUAL_REPLICATE_FACTOR_15         = 0x0000000e,
SCL_V_MANUAL_REPLICATE_FACTOR_16         = 0x0000000f,
} SCL_V_MANUAL_REPLICATE_FACTOR;

/*
 * SCL_H_MANUAL_REPLICATE_FACTOR enum
 */

typedef enum SCL_H_MANUAL_REPLICATE_FACTOR {
SCL_H_MANUAL_REPLICATE_FACTOR_1          = 0x00000000,
SCL_H_MANUAL_REPLICATE_FACTOR_2          = 0x00000001,
SCL_H_MANUAL_REPLICATE_FACTOR_3          = 0x00000002,
SCL_H_MANUAL_REPLICATE_FACTOR_4          = 0x00000003,
SCL_H_MANUAL_REPLICATE_FACTOR_5          = 0x00000004,
SCL_H_MANUAL_REPLICATE_FACTOR_6          = 0x00000005,
SCL_H_MANUAL_REPLICATE_FACTOR_7          = 0x00000006,
SCL_H_MANUAL_REPLICATE_FACTOR_8          = 0x00000007,
SCL_H_MANUAL_REPLICATE_FACTOR_9          = 0x00000008,
SCL_H_MANUAL_REPLICATE_FACTOR_10         = 0x00000009,
SCL_H_MANUAL_REPLICATE_FACTOR_11         = 0x0000000a,
SCL_H_MANUAL_REPLICATE_FACTOR_12         = 0x0000000b,
SCL_H_MANUAL_REPLICATE_FACTOR_13         = 0x0000000c,
SCL_H_MANUAL_REPLICATE_FACTOR_14         = 0x0000000d,
SCL_H_MANUAL_REPLICATE_FACTOR_15         = 0x0000000e,
SCL_H_MANUAL_REPLICATE_FACTOR_16         = 0x0000000f,
} SCL_H_MANUAL_REPLICATE_FACTOR;

/*
 * SCL_V_CALC_AUTO_RATIO_EN enum
 */

typedef enum SCL_V_CALC_AUTO_RATIO_EN {
SCL_V_CALC_AUTO_RATIO_DISABLE            = 0x00000000,
SCL_V_CALC_AUTO_RATIO_ENABLE             = 0x00000001,
} SCL_V_CALC_AUTO_RATIO_EN;

/*
 * SCL_H_CALC_AUTO_RATIO_EN enum
 */

typedef enum SCL_H_CALC_AUTO_RATIO_EN {
SCL_H_CALC_AUTO_RATIO_DISABLE            = 0x00000000,
SCL_H_CALC_AUTO_RATIO_ENABLE             = 0x00000001,
} SCL_H_CALC_AUTO_RATIO_EN;

/*
 * SCL_H_FILTER_PICK_NEAREST enum
 */

typedef enum SCL_H_FILTER_PICK_NEAREST {
SCL_H_FILTER_PICK_NEAREST_DISABLE        = 0x00000000,
SCL_H_FILTER_PICK_NEAREST_ENABLE         = 0x00000001,
} SCL_H_FILTER_PICK_NEAREST;

/*
 * SCL_H_2TAP_HARDCODE_COEF_EN enum
 */

typedef enum SCL_H_2TAP_HARDCODE_COEF_EN {
SCL_H_2TAP_HARDCODE_COEF_DISABLE         = 0x00000000,
SCL_H_2TAP_HARDCODE_COEF_ENABLE          = 0x00000001,
} SCL_H_2TAP_HARDCODE_COEF_EN;

/*
 * SCL_V_FILTER_PICK_NEAREST enum
 */

typedef enum SCL_V_FILTER_PICK_NEAREST {
SCL_V_FILTER_PICK_NEAREST_DISABLE        = 0x00000000,
SCL_V_FILTER_PICK_NEAREST_ENABLE         = 0x00000001,
} SCL_V_FILTER_PICK_NEAREST;

/*
 * SCL_V_2TAP_HARDCODE_COEF_EN enum
 */

typedef enum SCL_V_2TAP_HARDCODE_COEF_EN {
SCL_V_2TAP_HARDCODE_COEF_DISABLE         = 0x00000000,
SCL_V_2TAP_HARDCODE_COEF_ENABLE          = 0x00000001,
} SCL_V_2TAP_HARDCODE_COEF_EN;

/*
 * SCL_UPDATE_TAKEN enum
 */

typedef enum SCL_UPDATE_TAKEN {
SCL_UPDATE_TAKEN_NO                      = 0x00000000,
SCL_UPDATE_TAKEN_YES                     = 0x00000001,
} SCL_UPDATE_TAKEN;

/*
 * SCL_UPDATE_LOCK enum
 */

typedef enum SCL_UPDATE_LOCK {
SCL_UPDATE_UNLOCKED                      = 0x00000000,
SCL_UPDATE_LOCKED                        = 0x00000001,
} SCL_UPDATE_LOCK;

/*
 * SCL_COEF_UPDATE_COMPLETE enum
 */

typedef enum SCL_COEF_UPDATE_COMPLETE {
SCL_COEF_UPDATE_NOT_COMPLETED            = 0x00000000,
SCL_COEF_UPDATE_COMPLETED                = 0x00000001,
} SCL_COEF_UPDATE_COMPLETE;

/*
 * SCL_HF_SHARP_SCALE_FACTOR enum
 */

typedef enum SCL_HF_SHARP_SCALE_FACTOR {
SCL_HF_SHARP_SCALE_FACTOR_0              = 0x00000000,
SCL_HF_SHARP_SCALE_FACTOR_1              = 0x00000001,
SCL_HF_SHARP_SCALE_FACTOR_2              = 0x00000002,
SCL_HF_SHARP_SCALE_FACTOR_3              = 0x00000003,
SCL_HF_SHARP_SCALE_FACTOR_4              = 0x00000004,
SCL_HF_SHARP_SCALE_FACTOR_5              = 0x00000005,
SCL_HF_SHARP_SCALE_FACTOR_6              = 0x00000006,
SCL_HF_SHARP_SCALE_FACTOR_7              = 0x00000007,
} SCL_HF_SHARP_SCALE_FACTOR;

/*
 * SCL_HF_SHARP_EN enum
 */

typedef enum SCL_HF_SHARP_EN {
SCL_HF_SHARP_DISABLE                     = 0x00000000,
SCL_HF_SHARP_ENABLE                      = 0x00000001,
} SCL_HF_SHARP_EN;

/*
 * SCL_VF_SHARP_SCALE_FACTOR enum
 */

typedef enum SCL_VF_SHARP_SCALE_FACTOR {
SCL_VF_SHARP_SCALE_FACTOR_0              = 0x00000000,
SCL_VF_SHARP_SCALE_FACTOR_1              = 0x00000001,
SCL_VF_SHARP_SCALE_FACTOR_2              = 0x00000002,
SCL_VF_SHARP_SCALE_FACTOR_3              = 0x00000003,
SCL_VF_SHARP_SCALE_FACTOR_4              = 0x00000004,
SCL_VF_SHARP_SCALE_FACTOR_5              = 0x00000005,
SCL_VF_SHARP_SCALE_FACTOR_6              = 0x00000006,
SCL_VF_SHARP_SCALE_FACTOR_7              = 0x00000007,
} SCL_VF_SHARP_SCALE_FACTOR;

/*
 * SCL_VF_SHARP_EN enum
 */

typedef enum SCL_VF_SHARP_EN {
SCL_VF_SHARP_DISABLE                     = 0x00000000,
SCL_VF_SHARP_ENABLE                      = 0x00000001,
} SCL_VF_SHARP_EN;

/*
 * SCL_ALU_DISABLE enum
 */

typedef enum SCL_ALU_DISABLE {
SCL_ALU_ENABLED                          = 0x00000000,
SCL_ALU_DISABLED                         = 0x00000001,
} SCL_ALU_DISABLE;

/*
 * SCL_HOST_CONFLICT_MASK enum
 */

typedef enum SCL_HOST_CONFLICT_MASK {
SCL_HOST_CONFLICT_DISABLE_INTERRUPT      = 0x00000000,
SCL_HOST_CONFLICT_ENABLE_INTERRUPT       = 0x00000001,
} SCL_HOST_CONFLICT_MASK;

/*
 * SCL_SCL_MODE_CHANGE_MASK enum
 */

typedef enum SCL_SCL_MODE_CHANGE_MASK {
SCL_MODE_CHANGE_DISABLE_INTERRUPT        = 0x00000000,
SCL_MODE_CHANGE_ENABLE_INTERRUPT         = 0x00000001,
} SCL_SCL_MODE_CHANGE_MASK;

/*******************************************************
 * SCLV Enums
 *******************************************************/

/*
 * SCLV_MODE_SEL enum
 */

typedef enum SCLV_MODE_SEL {
SCLV_MODE_RGB_BYPASS                     = 0x00000000,
SCLV_MODE_RGB_SCALING                    = 0x00000001,
SCLV_MODE_YCBCR_SCALING                  = 0x00000002,
SCLV_MODE_YCBCR_BYPASS                   = 0x00000003,
} SCLV_MODE_SEL;

/*
 * SCLV_INTERLACE_SOURCE enum
 */

typedef enum SCLV_INTERLACE_SOURCE {
INTERLACE_SOURCE_PROGRESSIVE             = 0x00000000,
INTERLACE_SOURCE_INTERLEAVE              = 0x00000001,
INTERLACE_SOURCE_STACK                   = 0x00000002,
} SCLV_INTERLACE_SOURCE;

/*
 * SCLV_UPDATE_LOCK enum
 */

typedef enum SCLV_UPDATE_LOCK {
UPDATE_UNLOCKED                          = 0x00000000,
UPDATE_LOCKED                            = 0x00000001,
} SCLV_UPDATE_LOCK;

/*
 * SCLV_COEF_UPDATE_COMPLETE enum
 */

typedef enum SCLV_COEF_UPDATE_COMPLETE {
COEF_UPDATE_NOT_COMPLETE                 = 0x00000000,
COEF_UPDATE_COMPLETE                     = 0x00000001,
} SCLV_COEF_UPDATE_COMPLETE;

/*******************************************************
 * DPRX_SD Enums
 *******************************************************/

/*
 * DPRX_SD_PIXEL_ENCODING enum
 */

typedef enum DPRX_SD_PIXEL_ENCODING {
PIXEL_FORMAT_RGB_444                     = 0x00000000,
PIXEL_FORMAT_YCBCR_444                   = 0x00000001,
PIXEL_FORMAT_YCBCR_422                   = 0x00000002,
PIXEL_FORMAT_Y_ONLY                      = 0x00000003,
} DPRX_SD_PIXEL_ENCODING;

/*
 * DPRX_SD_COMPONENT_DEPTH enum
 */

typedef enum DPRX_SD_COMPONENT_DEPTH {
COMPONENT_DEPTH_6BPC                     = 0x00000000,
COMPONENT_DEPTH_8BPC                     = 0x00000001,
COMPONENT_DEPTH_10BPC                    = 0x00000002,
COMPONENT_DEPTH_12BPC                    = 0x00000003,
COMPONENT_DEPTH_16BPC                    = 0x00000004,
} DPRX_SD_COMPONENT_DEPTH;

/*******************************************************
 * AZF0STREAM Enums
 *******************************************************/

/*
 * AZ_LATENCY_COUNTER_CONTROL enum
 */

typedef enum AZ_LATENCY_COUNTER_CONTROL {
AZ_LATENCY_COUNTER_NO_RESET              = 0x00000000,
AZ_LATENCY_COUNTER_RESET_DONE            = 0x00000001,
} AZ_LATENCY_COUNTER_CONTROL;

/*******************************************************
 * BLND Enums
 *******************************************************/

/*
 * BLND_CONTROL_BLND_MODE enum
 */

typedef enum BLND_CONTROL_BLND_MODE {
BLND_CONTROL_BLND_MODE_CURRENT_PIPE_ONLY = 0x00000000,
BLND_CONTROL_BLND_MODE_OTHER_PIPE_ONLY   = 0x00000001,
BLND_CONTROL_BLND_MODE_ALPHA_BLENDING_MODE = 0x00000002,
BLND_CONTROL_BLND_MODE_OTHER_STEREO_TYPE = 0x00000003,
} BLND_CONTROL_BLND_MODE;

/*
 * BLND_CONTROL_BLND_STEREO_TYPE enum
 */

typedef enum BLND_CONTROL_BLND_STEREO_TYPE {
BLND_CONTROL_BLND_STEREO_TYPE_NON_SINGLE_PIPE_STEREO = 0x00000000,
BLND_CONTROL_BLND_STEREO_TYPE_SIDE_BY_SIDE_SINGLE_PIPE_STEREO = 0x00000001,
BLND_CONTROL_BLND_STEREO_TYPE_TOP_BOTTOM_SINGLE_PIPE_STEREO = 0x00000002,
BLND_CONTROL_BLND_STEREO_TYPE_UNUSED     = 0x00000003,
} BLND_CONTROL_BLND_STEREO_TYPE;

/*
 * BLND_CONTROL_BLND_STEREO_POLARITY enum
 */

typedef enum BLND_CONTROL_BLND_STEREO_POLARITY {
BLND_CONTROL_BLND_STEREO_POLARITY_LOW    = 0x00000000,
BLND_CONTROL_BLND_STEREO_POLARITY_HIGH   = 0x00000001,
} BLND_CONTROL_BLND_STEREO_POLARITY;

/*
 * BLND_CONTROL_BLND_FEEDTHROUGH_EN enum
 */

typedef enum BLND_CONTROL_BLND_FEEDTHROUGH_EN {
BLND_CONTROL_BLND_FEEDTHROUGH_EN_FALSE   = 0x00000000,
BLND_CONTROL_BLND_FEEDTHROUGH_EN_TRUE    = 0x00000001,
} BLND_CONTROL_BLND_FEEDTHROUGH_EN;

/*
 * BLND_CONTROL_BLND_ALPHA_MODE enum
 */

typedef enum BLND_CONTROL_BLND_ALPHA_MODE {
BLND_CONTROL_BLND_ALPHA_MODE_CURRENT_PIXEL_ALPHA = 0x00000000,
BLND_CONTROL_BLND_ALPHA_MODE_PIXEL_ALPHA_COMBINED_GLOBAL_GAIN = 0x00000001,
BLND_CONTROL_BLND_ALPHA_MODE_GLOBAL_ALPHA_ONLY = 0x00000002,
BLND_CONTROL_BLND_ALPHA_MODE_UNUSED      = 0x00000003,
} BLND_CONTROL_BLND_ALPHA_MODE;

/*
 * BLND_CONTROL_BLND_ACTIVE_OVERLAP_ONLY enum
 */

typedef enum BLND_CONTROL_BLND_ACTIVE_OVERLAP_ONLY {
BLND_CONTROL_BLND_ACTIVE_OVERLAY_ONLY_FALSE  = 0x00000000,
BLND_CONTROL_BLND_ACTIVE_OVERLAY_ONLY_TRUE  = 0x00000001,
} BLND_CONTROL_BLND_ACTIVE_OVERLAP_ONLY;

/*
 * BLND_CONTROL_BLND_MULTIPLIED_MODE enum
 */

typedef enum BLND_CONTROL_BLND_MULTIPLIED_MODE {
BLND_CONTROL_BLND_MULTIPLIED_MODE_FALSE  = 0x00000000,
BLND_CONTROL_BLND_MULTIPLIED_MODE_TRUE   = 0x00000001,
} BLND_CONTROL_BLND_MULTIPLIED_MODE;

/*
 * BLND_SM_CONTROL2_SM_MODE enum
 */

typedef enum BLND_SM_CONTROL2_SM_MODE {
BLND_SM_CONTROL2_SM_MODE_SINGLE_PLANE    = 0x00000000,
BLND_SM_CONTROL2_SM_MODE_ROW_SUBSAMPLING = 0x00000002,
BLND_SM_CONTROL2_SM_MODE_COLUMN_SUBSAMPLING = 0x00000004,
BLND_SM_CONTROL2_SM_MODE_CHECKERBOARD_SUBSAMPLING = 0x00000006,
} BLND_SM_CONTROL2_SM_MODE;

/*
 * BLND_SM_CONTROL2_SM_FRAME_ALTERNATE enum
 */

typedef enum BLND_SM_CONTROL2_SM_FRAME_ALTERNATE {
BLND_SM_CONTROL2_SM_FRAME_ALTERNATE_FALSE = 0x00000000,
BLND_SM_CONTROL2_SM_FRAME_ALTERNATE_TRUE = 0x00000001,
} BLND_SM_CONTROL2_SM_FRAME_ALTERNATE;

/*
 * BLND_SM_CONTROL2_SM_FIELD_ALTERNATE enum
 */

typedef enum BLND_SM_CONTROL2_SM_FIELD_ALTERNATE {
BLND_SM_CONTROL2_SM_FIELD_ALTERNATE_FALSE = 0x00000000,
BLND_SM_CONTROL2_SM_FIELD_ALTERNATE_TRUE = 0x00000001,
} BLND_SM_CONTROL2_SM_FIELD_ALTERNATE;

/*
 * BLND_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL enum
 */

typedef enum BLND_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL {
BLND_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL_NO_FORCE = 0x00000000,
BLND_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL_RESERVED = 0x00000001,
BLND_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL_FORCE_LOW = 0x00000002,
BLND_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL_FORCE_HIGH = 0x00000003,
} BLND_SM_CONTROL2_SM_FORCE_NEXT_FRAME_POL;

/*
 * BLND_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL enum
 */

typedef enum BLND_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL {
BLND_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL_NO_FORCE = 0x00000000,
BLND_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL_RESERVED = 0x00000001,
BLND_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL_FORCE_LOW = 0x00000002,
BLND_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL_FORCE_HIGH = 0x00000003,
} BLND_SM_CONTROL2_SM_FORCE_NEXT_TOP_POL;

/*
 * BLND_CONTROL2_PTI_ENABLE enum
 */

typedef enum BLND_CONTROL2_PTI_ENABLE {
BLND_CONTROL2_PTI_ENABLE_FALSE           = 0x00000000,
BLND_CONTROL2_PTI_ENABLE_TRUE            = 0x00000001,
} BLND_CONTROL2_PTI_ENABLE;

/*
 * BLND_CONTROL2_BLND_SUPERAA_DEGAMMA_EN enum
 */

typedef enum BLND_CONTROL2_BLND_SUPERAA_DEGAMMA_EN {
BLND_CONTROL2_BLND_SUPERAA_DEGAMMA_EN_FALSE = 0x00000000,
BLND_CONTROL2_BLND_SUPERAA_DEGAMMA_EN_TRUE = 0x00000001,
} BLND_CONTROL2_BLND_SUPERAA_DEGAMMA_EN;

/*
 * BLND_CONTROL2_BLND_SUPERAA_REGAMMA_EN enum
 */

typedef enum BLND_CONTROL2_BLND_SUPERAA_REGAMMA_EN {
BLND_CONTROL2_BLND_SUPERAA_REGAMMA_EN_FALSE = 0x00000000,
BLND_CONTROL2_BLND_SUPERAA_REGAMMA_EN_TRUE = 0x00000001,
} BLND_CONTROL2_BLND_SUPERAA_REGAMMA_EN;

/*
 * BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK enum
 */

typedef enum BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK {
BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK_FALSE = 0x00000000,
BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK_TRUE = 0x00000001,
} BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_ACK;

/*
 * BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK enum
 */

typedef enum BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK {
BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK_FALSE = 0x00000000,
BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK_TRUE = 0x00000001,
} BLND_UNDERFLOW_INTERRUPT_BLND_UNDERFLOW_INT_MASK;

/*
 * BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK enum
 */

typedef enum BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK {
BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK_FALSE = 0x00000000,
BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_V_UPDATE_LOCK;

/*
 * BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK enum
 */

typedef enum BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK {
BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK_FALSE = 0x00000000,
BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLND_V_UPDATE_LOCK_BLND_DCP_GRPH_SURF_V_UPDATE_LOCK;

/*
 * BLND_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK enum
 */

typedef enum BLND_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK {
BLND_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK_FALSE = 0x00000000,
BLND_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLND_V_UPDATE_LOCK_BLND_DCP_CUR_V_UPDATE_LOCK;

/*
 * BLND_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK enum
 */

typedef enum BLND_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK {
BLND_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK_FALSE = 0x00000000,
BLND_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLND_V_UPDATE_LOCK_BLND_DCP_CUR2_V_UPDATE_LOCK;

/*
 * BLND_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK enum
 */

typedef enum BLND_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK {
BLND_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK_FALSE = 0x00000000,
BLND_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLND_V_UPDATE_LOCK_BLND_SCL_V_UPDATE_LOCK;

/*
 * BLND_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK enum
 */

typedef enum BLND_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK {
BLND_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK_FALSE = 0x00000000,
BLND_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK_TRUE = 0x00000001,
} BLND_V_UPDATE_LOCK_BLND_BLND_V_UPDATE_LOCK;

/*
 * BLND_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE enum
 */

typedef enum BLND_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE {
BLND_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE_FALSE = 0x00000000,
BLND_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE_TRUE = 0x00000001,
} BLND_V_UPDATE_LOCK_BLND_V_UPDATE_LOCK_MODE;

/*
 * BLND_DEBUG_BLND_CNV_MUX_SELECT enum
 */

typedef enum BLND_DEBUG_BLND_CNV_MUX_SELECT {
BLND_DEBUG_BLND_CNV_MUX_SELECT_LOW       = 0x00000000,
BLND_DEBUG_BLND_CNV_MUX_SELECT_HIGH      = 0x00000001,
} BLND_DEBUG_BLND_CNV_MUX_SELECT;

/*
 * BLND_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN enum
 */

typedef enum BLND_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN {
BLND_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN_FALSE = 0x00000000,
BLND_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN_TRUE = 0x00000001,
} BLND_TEST_DEBUG_INDEX_BLND_TEST_DEBUG_WRITE_EN;

/*******************************************************
 * AZF0ENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED  = 0x00000001,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED  = 0x00000002,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED  = 0x00000003,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED  = 0x00000004,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED  = 0x00000005,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED  = 0x00000006,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED  = 0x00000007,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED_RESERVED  = 0x00000008,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED  = 0x00000009,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESSING_CAPABILITIES  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESSING_CAPABILITIES  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_FORMAT_OVERRIDE  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_FORMAT_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_MONOPHONIC  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_STEREO  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED  = 0x00000001,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED  = 0x00000002,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED  = 0x00000003,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED  = 0x00000004,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED  = 0x00000005,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED  = 0x00000006,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED  = 0x00000007,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED_RESERVED  = 0x00000008,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED  = 0x00000009,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESSING_CAPABILITIES  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESSING_CAPABILITIES  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER_PRESENT  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_EAPD_PIN  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_EAPD_PIN  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_NOT_BALANCED  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_BALANCED  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_INPUT_PIN  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_INPUT_PIN  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_OUTPUT_PIN  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_OUTPUT_PIN  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_HEADPHONE_DRIVE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_HEADPHONE_DRIVE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_JACK_DETECTION_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_JACK_DETECTION_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_IMPEDANCE_SENSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_IMPEDANCE_SENSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE {
AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_PAIR_MODE  = 0x00000000,
AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_SINGLE_MODE  = 0x00000001,
} AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE;

/*
 * AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE {
AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_NO_HBR_CAPABLILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HAVE_HBR_CAPABLILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE;

/*******************************************************
 * AZF0INPUTENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED  = 0x00000001,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED  = 0x00000002,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED  = 0x00000003,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED  = 0x00000004,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED  = 0x00000005,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED  = 0x00000006,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED  = 0x00000007,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED  = 0x00000008,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED  = 0x00000009,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CODEC_CONVERTER0_IS_ANALOG  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CODEC_CONVERTER0_IS_DIGITAL  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_CODEC_CONVERTER0_HAVE_NO_PROCESSING_CAPABILITIES  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_CODEC_CONVERTER0_HAVE_PROCESSING_CAPABILITIES  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NOT_SUPPORT_STRIPING  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_FORMAT_OVERRIDE  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_FORMAT_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_MONOPHONIC  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_STEREO  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED  = 0x00000001,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED  = 0x00000002,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED  = 0x00000003,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED  = 0x00000004,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED  = 0x00000005,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED  = 0x00000006,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED  = 0x00000007,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED  = 0x00000008,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED  = 0x00000009,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESING_CAPABILITIES  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESING_CAPABILITIES  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP_NOT_ENABLED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP_ENABLED  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE_NO_EAPD_PIN  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE_HAVE_EAPD_PIN  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI_NOT_ENABLED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI_ENABLED  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_I_O_PINS_NOT_BALANCED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_BALANCED  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_INPUT_PIN  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_INPUT_PIN  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_OUTPUT_PIN  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_OUTPUT_PIN  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_HEADPHONE_DRIVE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_HEADPHONE_DRIVE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_JACK_PRESENCE_DETECTION_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_JACK_PRESENCE_DETECTION_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_IMPEDANCE_SENSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_IMPEDANCE_SENSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_NO_HBR_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HAVE_HBR_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE;

/*******************************************************
 * UNP Enums
 *******************************************************/

/*
 * UNP_GRPH_EN enum
 */

typedef enum UNP_GRPH_EN {
UNP_GRPH_DISABLED                        = 0x00000000,
UNP_GRPH_ENABLED                         = 0x00000001,
} UNP_GRPH_EN;

/*
 * UNP_GRPH_DEPTH enum
 */

typedef enum UNP_GRPH_DEPTH {
UNP_GRPH_8BPP                            = 0x00000000,
UNP_GRPH_16BPP                           = 0x00000001,
UNP_GRPH_32BPP                           = 0x00000002,
} UNP_GRPH_DEPTH;

/*
 * UNP_GRPH_NUM_BANKS enum
 */

typedef enum UNP_GRPH_NUM_BANKS {
UNP_GRPH_ADDR_SURF_2_BANK                = 0x00000000,
UNP_GRPH_ADDR_SURF_4_BANK                = 0x00000001,
UNP_GRPH_ADDR_SURF_8_BANK                = 0x00000002,
UNP_GRPH_ADDR_SURF_16_BANK               = 0x00000003,
} UNP_GRPH_NUM_BANKS;

/*
 * UNP_GRPH_BANK_WIDTH enum
 */

typedef enum UNP_GRPH_BANK_WIDTH {
UNP_GRPH_ADDR_SURF_BANK_WIDTH_1          = 0x00000000,
UNP_GRPH_ADDR_SURF_BANK_WIDTH_2          = 0x00000001,
UNP_GRPH_ADDR_SURF_BANK_WIDTH_4          = 0x00000002,
UNP_GRPH_ADDR_SURF_BANK_WIDTH_8          = 0x00000003,
} UNP_GRPH_BANK_WIDTH;

/*
 * UNP_GRPH_BANK_HEIGHT enum
 */

typedef enum UNP_GRPH_BANK_HEIGHT {
UNP_GRPH_ADDR_SURF_BANK_HEIGHT_1         = 0x00000000,
UNP_GRPH_ADDR_SURF_BANK_HEIGHT_2         = 0x00000001,
UNP_GRPH_ADDR_SURF_BANK_HEIGHT_4         = 0x00000002,
UNP_GRPH_ADDR_SURF_BANK_HEIGHT_8         = 0x00000003,
} UNP_GRPH_BANK_HEIGHT;

/*
 * UNP_GRPH_TILE_SPLIT enum
 */

typedef enum UNP_GRPH_TILE_SPLIT {
UNP_ADDR_SURF_TILE_SPLIT_64B             = 0x00000000,
UNP_ADDR_SURF_TILE_SPLIT_128B            = 0x00000001,
UNP_ADDR_SURF_TILE_SPLIT_256B            = 0x00000002,
UNP_ADDR_SURF_TILE_SPLIT_512B            = 0x00000003,
UNP_ADDR_SURF_TILE_SPLIT_1KB             = 0x00000004,
UNP_ADDR_SURF_TILE_SPLIT_2KB             = 0x00000005,
UNP_ADDR_SURF_TILE_SPLIT_4KB             = 0x00000006,
} UNP_GRPH_TILE_SPLIT;

/*
 * UNP_GRPH_ADDRESS_TRANSLATION_ENABLE enum
 */

typedef enum UNP_GRPH_ADDRESS_TRANSLATION_ENABLE {
UNP_GRPH_ADDRESS_TRANSLATION_ENABLE0     = 0x00000000,
UNP_GRPH_ADDRESS_TRANSLATION_ENABLE1     = 0x00000001,
} UNP_GRPH_ADDRESS_TRANSLATION_ENABLE;

/*
 * UNP_GRPH_MACRO_TILE_ASPECT enum
 */

typedef enum UNP_GRPH_MACRO_TILE_ASPECT {
UNP_ADDR_SURF_MACRO_ASPECT_1             = 0x00000000,
UNP_ADDR_SURF_MACRO_ASPECT_2             = 0x00000001,
UNP_ADDR_SURF_MACRO_ASPECT_4             = 0x00000002,
UNP_ADDR_SURF_MACRO_ASPECT_8             = 0x00000003,
} UNP_GRPH_MACRO_TILE_ASPECT;

/*
 * UNP_GRPH_COLOR_EXPANSION_MODE enum
 */

typedef enum UNP_GRPH_COLOR_EXPANSION_MODE {
UNP_GRPH_DYNAMIC_EXPANSION               = 0x00000000,
UNP_GRPH_ZERO_EXPANSION                  = 0x00000001,
} UNP_GRPH_COLOR_EXPANSION_MODE;

/*
 * UNP_VIDEO_FORMAT enum
 */

typedef enum UNP_VIDEO_FORMAT {
UNP_VIDEO_FORMAT0                        = 0x00000000,
UNP_VIDEO_FORMAT1                        = 0x00000001,
UNP_VIDEO_FORMAT_YUV420_YCbCr            = 0x00000002,
UNP_VIDEO_FORMAT_YUV420_YCrCb            = 0x00000003,
UNP_VIDEO_FORMAT_YUV422_YCb              = 0x00000004,
UNP_VIDEO_FORMAT_YUV422_YCr              = 0x00000005,
UNP_VIDEO_FORMAT_YUV422_CbY              = 0x00000006,
UNP_VIDEO_FORMAT_YUV422_CrY              = 0x00000007,
} UNP_VIDEO_FORMAT;

/*
 * UNP_GRPH_ENDIAN_SWAP enum
 */

typedef enum UNP_GRPH_ENDIAN_SWAP {
UNP_GRPH_ENDIAN_SWAP_NONE                = 0x00000000,
UNP_GRPH_ENDIAN_SWAP_8IN16               = 0x00000001,
UNP_GRPH_ENDIAN_SWAP_8IN32               = 0x00000002,
UNP_GRPH_ENDIAN_SWAP_8IN43               = 0x00000003,
} UNP_GRPH_ENDIAN_SWAP;

/*
 * UNP_GRPH_RED_CROSSBAR enum
 */

typedef enum UNP_GRPH_RED_CROSSBAR {
UNP_GRPH_RED_CROSSBAR_R_Cr               = 0x00000000,
UNP_GRPH_RED_CROSSBAR_G_Y                = 0x00000001,
UNP_GRPH_RED_CROSSBAR_B_Cb               = 0x00000002,
UNP_GRPH_RED_CROSSBAR_A                  = 0x00000003,
} UNP_GRPH_RED_CROSSBAR;

/*
 * UNP_GRPH_GREEN_CROSSBAR enum
 */

typedef enum UNP_GRPH_GREEN_CROSSBAR {
UNP_UNP_GRPH_GREEN_CROSSBAR_GY_AND_Y     = 0x00000000,
UNP_UNP_GRPH_GREEN_CROSSBAR_B_Cb_AND_C   = 0x00000001,
UNP_UNP_GRPH_GREEN_CROSSBAR_A            = 0x00000002,
UNP_UNP_GRPH_GREEN_CROSSBAR_R_Cr         = 0x00000003,
} UNP_GRPH_GREEN_CROSSBAR;

/*
 * UNP_GRPH_BLUE_CROSSBAR enum
 */

typedef enum UNP_GRPH_BLUE_CROSSBAR {
UNP_GRPH_BLUE_CROSSBAR_B_Cb_AND_C        = 0x00000000,
UNP_GRPH_BLUE_CROSSBAR_A                 = 0x00000001,
UNP_GRPH_BLUE_CROSSBAR_R_Cr              = 0x00000002,
UNP_GRPH_BLUE_CROSSBAR_GY_AND_Y          = 0x00000003,
} UNP_GRPH_BLUE_CROSSBAR;

/*
 * UNP_GRPH_MODE_UPDATE_LOCKG enum
 */

typedef enum UNP_GRPH_MODE_UPDATE_LOCKG {
UNP_GRPH_UPDATE_LOCK_0                   = 0x00000000,
UNP_GRPH_UPDATE_LOCK_1                   = 0x00000001,
} UNP_GRPH_MODE_UPDATE_LOCKG;

/*
 * UNP_GRPH_SURFACE_IGNORE_UPDATE_LOCK enum
 */

typedef enum UNP_GRPH_SURFACE_IGNORE_UPDATE_LOCK {
UNP_GRPH_SURFACE_IGNORE_UPDATE_LOCK_0    = 0x00000000,
UNP_GRPH_SURFACE_IGNORE_UPDATE_LOCK_1    = 0x00000001,
} UNP_GRPH_SURFACE_IGNORE_UPDATE_LOCK;

/*
 * UNP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE enum
 */

typedef enum UNP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE {
UNP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE_0  = 0x00000000,
UNP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE_1  = 0x00000001,
} UNP_GRPH_MODE_DISABLE_MULTIPLE_UPDATE;

/*
 * UNP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE enum
 */

typedef enum UNP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE {
UNP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE_0  = 0x00000000,
UNP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE_1  = 0x00000001,
} UNP_GRPH_SURFACE_DISABLE_MULTIPLE_UPDATE;

/*
 * UNP_GRPH_STEREOSYNC_FLIP_EN enum
 */

typedef enum UNP_GRPH_STEREOSYNC_FLIP_EN {
UNP_GRPH_STEREOSYNC_FLIP_DISABLE         = 0x00000000,
UNP_GRPH_STEREOSYNC_FLIP_ENABLE          = 0x00000001,
} UNP_GRPH_STEREOSYNC_FLIP_EN;

/*
 * UNP_GRPH_STEREOSYNC_FLIP_MODE enum
 */

typedef enum UNP_GRPH_STEREOSYNC_FLIP_MODE {
UNP_GRPH_STEREOSYNC_FLIP_MODE_0          = 0x00000000,
UNP_GRPH_STEREOSYNC_FLIP_MODE_1          = 0x00000001,
UNP_GRPH_STEREOSYNC_FLIP_MODE_2          = 0x00000002,
UNP_GRPH_STEREOSYNC_FLIP_MODE_3          = 0x00000003,
} UNP_GRPH_STEREOSYNC_FLIP_MODE;

/*
 * UNP_GRPH_STACK_INTERLACE_FLIP_EN enum
 */

typedef enum UNP_GRPH_STACK_INTERLACE_FLIP_EN {
UNP_GRPH_STACK_INTERLACE_FLIP_DISABLE    = 0x00000000,
UNP_GRPH_STACK_INTERLACE_FLIP_ENABLE     = 0x00000001,
} UNP_GRPH_STACK_INTERLACE_FLIP_EN;

/*
 * UNP_GRPH_STACK_INTERLACE_FLIP_MODE enum
 */

typedef enum UNP_GRPH_STACK_INTERLACE_FLIP_MODE {
UNP_GRPH_STACK_INTERLACE_FLIP_MODE_0     = 0x00000000,
UNP_GRPH_STACK_INTERLACE_FLIP_MODE_1     = 0x00000001,
UNP_GRPH_STACK_INTERLACE_FLIP_MODE_2     = 0x00000002,
UNP_GRPH_STACK_INTERLACE_FLIP_MODE_3     = 0x00000003,
} UNP_GRPH_STACK_INTERLACE_FLIP_MODE;

/*
 * UNP_GRPH_STEREOSYNC_SELECT_DISABLE enum
 */

typedef enum UNP_GRPH_STEREOSYNC_SELECT_DISABLE {
UNP_GRPH_STEREOSYNC_SELECT_EN            = 0x00000000,
UNP_GRPH_STEREOSYNC_SELECT_DIS           = 0x00000001,
} UNP_GRPH_STEREOSYNC_SELECT_DISABLE;

/*
 * UNP_CRC_SOURCE_SEL enum
 */

typedef enum UNP_CRC_SOURCE_SEL {
UNP_CRC_SOURCE_SEL_NP_TO_LBV             = 0x00000000,
UNP_CRC_SOURCE_SEL_LOWER32               = 0x00000001,
UNP_CRC_SOURCE_SEL_RESERVED              = 0x00000002,
UNP_CRC_SOURCE_SEL_LOWER16               = 0x00000003,
UNP_CRC_SOURCE_SEL_UNP_TO_LBV            = 0x00000004,
} UNP_CRC_SOURCE_SEL;

/*
 * UNP_CRC_LINE_SEL enum
 */

typedef enum UNP_CRC_LINE_SEL {
UNP_CRC_LINE_SEL_RESERVED                = 0x00000000,
UNP_CRC_LINE_SEL_EVEN_ONLY               = 0x00000001,
UNP_CRC_LINE_SEL_ODD_ONLY                = 0x00000002,
UNP_CRC_LINE_SEL_ODD_EVEN                = 0x00000003,
} UNP_CRC_LINE_SEL;

/*
 * UNP_ROTATION_ANGLE enum
 */

typedef enum UNP_ROTATION_ANGLE {
UNP_ROTATION_ANGLE_0                     = 0x00000000,
UNP_ROTATION_ANGLE_90                    = 0x00000001,
UNP_ROTATION_ANGLE_180                   = 0x00000002,
UNP_ROTATION_ANGLE_270                   = 0x00000003,
UNP_ROTATION_ANGLE_0m                    = 0x00000004,
UNP_ROTATION_ANGLE_90m                   = 0x00000005,
UNP_ROTATION_ANGLE_180m                  = 0x00000006,
UNP_ROTATION_ANGLE_270m                  = 0x00000007,
} UNP_ROTATION_ANGLE;

/*
 * UNP_PIXEL_DROP enum
 */

typedef enum UNP_PIXEL_DROP {
UNP_PIXEL_NO_DROP                        = 0x00000000,
UNP_PIXEL_DROPPING                       = 0x00000001,
} UNP_PIXEL_DROP;

/*
 * UNP_BUFFER_MODE enum
 */

typedef enum UNP_BUFFER_MODE {
UNP_BUFFER_MODE_LUMA                     = 0x00000000,
UNP_BUFFER_MODE_LUMA_CHROMA              = 0x00000001,
} UNP_BUFFER_MODE;

/*******************************************************
 * DP Enums
 *******************************************************/

/*
 * DP_LINK_TRAINING_COMPLETE enum
 */

typedef enum DP_LINK_TRAINING_COMPLETE {
DP_LINK_TRAINING_NOT_COMPLETE            = 0x00000000,
DP_LINK_TRAINING_ALREADY_COMPLETE        = 0x00000001,
} DP_LINK_TRAINING_COMPLETE;

/*
 * DP_EMBEDDED_PANEL_MODE enum
 */

typedef enum DP_EMBEDDED_PANEL_MODE {
DP_EXTERNAL_PANEL                        = 0x00000000,
DP_EMBEDDED_PANEL                        = 0x00000001,
} DP_EMBEDDED_PANEL_MODE;

/*
 * DP_PIXEL_ENCODING enum
 */

typedef enum DP_PIXEL_ENCODING {
DP_PIXEL_ENCODING_RGB444                 = 0x00000000,
DP_PIXEL_ENCODING_YCBCR422               = 0x00000001,
DP_PIXEL_ENCODING_YCBCR444               = 0x00000002,
DP_PIXEL_ENCODING_RGB_WIDE_GAMUT         = 0x00000003,
DP_PIXEL_ENCODING_Y_ONLY                 = 0x00000004,
DP_PIXEL_ENCODING_YCBCR420               = 0x00000005,
DP_PIXEL_ENCODING_RESERVED               = 0x00000006,
} DP_PIXEL_ENCODING;

/*
 * DP_DYN_RANGE enum
 */

typedef enum DP_DYN_RANGE {
DP_DYN_VESA_RANGE                        = 0x00000000,
DP_DYN_CEA_RANGE                         = 0x00000001,
} DP_DYN_RANGE;

/*
 * DP_YCBCR_RANGE enum
 */

typedef enum DP_YCBCR_RANGE {
DP_YCBCR_RANGE_BT601_5                   = 0x00000000,
DP_YCBCR_RANGE_BT709_5                   = 0x00000001,
} DP_YCBCR_RANGE;

/*
 * DP_COMPONENT_DEPTH enum
 */

typedef enum DP_COMPONENT_DEPTH {
DP_COMPONENT_DEPTH_6BPC                  = 0x00000000,
DP_COMPONENT_DEPTH_8BPC                  = 0x00000001,
DP_COMPONENT_DEPTH_10BPC                 = 0x00000002,
DP_COMPONENT_DEPTH_12BPC                 = 0x00000003,
DP_COMPONENT_DEPTH_16BPC_RESERVED        = 0x00000004,
DP_COMPONENT_DEPTH_RESERVED              = 0x00000005,
} DP_COMPONENT_DEPTH;

/*
 * DP_MSA_MISC0_OVERRIDE_ENABLE enum
 */

typedef enum DP_MSA_MISC0_OVERRIDE_ENABLE {
MSA_MISC0_OVERRIDE_DISABLE               = 0x00000000,
MSA_MISC0_OVERRIDE_ENABLE                = 0x00000001,
} DP_MSA_MISC0_OVERRIDE_ENABLE;

/*
 * DP_MSA_MISC1_BIT7_OVERRIDE_ENABLE enum
 */

typedef enum DP_MSA_MISC1_BIT7_OVERRIDE_ENABLE {
MSA_MISC1_BIT7_OVERRIDE_DISABLE          = 0x00000000,
MSA_MISC1_BIT7_OVERRIDE_ENABLE           = 0x00000001,
} DP_MSA_MISC1_BIT7_OVERRIDE_ENABLE;

/*
 * DP_UDI_LANES enum
 */

typedef enum DP_UDI_LANES {
DP_UDI_1_LANE                            = 0x00000000,
DP_UDI_2_LANES                           = 0x00000001,
DP_UDI_LANES_RESERVED                    = 0x00000002,
DP_UDI_4_LANES                           = 0x00000003,
} DP_UDI_LANES;

/*
 * DP_VID_STREAM_DIS_DEFER enum
 */

typedef enum DP_VID_STREAM_DIS_DEFER {
DP_VID_STREAM_DIS_NO_DEFER               = 0x00000000,
DP_VID_STREAM_DIS_DEFER_TO_HBLANK        = 0x00000001,
DP_VID_STREAM_DIS_DEFER_TO_VBLANK        = 0x00000002,
} DP_VID_STREAM_DIS_DEFER;

/*
 * DP_STEER_OVERFLOW_ACK enum
 */

typedef enum DP_STEER_OVERFLOW_ACK {
DP_STEER_OVERFLOW_ACK_NO_EFFECT          = 0x00000000,
DP_STEER_OVERFLOW_ACK_CLR_INTERRUPT      = 0x00000001,
} DP_STEER_OVERFLOW_ACK;

/*
 * DP_STEER_OVERFLOW_MASK enum
 */

typedef enum DP_STEER_OVERFLOW_MASK {
DP_STEER_OVERFLOW_MASKED                 = 0x00000000,
DP_STEER_OVERFLOW_UNMASK                 = 0x00000001,
} DP_STEER_OVERFLOW_MASK;

/*
 * DP_TU_OVERFLOW_ACK enum
 */

typedef enum DP_TU_OVERFLOW_ACK {
DP_TU_OVERFLOW_ACK_NO_EFFECT             = 0x00000000,
DP_TU_OVERFLOW_ACK_CLR_INTERRUPT         = 0x00000001,
} DP_TU_OVERFLOW_ACK;

/*
 * DPHY_ALT_SCRAMBLER_RESET_EN enum
 */

typedef enum DPHY_ALT_SCRAMBLER_RESET_EN {
DPHY_ALT_SCRAMBLER_REGULAR_RESET_VALUE   = 0x00000000,
DPHY_ALT_SCRAMBLER_INTERNAL_RESET_SOLUTION  = 0x00000001,
} DPHY_ALT_SCRAMBLER_RESET_EN;

/*
 * DPHY_ALT_SCRAMBLER_RESET_SEL enum
 */

typedef enum DPHY_ALT_SCRAMBLER_RESET_SEL {
DPHY_ALT_SCRAMBLER_RESET_SEL_EDP_RESET_VALUE  = 0x00000000,
DPHY_ALT_SCRAMBLER_RESET_SEL_CUSTOM_RESET_VALUE  = 0x00000001,
} DPHY_ALT_SCRAMBLER_RESET_SEL;

/*
 * DP_VID_TIMING_MODE enum
 */

typedef enum DP_VID_TIMING_MODE {
DP_VID_TIMING_MODE_ASYNC                 = 0x00000000,
DP_VID_TIMING_MODE_SYNC                  = 0x00000001,
} DP_VID_TIMING_MODE;

/*
 * DP_VID_M_N_DOUBLE_BUFFER_MODE enum
 */

typedef enum DP_VID_M_N_DOUBLE_BUFFER_MODE {
DP_VID_M_N_DOUBLE_BUFFER_AFTER_VID_M_UPDATE  = 0x00000000,
DP_VID_M_N_DOUBLE_BUFFER_AT_FRAME_START  = 0x00000001,
} DP_VID_M_N_DOUBLE_BUFFER_MODE;

/*
 * DP_VID_M_N_GEN_EN enum
 */

typedef enum DP_VID_M_N_GEN_EN {
DP_VID_M_N_PROGRAMMED_VIA_REG            = 0x00000000,
DP_VID_M_N_CALC_AUTO                     = 0x00000001,
} DP_VID_M_N_GEN_EN;

/*
 * DP_VID_M_DOUBLE_VALUE_EN enum
 */

typedef enum DP_VID_M_DOUBLE_VALUE_EN {
DP_VID_M_INPUT_PIXEL_RATE                = 0x00000000,
DP_VID_M_DOUBLE_INPUT_PIXEL_RATE         = 0x00000001,
} DP_VID_M_DOUBLE_VALUE_EN;

/*
 * DP_VID_ENHANCED_FRAME_MODE enum
 */

typedef enum DP_VID_ENHANCED_FRAME_MODE {
VID_NORMAL_FRAME_MODE                    = 0x00000000,
VID_ENHANCED_MODE                        = 0x00000001,
} DP_VID_ENHANCED_FRAME_MODE;

/*
 * DP_VID_MSA_TOP_FIELD_MODE enum
 */

typedef enum DP_VID_MSA_TOP_FIELD_MODE {
DP_TOP_FIELD_ONLY                        = 0x00000000,
DP_TOP_PLUS_BOTTOM_FIELD                 = 0x00000001,
} DP_VID_MSA_TOP_FIELD_MODE;

/*
 * DP_VID_VBID_FIELD_POL enum
 */

typedef enum DP_VID_VBID_FIELD_POL {
DP_VID_VBID_FIELD_POL_NORMAL             = 0x00000000,
DP_VID_VBID_FIELD_POL_INV                = 0x00000001,
} DP_VID_VBID_FIELD_POL;

/*
 * DP_VID_STREAM_DISABLE_ACK enum
 */

typedef enum DP_VID_STREAM_DISABLE_ACK {
ID_STREAM_DISABLE_NO_ACK                 = 0x00000000,
ID_STREAM_DISABLE_ACKED                  = 0x00000001,
} DP_VID_STREAM_DISABLE_ACK;

/*
 * DP_VID_STREAM_DISABLE_MASK enum
 */

typedef enum DP_VID_STREAM_DISABLE_MASK {
VID_STREAM_DISABLE_MASKED                = 0x00000000,
VID_STREAM_DISABLE_UNMASK                = 0x00000001,
} DP_VID_STREAM_DISABLE_MASK;

/*
 * DPHY_ATEST_SEL_LANE0 enum
 */

typedef enum DPHY_ATEST_SEL_LANE0 {
DPHY_ATEST_LANE0_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE0_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE0;

/*
 * DPHY_ATEST_SEL_LANE1 enum
 */

typedef enum DPHY_ATEST_SEL_LANE1 {
DPHY_ATEST_LANE1_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE1_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE1;

/*
 * DPHY_ATEST_SEL_LANE2 enum
 */

typedef enum DPHY_ATEST_SEL_LANE2 {
DPHY_ATEST_LANE2_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE2_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE2;

/*
 * DPHY_ATEST_SEL_LANE3 enum
 */

typedef enum DPHY_ATEST_SEL_LANE3 {
DPHY_ATEST_LANE3_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE3_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE3;

/*
 * DPHY_SCRAMBLER_SEL enum
 */

typedef enum DPHY_SCRAMBLER_SEL {
DPHY_SCRAMBLER_SEL_LANE_DATA             = 0x00000000,
DPHY_SCRAMBLER_SEL_DBG_DATA              = 0x00000001,
} DPHY_SCRAMBLER_SEL;

/*
 * DPHY_BYPASS enum
 */

typedef enum DPHY_BYPASS {
DPHY_8B10B_OUTPUT                        = 0x00000000,
DPHY_DBG_OUTPUT                          = 0x00000001,
} DPHY_BYPASS;

/*
 * DPHY_SKEW_BYPASS enum
 */

typedef enum DPHY_SKEW_BYPASS {
DPHY_WITH_SKEW                           = 0x00000000,
DPHY_NO_SKEW                             = 0x00000001,
} DPHY_SKEW_BYPASS;

/*
 * DPHY_TRAINING_PATTERN_SEL enum
 */

typedef enum DPHY_TRAINING_PATTERN_SEL {
DPHY_TRAINING_PATTERN_1                  = 0x00000000,
DPHY_TRAINING_PATTERN_2                  = 0x00000001,
DPHY_TRAINING_PATTERN_3                  = 0x00000002,
DPHY_TRAINING_PATTERN_4                  = 0x00000003,
} DPHY_TRAINING_PATTERN_SEL;

/*
 * DPHY_8B10B_RESET enum
 */

typedef enum DPHY_8B10B_RESET {
DPHY_8B10B_NOT_RESET                     = 0x00000000,
DPHY_8B10B_RESETET                       = 0x00000001,
} DPHY_8B10B_RESET;

/*
 * DP_DPHY_8B10B_EXT_DISP enum
 */

typedef enum DP_DPHY_8B10B_EXT_DISP {
DP_DPHY_8B10B_EXT_DISP_ZERO              = 0x00000000,
DP_DPHY_8B10B_EXT_DISP_ONE               = 0x00000001,
} DP_DPHY_8B10B_EXT_DISP;

/*
 * DPHY_8B10B_CUR_DISP enum
 */

typedef enum DPHY_8B10B_CUR_DISP {
DPHY_8B10B_CUR_DISP_ZERO                 = 0x00000000,
DPHY_8B10B_CUR_DISP_ONE                  = 0x00000001,
} DPHY_8B10B_CUR_DISP;

/*
 * DPHY_PRBS_EN enum
 */

typedef enum DPHY_PRBS_EN {
DPHY_PRBS_DISABLE                        = 0x00000000,
DPHY_PRBS_ENABLE                         = 0x00000001,
} DPHY_PRBS_EN;

/*
 * DPHY_PRBS_SEL enum
 */

typedef enum DPHY_PRBS_SEL {
DPHY_PRBS7_SELECTED                      = 0x00000000,
DPHY_PRBS23_SELECTED                     = 0x00000001,
DPHY_PRBS11_SELECTED                     = 0x00000002,
} DPHY_PRBS_SEL;

/*
 * DPHY_SCRAMBLER_DIS enum
 */

typedef enum DPHY_SCRAMBLER_DIS {
DPHY_SCR_ENABLED                         = 0x00000000,
DPHY_SCR_DISABLED                        = 0x00000001,
} DPHY_SCRAMBLER_DIS;

/*
 * DPHY_SCRAMBLER_ADVANCE enum
 */

typedef enum DPHY_SCRAMBLER_ADVANCE {
DPHY_DPHY_SCRAMBLER_ADVANCE_ON_DATA_SYMBOL_ONLY  = 0x00000000,
DPHY_SCRAMBLER_ADVANCE_ON_BOTH_DATA_AND_CTRL  = 0x00000001,
} DPHY_SCRAMBLER_ADVANCE;

/*
 * DPHY_SCRAMBLER_KCODE enum
 */

typedef enum DPHY_SCRAMBLER_KCODE {
DPHY_SCRAMBLER_KCODE_DISABLED            = 0x00000000,
DPHY_SCRAMBLER_KCODE_ENABLED             = 0x00000001,
} DPHY_SCRAMBLER_KCODE;

/*
 * DPHY_LOAD_BS_COUNT_START enum
 */

typedef enum DPHY_LOAD_BS_COUNT_START {
DPHY_LOAD_BS_COUNT_STARTED               = 0x00000000,
DPHY_LOAD_BS_COUNT_NOT_STARTED           = 0x00000001,
} DPHY_LOAD_BS_COUNT_START;

/*
 * DPHY_CRC_EN enum
 */

typedef enum DPHY_CRC_EN {
DPHY_CRC_DISABLED                        = 0x00000000,
DPHY_CRC_ENABLED                         = 0x00000001,
} DPHY_CRC_EN;

/*
 * DPHY_CRC_CONT_EN enum
 */

typedef enum DPHY_CRC_CONT_EN {
DPHY_CRC_ONE_SHOT                        = 0x00000000,
DPHY_CRC_CONTINUOUS                      = 0x00000001,
} DPHY_CRC_CONT_EN;

/*
 * DPHY_CRC_FIELD enum
 */

typedef enum DPHY_CRC_FIELD {
DPHY_CRC_START_FROM_TOP_FIELD            = 0x00000000,
DPHY_CRC_START_FROM_BOTTOM_FIELD         = 0x00000001,
} DPHY_CRC_FIELD;

/*
 * DPHY_CRC_SEL enum
 */

typedef enum DPHY_CRC_SEL {
DPHY_CRC_LANE0_SELECTED                  = 0x00000000,
DPHY_CRC_LANE1_SELECTED                  = 0x00000001,
DPHY_CRC_LANE2_SELECTED                  = 0x00000002,
DPHY_CRC_LANE3_SELECTED                  = 0x00000003,
} DPHY_CRC_SEL;

/*
 * DPHY_RX_FAST_TRAINING_CAPABLE enum
 */

typedef enum DPHY_RX_FAST_TRAINING_CAPABLE {
DPHY_FAST_TRAINING_NOT_CAPABLE_0         = 0x00000000,
DPHY_FAST_TRAINING_CAPABLE               = 0x00000001,
} DPHY_RX_FAST_TRAINING_CAPABLE;

/*
 * DP_SEC_COLLISION_ACK enum
 */

typedef enum DP_SEC_COLLISION_ACK {
DP_SEC_COLLISION_ACK_NO_EFFECT           = 0x00000000,
DP_SEC_COLLISION_ACK_CLR_FLAG            = 0x00000001,
} DP_SEC_COLLISION_ACK;

/*
 * DP_SEC_AUDIO_MUTE enum
 */

typedef enum DP_SEC_AUDIO_MUTE {
DP_SEC_AUDIO_MUTE_HW_CTRL                = 0x00000000,
DP_SEC_AUDIO_MUTE_SW_CTRL                = 0x00000001,
} DP_SEC_AUDIO_MUTE;

/*
 * DP_SEC_TIMESTAMP_MODE enum
 */

typedef enum DP_SEC_TIMESTAMP_MODE {
DP_SEC_TIMESTAMP_PROGRAMMABLE_MODE       = 0x00000000,
DP_SEC_TIMESTAMP_AUTO_CALC_MODE          = 0x00000001,
} DP_SEC_TIMESTAMP_MODE;

/*
 * DP_SEC_ASP_PRIORITY enum
 */

typedef enum DP_SEC_ASP_PRIORITY {
DP_SEC_ASP_LOW_PRIORITY                  = 0x00000000,
DP_SEC_ASP_HIGH_PRIORITY                 = 0x00000001,
} DP_SEC_ASP_PRIORITY;

/*
 * DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE enum
 */

typedef enum DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE {
DP_SEC_ASP_CHANNEL_COUNT_FROM_AZ         = 0x00000000,
DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE_ENABLED  = 0x00000001,
} DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE;

/*
 * DP_MSE_SAT_UPDATE_ACT enum
 */

typedef enum DP_MSE_SAT_UPDATE_ACT {
DP_MSE_SAT_UPDATE_NO_ACTION              = 0x00000000,
DP_MSE_SAT_UPDATE_WITH_TRIGGER           = 0x00000001,
DP_MSE_SAT_UPDATE_WITHOUT_TRIGGER        = 0x00000002,
} DP_MSE_SAT_UPDATE_ACT;

/*
 * DP_MSE_LINK_LINE enum
 */

typedef enum DP_MSE_LINK_LINE {
DP_MSE_LINK_LINE_32_MTP_LONG             = 0x00000000,
DP_MSE_LINK_LINE_64_MTP_LONG             = 0x00000001,
DP_MSE_LINK_LINE_128_MTP_LONG            = 0x00000002,
DP_MSE_LINK_LINE_256_MTP_LONG            = 0x00000003,
} DP_MSE_LINK_LINE;

/*
 * DP_MSE_BLANK_CODE enum
 */

typedef enum DP_MSE_BLANK_CODE {
DP_MSE_BLANK_CODE_SF_FILLED              = 0x00000000,
DP_MSE_BLANK_CODE_ZERO_FILLED            = 0x00000001,
} DP_MSE_BLANK_CODE;

/*
 * DP_MSE_TIMESTAMP_MODE enum
 */

typedef enum DP_MSE_TIMESTAMP_MODE {
DP_MSE_TIMESTAMP_CALC_BASED_ON_LINK_RATE  = 0x00000000,
DP_MSE_TIMESTAMP_CALC_BASED_ON_VC_RATE   = 0x00000001,
} DP_MSE_TIMESTAMP_MODE;

/*
 * DP_MSE_ZERO_ENCODER enum
 */

typedef enum DP_MSE_ZERO_ENCODER {
DP_MSE_NOT_ZERO_FE_ENCODER               = 0x00000000,
DP_MSE_ZERO_FE_ENCODER                   = 0x00000001,
} DP_MSE_ZERO_ENCODER;

/*
 * DP_MSE_OUTPUT_DPDBG_DATA enum
 */

typedef enum DP_MSE_OUTPUT_DPDBG_DATA {
DP_MSE_OUTPUT_DPDBG_DATA_DIS             = 0x00000000,
DP_MSE_OUTPUT_DPDBG_DATA_EN              = 0x00000001,
} DP_MSE_OUTPUT_DPDBG_DATA;

/*
 * DP_DPHY_HBR2_PATTERN_CONTROL_MODE enum
 */

typedef enum DP_DPHY_HBR2_PATTERN_CONTROL_MODE {
DP_DPHY_HBR2_PASS_THROUGH                = 0x00000000,
DP_DPHY_HBR2_PATTERN_1                   = 0x00000001,
DP_DPHY_HBR2_PATTERN_2_NEG               = 0x00000002,
DP_DPHY_HBR2_PATTERN_3                   = 0x00000003,
DP_DPHY_HBR2_PATTERN_2_POS               = 0x00000006,
} DP_DPHY_HBR2_PATTERN_CONTROL_MODE;

/*
 * DPHY_CRC_MST_PHASE_ERROR_ACK enum
 */

typedef enum DPHY_CRC_MST_PHASE_ERROR_ACK {
DPHY_CRC_MST_PHASE_ERROR_NO_ACK          = 0x00000000,
DPHY_CRC_MST_PHASE_ERROR_ACKED           = 0x00000001,
} DPHY_CRC_MST_PHASE_ERROR_ACK;

/*
 * DPHY_SW_FAST_TRAINING_START enum
 */

typedef enum DPHY_SW_FAST_TRAINING_START {
DPHY_SW_FAST_TRAINING_NOT_STARTED        = 0x00000000,
DPHY_SW_FAST_TRAINING_STARTED            = 0x00000001,
} DPHY_SW_FAST_TRAINING_START;

/*
 * DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN enum
 */

typedef enum DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN {
DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_DISABLED  = 0x00000000,
DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_ENABLED  = 0x00000001,
} DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN;

/*
 * DP_DPHY_FAST_TRAINING_COMPLETE_MASK enum
 */

typedef enum DP_DPHY_FAST_TRAINING_COMPLETE_MASK {
DP_DPHY_FAST_TRAINING_COMPLETE_MASKED    = 0x00000000,
DP_DPHY_FAST_TRAINING_COMPLETE_NOT_MASKED  = 0x00000001,
} DP_DPHY_FAST_TRAINING_COMPLETE_MASK;

/*
 * DP_DPHY_FAST_TRAINING_COMPLETE_ACK enum
 */

typedef enum DP_DPHY_FAST_TRAINING_COMPLETE_ACK {
DP_DPHY_FAST_TRAINING_COMPLETE_NOT_ACKED  = 0x00000000,
DP_DPHY_FAST_TRAINING_COMPLETE_ACKED     = 0x00000001,
} DP_DPHY_FAST_TRAINING_COMPLETE_ACK;

/*
 * DP_MSA_V_TIMING_OVERRIDE_EN enum
 */

typedef enum DP_MSA_V_TIMING_OVERRIDE_EN {
MSA_V_TIMING_OVERRIDE_DISABLED           = 0x00000000,
MSA_V_TIMING_OVERRIDE_ENABLED            = 0x00000001,
} DP_MSA_V_TIMING_OVERRIDE_EN;

/*
 * DP_SEC_GSP0_PRIORITY enum
 */

typedef enum DP_SEC_GSP0_PRIORITY {
SEC_GSP0_PRIORITY_LOW                    = 0x00000000,
SEC_GSP0_PRIORITY_HIGH                   = 0x00000001,
} DP_SEC_GSP0_PRIORITY;

/*
 * DP_SEC_GSP0_SEND enum
 */

typedef enum DP_SEC_GSP0_SEND {
NOT_SENT                                 = 0x00000000,
FORCE_SENT                               = 0x00000001,
} DP_SEC_GSP0_SEND;

/*******************************************************
 * COL_MAN Enums
 *******************************************************/

/*
 * COL_MAN_UPDATE_LOCK enum
 */

typedef enum COL_MAN_UPDATE_LOCK {
COL_MAN_UPDATE_UNLOCKED                  = 0x00000000,
COL_MAN_UPDATE_LOCKED                    = 0x00000001,
} COL_MAN_UPDATE_LOCK;

/*
 * COL_MAN_DISABLE_MULTIPLE_UPDATE enum
 */

typedef enum COL_MAN_DISABLE_MULTIPLE_UPDATE {
COL_MAN_MULTIPLE_UPDATE                  = 0x00000000,
COL_MAN_MULTIPLE_UPDAT_EDISABLE          = 0x00000001,
} COL_MAN_DISABLE_MULTIPLE_UPDATE;

/*
 * COL_MAN_INPUTCSC_MODE enum
 */

typedef enum COL_MAN_INPUTCSC_MODE {
INPUTCSC_MODE_BYPASS                     = 0x00000000,
INPUTCSC_MODE_A                          = 0x00000001,
INPUTCSC_MODE_B                          = 0x00000002,
INPUTCSC_MODE_UNITY                      = 0x00000003,
} COL_MAN_INPUTCSC_MODE;

/*
 * COL_MAN_INPUTCSC_TYPE enum
 */

typedef enum COL_MAN_INPUTCSC_TYPE {
INPUTCSC_TYPE_12_0                       = 0x00000000,
INPUTCSC_TYPE_10_2                       = 0x00000001,
INPUTCSC_TYPE_8_4                        = 0x00000002,
} COL_MAN_INPUTCSC_TYPE;

/*
 * COL_MAN_INPUTCSC_CONVERT enum
 */

typedef enum COL_MAN_INPUTCSC_CONVERT {
INPUTCSC_ROUND                           = 0x00000000,
INPUTCSC_TRUNCATE                        = 0x00000001,
} COL_MAN_INPUTCSC_CONVERT;

/*
 * COL_MAN_PRESCALE_MODE enum
 */

typedef enum COL_MAN_PRESCALE_MODE {
PRESCALE_MODE_BYPASS                     = 0x00000000,
PRESCALE_MODE_PROGRAM                    = 0x00000001,
PRESCALE_MODE_UNITY                      = 0x00000002,
} COL_MAN_PRESCALE_MODE;

/*
 * COL_MAN_INPUT_GAMMA_MODE enum
 */

typedef enum COL_MAN_INPUT_GAMMA_MODE {
INGAMMA_MODE_BYPASS                      = 0x00000000,
INGAMMA_MODE_FIX                         = 0x00000001,
INGAMMA_MODE_FLOAT                       = 0x00000002,
} COL_MAN_INPUT_GAMMA_MODE;

/*
 * COL_MAN_OUTPUT_CSC_MODE enum
 */

typedef enum COL_MAN_OUTPUT_CSC_MODE {
COL_MAN_OUTPUT_CSC_BYPASS                = 0x00000000,
COL_MAN_OUTPUT_CSC_RGB                   = 0x00000001,
COL_MAN_OUTPUT_CSC_YCrCb601              = 0x00000002,
COL_MAN_OUTPUT_CSC_YCrCb709              = 0x00000003,
COL_MAN_OUTPUT_CSC_A                     = 0x00000004,
COL_MAN_OUTPUT_CSC_B                     = 0x00000005,
COL_MAN_OUTPUT_CSC_UNITY                 = 0x00000006,
} COL_MAN_OUTPUT_CSC_MODE;

/*
 * COL_MAN_DENORM_CLAMP_CONTROL enum
 */

typedef enum COL_MAN_DENORM_CLAMP_CONTROL {
DENORM_CLAMP_MODE_UNITY                  = 0x00000000,
DENORM_CLAMP_MODE_8                      = 0x00000001,
DENORM_CLAMP_MODE_10                     = 0x00000002,
DENORM_CLAMP_MODE_12                     = 0x00000003,
} COL_MAN_DENORM_CLAMP_CONTROL;

/*
 * COL_MAN_REGAMMA_MODE_CONTROL enum
 */

typedef enum COL_MAN_REGAMMA_MODE_CONTROL {
COL_MAN_REGAMMA_MODE_BYPASS              = 0x00000000,
COL_MAN_REGAMMA_MODE_ROM_A               = 0x00000001,
COL_MAN_REGAMMA_MODE_ROM_B               = 0x00000002,
COL_MAN_REGAMMA_MODE_A                   = 0x00000003,
COL_MAN_REGAMMA_MODE_B                   = 0x00000004,
} COL_MAN_REGAMMA_MODE_CONTROL;

/*
 * COL_MAN_GLOBAL_PASSTHROUGH_ENABLE enum
 */

typedef enum COL_MAN_GLOBAL_PASSTHROUGH_ENABLE {
CM_GLOBAL_PASSTHROUGH_DISBALE            = 0x00000000,
CM_GLOBAL_PASSTHROUGH_ENABLE             = 0x00000001,
} COL_MAN_GLOBAL_PASSTHROUGH_ENABLE;

/*
 * COL_MAN_DEGAMMA_MODE enum
 */

typedef enum COL_MAN_DEGAMMA_MODE {
DEGAMMA_MODE_BYPASS                      = 0x00000000,
DEGAMMA_MODE_A                           = 0x00000001,
DEGAMMA_MODE_B                           = 0x00000002,
} COL_MAN_DEGAMMA_MODE;

/*
 * COL_MAN_GAMUT_REMAP_MODE enum
 */

typedef enum COL_MAN_GAMUT_REMAP_MODE {
GAMUT_REMAP_MODE_BYPASS                  = 0x00000000,
GAMUT_REMAP_MODE_1                       = 0x00000001,
GAMUT_REMAP_MODE_2                       = 0x00000002,
GAMUT_REMAP_MODE_3                       = 0x00000003,
} COL_MAN_GAMUT_REMAP_MODE;

/*******************************************************
 * MCIF_WB Enums
 *******************************************************/

/*******************************************************
 * DP_AUX Enums
 *******************************************************/

/*
 * DP_AUX_CONTROL_HPD_SEL enum
 */

typedef enum DP_AUX_CONTROL_HPD_SEL {
DP_AUX_CONTROL_HPD1_SELECTED             = 0x00000000,
DP_AUX_CONTROL_HPD2_SELECTED             = 0x00000001,
DP_AUX_CONTROL_HPD3_SELECTED             = 0x00000002,
DP_AUX_CONTROL_HPD4_SELECTED             = 0x00000003,
DP_AUX_CONTROL_HPD5_SELECTED             = 0x00000004,
DP_AUX_CONTROL_HPD6_SELECTED             = 0x00000005,
} DP_AUX_CONTROL_HPD_SEL;

/*
 * DP_AUX_CONTROL_TEST_MODE enum
 */

typedef enum DP_AUX_CONTROL_TEST_MODE {
DP_AUX_CONTROL_TEST_MODE_DISABLE         = 0x00000000,
DP_AUX_CONTROL_TEST_MODE_ENABLE          = 0x00000001,
} DP_AUX_CONTROL_TEST_MODE;

/*
 * DP_AUX_SW_CONTROL_SW_GO enum
 */

typedef enum DP_AUX_SW_CONTROL_SW_GO {
DP_AUX_SW_CONTROL_SW__NOT_GO             = 0x00000000,
DP_AUX_SW_CONTROL_SW__GO                 = 0x00000001,
} DP_AUX_SW_CONTROL_SW_GO;

/*
 * DP_AUX_SW_CONTROL_LS_READ_TRIG enum
 */

typedef enum DP_AUX_SW_CONTROL_LS_READ_TRIG {
DP_AUX_SW_CONTROL_LS_READ__NOT_TRIG      = 0x00000000,
DP_AUX_SW_CONTROL_LS_READ__TRIG          = 0x00000001,
} DP_AUX_SW_CONTROL_LS_READ_TRIG;

/*
 * DP_AUX_ARB_CONTROL_ARB_PRIORITY enum
 */

typedef enum DP_AUX_ARB_CONTROL_ARB_PRIORITY {
DP_AUX_ARB_CONTROL_ARB_PRIORITY__GTC_LS_SW  = 0x00000000,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__LS_GTC_SW  = 0x00000001,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__SW_LS_GTC  = 0x00000002,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__SW_GTC_LS  = 0x00000003,
} DP_AUX_ARB_CONTROL_ARB_PRIORITY;

/*
 * DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ enum
 */

typedef enum DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ {
DP_AUX_ARB_CONTROL__NOT_USE_AUX_REG_REQ  = 0x00000000,
DP_AUX_ARB_CONTROL__USE_AUX_REG_REQ      = 0x00000001,
} DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ;

/*
 * DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG enum
 */

typedef enum DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG {
DP_AUX_ARB_CONTROL__DONE_NOT_USING_AUX_REG = 0x00000000,
DP_AUX_ARB_CONTROL__DONE_USING_AUX_REG   = 0x00000001,
} DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG;

/*
 * DP_AUX_INT_ACK enum
 */

typedef enum DP_AUX_INT_ACK {
DP_AUX_INT__NOT_ACK                      = 0x00000000,
DP_AUX_INT__ACK                          = 0x00000001,
} DP_AUX_INT_ACK;

/*
 * DP_AUX_LS_UPDATE_ACK enum
 */

typedef enum DP_AUX_LS_UPDATE_ACK {
DP_AUX_INT_LS_UPDATE_NOT_ACK             = 0x00000000,
DP_AUX_INT_LS_UPDATE_ACK                 = 0x00000001,
} DP_AUX_LS_UPDATE_ACK;

/*
 * DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL enum
 */

typedef enum DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL {
DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL__DIVIDED_SYM_CLK  = 0x00000000,
DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL__FROM_DCCG_MICROSECOND_REF  = 0x00000001,
} DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL;

/*
 * DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE enum
 */

typedef enum DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE {
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__1MHZ = 0x00000000,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__2MHZ = 0x00000001,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__4MHZ = 0x00000002,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__8MHZ = 0x00000003,
} DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE;

/*
 * DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN enum
 */

typedef enum DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN {
DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN__0US = 0x00000000,
DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN__8US = 0x00000001,
DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN__16US = 0x00000002,
DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN__24US = 0x00000003,
DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN__32US = 0x00000004,
DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN__40US = 0x00000005,
DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN__48US = 0x00000006,
DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN__56US = 0x00000007,
} DP_AUX_DPHY_TX_CONTROL_PRECHARGE_LEN;

/*
 * DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY enum
 */

typedef enum DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY {
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__0 = 0x00000000,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__16US = 0x00000001,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__32US = 0x00000002,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__64US = 0x00000003,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__128US = 0x00000004,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__256US = 0x00000005,
} DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY;

/*
 * DP_AUX_DPHY_RX_CONTROL_START_WINDOW enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_START_WINDOW {
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO2_PERIOD  = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO4_PERIOD  = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO8_PERIOD  = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO16_PERIOD  = 0x00000003,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO32_PERIOD  = 0x00000004,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO64_PERIOD  = 0x00000005,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO128_PERIOD  = 0x00000006,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO256_PERIOD  = 0x00000007,
} DP_AUX_DPHY_RX_CONTROL_START_WINDOW;

/*
 * DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW {
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO2_PERIOD  = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO4_PERIOD  = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO8_PERIOD  = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO16_PERIOD  = 0x00000003,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO32_PERIOD  = 0x00000004,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO64_PERIOD  = 0x00000005,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO128_PERIOD  = 0x00000006,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO256_PERIOD  = 0x00000007,
} DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW;

/*
 * DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN {
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__6_EDGES = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__10_EDGES = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__18_EDGES = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__RESERVED = 0x00000003,
} DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_PHASE_DETECT = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_PHASE_DETECT = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_START = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_START = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_STOP = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_STOP = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP;

/*
 * DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN {
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__2_HALF_SYMBOLS = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__4_HALF_SYMBOLS = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__6_HALF_SYMBOLS = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__8_HALF_SYMBOLS = 0x00000003,
} DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN;

/*
 * DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN {
DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN_450US = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN_500US = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN_550US = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN_600US = 0x00000003,
DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN_650US = 0x00000004,
DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN_700US = 0x00000005,
DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN_750US = 0x00000006,
DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN_800US = 0x00000007,
} DP_AUX_DPHY_RX_CONTROL_TIMEOUT_LEN;

/*
 * DP_AUX_DPHY_RX_DETECTION_THRESHOLD enum
 */

typedef enum DP_AUX_DPHY_RX_DETECTION_THRESHOLD {
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__1to2  = 0x00000000,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__3to4  = 0x00000001,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__7to8  = 0x00000002,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__15to16  = 0x00000003,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__31to32  = 0x00000004,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__63to64  = 0x00000005,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__127to128  = 0x00000006,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__255to256  = 0x00000007,
} DP_AUX_DPHY_RX_DETECTION_THRESHOLD;

/*
 * DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ {
DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_ALLOW_REQ_FROM_OTHER_AUX  = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ_FROM_OTHER_AUX  = 0x00000001,
} DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ;

/*
 * DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW {
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__300US = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__400US = 0x00000001,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__500US = 0x00000002,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__600US = 0x00000003,
} DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW;

/*
 * DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT {
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__4_ATTAMPS = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__8_ATTAMPS = 0x00000001,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__16_ATTAMPS = 0x00000002,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__RESERVED = 0x00000003,
} DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT;

/*
 * DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN enum
 */

typedef enum DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN {
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__0  = 0x00000000,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__64  = 0x00000001,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__128  = 0x00000002,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__256  = 0x00000003,
} DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN;

/*
 * DP_AUX_ERR_OCCURRED_ACK enum
 */

typedef enum DP_AUX_ERR_OCCURRED_ACK {
DP_AUX_ERR_OCCURRED__NOT_ACK             = 0x00000000,
DP_AUX_ERR_OCCURRED__ACK                 = 0x00000001,
} DP_AUX_ERR_OCCURRED_ACK;

/*
 * DP_AUX_POTENTIAL_ERR_REACHED_ACK enum
 */

typedef enum DP_AUX_POTENTIAL_ERR_REACHED_ACK {
DP_AUX_POTENTIAL_ERR_REACHED__NOT_ACK    = 0x00000000,
DP_AUX_POTENTIAL_ERR_REACHED__ACK        = 0x00000001,
} DP_AUX_POTENTIAL_ERR_REACHED_ACK;

/*
 * DP_AUX_DEFINITE_ERR_REACHED_ACK enum
 */

typedef enum DP_AUX_DEFINITE_ERR_REACHED_ACK {
ALPHA_DP_AUX_DEFINITE_ERR_REACHED_NOT_ACK = 0x00000000,
ALPHA_DP_AUX_DEFINITE_ERR_REACHED_ACK    = 0x00000001,
} DP_AUX_DEFINITE_ERR_REACHED_ACK;

/*
 * DP_AUX_RESET enum
 */

typedef enum DP_AUX_RESET {
DP_AUX_RESET_DEASSERTED                  = 0x00000000,
DP_AUX_RESET_ASSERTED                    = 0x00000001,
} DP_AUX_RESET;

/*
 * DP_AUX_RESET_DONE enum
 */

typedef enum DP_AUX_RESET_DONE {
DP_AUX_RESET_SEQUENCE_NOT_DONE           = 0x00000000,
DP_AUX_RESET_SEQUENCE_DONE               = 0x00000001,
} DP_AUX_RESET_DONE;

/*******************************************************
 * DSI Enums
 *******************************************************/

/*
 * DSI_COMMAND_MODE_SRC_FORMAT enum
 */

typedef enum DSI_COMMAND_MODE_SRC_FORMAT {
DSI_COMMAND_SRC_FORMAT_RGB8BIT           = 0x00000002,
DSI_COMMAND_SRC_FORMAT_RGB332            = 0x00000003,
DSI_COMMAND_SRC_FORMAT_RGB444            = 0x00000004,
DSI_COMMAND_SRC_FORMAT_RGB555            = 0x00000005,
DSI_COMMAND_SRC_FORMAT_RGB565            = 0x00000006,
DSI_COMMAND_SRC_FORMAT_RGB888            = 0x00000008,
} DSI_COMMAND_MODE_SRC_FORMAT;

/*
 * DSI_COMMAND_MODE_DST_FORMAT enum
 */

typedef enum DSI_COMMAND_MODE_DST_FORMAT {
DSI_COMMAND_DST_FORMAT_RGB111            = 0x00000000,
DSI_COMMAND_DST_FORMAT_RGB332            = 0x00000003,
DSI_COMMAND_DST_FORMAT_RGB444            = 0x00000004,
DSI_COMMAND_DST_FORMAT_RGB565            = 0x00000006,
DSI_COMMAND_DST_FORMAT_RGB666            = 0x00000007,
DSI_COMMAND_DST_FORMAT_RGB888            = 0x00000008,
} DSI_COMMAND_MODE_DST_FORMAT;

/*
 * DSI_FLAG_CLR enum
 */

typedef enum DSI_FLAG_CLR {
DSI_FLAG_NO_CLEAR                        = 0x00000000,
DSI_FLAG_CLEAR                           = 0x00000001,
} DSI_FLAG_CLR;

/*
 * DSI_BIT_SWAP enum
 */

typedef enum DSI_BIT_SWAP {
DSI_BIT_SWAP_DISABLE                     = 0x00000000,
DSI_BIT_SWAP_ENABLE                      = 0x00000001,
} DSI_BIT_SWAP;

/*
 * DSI_CLK_GATING enum
 */

typedef enum DSI_CLK_GATING {
DSI_CLK_GATING_ENABLE                    = 0x00000000,
DSI_CLK_GATING_DISABLE                   = 0x00000001,
} DSI_CLK_GATING;

/*
 * DSI_LANE_ULPS_REQUEST enum
 */

typedef enum DSI_LANE_ULPS_REQUEST {
DSI_LANE_ULPS_REQUEST_DEASSERT           = 0x00000000,
DSI_LANE_ULPS_REQUEST_ASSERT             = 0x00000001,
} DSI_LANE_ULPS_REQUEST;

/*
 * DSI_LANE_ULPS_EXIT enum
 */

typedef enum DSI_LANE_ULPS_EXIT {
DSI_LANE_ULPS_EXIT_DEASSERT              = 0x00000000,
DSI_LANE_ULPS_EXIT_ASSERT                = 0x00000001,
} DSI_LANE_ULPS_EXIT;

/*
 * DSI_LANE_FORCE_TX_STOP enum
 */

typedef enum DSI_LANE_FORCE_TX_STOP {
DSI_LANE_FORCE_TX_STOP_DEASSERT          = 0x00000000,
DSI_LANE_FORCE_TX_STOP_ASSERT            = 0x00000001,
} DSI_LANE_FORCE_TX_STOP;

/*
 * DSI_CLOCK_LANE_HS_FORCE_REQUEST enum
 */

typedef enum DSI_CLOCK_LANE_HS_FORCE_REQUEST {
DSI_CLOCK_LANE_HS_FORCE_REQUEST_DEASSERT  = 0x00000000,
DSI_CLOCK_LANE_HS_FORCE_REQUEST_ASSERT   = 0x00000001,
} DSI_CLOCK_LANE_HS_FORCE_REQUEST;

/*
 * DSI_CONTROLLER_EN enum
 */

typedef enum DSI_CONTROLLER_EN {
DSI_CONTROLLER_DISABLE                   = 0x00000000,
DSI_CONTROLLER_ENABLE                    = 0x00000001,
} DSI_CONTROLLER_EN;

/*
 * DSI_VIDEO_MODE_EN enum
 */

typedef enum DSI_VIDEO_MODE_EN {
DSI_VIDEO_MODE_DISABLE                   = 0x00000000,
DSI_VIDEO_MODE_ENABLE                    = 0x00000001,
} DSI_VIDEO_MODE_EN;

/*
 * DSI_CMD_MODE_EN enum
 */

typedef enum DSI_CMD_MODE_EN {
DSI_CMD_MODE_DISABLE                     = 0x00000000,
DSI_CMD_MODE_ENABLE                      = 0x00000001,
} DSI_CMD_MODE_EN;

/*
 * DSI_DATA_LANE0_EN enum
 */

typedef enum DSI_DATA_LANE0_EN {
DSI_DATA_LANE0_DISABLE                   = 0x00000000,
DSI_DATA_LANE0_ENABLE                    = 0x00000001,
} DSI_DATA_LANE0_EN;

/*
 * DSI_DATA_LANE1_EN enum
 */

typedef enum DSI_DATA_LANE1_EN {
DSI_DATA_LANE1_DISABLE                   = 0x00000000,
DSI_DATA_LANE1_ENABLE                    = 0x00000001,
} DSI_DATA_LANE1_EN;

/*
 * DSI_DATA_LANE2_EN enum
 */

typedef enum DSI_DATA_LANE2_EN {
DSI_DATA_LANE2_DISABLE                   = 0x00000000,
DSI_DATA_LANE2_ENABLE                    = 0x00000001,
} DSI_DATA_LANE2_EN;

/*
 * DSI_DATA_LANE3_EN enum
 */

typedef enum DSI_DATA_LANE3_EN {
DSI_DATA_LANE3_DISABLE                   = 0x00000000,
DSI_DATA_LANE3_ENABLE                    = 0x00000001,
} DSI_DATA_LANE3_EN;

/*
 * DSI_CLOCK_LANE_EN enum
 */

typedef enum DSI_CLOCK_LANE_EN {
DSI_CLOCK_LANE_DISABLE                   = 0x00000000,
DSI_CLOCK_LANE_ENABLE                    = 0x00000001,
} DSI_CLOCK_LANE_EN;

/*
 * DSI_PHY_DATA_LANE0_EN enum
 */

typedef enum DSI_PHY_DATA_LANE0_EN {
DSI_PHY_DATA_LANE0_DISABLE               = 0x00000000,
DSI_PHY_DATA_LANE0_ENABLE                = 0x00000001,
} DSI_PHY_DATA_LANE0_EN;

/*
 * DSI_PHY_DATA_LANE1_EN enum
 */

typedef enum DSI_PHY_DATA_LANE1_EN {
DSI_PHY_DATA_LANE1_DISABLE               = 0x00000000,
DSI_PHY_DATA_LANE1_ENABLE                = 0x00000001,
} DSI_PHY_DATA_LANE1_EN;

/*
 * DSI_PHY_DATA_LANE2_EN enum
 */

typedef enum DSI_PHY_DATA_LANE2_EN {
DSI_PHY_DATA_LANE2_DISABLE               = 0x00000000,
DSI_PHY_DATA_LANE2_ENABLE                = 0x00000001,
} DSI_PHY_DATA_LANE2_EN;

/*
 * DSI_PHY_DATA_LANE3_EN enum
 */

typedef enum DSI_PHY_DATA_LANE3_EN {
DSI_PHY_DATA_LANE3_DISABLE               = 0x00000000,
DSI_PHY_DATA_LANE3_ENABLE                = 0x00000001,
} DSI_PHY_DATA_LANE3_EN;

/*
 * DSI_RESET_DISPCLK enum
 */

typedef enum DSI_RESET_DISPCLK {
DSI_NO_RESET_ON_DISPCLK_DOMAIN_LOGIC     = 0x00000000,
DSI_RESET_ON_DISPCLK_DOMAIN_LOGIC        = 0x00000001,
} DSI_RESET_DISPCLK;

/*
 * DSI_RESET_DSICLK enum
 */

typedef enum DSI_RESET_DSICLK {
DSI_NO_RESET_ON_DSICLK_DOMAIN_LOGIC      = 0x00000000,
DSI_RESET_ON_DSICLK_DOMAIN_LOGIC         = 0x00000001,
} DSI_RESET_DSICLK;

/*
 * DSI_RESET_BYTECLK enum
 */

typedef enum DSI_RESET_BYTECLK {
DSI_NO_RESET_ON_BYTECLK_DOMAIN_LOGIC     = 0x00000000,
DSI_RESET_ON_BYTECLK_DOMAIN_LOGIC        = 0x00000001,
} DSI_RESET_BYTECLK;

/*
 * DSI_RESET_ESCCLK enum
 */

typedef enum DSI_RESET_ESCCLK {
DSI_NO_RESET_ON_ESCCLK_DOMAIN_LOGIC      = 0x00000000,
DSI_RESET_ON_ESCCLK_DOMAIN_LOGIC         = 0x00000001,
} DSI_RESET_ESCCLK;

/*
 * DSI_CRTC_SEL enum
 */

typedef enum DSI_CRTC_SEL {
DSI_GET_PIXEL_STREAM_FROM_FMT0           = 0x00000000,
DSI_GET_PIXEL_STREAM_FROM_FMT1           = 0x00000001,
DSI_GET_PIXEL_STREAM_FROM_FMT2           = 0x00000002,
DSI_GET_PIXEL_STREAM_FROM_FMT3           = 0x00000003,
DSI_GET_PIXEL_STREAM_FROM_FMT4           = 0x00000004,
DSI_GET_PIXEL_STREAM_FROM_FMT5           = 0x00000005,
} DSI_CRTC_SEL;

/*
 * DSI_PACKET_BYTE_MSB_LSB_FLIP enum
 */

typedef enum DSI_PACKET_BYTE_MSB_LSB_FLIP {
DSI_PACKET_BYTE_MSB_LSB_FLIP_NO_SWAP     = 0x00000000,
DSI_PACKET_BYTE_MSB_LSB_FLIP_SWAP        = 0x00000001,
} DSI_PACKET_BYTE_MSB_LSB_FLIP;

/*
 * DSI_VIDEO_MODE_DST_FORMAT enum
 */

typedef enum DSI_VIDEO_MODE_DST_FORMAT {
DSI_VIDEO_DST_FORMAT_RGB565              = 0x00000000,
DSI_VIDEO_DST_FORMAT_RGB666_PACKED       = 0x00000001,
DSI_VIDEO_DST_FORMAT_RGB666_LOOSELY_PACKED = 0x00000002,
DSI_VIDEO_DST_FORMAT_RGB888              = 0x00000003,
} DSI_VIDEO_MODE_DST_FORMAT;

/*
 * DSI_VIDEO_TRAFFIC_MODE enum
 */

typedef enum DSI_VIDEO_TRAFFIC_MODE {
DSI_TRAFFIC_MODE_SYNC_PULSES             = 0x00000000,
DSI_TRAFFIC_MODE_SYNC_EVENTS             = 0x00000001,
DSI_TRAFFIC_MODE_BURST                   = 0x00000002,
DSI_TRAFFIC_MODE_RESERVED                = 0x00000003,
} DSI_VIDEO_TRAFFIC_MODE;

/*
 * DSI_VIDEO_BLLP_PWR_MODE enum
 */

typedef enum DSI_VIDEO_BLLP_PWR_MODE {
DSI_VIDEO_BLLP_PWR_MODE_HS               = 0x00000000,
DSI_VIDEO_BLLP_PWR_MODE_LP               = 0x00000001,
} DSI_VIDEO_BLLP_PWR_MODE;

/*
 * DSI_VIDEO_EOF_BLLP_PWR_MODE enum
 */

typedef enum DSI_VIDEO_EOF_BLLP_PWR_MODE {
DSI_VIDEO_EOF_BLLP_PWR_MODE_HS           = 0x00000000,
DSI_VIDEO_EOF_BLLP_PWR_MODE_LP           = 0x00000001,
} DSI_VIDEO_EOF_BLLP_PWR_MODE;

/*
 * DSI_VIDEO_PWR_MODE enum
 */

typedef enum DSI_VIDEO_PWR_MODE {
DSI_VIDEO_PWR_MODE_HS                    = 0x00000000,
DSI_VIDEO_PWR_MODE_LP                    = 0x00000001,
} DSI_VIDEO_PWR_MODE;

/*
 * DSI_VIDEO_PULSE_MODE_OPT enum
 */

typedef enum DSI_VIDEO_PULSE_MODE_OPT {
PULSE_MODE_OPT_NO_HSA                    = 0x00000000,
PULSE_MODE_OPT_SEND                      = 0x00000001,
} DSI_VIDEO_PULSE_MODE_OPT;

/*
 * DSI_RGB_SWAP enum
 */

typedef enum DSI_RGB_SWAP {
DSI_SWAP_RGB                             = 0x00000000,
DSI_SWAP_RBG                             = 0x00000001,
DSI_SWAP_BGR                             = 0x00000002,
DSI_SWAP_BRG                             = 0x00000003,
DSI_SWAP_GRB                             = 0x00000004,
DSI_SWAP_GBR                             = 0x00000005,
} DSI_RGB_SWAP;

/*
 * DSI_CMD_PACKET_TYPE enum
 */

typedef enum DSI_CMD_PACKET_TYPE {
DSI_CMD_PACKET_TYPE_SHORT                = 0x00000000,
DSI_CMD_PACKET_TYPE_LONG                 = 0x00000001,
} DSI_CMD_PACKET_TYPE;

/*
 * DSI_CMD_PWR_MODE enum
 */

typedef enum DSI_CMD_PWR_MODE {
DSI_CMD_PWR_MODE_HS                      = 0x00000000,
DSI_CMD_PWR_MODE_LP                      = 0x00000001,
} DSI_CMD_PWR_MODE;

/*
 * DSI_CMD_EMBEDDED_MODE enum
 */

typedef enum DSI_CMD_EMBEDDED_MODE {
CMD_EMBEDDED_MODE_DISABLE                = 0x00000000,
CMD_EMBEDDED_MODE_ENABLE                 = 0x00000001,
} DSI_CMD_EMBEDDED_MODE;

/*
 * DSI_CMD_ORDER enum
 */

typedef enum DSI_CMD_ORDER {
DSI_CMD_ORDER_COMMAND_FIRST              = 0x00000000,
DSI_CMD_ORDER_DATA_FIRST                 = 0x00000001,
} DSI_CMD_ORDER;

/*
 * DSI_DATA_BUFFER_ID enum
 */

typedef enum DSI_DATA_BUFFER_ID {
DSI_DATA_BUFFER_OFFSET0                  = 0x00000000,
DSI_DATA_BUFFER_OFFSET1                  = 0x00000001,
} DSI_DATA_BUFFER_ID;

/*
 * DSI_DWORD_BYTE_SWAP enum
 */

typedef enum DSI_DWORD_BYTE_SWAP {
DWORD_BYTE_SWAP_NO_SWAP                  = 0x00000000,
DWORD_BYTE_SWAP_BYTE_SWAP                = 0x00000001,
DWORD_BYTE_SWAP_WORD_SWAP                = 0x00000002,
DWORD_BYTE_SWAP_BOTH_SWAP                = 0x00000003,
} DSI_DWORD_BYTE_SWAP;

/*
 * DSI_INSERT_DCS_COMMAND enum
 */

typedef enum DSI_INSERT_DCS_COMMAND {
DSI_INSERT_DCS_COMMAND_DISABLE           = 0x00000000,
DSI_INSERT_DCS_COMMAND_ENABLE            = 0x00000001,
} DSI_INSERT_DCS_COMMAND;

/*
 * DSI_DMAFIFO_WRITE_WATERMARK enum
 */

typedef enum DSI_DMAFIFO_WRITE_WATERMARK {
DSI_DMAFIFO_WRITE_WATERMARK_HALF         = 0x00000000,
DSI_DMAFIFO_WRITE_WATERMARK_FOURTH       = 0x00000001,
DSI_DMAFIFO_WRITE_WATERMARK_EIGHTH       = 0x00000002,
DSI_DMAFIFO_WRITE_WATERMARK_SIXTEENTH    = 0x00000003,
} DSI_DMAFIFO_WRITE_WATERMARK;

/*
 * DSI_DMAFIFO_READ_WATERMARK enum
 */

typedef enum DSI_DMAFIFO_READ_WATERMARK {
DSI_DMAFIFO_READ_WATERMARK_HALF          = 0x00000000,
DSI_DMAFIFO_READ_WATERMARK_FOURTH        = 0x00000001,
DSI_DMAFIFO_READ_WATERMARK_EIGHTH        = 0x00000002,
DSI_DMAFIFO_READ_WATERMARK_SIXTEENTH     = 0x00000003,
} DSI_DMAFIFO_READ_WATERMARK;

/*
 * DSI_USE_DENG_LENGTH enum
 */

typedef enum DSI_USE_DENG_LENGTH {
DSI_USE_DENG_LENGTH_DISABLE              = 0x00000000,
DSI_USE_DENG_LENGTH_ENABLE               = 0x00000001,
} DSI_USE_DENG_LENGTH;

/*
 * DSI_COMMAND_TRIGGER_MODE enum
 */

typedef enum DSI_COMMAND_TRIGGER_MODE {
DSI_COMMAND_TRIGGER_MODE_AUTO            = 0x00000000,
DSI_COMMAND_TRIGGER_MODE_MANUAL          = 0x00000001,
} DSI_COMMAND_TRIGGER_MODE;

/*
 * DSI_COMMAND_TRIGGER_SEL enum
 */

typedef enum DSI_COMMAND_TRIGGER_SEL {
DSI_COMMAND_TRIGGER_SEL_NONE             = 0x00000000,
DSI_COMMAND_TRIGGER_SEL_CRTC             = 0x00000001,
DSI_COMMAND_TRIGGER_SEL_TE               = 0x00000002,
DSI_COMMAND_TRIGGER_SEL_HW               = 0x00000003,
} DSI_COMMAND_TRIGGER_SEL;

/*
 * DSI_HW_SOURCE_SEL enum
 */

typedef enum DSI_HW_SOURCE_SEL {
HW_SOURCE_SEL_NONE                       = 0x00000000,
HW_SOURCE_SEL_DSC_VUP                    = 0x00000001,
HW_SOURCE_SEL_DSC_VLP                    = 0x00000002,
HW_SOURCE_SEL_DSC_JPEG                   = 0x00000003,
} DSI_HW_SOURCE_SEL;

/*
 * DSI_COMMAND_TRIGGER_ORDER enum
 */

typedef enum DSI_COMMAND_TRIGGER_ORDER {
DSI_COMMAND_TRIGGER_ORDER_DMA            = 0x00000000,
DSI_COMMAND_TRIGGER_ORDER_DENG           = 0x00000001,
} DSI_COMMAND_TRIGGER_ORDER;

/*
 * DSI_TE_SRC_SEL enum
 */

typedef enum DSI_TE_SRC_SEL {
DSI_TE_SEL_LINK                          = 0x00000000,
DSI_TE_SEL_PIN                           = 0x00000001,
} DSI_TE_SRC_SEL;

/*
 * DSI_EXT_TE_MUX enum
 */

typedef enum DSI_EXT_TE_MUX {
DSI_XT_TE_MUX_LCDD17                     = 0x00000000,
DSI_XT_TE_MUX_DCLK                       = 0x00000001,
DSI_XT_TE_MUX_SS                         = 0x00000002,
DSI_XT_TE_MUX_GCLK                       = 0x00000003,
DSI_XT_TE_MUX_GOE                        = 0x00000004,
DSI_XT_TE_MUX_DINV                       = 0x00000005,
DSI_XT_TE_MUX_FRAME                      = 0x00000006,
DSI_XT_TE_MUX_GPIO4                      = 0x00000007,
DSI_XT_TE_MUX_GPIO5                      = 0x00000008,
} DSI_EXT_TE_MUX;

/*
 * DSI_EXT_TE_MODE enum
 */

typedef enum DSI_EXT_TE_MODE {
DSI_EXT_TE_MODE_VSYNC_EDGE               = 0x00000000,
DSI_EXT_TE_MODE_VSYNC_WIDTH              = 0x00000001,
DSI_EXT_TE_MODE_HVSYNC_EDGE              = 0x00000002,
DSI_EXT_TE_MODE_HVSYNC_WIDTH             = 0x00000003,
} DSI_EXT_TE_MODE;

/*
 * DSI_EXT_RESET_POL enum
 */

typedef enum DSI_EXT_RESET_POL {
DSI_EXT_RESET_POL_HIGH                   = 0x00000000,
DSI_EXT_RESET_POL_LOW                    = 0x00000001,
} DSI_EXT_RESET_POL;

/*
 * DSI_EXT_TE_POL enum
 */

typedef enum DSI_EXT_TE_POL {
DSI_EXT_TE_POL_RISING                    = 0x00000000,
DSI_EXT_TE_POL_FALLING                   = 0x00000001,
} DSI_EXT_TE_POL;

/*
 * DSI_RESET_PANEL enum
 */

typedef enum DSI_RESET_PANEL {
DSI_RESET_PANEL_DEASSERT                 = 0x00000000,
DSI_RESET_PANEL_ASSERT                   = 0x00000001,
} DSI_RESET_PANEL;

/*
 * DSI_CRC_ENABLE enum
 */

typedef enum DSI_CRC_ENABLE {
DSI_CRC_CAL_DISABLE                      = 0x00000000,
DSI_CRC_CAL_ENABLE                       = 0x00000001,
} DSI_CRC_ENABLE;

/*
 * DSI_TX_EOT_APPEND enum
 */

typedef enum DSI_TX_EOT_APPEND {
DSI_TX_EOT_APPEND_DISABLE                = 0x00000000,
DSI_TX_EOT_APPEND_ENABLE                 = 0x00000001,
} DSI_TX_EOT_APPEND;

/*
 * DSI_RX_EOT_IGNORE enum
 */

typedef enum DSI_RX_EOT_IGNORE {
DSI_RX_EOT_IGNORE_DISABLE                = 0x00000000,
DSI_RX_EOT_IGNORE_ENABLE                 = 0x00000001,
} DSI_RX_EOT_IGNORE;

/*
 * DSI_MIPI_BIST_RESET enum
 */

typedef enum DSI_MIPI_BIST_RESET {
DSI_MIPI_BIST_RESET_DEASSERT             = 0x00000000,
DSI_MIPI_BIST_RESET_ASSERT               = 0x00000001,
} DSI_MIPI_BIST_RESET;

/*
 * DSI_MIPI_BIST_VIDEO_FRMT enum
 */

typedef enum DSI_MIPI_BIST_VIDEO_FRMT {
DSI_MIPI_BIST_VIDEO_FRMT_YUV422          = 0x00000000,
DSI_MIPI_BIST_VIDEO_FRMT_RAW8            = 0x00000001,
} DSI_MIPI_BIST_VIDEO_FRMT;

/*
 * DSI_MIPI_BIST_START enum
 */

typedef enum DSI_MIPI_BIST_START {
DSI_MIPI_BIST_START_DEASSERT             = 0x00000000,
DSI_MIPI_BIST_START_ASSERT               = 0x00000001,
} DSI_MIPI_BIST_START;

/*
 * DSI_DBG_CLK_SEL enum
 */

typedef enum DSI_DBG_CLK_SEL {
DSI_TEST_CLK_SEL_DISPCLK_P               = 0x00000000,
DSI_TEST_CLK_SEL_DISPCLK_G               = 0x00000001,
DSI_TEST_CLK_SEL_DISPCLK_R               = 0x00000002,
DSI_TEST_CLK_SEL_ESCCLK_G                = 0x00000003,
DSI_TEST_CLK_SEL_BYTECLK_G               = 0x00000004,
DSI_TEST_CLK_SEL_DSICLK_P                = 0x00000005,
DSI_TEST_CLK_SEL_DSICLK_R                = 0x00000006,
DSI_TEST_CLK_SEL_DSICLK_G                = 0x00000007,
DSI_TEST_CLK_SEL_DSICLK_TRN              = 0x00000008,
} DSI_DBG_CLK_SEL;

/*
 * DSI_DENG_FIFO_USE_OVERWRITE_LEVEL enum
 */

typedef enum DSI_DENG_FIFO_USE_OVERWRITE_LEVEL {
DSI_DENG_FIFO_LEVEL_OVERWRITE            = 0x00000000,
DSI_DENG_FIFO_LEVEL_CAL_AVERAGE          = 0x00000001,
} DSI_DENG_FIFO_USE_OVERWRITE_LEVEL;

/*
 * DSI_DENG_FIFO_FORCE_RECAL_AVERAGE enum
 */

typedef enum DSI_DENG_FIFO_FORCE_RECAL_AVERAGE {
DSI_DENG_FIFO_FORCE_RECAL_AVERAGE_DEASSERT  = 0x00000000,
DSI_DENG_FIFO_FORCE_RECAL_AVERAGE_ASSERT  = 0x00000001,
} DSI_DENG_FIFO_FORCE_RECAL_AVERAGE;

/*
 * DSI_DENG_FIFO_FORCE_RECOMP_MINMAX enum
 */

typedef enum DSI_DENG_FIFO_FORCE_RECOMP_MINMAX {
DSI_DENG_FIFO_FORCE_RECOMP_MINMAX_DEASSERT  = 0x00000000,
DSI_DENG_FIFO_FORCE_RECOMP_MINMAX_ASSERT  = 0x00000001,
} DSI_DENG_FIFO_FORCE_RECOMP_MINMAX;

/*
 * DSI_DENG_FIFO_START enum
 */

typedef enum DSI_DENG_FIFO_START {
DSI_DENG_FIFO_START_DEASSERT             = 0x00000000,
DSI_DENG_FIFO_START_ASSERT               = 0x00000001,
} DSI_DENG_FIFO_START;

/*
 * DSI_USE_CMDFIFO enum
 */

typedef enum DSI_USE_CMDFIFO {
DSI_CMD_USE_DMAFIFO                      = 0x00000000,
DSI_CMD_USE_CMDFIFO                      = 0x00000001,
} DSI_USE_CMDFIFO;

/*
 * DSI_CRTC_FREEZE_TRIG enum
 */

typedef enum DSI_CRTC_FREEZE_TRIG {
DSI_CRTC_FREEZE_TRIG_DEASSERT            = 0x00000000,
DSI_CRTC_FREEZE_TRIG_ASSERT              = 0x00000001,
} DSI_CRTC_FREEZE_TRIG;

/*
 * DSI_PERF_LATENCY_SEL enum
 */

typedef enum DSI_PERF_LATENCY_SEL {
DSI_PERF_LATENCY_SEL_DATA_LANE0          = 0x00000000,
DSI_PERF_LATENCY_SEL_DATA_LANE1          = 0x00000001,
DSI_PERF_LATENCY_SEL_DATA_LANE2          = 0x00000002,
DSI_PERF_LATENCY_SEL_DATA_LANE3          = 0x00000003,
} DSI_PERF_LATENCY_SEL;

/*
 * DSI_DEBUG_DSICLK_SEL enum
 */

typedef enum DSI_DEBUG_DSICLK_SEL {
DSI_DEBUG_DSICLK_SEL_VIDEO_ENGINE        = 0x00000000,
DSI_DEBUG_DSICLK_SEL_CMD_ENGINE          = 0x00000001,
DSI_DEBUG_DSICLK_SEL_RESYNC_FIFO         = 0x00000002,
DSI_DEBUG_DSICLK_SEL_CMDFIFO             = 0x00000003,
DSI_DEBUG_DSICLK_SEL_CMDBUFFER           = 0x00000004,
DSI_DEBUG_DSICLK_SEL_AFIFO               = 0x00000005,
DSI_DEBUG_DSICLK_SEL_LANECTRL            = 0x00000006,
} DSI_DEBUG_DSICLK_SEL;

/*
 * DSI_DEBUG_BYTECLK_SEL enum
 */

typedef enum DSI_DEBUG_BYTECLK_SEL {
DSI_DEBUG_BYTECLK_SEL_AFIFO              = 0x00000000,
DSI_DEBUG_BYTECLK_SEL_LANEFIFO0          = 0x00000001,
DSI_DEBUG_BYTECLK_SEL_LANEFIFO1          = 0x00000002,
DSI_DEBUG_BYTECLK_SEL_LANEFIFO2          = 0x00000003,
DSI_DEBUG_BYTECLK_SEL_LANEFIFO3          = 0x00000004,
DSI_DEBUG_BYTECLK_SEL_LANEBUF0           = 0x00000005,
DSI_DEBUG_BYTECLK_SEL_LANEBUF1           = 0x00000006,
DSI_DEBUG_BYTECLK_SEL_LANEBUF2           = 0x00000007,
DSI_DEBUG_BYTECLK_SEL_LANEBUF3           = 0x00000008,
DSI_DEBUG_BYTECLK_SEL_PINGPONG0          = 0x00000009,
DSI_DEBUG_BYTECLK_SEL_PINGPONG1          = 0x0000000a,
DSI_DEBUG_BYTECLK_SEL_PINGPING2          = 0x0000000b,
DSI_DEBUG_BYTECLK_SEL_PINGPING3          = 0x0000000c,
DSI_DEBUG_BYTECLK_SEL_EOT                = 0x0000000d,
DSI_DEBUG_BYTECLK_SEL_LANECTRL           = 0x0000000e,
} DSI_DEBUG_BYTECLK_SEL;

/*******************************************************
 * DCIO_CHIP Enums
 *******************************************************/

/*
 * DCIOCHIP_HPD_SEL enum
 */

typedef enum DCIOCHIP_HPD_SEL {
DCIOCHIP_HPD_SEL_ASYNC                   = 0x00000000,
DCIOCHIP_HPD_SEL_CLOCKED                 = 0x00000001,
} DCIOCHIP_HPD_SEL;

/*
 * DCIOCHIP_PAD_MODE enum
 */

typedef enum DCIOCHIP_PAD_MODE {
DCIOCHIP_PAD_MODE_DDC                    = 0x00000000,
DCIOCHIP_PAD_MODE_DP                     = 0x00000001,
} DCIOCHIP_PAD_MODE;

/*
 * DCIOCHIP_AUXSLAVE_PAD_MODE enum
 */

typedef enum DCIOCHIP_AUXSLAVE_PAD_MODE {
DCIOCHIP_AUXSLAVE_PAD_MODE_I2C           = 0x00000000,
DCIOCHIP_AUXSLAVE_PAD_MODE_AUX           = 0x00000001,
} DCIOCHIP_AUXSLAVE_PAD_MODE;

/*
 * DCIOCHIP_INVERT enum
 */

typedef enum DCIOCHIP_INVERT {
DCIOCHIP_POL_NON_INVERT                  = 0x00000000,
DCIOCHIP_POL_INVERT                      = 0x00000001,
} DCIOCHIP_INVERT;

/*
 * DCIOCHIP_PD_EN enum
 */

typedef enum DCIOCHIP_PD_EN {
DCIOCHIP_PD_EN_NOTALLOW                  = 0x00000000,
DCIOCHIP_PD_EN_ALLOW                     = 0x00000001,
} DCIOCHIP_PD_EN;

/*
 * DCIOCHIP_GPIO_MASK_EN enum
 */

typedef enum DCIOCHIP_GPIO_MASK_EN {
DCIOCHIP_GPIO_MASK_EN_HARDWARE           = 0x00000000,
DCIOCHIP_GPIO_MASK_EN_SOFTWARE           = 0x00000001,
} DCIOCHIP_GPIO_MASK_EN;

/*
 * DCIOCHIP_MASK enum
 */

typedef enum DCIOCHIP_MASK {
DCIOCHIP_MASK_DISABLE                    = 0x00000000,
DCIOCHIP_MASK_ENABLE                     = 0x00000001,
} DCIOCHIP_MASK;

/*
 * DCIOCHIP_GPIO_I2C_MASK enum
 */

typedef enum DCIOCHIP_GPIO_I2C_MASK {
DCIOCHIP_GPIO_I2C_MASK_DISABLE           = 0x00000000,
DCIOCHIP_GPIO_I2C_MASK_ENABLE            = 0x00000001,
} DCIOCHIP_GPIO_I2C_MASK;

/*
 * DCIOCHIP_GPIO_I2C_DRIVE enum
 */

typedef enum DCIOCHIP_GPIO_I2C_DRIVE {
DCIOCHIP_GPIO_I2C_DRIVE_LOW              = 0x00000000,
DCIOCHIP_GPIO_I2C_DRIVE_HIGH             = 0x00000001,
} DCIOCHIP_GPIO_I2C_DRIVE;

/*
 * DCIOCHIP_GPIO_I2C_EN enum
 */

typedef enum DCIOCHIP_GPIO_I2C_EN {
DCIOCHIP_GPIO_I2C_DISABLE                = 0x00000000,
DCIOCHIP_GPIO_I2C_ENABLE                 = 0x00000001,
} DCIOCHIP_GPIO_I2C_EN;

/*
 * DCIOCHIP_MASK_4BIT enum
 */

typedef enum DCIOCHIP_MASK_4BIT {
DCIOCHIP_MASK_4BIT_DISABLE               = 0x00000000,
DCIOCHIP_MASK_4BIT_ENABLE                = 0x0000000f,
} DCIOCHIP_MASK_4BIT;

/*
 * DCIOCHIP_ENABLE_4BIT enum
 */

typedef enum DCIOCHIP_ENABLE_4BIT {
DCIOCHIP_4BIT_DISABLE                    = 0x00000000,
DCIOCHIP_4BIT_ENABLE                     = 0x0000000f,
} DCIOCHIP_ENABLE_4BIT;

/*
 * DCIOCHIP_MASK_5BIT enum
 */

typedef enum DCIOCHIP_MASK_5BIT {
DCIOCHIP_MASIK_5BIT_DISABLE              = 0x00000000,
DCIOCHIP_MASIK_5BIT_ENABLE               = 0x0000001f,
} DCIOCHIP_MASK_5BIT;

/*
 * DCIOCHIP_ENABLE_5BIT enum
 */

typedef enum DCIOCHIP_ENABLE_5BIT {
DCIOCHIP_5BIT_DISABLE                    = 0x00000000,
DCIOCHIP_5BIT_ENABLE                     = 0x0000001f,
} DCIOCHIP_ENABLE_5BIT;

/*
 * DCIOCHIP_MASK_2BIT enum
 */

typedef enum DCIOCHIP_MASK_2BIT {
DCIOCHIP_MASK_2BIT_DISABLE               = 0x00000000,
DCIOCHIP_MASK_2BIT_ENABLE                = 0x00000003,
} DCIOCHIP_MASK_2BIT;

/*
 * DCIOCHIP_ENABLE_2BIT enum
 */

typedef enum DCIOCHIP_ENABLE_2BIT {
DCIOCHIP_2BIT_DISABLE                    = 0x00000000,
DCIOCHIP_2BIT_ENABLE                     = 0x00000003,
} DCIOCHIP_ENABLE_2BIT;

/*
 * DCIOCHIP_REF_27_SRC_SEL enum
 */

typedef enum DCIOCHIP_REF_27_SRC_SEL {
DCIOCHIP_REF_27_SRC_SEL_XTAL_DIVIDER     = 0x00000000,
DCIOCHIP_REF_27_SRC_SEL_DISP_CLKIN2_DIVIDER  = 0x00000001,
DCIOCHIP_REF_27_SRC_SEL_XTAL_BYPASS      = 0x00000002,
DCIOCHIP_REF_27_SRC_SEL_DISP_CLKIN2_BYPASS  = 0x00000003,
} DCIOCHIP_REF_27_SRC_SEL;

/*
 * DCIOCHIP_DVO_VREFPON enum
 */

typedef enum DCIOCHIP_DVO_VREFPON {
DCIOCHIP_DVO_VREFPON_DISABLE             = 0x00000000,
DCIOCHIP_DVO_VREFPON_ENABLE              = 0x00000001,
} DCIOCHIP_DVO_VREFPON;

/*
 * DCIOCHIP_DVO_VREFSEL enum
 */

typedef enum DCIOCHIP_DVO_VREFSEL {
DCIOCHIP_DVO_VREFSEL_ONCHIP              = 0x00000000,
DCIOCHIP_DVO_VREFSEL_EXTERNAL            = 0x00000001,
} DCIOCHIP_DVO_VREFSEL;

/*
 * DCIOCHIP_SPDIF1_IMODE enum
 */

typedef enum DCIOCHIP_SPDIF1_IMODE {
DCIOCHIP_SPDIF1_IMODE_OE_A               = 0x00000000,
DCIOCHIP_SPDIF1_IMODE_TSTE_TSTO          = 0x00000001,
} DCIOCHIP_SPDIF1_IMODE;

/*
 * DCIOCHIP_AUX_FALLSLEWSEL enum
 */

typedef enum DCIOCHIP_AUX_FALLSLEWSEL {
DCIOCHIP_AUX_FALLSLEWSEL_LOW             = 0x00000000,
DCIOCHIP_AUX_FALLSLEWSEL_HIGH0           = 0x00000001,
DCIOCHIP_AUX_FALLSLEWSEL_HIGH1           = 0x00000002,
DCIOCHIP_AUX_FALLSLEWSEL_ULTRAHIGH       = 0x00000003,
} DCIOCHIP_AUX_FALLSLEWSEL;

/*
 * DCIOCHIP_AUX_SPIKESEL enum
 */

typedef enum DCIOCHIP_AUX_SPIKESEL {
DCIOCHIP_AUX_SPIKESEL_50NS               = 0x00000000,
DCIOCHIP_AUX_SPIKESEL_10NS               = 0x00000001,
} DCIOCHIP_AUX_SPIKESEL;

/*
 * DCIOCHIP_AUX_CSEL0P9 enum
 */

typedef enum DCIOCHIP_AUX_CSEL0P9 {
DCIOCHIP_AUX_CSEL_DEC1P0                 = 0x00000000,
DCIOCHIP_AUX_CSEL_DEC0P9                 = 0x00000001,
} DCIOCHIP_AUX_CSEL0P9;

/*
 * DCIOCHIP_AUX_CSEL1P1 enum
 */

typedef enum DCIOCHIP_AUX_CSEL1P1 {
DCIOCHIP_AUX_CSEL_INC1P0                 = 0x00000000,
DCIOCHIP_AUX_CSEL_INC1P1                 = 0x00000001,
} DCIOCHIP_AUX_CSEL1P1;

/*
 * DCIOCHIP_AUX_RSEL0P9 enum
 */

typedef enum DCIOCHIP_AUX_RSEL0P9 {
DCIOCHIP_AUX_RSEL_DEC1P0                 = 0x00000000,
DCIOCHIP_AUX_RSEL_DEC0P9                 = 0x00000001,
} DCIOCHIP_AUX_RSEL0P9;

/*
 * DCIOCHIP_AUX_RSEL1P1 enum
 */

typedef enum DCIOCHIP_AUX_RSEL1P1 {
DCIOCHIP_AUX_RSEL_INC1P0                 = 0x00000000,
DCIOCHIP_AUX_RSEL_INC1P1                 = 0x00000001,
} DCIOCHIP_AUX_RSEL1P1;

/*******************************************************
 * AZCONTROLLER Enums
 *******************************************************/

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL {
GENERIC_AZ_CONTROLLER_REGISTER_DISABLE   = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_ENABLE    = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED {
GENERIC_AZ_CONTROLLER_REGISTER_DISABLE_RESERVED  = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_RESERVED  = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_STATUS enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_STATUS {
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_NOT_SET  = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_SET  = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_STATUS;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED {
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_NOT_SET_RESERVED  = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_SET_RESERVED  = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED;

/*
 * AZ_GLOBAL_CAPABILITIES enum
 */

typedef enum AZ_GLOBAL_CAPABILITIES {
AZ_GLOBAL_CAPABILITIES_SIXTY_FOUR_BIT_ADDRESS_NOT_SUPPORTED  = 0x00000000,
AZ_GLOBAL_CAPABILITIES_SIXTY_FOUR_BIT_ADDRESS_SUPPORTED  = 0x00000001,
} AZ_GLOBAL_CAPABILITIES;

/*
 * GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE enum
 */

typedef enum GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE {
ACCEPT_UNSOLICITED_RESPONSE_NOT_ENABLE   = 0x00000000,
ACCEPT_UNSOLICITED_RESPONSE_ENABLE       = 0x00000001,
} GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE;

/*
 * GLOBAL_CONTROL_FLUSH_CONTROL enum
 */

typedef enum GLOBAL_CONTROL_FLUSH_CONTROL {
FLUSH_CONTROL_FLUSH_NOT_STARTED          = 0x00000000,
FLUSH_CONTROL_FLUSH_STARTED              = 0x00000001,
} GLOBAL_CONTROL_FLUSH_CONTROL;

/*
 * GLOBAL_CONTROL_CONTROLLER_RESET enum
 */

typedef enum GLOBAL_CONTROL_CONTROLLER_RESET {
CONTROLLER_RESET_AZ_CONTROLLER_IN_RESET  = 0x00000000,
CONTROLLER_RESET_AZ_CONTROLLER_NOT_IN_RESET  = 0x00000001,
} GLOBAL_CONTROL_CONTROLLER_RESET;

/*
 * AZ_STATE_CHANGE_STATUS enum
 */

typedef enum AZ_STATE_CHANGE_STATUS {
AZ_STATE_CHANGE_STATUS_CODEC_NOT_PRESENT  = 0x00000000,
AZ_STATE_CHANGE_STATUS_CODEC_PRESENT     = 0x00000001,
} AZ_STATE_CHANGE_STATUS;

/*
 * GLOBAL_STATUS_FLUSH_STATUS enum
 */

typedef enum GLOBAL_STATUS_FLUSH_STATUS {
GLOBAL_STATUS_FLUSH_STATUS_FLUSH_NOT_ENDED  = 0x00000000,
GLOBAL_STATUS_FLUSH_STATUS_FLUSH_ENDED   = 0x00000001,
} GLOBAL_STATUS_FLUSH_STATUS;

/*
 * STREAM_0_SYNCHRONIZATION enum
 */

typedef enum STREAM_0_SYNCHRONIZATION {
STREAM_0_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_0_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_0_SYNCHRONIZATION;

/*
 * STREAM_1_SYNCHRONIZATION enum
 */

typedef enum STREAM_1_SYNCHRONIZATION {
STREAM_1_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_1_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_1_SYNCHRONIZATION;

/*
 * STREAM_2_SYNCHRONIZATION enum
 */

typedef enum STREAM_2_SYNCHRONIZATION {
STREAM_2_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_2_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_2_SYNCHRONIZATION;

/*
 * STREAM_3_SYNCHRONIZATION enum
 */

typedef enum STREAM_3_SYNCHRONIZATION {
STREAM_3_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_3_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_3_SYNCHRONIZATION;

/*
 * STREAM_4_SYNCHRONIZATION enum
 */

typedef enum STREAM_4_SYNCHRONIZATION {
STREAM_4_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_4_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_4_SYNCHRONIZATION;

/*
 * STREAM_5_SYNCHRONIZATION enum
 */

typedef enum STREAM_5_SYNCHRONIZATION {
STREAM_5_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_5_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_5_SYNCHRONIZATION;

/*
 * STREAM_6_SYNCHRONIZATION enum
 */

typedef enum STREAM_6_SYNCHRONIZATION {
STREAM_6_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_6_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_6_SYNCHRONIZATION;

/*
 * STREAM_7_SYNCHRONIZATION enum
 */

typedef enum STREAM_7_SYNCHRONIZATION {
STREAM_7_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_7_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_7_SYNCHRONIZATION;

/*
 * STREAM_8_SYNCHRONIZATION enum
 */

typedef enum STREAM_8_SYNCHRONIZATION {
STREAM_8_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_8_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_8_SYNCHRONIZATION;

/*
 * STREAM_9_SYNCHRONIZATION enum
 */

typedef enum STREAM_9_SYNCHRONIZATION {
STREAM_9_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_9_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_9_SYNCHRONIZATION;

/*
 * STREAM_10_SYNCHRONIZATION enum
 */

typedef enum STREAM_10_SYNCHRONIZATION {
STREAM_10_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_10_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_10_SYNCHRONIZATION;

/*
 * STREAM_11_SYNCHRONIZATION enum
 */

typedef enum STREAM_11_SYNCHRONIZATION {
STREAM_11_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_11_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_11_SYNCHRONIZATION;

/*
 * STREAM_12_SYNCHRONIZATION enum
 */

typedef enum STREAM_12_SYNCHRONIZATION {
STREAM_12_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_12_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_12_SYNCHRONIZATION;

/*
 * STREAM_13_SYNCHRONIZATION enum
 */

typedef enum STREAM_13_SYNCHRONIZATION {
STREAM_13_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_13_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_13_SYNCHRONIZATION;

/*
 * STREAM_14_SYNCHRONIZATION enum
 */

typedef enum STREAM_14_SYNCHRONIZATION {
STREAM_14_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_14_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_14_SYNCHRONIZATION;

/*
 * STREAM_15_SYNCHRONIZATION enum
 */

typedef enum STREAM_15_SYNCHRONIZATION {
STREAM_15_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_15_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_15_SYNCHRONIZATION;

/*
 * CORB_READ_POINTER_RESET enum
 */

typedef enum CORB_READ_POINTER_RESET {
CORB_READ_POINTER_RESET_CORB_DMA_IS_NOT_RESET  = 0x00000000,
CORB_READ_POINTER_RESET_CORB_DMA_IS_RESET  = 0x00000001,
} CORB_READ_POINTER_RESET;

/*
 * AZ_CORB_SIZE enum
 */

typedef enum AZ_CORB_SIZE {
AZ_CORB_SIZE_2ENTRIES_RESERVED           = 0x00000000,
AZ_CORB_SIZE_16ENTRIES_RESERVED          = 0x00000001,
AZ_CORB_SIZE_256ENTRIES                  = 0x00000002,
AZ_CORB_SIZE_RESERVED                    = 0x00000003,
} AZ_CORB_SIZE;

/*
 * AZ_RIRB_WRITE_POINTER_RESET enum
 */

typedef enum AZ_RIRB_WRITE_POINTER_RESET {
AZ_RIRB_WRITE_POINTER_NOT_RESET          = 0x00000000,
AZ_RIRB_WRITE_POINTER_DO_RESET           = 0x00000001,
} AZ_RIRB_WRITE_POINTER_RESET;

/*
 * RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL enum
 */

typedef enum RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL {
RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL_INTERRUPT_DISABLED  = 0x00000000,
RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL_INTERRUPT_ENABLED  = 0x00000001,
} RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL;

/*
 * RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL enum
 */

typedef enum RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL {
RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL_INTERRUPT_DISABLED  = 0x00000000,
RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL_INTERRUPT_ENABLED  = 0x00000001,
} RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL;

/*
 * AZ_RIRB_SIZE enum
 */

typedef enum AZ_RIRB_SIZE {
AZ_RIRB_SIZE_2ENTRIES_RESERVED           = 0x00000000,
AZ_RIRB_SIZE_16ENTRIES_RESERVED          = 0x00000001,
AZ_RIRB_SIZE_256ENTRIES                  = 0x00000002,
AZ_RIRB_SIZE_UNDEFINED                   = 0x00000003,
} AZ_RIRB_SIZE;

/*
 * IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID enum
 */

typedef enum IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID {
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID_NO_IMMEDIATE_RESPONSE_VALID  = 0x00000000,
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID_IMMEDIATE_RESPONSE_VALID  = 0x00000001,
} IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID;

/*
 * IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY enum
 */

typedef enum IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY {
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_NOT_BUSY  = 0x00000000,
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_IS_BUSY  = 0x00000001,
} IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY;

/*
 * DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE enum
 */

typedef enum DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE {
DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE_DMA_DISABLE  = 0x00000000,
DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE_DMA_ENABLE  = 0x00000001,
} DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE;

/*******************************************************
 * AZENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_PCM  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_NOT_PCM  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_48KHZ  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_44P1KHZ  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY1  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY2  = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED  = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY4  = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED  = 0x00000004,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY1  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED  = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY3  = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED  = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED  = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED  = 0x00000005,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED  = 0x00000006,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED  = 0x00000007,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_8_RESERVED  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_16  = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_20  = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_24  = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_32_RESERVED  = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_RESERVED  = 0x00000005,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_1  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_2  = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_3  = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_4  = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_5  = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_6  = 0x00000005,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_7  = 0x00000006,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_8  = 0x00000007,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_RESERVED  = 0x00000008,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L_BIT7_NOT_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L_BIT7_IS_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO_BIT_A_NOT_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO_BIT_A_IS_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO_BIT_B_NOT_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO_BIT_B_IS_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY_BIT_C_IS_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY_BIT_C_NOT_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE_LSB_OF_D_NOT_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE_LSB_OF_D_IS_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VALIDITY_CFG_NOT_ON  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VALIDITY_CFG_ON  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V_BIT28_IS_ZERO  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V_BIT28_IS_ONE  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_DISABLED  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_ENABLED  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE_SILENT_STREAM_NOT_ENABLE  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE_SILENT_STREAM_ENABLE  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE {
AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE_PIN_SHUT_OFF  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE_PIN_DRIVEN  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE {
AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_DISABLED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT {
AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_NO_INFO_OR_PERMITTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_FORBIDDEN  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_PAIR_MODE  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_SINGLE_MODE  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE;

/*******************************************************
 * AZF0CONTROLLER Enums
 *******************************************************/

/*
 * AZALIA_SOFT_RESET_REFCLK_SOFT_RESET enum
 */

typedef enum AZALIA_SOFT_RESET_REFCLK_SOFT_RESET {
AZALIA_SOFT_RESET_REFCLK_SOFT_RESET_NOT_RESET  = 0x00000000,
AZALIA_SOFT_RESET_REFCLK_SOFT_RESET_RESET_REFCLK_LOGIC  = 0x00000001,
} AZALIA_SOFT_RESET_REFCLK_SOFT_RESET;

/*******************************************************
 * AZF0ROOT Enums
 *******************************************************/

/*
 * CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY enum
 */

typedef enum CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY {
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_ALL  = 0x00000000,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_6  = 0x00000001,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_5  = 0x00000002,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_4  = 0x00000003,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_3  = 0x00000004,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_2  = 0x00000005,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_1  = 0x00000006,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_0  = 0x00000007,
} CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY;

/*
 * CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY enum
 */

typedef enum CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY {
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_ALL  = 0x00000000,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_6  = 0x00000001,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_5  = 0x00000002,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_4  = 0x00000003,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_3  = 0x00000004,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_2  = 0x00000005,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_1  = 0x00000006,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_0  = 0x00000007,
} CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY;

/*******************************************************
 * AZINPUTENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_PCM  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_NOT_PCM  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_48KHZ  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_44P1KHZ  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY1  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY2  = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED  = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY4  = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED  = 0x00000004,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY1  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED  = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY3  = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED  = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED  = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED  = 0x00000005,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED  = 0x00000006,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED  = 0x00000007,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_8_RESERVED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_16  = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_20  = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_24  = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_32_RESERVED  = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_RESERVED  = 0x00000005,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_1  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_2  = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_3  = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_4  = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_5  = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_6  = 0x00000005,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_7  = 0x00000006,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_8  = 0x00000007,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_RESERVED  = 0x00000008,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_DISABLED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_ENABLED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE_PIN_SHUT_OFF  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE_PIN_DRIVEN  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_DISABLED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE;

/*******************************************************
 * AZROOT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET enum
 */

typedef enum AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET {
AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_NOT_RESET  = 0x00000000,
AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_DO_RESET  = 0x00000001,
} AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET;

/*******************************************************
 * DCCG Enums
 *******************************************************/

/*
 * ENABLE enum
 */

typedef enum ENABLE {
DISABLE_THE_FEATURE                      = 0x00000000,
ENABLE_THE_FEATURE                       = 0x00000001,
} ENABLE;

/*
 * ENABLE_CLOCK enum
 */

typedef enum ENABLE_CLOCK {
DISABLE_THE_CLOCK                        = 0x00000000,
ENABLE_THE_CLOCK                         = 0x00000001,
} ENABLE_CLOCK;

/*
 * FORCE_VBI enum
 */

typedef enum FORCE_VBI {
FORCE_VBI_LOW                            = 0x00000000,
FORCE_VBI_HIGH                           = 0x00000001,
} FORCE_VBI;

/*
 * OVERRIDE_CGTT_SCLK enum
 */

typedef enum OVERRIDE_CGTT_SCLK {
OVERRIDE_CGTT_SCLK_NOOP                  = 0x00000000,
SET_OVERRIDE_CGTT_SCLK                   = 0x00000001,
} OVERRIDE_CGTT_SCLK;

/*
 * CLEAR_SMU_INTR enum
 */

typedef enum CLEAR_SMU_INTR {
SMU_INTR_STATUS_NOOP                     = 0x00000000,
SMU_INTR_STATUS_CLEAR                    = 0x00000001,
} CLEAR_SMU_INTR;

/*
 * STATIC_SCREEN_SMU_INTR enum
 */

typedef enum STATIC_SCREEN_SMU_INTR {
STATIC_SCREEN_SMU_INTR_NOOP              = 0x00000000,
SET_STATIC_SCREEN_SMU_INTR               = 0x00000001,
} STATIC_SCREEN_SMU_INTR;

/*
 * JITTER_REMOVE_DISABLE enum
 */

typedef enum JITTER_REMOVE_DISABLE {
ENABLE_JITTER_REMOVAL                    = 0x00000000,
DISABLE_JITTER_REMOVAL                   = 0x00000001,
} JITTER_REMOVE_DISABLE;

/*
 * DS_REF_SRC enum
 */

typedef enum DS_REF_SRC {
DS_REF_IS_XTALIN                         = 0x00000000,
DS_REF_IS_EXT_GENLOCK                    = 0x00000001,
DS_REF_IS_PCIE                           = 0x00000002,
} DS_REF_SRC;

/*
 * DISABLE_CLOCK_GATING enum
 */

typedef enum DISABLE_CLOCK_GATING {
CLOCK_GATING_ENABLED                     = 0x00000000,
CLOCK_GATING_DISABLED                    = 0x00000001,
} DISABLE_CLOCK_GATING;

/*
 * DISABLE_CLOCK_GATING_IN_DCO enum
 */

typedef enum DISABLE_CLOCK_GATING_IN_DCO {
CLOCK_GATING_ENABLED_IN_DCO              = 0x00000000,
CLOCK_GATING_DISABLED_IN_DCO             = 0x00000001,
} DISABLE_CLOCK_GATING_IN_DCO;

/*
 * DCCG_DEEP_COLOR_CNTL enum
 */

typedef enum DCCG_DEEP_COLOR_CNTL {
DCCG_DEEP_COLOR_DTO_DISABLE              = 0x00000000,
DCCG_DEEP_COLOR_DTO_5_4_RATIO            = 0x00000001,
DCCG_DEEP_COLOR_DTO_3_2_RATIO            = 0x00000002,
DCCG_DEEP_COLOR_DTO_2_1_RATIO            = 0x00000003,
} DCCG_DEEP_COLOR_CNTL;

/*
 * REFCLK_CLOCK_EN enum
 */

typedef enum REFCLK_CLOCK_EN {
REFCLK_CLOCK_EN_XTALIN_CLK               = 0x00000000,
REFCLK_CLOCK_EN_ALLOW_SRC_SEL            = 0x00000001,
} REFCLK_CLOCK_EN;

/*
 * REFCLK_SRC_SEL enum
 */

typedef enum REFCLK_SRC_SEL {
REFCLK_SRC_SEL_PCIE_REFCLK               = 0x00000000,
REFCLK_SRC_SEL_CPL_REFCLK                = 0x00000001,
} REFCLK_SRC_SEL;

/*
 * DPREFCLK_SRC_SEL enum
 */

typedef enum DPREFCLK_SRC_SEL {
DPREFCLK_SRC_SEL_CK                      = 0x00000000,
DPREFCLK_SRC_SEL_P0PLL                   = 0x00000001,
DPREFCLK_SRC_SEL_P1PLL                   = 0x00000002,
DPREFCLK_SRC_SEL_P2PLL                   = 0x00000003,
DPREFCLK_SRC_SEL_P3PLL                   = 0x00000004,
} DPREFCLK_SRC_SEL;

/*
 * XTAL_REF_SEL enum
 */

typedef enum XTAL_REF_SEL {
XTAL_REF_SEL_1X                          = 0x00000000,
XTAL_REF_SEL_2X                          = 0x00000001,
} XTAL_REF_SEL;

/*
 * XTAL_REF_CLOCK_SOURCE_SEL enum
 */

typedef enum XTAL_REF_CLOCK_SOURCE_SEL {
XTAL_REF_CLOCK_SOURCE_SEL_XTALIN         = 0x00000000,
XTAL_REF_CLOCK_SOURCE_SEL_PPLL           = 0x00000001,
} XTAL_REF_CLOCK_SOURCE_SEL;

/*
 * MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL enum
 */

typedef enum MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL {
MICROSECOND_TIME_BASE_CLOCK_IS_XTALIN    = 0x00000000,
MICROSECOND_TIME_BASE_CLOCK_IS_PPLL_REFCLK  = 0x00000001,
} MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL;

/*
 * ALLOW_SR_ON_TRANS_REQ enum
 */

typedef enum ALLOW_SR_ON_TRANS_REQ {
ALLOW_SR_ON_TRANS_REQ_ENABLE             = 0x00000000,
ALLOW_SR_ON_TRANS_REQ_DISABLE            = 0x00000001,
} ALLOW_SR_ON_TRANS_REQ;

/*
 * MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL enum
 */

typedef enum MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL {
MILLISECOND_TIME_BASE_CLOCK_IS_XTALIN    = 0x00000000,
MILLISECOND_TIME_BASE_CLOCK_IS_PPLL_REFCLK  = 0x00000001,
} MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL;

/*
 * PIPE_PIXEL_RATE_SOURCE enum
 */

typedef enum PIPE_PIXEL_RATE_SOURCE {
PIPE_PIXEL_RATE_SOURCE_P0PLL             = 0x00000000,
PIPE_PIXEL_RATE_SOURCE_P1PLL             = 0x00000001,
PIPE_PIXEL_RATE_SOURCE_P2PLL             = 0x00000002,
} PIPE_PIXEL_RATE_SOURCE;

/*
 * PIPE_PHYPLL_PIXEL_RATE_SOURCE enum
 */

typedef enum PIPE_PHYPLL_PIXEL_RATE_SOURCE {
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYA    = 0x00000000,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYB    = 0x00000001,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYC    = 0x00000002,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYD    = 0x00000003,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYE    = 0x00000004,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYF    = 0x00000005,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYG    = 0x00000006,
} PIPE_PHYPLL_PIXEL_RATE_SOURCE;

/*
 * PIPE_PIXEL_RATE_PLL_SOURCE enum
 */

typedef enum PIPE_PIXEL_RATE_PLL_SOURCE {
PIPE_PIXEL_RATE_PLL_SOURCE_PHYPLL        = 0x00000000,
PIPE_PIXEL_RATE_PLL_SOURCE_DISPPLL       = 0x00000001,
} PIPE_PIXEL_RATE_PLL_SOURCE;

/*
 * DP_DTO_DS_DISABLE enum
 */

typedef enum DP_DTO_DS_DISABLE {
DP_DTO_DESPREAD_DISABLE                  = 0x00000000,
DP_DTO_DESPREAD_ENABLE                   = 0x00000001,
} DP_DTO_DS_DISABLE;

/*
 * CRTC_ADD_PIXEL enum
 */

typedef enum CRTC_ADD_PIXEL {
CRTC_ADD_PIXEL_NOOP                      = 0x00000000,
CRTC_ADD_PIXEL_FORCE                     = 0x00000001,
} CRTC_ADD_PIXEL;

/*
 * CRTC_DROP_PIXEL enum
 */

typedef enum CRTC_DROP_PIXEL {
CRTC_DROP_PIXEL_NOOP                     = 0x00000000,
CRTC_DROP_PIXEL_FORCE                    = 0x00000001,
} CRTC_DROP_PIXEL;

/*
 * SYMCLK_FE_FORCE_EN enum
 */

typedef enum SYMCLK_FE_FORCE_EN {
SYMCLK_FE_FORCE_EN_DISABLE               = 0x00000000,
SYMCLK_FE_FORCE_EN_ENABLE                = 0x00000001,
} SYMCLK_FE_FORCE_EN;

/*
 * SYMCLK_FE_FORCE_SRC enum
 */

typedef enum SYMCLK_FE_FORCE_SRC {
SYMCLK_FE_FORCE_SRC_UNIPHYA              = 0x00000000,
SYMCLK_FE_FORCE_SRC_UNIPHYB              = 0x00000001,
SYMCLK_FE_FORCE_SRC_UNIPHYC              = 0x00000002,
SYMCLK_FE_FORCE_SRC_UNIPHYD              = 0x00000003,
SYMCLK_FE_FORCE_SRC_UNIPHYE              = 0x00000004,
SYMCLK_FE_FORCE_SRC_UNIPHYF              = 0x00000005,
SYMCLK_FE_FORCE_SRC_UNIPHYG              = 0x00000006,
} SYMCLK_FE_FORCE_SRC;

/*
 * DPDBG_CLK_FORCE_EN enum
 */

typedef enum DPDBG_CLK_FORCE_EN {
DPDBG_CLK_FORCE_EN_DISABLE               = 0x00000000,
DPDBG_CLK_FORCE_EN_ENABLE                = 0x00000001,
} DPDBG_CLK_FORCE_EN;

/*
 * DVOACLK_COARSE_SKEW_CNTL enum
 */

typedef enum DVOACLK_COARSE_SKEW_CNTL {
DVOACLK_COARSE_SKEW_CNTL_NO_ADJUSTMENT   = 0x00000000,
DVOACLK_COARSE_SKEW_CNTL_DELAY_1_STEP    = 0x00000001,
DVOACLK_COARSE_SKEW_CNTL_DELAY_2_STEPS   = 0x00000002,
DVOACLK_COARSE_SKEW_CNTL_DELAY_3_STEPS   = 0x00000003,
DVOACLK_COARSE_SKEW_CNTL_DELAY_4_STEPS   = 0x00000004,
DVOACLK_COARSE_SKEW_CNTL_DELAY_5_STEPS   = 0x00000005,
DVOACLK_COARSE_SKEW_CNTL_DELAY_6_STEPS   = 0x00000006,
DVOACLK_COARSE_SKEW_CNTL_DELAY_7_STEPS   = 0x00000007,
DVOACLK_COARSE_SKEW_CNTL_DELAY_8_STEPS   = 0x00000008,
DVOACLK_COARSE_SKEW_CNTL_DELAY_9_STEPS   = 0x00000009,
DVOACLK_COARSE_SKEW_CNTL_DELAY_10_STEPS  = 0x0000000a,
DVOACLK_COARSE_SKEW_CNTL_DELAY_11_STEPS  = 0x0000000b,
DVOACLK_COARSE_SKEW_CNTL_DELAY_12_STEPS  = 0x0000000c,
DVOACLK_COARSE_SKEW_CNTL_DELAY_13_STEPS  = 0x0000000d,
DVOACLK_COARSE_SKEW_CNTL_DELAY_14_STEPS  = 0x0000000e,
DVOACLK_COARSE_SKEW_CNTL_DELAY_15_STEPS  = 0x0000000f,
DVOACLK_COARSE_SKEW_CNTL_EARLY_1_STEP    = 0x00000010,
DVOACLK_COARSE_SKEW_CNTL_EARLY_2_STEPS   = 0x00000011,
DVOACLK_COARSE_SKEW_CNTL_EARLY_3_STEPS   = 0x00000012,
DVOACLK_COARSE_SKEW_CNTL_EARLY_4_STEPS   = 0x00000013,
DVOACLK_COARSE_SKEW_CNTL_EARLY_5_STEPS   = 0x00000014,
DVOACLK_COARSE_SKEW_CNTL_EARLY_6_STEPS   = 0x00000015,
DVOACLK_COARSE_SKEW_CNTL_EARLY_7_STEPS   = 0x00000016,
DVOACLK_COARSE_SKEW_CNTL_EARLY_8_STEPS   = 0x00000017,
DVOACLK_COARSE_SKEW_CNTL_EARLY_9_STEPS   = 0x00000018,
DVOACLK_COARSE_SKEW_CNTL_EARLY_10_STEPS  = 0x00000019,
DVOACLK_COARSE_SKEW_CNTL_EARLY_11_STEPS  = 0x0000001a,
DVOACLK_COARSE_SKEW_CNTL_EARLY_12_STEPS  = 0x0000001b,
DVOACLK_COARSE_SKEW_CNTL_EARLY_13_STEPS  = 0x0000001c,
DVOACLK_COARSE_SKEW_CNTL_EARLY_14_STEPS  = 0x0000001d,
DVOACLK_COARSE_SKEW_CNTL_EARLY_15_STEPS  = 0x0000001e,
} DVOACLK_COARSE_SKEW_CNTL;

/*
 * DVOACLK_FINE_SKEW_CNTL enum
 */

typedef enum DVOACLK_FINE_SKEW_CNTL {
DVOACLK_FINE_SKEW_CNTL_NO_ADJUSTMENT     = 0x00000000,
DVOACLK_FINE_SKEW_CNTL_DELAY_1_STEP      = 0x00000001,
DVOACLK_FINE_SKEW_CNTL_DELAY_2_STEPS     = 0x00000002,
DVOACLK_FINE_SKEW_CNTL_DELAY_3_STEPS     = 0x00000003,
DVOACLK_FINE_SKEW_CNTL_EARLY_1_STEP      = 0x00000004,
DVOACLK_FINE_SKEW_CNTL_EARLY_2_STEPS     = 0x00000005,
DVOACLK_FINE_SKEW_CNTL_EARLY_3_STEPS     = 0x00000006,
DVOACLK_FINE_SKEW_CNTL_EARLY_4_STEPS     = 0x00000007,
} DVOACLK_FINE_SKEW_CNTL;

/*
 * DVOACLKD_IN_PHASE enum
 */

typedef enum DVOACLKD_IN_PHASE {
DVOACLKD_IN_OPPOSITE_PHASE_WITH_PCLK_DVO  = 0x00000000,
DVOACLKD_IN_PHASE_WITH_PCLK_DVO          = 0x00000001,
} DVOACLKD_IN_PHASE;

/*
 * DVOACLKC_IN_PHASE enum
 */

typedef enum DVOACLKC_IN_PHASE {
DVOACLKC_IN_OPPOSITE_PHASE_WITH_PCLK_DVO  = 0x00000000,
DVOACLKC_IN_PHASE_WITH_PCLK_DVO          = 0x00000001,
} DVOACLKC_IN_PHASE;

/*
 * DVOACLKC_MVP_IN_PHASE enum
 */

typedef enum DVOACLKC_MVP_IN_PHASE {
DVOACLKC_MVP_IN_OPPOSITE_PHASE_WITH_PCLK_DVO  = 0x00000000,
DVOACLKC_MVP_IN_PHASE_WITH_PCLK_DVO      = 0x00000001,
} DVOACLKC_MVP_IN_PHASE;

/*
 * DVOACLKC_MVP_SKEW_PHASE_OVERRIDE enum
 */

typedef enum DVOACLKC_MVP_SKEW_PHASE_OVERRIDE {
DVOACLKC_MVP_SKEW_PHASE_OVERRIDE_DISABLE  = 0x00000000,
DVOACLKC_MVP_SKEW_PHASE_OVERRIDE_ENABLE  = 0x00000001,
} DVOACLKC_MVP_SKEW_PHASE_OVERRIDE;

/*
 * MVP_CLK_SRC_SEL enum
 */

typedef enum MVP_CLK_SRC_SEL {
MVP_CLK_SRC_SEL_RSRV                     = 0x00000000,
MVP_CLK_SRC_SEL_IO_1                     = 0x00000001,
MVP_CLK_SRC_SEL_IO_2                     = 0x00000002,
MVP_CLK_SRC_SEL_REFCLK                   = 0x00000003,
} MVP_CLK_SRC_SEL;

/*
 * DCCG_AUDIO_DTO0_SOURCE_SEL enum
 */

typedef enum DCCG_AUDIO_DTO0_SOURCE_SEL {
DCCG_AUDIO_DTO0_SOURCE_SEL_CRTC0         = 0x00000000,
DCCG_AUDIO_DTO0_SOURCE_SEL_CRTC1         = 0x00000001,
DCCG_AUDIO_DTO0_SOURCE_SEL_CRTC2         = 0x00000002,
DCCG_AUDIO_DTO0_SOURCE_SEL_CRTC3         = 0x00000003,
DCCG_AUDIO_DTO0_SOURCE_SEL_CRTC4         = 0x00000004,
DCCG_AUDIO_DTO0_SOURCE_SEL_CRTC5         = 0x00000005,
DCCG_AUDIO_DTO0_SOURCE_SEL_RESERVED      = 0x00000006,
} DCCG_AUDIO_DTO0_SOURCE_SEL;

/*
 * DCCG_AUDIO_DTO_SEL enum
 */

typedef enum DCCG_AUDIO_DTO_SEL {
DCCG_AUDIO_DTO_SEL_AUDIO_DTO0            = 0x00000000,
DCCG_AUDIO_DTO_SEL_AUDIO_DTO1            = 0x00000001,
DCCG_AUDIO_DTO_SEL_NO_AUDIO_DTO          = 0x00000002,
} DCCG_AUDIO_DTO_SEL;

/*
 * DCCG_AUDIO_DTO2_SOURCE_SEL enum
 */

typedef enum DCCG_AUDIO_DTO2_SOURCE_SEL {
DCCG_AUDIO_DTO2_SOURCE_SEL_AMCLK0        = 0x00000000,
DCCG_AUDIO_DTO2_SOURCE_SEL_AMCLK1        = 0x00000001,
} DCCG_AUDIO_DTO2_SOURCE_SEL;

/*
 * DCCG_AUDIO_DTO_USE_512FBR_DTO enum
 */

typedef enum DCCG_AUDIO_DTO_USE_512FBR_DTO {
DCCG_AUDIO_DTO_USE_128FBR_FOR_DP         = 0x00000000,
DCCG_AUDIO_DTO_USE_512FBR_FOR_DP         = 0x00000001,
} DCCG_AUDIO_DTO_USE_512FBR_DTO;

/*
 * DCCG_DBG_EN enum
 */

typedef enum DCCG_DBG_EN {
DCCG_DBG_EN_DISABLE                      = 0x00000000,
DCCG_DBG_EN_ENABLE                       = 0x00000001,
} DCCG_DBG_EN;

/*
 * DCCG_DBG_BLOCK_SEL enum
 */

typedef enum DCCG_DBG_BLOCK_SEL {
DCCG_DBG_BLOCK_SEL_DCCG                  = 0x00000000,
DCCG_DBG_BLOCK_SEL_PMON                  = 0x00000001,
DCCG_DBG_BLOCK_SEL_PMON2                 = 0x00000002,
} DCCG_DBG_BLOCK_SEL;

/*
 * DISPCLK_FREQ_RAMP_DONE enum
 */

typedef enum DISPCLK_FREQ_RAMP_DONE {
DISPCLK_FREQ_RAMP_IN_PROGRESS            = 0x00000000,
DISPCLK_FREQ_RAMP_COMPLETED              = 0x00000001,
} DISPCLK_FREQ_RAMP_DONE;

/*
 * DCCG_FIFO_ERRDET_RESET enum
 */

typedef enum DCCG_FIFO_ERRDET_RESET {
DCCG_FIFO_ERRDET_RESET_NOOP              = 0x00000000,
DCCG_FIFO_ERRDET_RESET_FORCE             = 0x00000001,
} DCCG_FIFO_ERRDET_RESET;

/*
 * DCCG_FIFO_ERRDET_STATE enum
 */

typedef enum DCCG_FIFO_ERRDET_STATE {
DCCG_FIFO_ERRDET_STATE_DETECTION         = 0x00000000,
DCCG_FIFO_ERRDET_STATE_CALIBRATION       = 0x00000001,
} DCCG_FIFO_ERRDET_STATE;

/*
 * DCCG_FIFO_ERRDET_OVR_EN enum
 */

typedef enum DCCG_FIFO_ERRDET_OVR_EN {
DCCG_FIFO_ERRDET_OVR_DISABLE             = 0x00000000,
DCCG_FIFO_ERRDET_OVR_ENABLE              = 0x00000001,
} DCCG_FIFO_ERRDET_OVR_EN;

/*
 * DISPCLK_CHG_FWD_CORR_DISABLE enum
 */

typedef enum DISPCLK_CHG_FWD_CORR_DISABLE {
DISPCLK_CHG_FWD_CORR_ENABLE_AT_BEGINNING  = 0x00000000,
DISPCLK_CHG_FWD_CORR_DISABLE_AT_BEGINNING  = 0x00000001,
} DISPCLK_CHG_FWD_CORR_DISABLE;

/*
 * DC_MEM_GLOBAL_PWR_REQ_DIS enum
 */

typedef enum DC_MEM_GLOBAL_PWR_REQ_DIS {
DC_MEM_GLOBAL_PWR_REQ_ENABLE             = 0x00000000,
DC_MEM_GLOBAL_PWR_REQ_DISABLE            = 0x00000001,
} DC_MEM_GLOBAL_PWR_REQ_DIS;

/*
 * DCCG_PERF_RUN enum
 */

typedef enum DCCG_PERF_RUN {
DCCG_PERF_RUN_NOOP                       = 0x00000000,
DCCG_PERF_RUN_START                      = 0x00000001,
} DCCG_PERF_RUN;

/*
 * DCCG_PERF_MODE_VSYNC enum
 */

typedef enum DCCG_PERF_MODE_VSYNC {
DCCG_PERF_MODE_VSYNC_NOOP                = 0x00000000,
DCCG_PERF_MODE_VSYNC_START               = 0x00000001,
} DCCG_PERF_MODE_VSYNC;

/*
 * DCCG_PERF_MODE_HSYNC enum
 */

typedef enum DCCG_PERF_MODE_HSYNC {
DCCG_PERF_MODE_HSYNC_NOOP                = 0x00000000,
DCCG_PERF_MODE_HSYNC_START               = 0x00000001,
} DCCG_PERF_MODE_HSYNC;

/*
 * DCCG_PERF_CRTC_SELECT enum
 */

typedef enum DCCG_PERF_CRTC_SELECT {
DCCG_PERF_SEL_CRTC0                      = 0x00000000,
DCCG_PERF_SEL_CRTC1                      = 0x00000001,
DCCG_PERF_SEL_CRTC2                      = 0x00000002,
DCCG_PERF_SEL_CRTC3                      = 0x00000003,
DCCG_PERF_SEL_CRTC4                      = 0x00000004,
DCCG_PERF_SEL_CRTC5                      = 0x00000005,
} DCCG_PERF_CRTC_SELECT;

/*
 * CLOCK_BRANCH_SOFT_RESET enum
 */

typedef enum CLOCK_BRANCH_SOFT_RESET {
CLOCK_BRANCH_SOFT_RESET_NOOP             = 0x00000000,
CLOCK_BRANCH_SOFT_RESET_FORCE            = 0x00000001,
} CLOCK_BRANCH_SOFT_RESET;

/*
 * PLL_CFG_IF_SOFT_RESET enum
 */

typedef enum PLL_CFG_IF_SOFT_RESET {
PLL_CFG_IF_SOFT_RESET_NOOP               = 0x00000000,
PLL_CFG_IF_SOFT_RESET_FORCE              = 0x00000001,
} PLL_CFG_IF_SOFT_RESET;

/*
 * DVO_ENABLE_RST enum
 */

typedef enum DVO_ENABLE_RST {
DVO_ENABLE_RST_DISABLE                   = 0x00000000,
DVO_ENABLE_RST_ENABLE                    = 0x00000001,
} DVO_ENABLE_RST;

/*******************************************************
 * DCI Enums
 *******************************************************/

/*
 * LptNumPipes enum
 */

typedef enum LptNumPipes {
LPT_NUM_PIPES_1CH                        = 0x00000000,
LPT_NUM_PIPES_2CH                        = 0x00000001,
LPT_NUM_PIPES_4CH                        = 0x00000002,
LPT_NUM_PIPES_8CH                        = 0x00000003,
} LptNumPipes;

/*
 * LptNumBanks enum
 */

typedef enum LptNumBanks {
LPT_NUM_BANKS_2BANK                      = 0x00000000,
LPT_NUM_BANKS_4BANK                      = 0x00000001,
LPT_NUM_BANKS_8BANK                      = 0x00000002,
LPT_NUM_BANKS_16BANK                     = 0x00000003,
LPT_NUM_BANKS_32BANK                     = 0x00000004,
} LptNumBanks;

/*
 * OVERRIDE_CGTT_DCEFCLK enum
 */

typedef enum OVERRIDE_CGTT_DCEFCLK {
OVERRIDE_CGTT_DCEFCLK_NOOP               = 0x00000000,
SET_OVERRIDE_CGTT_DCEFCLK                = 0x00000001,
} OVERRIDE_CGTT_DCEFCLK;

/*******************************************************
 * DCIO Enums
 *******************************************************/

/*
 * DCIO_DC_GENERICA_SEL enum
 */

typedef enum DCIO_DC_GENERICA_SEL {
DCIO_GENERICA_SEL_DACA_STEREOSYNC        = 0x00000000,
DCIO_GENERICA_SEL_STEREOSYNC             = 0x00000001,
DCIO_GENERICA_SEL_DACA_PIXCLK            = 0x00000002,
DCIO_GENERICA_SEL_DACB_PIXCLK            = 0x00000003,
DCIO_GENERICA_SEL_DVOA_CTL3              = 0x00000004,
DCIO_GENERICA_SEL_P1_PLLCLK              = 0x00000005,
DCIO_GENERICA_SEL_P2_PLLCLK              = 0x00000006,
DCIO_GENERICA_SEL_DVOA_STEREOSYNC        = 0x00000007,
DCIO_GENERICA_SEL_DACA_FIELD_NUMBER      = 0x00000008,
DCIO_GENERICA_SEL_DACB_FIELD_NUMBER      = 0x00000009,
DCIO_GENERICA_SEL_GENERICA_DCCG          = 0x0000000a,
DCIO_GENERICA_SEL_SYNCEN                 = 0x0000000b,
DCIO_GENERICA_SEL_UNIPHY_REFDIV_CLK      = 0x0000000c,
DCIO_GENERICA_SEL_UNIPHY_FBDIV_CLK       = 0x0000000d,
DCIO_GENERICA_SEL_UNIPHY_FBDIV_SSC_CLK   = 0x0000000e,
DCIO_GENERICA_SEL_UNIPHY_FBDIV_CLK_DIV2  = 0x0000000f,
DCIO_GENERICA_SEL_GENERICA_DPRX          = 0x00000010,
DCIO_GENERICA_SEL_GENERICB_DPRX          = 0x00000011,
} DCIO_DC_GENERICA_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL {
DCIO_UNIPHYA_TEST_REFDIV_CLK             = 0x00000000,
DCIO_UNIPHYB_TEST_REFDIV_CLK             = 0x00000001,
DCIO_UNIPHYC_TEST_REFDIV_CLK             = 0x00000002,
DCIO_UNIPHYD_TEST_REFDIV_CLK             = 0x00000003,
DCIO_UNIPHYE_TEST_REFDIV_CLK             = 0x00000004,
DCIO_UNIPHYF_TEST_REFDIV_CLK             = 0x00000005,
DCIO_UNIPHYG_TEST_REFDIV_CLK             = 0x00000006,
DCIO_UNIPHYLPA_TEST_REFDIV_CLK           = 0x00000007,
DCIO_UNIPHYLPB_TEST_REFDIV_CLK           = 0x00000008,
} DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL {
DCIO_UNIPHYA_FBDIV_CLK                   = 0x00000000,
DCIO_UNIPHYB_FBDIV_CLK                   = 0x00000001,
DCIO_UNIPHYC_FBDIV_CLK                   = 0x00000002,
DCIO_UNIPHYD_FBDIV_CLK                   = 0x00000003,
DCIO_UNIPHYE_FBDIV_CLK                   = 0x00000004,
DCIO_UNIPHYF_FBDIV_CLK                   = 0x00000005,
DCIO_UNIPHYG_FBDIV_CLK                   = 0x00000006,
DCIO_UNIPHYLPA_FBDIV_CLK                 = 0x00000007,
DCIO_UNIPHYLPB_FBDIV_CLK                 = 0x00000008,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL {
DCIO_UNIPHYA_FBDIV_SSC_CLK               = 0x00000000,
DCIO_UNIPHYB_FBDIV_SSC_CLK               = 0x00000001,
DCIO_UNIPHYC_FBDIV_SSC_CLK               = 0x00000002,
DCIO_UNIPHYD_FBDIV_SSC_CLK               = 0x00000003,
DCIO_UNIPHYE_FBDIV_SSC_CLK               = 0x00000004,
DCIO_UNIPHYF_FBDIV_SSC_CLK               = 0x00000005,
DCIO_UNIPHYG_FBDIV_SSC_CLK               = 0x00000006,
DCIO_UNIPHYLPA_FBDIV_SSC_CLK             = 0x00000007,
DCIO_UNIPHYLPB_FBDIV_SSC_CLK             = 0x00000008,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL {
DCIO_UNIPHYA_TEST_FBDIV_CLK_DIV2         = 0x00000000,
DCIO_UNIPHYB_TEST_FBDIV_CLK_DIV2         = 0x00000001,
DCIO_UNIPHYC_TEST_FBDIV_CLK_DIV2         = 0x00000002,
DCIO_UNIPHYD_TEST_FBDIV_CLK_DIV2         = 0x00000003,
DCIO_UNIPHYE_TEST_FBDIV_CLK_DIV2         = 0x00000004,
DCIO_UNIPHYF_TEST_FBDIV_CLK_DIV2         = 0x00000005,
DCIO_UNIPHYG_TEST_FBDIV_CLK_DIV2         = 0x00000006,
DCIO_UNIPHYLPA_TEST_FBDIV_CLK_DIV2       = 0x00000007,
DCIO_UNIPHYLPB_TEST_FBDIV_CLK_DIV2       = 0x00000008,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL;

/*
 * DCIO_DC_GENERICB_SEL enum
 */

typedef enum DCIO_DC_GENERICB_SEL {
DCIO_GENERICB_SEL_DACA_STEREOSYNC        = 0x00000000,
DCIO_GENERICB_SEL_STEREOSYNC             = 0x00000001,
DCIO_GENERICB_SEL_DACA_PIXCLK            = 0x00000002,
DCIO_GENERICB_SEL_DACB_PIXCLK            = 0x00000003,
DCIO_GENERICB_SEL_DVOA_CTL3              = 0x00000004,
DCIO_GENERICB_SEL_P1_PLLCLK              = 0x00000005,
DCIO_GENERICB_SEL_P2_PLLCLK              = 0x00000006,
DCIO_GENERICB_SEL_DVOA_STEREOSYNC        = 0x00000007,
DCIO_GENERICB_SEL_DACA_FIELD_NUMBER      = 0x00000008,
DCIO_GENERICB_SEL_DACB_FIELD_NUMBER      = 0x00000009,
DCIO_GENERICB_SEL_GENERICB_DCCG          = 0x0000000a,
DCIO_GENERICB_SEL_SYNCEN                 = 0x0000000b,
DCIO_GENERICB_SEL_UNIPHY_REFDIV_CLK      = 0x0000000c,
DCIO_GENERICB_SEL_UNIPHY_FBDIV_CLK       = 0x0000000d,
DCIO_GENERICB_SEL_UNIPHY_FBDIV_SSC_CLK   = 0x0000000e,
DCIO_GENERICB_SEL_UNIPHY_FBDIV_CLK_DIV2  = 0x0000000f,
} DCIO_DC_GENERICB_SEL;

/*
 * DCIO_DC_PAD_EXTERN_SIG_SEL enum
 */

typedef enum DCIO_DC_PAD_EXTERN_SIG_SEL {
DCIO_DC_PAD_EXTERN_SIG_SEL_MVP           = 0x00000000,
DCIO_DC_PAD_EXTERN_SIG_SEL_VSYNCA        = 0x00000001,
DCIO_DC_PAD_EXTERN_SIG_SEL_GENLK_CLK     = 0x00000002,
DCIO_DC_PAD_EXTERN_SIG_SEL_GENLK_VSYNC   = 0x00000003,
DCIO_DC_PAD_EXTERN_SIG_SEL_GENERICA      = 0x00000004,
DCIO_DC_PAD_EXTERN_SIG_SEL_GENERICB      = 0x00000005,
DCIO_DC_PAD_EXTERN_SIG_SEL_GENERICC      = 0x00000006,
DCIO_DC_PAD_EXTERN_SIG_SEL_HPD1          = 0x00000007,
DCIO_DC_PAD_EXTERN_SIG_SEL_HPD2          = 0x00000008,
DCIO_DC_PAD_EXTERN_SIG_SEL_DDC1CLK       = 0x00000009,
DCIO_DC_PAD_EXTERN_SIG_SEL_DDC1DATA      = 0x0000000a,
DCIO_DC_PAD_EXTERN_SIG_SEL_DDC2CLK       = 0x0000000b,
DCIO_DC_PAD_EXTERN_SIG_SEL_DDC2DATA      = 0x0000000c,
DCIO_DC_PAD_EXTERN_SIG_SEL_VHAD1         = 0x0000000d,
DCIO_DC_PAD_EXTERN_SIG_SEL_VHAD0         = 0x0000000e,
DCIO_DC_PAD_EXTERN_SIG_SEL_VPHCTL        = 0x0000000f,
} DCIO_DC_PAD_EXTERN_SIG_SEL;

/*
 * DCIO_DC_PAD_EXTERN_SIG_MVP_PIXEL_SRC_STATUS enum
 */

typedef enum DCIO_DC_PAD_EXTERN_SIG_MVP_PIXEL_SRC_STATUS {
DCIO_MVP_PIXEL_SRC_STATUS_HSYNCA         = 0x00000000,
DCIO_MVP_PIXEL_SRC_STATUS_HSYNCA_DUPLICATE  = 0x00000001,
DCIO_MVP_PIXEL_SRC_STATUS_CRTC           = 0x00000002,
DCIO_MVP_PIXEL_SRC_STATUS_LB             = 0x00000003,
} DCIO_DC_PAD_EXTERN_SIG_MVP_PIXEL_SRC_STATUS;

/*
 * DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL enum
 */

typedef enum DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL {
DCIO_HSYNCA_OUTPUT_SEL_DISABLE           = 0x00000000,
DCIO_HSYNCA_OUTPUT_SEL_PPLL1             = 0x00000001,
DCIO_HSYNCA_OUTPUT_SEL_PPLL2             = 0x00000002,
DCIO_HSYNCA_OUTPUT_SEL_RESERVED          = 0x00000003,
} DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL;

/*
 * DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL enum
 */

typedef enum DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL {
DCIO_GENLK_CLK_OUTPUT_SEL_DISABLE        = 0x00000000,
DCIO_GENLK_CLK_OUTPUT_SEL_PPLL1          = 0x00000001,
DCIO_GENLK_CLK_OUTPUT_SEL_PPLL2          = 0x00000002,
DCIO_GENLK_CLK_OUTPUT_SEL_RESERVED_VALUE3  = 0x00000003,
} DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL;

/*
 * DCIO_DC_GPIO_VIP_DEBUG enum
 */

typedef enum DCIO_DC_GPIO_VIP_DEBUG {
DCIO_DC_GPIO_VIP_DEBUG_NORMAL            = 0x00000000,
DCIO_DC_GPIO_VIP_DEBUG_CG_BIG            = 0x00000001,
} DCIO_DC_GPIO_VIP_DEBUG;

/*
 * DCIO_DC_GPIO_MACRO_DEBUG enum
 */

typedef enum DCIO_DC_GPIO_MACRO_DEBUG {
DCIO_DC_GPIO_MACRO_DEBUG_NORMAL          = 0x00000000,
DCIO_DC_GPIO_MACRO_DEBUG_CHIP_BIF        = 0x00000001,
DCIO_DC_GPIO_MACRO_DEBUG_RESERVED_VALUE2  = 0x00000002,
DCIO_DC_GPIO_MACRO_DEBUG_RESERVED_VALUE3  = 0x00000003,
} DCIO_DC_GPIO_MACRO_DEBUG;

/*
 * DCIO_DC_GPIO_CHIP_DEBUG_OUT_PIN_SEL enum
 */

typedef enum DCIO_DC_GPIO_CHIP_DEBUG_OUT_PIN_SEL {
DCIO_DC_GPIO_CHIP_DEBUG_OUT_PIN_SEL_NORMAL  = 0x00000000,
DCIO_DC_GPIO_CHIP_DEBUG_OUT_PIN_SEL_SWAP  = 0x00000001,
} DCIO_DC_GPIO_CHIP_DEBUG_OUT_PIN_SEL;

/*
 * DCIO_DC_GPIO_DEBUG_BUS_FLOP_EN enum
 */

typedef enum DCIO_DC_GPIO_DEBUG_BUS_FLOP_EN {
DCIO_DC_GPIO_DEBUG_BUS_FLOP_EN_BYPASS    = 0x00000000,
DCIO_DC_GPIO_DEBUG_BUS_FLOP_EN_ENABLE    = 0x00000001,
} DCIO_DC_GPIO_DEBUG_BUS_FLOP_EN;

/*
 * DCIO_DC_GPIO_DEBUG_DPRX_LOOPBACK_ENABLE enum
 */

typedef enum DCIO_DC_GPIO_DEBUG_DPRX_LOOPBACK_ENABLE {
DCIO_DPRX_LOOPBACK_ENABLE_NORMAL         = 0x00000000,
DCIO_DPRX_LOOPBACK_ENABLE_LOOP           = 0x00000001,
} DCIO_DC_GPIO_DEBUG_DPRX_LOOPBACK_ENABLE;

/*
 * DCIO_UNIPHY_LINK_CNTL_MINIMUM_PIXVLD_LOW_DURATION enum
 */

typedef enum DCIO_UNIPHY_LINK_CNTL_MINIMUM_PIXVLD_LOW_DURATION {
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_3_CLOCKS = 0x00000000,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_7_CLOCKS = 0x00000001,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_11_CLOCKS = 0x00000002,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_15_CLOCKS = 0x00000003,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_19_CLOCKS = 0x00000004,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_23_CLOCKS = 0x00000005,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_27_CLOCKS = 0x00000006,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_31_CLOCKS = 0x00000007,
} DCIO_UNIPHY_LINK_CNTL_MINIMUM_PIXVLD_LOW_DURATION;

/*
 * DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT enum
 */

typedef enum DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT {
DCIO_UNIPHY_CHANNEL_NO_INVERSION         = 0x00000000,
DCIO_UNIPHY_CHANNEL_INVERTED             = 0x00000001,
} DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT;

/*
 * DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK enum
 */

typedef enum DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK {
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_DISALLOW  = 0x00000000,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW   = 0x00000001,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW_DEBOUNCED  = 0x00000002,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW_TOGGLE_FILTERED  = 0x00000003,
} DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK;

/*
 * DCIO_UNIPHY_CHANNEL_XBAR_SOURCE enum
 */

typedef enum DCIO_UNIPHY_CHANNEL_XBAR_SOURCE {
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH0      = 0x00000000,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH1      = 0x00000001,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH2      = 0x00000002,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH3      = 0x00000003,
} DCIO_UNIPHY_CHANNEL_XBAR_SOURCE;

/*
 * DCIO_DC_DVODATA_CONFIG_VIP_MUX_EN enum
 */

typedef enum DCIO_DC_DVODATA_CONFIG_VIP_MUX_EN {
DCIO_VIP_MUX_EN_DVO                      = 0x00000000,
DCIO_VIP_MUX_EN_VIP                      = 0x00000001,
} DCIO_DC_DVODATA_CONFIG_VIP_MUX_EN;

/*
 * DCIO_DC_DVODATA_CONFIG_VIP_ALTER_MAPPING_EN enum
 */

typedef enum DCIO_DC_DVODATA_CONFIG_VIP_ALTER_MAPPING_EN {
DCIO_VIP_ALTER_MAPPING_EN_DEFAULT        = 0x00000000,
DCIO_VIP_ALTER_MAPPING_EN_ALTERNATIVE    = 0x00000001,
} DCIO_DC_DVODATA_CONFIG_VIP_ALTER_MAPPING_EN;

/*
 * DCIO_DC_DVODATA_CONFIG_DVO_ALTER_MAPPING_EN enum
 */

typedef enum DCIO_DC_DVODATA_CONFIG_DVO_ALTER_MAPPING_EN {
DCIO_DVO_ALTER_MAPPING_EN_DEFAULT        = 0x00000000,
DCIO_DVO_ALTER_MAPPING_EN_ALTERNATIVE    = 0x00000001,
} DCIO_DC_DVODATA_CONFIG_DVO_ALTER_MAPPING_EN;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_DISABLE_SYNCEN_CONTROL_OF_TX_EN enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_DISABLE_SYNCEN_CONTROL_OF_TX_EN {
DCIO_LVTMA_PWRSEQ_DISABLE_SYNCEN_CONTROL_OF_TX_ENABLE  = 0x00000000,
DCIO_LVTMA_PWRSEQ_DISABLE_SYNCEN_CONTROL_OF_TX_DISABLE  = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_DISABLE_SYNCEN_CONTROL_OF_TX_EN;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_TARGET_STATE enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_TARGET_STATE {
DCIO_LVTMA_PWRSEQ_TARGET_STATE_LCD_OFF   = 0x00000000,
DCIO_LVTMA_PWRSEQ_TARGET_STATE_LCD_ON    = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_TARGET_STATE;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_SYNCEN_POL enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_SYNCEN_POL {
DCIO_LVTMA_SYNCEN_POL_NON_INVERT         = 0x00000000,
DCIO_LVTMA_SYNCEN_POL_INVERT             = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_SYNCEN_POL;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON {
DCIO_LVTMA_DIGON_OFF                     = 0x00000000,
DCIO_LVTMA_DIGON_ON                      = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON_POL enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON_POL {
DCIO_LVTMA_DIGON_POL_NON_INVERT          = 0x00000000,
DCIO_LVTMA_DIGON_POL_INVERT              = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON_POL;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON {
DCIO_LVTMA_BLON_OFF                      = 0x00000000,
DCIO_LVTMA_BLON_ON                       = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON_POL enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON_POL {
DCIO_LVTMA_BLON_POL_NON_INVERT           = 0x00000000,
DCIO_LVTMA_BLON_POL_INVERT               = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON_POL;

/*
 * DCIO_LVTMA_PWRSEQ_DELAY2_LVTMA_VARY_BL_OVERRIDE_EN enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_DELAY2_LVTMA_VARY_BL_OVERRIDE_EN {
DCIO_LVTMA_VARY_BL_OVERRIDE_EN_BLON      = 0x00000000,
DCIO_LVTMA_VARY_BL_OVERRIDE_EN_SEPARATE  = 0x00000001,
} DCIO_LVTMA_PWRSEQ_DELAY2_LVTMA_VARY_BL_OVERRIDE_EN;

/*
 * DCIO_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN enum
 */

typedef enum DCIO_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN {
DCIO_BL_PWM_FRACTIONAL_DISABLE           = 0x00000000,
DCIO_BL_PWM_FRACTIONAL_ENABLE            = 0x00000001,
} DCIO_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN;

/*
 * DCIO_BL_PWM_CNTL_BL_PWM_EN enum
 */

typedef enum DCIO_BL_PWM_CNTL_BL_PWM_EN {
DCIO_BL_PWM_DISABLE                      = 0x00000000,
DCIO_BL_PWM_ENABLE                       = 0x00000001,
} DCIO_BL_PWM_CNTL_BL_PWM_EN;

/*
 * DCIO_BL_PWM_CNTL2_DBG_BL_PWM_INPUT_REFCLK_SELECT enum
 */

typedef enum DCIO_BL_PWM_CNTL2_DBG_BL_PWM_INPUT_REFCLK_SELECT {
DCIO_DBG_BL_PWM_INPUT_REFCLK_SELECT_NORMAL  = 0x00000000,
DCIO_DBG_BL_PWM_INPUT_REFCLK_SELECT_DEBUG1  = 0x00000001,
DCIO_DBG_BL_PWM_INPUT_REFCLK_SELECT_DEBUG2  = 0x00000002,
DCIO_DBG_BL_PWM_INPUT_REFCLK_SELECT_DEBUG3  = 0x00000003,
} DCIO_BL_PWM_CNTL2_DBG_BL_PWM_INPUT_REFCLK_SELECT;

/*
 * DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE enum
 */

typedef enum DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE {
DCIO_BL_PWM_OVERRIDE_BL_OUT_DISABLE      = 0x00000000,
DCIO_BL_PWM_OVERRIDE_BL_OUT_ENABLE       = 0x00000001,
} DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE;

/*
 * DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN enum
 */

typedef enum DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN {
DCIO_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN_NORMAL  = 0x00000000,
DCIO_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN_PWM  = 0x00000001,
} DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN;

/*
 * DCIO_BL_PWM_GRP1_REG_LOCK enum
 */

typedef enum DCIO_BL_PWM_GRP1_REG_LOCK {
DCIO_BL_PWM_GRP1_REG_LOCK_DISABLE        = 0x00000000,
DCIO_BL_PWM_GRP1_REG_LOCK_ENABLE         = 0x00000001,
} DCIO_BL_PWM_GRP1_REG_LOCK;

/*
 * DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START enum
 */

typedef enum DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START {
DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START_DISABLE  = 0x00000000,
DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START_ENABLE  = 0x00000001,
} DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START;

/*
 * DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL enum
 */

typedef enum DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL {
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER1  = 0x00000000,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER2  = 0x00000001,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER3  = 0x00000002,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER4  = 0x00000003,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER5  = 0x00000004,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER6  = 0x00000005,
} DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL;

/*
 * DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN enum
 */

typedef enum DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN {
DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN_BL_PWM  = 0x00000000,
DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN_BL1_PWM  = 0x00000001,
} DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN;

/*
 * DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN enum
 */

typedef enum DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN {
DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_ENABLE  = 0x00000000,
DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_DISABLE  = 0x00000001,
} DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN;

/*
 * DCIO_GSL_SEL enum
 */

typedef enum DCIO_GSL_SEL {
DCIO_GSL_SEL_GROUP_0                     = 0x00000000,
DCIO_GSL_SEL_GROUP_1                     = 0x00000001,
DCIO_GSL_SEL_GROUP_2                     = 0x00000002,
} DCIO_GSL_SEL;

/*
 * DCIO_GENLK_CLK_GSL_MASK enum
 */

typedef enum DCIO_GENLK_CLK_GSL_MASK {
DCIO_GENLK_CLK_GSL_MASK_NO               = 0x00000000,
DCIO_GENLK_CLK_GSL_MASK_TIMING           = 0x00000001,
DCIO_GENLK_CLK_GSL_MASK_STEREO           = 0x00000002,
} DCIO_GENLK_CLK_GSL_MASK;

/*
 * DCIO_GENLK_VSYNC_GSL_MASK enum
 */

typedef enum DCIO_GENLK_VSYNC_GSL_MASK {
DCIO_GENLK_VSYNC_GSL_MASK_NO             = 0x00000000,
DCIO_GENLK_VSYNC_GSL_MASK_TIMING         = 0x00000001,
DCIO_GENLK_VSYNC_GSL_MASK_STEREO         = 0x00000002,
} DCIO_GENLK_VSYNC_GSL_MASK;

/*
 * DCIO_SWAPLOCK_A_GSL_MASK enum
 */

typedef enum DCIO_SWAPLOCK_A_GSL_MASK {
DCIO_SWAPLOCK_A_GSL_MASK_NO              = 0x00000000,
DCIO_SWAPLOCK_A_GSL_MASK_TIMING          = 0x00000001,
DCIO_SWAPLOCK_A_GSL_MASK_STEREO          = 0x00000002,
} DCIO_SWAPLOCK_A_GSL_MASK;

/*
 * DCIO_SWAPLOCK_B_GSL_MASK enum
 */

typedef enum DCIO_SWAPLOCK_B_GSL_MASK {
DCIO_SWAPLOCK_B_GSL_MASK_NO              = 0x00000000,
DCIO_SWAPLOCK_B_GSL_MASK_TIMING          = 0x00000001,
DCIO_SWAPLOCK_B_GSL_MASK_STEREO          = 0x00000002,
} DCIO_SWAPLOCK_B_GSL_MASK;

/*
 * DCIO_GSL_VSYNC_SEL enum
 */

typedef enum DCIO_GSL_VSYNC_SEL {
DCIO_GSL_VSYNC_SEL_PIPE0                 = 0x00000000,
DCIO_GSL_VSYNC_SEL_PIPE1                 = 0x00000001,
DCIO_GSL_VSYNC_SEL_PIPE2                 = 0x00000002,
DCIO_GSL_VSYNC_SEL_PIPE3                 = 0x00000003,
DCIO_GSL_VSYNC_SEL_PIPE4                 = 0x00000004,
DCIO_GSL_VSYNC_SEL_PIPE5                 = 0x00000005,
} DCIO_GSL_VSYNC_SEL;

/*
 * DCIO_GSL0_TIMING_SYNC_SEL enum
 */

typedef enum DCIO_GSL0_TIMING_SYNC_SEL {
DCIO_GSL0_TIMING_SYNC_SEL_PIPE           = 0x00000000,
DCIO_GSL0_TIMING_SYNC_SEL_GENCLK_VSYNC   = 0x00000001,
DCIO_GSL0_TIMING_SYNC_SEL_GENCLK_CLK     = 0x00000002,
DCIO_GSL0_TIMING_SYNC_SEL_SWAPLOCK_A     = 0x00000003,
DCIO_GSL0_TIMING_SYNC_SEL_SWAPLOCK_B     = 0x00000004,
} DCIO_GSL0_TIMING_SYNC_SEL;

/*
 * DCIO_GSL0_GLOBAL_UNLOCK_SEL enum
 */

typedef enum DCIO_GSL0_GLOBAL_UNLOCK_SEL {
DCIO_GSL0_GLOBAL_UNLOCK_SEL_INVERSION    = 0x00000000,
DCIO_GSL0_GLOBAL_UNLOCK_SEL_GENCLK_VSYNC  = 0x00000001,
DCIO_GSL0_GLOBAL_UNLOCK_SEL_GENLK_CLK    = 0x00000002,
DCIO_GSL0_GLOBAL_UNLOCK_SEL_SWAPLOCK_A   = 0x00000003,
DCIO_GSL0_GLOBAL_UNLOCK_SEL_SWAPLOCK_B   = 0x00000004,
} DCIO_GSL0_GLOBAL_UNLOCK_SEL;

/*
 * DCIO_GSL1_TIMING_SYNC_SEL enum
 */

typedef enum DCIO_GSL1_TIMING_SYNC_SEL {
DCIO_GSL1_TIMING_SYNC_SEL_PIPE           = 0x00000000,
DCIO_GSL1_TIMING_SYNC_SEL_GENCLK_VSYNC   = 0x00000001,
DCIO_GSL1_TIMING_SYNC_SEL_GENCLK_CLK     = 0x00000002,
DCIO_GSL1_TIMING_SYNC_SEL_SWAPLOCK_A     = 0x00000003,
DCIO_GSL1_TIMING_SYNC_SEL_SWAPLOCK_B     = 0x00000004,
} DCIO_GSL1_TIMING_SYNC_SEL;

/*
 * DCIO_GSL1_GLOBAL_UNLOCK_SEL enum
 */

typedef enum DCIO_GSL1_GLOBAL_UNLOCK_SEL {
DCIO_GSL1_GLOBAL_UNLOCK_SEL_INVERSION    = 0x00000000,
DCIO_GSL1_GLOBAL_UNLOCK_SEL_GENCLK_VSYNC  = 0x00000001,
DCIO_GSL1_GLOBAL_UNLOCK_SEL_GENLK_CLK    = 0x00000002,
DCIO_GSL1_GLOBAL_UNLOCK_SEL_SWAPLOCK_A   = 0x00000003,
DCIO_GSL1_GLOBAL_UNLOCK_SEL_SWAPLOCK_B   = 0x00000004,
} DCIO_GSL1_GLOBAL_UNLOCK_SEL;

/*
 * DCIO_GSL2_TIMING_SYNC_SEL enum
 */

typedef enum DCIO_GSL2_TIMING_SYNC_SEL {
DCIO_GSL2_TIMING_SYNC_SEL_PIPE           = 0x00000000,
DCIO_GSL2_TIMING_SYNC_SEL_GENCLK_VSYNC   = 0x00000001,
DCIO_GSL2_TIMING_SYNC_SEL_GENCLK_CLK     = 0x00000002,
DCIO_GSL2_TIMING_SYNC_SEL_SWAPLOCK_A     = 0x00000003,
DCIO_GSL2_TIMING_SYNC_SEL_SWAPLOCK_B     = 0x00000004,
} DCIO_GSL2_TIMING_SYNC_SEL;

/*
 * DCIO_GSL2_GLOBAL_UNLOCK_SEL enum
 */

typedef enum DCIO_GSL2_GLOBAL_UNLOCK_SEL {
DCIO_GSL2_GLOBAL_UNLOCK_SEL_INVERSION    = 0x00000000,
DCIO_GSL2_GLOBAL_UNLOCK_SEL_GENCLK_VSYNC  = 0x00000001,
DCIO_GSL2_GLOBAL_UNLOCK_SEL_GENLK_CLK    = 0x00000002,
DCIO_GSL2_GLOBAL_UNLOCK_SEL_SWAPLOCK_A   = 0x00000003,
DCIO_GSL2_GLOBAL_UNLOCK_SEL_SWAPLOCK_B   = 0x00000004,
} DCIO_GSL2_GLOBAL_UNLOCK_SEL;

/*
 * DCIO_DC_GPU_TIMER_START_POSITION enum
 */

typedef enum DCIO_DC_GPU_TIMER_START_POSITION {
DCIO_GPU_TIMER_START_0_END_27            = 0x00000000,
DCIO_GPU_TIMER_START_1_END_28            = 0x00000001,
DCIO_GPU_TIMER_START_2_END_29            = 0x00000002,
DCIO_GPU_TIMER_START_3_END_30            = 0x00000003,
DCIO_GPU_TIMER_START_4_END_31            = 0x00000004,
DCIO_GPU_TIMER_START_6_END_33            = 0x00000005,
DCIO_GPU_TIMER_START_8_END_35            = 0x00000006,
DCIO_GPU_TIMER_START_10_END_37           = 0x00000007,
} DCIO_DC_GPU_TIMER_START_POSITION;

/*
 * DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL enum
 */

typedef enum DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL {
DCIO_TEST_CLK_SEL_DISPCLK                = 0x00000000,
DCIO_TEST_CLK_SEL_GATED_DISPCLK          = 0x00000001,
DCIO_TEST_CLK_SEL_SCLK                   = 0x00000002,
} DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL;

/*
 * DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS enum
 */

typedef enum DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS {
DCIO_DISPCLK_R_DCIO_GATE_DISABLE         = 0x00000000,
DCIO_DISPCLK_R_DCIO_GATE_ENABLE          = 0x00000001,
} DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS;

/*
 * DCIO_DCO_DCFE_EXT_VSYNC_MUX enum
 */

typedef enum DCIO_DCO_DCFE_EXT_VSYNC_MUX {
DCIO_EXT_VSYNC_MUX_SWAPLOCKB             = 0x00000000,
DCIO_EXT_VSYNC_MUX_CRTC0                 = 0x00000001,
DCIO_EXT_VSYNC_MUX_CRTC1                 = 0x00000002,
DCIO_EXT_VSYNC_MUX_CRTC2                 = 0x00000003,
DCIO_EXT_VSYNC_MUX_CRTC3                 = 0x00000004,
DCIO_EXT_VSYNC_MUX_CRTC4                 = 0x00000005,
DCIO_EXT_VSYNC_MUX_CRTC5                 = 0x00000006,
DCIO_EXT_VSYNC_MUX_GENERICB              = 0x00000007,
} DCIO_DCO_DCFE_EXT_VSYNC_MUX;

/*
 * DCIO_DCO_EXT_VSYNC_MASK enum
 */

typedef enum DCIO_DCO_EXT_VSYNC_MASK {
DCIO_EXT_VSYNC_MASK_NONE                 = 0x00000000,
DCIO_EXT_VSYNC_MASK_PIPE0                = 0x00000001,
DCIO_EXT_VSYNC_MASK_PIPE1                = 0x00000002,
DCIO_EXT_VSYNC_MASK_PIPE2                = 0x00000003,
DCIO_EXT_VSYNC_MASK_PIPE3                = 0x00000004,
DCIO_EXT_VSYNC_MASK_PIPE4                = 0x00000005,
DCIO_EXT_VSYNC_MASK_PIPE5                = 0x00000006,
DCIO_EXT_VSYNC_MASK_NONE_DUPLICATE       = 0x00000007,
} DCIO_DCO_EXT_VSYNC_MASK;

/*
 * DCIO_DSYNC_SOFT_RESET enum
 */

typedef enum DCIO_DSYNC_SOFT_RESET {
DCIO_DSYNC_SOFT_RESET_DEASSERT           = 0x00000000,
DCIO_DSYNC_SOFT_RESET_ASSERT             = 0x00000001,
} DCIO_DSYNC_SOFT_RESET;

/*
 * DCIO_DACA_SOFT_RESET enum
 */

typedef enum DCIO_DACA_SOFT_RESET {
DCIO_DACA_SOFT_RESET_DEASSERT            = 0x00000000,
DCIO_DACA_SOFT_RESET_ASSERT              = 0x00000001,
} DCIO_DACA_SOFT_RESET;

/*
 * DCIO_DCRXPHY_SOFT_RESET enum
 */

typedef enum DCIO_DCRXPHY_SOFT_RESET {
DCIO_DCRXPHY_SOFT_RESET_DEASSERT         = 0x00000000,
DCIO_DCRXPHY_SOFT_RESET_ASSERT           = 0x00000001,
} DCIO_DCRXPHY_SOFT_RESET;

/*
 * DCIO_DPHY_LANE_SEL enum
 */

typedef enum DCIO_DPHY_LANE_SEL {
DCIO_DPHY_LANE_SEL_LANE0                 = 0x00000000,
DCIO_DPHY_LANE_SEL_LANE1                 = 0x00000001,
DCIO_DPHY_LANE_SEL_LANE2                 = 0x00000002,
DCIO_DPHY_LANE_SEL_LANE3                 = 0x00000003,
} DCIO_DPHY_LANE_SEL;

/*
 * DCIO_DPCS_INTERRUPT_TYPE enum
 */

typedef enum DCIO_DPCS_INTERRUPT_TYPE {
DCIO_DPCS_INTERRUPT_TYPE_LEVEL_BASED     = 0x00000000,
DCIO_DPCS_INTERRUPT_TYPE_PULSE_BASED     = 0x00000001,
} DCIO_DPCS_INTERRUPT_TYPE;

/*
 * DCIO_DPCS_INTERRUPT_MASK enum
 */

typedef enum DCIO_DPCS_INTERRUPT_MASK {
DCIO_DPCS_INTERRUPT_DISABLE              = 0x00000000,
DCIO_DPCS_INTERRUPT_ENABLE               = 0x00000001,
} DCIO_DPCS_INTERRUPT_MASK;

/*
 * DCIO_DC_GPU_TIMER_READ_SELECT enum
 */

typedef enum DCIO_DC_GPU_TIMER_READ_SELECT {
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_V_UPDATE  = 0x00000000,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_V_UPDATE  = 0x00000001,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D2_V_UPDATE  = 0x00000002,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D2_V_UPDATE  = 0x00000003,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D3_V_UPDATE  = 0x00000004,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D3_V_UPDATE  = 0x00000005,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D4_V_UPDATE  = 0x00000006,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D4_V_UPDATE  = 0x00000007,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D5_V_UPDATE  = 0x00000008,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D5_V_UPDATE  = 0x00000009,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D6_V_UPDATE  = 0x0000000a,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D6_V_UPDATE  = 0x0000000b,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_P_FLIP  = 0x0000000c,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_P_FLIP  = 0x0000000d,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D2_P_FLIP  = 0x0000000e,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D2_P_FLIP  = 0x0000000f,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D3_P_FLIP  = 0x00000010,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D3_P_FLIP  = 0x00000011,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D4_P_FLIP  = 0x00000012,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D4_P_FLIP  = 0x00000013,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D5_P_FLIP  = 0x00000014,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D5_P_FLIP  = 0x00000015,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D6_P_FLIP  = 0x00000016,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D6_P_FLIP  = 0x00000017,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_VSYNC_NOM  = 0x00000018,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_VSYNC_NOM  = 0x00000019,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D2_VSYNC_NOM  = 0x0000001a,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D2_VSYNC_NOM  = 0x0000001b,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D3_VSYNC_NOM  = 0x0000001c,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D3_VSYNC_NOM  = 0x0000001d,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D4_VSYNC_NOM  = 0x0000001e,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D4_VSYNC_NOM  = 0x0000001f,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D5_VSYNC_NOM  = 0x00000020,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D5_VSYNC_NOM  = 0x00000021,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D6_VSYNC_NOM  = 0x00000022,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D6_VSYNC_NOM  = 0x00000023,
} DCIO_DC_GPU_TIMER_READ_SELECT;

/*
 * DCIO_IMPCAL_STEP_DELAY enum
 */

typedef enum DCIO_IMPCAL_STEP_DELAY {
DCIO_IMPCAL_STEP_DELAY_1us               = 0x00000000,
DCIO_IMPCAL_STEP_DELAY_2us               = 0x00000001,
DCIO_IMPCAL_STEP_DELAY_3us               = 0x00000002,
DCIO_IMPCAL_STEP_DELAY_4us               = 0x00000003,
DCIO_IMPCAL_STEP_DELAY_5us               = 0x00000004,
DCIO_IMPCAL_STEP_DELAY_6us               = 0x00000005,
DCIO_IMPCAL_STEP_DELAY_7us               = 0x00000006,
DCIO_IMPCAL_STEP_DELAY_8us               = 0x00000007,
DCIO_IMPCAL_STEP_DELAY_9us               = 0x00000008,
DCIO_IMPCAL_STEP_DELAY_10us              = 0x00000009,
DCIO_IMPCAL_STEP_DELAY_11us              = 0x0000000a,
DCIO_IMPCAL_STEP_DELAY_12us              = 0x0000000b,
DCIO_IMPCAL_STEP_DELAY_13us              = 0x0000000c,
DCIO_IMPCAL_STEP_DELAY_14us              = 0x0000000d,
DCIO_IMPCAL_STEP_DELAY_15us              = 0x0000000e,
DCIO_IMPCAL_STEP_DELAY_16us              = 0x0000000f,
} DCIO_IMPCAL_STEP_DELAY;

/*
 * DCIO_UNIPHY_IMPCAL_SEL enum
 */

typedef enum DCIO_UNIPHY_IMPCAL_SEL {
DCIO_UNIPHY_IMPCAL_SEL_TEMPERATURE       = 0x00000000,
DCIO_UNIPHY_IMPCAL_SEL_BINARY            = 0x00000001,
} DCIO_UNIPHY_IMPCAL_SEL;

/*
 * DCIO_DBG_ASYNC_BLOCK_SEL enum
 */

typedef enum DCIO_DBG_ASYNC_BLOCK_SEL {
DCIO_DBG_ASYNC_BLOCK_SEL_OVERRIDE        = 0x00000000,
DCIO_DBG_ASYNC_BLOCK_SEL_DCCG            = 0x00000001,
DCIO_DBG_ASYNC_BLOCK_SEL_DCIO            = 0x00000002,
DCIO_DBG_ASYNC_BLOCK_SEL_DCO             = 0x00000003,
} DCIO_DBG_ASYNC_BLOCK_SEL;

/*
 * DCIO_DBG_ASYNC_4BIT_SEL enum
 */

typedef enum DCIO_DBG_ASYNC_4BIT_SEL {
DCIO_DBG_ASYNC_4BIT_SEL_3TO0             = 0x00000000,
DCIO_DBG_ASYNC_4BIT_SEL_7TO4             = 0x00000001,
DCIO_DBG_ASYNC_4BIT_SEL_11TO8            = 0x00000002,
DCIO_DBG_ASYNC_4BIT_SEL_15TO12           = 0x00000003,
DCIO_DBG_ASYNC_4BIT_SEL_19TO16           = 0x00000004,
DCIO_DBG_ASYNC_4BIT_SEL_23TO20           = 0x00000005,
DCIO_DBG_ASYNC_4BIT_SEL_27TO24           = 0x00000006,
DCIO_DBG_ASYNC_4BIT_SEL_31TO28           = 0x00000007,
} DCIO_DBG_ASYNC_4BIT_SEL;

/*******************************************************
 * AOUT Enums
 *******************************************************/

/*
 * AOUT_EN enum
 */

typedef enum AOUT_EN {
AOUT_DISABLE                             = 0x00000000,
AOUT_ENABLE                              = 0x00000001,
} AOUT_EN;

/*
 * AOUT_FIFO_START_ADDR enum
 */

typedef enum AOUT_FIFO_START_ADDR {
AOUT_FIFO_START_ADDR_2                   = 0x00000000,
AOUT_FIFO_START_ADDR_3                   = 0x00000001,
} AOUT_FIFO_START_ADDR;

/*
 * AOUT_CRC_TEST_EN enum
 */

typedef enum AOUT_CRC_TEST_EN {
AOUT_CRC_DISABLE                         = 0x00000000,
AOUT_CRC_ENABLE                          = 0x00000001,
} AOUT_CRC_TEST_EN;

/*
 * AOUT_CRC_SOFT_RESET enum
 */

typedef enum AOUT_CRC_SOFT_RESET {
AOUT_CRC_NO_RESET                        = 0x00000000,
AOUT_CRC_RESET                           = 0x00000001,
} AOUT_CRC_SOFT_RESET;

/*
 * AOUT_CRC_CONT_EN enum
 */

typedef enum AOUT_CRC_CONT_EN {
AOUT_CRC_ONE_SHOT                        = 0x00000000,
AOUT_CRC_CONT                            = 0x00000001,
} AOUT_CRC_CONT_EN;

/*
 * I2S_WORD_SIZE enum
 */

typedef enum I2S_WORD_SIZE {
I2S_WORD_SIZE_32                         = 0x00000000,
I2S_WORD_SIZE_16                         = 0x00000001,
} I2S_WORD_SIZE;

/*
 * I2S_SAMPLE_ALIGNMENT enum
 */

typedef enum I2S_SAMPLE_ALIGNMENT {
I2S_SAMPLE_LEFT_ALIGNED                  = 0x00000000,
I2S_SAMPLE_RIGHT_ALIGNED                 = 0x00000001,
} I2S_SAMPLE_ALIGNMENT;

/*
 * I2S_SAMPLE_BIT_ORDER enum
 */

typedef enum I2S_SAMPLE_BIT_ORDER {
I2S_SAMPLE_BIT_ORDER_MSB                 = 0x00000000,
I2S_SAMPLE_BIT_ORDER_LSB                 = 0x00000001,
} I2S_SAMPLE_BIT_ORDER;

/*
 * I2S_LRCLK_POLARITY enum
 */

typedef enum I2S_LRCLK_POLARITY {
I2S_LRCLK_LOW_LEFT                       = 0x00000000,
I2S_LRCLK_HIGH_LEFT                      = 0x00000001,
} I2S_LRCLK_POLARITY;

/*
 * I2S_WORD_ALIGNMENT enum
 */

typedef enum I2S_WORD_ALIGNMENT {
I2S_WORD_ALTERNATE_ALIGNMENT             = 0x00000000,
I2S_WORD_I2S_ALIGNMENT                   = 0x00000001,
} I2S_WORD_ALIGNMENT;

/*
 * SPDIF_INVERT_EN enum
 */

typedef enum SPDIF_INVERT_EN {
SPDIF_INVERT_DISABLE                     = 0x00000000,
SPDIF_INVERT_ENABLE                      = 0x00000001,
} SPDIF_INVERT_EN;

/*******************************************************
 * DCO Enums
 *******************************************************/

/*
 * DPDBG_EN enum
 */

typedef enum DPDBG_EN {
DPDBG_DISABLE                            = 0x00000000,
DPDBG_ENABLE                             = 0x00000001,
} DPDBG_EN;

/*
 * DPDBG_INPUT_EN enum
 */

typedef enum DPDBG_INPUT_EN {
DPDBG_INPUT_DISABLE                      = 0x00000000,
DPDBG_INPUT_ENABLE                       = 0x00000001,
} DPDBG_INPUT_EN;

/*
 * DPDBG_ERROR_DETECTION_MODE enum
 */

typedef enum DPDBG_ERROR_DETECTION_MODE {
DPDBG_ERROR_DETECTION_MODE_CSC           = 0x00000000,
DPDBG_ERROR_DETECTION_MODE_RS_ENCODING   = 0x00000001,
} DPDBG_ERROR_DETECTION_MODE;

/*
 * DPDBG_FIFO_OVERFLOW_INTERRUPT_MASK enum
 */

typedef enum DPDBG_FIFO_OVERFLOW_INTERRUPT_MASK {
DPDBG_FIFO_OVERFLOW_INT_DISABLE          = 0x00000000,
DPDBG_FIFO_OVERFLOW_INT_ENABLE           = 0x00000001,
} DPDBG_FIFO_OVERFLOW_INTERRUPT_MASK;

/*
 * DPDBG_FIFO_OVERFLOW_INTERRUPT_TYPE enum
 */

typedef enum DPDBG_FIFO_OVERFLOW_INTERRUPT_TYPE {
DPDBG_FIFO_OVERFLOW_INT_LEVEL_BASED      = 0x00000000,
DPDBG_FIFO_OVERFLOW_INT_PULSE_BASED      = 0x00000001,
} DPDBG_FIFO_OVERFLOW_INTERRUPT_TYPE;

/*
 * DPDBG_FIFO_OVERFLOW_INTERRUPT_ACK enum
 */

typedef enum DPDBG_FIFO_OVERFLOW_INTERRUPT_ACK {
DPDBG_FIFO_OVERFLOW_INT_NO_ACK           = 0x00000000,
DPDBG_FIFO_OVERFLOW_INT_CLEAR            = 0x00000001,
} DPDBG_FIFO_OVERFLOW_INTERRUPT_ACK;

/*
 * PM_ASSERT_RESET enum
 */

typedef enum PM_ASSERT_RESET {
PM_ASSERT_RESET_0                        = 0x00000000,
PM_ASSERT_RESET_1                        = 0x00000001,
} PM_ASSERT_RESET;

/*
 * DAC_MUX_SELECT enum
 */

typedef enum DAC_MUX_SELECT {
DAC_MUX_SELECT_DACA                      = 0x00000000,
DAC_MUX_SELECT_DACB                      = 0x00000001,
} DAC_MUX_SELECT;

/*
 * TMDS_DVO_MUX_SELECT enum
 */

typedef enum TMDS_DVO_MUX_SELECT {
TMDS_DVO_MUX_SELECT_B                    = 0x00000000,
TMDS_DVO_MUX_SELECT_G                    = 0x00000001,
TMDS_DVO_MUX_SELECT_R                    = 0x00000002,
TMDS_DVO_MUX_SELECT_RESERVED             = 0x00000003,
} TMDS_DVO_MUX_SELECT;

/*
 * DACA_SOFT_RESET enum
 */

typedef enum DACA_SOFT_RESET {
DACA_SOFT_RESET_0                        = 0x00000000,
DACA_SOFT_RESET_1                        = 0x00000001,
} DACA_SOFT_RESET;

/*
 * I2S0_SPDIF0_SOFT_RESET enum
 */

typedef enum I2S0_SPDIF0_SOFT_RESET {
I2S0_SPDIF0_SOFT_RESET_0                 = 0x00000000,
I2S0_SPDIF0_SOFT_RESET_1                 = 0x00000001,
} I2S0_SPDIF0_SOFT_RESET;

/*
 * I2S1_SOFT_RESET enum
 */

typedef enum I2S1_SOFT_RESET {
I2S1_SOFT_RESET_0                        = 0x00000000,
I2S1_SOFT_RESET_1                        = 0x00000001,
} I2S1_SOFT_RESET;

/*
 * SPDIF1_SOFT_RESET enum
 */

typedef enum SPDIF1_SOFT_RESET {
SPDIF1_SOFT_RESET_0                      = 0x00000000,
SPDIF1_SOFT_RESET_1                      = 0x00000001,
} SPDIF1_SOFT_RESET;

/*
 * DB_CLK_SOFT_RESET enum
 */

typedef enum DB_CLK_SOFT_RESET {
DB_CLK_SOFT_RESET_0                      = 0x00000000,
DB_CLK_SOFT_RESET_1                      = 0x00000001,
} DB_CLK_SOFT_RESET;

/*
 * FMT0_SOFT_RESET enum
 */

typedef enum FMT0_SOFT_RESET {
FMT0_SOFT_RESET_0                        = 0x00000000,
FMT0_SOFT_RESET_1                        = 0x00000001,
} FMT0_SOFT_RESET;

/*
 * FMT1_SOFT_RESET enum
 */

typedef enum FMT1_SOFT_RESET {
FMT1_SOFT_RESET_0                        = 0x00000000,
FMT1_SOFT_RESET_1                        = 0x00000001,
} FMT1_SOFT_RESET;

/*
 * FMT2_SOFT_RESET enum
 */

typedef enum FMT2_SOFT_RESET {
FMT2_SOFT_RESET_0                        = 0x00000000,
FMT2_SOFT_RESET_1                        = 0x00000001,
} FMT2_SOFT_RESET;

/*
 * FMT3_SOFT_RESET enum
 */

typedef enum FMT3_SOFT_RESET {
FMT3_SOFT_RESET_0                        = 0x00000000,
FMT3_SOFT_RESET_1                        = 0x00000001,
} FMT3_SOFT_RESET;

/*
 * FMT4_SOFT_RESET enum
 */

typedef enum FMT4_SOFT_RESET {
FMT4_SOFT_RESET_0                        = 0x00000000,
FMT4_SOFT_RESET_1                        = 0x00000001,
} FMT4_SOFT_RESET;

/*
 * FMT5_SOFT_RESET enum
 */

typedef enum FMT5_SOFT_RESET {
FMT5_SOFT_RESET_0                        = 0x00000000,
FMT5_SOFT_RESET_1                        = 0x00000001,
} FMT5_SOFT_RESET;

/*
 * MVP_SOFT_RESET enum
 */

typedef enum MVP_SOFT_RESET {
MVP_SOFT_RESET_0                         = 0x00000000,
MVP_SOFT_RESET_1                         = 0x00000001,
} MVP_SOFT_RESET;

/*
 * ABM_SOFT_RESET enum
 */

typedef enum ABM_SOFT_RESET {
ABM_SOFT_RESET_0                         = 0x00000000,
ABM_SOFT_RESET_1                         = 0x00000001,
} ABM_SOFT_RESET;

/*
 * DVO_SOFT_RESET enum
 */

typedef enum DVO_SOFT_RESET {
DVO_SOFT_RESET_0                         = 0x00000000,
DVO_SOFT_RESET_1                         = 0x00000001,
} DVO_SOFT_RESET;

/*
 * DIGA_FE_SOFT_RESET enum
 */

typedef enum DIGA_FE_SOFT_RESET {
DIGA_FE_SOFT_RESET_0                     = 0x00000000,
DIGA_FE_SOFT_RESET_1                     = 0x00000001,
} DIGA_FE_SOFT_RESET;

/*
 * DIGA_BE_SOFT_RESET enum
 */

typedef enum DIGA_BE_SOFT_RESET {
DIGA_BE_SOFT_RESET_0                     = 0x00000000,
DIGA_BE_SOFT_RESET_1                     = 0x00000001,
} DIGA_BE_SOFT_RESET;

/*
 * DIGB_FE_SOFT_RESET enum
 */

typedef enum DIGB_FE_SOFT_RESET {
DIGB_FE_SOFT_RESET_0                     = 0x00000000,
DIGB_FE_SOFT_RESET_1                     = 0x00000001,
} DIGB_FE_SOFT_RESET;

/*
 * DIGB_BE_SOFT_RESET enum
 */

typedef enum DIGB_BE_SOFT_RESET {
DIGB_BE_SOFT_RESET_0                     = 0x00000000,
DIGB_BE_SOFT_RESET_1                     = 0x00000001,
} DIGB_BE_SOFT_RESET;

/*
 * DIGC_FE_SOFT_RESET enum
 */

typedef enum DIGC_FE_SOFT_RESET {
DIGC_FE_SOFT_RESET_0                     = 0x00000000,
DIGC_FE_SOFT_RESET_1                     = 0x00000001,
} DIGC_FE_SOFT_RESET;

/*
 * DIGC_BE_SOFT_RESET enum
 */

typedef enum DIGC_BE_SOFT_RESET {
DIGC_BE_SOFT_RESET_0                     = 0x00000000,
DIGC_BE_SOFT_RESET_1                     = 0x00000001,
} DIGC_BE_SOFT_RESET;

/*
 * DIGD_FE_SOFT_RESET enum
 */

typedef enum DIGD_FE_SOFT_RESET {
DIGD_FE_SOFT_RESET_0                     = 0x00000000,
DIGD_FE_SOFT_RESET_1                     = 0x00000001,
} DIGD_FE_SOFT_RESET;

/*
 * DIGD_BE_SOFT_RESET enum
 */

typedef enum DIGD_BE_SOFT_RESET {
DIGD_BE_SOFT_RESET_0                     = 0x00000000,
DIGD_BE_SOFT_RESET_1                     = 0x00000001,
} DIGD_BE_SOFT_RESET;

/*
 * DIGE_FE_SOFT_RESET enum
 */

typedef enum DIGE_FE_SOFT_RESET {
DIGE_FE_SOFT_RESET_0                     = 0x00000000,
DIGE_FE_SOFT_RESET_1                     = 0x00000001,
} DIGE_FE_SOFT_RESET;

/*
 * DIGE_BE_SOFT_RESET enum
 */

typedef enum DIGE_BE_SOFT_RESET {
DIGE_BE_SOFT_RESET_0                     = 0x00000000,
DIGE_BE_SOFT_RESET_1                     = 0x00000001,
} DIGE_BE_SOFT_RESET;

/*
 * DIGF_FE_SOFT_RESET enum
 */

typedef enum DIGF_FE_SOFT_RESET {
DIGF_FE_SOFT_RESET_0                     = 0x00000000,
DIGF_FE_SOFT_RESET_1                     = 0x00000001,
} DIGF_FE_SOFT_RESET;

/*
 * DIGF_BE_SOFT_RESET enum
 */

typedef enum DIGF_BE_SOFT_RESET {
DIGF_BE_SOFT_RESET_0                     = 0x00000000,
DIGF_BE_SOFT_RESET_1                     = 0x00000001,
} DIGF_BE_SOFT_RESET;

/*
 * DIGG_FE_SOFT_RESET enum
 */

typedef enum DIGG_FE_SOFT_RESET {
DIGG_FE_SOFT_RESET_0                     = 0x00000000,
DIGG_FE_SOFT_RESET_1                     = 0x00000001,
} DIGG_FE_SOFT_RESET;

/*
 * DIGG_BE_SOFT_RESET enum
 */

typedef enum DIGG_BE_SOFT_RESET {
DIGG_BE_SOFT_RESET_0                     = 0x00000000,
DIGG_BE_SOFT_RESET_1                     = 0x00000001,
} DIGG_BE_SOFT_RESET;

/*
 * DPDBG_SOFT_RESET enum
 */

typedef enum DPDBG_SOFT_RESET {
DPDBG_SOFT_RESET_0                       = 0x00000000,
DPDBG_SOFT_RESET_1                       = 0x00000001,
} DPDBG_SOFT_RESET;

/*
 * DIGLPA_FE_SOFT_RESET enum
 */

typedef enum DIGLPA_FE_SOFT_RESET {
DIGLPA_FE_SOFT_RESET_0                   = 0x00000000,
DIGLPA_FE_SOFT_RESET_1                   = 0x00000001,
} DIGLPA_FE_SOFT_RESET;

/*
 * DIGLPA_BE_SOFT_RESET enum
 */

typedef enum DIGLPA_BE_SOFT_RESET {
DIGLPA_BE_SOFT_RESET_0                   = 0x00000000,
DIGLPA_BE_SOFT_RESET_1                   = 0x00000001,
} DIGLPA_BE_SOFT_RESET;

/*
 * DIGLPB_FE_SOFT_RESET enum
 */

typedef enum DIGLPB_FE_SOFT_RESET {
DIGLPB_FE_SOFT_RESET_0                   = 0x00000000,
DIGLPB_FE_SOFT_RESET_1                   = 0x00000001,
} DIGLPB_FE_SOFT_RESET;

/*
 * DIGLPB_BE_SOFT_RESET enum
 */

typedef enum DIGLPB_BE_SOFT_RESET {
DIGLPB_BE_SOFT_RESET_0                   = 0x00000000,
DIGLPB_BE_SOFT_RESET_1                   = 0x00000001,
} DIGLPB_BE_SOFT_RESET;

/*
 * GENERICA_STEREOSYNC_SEL enum
 */

typedef enum GENERICA_STEREOSYNC_SEL {
GENERICA_STEREOSYNC_SEL_D1               = 0x00000000,
GENERICA_STEREOSYNC_SEL_D2               = 0x00000001,
GENERICA_STEREOSYNC_SEL_D3               = 0x00000002,
GENERICA_STEREOSYNC_SEL_D4               = 0x00000003,
GENERICA_STEREOSYNC_SEL_D5               = 0x00000004,
GENERICA_STEREOSYNC_SEL_D6               = 0x00000005,
GENERICA_STEREOSYNC_SEL_RESERVED         = 0x00000006,
} GENERICA_STEREOSYNC_SEL;

/*
 * GENERICB_STEREOSYNC_SEL enum
 */

typedef enum GENERICB_STEREOSYNC_SEL {
GENERICB_STEREOSYNC_SEL_D1               = 0x00000000,
GENERICB_STEREOSYNC_SEL_D2               = 0x00000001,
GENERICB_STEREOSYNC_SEL_D3               = 0x00000002,
GENERICB_STEREOSYNC_SEL_D4               = 0x00000003,
GENERICB_STEREOSYNC_SEL_D5               = 0x00000004,
GENERICB_STEREOSYNC_SEL_D6               = 0x00000005,
GENERICB_STEREOSYNC_SEL_RESERVED         = 0x00000006,
} GENERICB_STEREOSYNC_SEL;

/*
 * DCO_DBG_BLOCK_SEL enum
 */

typedef enum DCO_DBG_BLOCK_SEL {
DCO_DBG_BLOCK_SEL_DCO                    = 0x00000000,
DCO_DBG_BLOCK_SEL_ABM                    = 0x00000001,
DCO_DBG_BLOCK_SEL_DVO                    = 0x00000002,
DCO_DBG_BLOCK_SEL_DAC                    = 0x00000003,
DCO_DBG_BLOCK_SEL_MVP                    = 0x00000004,
DCO_DBG_BLOCK_SEL_FMT0                   = 0x00000005,
DCO_DBG_BLOCK_SEL_FMT1                   = 0x00000006,
DCO_DBG_BLOCK_SEL_FMT2                   = 0x00000007,
DCO_DBG_BLOCK_SEL_FMT3                   = 0x00000008,
DCO_DBG_BLOCK_SEL_FMT4                   = 0x00000009,
DCO_DBG_BLOCK_SEL_FMT5                   = 0x0000000a,
DCO_DBG_BLOCK_SEL_DIGFE_A                = 0x0000000b,
DCO_DBG_BLOCK_SEL_DIGFE_B                = 0x0000000c,
DCO_DBG_BLOCK_SEL_DIGFE_C                = 0x0000000d,
DCO_DBG_BLOCK_SEL_DIGFE_D                = 0x0000000e,
DCO_DBG_BLOCK_SEL_DIGFE_E                = 0x0000000f,
DCO_DBG_BLOCK_SEL_DIGFE_F                = 0x00000010,
DCO_DBG_BLOCK_SEL_DIGFE_G                = 0x00000011,
DCO_DBG_BLOCK_SEL_DIGA                   = 0x00000012,
DCO_DBG_BLOCK_SEL_DIGB                   = 0x00000013,
DCO_DBG_BLOCK_SEL_DIGC                   = 0x00000014,
DCO_DBG_BLOCK_SEL_DIGD                   = 0x00000015,
DCO_DBG_BLOCK_SEL_DIGE                   = 0x00000016,
DCO_DBG_BLOCK_SEL_DIGF                   = 0x00000017,
DCO_DBG_BLOCK_SEL_DIGG                   = 0x00000018,
DCO_DBG_BLOCK_SEL_DPFE_A                 = 0x00000019,
DCO_DBG_BLOCK_SEL_DPFE_B                 = 0x0000001a,
DCO_DBG_BLOCK_SEL_DPFE_C                 = 0x0000001b,
DCO_DBG_BLOCK_SEL_DPFE_D                 = 0x0000001c,
DCO_DBG_BLOCK_SEL_DPFE_E                 = 0x0000001d,
DCO_DBG_BLOCK_SEL_DPFE_F                 = 0x0000001e,
DCO_DBG_BLOCK_SEL_DPFE_G                 = 0x0000001f,
DCO_DBG_BLOCK_SEL_DPA                    = 0x00000020,
DCO_DBG_BLOCK_SEL_DPB                    = 0x00000021,
DCO_DBG_BLOCK_SEL_DPC                    = 0x00000022,
DCO_DBG_BLOCK_SEL_DPD                    = 0x00000023,
DCO_DBG_BLOCK_SEL_DPE                    = 0x00000024,
DCO_DBG_BLOCK_SEL_DPF                    = 0x00000025,
DCO_DBG_BLOCK_SEL_DPG                    = 0x00000026,
DCO_DBG_BLOCK_SEL_AUX0                   = 0x00000027,
DCO_DBG_BLOCK_SEL_AUX1                   = 0x00000028,
DCO_DBG_BLOCK_SEL_AUX2                   = 0x00000029,
DCO_DBG_BLOCK_SEL_AUX3                   = 0x0000002a,
DCO_DBG_BLOCK_SEL_AUX4                   = 0x0000002b,
DCO_DBG_BLOCK_SEL_AUX5                   = 0x0000002c,
DCO_DBG_BLOCK_SEL_PERFMON_DCO            = 0x0000002d,
DCO_DBG_BLOCK_SEL_AUDIO_OUT              = 0x0000002e,
DCO_DBG_BLOCK_SEL_DIGLPFEA               = 0x0000002f,
DCO_DBG_BLOCK_SEL_DIGLPFEB               = 0x00000030,
DCO_DBG_BLOCK_SEL_DIGLPA                 = 0x00000031,
DCO_DBG_BLOCK_SEL_DIGLPB                 = 0x00000032,
DCO_DBG_BLOCK_SEL_DPLPFEA                = 0x00000033,
DCO_DBG_BLOCK_SEL_DPLPFEB                = 0x00000034,
DCO_DBG_BLOCK_SEL_DPLPA                  = 0x00000035,
DCO_DBG_BLOCK_SEL_DPLPB                  = 0x00000036,
} DCO_DBG_BLOCK_SEL;

/*
 * DCO_HDMI_RXSTATUS_TIMER_CONTROL_DCO_HDMI_RXSTATUS_TIMER_TYPE enum
 */

typedef enum DCO_HDMI_RXSTATUS_TIMER_CONTROL_DCO_HDMI_RXSTATUS_TIMER_TYPE {
DCO_HDMI_RXSTATUS_TIMER_TYPE_LEVEL       = 0x00000000,
DCO_HDMI_RXSTATUS_TIMER_TYPE_PULSE       = 0x00000001,
} DCO_HDMI_RXSTATUS_TIMER_CONTROL_DCO_HDMI_RXSTATUS_TIMER_TYPE;

/*
 * FMT420_MEMORY_SOURCE_SEL enum
 */

typedef enum FMT420_MEMORY_SOURCE_SEL {
FMT420_MEMORY_SOURCE_SEL_FMT0            = 0x00000000,
FMT420_MEMORY_SOURCE_SEL_FMT1            = 0x00000001,
FMT420_MEMORY_SOURCE_SEL_FMT2            = 0x00000002,
FMT420_MEMORY_SOURCE_SEL_FMT3            = 0x00000003,
FMT420_MEMORY_SOURCE_SEL_FMT4            = 0x00000004,
FMT420_MEMORY_SOURCE_SEL_FMT5            = 0x00000005,
FMT420_MEMORY_SOURCE_SEL_FMT_RESERVED    = 0x00000006,
} FMT420_MEMORY_SOURCE_SEL;

/*******************************************************
 * DOUT_I2C Enums
 *******************************************************/

/*
 * DOUT_I2C_CONTROL_GO enum
 */

typedef enum DOUT_I2C_CONTROL_GO {
DOUT_I2C_CONTROL_STOP_TRANSFER           = 0x00000000,
DOUT_I2C_CONTROL_START_TRANSFER          = 0x00000001,
} DOUT_I2C_CONTROL_GO;

/*
 * DOUT_I2C_CONTROL_SOFT_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SOFT_RESET {
DOUT_I2C_CONTROL_NOT_RESET_I2C_CONTROLLER = 0x00000000,
DOUT_I2C_CONTROL_RESET_I2C_CONTROLLER    = 0x00000001,
} DOUT_I2C_CONTROL_SOFT_RESET;

/*
 * DOUT_I2C_CONTROL_SEND_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SEND_RESET {
DOUT_I2C_CONTROL__NOT_SEND_RESET         = 0x00000000,
DOUT_I2C_CONTROL__SEND_RESET             = 0x00000001,
} DOUT_I2C_CONTROL_SEND_RESET;

/*
 * DOUT_I2C_CONTROL_SW_STATUS_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SW_STATUS_RESET {
DOUT_I2C_CONTROL_NOT_RESET_SW_STATUS     = 0x00000000,
DOUT_I2C_CONTROL_RESET_SW_STATUS         = 0x00000001,
} DOUT_I2C_CONTROL_SW_STATUS_RESET;

/*
 * DOUT_I2C_CONTROL_DDC_SELECT enum
 */

typedef enum DOUT_I2C_CONTROL_DDC_SELECT {
DOUT_I2C_CONTROL_SELECT_DDC1             = 0x00000000,
DOUT_I2C_CONTROL_SELECT_DDC2             = 0x00000001,
DOUT_I2C_CONTROL_SELECT_DDC3             = 0x00000002,
DOUT_I2C_CONTROL_SELECT_DDC4             = 0x00000003,
DOUT_I2C_CONTROL_SELECT_DDC5             = 0x00000004,
DOUT_I2C_CONTROL_SELECT_DDC6             = 0x00000005,
DOUT_I2C_CONTROL_SELECT_DDCVGA           = 0x00000006,
} DOUT_I2C_CONTROL_DDC_SELECT;

/*
 * DOUT_I2C_CONTROL_TRANSACTION_COUNT enum
 */

typedef enum DOUT_I2C_CONTROL_TRANSACTION_COUNT {
DOUT_I2C_CONTROL_TRANS0                  = 0x00000000,
DOUT_I2C_CONTROL_TRANS0_TRANS1           = 0x00000001,
DOUT_I2C_CONTROL_TRANS0_TRANS1_TRANS2    = 0x00000002,
DOUT_I2C_CONTROL_TRANS0_TRANS1_TRANS2_TRANS3  = 0x00000003,
} DOUT_I2C_CONTROL_TRANSACTION_COUNT;

/*
 * DOUT_I2C_CONTROL_DBG_REF_SEL enum
 */

typedef enum DOUT_I2C_CONTROL_DBG_REF_SEL {
DOUT_I2C_CONTROL_NORMAL_DEBUG            = 0x00000000,
DOUT_I2C_CONTROL_FAST_REFERENCE_DEBUG    = 0x00000001,
} DOUT_I2C_CONTROL_DBG_REF_SEL;

/*
 * DOUT_I2C_ARBITRATION_SW_PRIORITY enum
 */

typedef enum DOUT_I2C_ARBITRATION_SW_PRIORITY {
DOUT_I2C_ARBITRATION_SW_PRIORITY_NORMAL  = 0x00000000,
DOUT_I2C_ARBITRATION_SW_PRIORITY_HIGH    = 0x00000001,
DOUT_I2C_ARBITRATION_SW_PRIORITY_0_RESERVED = 0x00000002,
DOUT_I2C_ARBITRATION_SW_PRIORITY_1_RESERVED = 0x00000003,
} DOUT_I2C_ARBITRATION_SW_PRIORITY;

/*
 * DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO enum
 */

typedef enum DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO {
DOUT_I2C_ARBITRATION_SW_QUEUE_ENABLED    = 0x00000000,
DOUT_I2C_ARBITRATION_SW_QUEUE_DISABLED   = 0x00000001,
} DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO;

/*
 * DOUT_I2C_ARBITRATION_ABORT_XFER enum
 */

typedef enum DOUT_I2C_ARBITRATION_ABORT_XFER {
DOUT_I2C_ARBITRATION_NOT_ABORT_CURRENT_TRANSFER = 0x00000000,
DOUT_I2C_ARBITRATION_ABORT_CURRENT_TRANSFER  = 0x00000001,
} DOUT_I2C_ARBITRATION_ABORT_XFER;

/*
 * DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ enum
 */

typedef enum DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ {
DOUT_I2C_ARBITRATION__NOT_USE_I2C_REG_REQ = 0x00000000,
DOUT_I2C_ARBITRATION__USE_I2C_REG_REQ    = 0x00000001,
} DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ;

/*
 * DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG enum
 */

typedef enum DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG {
DOUT_I2C_ARBITRATION_DONE__NOT_USING_I2C_REG = 0x00000000,
DOUT_I2C_ARBITRATION_DONE__USING_I2C_REG  = 0x00000001,
} DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG;

/*
 * DOUT_I2C_ACK enum
 */

typedef enum DOUT_I2C_ACK {
DOUT_I2C_NO_ACK                          = 0x00000000,
DOUT_I2C_ACK_TO_CLEAN                    = 0x00000001,
} DOUT_I2C_ACK;

/*
 * DOUT_I2C_DDC_SPEED_THRESHOLD enum
 */

typedef enum DOUT_I2C_DDC_SPEED_THRESHOLD {
DOUT_I2C_DDC_SPEED_THRESHOLD_BIG_THAN_ZERO  = 0x00000000,
DOUT_I2C_DDC_SPEED_THRESHOLD_QUATER_OF_TOTAL_SAMPLE  = 0x00000001,
DOUT_I2C_DDC_SPEED_THRESHOLD_HALF_OF_TOTAL_SAMPLE  = 0x00000002,
DOUT_I2C_DDC_SPEED_THRESHOLD_THREE_QUATERS_OF_TOTAL_SAMPLE  = 0x00000003,
} DOUT_I2C_DDC_SPEED_THRESHOLD;

/*
 * DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN enum
 */

typedef enum DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN {
DOUT_I2C_DDC_SETUP_DATA_DRIVE_BY_EXTERNAL_RESISTOR  = 0x00000000,
DOUT_I2C_DDC_SETUP_I2C_PAD_DRIVE_SDA     = 0x00000001,
} DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN;

/*
 * DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL enum
 */

typedef enum DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL {
DOUT_I2C_DDC_SETUP_DATA_DRIVE_FOR_10MCLKS  = 0x00000000,
DOUT_I2C_DDC_SETUP_DATA_DRIVE_FOR_20MCLKS  = 0x00000001,
} DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL;

/*
 * DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE enum
 */

typedef enum DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE {
DOUT_I2C_DDC_SETUP_EDID_DETECT_CONNECT   = 0x00000000,
DOUT_I2C_DDC_SETUP_EDID_DETECT_DISCONNECT  = 0x00000001,
} DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE;

/*
 * DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN enum
 */

typedef enum DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN {
DOUT_I2C_DDC_SETUP_CLK_DRIVE_BY_EXTERNAL_RESISTOR  = 0x00000000,
DOUT_I2C_DDC_SETUP_I2C_PAD_DRIVE_SCL     = 0x00000001,
} DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN;

/*
 * DOUT_I2C_TRANSACTION_STOP_ON_NACK enum
 */

typedef enum DOUT_I2C_TRANSACTION_STOP_ON_NACK {
DOUT_I2C_TRANSACTION_STOP_CURRENT_TRANS  = 0x00000000,
DOUT_I2C_TRANSACTION_STOP_ALL_TRANS      = 0x00000001,
} DOUT_I2C_TRANSACTION_STOP_ON_NACK;

/*
 * DOUT_I2C_DATA_INDEX_WRITE enum
 */

typedef enum DOUT_I2C_DATA_INDEX_WRITE {
DOUT_I2C_DATA__NOT_INDEX_WRITE           = 0x00000000,
DOUT_I2C_DATA__INDEX_WRITE               = 0x00000001,
} DOUT_I2C_DATA_INDEX_WRITE;

/*
 * DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET enum
 */

typedef enum DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET {
DOUT_I2C_EDID_NOT_SEND_RESET_BEFORE_EDID_READ_TRACTION = 0x00000000,
DOUT_I2C_EDID_SEND_RESET_BEFORE_EDID_READ_TRACTION  = 0x00000001,
} DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET;

/*
 * DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE enum
 */

typedef enum DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE {
DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE__LEVEL  = 0x00000000,
DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE__PULSE  = 0x00000001,
} DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE;

/*******************************************************
 * FBC Enums
 *******************************************************/

/*
 * FBC_IDLE_MASK_MASK_BITS enum
 */

typedef enum FBC_IDLE_MASK_MASK_BITS {
FBC_IDLE_MASK_DISP_REG_UPDATE            = 0x00000000,
FBC_IDLE_MASK_RESERVED1                  = 0x00000001,
FBC_IDLE_MASK_FBC_GRPH_COMP_EN           = 0x00000002,
FBC_IDLE_MASK_FBC_MIN_COMPRESSION        = 0x00000003,
FBC_IDLE_MASK_FBC_ALPHA_COMP_EN          = 0x00000004,
FBC_IDLE_MASK_FBC_ZERO_ALPHA_CHUNK_SKIP_EN  = 0x00000005,
FBC_IDLE_MASK_FBC_FORCE_COPY_TO_COMP_BUF  = 0x00000006,
FBC_IDLE_MASK_RESERVED7                  = 0x00000007,
FBC_IDLE_MASK_RESERVED8                  = 0x00000008,
FBC_IDLE_MASK_RESERVED9                  = 0x00000009,
FBC_IDLE_MASK_RESERVED10                 = 0x0000000a,
FBC_IDLE_MASK_RESERVED11                 = 0x0000000b,
FBC_IDLE_MASK_RESERVED12                 = 0x0000000c,
FBC_IDLE_MASK_RESERVED13                 = 0x0000000d,
FBC_IDLE_MASK_RESERVED14                 = 0x0000000e,
FBC_IDLE_MASK_RESERVED15                 = 0x0000000f,
FBC_IDLE_MASK_RESERVED16                 = 0x00000010,
FBC_IDLE_MASK_RESERVED17                 = 0x00000011,
FBC_IDLE_MASK_RESERVED18                 = 0x00000012,
FBC_IDLE_MASK_RESERVED19                 = 0x00000013,
FBC_IDLE_MASK_RESERVED20                 = 0x00000014,
FBC_IDLE_MASK_RESERVED21                 = 0x00000015,
FBC_IDLE_MASK_RESERVED22                 = 0x00000016,
FBC_IDLE_MASK_RESERVED23                 = 0x00000017,
FBC_IDLE_MASK_MC_HIT_REGION_0            = 0x00000018,
FBC_IDLE_MASK_MC_HIT_REGION_1            = 0x00000019,
FBC_IDLE_MASK_MC_HIT_REGION_2            = 0x0000001a,
FBC_IDLE_MASK_MC_HIT_REGION_3            = 0x0000001b,
FBC_IDLE_MASK_MC_WRITE                   = 0x0000001c,
FBC_IDLE_MASK_RESERVED29                 = 0x0000001d,
FBC_IDLE_MASK_RESERVED30                 = 0x0000001e,
FBC_IDLE_MASK_RESERVED31                 = 0x0000001f,
} FBC_IDLE_MASK_MASK_BITS;

/*******************************************************
 * DPCSRX Enums
 *******************************************************/

/*
 * DPCSRX_RX_CLOCK_CNTL_DPCS_SYMCLK_RX_SEL enum
 */

typedef enum DPCSRX_RX_CLOCK_CNTL_DPCS_SYMCLK_RX_SEL {
DPCSRX_BPHY_PCS_RX0_CLK                  = 0x00000000,
DPCSRX_BPHY_PCS_RX1_CLK                  = 0x00000001,
DPCSRX_BPHY_PCS_RX2_CLK                  = 0x00000002,
DPCSRX_BPHY_PCS_RX3_CLK                  = 0x00000003,
} DPCSRX_RX_CLOCK_CNTL_DPCS_SYMCLK_RX_SEL;

/*
 * DPCSRX_DBG_CFGCLK_SEL enum
 */

typedef enum DPCSRX_DBG_CFGCLK_SEL {
DPCSRX_DBG_CFGCLK_SEL_DC_DPCS_INF        = 0x00000000,
DPCSRX_DBG_CFGCLK_SEL_DPCS_BPHY_INF      = 0x00000001,
DPCSRX_DBG_CFGCLK_SEL_CBUS_SLAVE         = 0x00000002,
DPCSRX_DBG_CFGCLK_SEL_CBUS_MASTER        = 0x00000003,
} DPCSRX_DBG_CFGCLK_SEL;

/*
 * DPCSRX_RX_SYMCLK_SEL enum
 */

typedef enum DPCSRX_RX_SYMCLK_SEL {
DPCSRX_DBG_RX_SYMCLK_SEL_OUT0            = 0x00000000,
DPCSRX_DBG_RX_SYMCLK_SEL_OUT1            = 0x00000001,
DPCSRX_DBG_RX_SYMCLK_SEL_INT             = 0x00000002,
} DPCSRX_RX_SYMCLK_SEL;

/*******************************************************
 * DPCSTX Enums
 *******************************************************/

/*
 * DPCSTX_DBG_CFGCLK_SEL enum
 */

typedef enum DPCSTX_DBG_CFGCLK_SEL {
DPCSTX_DBG_CFGCLK_SEL_DC_DPCS_INF        = 0x00000000,
DPCSTX_DBG_CFGCLK_SEL_DPCS_BPHY_INF      = 0x00000001,
DPCSTX_DBG_CFGCLK_SEL_CBUS_SLAVE         = 0x00000002,
DPCSTX_DBG_CFGCLK_SEL_CBUS_MASTER        = 0x00000003,
} DPCSTX_DBG_CFGCLK_SEL;

/*
 * DPCSTX_TX_SYMCLK_SEL enum
 */

typedef enum DPCSTX_TX_SYMCLK_SEL {
DPCSTX_DBG_TX_SYMCLK_SEL_IN0             = 0x00000000,
DPCSTX_DBG_TX_SYMCLK_SEL_IN1             = 0x00000001,
DPCSTX_DBG_TX_SYMCLK_SEL_FIFO_WR         = 0x00000002,
} DPCSTX_TX_SYMCLK_SEL;

/*
 * DPCSTX_TX_SYMCLK_DIV2_SEL enum
 */

typedef enum DPCSTX_TX_SYMCLK_DIV2_SEL {
DPCSTX_DBG_TX_SYMCLK_DIV2_SEL_OUT0       = 0x00000000,
DPCSTX_DBG_TX_SYMCLK_DIV2_SEL_OUT1       = 0x00000001,
DPCSTX_DBG_TX_SYMCLK_DIV2_SEL_OUT2       = 0x00000002,
DPCSTX_DBG_TX_SYMCLK_DIV2_SEL_OUT3       = 0x00000003,
DPCSTX_DBG_TX_SYMCLK_DIV2_SEL_FIFO_RD    = 0x00000004,
DPCSTX_DBG_TX_SYMCLK_DIV2_SEL_INT        = 0x00000005,
} DPCSTX_TX_SYMCLK_DIV2_SEL;

/*******************************************************
 * CB Enums
 *******************************************************/

/*
 * SurfaceNumber enum
 */

typedef enum SurfaceNumber {
NUMBER_UNORM                             = 0x00000000,
NUMBER_SNORM                             = 0x00000001,
NUMBER_USCALED                           = 0x00000002,
NUMBER_SSCALED                           = 0x00000003,
NUMBER_UINT                              = 0x00000004,
NUMBER_SINT                              = 0x00000005,
NUMBER_SRGB                              = 0x00000006,
NUMBER_FLOAT                             = 0x00000007,
} SurfaceNumber;

/*
 * SurfaceSwap enum
 */

typedef enum SurfaceSwap {
SWAP_STD                                 = 0x00000000,
SWAP_ALT                                 = 0x00000001,
SWAP_STD_REV                             = 0x00000002,
SWAP_ALT_REV                             = 0x00000003,
} SurfaceSwap;

/*
 * CBMode enum
 */

typedef enum CBMode {
CB_DISABLE                               = 0x00000000,
CB_NORMAL                                = 0x00000001,
CB_ELIMINATE_FAST_CLEAR                  = 0x00000002,
CB_RESOLVE                               = 0x00000003,
CB_DECOMPRESS                            = 0x00000004,
CB_FMASK_DECOMPRESS                      = 0x00000005,
CB_DCC_DECOMPRESS                        = 0x00000006,
} CBMode;

/*
 * RoundMode enum
 */

typedef enum RoundMode {
ROUND_BY_HALF                            = 0x00000000,
ROUND_TRUNCATE                           = 0x00000001,
} RoundMode;

/*
 * SourceFormat enum
 */

typedef enum SourceFormat {
EXPORT_4C_32BPC                          = 0x00000000,
EXPORT_4C_16BPC                          = 0x00000001,
EXPORT_2C_32BPC_GR                       = 0x00000002,
EXPORT_2C_32BPC_AR                       = 0x00000003,
} SourceFormat;

/*
 * BlendOp enum
 */

typedef enum BlendOp {
BLEND_ZERO                               = 0x00000000,
BLEND_ONE                                = 0x00000001,
BLEND_SRC_COLOR                          = 0x00000002,
BLEND_ONE_MINUS_SRC_COLOR                = 0x00000003,
BLEND_SRC_ALPHA                          = 0x00000004,
BLEND_ONE_MINUS_SRC_ALPHA                = 0x00000005,
BLEND_DST_ALPHA                          = 0x00000006,
BLEND_ONE_MINUS_DST_ALPHA                = 0x00000007,
BLEND_DST_COLOR                          = 0x00000008,
BLEND_ONE_MINUS_DST_COLOR                = 0x00000009,
BLEND_SRC_ALPHA_SATURATE                 = 0x0000000a,
BLEND_BOTH_SRC_ALPHA                     = 0x0000000b,
BLEND_BOTH_INV_SRC_ALPHA                 = 0x0000000c,
BLEND_CONSTANT_COLOR                     = 0x0000000d,
BLEND_ONE_MINUS_CONSTANT_COLOR           = 0x0000000e,
BLEND_SRC1_COLOR                         = 0x0000000f,
BLEND_INV_SRC1_COLOR                     = 0x00000010,
BLEND_SRC1_ALPHA                         = 0x00000011,
BLEND_INV_SRC1_ALPHA                     = 0x00000012,
BLEND_CONSTANT_ALPHA                     = 0x00000013,
BLEND_ONE_MINUS_CONSTANT_ALPHA           = 0x00000014,
} BlendOp;

/*
 * CombFunc enum
 */

typedef enum CombFunc {
COMB_DST_PLUS_SRC                        = 0x00000000,
COMB_SRC_MINUS_DST                       = 0x00000001,
COMB_MIN_DST_SRC                         = 0x00000002,
COMB_MAX_DST_SRC                         = 0x00000003,
COMB_DST_MINUS_SRC                       = 0x00000004,
} CombFunc;

/*
 * BlendOpt enum
 */

typedef enum BlendOpt {
FORCE_OPT_AUTO                           = 0x00000000,
FORCE_OPT_DISABLE                        = 0x00000001,
FORCE_OPT_ENABLE_IF_SRC_A_0              = 0x00000002,
FORCE_OPT_ENABLE_IF_SRC_RGB_0            = 0x00000003,
FORCE_OPT_ENABLE_IF_SRC_ARGB_0           = 0x00000004,
FORCE_OPT_ENABLE_IF_SRC_A_1              = 0x00000005,
FORCE_OPT_ENABLE_IF_SRC_RGB_1            = 0x00000006,
FORCE_OPT_ENABLE_IF_SRC_ARGB_1           = 0x00000007,
} BlendOpt;

/*
 * CmaskCode enum
 */

typedef enum CmaskCode {
CMASK_CLR00_F0                           = 0x00000000,
CMASK_CLR00_F1                           = 0x00000001,
CMASK_CLR00_F2                           = 0x00000002,
CMASK_CLR00_FX                           = 0x00000003,
CMASK_CLR01_F0                           = 0x00000004,
CMASK_CLR01_F1                           = 0x00000005,
CMASK_CLR01_F2                           = 0x00000006,
CMASK_CLR01_FX                           = 0x00000007,
CMASK_CLR10_F0                           = 0x00000008,
CMASK_CLR10_F1                           = 0x00000009,
CMASK_CLR10_F2                           = 0x0000000a,
CMASK_CLR10_FX                           = 0x0000000b,
CMASK_CLR11_F0                           = 0x0000000c,
CMASK_CLR11_F1                           = 0x0000000d,
CMASK_CLR11_F2                           = 0x0000000e,
CMASK_CLR11_FX                           = 0x0000000f,
} CmaskCode;

/*
 * CmaskAddr enum
 */

typedef enum CmaskAddr {
CMASK_ADDR_TILED                         = 0x00000000,
CMASK_ADDR_LINEAR                        = 0x00000001,
CMASK_ADDR_COMPATIBLE                    = 0x00000002,
} CmaskAddr;

/*
 * MemArbMode enum
 */

typedef enum MemArbMode {
MEM_ARB_MODE_FIXED                       = 0x00000000,
MEM_ARB_MODE_AGE                         = 0x00000001,
MEM_ARB_MODE_WEIGHT                      = 0x00000002,
MEM_ARB_MODE_BOTH                        = 0x00000003,
} MemArbMode;

/*
 * CBPerfSel enum
 */

typedef enum CBPerfSel {
CB_PERF_SEL_NONE                         = 0x00000000,
CB_PERF_SEL_BUSY                         = 0x00000001,
CB_PERF_SEL_CORE_SCLK_VLD                = 0x00000002,
CB_PERF_SEL_REG_SCLK0_VLD                = 0x00000003,
CB_PERF_SEL_REG_SCLK1_VLD                = 0x00000004,
CB_PERF_SEL_DRAWN_QUAD                   = 0x00000005,
CB_PERF_SEL_DRAWN_PIXEL                  = 0x00000006,
CB_PERF_SEL_DRAWN_QUAD_FRAGMENT          = 0x00000007,
CB_PERF_SEL_DRAWN_TILE                   = 0x00000008,
CB_PERF_SEL_DB_CB_TILE_VALID_READY       = 0x00000009,
CB_PERF_SEL_DB_CB_TILE_VALID_READYB      = 0x0000000a,
CB_PERF_SEL_DB_CB_TILE_VALIDB_READY      = 0x0000000b,
CB_PERF_SEL_DB_CB_TILE_VALIDB_READYB     = 0x0000000c,
CB_PERF_SEL_CM_FC_TILE_VALID_READY       = 0x0000000d,
CB_PERF_SEL_CM_FC_TILE_VALID_READYB      = 0x0000000e,
CB_PERF_SEL_CM_FC_TILE_VALIDB_READY      = 0x0000000f,
CB_PERF_SEL_CM_FC_TILE_VALIDB_READYB     = 0x00000010,
CB_PERF_SEL_MERGE_TILE_ONLY_VALID_READY  = 0x00000011,
CB_PERF_SEL_MERGE_TILE_ONLY_VALID_READYB  = 0x00000012,
CB_PERF_SEL_DB_CB_LQUAD_VALID_READY      = 0x00000013,
CB_PERF_SEL_DB_CB_LQUAD_VALID_READYB     = 0x00000014,
CB_PERF_SEL_DB_CB_LQUAD_VALIDB_READY     = 0x00000015,
CB_PERF_SEL_DB_CB_LQUAD_VALIDB_READYB    = 0x00000016,
CB_PERF_SEL_LQUAD_NO_TILE                = 0x00000017,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_32_R  = 0x00000018,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_32_AR  = 0x00000019,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_32_GR  = 0x0000001a,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_32_ABGR  = 0x0000001b,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_FP16_ABGR  = 0x0000001c,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_SIGNED16_ABGR  = 0x0000001d,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_UNSIGNED16_ABGR  = 0x0000001e,
CB_PERF_SEL_QUAD_KILLED_BY_EXTRA_PIXEL_EXPORT  = 0x0000001f,
CB_PERF_SEL_QUAD_KILLED_BY_COLOR_INVALID  = 0x00000020,
CB_PERF_SEL_QUAD_KILLED_BY_NULL_TARGET_SHADER_MASK  = 0x00000021,
CB_PERF_SEL_QUAD_KILLED_BY_NULL_SAMPLE_MASK  = 0x00000022,
CB_PERF_SEL_QUAD_KILLED_BY_DISCARD_PIXEL  = 0x00000023,
CB_PERF_SEL_FC_CLEAR_QUAD_VALID_READY    = 0x00000024,
CB_PERF_SEL_FC_CLEAR_QUAD_VALID_READYB   = 0x00000025,
CB_PERF_SEL_FC_CLEAR_QUAD_VALIDB_READY   = 0x00000026,
CB_PERF_SEL_FC_CLEAR_QUAD_VALIDB_READYB  = 0x00000027,
CB_PERF_SEL_FOP_IN_VALID_READY           = 0x00000028,
CB_PERF_SEL_FOP_IN_VALID_READYB          = 0x00000029,
CB_PERF_SEL_FOP_IN_VALIDB_READY          = 0x0000002a,
CB_PERF_SEL_FOP_IN_VALIDB_READYB         = 0x0000002b,
CB_PERF_SEL_FC_CC_QUADFRAG_VALID_READY   = 0x0000002c,
CB_PERF_SEL_FC_CC_QUADFRAG_VALID_READYB  = 0x0000002d,
CB_PERF_SEL_FC_CC_QUADFRAG_VALIDB_READY  = 0x0000002e,
CB_PERF_SEL_FC_CC_QUADFRAG_VALIDB_READYB  = 0x0000002f,
CB_PERF_SEL_CC_IB_SR_FRAG_VALID_READY    = 0x00000030,
CB_PERF_SEL_CC_IB_SR_FRAG_VALID_READYB   = 0x00000031,
CB_PERF_SEL_CC_IB_SR_FRAG_VALIDB_READY   = 0x00000032,
CB_PERF_SEL_CC_IB_SR_FRAG_VALIDB_READYB  = 0x00000033,
CB_PERF_SEL_CC_IB_TB_FRAG_VALID_READY    = 0x00000034,
CB_PERF_SEL_CC_IB_TB_FRAG_VALID_READYB   = 0x00000035,
CB_PERF_SEL_CC_IB_TB_FRAG_VALIDB_READY   = 0x00000036,
CB_PERF_SEL_CC_IB_TB_FRAG_VALIDB_READYB  = 0x00000037,
CB_PERF_SEL_CC_RB_BC_EVENFRAG_VALID_READY  = 0x00000038,
CB_PERF_SEL_CC_RB_BC_EVENFRAG_VALID_READYB  = 0x00000039,
CB_PERF_SEL_CC_RB_BC_EVENFRAG_VALIDB_READY  = 0x0000003a,
CB_PERF_SEL_CC_RB_BC_EVENFRAG_VALIDB_READYB  = 0x0000003b,
CB_PERF_SEL_CC_RB_BC_ODDFRAG_VALID_READY  = 0x0000003c,
CB_PERF_SEL_CC_RB_BC_ODDFRAG_VALID_READYB  = 0x0000003d,
CB_PERF_SEL_CC_RB_BC_ODDFRAG_VALIDB_READY  = 0x0000003e,
CB_PERF_SEL_CC_RB_BC_ODDFRAG_VALIDB_READYB  = 0x0000003f,
CB_PERF_SEL_CC_BC_CS_FRAG_VALID          = 0x00000040,
CB_PERF_SEL_CM_CACHE_HIT                 = 0x00000041,
CB_PERF_SEL_CM_CACHE_TAG_MISS            = 0x00000042,
CB_PERF_SEL_CM_CACHE_SECTOR_MISS         = 0x00000043,
CB_PERF_SEL_CM_CACHE_REEVICTION_STALL    = 0x00000044,
CB_PERF_SEL_CM_CACHE_EVICT_NONZERO_INFLIGHT_STALL  = 0x00000045,
CB_PERF_SEL_CM_CACHE_REPLACE_PENDING_EVICT_STALL  = 0x00000046,
CB_PERF_SEL_CM_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL  = 0x00000047,
CB_PERF_SEL_CM_CACHE_READ_OUTPUT_STALL   = 0x00000048,
CB_PERF_SEL_CM_CACHE_WRITE_OUTPUT_STALL  = 0x00000049,
CB_PERF_SEL_CM_CACHE_ACK_OUTPUT_STALL    = 0x0000004a,
CB_PERF_SEL_CM_CACHE_STALL               = 0x0000004b,
CB_PERF_SEL_CM_CACHE_FLUSH               = 0x0000004c,
CB_PERF_SEL_CM_CACHE_TAGS_FLUSHED        = 0x0000004d,
CB_PERF_SEL_CM_CACHE_SECTORS_FLUSHED     = 0x0000004e,
CB_PERF_SEL_CM_CACHE_DIRTY_SECTORS_FLUSHED  = 0x0000004f,
CB_PERF_SEL_FC_CACHE_HIT                 = 0x00000050,
CB_PERF_SEL_FC_CACHE_TAG_MISS            = 0x00000051,
CB_PERF_SEL_FC_CACHE_SECTOR_MISS         = 0x00000052,
CB_PERF_SEL_FC_CACHE_REEVICTION_STALL    = 0x00000053,
CB_PERF_SEL_FC_CACHE_EVICT_NONZERO_INFLIGHT_STALL  = 0x00000054,
CB_PERF_SEL_FC_CACHE_REPLACE_PENDING_EVICT_STALL  = 0x00000055,
CB_PERF_SEL_FC_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL  = 0x00000056,
CB_PERF_SEL_FC_CACHE_READ_OUTPUT_STALL   = 0x00000057,
CB_PERF_SEL_FC_CACHE_WRITE_OUTPUT_STALL  = 0x00000058,
CB_PERF_SEL_FC_CACHE_ACK_OUTPUT_STALL    = 0x00000059,
CB_PERF_SEL_FC_CACHE_STALL               = 0x0000005a,
CB_PERF_SEL_FC_CACHE_FLUSH               = 0x0000005b,
CB_PERF_SEL_FC_CACHE_TAGS_FLUSHED        = 0x0000005c,
CB_PERF_SEL_FC_CACHE_SECTORS_FLUSHED     = 0x0000005d,
CB_PERF_SEL_FC_CACHE_DIRTY_SECTORS_FLUSHED  = 0x0000005e,
CB_PERF_SEL_CC_CACHE_HIT                 = 0x0000005f,
CB_PERF_SEL_CC_CACHE_TAG_MISS            = 0x00000060,
CB_PERF_SEL_CC_CACHE_SECTOR_MISS         = 0x00000061,
CB_PERF_SEL_CC_CACHE_REEVICTION_STALL    = 0x00000062,
CB_PERF_SEL_CC_CACHE_EVICT_NONZERO_INFLIGHT_STALL  = 0x00000063,
CB_PERF_SEL_CC_CACHE_REPLACE_PENDING_EVICT_STALL  = 0x00000064,
CB_PERF_SEL_CC_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL  = 0x00000065,
CB_PERF_SEL_CC_CACHE_READ_OUTPUT_STALL   = 0x00000066,
CB_PERF_SEL_CC_CACHE_WRITE_OUTPUT_STALL  = 0x00000067,
CB_PERF_SEL_CC_CACHE_ACK_OUTPUT_STALL    = 0x00000068,
CB_PERF_SEL_CC_CACHE_STALL               = 0x00000069,
CB_PERF_SEL_CC_CACHE_FLUSH               = 0x0000006a,
CB_PERF_SEL_CC_CACHE_TAGS_FLUSHED        = 0x0000006b,
CB_PERF_SEL_CC_CACHE_SECTORS_FLUSHED     = 0x0000006c,
CB_PERF_SEL_CC_CACHE_DIRTY_SECTORS_FLUSHED  = 0x0000006d,
CB_PERF_SEL_CC_CACHE_WA_TO_RMW_CONVERSION  = 0x0000006e,
CB_PERF_SEL_CC_CACHE_READS_SAVED_DUE_TO_DCC  = 0x0000006f,
CB_PERF_SEL_CB_TAP_WRREQ_VALID_READY     = 0x00000070,
CB_PERF_SEL_CB_TAP_WRREQ_VALID_READYB    = 0x00000071,
CB_PERF_SEL_CB_TAP_WRREQ_VALIDB_READY    = 0x00000072,
CB_PERF_SEL_CB_TAP_WRREQ_VALIDB_READYB   = 0x00000073,
CB_PERF_SEL_CM_MC_WRITE_REQUEST          = 0x00000074,
CB_PERF_SEL_FC_MC_WRITE_REQUEST          = 0x00000075,
CB_PERF_SEL_CC_MC_WRITE_REQUEST          = 0x00000076,
CB_PERF_SEL_CM_MC_WRITE_REQUESTS_IN_FLIGHT  = 0x00000077,
CB_PERF_SEL_FC_MC_WRITE_REQUESTS_IN_FLIGHT  = 0x00000078,
CB_PERF_SEL_CC_MC_WRITE_REQUESTS_IN_FLIGHT  = 0x00000079,
CB_PERF_SEL_CB_TAP_RDREQ_VALID_READY     = 0x0000007a,
CB_PERF_SEL_CB_TAP_RDREQ_VALID_READYB    = 0x0000007b,
CB_PERF_SEL_CB_TAP_RDREQ_VALIDB_READY    = 0x0000007c,
CB_PERF_SEL_CB_TAP_RDREQ_VALIDB_READYB   = 0x0000007d,
CB_PERF_SEL_CM_MC_READ_REQUEST           = 0x0000007e,
CB_PERF_SEL_FC_MC_READ_REQUEST           = 0x0000007f,
CB_PERF_SEL_CC_MC_READ_REQUEST           = 0x00000080,
CB_PERF_SEL_CM_MC_READ_REQUESTS_IN_FLIGHT  = 0x00000081,
CB_PERF_SEL_FC_MC_READ_REQUESTS_IN_FLIGHT  = 0x00000082,
CB_PERF_SEL_CC_MC_READ_REQUESTS_IN_FLIGHT  = 0x00000083,
CB_PERF_SEL_CM_TQ_FULL                   = 0x00000084,
CB_PERF_SEL_CM_TQ_FIFO_TILE_RESIDENCY_STALL  = 0x00000085,
CB_PERF_SEL_FC_QUAD_RDLAT_FIFO_FULL      = 0x00000086,
CB_PERF_SEL_FC_TILE_RDLAT_FIFO_FULL      = 0x00000087,
CB_PERF_SEL_FC_RDLAT_FIFO_QUAD_RESIDENCY_STALL  = 0x00000088,
CB_PERF_SEL_FOP_FMASK_RAW_STALL          = 0x00000089,
CB_PERF_SEL_FOP_FMASK_BYPASS_STALL       = 0x0000008a,
CB_PERF_SEL_CC_SF_FULL                   = 0x0000008b,
CB_PERF_SEL_CC_RB_FULL                   = 0x0000008c,
CB_PERF_SEL_CC_EVENFIFO_QUAD_RESIDENCY_STALL  = 0x0000008d,
CB_PERF_SEL_CC_ODDFIFO_QUAD_RESIDENCY_STALL  = 0x0000008e,
CB_PERF_SEL_BLENDER_RAW_HAZARD_STALL     = 0x0000008f,
CB_PERF_SEL_EVENT                        = 0x00000090,
CB_PERF_SEL_EVENT_CACHE_FLUSH_TS         = 0x00000091,
CB_PERF_SEL_EVENT_CONTEXT_DONE           = 0x00000092,
CB_PERF_SEL_EVENT_CACHE_FLUSH            = 0x00000093,
CB_PERF_SEL_EVENT_CACHE_FLUSH_AND_INV_TS_EVENT  = 0x00000094,
CB_PERF_SEL_EVENT_CACHE_FLUSH_AND_INV_EVENT  = 0x00000095,
CB_PERF_SEL_EVENT_FLUSH_AND_INV_CB_DATA_TS  = 0x00000096,
CB_PERF_SEL_EVENT_FLUSH_AND_INV_CB_META  = 0x00000097,
CB_PERF_SEL_CC_SURFACE_SYNC              = 0x00000098,
CB_PERF_SEL_CMASK_READ_DATA_0xC          = 0x00000099,
CB_PERF_SEL_CMASK_READ_DATA_0xD          = 0x0000009a,
CB_PERF_SEL_CMASK_READ_DATA_0xE          = 0x0000009b,
CB_PERF_SEL_CMASK_READ_DATA_0xF          = 0x0000009c,
CB_PERF_SEL_CMASK_WRITE_DATA_0xC         = 0x0000009d,
CB_PERF_SEL_CMASK_WRITE_DATA_0xD         = 0x0000009e,
CB_PERF_SEL_CMASK_WRITE_DATA_0xE         = 0x0000009f,
CB_PERF_SEL_CMASK_WRITE_DATA_0xF         = 0x000000a0,
CB_PERF_SEL_TWO_PROBE_QUAD_FRAGMENT      = 0x000000a1,
CB_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT  = 0x000000a2,
CB_PERF_SEL_DUAL_SOURCE_COLOR_QUAD_FRAGMENT  = 0x000000a3,
CB_PERF_SEL_QUAD_HAS_1_FRAGMENT_BEFORE_UPDATE  = 0x000000a4,
CB_PERF_SEL_QUAD_HAS_2_FRAGMENTS_BEFORE_UPDATE  = 0x000000a5,
CB_PERF_SEL_QUAD_HAS_3_FRAGMENTS_BEFORE_UPDATE  = 0x000000a6,
CB_PERF_SEL_QUAD_HAS_4_FRAGMENTS_BEFORE_UPDATE  = 0x000000a7,
CB_PERF_SEL_QUAD_HAS_5_FRAGMENTS_BEFORE_UPDATE  = 0x000000a8,
CB_PERF_SEL_QUAD_HAS_6_FRAGMENTS_BEFORE_UPDATE  = 0x000000a9,
CB_PERF_SEL_QUAD_HAS_7_FRAGMENTS_BEFORE_UPDATE  = 0x000000aa,
CB_PERF_SEL_QUAD_HAS_8_FRAGMENTS_BEFORE_UPDATE  = 0x000000ab,
CB_PERF_SEL_QUAD_HAS_1_FRAGMENT_AFTER_UPDATE  = 0x000000ac,
CB_PERF_SEL_QUAD_HAS_2_FRAGMENTS_AFTER_UPDATE  = 0x000000ad,
CB_PERF_SEL_QUAD_HAS_3_FRAGMENTS_AFTER_UPDATE  = 0x000000ae,
CB_PERF_SEL_QUAD_HAS_4_FRAGMENTS_AFTER_UPDATE  = 0x000000af,
CB_PERF_SEL_QUAD_HAS_5_FRAGMENTS_AFTER_UPDATE  = 0x000000b0,
CB_PERF_SEL_QUAD_HAS_6_FRAGMENTS_AFTER_UPDATE  = 0x000000b1,
CB_PERF_SEL_QUAD_HAS_7_FRAGMENTS_AFTER_UPDATE  = 0x000000b2,
CB_PERF_SEL_QUAD_HAS_8_FRAGMENTS_AFTER_UPDATE  = 0x000000b3,
CB_PERF_SEL_QUAD_ADDED_1_FRAGMENT        = 0x000000b4,
CB_PERF_SEL_QUAD_ADDED_2_FRAGMENTS       = 0x000000b5,
CB_PERF_SEL_QUAD_ADDED_3_FRAGMENTS       = 0x000000b6,
CB_PERF_SEL_QUAD_ADDED_4_FRAGMENTS       = 0x000000b7,
CB_PERF_SEL_QUAD_ADDED_5_FRAGMENTS       = 0x000000b8,
CB_PERF_SEL_QUAD_ADDED_6_FRAGMENTS       = 0x000000b9,
CB_PERF_SEL_QUAD_ADDED_7_FRAGMENTS       = 0x000000ba,
CB_PERF_SEL_QUAD_REMOVED_1_FRAGMENT      = 0x000000bb,
CB_PERF_SEL_QUAD_REMOVED_2_FRAGMENTS     = 0x000000bc,
CB_PERF_SEL_QUAD_REMOVED_3_FRAGMENTS     = 0x000000bd,
CB_PERF_SEL_QUAD_REMOVED_4_FRAGMENTS     = 0x000000be,
CB_PERF_SEL_QUAD_REMOVED_5_FRAGMENTS     = 0x000000bf,
CB_PERF_SEL_QUAD_REMOVED_6_FRAGMENTS     = 0x000000c0,
CB_PERF_SEL_QUAD_REMOVED_7_FRAGMENTS     = 0x000000c1,
CB_PERF_SEL_QUAD_READS_FRAGMENT_0        = 0x000000c2,
CB_PERF_SEL_QUAD_READS_FRAGMENT_1        = 0x000000c3,
CB_PERF_SEL_QUAD_READS_FRAGMENT_2        = 0x000000c4,
CB_PERF_SEL_QUAD_READS_FRAGMENT_3        = 0x000000c5,
CB_PERF_SEL_QUAD_READS_FRAGMENT_4        = 0x000000c6,
CB_PERF_SEL_QUAD_READS_FRAGMENT_5        = 0x000000c7,
CB_PERF_SEL_QUAD_READS_FRAGMENT_6        = 0x000000c8,
CB_PERF_SEL_QUAD_READS_FRAGMENT_7        = 0x000000c9,
CB_PERF_SEL_QUAD_WRITES_FRAGMENT_0       = 0x000000ca,
CB_PERF_SEL_QUAD_WRITES_FRAGMENT_1       = 0x000000cb,
CB_PERF_SEL_QUAD_WRITES_FRAGMENT_2       = 0x000000cc,
CB_PERF_SEL_QUAD_WRITES_FRAGMENT_3       = 0x000000cd,
CB_PERF_SEL_QUAD_WRITES_FRAGMENT_4       = 0x000000ce,
CB_PERF_SEL_QUAD_WRITES_FRAGMENT_5       = 0x000000cf,
CB_PERF_SEL_QUAD_WRITES_FRAGMENT_6       = 0x000000d0,
CB_PERF_SEL_QUAD_WRITES_FRAGMENT_7       = 0x000000d1,
CB_PERF_SEL_QUAD_BLEND_OPT_DONT_READ_DST  = 0x000000d2,
CB_PERF_SEL_QUAD_BLEND_OPT_BLEND_BYPASS  = 0x000000d3,
CB_PERF_SEL_QUAD_BLEND_OPT_DISCARD_PIXELS  = 0x000000d4,
CB_PERF_SEL_QUAD_DST_READ_COULD_HAVE_BEEN_OPTIMIZED  = 0x000000d5,
CB_PERF_SEL_QUAD_BLENDING_COULD_HAVE_BEEN_BYPASSED  = 0x000000d6,
CB_PERF_SEL_QUAD_COULD_HAVE_BEEN_DISCARDED  = 0x000000d7,
CB_PERF_SEL_BLEND_OPT_PIXELS_RESULT_EQ_DEST  = 0x000000d8,
CB_PERF_SEL_DRAWN_BUSY                   = 0x000000d9,
CB_PERF_SEL_TILE_TO_CMR_REGION_BUSY      = 0x000000da,
CB_PERF_SEL_CMR_TO_FCR_REGION_BUSY       = 0x000000db,
CB_PERF_SEL_FCR_TO_CCR_REGION_BUSY       = 0x000000dc,
CB_PERF_SEL_CCR_TO_CCW_REGION_BUSY       = 0x000000dd,
CB_PERF_SEL_FC_PF_SLOW_MODE_QUAD_EMPTY_HALF_DROPPED  = 0x000000de,
CB_PERF_SEL_FC_SEQUENCER_CLEAR           = 0x000000df,
CB_PERF_SEL_FC_SEQUENCER_ELIMINATE_FAST_CLEAR  = 0x000000e0,
CB_PERF_SEL_FC_SEQUENCER_FMASK_DECOMPRESS  = 0x000000e1,
CB_PERF_SEL_FC_SEQUENCER_FMASK_COMPRESSION_DISABLE  = 0x000000e2,
CB_PERF_SEL_FC_KEYID_RDLAT_FIFO_FULL     = 0x000000e3,
CB_PERF_SEL_FC_DOC_IS_STALLED            = 0x000000e4,
CB_PERF_SEL_FC_DOC_MRTS_NOT_COMBINED     = 0x000000e5,
CB_PERF_SEL_FC_DOC_MRTS_COMBINED         = 0x000000e6,
CB_PERF_SEL_FC_DOC_QTILE_CAM_MISS        = 0x000000e7,
CB_PERF_SEL_FC_DOC_QTILE_CAM_HIT         = 0x000000e8,
CB_PERF_SEL_FC_DOC_CLINE_CAM_MISS        = 0x000000e9,
CB_PERF_SEL_FC_DOC_CLINE_CAM_HIT         = 0x000000ea,
CB_PERF_SEL_FC_DOC_QUAD_PTR_FIFO_IS_FULL  = 0x000000eb,
CB_PERF_SEL_FC_DOC_OVERWROTE_1_SECTOR    = 0x000000ec,
CB_PERF_SEL_FC_DOC_OVERWROTE_2_SECTORS   = 0x000000ed,
CB_PERF_SEL_FC_DOC_OVERWROTE_3_SECTORS   = 0x000000ee,
CB_PERF_SEL_FC_DOC_OVERWROTE_4_SECTORS   = 0x000000ef,
CB_PERF_SEL_FC_DOC_TOTAL_OVERWRITTEN_SECTORS  = 0x000000f0,
CB_PERF_SEL_FC_DCC_CACHE_HIT             = 0x000000f1,
CB_PERF_SEL_FC_DCC_CACHE_TAG_MISS        = 0x000000f2,
CB_PERF_SEL_FC_DCC_CACHE_SECTOR_MISS     = 0x000000f3,
CB_PERF_SEL_FC_DCC_CACHE_REEVICTION_STALL  = 0x000000f4,
CB_PERF_SEL_FC_DCC_CACHE_EVICT_NONZERO_INFLIGHT_STALL  = 0x000000f5,
CB_PERF_SEL_FC_DCC_CACHE_REPLACE_PENDING_EVICT_STALL  = 0x000000f6,
CB_PERF_SEL_FC_DCC_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL  = 0x000000f7,
CB_PERF_SEL_FC_DCC_CACHE_READ_OUTPUT_STALL  = 0x000000f8,
CB_PERF_SEL_FC_DCC_CACHE_WRITE_OUTPUT_STALL  = 0x000000f9,
CB_PERF_SEL_FC_DCC_CACHE_ACK_OUTPUT_STALL  = 0x000000fa,
CB_PERF_SEL_FC_DCC_CACHE_STALL           = 0x000000fb,
CB_PERF_SEL_FC_DCC_CACHE_FLUSH           = 0x000000fc,
CB_PERF_SEL_FC_DCC_CACHE_TAGS_FLUSHED    = 0x000000fd,
CB_PERF_SEL_FC_DCC_CACHE_SECTORS_FLUSHED  = 0x000000fe,
CB_PERF_SEL_FC_DCC_CACHE_DIRTY_SECTORS_FLUSHED  = 0x000000ff,
CB_PERF_SEL_CC_DCC_BEYOND_TILE_SPLIT     = 0x00000100,
CB_PERF_SEL_FC_MC_DCC_WRITE_REQUEST      = 0x00000101,
CB_PERF_SEL_FC_MC_DCC_WRITE_REQUESTS_IN_FLIGHT  = 0x00000102,
CB_PERF_SEL_FC_MC_DCC_READ_REQUEST       = 0x00000103,
CB_PERF_SEL_FC_MC_DCC_READ_REQUESTS_IN_FLIGHT  = 0x00000104,
CB_PERF_SEL_CC_DCC_RDREQ_STALL           = 0x00000105,
CB_PERF_SEL_CC_DCC_DECOMPRESS_TIDS_IN    = 0x00000106,
CB_PERF_SEL_CC_DCC_DECOMPRESS_TIDS_OUT   = 0x00000107,
CB_PERF_SEL_CC_DCC_COMPRESS_TIDS_IN      = 0x00000108,
CB_PERF_SEL_CC_DCC_COMPRESS_TIDS_OUT     = 0x00000109,
CB_PERF_SEL_FC_DCC_KEY_VALUE__CLEAR      = 0x0000010a,
CB_PERF_SEL_CC_DCC_KEY_VALUE__4_BLOCKS__2TO1  = 0x0000010b,
CB_PERF_SEL_CC_DCC_KEY_VALUE__3BLOCKS_2TO1__1BLOCK_2TO2  = 0x0000010c,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO1__1BLOCK_2TO2__1BLOCK_2TO1  = 0x0000010d,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_2TO2__2BLOCKS_2TO1  = 0x0000010e,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__3BLOCKS_2TO1  = 0x0000010f,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO1__2BLOCKS_2TO2  = 0x00000110,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__2BLOCKS_2TO2__1BLOCK_2TO1  = 0x00000111,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_2TO2__1BLOCK_2TO1__1BLOCK_2TO2  = 0x00000112,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_2TO1__1BLOCK_2TO2__1BLOCK_2TO1  = 0x00000113,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO2__2BLOCKS_2TO1  = 0x00000114,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__2BLOCKS_2TO1__1BLOCK_2TO2  = 0x00000115,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__3BLOCKS_2TO2  = 0x00000116,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_2TO1__2BLOCKS_2TO2  = 0x00000117,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO2__1BLOCK_2TO1__1BLOCK_2TO2  = 0x00000118,
CB_PERF_SEL_CC_DCC_KEY_VALUE__3BLOCKS_2TO2__1BLOCK_2TO1  = 0x00000119,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_4TO1  = 0x0000011a,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO1__1BLOCK_4TO2  = 0x0000011b,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO1__1BLOCK_4TO3  = 0x0000011c,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO1__1BLOCK_4TO4  = 0x0000011d,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO2__1BLOCK_4TO1  = 0x0000011e,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_4TO2  = 0x0000011f,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO2__1BLOCK_4TO3  = 0x00000120,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO2__1BLOCK_4TO4  = 0x00000121,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO3__1BLOCK_4TO1  = 0x00000122,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO3__1BLOCK_4TO2  = 0x00000123,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_4TO3  = 0x00000124,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO3__1BLOCK_4TO4  = 0x00000125,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO4__1BLOCK_4TO1  = 0x00000126,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO4__1BLOCK_4TO2  = 0x00000127,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO4__1BLOCK_4TO3  = 0x00000128,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO1__1BLOCK_4TO1  = 0x00000129,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO1__1BLOCK_4TO2  = 0x0000012a,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO1__1BLOCK_4TO3  = 0x0000012b,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO1__1BLOCK_4TO4  = 0x0000012c,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_2TO2__1BLOCK_4TO1  = 0x0000012d,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_2TO2__1BLOCK_4TO2  = 0x0000012e,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_2TO2__1BLOCK_4TO3  = 0x0000012f,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_2TO2__1BLOCK_4TO4  = 0x00000130,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_2TO1__1BLOCK_4TO1  = 0x00000131,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_2TO1__1BLOCK_4TO2  = 0x00000132,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_2TO1__1BLOCK_4TO3  = 0x00000133,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_2TO1__1BLOCK_4TO4  = 0x00000134,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO2__1BLOCK_4TO1  = 0x00000135,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO2__1BLOCK_4TO2  = 0x00000136,
CB_PERF_SEL_CC_DCC_KEY_VALUE__2BLOCKS_2TO2__1BLOCK_4TO3  = 0x00000137,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_4TO1__1BLOCK_2TO1  = 0x00000138,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_4TO2__1BLOCK_2TO1  = 0x00000139,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_4TO3__1BLOCK_2TO1  = 0x0000013a,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_4TO4__1BLOCK_2TO1  = 0x0000013b,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_4TO1__1BLOCK_2TO1  = 0x0000013c,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_4TO2__1BLOCK_2TO1  = 0x0000013d,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_4TO3__1BLOCK_2TO1  = 0x0000013e,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_4TO4__1BLOCK_2TO1  = 0x0000013f,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_4TO1__1BLOCK_2TO2  = 0x00000140,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_4TO2__1BLOCK_2TO2  = 0x00000141,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_4TO3__1BLOCK_2TO2  = 0x00000142,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_4TO4__1BLOCK_2TO2  = 0x00000143,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_4TO1__1BLOCK_2TO2  = 0x00000144,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_4TO2__1BLOCK_2TO2  = 0x00000145,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_4TO3__1BLOCK_2TO2  = 0x00000146,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO1__2BLOCKS_2TO1  = 0x00000147,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO2__2BLOCKS_2TO1  = 0x00000148,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO3__2BLOCKS_2TO1  = 0x00000149,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO4__2BLOCKS_2TO1  = 0x0000014a,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO1__2BLOCKS_2TO2  = 0x0000014b,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO2__2BLOCKS_2TO2  = 0x0000014c,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO3__2BLOCKS_2TO2  = 0x0000014d,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO1__1BLOCK_2TO1__1BLOCK_2TO2  = 0x0000014e,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO2__1BLOCK_2TO1__1BLOCK_2TO2  = 0x0000014f,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO3__1BLOCK_2TO1__1BLOCK_2TO2  = 0x00000150,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO4__1BLOCK_2TO1__1BLOCK_2TO2  = 0x00000151,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO1__1BLOCK_2TO2__1BLOCK_2TO1  = 0x00000152,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO2__1BLOCK_2TO2__1BLOCK_2TO1  = 0x00000153,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO3__1BLOCK_2TO2__1BLOCK_2TO1  = 0x00000154,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_4TO4__1BLOCK_2TO2__1BLOCK_2TO1  = 0x00000155,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_6TO1  = 0x00000156,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_6TO2  = 0x00000157,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_6TO3  = 0x00000158,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_6TO4  = 0x00000159,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_6TO5  = 0x0000015a,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__1BLOCK_6TO6  = 0x0000015b,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__INV0  = 0x0000015c,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO1__INV1  = 0x0000015d,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_6TO1  = 0x0000015e,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_6TO2  = 0x0000015f,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_6TO3  = 0x00000160,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_6TO4  = 0x00000161,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__1BLOCK_6TO5  = 0x00000162,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__INV0  = 0x00000163,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_2TO2__INV1  = 0x00000164,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO1__1BLOCK_2TO1  = 0x00000165,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO2__1BLOCK_2TO1  = 0x00000166,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO3__1BLOCK_2TO1  = 0x00000167,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO4__1BLOCK_2TO1  = 0x00000168,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO5__1BLOCK_2TO1  = 0x00000169,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO6__1BLOCK_2TO1  = 0x0000016a,
CB_PERF_SEL_CC_DCC_KEY_VALUE__INV0__1BLOCK_2TO1  = 0x0000016b,
CB_PERF_SEL_CC_DCC_KEY_VALUE__INV1__1BLOCK_2TO1  = 0x0000016c,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO1__1BLOCK_2TO2  = 0x0000016d,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO2__1BLOCK_2TO2  = 0x0000016e,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO3__1BLOCK_2TO2  = 0x0000016f,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO4__1BLOCK_2TO2  = 0x00000170,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_6TO5__1BLOCK_2TO2  = 0x00000171,
CB_PERF_SEL_CC_DCC_KEY_VALUE__INV0__1BLOCK_2TO2  = 0x00000172,
CB_PERF_SEL_CC_DCC_KEY_VALUE__INV1__1BLOCK_2TO2  = 0x00000173,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_8TO1  = 0x00000174,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_8TO2  = 0x00000175,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_8TO3  = 0x00000176,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_8TO4  = 0x00000177,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_8TO5  = 0x00000178,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_8TO6  = 0x00000179,
CB_PERF_SEL_CC_DCC_KEY_VALUE__1BLOCK_8TO7  = 0x0000017a,
CB_PERF_SEL_CC_DCC_KEY_VALUE__UNCOMPRESSED  = 0x0000017b,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_2TO1   = 0x0000017c,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_4TO1   = 0x0000017d,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_4TO2   = 0x0000017e,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_4TO3   = 0x0000017f,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_6TO1   = 0x00000180,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_6TO2   = 0x00000181,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_6TO3   = 0x00000182,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_6TO4   = 0x00000183,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_6TO5   = 0x00000184,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_8TO1   = 0x00000185,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_8TO2   = 0x00000186,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_8TO3   = 0x00000187,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_8TO4   = 0x00000188,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_8TO5   = 0x00000189,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_8TO6   = 0x0000018a,
CB_PERF_SEL_CC_DCC_COMPRESS_RATIO_8TO7   = 0x0000018b,
CB_PERF_SEL_RBP_EXPORT_8PIX_LIT_BOTH     = 0x0000018c,
CB_PERF_SEL_RBP_EXPORT_8PIX_LIT_LEFT     = 0x0000018d,
CB_PERF_SEL_RBP_EXPORT_8PIX_LIT_RIGHT    = 0x0000018e,
CB_PERF_SEL_RBP_SPLIT_MICROTILE          = 0x0000018f,
CB_PERF_SEL_RBP_SPLIT_AA_SAMPLE_MASK     = 0x00000190,
CB_PERF_SEL_RBP_SPLIT_PARTIAL_TARGET_MASK  = 0x00000191,
CB_PERF_SEL_RBP_SPLIT_LINEAR_ADDRESSING  = 0x00000192,
CB_PERF_SEL_RBP_SPLIT_AA_NO_FMASK_COMPRESS  = 0x00000193,
CB_PERF_SEL_RBP_INSERT_MISSING_LAST_QUAD  = 0x00000194,
} CBPerfSel;

/*
 * CBPerfOpFilterSel enum
 */

typedef enum CBPerfOpFilterSel {
CB_PERF_OP_FILTER_SEL_WRITE_ONLY         = 0x00000000,
CB_PERF_OP_FILTER_SEL_NEEDS_DESTINATION  = 0x00000001,
CB_PERF_OP_FILTER_SEL_RESOLVE            = 0x00000002,
CB_PERF_OP_FILTER_SEL_DECOMPRESS         = 0x00000003,
CB_PERF_OP_FILTER_SEL_FMASK_DECOMPRESS   = 0x00000004,
CB_PERF_OP_FILTER_SEL_ELIMINATE_FAST_CLEAR  = 0x00000005,
} CBPerfOpFilterSel;

/*
 * CBPerfClearFilterSel enum
 */

typedef enum CBPerfClearFilterSel {
CB_PERF_CLEAR_FILTER_SEL_NONCLEAR        = 0x00000000,
CB_PERF_CLEAR_FILTER_SEL_CLEAR           = 0x00000001,
} CBPerfClearFilterSel;

/*******************************************************
 * TC Enums
 *******************************************************/

/*
 * TC_OP_MASKS enum
 */

typedef enum TC_OP_MASKS {
TC_OP_MASK_FLUSH_DENROM                  = 0x00000008,
TC_OP_MASK_64                            = 0x00000020,
TC_OP_MASK_NO_RTN                        = 0x00000040,
} TC_OP_MASKS;

/*
 * TC_OP enum
 */

typedef enum TC_OP {
TC_OP_READ                               = 0x00000000,
TC_OP_ATOMIC_FCMPSWAP_RTN_32             = 0x00000001,
TC_OP_ATOMIC_FMIN_RTN_32                 = 0x00000002,
TC_OP_ATOMIC_FMAX_RTN_32                 = 0x00000003,
TC_OP_RESERVED_FOP_RTN_32_0              = 0x00000004,
TC_OP_RESERVED_FOP_RTN_32_1              = 0x00000005,
TC_OP_RESERVED_FOP_RTN_32_2              = 0x00000006,
TC_OP_ATOMIC_SWAP_RTN_32                 = 0x00000007,
TC_OP_ATOMIC_CMPSWAP_RTN_32              = 0x00000008,
TC_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_RTN_32  = 0x00000009,
TC_OP_ATOMIC_FMIN_FLUSH_DENORM_RTN_32    = 0x0000000a,
TC_OP_ATOMIC_FMAX_FLUSH_DENORM_RTN_32    = 0x0000000b,
TC_OP_PROBE_FILTER                       = 0x0000000c,
TC_OP_RESERVED_FOP_FLUSH_DENORM_RTN_32_1  = 0x0000000d,
TC_OP_RESERVED_FOP_FLUSH_DENORM_RTN_32_2  = 0x0000000e,
TC_OP_ATOMIC_ADD_RTN_32                  = 0x0000000f,
TC_OP_ATOMIC_SUB_RTN_32                  = 0x00000010,
TC_OP_ATOMIC_SMIN_RTN_32                 = 0x00000011,
TC_OP_ATOMIC_UMIN_RTN_32                 = 0x00000012,
TC_OP_ATOMIC_SMAX_RTN_32                 = 0x00000013,
TC_OP_ATOMIC_UMAX_RTN_32                 = 0x00000014,
TC_OP_ATOMIC_AND_RTN_32                  = 0x00000015,
TC_OP_ATOMIC_OR_RTN_32                   = 0x00000016,
TC_OP_ATOMIC_XOR_RTN_32                  = 0x00000017,
TC_OP_ATOMIC_INC_RTN_32                  = 0x00000018,
TC_OP_ATOMIC_DEC_RTN_32                  = 0x00000019,
TC_OP_WBINVL1_VOL                        = 0x0000001a,
TC_OP_WBINVL1_SD                         = 0x0000001b,
TC_OP_RESERVED_NON_FLOAT_RTN_32_0        = 0x0000001c,
TC_OP_RESERVED_NON_FLOAT_RTN_32_1        = 0x0000001d,
TC_OP_RESERVED_NON_FLOAT_RTN_32_2        = 0x0000001e,
TC_OP_RESERVED_NON_FLOAT_RTN_32_3        = 0x0000001f,
TC_OP_WRITE                              = 0x00000020,
TC_OP_ATOMIC_FCMPSWAP_RTN_64             = 0x00000021,
TC_OP_ATOMIC_FMIN_RTN_64                 = 0x00000022,
TC_OP_ATOMIC_FMAX_RTN_64                 = 0x00000023,
TC_OP_RESERVED_FOP_RTN_64_0              = 0x00000024,
TC_OP_RESERVED_FOP_RTN_64_1              = 0x00000025,
TC_OP_RESERVED_FOP_RTN_64_2              = 0x00000026,
TC_OP_ATOMIC_SWAP_RTN_64                 = 0x00000027,
TC_OP_ATOMIC_CMPSWAP_RTN_64              = 0x00000028,
TC_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_RTN_64  = 0x00000029,
TC_OP_ATOMIC_FMIN_FLUSH_DENORM_RTN_64    = 0x0000002a,
TC_OP_ATOMIC_FMAX_FLUSH_DENORM_RTN_64    = 0x0000002b,
TC_OP_WBINVL2_SD                         = 0x0000002c,
TC_OP_RESERVED_FOP_FLUSH_DENORM_RTN_64_0  = 0x0000002d,
TC_OP_RESERVED_FOP_FLUSH_DENORM_RTN_64_1  = 0x0000002e,
TC_OP_ATOMIC_ADD_RTN_64                  = 0x0000002f,
TC_OP_ATOMIC_SUB_RTN_64                  = 0x00000030,
TC_OP_ATOMIC_SMIN_RTN_64                 = 0x00000031,
TC_OP_ATOMIC_UMIN_RTN_64                 = 0x00000032,
TC_OP_ATOMIC_SMAX_RTN_64                 = 0x00000033,
TC_OP_ATOMIC_UMAX_RTN_64                 = 0x00000034,
TC_OP_ATOMIC_AND_RTN_64                  = 0x00000035,
TC_OP_ATOMIC_OR_RTN_64                   = 0x00000036,
TC_OP_ATOMIC_XOR_RTN_64                  = 0x00000037,
TC_OP_ATOMIC_INC_RTN_64                  = 0x00000038,
TC_OP_ATOMIC_DEC_RTN_64                  = 0x00000039,
TC_OP_WBL2_NC                            = 0x0000003a,
TC_OP_WBL2_WC                            = 0x0000003b,
TC_OP_RESERVED_NON_FLOAT_RTN_64_1        = 0x0000003c,
TC_OP_RESERVED_NON_FLOAT_RTN_64_2        = 0x0000003d,
TC_OP_RESERVED_NON_FLOAT_RTN_64_3        = 0x0000003e,
TC_OP_RESERVED_NON_FLOAT_RTN_64_4        = 0x0000003f,
TC_OP_WBINVL1                            = 0x00000040,
TC_OP_ATOMIC_FCMPSWAP_32                 = 0x00000041,
TC_OP_ATOMIC_FMIN_32                     = 0x00000042,
TC_OP_ATOMIC_FMAX_32                     = 0x00000043,
TC_OP_RESERVED_FOP_32_0                  = 0x00000044,
TC_OP_RESERVED_FOP_32_1                  = 0x00000045,
TC_OP_RESERVED_FOP_32_2                  = 0x00000046,
TC_OP_ATOMIC_SWAP_32                     = 0x00000047,
TC_OP_ATOMIC_CMPSWAP_32                  = 0x00000048,
TC_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_32    = 0x00000049,
TC_OP_ATOMIC_FMIN_FLUSH_DENORM_32        = 0x0000004a,
TC_OP_ATOMIC_FMAX_FLUSH_DENORM_32        = 0x0000004b,
TC_OP_INV_METADATA                       = 0x0000004c,
TC_OP_RESERVED_FOP_FLUSH_DENORM_32_1     = 0x0000004d,
TC_OP_RESERVED_FOP_FLUSH_DENORM_32_2     = 0x0000004e,
TC_OP_ATOMIC_ADD_32                      = 0x0000004f,
TC_OP_ATOMIC_SUB_32                      = 0x00000050,
TC_OP_ATOMIC_SMIN_32                     = 0x00000051,
TC_OP_ATOMIC_UMIN_32                     = 0x00000052,
TC_OP_ATOMIC_SMAX_32                     = 0x00000053,
TC_OP_ATOMIC_UMAX_32                     = 0x00000054,
TC_OP_ATOMIC_AND_32                      = 0x00000055,
TC_OP_ATOMIC_OR_32                       = 0x00000056,
TC_OP_ATOMIC_XOR_32                      = 0x00000057,
TC_OP_ATOMIC_INC_32                      = 0x00000058,
TC_OP_ATOMIC_DEC_32                      = 0x00000059,
TC_OP_INVL2_NC                           = 0x0000005a,
TC_OP_NOP_RTN0                           = 0x0000005b,
TC_OP_RESERVED_NON_FLOAT_32_1            = 0x0000005c,
TC_OP_RESERVED_NON_FLOAT_32_2            = 0x0000005d,
TC_OP_RESERVED_NON_FLOAT_32_3            = 0x0000005e,
TC_OP_RESERVED_NON_FLOAT_32_4            = 0x0000005f,
TC_OP_WBINVL2                            = 0x00000060,
TC_OP_ATOMIC_FCMPSWAP_64                 = 0x00000061,
TC_OP_ATOMIC_FMIN_64                     = 0x00000062,
TC_OP_ATOMIC_FMAX_64                     = 0x00000063,
TC_OP_RESERVED_FOP_64_0                  = 0x00000064,
TC_OP_RESERVED_FOP_64_1                  = 0x00000065,
TC_OP_RESERVED_FOP_64_2                  = 0x00000066,
TC_OP_ATOMIC_SWAP_64                     = 0x00000067,
TC_OP_ATOMIC_CMPSWAP_64                  = 0x00000068,
TC_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_64    = 0x00000069,
TC_OP_ATOMIC_FMIN_FLUSH_DENORM_64        = 0x0000006a,
TC_OP_ATOMIC_FMAX_FLUSH_DENORM_64        = 0x0000006b,
TC_OP_RESERVED_FOP_FLUSH_DENORM_64_0     = 0x0000006c,
TC_OP_RESERVED_FOP_FLUSH_DENORM_64_1     = 0x0000006d,
TC_OP_RESERVED_FOP_FLUSH_DENORM_64_2     = 0x0000006e,
TC_OP_ATOMIC_ADD_64                      = 0x0000006f,
TC_OP_ATOMIC_SUB_64                      = 0x00000070,
TC_OP_ATOMIC_SMIN_64                     = 0x00000071,
TC_OP_ATOMIC_UMIN_64                     = 0x00000072,
TC_OP_ATOMIC_SMAX_64                     = 0x00000073,
TC_OP_ATOMIC_UMAX_64                     = 0x00000074,
TC_OP_ATOMIC_AND_64                      = 0x00000075,
TC_OP_ATOMIC_OR_64                       = 0x00000076,
TC_OP_ATOMIC_XOR_64                      = 0x00000077,
TC_OP_ATOMIC_INC_64                      = 0x00000078,
TC_OP_ATOMIC_DEC_64                      = 0x00000079,
TC_OP_WBINVL2_NC                         = 0x0000007a,
TC_OP_NOP_ACK                            = 0x0000007b,
TC_OP_RESERVED_NON_FLOAT_64_1            = 0x0000007c,
TC_OP_RESERVED_NON_FLOAT_64_2            = 0x0000007d,
TC_OP_RESERVED_NON_FLOAT_64_3            = 0x0000007e,
TC_OP_RESERVED_NON_FLOAT_64_4            = 0x0000007f,
} TC_OP;

/*
 * TC_CHUB_REQ_CREDITS_ENUM enum
 */

typedef enum TC_CHUB_REQ_CREDITS_ENUM {
TC_CHUB_REQ_CREDITS                      = 0x00000010,
} TC_CHUB_REQ_CREDITS_ENUM;

/*
 * CHUB_TC_RET_CREDITS_ENUM enum
 */

typedef enum CHUB_TC_RET_CREDITS_ENUM {
CHUB_TC_RET_CREDITS                      = 0x00000020,
} CHUB_TC_RET_CREDITS_ENUM;

/*
 * TC_NACKS enum
 */

typedef enum TC_NACKS {
TC_NACK_NO_FAULT                         = 0x00000000,
TC_NACK_PAGE_FAULT                       = 0x00000001,
TC_NACK_PROTECTION_FAULT                 = 0x00000002,
TC_NACK_DATA_ERROR                       = 0x00000003,
} TC_NACKS;

/*
 * TC_EA_CID enum
 */

typedef enum TC_EA_CID {
TC_EA_CID_RT                             = 0x00000000,
TC_EA_CID_FMASK                          = 0x00000001,
TC_EA_CID_DCC                            = 0x00000002,
TC_EA_CID_TCPMETA                        = 0x00000003,
TC_EA_CID_Z                              = 0x00000004,
TC_EA_CID_STENCIL                        = 0x00000005,
TC_EA_CID_HTILE                          = 0x00000006,
TC_EA_CID_MISC                           = 0x00000007,
TC_EA_CID_TCP                            = 0x00000008,
TC_EA_CID_SQC                            = 0x00000009,
TC_EA_CID_CPF                            = 0x0000000a,
TC_EA_CID_CPG                            = 0x0000000b,
TC_EA_CID_IA                             = 0x0000000c,
TC_EA_CID_WD                             = 0x0000000d,
TC_EA_CID_PA                             = 0x0000000e,
TC_EA_CID_UTCL2_TPI                      = 0x0000000f,
} TC_EA_CID;

/*******************************************************
 * SPI Enums
 *******************************************************/

/*
 * SPI_SAMPLE_CNTL enum
 */

typedef enum SPI_SAMPLE_CNTL {
CENTROIDS_ONLY                           = 0x00000000,
CENTERS_ONLY                             = 0x00000001,
CENTROIDS_AND_CENTERS                    = 0x00000002,
UNDEF                                    = 0x00000003,
} SPI_SAMPLE_CNTL;

/*
 * SPI_FOG_MODE enum
 */

typedef enum SPI_FOG_MODE {
SPI_FOG_NONE                             = 0x00000000,
SPI_FOG_EXP                              = 0x00000001,
SPI_FOG_EXP2                             = 0x00000002,
SPI_FOG_LINEAR                           = 0x00000003,
} SPI_FOG_MODE;

/*
 * SPI_PNT_SPRITE_OVERRIDE enum
 */

typedef enum SPI_PNT_SPRITE_OVERRIDE {
SPI_PNT_SPRITE_SEL_0                     = 0x00000000,
SPI_PNT_SPRITE_SEL_1                     = 0x00000001,
SPI_PNT_SPRITE_SEL_S                     = 0x00000002,
SPI_PNT_SPRITE_SEL_T                     = 0x00000003,
SPI_PNT_SPRITE_SEL_NONE                  = 0x00000004,
} SPI_PNT_SPRITE_OVERRIDE;

/*
 * SPI_PERFCNT_SEL enum
 */

typedef enum SPI_PERFCNT_SEL {
SPI_PERF_VS_WINDOW_VALID                 = 0x00000000,
SPI_PERF_VS_BUSY                         = 0x00000001,
SPI_PERF_VS_FIRST_WAVE                   = 0x00000002,
SPI_PERF_VS_LAST_WAVE                    = 0x00000003,
SPI_PERF_VS_LSHS_DEALLOC                 = 0x00000004,
SPI_PERF_VS_PC_STALL                     = 0x00000005,
SPI_PERF_VS_POS0_STALL                   = 0x00000006,
SPI_PERF_VS_POS1_STALL                   = 0x00000007,
SPI_PERF_VS_CRAWLER_STALL                = 0x00000008,
SPI_PERF_VS_EVENT_WAVE                   = 0x00000009,
SPI_PERF_VS_WAVE                         = 0x0000000a,
SPI_PERF_VS_PERS_UPD_FULL0               = 0x0000000b,
SPI_PERF_VS_PERS_UPD_FULL1               = 0x0000000c,
SPI_PERF_VS_LATE_ALLOC_FULL              = 0x0000000d,
SPI_PERF_VS_FIRST_SUBGRP                 = 0x0000000e,
SPI_PERF_VS_LAST_SUBGRP                  = 0x0000000f,
SPI_PERF_GS_WINDOW_VALID                 = 0x00000010,
SPI_PERF_GS_BUSY                         = 0x00000011,
SPI_PERF_GS_CRAWLER_STALL                = 0x00000012,
SPI_PERF_GS_EVENT_WAVE                   = 0x00000013,
SPI_PERF_GS_WAVE                         = 0x00000014,
SPI_PERF_GS_PERS_UPD_FULL0               = 0x00000015,
SPI_PERF_GS_PERS_UPD_FULL1               = 0x00000016,
SPI_PERF_GS_FIRST_SUBGRP                 = 0x00000017,
SPI_PERF_GS_LAST_SUBGRP                  = 0x00000018,
SPI_PERF_ES_WINDOW_VALID                 = 0x00000019,
SPI_PERF_ES_BUSY                         = 0x0000001a,
SPI_PERF_ES_CRAWLER_STALL                = 0x0000001b,
SPI_PERF_ES_FIRST_WAVE                   = 0x0000001c,
SPI_PERF_ES_LAST_WAVE                    = 0x0000001d,
SPI_PERF_ES_LSHS_DEALLOC                 = 0x0000001e,
SPI_PERF_ES_EVENT_WAVE                   = 0x0000001f,
SPI_PERF_ES_WAVE                         = 0x00000020,
SPI_PERF_ES_PERS_UPD_FULL0               = 0x00000021,
SPI_PERF_ES_PERS_UPD_FULL1               = 0x00000022,
SPI_PERF_ES_FIRST_SUBGRP                 = 0x00000023,
SPI_PERF_ES_LAST_SUBGRP                  = 0x00000024,
SPI_PERF_HS_WINDOW_VALID                 = 0x00000025,
SPI_PERF_HS_BUSY                         = 0x00000026,
SPI_PERF_HS_CRAWLER_STALL                = 0x00000027,
SPI_PERF_HS_FIRST_WAVE                   = 0x00000028,
SPI_PERF_HS_LAST_WAVE                    = 0x00000029,
SPI_PERF_HS_LSHS_DEALLOC                 = 0x0000002a,
SPI_PERF_HS_EVENT_WAVE                   = 0x0000002b,
SPI_PERF_HS_WAVE                         = 0x0000002c,
SPI_PERF_HS_PERS_UPD_FULL0               = 0x0000002d,
SPI_PERF_HS_PERS_UPD_FULL1               = 0x0000002e,
SPI_PERF_LS_WINDOW_VALID                 = 0x0000002f,
SPI_PERF_LS_BUSY                         = 0x00000030,
SPI_PERF_LS_CRAWLER_STALL                = 0x00000031,
SPI_PERF_LS_FIRST_WAVE                   = 0x00000032,
SPI_PERF_LS_LAST_WAVE                    = 0x00000033,
SPI_PERF_OFFCHIP_LDS_STALL_LS            = 0x00000034,
SPI_PERF_LS_EVENT_WAVE                   = 0x00000035,
SPI_PERF_LS_WAVE                         = 0x00000036,
SPI_PERF_LS_PERS_UPD_FULL0               = 0x00000037,
SPI_PERF_LS_PERS_UPD_FULL1               = 0x00000038,
SPI_PERF_CSG_WINDOW_VALID                = 0x00000039,
SPI_PERF_CSG_BUSY                        = 0x0000003a,
SPI_PERF_CSG_NUM_THREADGROUPS            = 0x0000003b,
SPI_PERF_CSG_CRAWLER_STALL               = 0x0000003c,
SPI_PERF_CSG_EVENT_WAVE                  = 0x0000003d,
SPI_PERF_CSG_WAVE                        = 0x0000003e,
SPI_PERF_CSN_WINDOW_VALID                = 0x0000003f,
SPI_PERF_CSN_BUSY                        = 0x00000040,
SPI_PERF_CSN_NUM_THREADGROUPS            = 0x00000041,
SPI_PERF_CSN_CRAWLER_STALL               = 0x00000042,
SPI_PERF_CSN_EVENT_WAVE                  = 0x00000043,
SPI_PERF_CSN_WAVE                        = 0x00000044,
SPI_PERF_PS_CTL_WINDOW_VALID             = 0x00000045,
SPI_PERF_PS_CTL_BUSY                     = 0x00000046,
SPI_PERF_PS_CTL_ACTIVE                   = 0x00000047,
SPI_PERF_PS_CTL_DEALLOC_BIN0             = 0x00000048,
SPI_PERF_PS_CTL_FPOS_BIN1_STALL          = 0x00000049,
SPI_PERF_PS_CTL_EVENT_WAVE               = 0x0000004a,
SPI_PERF_PS_CTL_WAVE                     = 0x0000004b,
SPI_PERF_PS_CTL_OPT_WAVE                 = 0x0000004c,
SPI_PERF_PS_CTL_PASS_BIN0                = 0x0000004d,
SPI_PERF_PS_CTL_PASS_BIN1                = 0x0000004e,
SPI_PERF_PS_CTL_FPOS_BIN2                = 0x0000004f,
SPI_PERF_PS_CTL_PRIM_BIN0                = 0x00000050,
SPI_PERF_PS_CTL_PRIM_BIN1                = 0x00000051,
SPI_PERF_PS_CTL_CNF_BIN2                 = 0x00000052,
SPI_PERF_PS_CTL_CNF_BIN3                 = 0x00000053,
SPI_PERF_PS_CTL_CRAWLER_STALL            = 0x00000054,
SPI_PERF_PS_CTL_LDS_RES_FULL             = 0x00000055,
SPI_PERF_PS_PERS_UPD_FULL0               = 0x00000056,
SPI_PERF_PS_PERS_UPD_FULL1               = 0x00000057,
SPI_PERF_PIX_ALLOC_PEND_CNT              = 0x00000058,
SPI_PERF_PIX_ALLOC_SCB_STALL             = 0x00000059,
SPI_PERF_PIX_ALLOC_DB0_STALL             = 0x0000005a,
SPI_PERF_PIX_ALLOC_DB1_STALL             = 0x0000005b,
SPI_PERF_PIX_ALLOC_DB2_STALL             = 0x0000005c,
SPI_PERF_PIX_ALLOC_DB3_STALL             = 0x0000005d,
SPI_PERF_LDS0_PC_VALID                   = 0x0000005e,
SPI_PERF_LDS1_PC_VALID                   = 0x0000005f,
SPI_PERF_RA_PIPE_REQ_BIN2                = 0x00000060,
SPI_PERF_RA_TASK_REQ_BIN3                = 0x00000061,
SPI_PERF_RA_WR_CTL_FULL                  = 0x00000062,
SPI_PERF_RA_REQ_NO_ALLOC                 = 0x00000063,
SPI_PERF_RA_REQ_NO_ALLOC_PS              = 0x00000064,
SPI_PERF_RA_REQ_NO_ALLOC_VS              = 0x00000065,
SPI_PERF_RA_REQ_NO_ALLOC_GS              = 0x00000066,
SPI_PERF_RA_REQ_NO_ALLOC_ES              = 0x00000067,
SPI_PERF_RA_REQ_NO_ALLOC_HS              = 0x00000068,
SPI_PERF_RA_REQ_NO_ALLOC_LS              = 0x00000069,
SPI_PERF_RA_REQ_NO_ALLOC_CSG             = 0x0000006a,
SPI_PERF_RA_REQ_NO_ALLOC_CSN             = 0x0000006b,
SPI_PERF_RA_RES_STALL_PS                 = 0x0000006c,
SPI_PERF_RA_RES_STALL_VS                 = 0x0000006d,
SPI_PERF_RA_RES_STALL_GS                 = 0x0000006e,
SPI_PERF_RA_RES_STALL_ES                 = 0x0000006f,
SPI_PERF_RA_RES_STALL_HS                 = 0x00000070,
SPI_PERF_RA_RES_STALL_LS                 = 0x00000071,
SPI_PERF_RA_RES_STALL_CSG                = 0x00000072,
SPI_PERF_RA_RES_STALL_CSN                = 0x00000073,
SPI_PERF_RA_TMP_STALL_PS                 = 0x00000074,
SPI_PERF_RA_TMP_STALL_VS                 = 0x00000075,
SPI_PERF_RA_TMP_STALL_GS                 = 0x00000076,
SPI_PERF_RA_TMP_STALL_ES                 = 0x00000077,
SPI_PERF_RA_TMP_STALL_HS                 = 0x00000078,
SPI_PERF_RA_TMP_STALL_LS                 = 0x00000079,
SPI_PERF_RA_TMP_STALL_CSG                = 0x0000007a,
SPI_PERF_RA_TMP_STALL_CSN                = 0x0000007b,
SPI_PERF_RA_WAVE_SIMD_FULL_PS            = 0x0000007c,
SPI_PERF_RA_WAVE_SIMD_FULL_VS            = 0x0000007d,
SPI_PERF_RA_WAVE_SIMD_FULL_GS            = 0x0000007e,
SPI_PERF_RA_WAVE_SIMD_FULL_ES            = 0x0000007f,
SPI_PERF_RA_WAVE_SIMD_FULL_HS            = 0x00000080,
SPI_PERF_RA_WAVE_SIMD_FULL_LS            = 0x00000081,
SPI_PERF_RA_WAVE_SIMD_FULL_CSG           = 0x00000082,
SPI_PERF_RA_WAVE_SIMD_FULL_CSN           = 0x00000083,
SPI_PERF_RA_VGPR_SIMD_FULL_PS            = 0x00000084,
SPI_PERF_RA_VGPR_SIMD_FULL_VS            = 0x00000085,
SPI_PERF_RA_VGPR_SIMD_FULL_GS            = 0x00000086,
SPI_PERF_RA_VGPR_SIMD_FULL_ES            = 0x00000087,
SPI_PERF_RA_VGPR_SIMD_FULL_HS            = 0x00000088,
SPI_PERF_RA_VGPR_SIMD_FULL_LS            = 0x00000089,
SPI_PERF_RA_VGPR_SIMD_FULL_CSG           = 0x0000008a,
SPI_PERF_RA_VGPR_SIMD_FULL_CSN           = 0x0000008b,
SPI_PERF_RA_SGPR_SIMD_FULL_PS            = 0x0000008c,
SPI_PERF_RA_SGPR_SIMD_FULL_VS            = 0x0000008d,
SPI_PERF_RA_SGPR_SIMD_FULL_GS            = 0x0000008e,
SPI_PERF_RA_SGPR_SIMD_FULL_ES            = 0x0000008f,
SPI_PERF_RA_SGPR_SIMD_FULL_HS            = 0x00000090,
SPI_PERF_RA_SGPR_SIMD_FULL_LS            = 0x00000091,
SPI_PERF_RA_SGPR_SIMD_FULL_CSG           = 0x00000092,
SPI_PERF_RA_SGPR_SIMD_FULL_CSN           = 0x00000093,
SPI_PERF_RA_LDS_CU_FULL_PS               = 0x00000094,
SPI_PERF_RA_LDS_CU_FULL_LS               = 0x00000095,
SPI_PERF_RA_LDS_CU_FULL_ES               = 0x00000096,
SPI_PERF_RA_LDS_CU_FULL_CSG              = 0x00000097,
SPI_PERF_RA_LDS_CU_FULL_CSN              = 0x00000098,
SPI_PERF_RA_BAR_CU_FULL_HS               = 0x00000099,
SPI_PERF_RA_BAR_CU_FULL_CSG              = 0x0000009a,
SPI_PERF_RA_BAR_CU_FULL_CSN              = 0x0000009b,
SPI_PERF_RA_BULKY_CU_FULL_CSG            = 0x0000009c,
SPI_PERF_RA_BULKY_CU_FULL_CSN            = 0x0000009d,
SPI_PERF_RA_TGLIM_CU_FULL_CSG            = 0x0000009e,
SPI_PERF_RA_TGLIM_CU_FULL_CSN            = 0x0000009f,
SPI_PERF_RA_WVLIM_STALL_PS               = 0x000000a0,
SPI_PERF_RA_WVLIM_STALL_VS               = 0x000000a1,
SPI_PERF_RA_WVLIM_STALL_GS               = 0x000000a2,
SPI_PERF_RA_WVLIM_STALL_ES               = 0x000000a3,
SPI_PERF_RA_WVLIM_STALL_HS               = 0x000000a4,
SPI_PERF_RA_WVLIM_STALL_LS               = 0x000000a5,
SPI_PERF_RA_WVLIM_STALL_CSG              = 0x000000a6,
SPI_PERF_RA_WVLIM_STALL_CSN              = 0x000000a7,
SPI_PERF_RA_PS_LOCK_NA                   = 0x000000a8,
SPI_PERF_RA_VS_LOCK                      = 0x000000a9,
SPI_PERF_RA_GS_LOCK                      = 0x000000aa,
SPI_PERF_RA_ES_LOCK                      = 0x000000ab,
SPI_PERF_RA_HS_LOCK                      = 0x000000ac,
SPI_PERF_RA_LS_LOCK                      = 0x000000ad,
SPI_PERF_RA_CSG_LOCK                     = 0x000000ae,
SPI_PERF_RA_CSN_LOCK                     = 0x000000af,
SPI_PERF_RA_RSV_UPD                      = 0x000000b0,
SPI_PERF_EXP_ARB_COL_CNT                 = 0x000000b1,
SPI_PERF_EXP_ARB_PAR_CNT                 = 0x000000b2,
SPI_PERF_EXP_ARB_POS_CNT                 = 0x000000b3,
SPI_PERF_EXP_ARB_GDS_CNT                 = 0x000000b4,
SPI_PERF_CLKGATE_BUSY_STALL              = 0x000000b5,
SPI_PERF_CLKGATE_ACTIVE_STALL            = 0x000000b6,
SPI_PERF_CLKGATE_ALL_CLOCKS_ON           = 0x000000b7,
SPI_PERF_CLKGATE_CGTT_DYN_ON             = 0x000000b8,
SPI_PERF_CLKGATE_CGTT_REG_ON             = 0x000000b9,
SPI_PERF_NUM_VS_POS_EXPORTS              = 0x000000ba,
SPI_PERF_NUM_VS_PARAM_EXPORTS            = 0x000000bb,
SPI_PERF_NUM_PS_COL_EXPORTS              = 0x000000bc,
SPI_PERF_ES_GRP_FIFO_FULL                = 0x000000bd,
SPI_PERF_GS_GRP_FIFO_FULL                = 0x000000be,
SPI_PERF_HS_GRP_FIFO_FULL                = 0x000000bf,
SPI_PERF_LS_GRP_FIFO_FULL                = 0x000000c0,
SPI_PERF_VS_ALLOC_CNT                    = 0x000000c1,
SPI_PERF_VS_LATE_ALLOC_ACCUM             = 0x000000c2,
SPI_PERF_PC_ALLOC_CNT                    = 0x000000c3,
SPI_PERF_PC_ALLOC_ACCUM                  = 0x000000c4,
} SPI_PERFCNT_SEL;

/*
 * SPI_SHADER_FORMAT enum
 */

typedef enum SPI_SHADER_FORMAT {
SPI_SHADER_NONE                          = 0x00000000,
SPI_SHADER_1COMP                         = 0x00000001,
SPI_SHADER_2COMP                         = 0x00000002,
SPI_SHADER_4COMPRESS                     = 0x00000003,
SPI_SHADER_4COMP                         = 0x00000004,
} SPI_SHADER_FORMAT;

/*
 * SPI_SHADER_EX_FORMAT enum
 */

typedef enum SPI_SHADER_EX_FORMAT {
SPI_SHADER_ZERO                          = 0x00000000,
SPI_SHADER_32_R                          = 0x00000001,
SPI_SHADER_32_GR                         = 0x00000002,
SPI_SHADER_32_AR                         = 0x00000003,
SPI_SHADER_FP16_ABGR                     = 0x00000004,
SPI_SHADER_UNORM16_ABGR                  = 0x00000005,
SPI_SHADER_SNORM16_ABGR                  = 0x00000006,
SPI_SHADER_UINT16_ABGR                   = 0x00000007,
SPI_SHADER_SINT16_ABGR                   = 0x00000008,
SPI_SHADER_32_ABGR                       = 0x00000009,
} SPI_SHADER_EX_FORMAT;

/*
 * CLKGATE_SM_MODE enum
 */

typedef enum CLKGATE_SM_MODE {
ON_SEQ                                   = 0x00000000,
OFF_SEQ                                  = 0x00000001,
PROG_SEQ                                 = 0x00000002,
READ_SEQ                                 = 0x00000003,
SM_MODE_RESERVED                         = 0x00000004,
} CLKGATE_SM_MODE;

/*
 * CLKGATE_BASE_MODE enum
 */

typedef enum CLKGATE_BASE_MODE {
MULT_8                                   = 0x00000000,
MULT_16                                  = 0x00000001,
} CLKGATE_BASE_MODE;

/*******************************************************
 * SQ Enums
 *******************************************************/

/*
 * SQ_TEX_CLAMP enum
 */

typedef enum SQ_TEX_CLAMP {
SQ_TEX_WRAP                              = 0x00000000,
SQ_TEX_MIRROR                            = 0x00000001,
SQ_TEX_CLAMP_LAST_TEXEL                  = 0x00000002,
SQ_TEX_MIRROR_ONCE_LAST_TEXEL            = 0x00000003,
SQ_TEX_CLAMP_HALF_BORDER                 = 0x00000004,
SQ_TEX_MIRROR_ONCE_HALF_BORDER           = 0x00000005,
SQ_TEX_CLAMP_BORDER                      = 0x00000006,
SQ_TEX_MIRROR_ONCE_BORDER                = 0x00000007,
} SQ_TEX_CLAMP;

/*
 * SQ_TEX_XY_FILTER enum
 */

typedef enum SQ_TEX_XY_FILTER {
SQ_TEX_XY_FILTER_POINT                   = 0x00000000,
SQ_TEX_XY_FILTER_BILINEAR                = 0x00000001,
SQ_TEX_XY_FILTER_ANISO_POINT             = 0x00000002,
SQ_TEX_XY_FILTER_ANISO_BILINEAR          = 0x00000003,
} SQ_TEX_XY_FILTER;

/*
 * SQ_TEX_Z_FILTER enum
 */

typedef enum SQ_TEX_Z_FILTER {
SQ_TEX_Z_FILTER_NONE                     = 0x00000000,
SQ_TEX_Z_FILTER_POINT                    = 0x00000001,
SQ_TEX_Z_FILTER_LINEAR                   = 0x00000002,
} SQ_TEX_Z_FILTER;

/*
 * SQ_TEX_MIP_FILTER enum
 */

typedef enum SQ_TEX_MIP_FILTER {
SQ_TEX_MIP_FILTER_NONE                   = 0x00000000,
SQ_TEX_MIP_FILTER_POINT                  = 0x00000001,
SQ_TEX_MIP_FILTER_LINEAR                 = 0x00000002,
SQ_TEX_MIP_FILTER_POINT_ANISO_ADJ        = 0x00000003,
} SQ_TEX_MIP_FILTER;

/*
 * SQ_TEX_ANISO_RATIO enum
 */

typedef enum SQ_TEX_ANISO_RATIO {
SQ_TEX_ANISO_RATIO_1                     = 0x00000000,
SQ_TEX_ANISO_RATIO_2                     = 0x00000001,
SQ_TEX_ANISO_RATIO_4                     = 0x00000002,
SQ_TEX_ANISO_RATIO_8                     = 0x00000003,
SQ_TEX_ANISO_RATIO_16                    = 0x00000004,
} SQ_TEX_ANISO_RATIO;

/*
 * SQ_TEX_DEPTH_COMPARE enum
 */

typedef enum SQ_TEX_DEPTH_COMPARE {
SQ_TEX_DEPTH_COMPARE_NEVER               = 0x00000000,
SQ_TEX_DEPTH_COMPARE_LESS                = 0x00000001,
SQ_TEX_DEPTH_COMPARE_EQUAL               = 0x00000002,
SQ_TEX_DEPTH_COMPARE_LESSEQUAL           = 0x00000003,
SQ_TEX_DEPTH_COMPARE_GREATER             = 0x00000004,
SQ_TEX_DEPTH_COMPARE_NOTEQUAL            = 0x00000005,
SQ_TEX_DEPTH_COMPARE_GREATEREQUAL        = 0x00000006,
SQ_TEX_DEPTH_COMPARE_ALWAYS              = 0x00000007,
} SQ_TEX_DEPTH_COMPARE;

/*
 * SQ_TEX_BORDER_COLOR enum
 */

typedef enum SQ_TEX_BORDER_COLOR {
SQ_TEX_BORDER_COLOR_TRANS_BLACK          = 0x00000000,
SQ_TEX_BORDER_COLOR_OPAQUE_BLACK         = 0x00000001,
SQ_TEX_BORDER_COLOR_OPAQUE_WHITE         = 0x00000002,
SQ_TEX_BORDER_COLOR_REGISTER             = 0x00000003,
} SQ_TEX_BORDER_COLOR;

/*
 * SQ_RSRC_BUF_TYPE enum
 */

typedef enum SQ_RSRC_BUF_TYPE {
SQ_RSRC_BUF                              = 0x00000000,
SQ_RSRC_BUF_RSVD_1                       = 0x00000001,
SQ_RSRC_BUF_RSVD_2                       = 0x00000002,
SQ_RSRC_BUF_RSVD_3                       = 0x00000003,
} SQ_RSRC_BUF_TYPE;

/*
 * SQ_RSRC_IMG_TYPE enum
 */

typedef enum SQ_RSRC_IMG_TYPE {
SQ_RSRC_IMG_RSVD_0                       = 0x00000000,
SQ_RSRC_IMG_RSVD_1                       = 0x00000001,
SQ_RSRC_IMG_RSVD_2                       = 0x00000002,
SQ_RSRC_IMG_RSVD_3                       = 0x00000003,
SQ_RSRC_IMG_RSVD_4                       = 0x00000004,
SQ_RSRC_IMG_RSVD_5                       = 0x00000005,
SQ_RSRC_IMG_RSVD_6                       = 0x00000006,
SQ_RSRC_IMG_RSVD_7                       = 0x00000007,
SQ_RSRC_IMG_1D                           = 0x00000008,
SQ_RSRC_IMG_2D                           = 0x00000009,
SQ_RSRC_IMG_3D                           = 0x0000000a,
SQ_RSRC_IMG_CUBE                         = 0x0000000b,
SQ_RSRC_IMG_1D_ARRAY                     = 0x0000000c,
SQ_RSRC_IMG_2D_ARRAY                     = 0x0000000d,
SQ_RSRC_IMG_2D_MSAA                      = 0x0000000e,
SQ_RSRC_IMG_2D_MSAA_ARRAY                = 0x0000000f,
} SQ_RSRC_IMG_TYPE;

/*
 * SQ_RSRC_FLAT_TYPE enum
 */

typedef enum SQ_RSRC_FLAT_TYPE {
SQ_RSRC_FLAT_RSVD_0                      = 0x00000000,
SQ_RSRC_FLAT                             = 0x00000001,
SQ_RSRC_FLAT_RSVD_2                      = 0x00000002,
SQ_RSRC_FLAT_RSVD_3                      = 0x00000003,
} SQ_RSRC_FLAT_TYPE;

/*
 * SQ_IMG_FILTER_TYPE enum
 */

typedef enum SQ_IMG_FILTER_TYPE {
SQ_IMG_FILTER_MODE_BLEND                 = 0x00000000,
SQ_IMG_FILTER_MODE_MIN                   = 0x00000001,
SQ_IMG_FILTER_MODE_MAX                   = 0x00000002,
} SQ_IMG_FILTER_TYPE;

/*
 * SQ_SEL_XYZW01 enum
 */

typedef enum SQ_SEL_XYZW01 {
SQ_SEL_0                                 = 0x00000000,
SQ_SEL_1                                 = 0x00000001,
SQ_SEL_RESERVED_0                        = 0x00000002,
SQ_SEL_RESERVED_1                        = 0x00000003,
SQ_SEL_X                                 = 0x00000004,
SQ_SEL_Y                                 = 0x00000005,
SQ_SEL_Z                                 = 0x00000006,
SQ_SEL_W                                 = 0x00000007,
} SQ_SEL_XYZW01;

/*
 * SQ_WAVE_TYPE enum
 */

typedef enum SQ_WAVE_TYPE {
SQ_WAVE_TYPE_PS                          = 0x00000000,
SQ_WAVE_TYPE_VS                          = 0x00000001,
SQ_WAVE_TYPE_GS                          = 0x00000002,
SQ_WAVE_TYPE_ES                          = 0x00000003,
SQ_WAVE_TYPE_HS                          = 0x00000004,
SQ_WAVE_TYPE_LS                          = 0x00000005,
SQ_WAVE_TYPE_CS                          = 0x00000006,
SQ_WAVE_TYPE_PS1                         = 0x00000007,
} SQ_WAVE_TYPE;

/*
 * SQ_THREAD_TRACE_TOKEN_TYPE enum
 */

typedef enum SQ_THREAD_TRACE_TOKEN_TYPE {
SQ_THREAD_TRACE_TOKEN_MISC               = 0x00000000,
SQ_THREAD_TRACE_TOKEN_TIMESTAMP          = 0x00000001,
SQ_THREAD_TRACE_TOKEN_REG                = 0x00000002,
SQ_THREAD_TRACE_TOKEN_WAVE_START         = 0x00000003,
SQ_THREAD_TRACE_TOKEN_WAVE_ALLOC         = 0x00000004,
SQ_THREAD_TRACE_TOKEN_REG_CSPRIV         = 0x00000005,
SQ_THREAD_TRACE_TOKEN_WAVE_END           = 0x00000006,
SQ_THREAD_TRACE_TOKEN_EVENT              = 0x00000007,
SQ_THREAD_TRACE_TOKEN_EVENT_CS           = 0x00000008,
SQ_THREAD_TRACE_TOKEN_EVENT_GFX1         = 0x00000009,
SQ_THREAD_TRACE_TOKEN_INST               = 0x0000000a,
SQ_THREAD_TRACE_TOKEN_INST_PC            = 0x0000000b,
SQ_THREAD_TRACE_TOKEN_INST_USERDATA      = 0x0000000c,
SQ_THREAD_TRACE_TOKEN_ISSUE              = 0x0000000d,
SQ_THREAD_TRACE_TOKEN_PERF               = 0x0000000e,
SQ_THREAD_TRACE_TOKEN_REG_CS             = 0x0000000f,
} SQ_THREAD_TRACE_TOKEN_TYPE;

/*
 * SQ_THREAD_TRACE_MISC_TOKEN_TYPE enum
 */

typedef enum SQ_THREAD_TRACE_MISC_TOKEN_TYPE {
SQ_THREAD_TRACE_MISC_TOKEN_TIME          = 0x00000000,
SQ_THREAD_TRACE_MISC_TOKEN_TIME_RESET    = 0x00000001,
SQ_THREAD_TRACE_MISC_TOKEN_PACKET_LOST   = 0x00000002,
SQ_THREAD_TRACE_MISC_TOKEN_SURF_SYNC     = 0x00000003,
SQ_THREAD_TRACE_MISC_TOKEN_TTRACE_STALL_BEGIN  = 0x00000004,
SQ_THREAD_TRACE_MISC_TOKEN_TTRACE_STALL_END  = 0x00000005,
SQ_THREAD_TRACE_MISC_TOKEN_SAVECTX       = 0x00000006,
SQ_THREAD_TRACE_MISC_TOKEN_SHOOT_DOWN    = 0x00000007,
} SQ_THREAD_TRACE_MISC_TOKEN_TYPE;

/*
 * SQ_THREAD_TRACE_INST_TYPE enum
 */

typedef enum SQ_THREAD_TRACE_INST_TYPE {
SQ_THREAD_TRACE_INST_TYPE_SMEM_RD        = 0x00000000,
SQ_THREAD_TRACE_INST_TYPE_SALU_32        = 0x00000001,
SQ_THREAD_TRACE_INST_TYPE_VMEM_RD        = 0x00000002,
SQ_THREAD_TRACE_INST_TYPE_VMEM_WR        = 0x00000003,
SQ_THREAD_TRACE_INST_TYPE_FLAT_WR        = 0x00000004,
SQ_THREAD_TRACE_INST_TYPE_VALU_32        = 0x00000005,
SQ_THREAD_TRACE_INST_TYPE_LDS            = 0x00000006,
SQ_THREAD_TRACE_INST_TYPE_PC             = 0x00000007,
SQ_THREAD_TRACE_INST_TYPE_EXPREQ_GDS     = 0x00000008,
SQ_THREAD_TRACE_INST_TYPE_EXPREQ_GFX     = 0x00000009,
SQ_THREAD_TRACE_INST_TYPE_EXPGNT_PAR_COL  = 0x0000000a,
SQ_THREAD_TRACE_INST_TYPE_EXPGNT_POS_GDS  = 0x0000000b,
SQ_THREAD_TRACE_INST_TYPE_JUMP           = 0x0000000c,
SQ_THREAD_TRACE_INST_TYPE_NEXT           = 0x0000000d,
SQ_THREAD_TRACE_INST_TYPE_FLAT_RD        = 0x0000000e,
SQ_THREAD_TRACE_INST_TYPE_OTHER_MSG      = 0x0000000f,
SQ_THREAD_TRACE_INST_TYPE_SMEM_WR        = 0x00000010,
SQ_THREAD_TRACE_INST_TYPE_SALU_64        = 0x00000011,
SQ_THREAD_TRACE_INST_TYPE_VALU_64        = 0x00000012,
SQ_THREAD_TRACE_INST_TYPE_SMEM_RD_REPLAY  = 0x00000013,
SQ_THREAD_TRACE_INST_TYPE_SMEM_WR_REPLAY  = 0x00000014,
SQ_THREAD_TRACE_INST_TYPE_VMEM_RD_REPLAY  = 0x00000015,
SQ_THREAD_TRACE_INST_TYPE_VMEM_WR_REPLAY  = 0x00000016,
SQ_THREAD_TRACE_INST_TYPE_FLAT_RD_REPLAY  = 0x00000017,
SQ_THREAD_TRACE_INST_TYPE_FLAT_WR_REPLAY  = 0x00000018,
SQ_THREAD_TRACE_INST_TYPE_FATAL_HALT     = 0x00000019,
} SQ_THREAD_TRACE_INST_TYPE;

/*
 * SQ_THREAD_TRACE_REG_TYPE enum
 */

typedef enum SQ_THREAD_TRACE_REG_TYPE {
SQ_THREAD_TRACE_REG_TYPE_EVENT           = 0x00000000,
SQ_THREAD_TRACE_REG_TYPE_DRAW            = 0x00000001,
SQ_THREAD_TRACE_REG_TYPE_DISPATCH        = 0x00000002,
SQ_THREAD_TRACE_REG_TYPE_USERDATA        = 0x00000003,
SQ_THREAD_TRACE_REG_TYPE_MARKER          = 0x00000004,
SQ_THREAD_TRACE_REG_TYPE_GFXDEC          = 0x00000005,
SQ_THREAD_TRACE_REG_TYPE_SHDEC           = 0x00000006,
SQ_THREAD_TRACE_REG_TYPE_OTHER           = 0x00000007,
} SQ_THREAD_TRACE_REG_TYPE;

/*
 * SQ_THREAD_TRACE_REG_OP enum
 */

typedef enum SQ_THREAD_TRACE_REG_OP {
SQ_THREAD_TRACE_REG_OP_READ              = 0x00000000,
SQ_THREAD_TRACE_REG_OP_WRITE             = 0x00000001,
} SQ_THREAD_TRACE_REG_OP;

/*
 * SQ_THREAD_TRACE_MODE_SEL enum
 */

typedef enum SQ_THREAD_TRACE_MODE_SEL {
SQ_THREAD_TRACE_MODE_OFF                 = 0x00000000,
SQ_THREAD_TRACE_MODE_ON                  = 0x00000001,
} SQ_THREAD_TRACE_MODE_SEL;

/*
 * SQ_THREAD_TRACE_CAPTURE_MODE enum
 */

typedef enum SQ_THREAD_TRACE_CAPTURE_MODE {
SQ_THREAD_TRACE_CAPTURE_MODE_ALL         = 0x00000000,
SQ_THREAD_TRACE_CAPTURE_MODE_SELECT      = 0x00000001,
SQ_THREAD_TRACE_CAPTURE_MODE_SELECT_DETAIL  = 0x00000002,
} SQ_THREAD_TRACE_CAPTURE_MODE;

/*
 * SQ_THREAD_TRACE_VM_ID_MASK enum
 */

typedef enum SQ_THREAD_TRACE_VM_ID_MASK {
SQ_THREAD_TRACE_VM_ID_MASK_SINGLE        = 0x00000000,
SQ_THREAD_TRACE_VM_ID_MASK_ALL           = 0x00000001,
SQ_THREAD_TRACE_VM_ID_MASK_SINGLE_DETAIL  = 0x00000002,
} SQ_THREAD_TRACE_VM_ID_MASK;

/*
 * SQ_THREAD_TRACE_WAVE_MASK enum
 */

typedef enum SQ_THREAD_TRACE_WAVE_MASK {
SQ_THREAD_TRACE_WAVE_MASK_NONE           = 0x00000000,
SQ_THREAD_TRACE_WAVE_MASK_ALL            = 0x00000001,
} SQ_THREAD_TRACE_WAVE_MASK;

/*
 * SQ_THREAD_TRACE_ISSUE enum
 */

typedef enum SQ_THREAD_TRACE_ISSUE {
SQ_THREAD_TRACE_ISSUE_NULL               = 0x00000000,
SQ_THREAD_TRACE_ISSUE_STALL              = 0x00000001,
SQ_THREAD_TRACE_ISSUE_INST               = 0x00000002,
SQ_THREAD_TRACE_ISSUE_IMMED              = 0x00000003,
} SQ_THREAD_TRACE_ISSUE;

/*
 * SQ_THREAD_TRACE_ISSUE_MASK enum
 */

typedef enum SQ_THREAD_TRACE_ISSUE_MASK {
SQ_THREAD_TRACE_ISSUE_MASK_ALL           = 0x00000000,
SQ_THREAD_TRACE_ISSUE_MASK_STALLED       = 0x00000001,
SQ_THREAD_TRACE_ISSUE_MASK_STALLED_AND_IMMED  = 0x00000002,
SQ_THREAD_TRACE_ISSUE_MASK_IMMED         = 0x00000003,
} SQ_THREAD_TRACE_ISSUE_MASK;

/*
 * SQ_PERF_SEL enum
 */

typedef enum SQ_PERF_SEL {
SQ_PERF_SEL_NONE                         = 0x00000000,
SQ_PERF_SEL_ACCUM_PREV                   = 0x00000001,
SQ_PERF_SEL_CYCLES                       = 0x00000002,
SQ_PERF_SEL_BUSY_CYCLES                  = 0x00000003,
SQ_PERF_SEL_WAVES                        = 0x00000004,
SQ_PERF_SEL_LEVEL_WAVES                  = 0x00000005,
SQ_PERF_SEL_WAVES_EQ_64                  = 0x00000006,
SQ_PERF_SEL_WAVES_LT_64                  = 0x00000007,
SQ_PERF_SEL_WAVES_LT_48                  = 0x00000008,
SQ_PERF_SEL_WAVES_LT_32                  = 0x00000009,
SQ_PERF_SEL_WAVES_LT_16                  = 0x0000000a,
SQ_PERF_SEL_WAVES_CU                     = 0x0000000b,
SQ_PERF_SEL_LEVEL_WAVES_CU               = 0x0000000c,
SQ_PERF_SEL_BUSY_CU_CYCLES               = 0x0000000d,
SQ_PERF_SEL_ITEMS                        = 0x0000000e,
SQ_PERF_SEL_QUADS                        = 0x0000000f,
SQ_PERF_SEL_EVENTS                       = 0x00000010,
SQ_PERF_SEL_SURF_SYNCS                   = 0x00000011,
SQ_PERF_SEL_TTRACE_REQS                  = 0x00000012,
SQ_PERF_SEL_TTRACE_INFLIGHT_REQS         = 0x00000013,
SQ_PERF_SEL_TTRACE_STALL                 = 0x00000014,
SQ_PERF_SEL_MSG_CNTR                     = 0x00000015,
SQ_PERF_SEL_MSG_PERF                     = 0x00000016,
SQ_PERF_SEL_MSG_GSCNT                    = 0x00000017,
SQ_PERF_SEL_MSG_INTERRUPT                = 0x00000018,
SQ_PERF_SEL_INSTS                        = 0x00000019,
SQ_PERF_SEL_INSTS_VALU                   = 0x0000001a,
SQ_PERF_SEL_INSTS_VMEM_WR                = 0x0000001b,
SQ_PERF_SEL_INSTS_VMEM_RD                = 0x0000001c,
SQ_PERF_SEL_INSTS_VMEM                   = 0x0000001d,
SQ_PERF_SEL_INSTS_SALU                   = 0x0000001e,
SQ_PERF_SEL_INSTS_SMEM                   = 0x0000001f,
SQ_PERF_SEL_INSTS_FLAT                   = 0x00000020,
SQ_PERF_SEL_INSTS_FLAT_LDS_ONLY          = 0x00000021,
SQ_PERF_SEL_INSTS_LDS                    = 0x00000022,
SQ_PERF_SEL_INSTS_GDS                    = 0x00000023,
SQ_PERF_SEL_INSTS_EXP                    = 0x00000024,
SQ_PERF_SEL_INSTS_EXP_GDS                = 0x00000025,
SQ_PERF_SEL_INSTS_BRANCH                 = 0x00000026,
SQ_PERF_SEL_INSTS_SENDMSG                = 0x00000027,
SQ_PERF_SEL_INSTS_VSKIPPED               = 0x00000028,
SQ_PERF_SEL_INST_LEVEL_VMEM              = 0x00000029,
SQ_PERF_SEL_INST_LEVEL_SMEM              = 0x0000002a,
SQ_PERF_SEL_INST_LEVEL_LDS               = 0x0000002b,
SQ_PERF_SEL_INST_LEVEL_GDS               = 0x0000002c,
SQ_PERF_SEL_INST_LEVEL_EXP               = 0x0000002d,
SQ_PERF_SEL_WAVE_CYCLES                  = 0x0000002e,
SQ_PERF_SEL_WAVE_READY                   = 0x0000002f,
SQ_PERF_SEL_WAIT_CNT_VM                  = 0x00000030,
SQ_PERF_SEL_WAIT_CNT_LGKM                = 0x00000031,
SQ_PERF_SEL_WAIT_CNT_EXP                 = 0x00000032,
SQ_PERF_SEL_WAIT_CNT_ANY                 = 0x00000033,
SQ_PERF_SEL_WAIT_BARRIER                 = 0x00000034,
SQ_PERF_SEL_WAIT_EXP_ALLOC               = 0x00000035,
SQ_PERF_SEL_WAIT_SLEEP                   = 0x00000036,
SQ_PERF_SEL_WAIT_SLEEP_XNACK             = 0x00000037,
SQ_PERF_SEL_WAIT_OTHER                   = 0x00000038,
SQ_PERF_SEL_WAIT_ANY                     = 0x00000039,
SQ_PERF_SEL_WAIT_TTRACE                  = 0x0000003a,
SQ_PERF_SEL_WAIT_IFETCH                  = 0x0000003b,
SQ_PERF_SEL_WAIT_INST_ANY                = 0x0000003c,
SQ_PERF_SEL_WAIT_INST_VMEM               = 0x0000003d,
SQ_PERF_SEL_WAIT_INST_SCA                = 0x0000003e,
SQ_PERF_SEL_WAIT_INST_LDS                = 0x0000003f,
SQ_PERF_SEL_WAIT_INST_VALU               = 0x00000040,
SQ_PERF_SEL_WAIT_INST_EXP_GDS            = 0x00000041,
SQ_PERF_SEL_WAIT_INST_MISC               = 0x00000042,
SQ_PERF_SEL_WAIT_INST_FLAT               = 0x00000043,
SQ_PERF_SEL_ACTIVE_INST_ANY              = 0x00000044,
SQ_PERF_SEL_ACTIVE_INST_VMEM             = 0x00000045,
SQ_PERF_SEL_ACTIVE_INST_LDS              = 0x00000046,
SQ_PERF_SEL_ACTIVE_INST_VALU             = 0x00000047,
SQ_PERF_SEL_ACTIVE_INST_SCA              = 0x00000048,
SQ_PERF_SEL_ACTIVE_INST_EXP_GDS          = 0x00000049,
SQ_PERF_SEL_ACTIVE_INST_MISC             = 0x0000004a,
SQ_PERF_SEL_ACTIVE_INST_FLAT             = 0x0000004b,
SQ_PERF_SEL_INST_CYCLES_VMEM_WR          = 0x0000004c,
SQ_PERF_SEL_INST_CYCLES_VMEM_RD          = 0x0000004d,
SQ_PERF_SEL_INST_CYCLES_VMEM_ADDR        = 0x0000004e,
SQ_PERF_SEL_INST_CYCLES_VMEM_DATA        = 0x0000004f,
SQ_PERF_SEL_INST_CYCLES_VMEM_CMD         = 0x00000050,
SQ_PERF_SEL_INST_CYCLES_EXP              = 0x00000051,
SQ_PERF_SEL_INST_CYCLES_GDS              = 0x00000052,
SQ_PERF_SEL_INST_CYCLES_SMEM             = 0x00000053,
SQ_PERF_SEL_INST_CYCLES_SALU             = 0x00000054,
SQ_PERF_SEL_THREAD_CYCLES_VALU           = 0x00000055,
SQ_PERF_SEL_THREAD_CYCLES_VALU_MAX       = 0x00000056,
SQ_PERF_SEL_IFETCH                       = 0x00000057,
SQ_PERF_SEL_IFETCH_LEVEL                 = 0x00000058,
SQ_PERF_SEL_CBRANCH_FORK                 = 0x00000059,
SQ_PERF_SEL_CBRANCH_FORK_SPLIT           = 0x0000005a,
SQ_PERF_SEL_VALU_LDS_DIRECT_RD           = 0x0000005b,
SQ_PERF_SEL_VALU_LDS_INTERP_OP           = 0x0000005c,
SQ_PERF_SEL_LDS_BANK_CONFLICT            = 0x0000005d,
SQ_PERF_SEL_LDS_ADDR_CONFLICT            = 0x0000005e,
SQ_PERF_SEL_LDS_UNALIGNED_STALL          = 0x0000005f,
SQ_PERF_SEL_LDS_MEM_VIOLATIONS           = 0x00000060,
SQ_PERF_SEL_LDS_ATOMIC_RETURN            = 0x00000061,
SQ_PERF_SEL_LDS_IDX_ACTIVE               = 0x00000062,
SQ_PERF_SEL_VALU_DEP_STALL               = 0x00000063,
SQ_PERF_SEL_VALU_STARVE                  = 0x00000064,
SQ_PERF_SEL_EXP_REQ_FIFO_FULL            = 0x00000065,
SQ_PERF_SEL_LDS_DATA_FIFO_FULL           = 0x00000066,
SQ_PERF_SEL_LDS_CMD_FIFO_FULL            = 0x00000067,
SQ_PERF_SEL_VMEM_TA_ADDR_FIFO_FULL       = 0x00000068,
SQ_PERF_SEL_VMEM_TA_CMD_FIFO_FULL        = 0x00000069,
SQ_PERF_SEL_VMEM_EX_DATA_REG_BUSY        = 0x0000006a,
SQ_PERF_SEL_VMEM_WR_TA_DATA_FIFO_FULL    = 0x0000006b,
SQ_PERF_SEL_VALU_SRC_C_CONFLICT          = 0x0000006c,
SQ_PERF_SEL_VMEM_RD_SRC_CD_CONFLICT      = 0x0000006d,
SQ_PERF_SEL_VMEM_WR_SRC_CD_CONFLICT      = 0x0000006e,
SQ_PERF_SEL_FLAT_SRC_CD_CONFLICT         = 0x0000006f,
SQ_PERF_SEL_LDS_SRC_CD_CONFLICT          = 0x00000070,
SQ_PERF_SEL_SRC_CD_BUSY                  = 0x00000071,
SQ_PERF_SEL_PT_POWER_STALL               = 0x00000072,
SQ_PERF_SEL_USER0                        = 0x00000073,
SQ_PERF_SEL_USER1                        = 0x00000074,
SQ_PERF_SEL_USER2                        = 0x00000075,
SQ_PERF_SEL_USER3                        = 0x00000076,
SQ_PERF_SEL_USER4                        = 0x00000077,
SQ_PERF_SEL_USER5                        = 0x00000078,
SQ_PERF_SEL_USER6                        = 0x00000079,
SQ_PERF_SEL_USER7                        = 0x0000007a,
SQ_PERF_SEL_USER8                        = 0x0000007b,
SQ_PERF_SEL_USER9                        = 0x0000007c,
SQ_PERF_SEL_USER10                       = 0x0000007d,
SQ_PERF_SEL_USER11                       = 0x0000007e,
SQ_PERF_SEL_USER12                       = 0x0000007f,
SQ_PERF_SEL_USER13                       = 0x00000080,
SQ_PERF_SEL_USER14                       = 0x00000081,
SQ_PERF_SEL_USER15                       = 0x00000082,
SQ_PERF_SEL_USER_LEVEL0                  = 0x00000083,
SQ_PERF_SEL_USER_LEVEL1                  = 0x00000084,
SQ_PERF_SEL_USER_LEVEL2                  = 0x00000085,
SQ_PERF_SEL_USER_LEVEL3                  = 0x00000086,
SQ_PERF_SEL_USER_LEVEL4                  = 0x00000087,
SQ_PERF_SEL_USER_LEVEL5                  = 0x00000088,
SQ_PERF_SEL_USER_LEVEL6                  = 0x00000089,
SQ_PERF_SEL_USER_LEVEL7                  = 0x0000008a,
SQ_PERF_SEL_USER_LEVEL8                  = 0x0000008b,
SQ_PERF_SEL_USER_LEVEL9                  = 0x0000008c,
SQ_PERF_SEL_USER_LEVEL10                 = 0x0000008d,
SQ_PERF_SEL_USER_LEVEL11                 = 0x0000008e,
SQ_PERF_SEL_USER_LEVEL12                 = 0x0000008f,
SQ_PERF_SEL_USER_LEVEL13                 = 0x00000090,
SQ_PERF_SEL_USER_LEVEL14                 = 0x00000091,
SQ_PERF_SEL_USER_LEVEL15                 = 0x00000092,
SQ_PERF_SEL_POWER_VALU                   = 0x00000093,
SQ_PERF_SEL_POWER_VALU0                  = 0x00000094,
SQ_PERF_SEL_POWER_VALU1                  = 0x00000095,
SQ_PERF_SEL_POWER_VALU2                  = 0x00000096,
SQ_PERF_SEL_POWER_GPR_RD                 = 0x00000097,
SQ_PERF_SEL_POWER_GPR_WR                 = 0x00000098,
SQ_PERF_SEL_POWER_LDS_BUSY               = 0x00000099,
SQ_PERF_SEL_POWER_ALU_BUSY               = 0x0000009a,
SQ_PERF_SEL_POWER_TEX_BUSY               = 0x0000009b,
SQ_PERF_SEL_ACCUM_PREV_HIRES             = 0x0000009c,
SQ_PERF_SEL_WAVES_RESTORED               = 0x0000009d,
SQ_PERF_SEL_WAVES_SAVED                  = 0x0000009e,
SQ_PERF_SEL_INSTS_SMEM_NORM              = 0x0000009f,
SQ_PERF_SEL_ATC_INSTS_VMEM               = 0x000000a0,
SQ_PERF_SEL_ATC_INST_LEVEL_VMEM          = 0x000000a1,
SQ_PERF_SEL_ATC_XNACK_FIRST              = 0x000000a2,
SQ_PERF_SEL_ATC_XNACK_ALL                = 0x000000a3,
SQ_PERF_SEL_ATC_XNACK_FIFO_FULL          = 0x000000a4,
SQ_PERF_SEL_ATC_INSTS_SMEM               = 0x000000a5,
SQ_PERF_SEL_ATC_INST_LEVEL_SMEM          = 0x000000a6,
SQ_PERF_SEL_IFETCH_XNACK                 = 0x000000a7,
SQ_PERF_SEL_TLB_SHOOTDOWN                = 0x000000a8,
SQ_PERF_SEL_TLB_SHOOTDOWN_CYCLES         = 0x000000a9,
SQ_PERF_SEL_INSTS_VMEM_WR_REPLAY         = 0x000000aa,
SQ_PERF_SEL_INSTS_VMEM_RD_REPLAY         = 0x000000ab,
SQ_PERF_SEL_INSTS_VMEM_REPLAY            = 0x000000ac,
SQ_PERF_SEL_INSTS_SMEM_REPLAY            = 0x000000ad,
SQ_PERF_SEL_INSTS_SMEM_NORM_REPLAY       = 0x000000ae,
SQ_PERF_SEL_INSTS_FLAT_REPLAY            = 0x000000af,
SQ_PERF_SEL_ATC_INSTS_VMEM_REPLAY        = 0x000000b0,
SQ_PERF_SEL_ATC_INSTS_SMEM_REPLAY        = 0x000000b1,
SQ_PERF_SEL_UTCL1_TRANSLATION_MISS       = 0x000000b2,
SQ_PERF_SEL_UTCL1_PERMISSION_MISS        = 0x000000b3,
SQ_PERF_SEL_UTCL1_REQUEST                = 0x000000b4,
SQ_PERF_SEL_UTCL1_STALL_MISSFIFO_FULL    = 0x000000b5,
SQ_PERF_SEL_UTCL1_STALL_INFLIGHT_MAX     = 0x000000b6,
SQ_PERF_SEL_UTCL1_STALL_LRU_INFLIGHT     = 0x000000b7,
SQ_PERF_SEL_UTCL1_LFIFO_FULL             = 0x000000b8,
SQ_PERF_SEL_UTCL1_STALL_LFIFO_NOT_RES    = 0x000000b9,
SQ_PERF_SEL_UTCL1_STALL_UTCL2_REQ_OUT_OF_CREDITS  = 0x000000ba,
SQ_PERF_SEL_DUMMY_END                    = 0x000000bb,
SQ_PERF_SEL_DUMMY_LAST                   = 0x000000ff,
SQC_PERF_SEL_ICACHE_INPUT_VALID_READY    = 0x00000100,
SQC_PERF_SEL_ICACHE_INPUT_VALID_READYB   = 0x00000101,
SQC_PERF_SEL_ICACHE_INPUT_VALIDB         = 0x00000102,
SQC_PERF_SEL_DCACHE_INPUT_VALID_READY    = 0x00000103,
SQC_PERF_SEL_DCACHE_INPUT_VALID_READYB   = 0x00000104,
SQC_PERF_SEL_DCACHE_INPUT_VALIDB         = 0x00000105,
SQC_PERF_SEL_TC_REQ                      = 0x00000106,
SQC_PERF_SEL_TC_INST_REQ                 = 0x00000107,
SQC_PERF_SEL_TC_DATA_READ_REQ            = 0x00000108,
SQC_PERF_SEL_TC_DATA_WRITE_REQ           = 0x00000109,
SQC_PERF_SEL_TC_DATA_ATOMIC_REQ          = 0x0000010a,
SQC_PERF_SEL_TC_STALL                    = 0x0000010b,
SQC_PERF_SEL_TC_STARVE                   = 0x0000010c,
SQC_PERF_SEL_ICACHE_BUSY_CYCLES          = 0x0000010d,
SQC_PERF_SEL_ICACHE_REQ                  = 0x0000010e,
SQC_PERF_SEL_ICACHE_HITS                 = 0x0000010f,
SQC_PERF_SEL_ICACHE_MISSES               = 0x00000110,
SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE     = 0x00000111,
SQC_PERF_SEL_ICACHE_INVAL_INST           = 0x00000112,
SQC_PERF_SEL_ICACHE_INVAL_ASYNC          = 0x00000113,
SQC_PERF_SEL_ICACHE_INPUT_STALL_ARB_NO_GRANT  = 0x00000114,
SQC_PERF_SEL_ICACHE_INPUT_STALL_BANK_READYB  = 0x00000115,
SQC_PERF_SEL_ICACHE_CACHE_STALLED        = 0x00000116,
SQC_PERF_SEL_ICACHE_CACHE_STALL_INFLIGHT_NONZERO  = 0x00000117,
SQC_PERF_SEL_ICACHE_CACHE_STALL_INFLIGHT_MAX  = 0x00000118,
SQC_PERF_SEL_ICACHE_CACHE_STALL_OUTPUT   = 0x00000119,
SQC_PERF_SEL_ICACHE_CACHE_STALL_OUTPUT_MISS_FIFO  = 0x0000011a,
SQC_PERF_SEL_ICACHE_CACHE_STALL_OUTPUT_HIT_FIFO  = 0x0000011b,
SQC_PERF_SEL_ICACHE_CACHE_STALL_OUTPUT_TC_IF  = 0x0000011c,
SQC_PERF_SEL_ICACHE_STALL_OUTXBAR_ARB_NO_GRANT  = 0x0000011d,
SQC_PERF_SEL_ICACHE_PREFETCH_1           = 0x0000011e,
SQC_PERF_SEL_ICACHE_PREFETCH_2           = 0x0000011f,
SQC_PERF_SEL_ICACHE_PREFETCH_FILTERED    = 0x00000120,
SQC_PERF_SEL_DCACHE_BUSY_CYCLES          = 0x00000121,
SQC_PERF_SEL_DCACHE_REQ                  = 0x00000122,
SQC_PERF_SEL_DCACHE_HITS                 = 0x00000123,
SQC_PERF_SEL_DCACHE_MISSES               = 0x00000124,
SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE     = 0x00000125,
SQC_PERF_SEL_DCACHE_HIT_LRU_READ         = 0x00000126,
SQC_PERF_SEL_DCACHE_MISS_EVICT_READ      = 0x00000127,
SQC_PERF_SEL_DCACHE_WC_LRU_WRITE         = 0x00000128,
SQC_PERF_SEL_DCACHE_WT_EVICT_WRITE       = 0x00000129,
SQC_PERF_SEL_DCACHE_ATOMIC               = 0x0000012a,
SQC_PERF_SEL_DCACHE_VOLATILE             = 0x0000012b,
SQC_PERF_SEL_DCACHE_INVAL_INST           = 0x0000012c,
SQC_PERF_SEL_DCACHE_INVAL_ASYNC          = 0x0000012d,
SQC_PERF_SEL_DCACHE_INVAL_VOLATILE_INST  = 0x0000012e,
SQC_PERF_SEL_DCACHE_INVAL_VOLATILE_ASYNC  = 0x0000012f,
SQC_PERF_SEL_DCACHE_WB_INST              = 0x00000130,
SQC_PERF_SEL_DCACHE_WB_ASYNC             = 0x00000131,
SQC_PERF_SEL_DCACHE_WB_VOLATILE_INST     = 0x00000132,
SQC_PERF_SEL_DCACHE_WB_VOLATILE_ASYNC    = 0x00000133,
SQC_PERF_SEL_DCACHE_INPUT_STALL_ARB_NO_GRANT  = 0x00000134,
SQC_PERF_SEL_DCACHE_INPUT_STALL_BANK_READYB  = 0x00000135,
SQC_PERF_SEL_DCACHE_CACHE_STALLED        = 0x00000136,
SQC_PERF_SEL_DCACHE_CACHE_STALL_INFLIGHT_MAX  = 0x00000137,
SQC_PERF_SEL_DCACHE_CACHE_STALL_OUTPUT   = 0x00000138,
SQC_PERF_SEL_DCACHE_CACHE_STALL_EVICT    = 0x00000139,
SQC_PERF_SEL_DCACHE_CACHE_STALL_UNORDERED  = 0x0000013a,
SQC_PERF_SEL_DCACHE_CACHE_STALL_ALLOC_UNAVAILABLE  = 0x0000013b,
SQC_PERF_SEL_DCACHE_CACHE_STALL_FORCE_EVICT  = 0x0000013c,
SQC_PERF_SEL_DCACHE_CACHE_STALL_MULTI_FLUSH  = 0x0000013d,
SQC_PERF_SEL_DCACHE_CACHE_STALL_FLUSH_DONE  = 0x0000013e,
SQC_PERF_SEL_DCACHE_CACHE_STALL_OUTPUT_MISS_FIFO  = 0x0000013f,
SQC_PERF_SEL_DCACHE_CACHE_STALL_OUTPUT_HIT_FIFO  = 0x00000140,
SQC_PERF_SEL_DCACHE_CACHE_STALL_OUTPUT_TC_IF  = 0x00000141,
SQC_PERF_SEL_DCACHE_STALL_OUTXBAR_ARB_NO_GRANT  = 0x00000142,
SQC_PERF_SEL_DCACHE_REQ_READ_1           = 0x00000143,
SQC_PERF_SEL_DCACHE_REQ_READ_2           = 0x00000144,
SQC_PERF_SEL_DCACHE_REQ_READ_4           = 0x00000145,
SQC_PERF_SEL_DCACHE_REQ_READ_8           = 0x00000146,
SQC_PERF_SEL_DCACHE_REQ_READ_16          = 0x00000147,
SQC_PERF_SEL_DCACHE_REQ_TIME             = 0x00000148,
SQC_PERF_SEL_DCACHE_REQ_WRITE_1          = 0x00000149,
SQC_PERF_SEL_DCACHE_REQ_WRITE_2          = 0x0000014a,
SQC_PERF_SEL_DCACHE_REQ_WRITE_4          = 0x0000014b,
SQC_PERF_SEL_DCACHE_REQ_ATC_PROBE        = 0x0000014c,
SQC_PERF_SEL_SQ_DCACHE_REQS              = 0x0000014d,
SQC_PERF_SEL_DCACHE_FLAT_REQ             = 0x0000014e,
SQC_PERF_SEL_DCACHE_NONFLAT_REQ          = 0x0000014f,
SQC_PERF_SEL_ICACHE_INFLIGHT_LEVEL       = 0x00000150,
SQC_PERF_SEL_DCACHE_INFLIGHT_LEVEL       = 0x00000151,
SQC_PERF_SEL_TC_INFLIGHT_LEVEL           = 0x00000152,
SQC_PERF_SEL_ICACHE_TC_INFLIGHT_LEVEL    = 0x00000153,
SQC_PERF_SEL_DCACHE_TC_INFLIGHT_LEVEL    = 0x00000154,
SQC_PERF_SEL_ICACHE_GATCL1_TRANSLATION_MISS  = 0x00000155,
SQC_PERF_SEL_ICACHE_GATCL1_PERMISSION_MISS  = 0x00000156,
SQC_PERF_SEL_ICACHE_GATCL1_REQUEST       = 0x00000157,
SQC_PERF_SEL_ICACHE_GATCL1_STALL_INFLIGHT_MAX  = 0x00000158,
SQC_PERF_SEL_ICACHE_GATCL1_STALL_LRU_INFLIGHT  = 0x00000159,
SQC_PERF_SEL_ICACHE_GATCL1_LFIFO_FULL    = 0x0000015a,
SQC_PERF_SEL_ICACHE_GATCL1_STALL_LFIFO_NOT_RES  = 0x0000015b,
SQC_PERF_SEL_ICACHE_GATCL1_STALL_ATCL2_REQ_OUT_OF_CREDITS  = 0x0000015c,
SQC_PERF_SEL_ICACHE_GATCL1_ATCL2_INFLIGHT  = 0x0000015d,
SQC_PERF_SEL_ICACHE_GATCL1_STALL_MISSFIFO_FULL  = 0x0000015e,
SQC_PERF_SEL_DCACHE_GATCL1_TRANSLATION_MISS  = 0x0000015f,
SQC_PERF_SEL_DCACHE_GATCL1_PERMISSION_MISS  = 0x00000160,
SQC_PERF_SEL_DCACHE_GATCL1_REQUEST       = 0x00000161,
SQC_PERF_SEL_DCACHE_GATCL1_STALL_INFLIGHT_MAX  = 0x00000162,
SQC_PERF_SEL_DCACHE_GATCL1_STALL_LRU_INFLIGHT  = 0x00000163,
SQC_PERF_SEL_DCACHE_GATCL1_LFIFO_FULL    = 0x00000164,
SQC_PERF_SEL_DCACHE_GATCL1_STALL_LFIFO_NOT_RES  = 0x00000165,
SQC_PERF_SEL_DCACHE_GATCL1_STALL_ATCL2_REQ_OUT_OF_CREDITS  = 0x00000166,
SQC_PERF_SEL_DCACHE_GATCL1_ATCL2_INFLIGHT  = 0x00000167,
SQC_PERF_SEL_DCACHE_GATCL1_STALL_MISSFIFO_FULL  = 0x00000168,
SQC_PERF_SEL_DCACHE_GATCL1_STALL_MULTI_MISS  = 0x00000169,
SQC_PERF_SEL_DCACHE_GATCL1_HIT_FIFO_FULL  = 0x0000016a,
SQC_PERF_SEL_DUMMY_LAST                  = 0x0000016b,
} SQ_PERF_SEL;

/*
 * SQ_CAC_POWER_SEL enum
 */

typedef enum SQ_CAC_POWER_SEL {
SQ_CAC_POWER_VALU                        = 0x00000000,
SQ_CAC_POWER_VALU0                       = 0x00000001,
SQ_CAC_POWER_VALU1                       = 0x00000002,
SQ_CAC_POWER_VALU2                       = 0x00000003,
SQ_CAC_POWER_GPR_RD                      = 0x00000004,
SQ_CAC_POWER_GPR_WR                      = 0x00000005,
SQ_CAC_POWER_LDS_BUSY                    = 0x00000006,
SQ_CAC_POWER_ALU_BUSY                    = 0x00000007,
SQ_CAC_POWER_TEX_BUSY                    = 0x00000008,
} SQ_CAC_POWER_SEL;

/*
 * SQ_IND_CMD_CMD enum
 */

typedef enum SQ_IND_CMD_CMD {
SQ_IND_CMD_CMD_NULL                      = 0x00000000,
SQ_IND_CMD_CMD_SETHALT                   = 0x00000001,
SQ_IND_CMD_CMD_SAVECTX                   = 0x00000002,
SQ_IND_CMD_CMD_KILL                      = 0x00000003,
SQ_IND_CMD_CMD_DEBUG                     = 0x00000004,
SQ_IND_CMD_CMD_TRAP                      = 0x00000005,
SQ_IND_CMD_CMD_SET_SPI_PRIO              = 0x00000006,
SQ_IND_CMD_CMD_SETFATALHALT              = 0x00000007,
} SQ_IND_CMD_CMD;

/*
 * SQ_IND_CMD_MODE enum
 */

typedef enum SQ_IND_CMD_MODE {
SQ_IND_CMD_MODE_SINGLE                   = 0x00000000,
SQ_IND_CMD_MODE_BROADCAST                = 0x00000001,
SQ_IND_CMD_MODE_BROADCAST_QUEUE          = 0x00000002,
SQ_IND_CMD_MODE_BROADCAST_PIPE           = 0x00000003,
SQ_IND_CMD_MODE_BROADCAST_ME             = 0x00000004,
} SQ_IND_CMD_MODE;

/*
 * SQ_EDC_INFO_SOURCE enum
 */

typedef enum SQ_EDC_INFO_SOURCE {
SQ_EDC_INFO_SOURCE_INVALID               = 0x00000000,
SQ_EDC_INFO_SOURCE_INST                  = 0x00000001,
SQ_EDC_INFO_SOURCE_SGPR                  = 0x00000002,
SQ_EDC_INFO_SOURCE_VGPR                  = 0x00000003,
SQ_EDC_INFO_SOURCE_LDS                   = 0x00000004,
SQ_EDC_INFO_SOURCE_GDS                   = 0x00000005,
SQ_EDC_INFO_SOURCE_TA                    = 0x00000006,
} SQ_EDC_INFO_SOURCE;

/*
 * SQ_ROUND_MODE enum
 */

typedef enum SQ_ROUND_MODE {
SQ_ROUND_NEAREST_EVEN                    = 0x00000000,
SQ_ROUND_PLUS_INFINITY                   = 0x00000001,
SQ_ROUND_MINUS_INFINITY                  = 0x00000002,
SQ_ROUND_TO_ZERO                         = 0x00000003,
} SQ_ROUND_MODE;

/*
 * SQ_INTERRUPT_WORD_ENCODING enum
 */

typedef enum SQ_INTERRUPT_WORD_ENCODING {
SQ_INTERRUPT_WORD_ENCODING_AUTO          = 0x00000000,
SQ_INTERRUPT_WORD_ENCODING_INST          = 0x00000001,
SQ_INTERRUPT_WORD_ENCODING_ERROR         = 0x00000002,
} SQ_INTERRUPT_WORD_ENCODING;

/*
 * ENUM_SQ_EXPORT_RAT_INST enum
 */

typedef enum ENUM_SQ_EXPORT_RAT_INST {
SQ_EXPORT_RAT_INST_NOP                   = 0x00000000,
SQ_EXPORT_RAT_INST_STORE_TYPED           = 0x00000001,
SQ_EXPORT_RAT_INST_STORE_RAW             = 0x00000002,
SQ_EXPORT_RAT_INST_STORE_RAW_FDENORM     = 0x00000003,
SQ_EXPORT_RAT_INST_CMPXCHG_INT           = 0x00000004,
SQ_EXPORT_RAT_INST_CMPXCHG_FLT           = 0x00000005,
SQ_EXPORT_RAT_INST_CMPXCHG_FDENORM       = 0x00000006,
SQ_EXPORT_RAT_INST_ADD                   = 0x00000007,
SQ_EXPORT_RAT_INST_SUB                   = 0x00000008,
SQ_EXPORT_RAT_INST_RSUB                  = 0x00000009,
SQ_EXPORT_RAT_INST_MIN_INT               = 0x0000000a,
SQ_EXPORT_RAT_INST_MIN_UINT              = 0x0000000b,
SQ_EXPORT_RAT_INST_MAX_INT               = 0x0000000c,
SQ_EXPORT_RAT_INST_MAX_UINT              = 0x0000000d,
SQ_EXPORT_RAT_INST_AND                   = 0x0000000e,
SQ_EXPORT_RAT_INST_OR                    = 0x0000000f,
SQ_EXPORT_RAT_INST_XOR                   = 0x00000010,
SQ_EXPORT_RAT_INST_MSKOR                 = 0x00000011,
SQ_EXPORT_RAT_INST_INC_UINT              = 0x00000012,
SQ_EXPORT_RAT_INST_DEC_UINT              = 0x00000013,
SQ_EXPORT_RAT_INST_STORE_DWORD           = 0x00000014,
SQ_EXPORT_RAT_INST_STORE_SHORT           = 0x00000015,
SQ_EXPORT_RAT_INST_STORE_BYTE            = 0x00000016,
SQ_EXPORT_RAT_INST_NOP_RTN               = 0x00000020,
SQ_EXPORT_RAT_INST_XCHG_RTN              = 0x00000022,
SQ_EXPORT_RAT_INST_XCHG_FDENORM_RTN      = 0x00000023,
SQ_EXPORT_RAT_INST_CMPXCHG_INT_RTN       = 0x00000024,
SQ_EXPORT_RAT_INST_CMPXCHG_FLT_RTN       = 0x00000025,
SQ_EXPORT_RAT_INST_CMPXCHG_FDENORM_RTN   = 0x00000026,
SQ_EXPORT_RAT_INST_ADD_RTN               = 0x00000027,
SQ_EXPORT_RAT_INST_SUB_RTN               = 0x00000028,
SQ_EXPORT_RAT_INST_RSUB_RTN              = 0x00000029,
SQ_EXPORT_RAT_INST_MIN_INT_RTN           = 0x0000002a,
SQ_EXPORT_RAT_INST_MIN_UINT_RTN          = 0x0000002b,
SQ_EXPORT_RAT_INST_MAX_INT_RTN           = 0x0000002c,
SQ_EXPORT_RAT_INST_MAX_UINT_RTN          = 0x0000002d,
SQ_EXPORT_RAT_INST_AND_RTN               = 0x0000002e,
SQ_EXPORT_RAT_INST_OR_RTN                = 0x0000002f,
SQ_EXPORT_RAT_INST_XOR_RTN               = 0x00000030,
SQ_EXPORT_RAT_INST_MSKOR_RTN             = 0x00000031,
SQ_EXPORT_RAT_INST_INC_UINT_RTN          = 0x00000032,
SQ_EXPORT_RAT_INST_DEC_UINT_RTN          = 0x00000033,
} ENUM_SQ_EXPORT_RAT_INST;

/*
 * SQ_IBUF_ST enum
 */

typedef enum SQ_IBUF_ST {
SQ_IBUF_IB_IDLE                          = 0x00000000,
SQ_IBUF_IB_INI_WAIT_GNT                  = 0x00000001,
SQ_IBUF_IB_INI_WAIT_DRET                 = 0x00000002,
SQ_IBUF_IB_LE_4DW                        = 0x00000003,
SQ_IBUF_IB_WAIT_DRET                     = 0x00000004,
SQ_IBUF_IB_EMPTY_WAIT_DRET               = 0x00000005,
SQ_IBUF_IB_DRET                          = 0x00000006,
SQ_IBUF_IB_EMPTY_WAIT_GNT                = 0x00000007,
} SQ_IBUF_ST;

/*
 * SQ_INST_STR_ST enum
 */

typedef enum SQ_INST_STR_ST {
SQ_INST_STR_IB_WAVE_NORML                = 0x00000000,
SQ_INST_STR_IB_WAVE2ID_NORMAL_INST_AV    = 0x00000001,
SQ_INST_STR_IB_WAVE_INTERNAL_INST_AV     = 0x00000002,
SQ_INST_STR_IB_WAVE_INST_SKIP_AV         = 0x00000003,
SQ_INST_STR_IB_WAVE_SETVSKIP_ST0         = 0x00000004,
SQ_INST_STR_IB_WAVE_SETVSKIP_ST1         = 0x00000005,
SQ_INST_STR_IB_WAVE_NOP_SLEEP_WAIT       = 0x00000006,
SQ_INST_STR_IB_WAVE_PC_FROM_SGPR_MSG_WAIT  = 0x00000007,
} SQ_INST_STR_ST;

/*
 * SQ_WAVE_IB_ECC_ST enum
 */

typedef enum SQ_WAVE_IB_ECC_ST {
SQ_WAVE_IB_ECC_CLEAN                     = 0x00000000,
SQ_WAVE_IB_ECC_ERR_CONTINUE              = 0x00000001,
SQ_WAVE_IB_ECC_ERR_HALT                  = 0x00000002,
SQ_WAVE_IB_ECC_WITH_ERR_MSG              = 0x00000003,
} SQ_WAVE_IB_ECC_ST;

/*
 * SH_MEM_ADDRESS_MODE enum
 */

typedef enum SH_MEM_ADDRESS_MODE {
SH_MEM_ADDRESS_MODE_64                   = 0x00000000,
SH_MEM_ADDRESS_MODE_32                   = 0x00000001,
} SH_MEM_ADDRESS_MODE;

/*
 * SH_MEM_ALIGNMENT_MODE enum
 */

typedef enum SH_MEM_ALIGNMENT_MODE {
SH_MEM_ALIGNMENT_MODE_DWORD              = 0x00000000,
SH_MEM_ALIGNMENT_MODE_DWORD_STRICT       = 0x00000001,
SH_MEM_ALIGNMENT_MODE_STRICT             = 0x00000002,
SH_MEM_ALIGNMENT_MODE_UNALIGNED          = 0x00000003,
} SH_MEM_ALIGNMENT_MODE;

/*
 * SQ_THREAD_TRACE_WAVE_START_COUNT_PREFIX enum
 */

typedef enum SQ_THREAD_TRACE_WAVE_START_COUNT_PREFIX {
SQ_THREAD_TRACE_WAVE_START_COUNT_PREFIX_WREXEC  = 0x00000018,
SQ_THREAD_TRACE_WAVE_START_COUNT_PREFIX_RESTORE  = 0x00000019,
} SQ_THREAD_TRACE_WAVE_START_COUNT_PREFIX;

/*
 * SQ_LB_CTR_SEL_VALUES enum
 */

typedef enum SQ_LB_CTR_SEL_VALUES {
SQ_LB_CTR_SEL_ALU_CYCLES                 = 0x00000000,
SQ_LB_CTR_SEL_ALU_STALLS                 = 0x00000001,
SQ_LB_CTR_SEL_TEX_CYCLES                 = 0x00000002,
SQ_LB_CTR_SEL_TEX_STALLS                 = 0x00000003,
SQ_LB_CTR_SEL_SALU_CYCLES                = 0x00000004,
SQ_LB_CTR_SEL_SCALAR_STALLS              = 0x00000005,
SQ_LB_CTR_SEL_SMEM_CYCLES                = 0x00000006,
SQ_LB_CTR_SEL_ICACHE_STALLS              = 0x00000007,
SQ_LB_CTR_SEL_DCACHE_STALLS              = 0x00000008,
SQ_LB_CTR_SEL_RESERVED0                  = 0x00000009,
SQ_LB_CTR_SEL_RESERVED1                  = 0x0000000a,
SQ_LB_CTR_SEL_RESERVED2                  = 0x0000000b,
SQ_LB_CTR_SEL_RESERVED3                  = 0x0000000c,
SQ_LB_CTR_SEL_RESERVED4                  = 0x0000000d,
SQ_LB_CTR_SEL_RESERVED5                  = 0x0000000e,
SQ_LB_CTR_SEL_RESERVED6                  = 0x0000000f,
} SQ_LB_CTR_SEL_VALUES;

/*
 * SQ_WAVE_TYPE value
 */

#define SQ_WAVE_TYPE_PS0               0x00000000

/*
 * SQIND_PARTITIONS value
 */

#define SQIND_GLOBAL_REGS_OFFSET       0x00000000
#define SQIND_GLOBAL_REGS_SIZE         0x00000008
#define SQIND_LOCAL_REGS_OFFSET        0x00000008
#define SQIND_LOCAL_REGS_SIZE          0x00000008
#define SQIND_WAVE_HWREGS_OFFSET       0x00000010
#define SQIND_WAVE_HWREGS_SIZE         0x000001f0
#define SQIND_WAVE_SGPRS_OFFSET        0x00000200
#define SQIND_WAVE_SGPRS_SIZE          0x00000200
#define SQIND_WAVE_VGPRS_OFFSET        0x00000400
#define SQIND_WAVE_VGPRS_SIZE          0x00000100

/*
 * SQ_GFXDEC value
 */

#define SQ_GFXDEC_BEGIN                0x0000a000
#define SQ_GFXDEC_END                  0x0000c000
#define SQ_GFXDEC_STATE_ID_SHIFT       0x0000000a

/*
 * SQDEC value
 */

#define SQDEC_BEGIN                    0x00002300
#define SQDEC_END                      0x000023ff

/*
 * SQPERFSDEC value
 */

#define SQPERFSDEC_BEGIN               0x0000d9c0
#define SQPERFSDEC_END                 0x0000da40

/*
 * SQPERFDDEC value
 */

#define SQPERFDDEC_BEGIN               0x0000d1c0
#define SQPERFDDEC_END                 0x0000d240

/*
 * SQGFXUDEC value
 */

#define SQGFXUDEC_BEGIN                0x0000c330
#define SQGFXUDEC_END                  0x0000c380

/*
 * SQPWRDEC value
 */

#define SQPWRDEC_BEGIN                 0x0000f08c
#define SQPWRDEC_END                   0x0000f094

/*
 * SQ_DISPATCHER value
 */

#define SQ_DISPATCHER_GFX_MIN          0x00000010
#define SQ_DISPATCHER_GFX_CNT_PER_RING 0x00000008

/*
 * SQ_MAX value
 */

#define SQ_MAX_PGM_SGPRS               0x00000068
#define SQ_MAX_PGM_VGPRS               0x00000100

/*
 * SQ_THREAD_TRACE_TIME_UNIT value
 */

#define SQ_THREAD_TRACE_TIME_UNIT      0x00000004

/*
 * SQ_EXCP_BITS value
 */

#define SQ_EX_MODE_EXCP_VALU_BASE      0x00000000
#define SQ_EX_MODE_EXCP_VALU_SIZE      0x00000007
#define SQ_EX_MODE_EXCP_INVALID        0x00000000
#define SQ_EX_MODE_EXCP_INPUT_DENORM   0x00000001
#define SQ_EX_MODE_EXCP_DIV0           0x00000002
#define SQ_EX_MODE_EXCP_OVERFLOW       0x00000003
#define SQ_EX_MODE_EXCP_UNDERFLOW      0x00000004
#define SQ_EX_MODE_EXCP_INEXACT        0x00000005
#define SQ_EX_MODE_EXCP_INT_DIV0       0x00000006
#define SQ_EX_MODE_EXCP_ADDR_WATCH0    0x00000007
#define SQ_EX_MODE_EXCP_MEM_VIOL       0x00000008

/*
 * SQ_EXCP_HI_BITS value
 */

#define SQ_EX_MODE_EXCP_HI_ADDR_WATCH1 0x00000000
#define SQ_EX_MODE_EXCP_HI_ADDR_WATCH2 0x00000001
#define SQ_EX_MODE_EXCP_HI_ADDR_WATCH3 0x00000002

/*
 * HW_INSERTED_INST_ID value
 */

#define INST_ID_PRIV_START             0x80000000
#define INST_ID_ECC_INTERRUPT_MSG      0xfffffff0
#define INST_ID_TTRACE_NEW_PC_MSG      0xfffffff1
#define INST_ID_HW_TRAP                0xfffffff2
#define INST_ID_KILL_SEQ               0xfffffff3
#define INST_ID_SPI_WREXEC             0xfffffff4
#define INST_ID_HOST_REG_TRAP_MSG      0xfffffffe

/*
 * SIMM16_WAITCNT_PARTITIONS value
 */

#define SIMM16_WAITCNT_VM_CNT_START    0x00000000
#define SIMM16_WAITCNT_VM_CNT_SIZE     0x00000004
#define SIMM16_WAITCNT_EXP_CNT_START   0x00000004
#define SIMM16_WAITCNT_EXP_CNT_SIZE    0x00000003
#define SIMM16_WAITCNT_LGKM_CNT_START  0x00000008
#define SIMM16_WAITCNT_LGKM_CNT_SIZE   0x00000004
#define SIMM16_WAITCNT_VM_CNT_HI_START 0x0000000e
#define SIMM16_WAITCNT_VM_CNT_HI_SIZE  0x00000002

/*
 * SQ_EDC_FUE_CNTL_BITS value
 */

#define SQ_EDC_FUE_CNTL_SQ             0x00000000
#define SQ_EDC_FUE_CNTL_LDS            0x00000001
#define SQ_EDC_FUE_CNTL_SIMD0          0x00000002
#define SQ_EDC_FUE_CNTL_SIMD1          0x00000003
#define SQ_EDC_FUE_CNTL_SIMD2          0x00000004
#define SQ_EDC_FUE_CNTL_SIMD3          0x00000005
#define SQ_EDC_FUE_CNTL_TA             0x00000006
#define SQ_EDC_FUE_CNTL_TD             0x00000007
#define SQ_EDC_FUE_CNTL_TCP            0x00000008

/*******************************************************
 * COMP Enums
 *******************************************************/

/*
 * CSDATA_TYPE enum
 */

typedef enum CSDATA_TYPE {
CSDATA_TYPE_TG                           = 0x00000000,
CSDATA_TYPE_STATE                        = 0x00000001,
CSDATA_TYPE_EVENT                        = 0x00000002,
CSDATA_TYPE_PRIVATE                      = 0x00000003,
} CSDATA_TYPE;

/*
 * CSDATA_TYPE_WIDTH value
 */

#define CSDATA_TYPE_WIDTH              0x00000002

/*
 * CSDATA_ADDR_WIDTH value
 */

#define CSDATA_ADDR_WIDTH              0x00000007

/*
 * CSDATA_DATA_WIDTH value
 */

#define CSDATA_DATA_WIDTH              0x00000020

/*******************************************************
 * VGT Enums
 *******************************************************/

/*
 * VGT_OUT_PRIM_TYPE enum
 */

typedef enum VGT_OUT_PRIM_TYPE {
VGT_OUT_POINT                            = 0x00000000,
VGT_OUT_LINE                             = 0x00000001,
VGT_OUT_TRI                              = 0x00000002,
VGT_OUT_RECT_V0                          = 0x00000003,
VGT_OUT_RECT_V1                          = 0x00000004,
VGT_OUT_RECT_V2                          = 0x00000005,
VGT_OUT_RECT_V3                          = 0x00000006,
VGT_OUT_2D_RECT                          = 0x00000007,
VGT_TE_QUAD                              = 0x00000008,
VGT_TE_PRIM_INDEX_LINE                   = 0x00000009,
VGT_TE_PRIM_INDEX_TRI                    = 0x0000000a,
VGT_TE_PRIM_INDEX_QUAD                   = 0x0000000b,
VGT_OUT_LINE_ADJ                         = 0x0000000c,
VGT_OUT_TRI_ADJ                          = 0x0000000d,
VGT_OUT_PATCH                            = 0x0000000e,
} VGT_OUT_PRIM_TYPE;

/*
 * VGT_DI_PRIM_TYPE enum
 */

typedef enum VGT_DI_PRIM_TYPE {
DI_PT_NONE                               = 0x00000000,
DI_PT_POINTLIST                          = 0x00000001,
DI_PT_LINELIST                           = 0x00000002,
DI_PT_LINESTRIP                          = 0x00000003,
DI_PT_TRILIST                            = 0x00000004,
DI_PT_TRIFAN                             = 0x00000005,
DI_PT_TRISTRIP                           = 0x00000006,
DI_PT_2D_RECTANGLE                       = 0x00000007,
DI_PT_UNUSED_1                           = 0x00000008,
DI_PT_PATCH                              = 0x00000009,
DI_PT_LINELIST_ADJ                       = 0x0000000a,
DI_PT_LINESTRIP_ADJ                      = 0x0000000b,
DI_PT_TRILIST_ADJ                        = 0x0000000c,
DI_PT_TRISTRIP_ADJ                       = 0x0000000d,
DI_PT_UNUSED_3                           = 0x0000000e,
DI_PT_UNUSED_4                           = 0x0000000f,
DI_PT_TRI_WITH_WFLAGS                    = 0x00000010,
DI_PT_RECTLIST                           = 0x00000011,
DI_PT_LINELOOP                           = 0x00000012,
DI_PT_QUADLIST                           = 0x00000013,
DI_PT_QUADSTRIP                          = 0x00000014,
DI_PT_POLYGON                            = 0x00000015,
} VGT_DI_PRIM_TYPE;

/*
 * VGT_DI_SOURCE_SELECT enum
 */

typedef enum VGT_DI_SOURCE_SELECT {
DI_SRC_SEL_DMA                           = 0x00000000,
DI_SRC_SEL_IMMEDIATE                     = 0x00000001,
DI_SRC_SEL_AUTO_INDEX                    = 0x00000002,
DI_SRC_SEL_RESERVED                      = 0x00000003,
} VGT_DI_SOURCE_SELECT;

/*
 * VGT_DI_MAJOR_MODE_SELECT enum
 */

typedef enum VGT_DI_MAJOR_MODE_SELECT {
DI_MAJOR_MODE_0                          = 0x00000000,
DI_MAJOR_MODE_1                          = 0x00000001,
} VGT_DI_MAJOR_MODE_SELECT;

/*
 * VGT_DI_INDEX_SIZE enum
 */

typedef enum VGT_DI_INDEX_SIZE {
DI_INDEX_SIZE_16_BIT                     = 0x00000000,
DI_INDEX_SIZE_32_BIT                     = 0x00000001,
DI_INDEX_SIZE_8_BIT                      = 0x00000002,
} VGT_DI_INDEX_SIZE;

/*
 * VGT_EVENT_TYPE enum
 */

typedef enum VGT_EVENT_TYPE {
Reserved_0x00                            = 0x00000000,
SAMPLE_STREAMOUTSTATS1                   = 0x00000001,
SAMPLE_STREAMOUTSTATS2                   = 0x00000002,
SAMPLE_STREAMOUTSTATS3                   = 0x00000003,
CACHE_FLUSH_TS                           = 0x00000004,
CONTEXT_DONE                             = 0x00000005,
CACHE_FLUSH                              = 0x00000006,
CS_PARTIAL_FLUSH                         = 0x00000007,
VGT_STREAMOUT_SYNC                       = 0x00000008,
Reserved_0x09                            = 0x00000009,
VGT_STREAMOUT_RESET                      = 0x0000000a,
END_OF_PIPE_INCR_DE                      = 0x0000000b,
END_OF_PIPE_IB_END                       = 0x0000000c,
RST_PIX_CNT                              = 0x0000000d,
BREAK_BATCH                              = 0x0000000e,
VS_PARTIAL_FLUSH                         = 0x0000000f,
PS_PARTIAL_FLUSH                         = 0x00000010,
FLUSH_HS_OUTPUT                          = 0x00000011,
FLUSH_DFSM                               = 0x00000012,
RESET_TO_LOWEST_VGT                      = 0x00000013,
CACHE_FLUSH_AND_INV_TS_EVENT             = 0x00000014,
ZPASS_DONE                               = 0x00000015,
CACHE_FLUSH_AND_INV_EVENT                = 0x00000016,
PERFCOUNTER_START                        = 0x00000017,
PERFCOUNTER_STOP                         = 0x00000018,
PIPELINESTAT_START                       = 0x00000019,
PIPELINESTAT_STOP                        = 0x0000001a,
PERFCOUNTER_SAMPLE                       = 0x0000001b,
Available_0x1c                           = 0x0000001c,
Available_0x1d                           = 0x0000001d,
SAMPLE_PIPELINESTAT                      = 0x0000001e,
SO_VGTSTREAMOUT_FLUSH                    = 0x0000001f,
SAMPLE_STREAMOUTSTATS                    = 0x00000020,
RESET_VTX_CNT                            = 0x00000021,
BLOCK_CONTEXT_DONE                       = 0x00000022,
CS_CONTEXT_DONE                          = 0x00000023,
VGT_FLUSH                                = 0x00000024,
TGID_ROLLOVER                            = 0x00000025,
SQ_NON_EVENT                             = 0x00000026,
SC_SEND_DB_VPZ                           = 0x00000027,
BOTTOM_OF_PIPE_TS                        = 0x00000028,
FLUSH_SX_TS                              = 0x00000029,
DB_CACHE_FLUSH_AND_INV                   = 0x0000002a,
FLUSH_AND_INV_DB_DATA_TS                 = 0x0000002b,
FLUSH_AND_INV_DB_META                    = 0x0000002c,
FLUSH_AND_INV_CB_DATA_TS                 = 0x0000002d,
FLUSH_AND_INV_CB_META                    = 0x0000002e,
CS_DONE                                  = 0x0000002f,
PS_DONE                                  = 0x00000030,
FLUSH_AND_INV_CB_PIXEL_DATA              = 0x00000031,
SX_CB_RAT_ACK_REQUEST                    = 0x00000032,
THREAD_TRACE_START                       = 0x00000033,
THREAD_TRACE_STOP                        = 0x00000034,
THREAD_TRACE_MARKER                      = 0x00000035,
THREAD_TRACE_FLUSH                       = 0x00000036,
THREAD_TRACE_FINISH                      = 0x00000037,
PIXEL_PIPE_STAT_CONTROL                  = 0x00000038,
PIXEL_PIPE_STAT_DUMP                     = 0x00000039,
PIXEL_PIPE_STAT_RESET                    = 0x0000003a,
CONTEXT_SUSPEND                          = 0x0000003b,
OFFCHIP_HS_DEALLOC                       = 0x0000003c,
ENABLE_NGG_PIPELINE                      = 0x0000003d,
ENABLE_LEGACY_PIPELINE                   = 0x0000003e,
Reserved_0x3f                            = 0x0000003f,
} VGT_EVENT_TYPE;

/*
 * VGT_DMA_SWAP_MODE enum
 */

typedef enum VGT_DMA_SWAP_MODE {
VGT_DMA_SWAP_NONE                        = 0x00000000,
VGT_DMA_SWAP_16_BIT                      = 0x00000001,
VGT_DMA_SWAP_32_BIT                      = 0x00000002,
VGT_DMA_SWAP_WORD                        = 0x00000003,
} VGT_DMA_SWAP_MODE;

/*
 * VGT_INDEX_TYPE_MODE enum
 */

typedef enum VGT_INDEX_TYPE_MODE {
VGT_INDEX_16                             = 0x00000000,
VGT_INDEX_32                             = 0x00000001,
VGT_INDEX_8                              = 0x00000002,
} VGT_INDEX_TYPE_MODE;

/*
 * VGT_DMA_BUF_TYPE enum
 */

typedef enum VGT_DMA_BUF_TYPE {
VGT_DMA_BUF_MEM                          = 0x00000000,
VGT_DMA_BUF_RING                         = 0x00000001,
VGT_DMA_BUF_SETUP                        = 0x00000002,
VGT_DMA_PTR_UPDATE                       = 0x00000003,
} VGT_DMA_BUF_TYPE;

/*
 * VGT_OUTPATH_SELECT enum
 */

typedef enum VGT_OUTPATH_SELECT {
VGT_OUTPATH_VTX_REUSE                    = 0x00000000,
VGT_OUTPATH_TESS_EN                      = 0x00000001,
VGT_OUTPATH_PASSTHRU                     = 0x00000002,
VGT_OUTPATH_GS_BLOCK                     = 0x00000003,
VGT_OUTPATH_HS_BLOCK                     = 0x00000004,
VGT_OUTPATH_PRIM_GEN                     = 0x00000005,
} VGT_OUTPATH_SELECT;

/*
 * VGT_GRP_PRIM_TYPE enum
 */

typedef enum VGT_GRP_PRIM_TYPE {
VGT_GRP_3D_POINT                         = 0x00000000,
VGT_GRP_3D_LINE                          = 0x00000001,
VGT_GRP_3D_TRI                           = 0x00000002,
VGT_GRP_3D_RECT                          = 0x00000003,
VGT_GRP_3D_QUAD                          = 0x00000004,
VGT_GRP_2D_COPY_RECT_V0                  = 0x00000005,
VGT_GRP_2D_COPY_RECT_V1                  = 0x00000006,
VGT_GRP_2D_COPY_RECT_V2                  = 0x00000007,
VGT_GRP_2D_COPY_RECT_V3                  = 0x00000008,
VGT_GRP_2D_FILL_RECT                     = 0x00000009,
VGT_GRP_2D_LINE                          = 0x0000000a,
VGT_GRP_2D_TRI                           = 0x0000000b,
VGT_GRP_PRIM_INDEX_LINE                  = 0x0000000c,
VGT_GRP_PRIM_INDEX_TRI                   = 0x0000000d,
VGT_GRP_PRIM_INDEX_QUAD                  = 0x0000000e,
VGT_GRP_3D_LINE_ADJ                      = 0x0000000f,
VGT_GRP_3D_TRI_ADJ                       = 0x00000010,
VGT_GRP_3D_PATCH                         = 0x00000011,
VGT_GRP_2D_RECT                          = 0x00000012,
} VGT_GRP_PRIM_TYPE;

/*
 * VGT_GRP_PRIM_ORDER enum
 */

typedef enum VGT_GRP_PRIM_ORDER {
VGT_GRP_LIST                             = 0x00000000,
VGT_GRP_STRIP                            = 0x00000001,
VGT_GRP_FAN                              = 0x00000002,
VGT_GRP_LOOP                             = 0x00000003,
VGT_GRP_POLYGON                          = 0x00000004,
} VGT_GRP_PRIM_ORDER;

/*
 * VGT_GROUP_CONV_SEL enum
 */

typedef enum VGT_GROUP_CONV_SEL {
VGT_GRP_INDEX_16                         = 0x00000000,
VGT_GRP_INDEX_32                         = 0x00000001,
VGT_GRP_UINT_16                          = 0x00000002,
VGT_GRP_UINT_32                          = 0x00000003,
VGT_GRP_SINT_16                          = 0x00000004,
VGT_GRP_SINT_32                          = 0x00000005,
VGT_GRP_FLOAT_32                         = 0x00000006,
VGT_GRP_AUTO_PRIM                        = 0x00000007,
VGT_GRP_FIX_1_23_TO_FLOAT                = 0x00000008,
} VGT_GROUP_CONV_SEL;

/*
 * VGT_GS_MODE_TYPE enum
 */

typedef enum VGT_GS_MODE_TYPE {
GS_OFF                                   = 0x00000000,
GS_SCENARIO_A                            = 0x00000001,
GS_SCENARIO_B                            = 0x00000002,
GS_SCENARIO_G                            = 0x00000003,
GS_SCENARIO_C                            = 0x00000004,
SPRITE_EN                                = 0x00000005,
} VGT_GS_MODE_TYPE;

/*
 * VGT_GS_CUT_MODE enum
 */

typedef enum VGT_GS_CUT_MODE {
GS_CUT_1024                              = 0x00000000,
GS_CUT_512                               = 0x00000001,
GS_CUT_256                               = 0x00000002,
GS_CUT_128                               = 0x00000003,
} VGT_GS_CUT_MODE;

/*
 * VGT_GS_OUTPRIM_TYPE enum
 */

typedef enum VGT_GS_OUTPRIM_TYPE {
POINTLIST                                = 0x00000000,
LINESTRIP                                = 0x00000001,
TRISTRIP                                 = 0x00000002,
RECTLIST                                 = 0x00000003,
} VGT_GS_OUTPRIM_TYPE;

/*
 * VGT_CACHE_INVALID_MODE enum
 */

typedef enum VGT_CACHE_INVALID_MODE {
VC_ONLY                                  = 0x00000000,
TC_ONLY                                  = 0x00000001,
VC_AND_TC                                = 0x00000002,
} VGT_CACHE_INVALID_MODE;

/*
 * VGT_TESS_TYPE enum
 */

typedef enum VGT_TESS_TYPE {
TESS_ISOLINE                             = 0x00000000,
TESS_TRIANGLE                            = 0x00000001,
TESS_QUAD                                = 0x00000002,
} VGT_TESS_TYPE;

/*
 * VGT_TESS_PARTITION enum
 */

typedef enum VGT_TESS_PARTITION {
PART_INTEGER                             = 0x00000000,
PART_POW2                                = 0x00000001,
PART_FRAC_ODD                            = 0x00000002,
PART_FRAC_EVEN                           = 0x00000003,
} VGT_TESS_PARTITION;

/*
 * VGT_TESS_TOPOLOGY enum
 */

typedef enum VGT_TESS_TOPOLOGY {
OUTPUT_POINT                             = 0x00000000,
OUTPUT_LINE                              = 0x00000001,
OUTPUT_TRIANGLE_CW                       = 0x00000002,
OUTPUT_TRIANGLE_CCW                      = 0x00000003,
} VGT_TESS_TOPOLOGY;

/*
 * VGT_RDREQ_POLICY enum
 */

typedef enum VGT_RDREQ_POLICY {
VGT_POLICY_LRU                           = 0x00000000,
VGT_POLICY_STREAM                        = 0x00000001,
} VGT_RDREQ_POLICY;

/*
 * VGT_DIST_MODE enum
 */

typedef enum VGT_DIST_MODE {
NO_DIST                                  = 0x00000000,
PATCHES                                  = 0x00000001,
DONUTS                                   = 0x00000002,
TRAPEZOIDS                               = 0x00000003,
} VGT_DIST_MODE;

/*
 * VGT_STAGES_LS_EN enum
 */

typedef enum VGT_STAGES_LS_EN {
LS_STAGE_OFF                             = 0x00000000,
LS_STAGE_ON                              = 0x00000001,
CS_STAGE_ON                              = 0x00000002,
RESERVED_LS                              = 0x00000003,
} VGT_STAGES_LS_EN;

/*
 * VGT_STAGES_HS_EN enum
 */

typedef enum VGT_STAGES_HS_EN {
HS_STAGE_OFF                             = 0x00000000,
HS_STAGE_ON                              = 0x00000001,
} VGT_STAGES_HS_EN;

/*
 * VGT_STAGES_ES_EN enum
 */

typedef enum VGT_STAGES_ES_EN {
ES_STAGE_OFF                             = 0x00000000,
ES_STAGE_DS                              = 0x00000001,
ES_STAGE_REAL                            = 0x00000002,
RESERVED_ES                              = 0x00000003,
} VGT_STAGES_ES_EN;

/*
 * VGT_STAGES_GS_EN enum
 */

typedef enum VGT_STAGES_GS_EN {
GS_STAGE_OFF                             = 0x00000000,
GS_STAGE_ON                              = 0x00000001,
} VGT_STAGES_GS_EN;

/*
 * VGT_STAGES_VS_EN enum
 */

typedef enum VGT_STAGES_VS_EN {
VS_STAGE_REAL                            = 0x00000000,
VS_STAGE_DS                              = 0x00000001,
VS_STAGE_COPY_SHADER                     = 0x00000002,
RESERVED_VS                              = 0x00000003,
} VGT_STAGES_VS_EN;

/*
 * VGT_PERFCOUNT_SELECT enum
 */

typedef enum VGT_PERFCOUNT_SELECT {
vgt_perf_VGT_SPI_ESTHREAD_EVENT_WINDOW_ACTIVE  = 0x00000000,
vgt_perf_VGT_SPI_ESVERT_VALID            = 0x00000001,
vgt_perf_VGT_SPI_ESVERT_EOV              = 0x00000002,
vgt_perf_VGT_SPI_ESVERT_STALLED          = 0x00000003,
vgt_perf_VGT_SPI_ESVERT_STARVED_BUSY     = 0x00000004,
vgt_perf_VGT_SPI_ESVERT_STARVED_IDLE     = 0x00000005,
vgt_perf_VGT_SPI_ESVERT_STATIC           = 0x00000006,
vgt_perf_VGT_SPI_ESTHREAD_IS_EVENT       = 0x00000007,
vgt_perf_VGT_SPI_ESTHREAD_SEND           = 0x00000008,
vgt_perf_VGT_SPI_GSPRIM_VALID            = 0x00000009,
vgt_perf_VGT_SPI_GSPRIM_EOV              = 0x0000000a,
vgt_perf_VGT_SPI_GSPRIM_CONT             = 0x0000000b,
vgt_perf_VGT_SPI_GSPRIM_STALLED          = 0x0000000c,
vgt_perf_VGT_SPI_GSPRIM_STARVED_BUSY     = 0x0000000d,
vgt_perf_VGT_SPI_GSPRIM_STARVED_IDLE     = 0x0000000e,
vgt_perf_VGT_SPI_GSPRIM_STATIC           = 0x0000000f,
vgt_perf_VGT_SPI_GSTHREAD_EVENT_WINDOW_ACTIVE  = 0x00000010,
vgt_perf_VGT_SPI_GSTHREAD_IS_EVENT       = 0x00000011,
vgt_perf_VGT_SPI_GSTHREAD_SEND           = 0x00000012,
vgt_perf_VGT_SPI_VSTHREAD_EVENT_WINDOW_ACTIVE  = 0x00000013,
vgt_perf_VGT_SPI_VSVERT_SEND             = 0x00000014,
vgt_perf_VGT_SPI_VSVERT_EOV              = 0x00000015,
vgt_perf_VGT_SPI_VSVERT_STALLED          = 0x00000016,
vgt_perf_VGT_SPI_VSVERT_STARVED_BUSY     = 0x00000017,
vgt_perf_VGT_SPI_VSVERT_STARVED_IDLE     = 0x00000018,
vgt_perf_VGT_SPI_VSVERT_STATIC           = 0x00000019,
vgt_perf_VGT_SPI_VSTHREAD_IS_EVENT       = 0x0000001a,
vgt_perf_VGT_SPI_VSTHREAD_SEND           = 0x0000001b,
vgt_perf_VGT_PA_EVENT_WINDOW_ACTIVE      = 0x0000001c,
vgt_perf_VGT_PA_CLIPV_SEND               = 0x0000001d,
vgt_perf_VGT_PA_CLIPV_FIRSTVERT          = 0x0000001e,
vgt_perf_VGT_PA_CLIPV_STALLED            = 0x0000001f,
vgt_perf_VGT_PA_CLIPV_STARVED_BUSY       = 0x00000020,
vgt_perf_VGT_PA_CLIPV_STARVED_IDLE       = 0x00000021,
vgt_perf_VGT_PA_CLIPV_STATIC             = 0x00000022,
vgt_perf_VGT_PA_CLIPP_SEND               = 0x00000023,
vgt_perf_VGT_PA_CLIPP_EOP                = 0x00000024,
vgt_perf_VGT_PA_CLIPP_IS_EVENT           = 0x00000025,
vgt_perf_VGT_PA_CLIPP_NULL_PRIM          = 0x00000026,
vgt_perf_VGT_PA_CLIPP_NEW_VTX_VECT       = 0x00000027,
vgt_perf_VGT_PA_CLIPP_STALLED            = 0x00000028,
vgt_perf_VGT_PA_CLIPP_STARVED_BUSY       = 0x00000029,
vgt_perf_VGT_PA_CLIPP_STARVED_IDLE       = 0x0000002a,
vgt_perf_VGT_PA_CLIPP_STATIC             = 0x0000002b,
vgt_perf_VGT_PA_CLIPS_SEND               = 0x0000002c,
vgt_perf_VGT_PA_CLIPS_STALLED            = 0x0000002d,
vgt_perf_VGT_PA_CLIPS_STARVED_BUSY       = 0x0000002e,
vgt_perf_VGT_PA_CLIPS_STARVED_IDLE       = 0x0000002f,
vgt_perf_VGT_PA_CLIPS_STATIC             = 0x00000030,
vgt_perf_vsvert_ds_send                  = 0x00000031,
vgt_perf_vsvert_api_send                 = 0x00000032,
vgt_perf_hs_tif_stall                    = 0x00000033,
vgt_perf_hs_input_stall                  = 0x00000034,
vgt_perf_hs_interface_stall              = 0x00000035,
vgt_perf_hs_tfm_stall                    = 0x00000036,
vgt_perf_te11_starved                    = 0x00000037,
vgt_perf_gs_event_stall                  = 0x00000038,
vgt_perf_vgt_pa_clipp_send_not_event     = 0x00000039,
vgt_perf_vgt_pa_clipp_valid_prim         = 0x0000003a,
vgt_perf_reused_es_indices               = 0x0000003b,
vgt_perf_vs_cache_hits                   = 0x0000003c,
vgt_perf_gs_cache_hits                   = 0x0000003d,
vgt_perf_ds_cache_hits                   = 0x0000003e,
vgt_perf_total_cache_hits                = 0x0000003f,
vgt_perf_vgt_busy                        = 0x00000040,
vgt_perf_vgt_gs_busy                     = 0x00000041,
vgt_perf_esvert_stalled_es_tbl           = 0x00000042,
vgt_perf_esvert_stalled_gs_tbl           = 0x00000043,
vgt_perf_esvert_stalled_gs_event         = 0x00000044,
vgt_perf_esvert_stalled_gsprim           = 0x00000045,
vgt_perf_gsprim_stalled_es_tbl           = 0x00000046,
vgt_perf_gsprim_stalled_gs_tbl           = 0x00000047,
vgt_perf_gsprim_stalled_gs_event         = 0x00000048,
vgt_perf_gsprim_stalled_esvert           = 0x00000049,
vgt_perf_esthread_stalled_es_rb_full     = 0x0000004a,
vgt_perf_esthread_stalled_spi_bp         = 0x0000004b,
vgt_perf_counters_avail_stalled          = 0x0000004c,
vgt_perf_gs_rb_space_avail_stalled       = 0x0000004d,
vgt_perf_gs_issue_rtr_stalled            = 0x0000004e,
vgt_perf_gsthread_stalled                = 0x0000004f,
vgt_perf_strmout_stalled                 = 0x00000050,
vgt_perf_wait_for_es_done_stalled        = 0x00000051,
vgt_perf_cm_stalled_by_gog               = 0x00000052,
vgt_perf_cm_reading_stalled              = 0x00000053,
vgt_perf_cm_stalled_by_gsfetch_done      = 0x00000054,
vgt_perf_gog_vs_tbl_stalled              = 0x00000055,
vgt_perf_gog_out_indx_stalled            = 0x00000056,
vgt_perf_gog_out_prim_stalled            = 0x00000057,
vgt_perf_waveid_stalled                  = 0x00000058,
vgt_perf_gog_busy                        = 0x00000059,
vgt_perf_reused_vs_indices               = 0x0000005a,
vgt_perf_sclk_reg_vld_event              = 0x0000005b,
vgt_perf_vs_conflicting_indices          = 0x0000005c,
vgt_perf_sclk_core_vld_event             = 0x0000005d,
vgt_perf_hswave_stalled                  = 0x0000005e,
vgt_perf_sclk_gs_vld_event               = 0x0000005f,
vgt_perf_VGT_SPI_LSVERT_VALID            = 0x00000060,
vgt_perf_VGT_SPI_LSVERT_EOV              = 0x00000061,
vgt_perf_VGT_SPI_LSVERT_STALLED          = 0x00000062,
vgt_perf_VGT_SPI_LSVERT_STARVED_BUSY     = 0x00000063,
vgt_perf_VGT_SPI_LSVERT_STARVED_IDLE     = 0x00000064,
vgt_perf_VGT_SPI_LSVERT_STATIC           = 0x00000065,
vgt_perf_VGT_SPI_LSWAVE_EVENT_WINDOW_ACTIVE  = 0x00000066,
vgt_perf_VGT_SPI_LSWAVE_IS_EVENT         = 0x00000067,
vgt_perf_VGT_SPI_LSWAVE_SEND             = 0x00000068,
vgt_perf_VGT_SPI_HSVERT_VALID            = 0x00000069,
vgt_perf_VGT_SPI_HSVERT_EOV              = 0x0000006a,
vgt_perf_VGT_SPI_HSVERT_STALLED          = 0x0000006b,
vgt_perf_VGT_SPI_HSVERT_STARVED_BUSY     = 0x0000006c,
vgt_perf_VGT_SPI_HSVERT_STARVED_IDLE     = 0x0000006d,
vgt_perf_VGT_SPI_HSVERT_STATIC           = 0x0000006e,
vgt_perf_VGT_SPI_HSWAVE_EVENT_WINDOW_ACTIVE  = 0x0000006f,
vgt_perf_VGT_SPI_HSWAVE_IS_EVENT         = 0x00000070,
vgt_perf_VGT_SPI_HSWAVE_SEND             = 0x00000071,
vgt_perf_ds_prims                        = 0x00000072,
vgt_perf_ds_RESERVED                     = 0x00000073,
vgt_perf_ls_thread_groups                = 0x00000074,
vgt_perf_hs_thread_groups                = 0x00000075,
vgt_perf_es_thread_groups                = 0x00000076,
vgt_perf_vs_thread_groups                = 0x00000077,
vgt_perf_ls_done_latency                 = 0x00000078,
vgt_perf_hs_done_latency                 = 0x00000079,
vgt_perf_es_done_latency                 = 0x0000007a,
vgt_perf_gs_done_latency                 = 0x0000007b,
vgt_perf_vgt_hs_busy                     = 0x0000007c,
vgt_perf_vgt_te11_busy                   = 0x0000007d,
vgt_perf_ls_flush                        = 0x0000007e,
vgt_perf_hs_flush                        = 0x0000007f,
vgt_perf_es_flush                        = 0x00000080,
vgt_perf_vgt_pa_clipp_eopg               = 0x00000081,
vgt_perf_ls_done                         = 0x00000082,
vgt_perf_hs_done                         = 0x00000083,
vgt_perf_es_done                         = 0x00000084,
vgt_perf_gs_done                         = 0x00000085,
vgt_perf_vsfetch_done                    = 0x00000086,
vgt_perf_gs_done_received                = 0x00000087,
vgt_perf_es_ring_high_water_mark         = 0x00000088,
vgt_perf_gs_ring_high_water_mark         = 0x00000089,
vgt_perf_vs_table_high_water_mark        = 0x0000008a,
vgt_perf_hs_tgs_active_high_water_mark   = 0x0000008b,
vgt_perf_pa_clipp_dealloc                = 0x0000008c,
vgt_perf_cut_mem_flush_stalled           = 0x0000008d,
vgt_perf_vsvert_work_received            = 0x0000008e,
vgt_perf_vgt_pa_clipp_starved_after_work  = 0x0000008f,
vgt_perf_te11_con_starved_after_work     = 0x00000090,
vgt_perf_hs_waiting_on_ls_done_stall     = 0x00000091,
vgt_spi_vsvert_valid                     = 0x00000092,
} VGT_PERFCOUNT_SELECT;

/*
 * IA_PERFCOUNT_SELECT enum
 */

typedef enum IA_PERFCOUNT_SELECT {
ia_perf_GRP_INPUT_EVENT_WINDOW_ACTIVE    = 0x00000000,
ia_perf_dma_data_fifo_full               = 0x00000001,
ia_perf_RESERVED1                        = 0x00000002,
ia_perf_RESERVED2                        = 0x00000003,
ia_perf_RESERVED3                        = 0x00000004,
ia_perf_RESERVED4                        = 0x00000005,
ia_perf_RESERVED5                        = 0x00000006,
ia_perf_MC_LAT_BIN_0                     = 0x00000007,
ia_perf_MC_LAT_BIN_1                     = 0x00000008,
ia_perf_MC_LAT_BIN_2                     = 0x00000009,
ia_perf_MC_LAT_BIN_3                     = 0x0000000a,
ia_perf_MC_LAT_BIN_4                     = 0x0000000b,
ia_perf_MC_LAT_BIN_5                     = 0x0000000c,
ia_perf_MC_LAT_BIN_6                     = 0x0000000d,
ia_perf_MC_LAT_BIN_7                     = 0x0000000e,
ia_perf_ia_busy                          = 0x0000000f,
ia_perf_ia_sclk_reg_vld_event            = 0x00000010,
ia_perf_RESERVED6                        = 0x00000011,
ia_perf_ia_sclk_core_vld_event           = 0x00000012,
ia_perf_RESERVED7                        = 0x00000013,
ia_perf_ia_dma_return                    = 0x00000014,
ia_perf_ia_stalled                       = 0x00000015,
ia_perf_shift_starved_pipe0_event        = 0x00000016,
ia_perf_shift_starved_pipe1_event        = 0x00000017,
} IA_PERFCOUNT_SELECT;

/*
 * WD_PERFCOUNT_SELECT enum
 */

typedef enum WD_PERFCOUNT_SELECT {
wd_perf_RBIU_FIFOS_EVENT_WINDOW_ACTIVE   = 0x00000000,
wd_perf_RBIU_DR_FIFO_STARVED             = 0x00000001,
wd_perf_RBIU_DR_FIFO_STALLED             = 0x00000002,
wd_perf_RBIU_DI_FIFO_STARVED             = 0x00000003,
wd_perf_RBIU_DI_FIFO_STALLED             = 0x00000004,
wd_perf_wd_busy                          = 0x00000005,
wd_perf_wd_sclk_reg_vld_event            = 0x00000006,
wd_perf_wd_sclk_input_vld_event          = 0x00000007,
wd_perf_wd_sclk_core_vld_event           = 0x00000008,
wd_perf_wd_stalled                       = 0x00000009,
wd_perf_inside_tf_bin_0                  = 0x0000000a,
wd_perf_inside_tf_bin_1                  = 0x0000000b,
wd_perf_inside_tf_bin_2                  = 0x0000000c,
wd_perf_inside_tf_bin_3                  = 0x0000000d,
wd_perf_inside_tf_bin_4                  = 0x0000000e,
wd_perf_inside_tf_bin_5                  = 0x0000000f,
wd_perf_inside_tf_bin_6                  = 0x00000010,
wd_perf_inside_tf_bin_7                  = 0x00000011,
wd_perf_inside_tf_bin_8                  = 0x00000012,
wd_perf_tfreq_lat_bin_0                  = 0x00000013,
wd_perf_tfreq_lat_bin_1                  = 0x00000014,
wd_perf_tfreq_lat_bin_2                  = 0x00000015,
wd_perf_tfreq_lat_bin_3                  = 0x00000016,
wd_perf_tfreq_lat_bin_4                  = 0x00000017,
wd_perf_tfreq_lat_bin_5                  = 0x00000018,
wd_perf_tfreq_lat_bin_6                  = 0x00000019,
wd_perf_tfreq_lat_bin_7                  = 0x0000001a,
wd_starved_on_hs_done                    = 0x0000001b,
wd_perf_se0_hs_done_latency              = 0x0000001c,
wd_perf_se1_hs_done_latency              = 0x0000001d,
wd_perf_se2_hs_done_latency              = 0x0000001e,
wd_perf_se3_hs_done_latency              = 0x0000001f,
wd_perf_hs_done_se0                      = 0x00000020,
wd_perf_hs_done_se1                      = 0x00000021,
wd_perf_hs_done_se2                      = 0x00000022,
wd_perf_hs_done_se3                      = 0x00000023,
wd_perf_null_patches                     = 0x00000024,
} WD_PERFCOUNT_SELECT;

/*
 * WD_IA_DRAW_TYPE enum
 */

typedef enum WD_IA_DRAW_TYPE {
WD_IA_DRAW_TYPE_DI_MM0                   = 0x00000000,
WD_IA_DRAW_TYPE_REG_XFER                 = 0x00000001,
WD_IA_DRAW_TYPE_EVENT_INIT               = 0x00000002,
WD_IA_DRAW_TYPE_EVENT_ADDR               = 0x00000003,
WD_IA_DRAW_TYPE_MIN_INDX                 = 0x00000004,
WD_IA_DRAW_TYPE_MAX_INDX                 = 0x00000005,
WD_IA_DRAW_TYPE_INDX_OFF                 = 0x00000006,
WD_IA_DRAW_TYPE_IMM_DATA                 = 0x00000007,
} WD_IA_DRAW_TYPE;

/*
 * WD_IA_DRAW_REG_XFER enum
 */

typedef enum WD_IA_DRAW_REG_XFER {
WD_IA_DRAW_REG_XFER_IA_MULTI_VGT_PARAM   = 0x00000000,
WD_IA_DRAW_REG_XFER_VGT_MULTI_PRIM_IB_RESET_EN = 0x00000001,
} WD_IA_DRAW_REG_XFER;

/*
 * WD_IA_DRAW_SOURCE enum
 */

typedef enum WD_IA_DRAW_SOURCE {
WD_IA_DRAW_SOURCE_DMA                    = 0x00000000,
WD_IA_DRAW_SOURCE_IMMD                   = 0x00000001,
WD_IA_DRAW_SOURCE_AUTO                   = 0x00000002,
WD_IA_DRAW_SOURCE_OPAQ                   = 0x00000003,
} WD_IA_DRAW_SOURCE;

/*
 * GS_THREADID_SIZE value
 */

#define GSTHREADID_SIZE                0x00000002

/*******************************************************
 * GB Enums
 *******************************************************/

/*
 * GB_EDC_DED_MODE enum
 */

typedef enum GB_EDC_DED_MODE {
GB_EDC_DED_MODE_LOG                      = 0x00000000,
GB_EDC_DED_MODE_HALT                     = 0x00000001,
GB_EDC_DED_MODE_INT_HALT                 = 0x00000002,
} GB_EDC_DED_MODE;

/*
 * VALUE_GB_TILING_CONFIG_TABLE_SIZE value
 */

#define GB_TILING_CONFIG_TABLE_SIZE    0x00000020

/*
 * VALUE_GB_TILING_CONFIG_MACROTABLE_SIZE value
 */

#define GB_TILING_CONFIG_MACROTABLE_SIZE 0x00000010

/*******************************************************
 * TP Enums
 *******************************************************/

/*
 * TA_TC_ADDR_MODES enum
 */

typedef enum TA_TC_ADDR_MODES {
TA_TC_ADDR_MODE_DEFAULT                  = 0x00000000,
TA_TC_ADDR_MODE_COMP0                    = 0x00000001,
TA_TC_ADDR_MODE_COMP1                    = 0x00000002,
TA_TC_ADDR_MODE_COMP2                    = 0x00000003,
TA_TC_ADDR_MODE_COMP3                    = 0x00000004,
TA_TC_ADDR_MODE_UNALIGNED                = 0x00000005,
TA_TC_ADDR_MODE_BORDER_COLOR             = 0x00000006,
} TA_TC_ADDR_MODES;

/*
 * TA_PERFCOUNT_SEL enum
 */

typedef enum TA_PERFCOUNT_SEL {
TA_PERF_SEL_NULL                         = 0x00000000,
TA_PERF_SEL_sh_fifo_busy                 = 0x00000001,
TA_PERF_SEL_sh_fifo_cmd_busy             = 0x00000002,
TA_PERF_SEL_sh_fifo_addr_busy            = 0x00000003,
TA_PERF_SEL_sh_fifo_data_busy            = 0x00000004,
TA_PERF_SEL_sh_fifo_data_sfifo_busy      = 0x00000005,
TA_PERF_SEL_sh_fifo_data_tfifo_busy      = 0x00000006,
TA_PERF_SEL_gradient_busy                = 0x00000007,
TA_PERF_SEL_gradient_fifo_busy           = 0x00000008,
TA_PERF_SEL_lod_busy                     = 0x00000009,
TA_PERF_SEL_lod_fifo_busy                = 0x0000000a,
TA_PERF_SEL_addresser_busy               = 0x0000000b,
TA_PERF_SEL_addresser_fifo_busy          = 0x0000000c,
TA_PERF_SEL_aligner_busy                 = 0x0000000d,
TA_PERF_SEL_write_path_busy              = 0x0000000e,
TA_PERF_SEL_ta_busy                      = 0x0000000f,
TA_PERF_SEL_sq_ta_cmd_cycles             = 0x00000010,
TA_PERF_SEL_sp_ta_addr_cycles            = 0x00000011,
TA_PERF_SEL_sp_ta_data_cycles            = 0x00000012,
TA_PERF_SEL_ta_fa_data_state_cycles      = 0x00000013,
TA_PERF_SEL_sh_fifo_addr_waiting_on_cmd_cycles  = 0x00000014,
TA_PERF_SEL_sh_fifo_cmd_waiting_on_addr_cycles  = 0x00000015,
TA_PERF_SEL_sh_fifo_addr_starved_while_busy_cycles  = 0x00000016,
TA_PERF_SEL_sh_fifo_cmd_starved_while_busy_cycles  = 0x00000017,
TA_PERF_SEL_sh_fifo_data_waiting_on_data_state_cycles  = 0x00000018,
TA_PERF_SEL_sh_fifo_data_state_waiting_on_data_cycles  = 0x00000019,
TA_PERF_SEL_sh_fifo_data_starved_while_busy_cycles  = 0x0000001a,
TA_PERF_SEL_sh_fifo_data_state_starved_while_busy_cycles  = 0x0000001b,
TA_PERF_SEL_RESERVED_28                  = 0x0000001c,
TA_PERF_SEL_RESERVED_29                  = 0x0000001d,
TA_PERF_SEL_sh_fifo_addr_cycles          = 0x0000001e,
TA_PERF_SEL_sh_fifo_data_cycles          = 0x0000001f,
TA_PERF_SEL_total_wavefronts             = 0x00000020,
TA_PERF_SEL_gradient_cycles              = 0x00000021,
TA_PERF_SEL_walker_cycles                = 0x00000022,
TA_PERF_SEL_aligner_cycles               = 0x00000023,
TA_PERF_SEL_image_wavefronts             = 0x00000024,
TA_PERF_SEL_image_read_wavefronts        = 0x00000025,
TA_PERF_SEL_image_write_wavefronts       = 0x00000026,
TA_PERF_SEL_image_atomic_wavefronts      = 0x00000027,
TA_PERF_SEL_image_total_cycles           = 0x00000028,
TA_PERF_SEL_RESERVED_41                  = 0x00000029,
TA_PERF_SEL_RESERVED_42                  = 0x0000002a,
TA_PERF_SEL_RESERVED_43                  = 0x0000002b,
TA_PERF_SEL_buffer_wavefronts            = 0x0000002c,
TA_PERF_SEL_buffer_read_wavefronts       = 0x0000002d,
TA_PERF_SEL_buffer_write_wavefronts      = 0x0000002e,
TA_PERF_SEL_buffer_atomic_wavefronts     = 0x0000002f,
TA_PERF_SEL_buffer_coalescable_wavefronts  = 0x00000030,
TA_PERF_SEL_buffer_total_cycles          = 0x00000031,
TA_PERF_SEL_buffer_coalescable_addr_multicycled_cycles  = 0x00000032,
TA_PERF_SEL_buffer_coalescable_clamp_16kdword_multicycled_cycles  = 0x00000033,
TA_PERF_SEL_buffer_coalesced_read_cycles  = 0x00000034,
TA_PERF_SEL_buffer_coalesced_write_cycles  = 0x00000035,
TA_PERF_SEL_addr_stalled_by_tc_cycles    = 0x00000036,
TA_PERF_SEL_addr_stalled_by_td_cycles    = 0x00000037,
TA_PERF_SEL_data_stalled_by_tc_cycles    = 0x00000038,
TA_PERF_SEL_addresser_stalled_by_aligner_only_cycles  = 0x00000039,
TA_PERF_SEL_addresser_stalled_cycles     = 0x0000003a,
TA_PERF_SEL_aniso_stalled_by_addresser_only_cycles  = 0x0000003b,
TA_PERF_SEL_aniso_stalled_cycles         = 0x0000003c,
TA_PERF_SEL_deriv_stalled_by_aniso_only_cycles  = 0x0000003d,
TA_PERF_SEL_deriv_stalled_cycles         = 0x0000003e,
TA_PERF_SEL_aniso_gt1_cycle_quads        = 0x0000003f,
TA_PERF_SEL_color_1_cycle_pixels         = 0x00000040,
TA_PERF_SEL_color_2_cycle_pixels         = 0x00000041,
TA_PERF_SEL_color_3_cycle_pixels         = 0x00000042,
TA_PERF_SEL_color_4_cycle_pixels         = 0x00000043,
TA_PERF_SEL_mip_1_cycle_pixels           = 0x00000044,
TA_PERF_SEL_mip_2_cycle_pixels           = 0x00000045,
TA_PERF_SEL_vol_1_cycle_pixels           = 0x00000046,
TA_PERF_SEL_vol_2_cycle_pixels           = 0x00000047,
TA_PERF_SEL_bilin_point_1_cycle_pixels   = 0x00000048,
TA_PERF_SEL_mipmap_lod_0_samples         = 0x00000049,
TA_PERF_SEL_mipmap_lod_1_samples         = 0x0000004a,
TA_PERF_SEL_mipmap_lod_2_samples         = 0x0000004b,
TA_PERF_SEL_mipmap_lod_3_samples         = 0x0000004c,
TA_PERF_SEL_mipmap_lod_4_samples         = 0x0000004d,
TA_PERF_SEL_mipmap_lod_5_samples         = 0x0000004e,
TA_PERF_SEL_mipmap_lod_6_samples         = 0x0000004f,
TA_PERF_SEL_mipmap_lod_7_samples         = 0x00000050,
TA_PERF_SEL_mipmap_lod_8_samples         = 0x00000051,
TA_PERF_SEL_mipmap_lod_9_samples         = 0x00000052,
TA_PERF_SEL_mipmap_lod_10_samples        = 0x00000053,
TA_PERF_SEL_mipmap_lod_11_samples        = 0x00000054,
TA_PERF_SEL_mipmap_lod_12_samples        = 0x00000055,
TA_PERF_SEL_mipmap_lod_13_samples        = 0x00000056,
TA_PERF_SEL_mipmap_lod_14_samples        = 0x00000057,
TA_PERF_SEL_mipmap_invalid_samples       = 0x00000058,
TA_PERF_SEL_aniso_1_cycle_quads          = 0x00000059,
TA_PERF_SEL_aniso_2_cycle_quads          = 0x0000005a,
TA_PERF_SEL_aniso_4_cycle_quads          = 0x0000005b,
TA_PERF_SEL_aniso_6_cycle_quads          = 0x0000005c,
TA_PERF_SEL_aniso_8_cycle_quads          = 0x0000005d,
TA_PERF_SEL_aniso_10_cycle_quads         = 0x0000005e,
TA_PERF_SEL_aniso_12_cycle_quads         = 0x0000005f,
TA_PERF_SEL_aniso_14_cycle_quads         = 0x00000060,
TA_PERF_SEL_aniso_16_cycle_quads         = 0x00000061,
TA_PERF_SEL_write_path_input_cycles      = 0x00000062,
TA_PERF_SEL_write_path_output_cycles     = 0x00000063,
TA_PERF_SEL_flat_wavefronts              = 0x00000064,
TA_PERF_SEL_flat_read_wavefronts         = 0x00000065,
TA_PERF_SEL_flat_write_wavefronts        = 0x00000066,
TA_PERF_SEL_flat_atomic_wavefronts       = 0x00000067,
TA_PERF_SEL_flat_coalesceable_wavefronts  = 0x00000068,
TA_PERF_SEL_reg_sclk_vld                 = 0x00000069,
TA_PERF_SEL_local_cg_dyn_sclk_grp0_en    = 0x0000006a,
TA_PERF_SEL_local_cg_dyn_sclk_grp1_en    = 0x0000006b,
TA_PERF_SEL_local_cg_dyn_sclk_grp1_mems_en  = 0x0000006c,
TA_PERF_SEL_local_cg_dyn_sclk_grp4_en    = 0x0000006d,
TA_PERF_SEL_local_cg_dyn_sclk_grp5_en    = 0x0000006e,
TA_PERF_SEL_xnack_on_phase0              = 0x0000006f,
TA_PERF_SEL_xnack_on_phase1              = 0x00000070,
TA_PERF_SEL_xnack_on_phase2              = 0x00000071,
TA_PERF_SEL_xnack_on_phase3              = 0x00000072,
TA_PERF_SEL_first_xnack_on_phase0        = 0x00000073,
TA_PERF_SEL_first_xnack_on_phase1        = 0x00000074,
TA_PERF_SEL_first_xnack_on_phase2        = 0x00000075,
TA_PERF_SEL_first_xnack_on_phase3        = 0x00000076,
} TA_PERFCOUNT_SEL;

/*
 * TD_PERFCOUNT_SEL enum
 */

typedef enum TD_PERFCOUNT_SEL {
TD_PERF_SEL_none                         = 0x00000000,
TD_PERF_SEL_td_busy                      = 0x00000001,
TD_PERF_SEL_input_busy                   = 0x00000002,
TD_PERF_SEL_output_busy                  = 0x00000003,
TD_PERF_SEL_lerp_busy                    = 0x00000004,
TD_PERF_SEL_reg_sclk_vld                 = 0x00000005,
TD_PERF_SEL_local_cg_dyn_sclk_grp0_en    = 0x00000006,
TD_PERF_SEL_local_cg_dyn_sclk_grp1_en    = 0x00000007,
TD_PERF_SEL_local_cg_dyn_sclk_grp4_en    = 0x00000008,
TD_PERF_SEL_local_cg_dyn_sclk_grp5_en    = 0x00000009,
TD_PERF_SEL_tc_td_fifo_full              = 0x0000000a,
TD_PERF_SEL_constant_state_full          = 0x0000000b,
TD_PERF_SEL_sample_state_full            = 0x0000000c,
TD_PERF_SEL_output_fifo_full             = 0x0000000d,
TD_PERF_SEL_RESERVED_14                  = 0x0000000e,
TD_PERF_SEL_tc_stall                     = 0x0000000f,
TD_PERF_SEL_pc_stall                     = 0x00000010,
TD_PERF_SEL_gds_stall                    = 0x00000011,
TD_PERF_SEL_RESERVED_18                  = 0x00000012,
TD_PERF_SEL_RESERVED_19                  = 0x00000013,
TD_PERF_SEL_gather4_wavefront            = 0x00000014,
TD_PERF_SEL_gather4h_wavefront           = 0x00000015,
TD_PERF_SEL_gather4h_packed_wavefront    = 0x00000016,
TD_PERF_SEL_gather8h_packed_wavefront    = 0x00000017,
TD_PERF_SEL_sample_c_wavefront           = 0x00000018,
TD_PERF_SEL_load_wavefront               = 0x00000019,
TD_PERF_SEL_atomic_wavefront             = 0x0000001a,
TD_PERF_SEL_store_wavefront              = 0x0000001b,
TD_PERF_SEL_ldfptr_wavefront             = 0x0000001c,
TD_PERF_SEL_d16_en_wavefront             = 0x0000001d,
TD_PERF_SEL_bypass_filter_wavefront      = 0x0000001e,
TD_PERF_SEL_min_max_filter_wavefront     = 0x0000001f,
TD_PERF_SEL_coalescable_wavefront        = 0x00000020,
TD_PERF_SEL_coalesced_phase              = 0x00000021,
TD_PERF_SEL_four_phase_wavefront         = 0x00000022,
TD_PERF_SEL_eight_phase_wavefront        = 0x00000023,
TD_PERF_SEL_sixteen_phase_wavefront      = 0x00000024,
TD_PERF_SEL_four_phase_forward_wavefront  = 0x00000025,
TD_PERF_SEL_write_ack_wavefront          = 0x00000026,
TD_PERF_SEL_RESERVED_39                  = 0x00000027,
TD_PERF_SEL_user_defined_border          = 0x00000028,
TD_PERF_SEL_white_border                 = 0x00000029,
TD_PERF_SEL_opaque_black_border          = 0x0000002a,
TD_PERF_SEL_RESERVED_43                  = 0x0000002b,
TD_PERF_SEL_RESERVED_44                  = 0x0000002c,
TD_PERF_SEL_nack                         = 0x0000002d,
TD_PERF_SEL_td_sp_traffic                = 0x0000002e,
TD_PERF_SEL_consume_gds_traffic          = 0x0000002f,
TD_PERF_SEL_addresscmd_poison            = 0x00000030,
TD_PERF_SEL_data_poison                  = 0x00000031,
TD_PERF_SEL_start_cycle_0                = 0x00000032,
TD_PERF_SEL_start_cycle_1                = 0x00000033,
TD_PERF_SEL_start_cycle_2                = 0x00000034,
TD_PERF_SEL_start_cycle_3                = 0x00000035,
TD_PERF_SEL_null_cycle_output            = 0x00000036,
TD_PERF_SEL_d16_data_packed              = 0x00000037,
TD_PERF_SEL_texels_zeroed_out_by_blend_zero_prt  = 0x00000038,
} TD_PERFCOUNT_SEL;

/*
 * TCP_PERFCOUNT_SELECT enum
 */

typedef enum TCP_PERFCOUNT_SELECT {
TCP_PERF_SEL_TA_TCP_ADDR_STARVE_CYCLES   = 0x00000000,
TCP_PERF_SEL_TA_TCP_DATA_STARVE_CYCLES   = 0x00000001,
TCP_PERF_SEL_TCP_TA_ADDR_STALL_CYCLES    = 0x00000002,
TCP_PERF_SEL_TCP_TA_DATA_STALL_CYCLES    = 0x00000003,
TCP_PERF_SEL_TD_TCP_STALL_CYCLES         = 0x00000004,
TCP_PERF_SEL_TCR_TCP_STALL_CYCLES        = 0x00000005,
TCP_PERF_SEL_LOD_STALL_CYCLES            = 0x00000006,
TCP_PERF_SEL_READ_TAGCONFLICT_STALL_CYCLES  = 0x00000007,
TCP_PERF_SEL_WRITE_TAGCONFLICT_STALL_CYCLES  = 0x00000008,
TCP_PERF_SEL_ATOMIC_TAGCONFLICT_STALL_CYCLES  = 0x00000009,
TCP_PERF_SEL_ALLOC_STALL_CYCLES          = 0x0000000a,
TCP_PERF_SEL_LFIFO_STALL_CYCLES          = 0x0000000b,
TCP_PERF_SEL_RFIFO_STALL_CYCLES          = 0x0000000c,
TCP_PERF_SEL_TCR_RDRET_STALL             = 0x0000000d,
TCP_PERF_SEL_WRITE_CONFLICT_STALL        = 0x0000000e,
TCP_PERF_SEL_HOLE_READ_STALL             = 0x0000000f,
TCP_PERF_SEL_READCONFLICT_STALL_CYCLES   = 0x00000010,
TCP_PERF_SEL_PENDING_STALL_CYCLES        = 0x00000011,
TCP_PERF_SEL_READFIFO_STALL_CYCLES       = 0x00000012,
TCP_PERF_SEL_TCP_LATENCY                 = 0x00000013,
TCP_PERF_SEL_TCC_READ_REQ_LATENCY        = 0x00000014,
TCP_PERF_SEL_TCC_WRITE_REQ_LATENCY       = 0x00000015,
TCP_PERF_SEL_TCC_WRITE_REQ_HOLE_LATENCY  = 0x00000016,
TCP_PERF_SEL_TCC_READ_REQ                = 0x00000017,
TCP_PERF_SEL_TCC_WRITE_REQ               = 0x00000018,
TCP_PERF_SEL_TCC_ATOMIC_WITH_RET_REQ     = 0x00000019,
TCP_PERF_SEL_TCC_ATOMIC_WITHOUT_RET_REQ  = 0x0000001a,
TCP_PERF_SEL_TOTAL_LOCAL_READ            = 0x0000001b,
TCP_PERF_SEL_TOTAL_GLOBAL_READ           = 0x0000001c,
TCP_PERF_SEL_TOTAL_LOCAL_WRITE           = 0x0000001d,
TCP_PERF_SEL_TOTAL_GLOBAL_WRITE          = 0x0000001e,
TCP_PERF_SEL_TOTAL_ATOMIC_WITH_RET       = 0x0000001f,
TCP_PERF_SEL_TOTAL_ATOMIC_WITHOUT_RET    = 0x00000020,
TCP_PERF_SEL_TOTAL_WBINVL1               = 0x00000021,
TCP_PERF_SEL_IMG_READ_FMT_1              = 0x00000022,
TCP_PERF_SEL_IMG_READ_FMT_8              = 0x00000023,
TCP_PERF_SEL_IMG_READ_FMT_16             = 0x00000024,
TCP_PERF_SEL_IMG_READ_FMT_32             = 0x00000025,
TCP_PERF_SEL_IMG_READ_FMT_32_AS_8        = 0x00000026,
TCP_PERF_SEL_IMG_READ_FMT_32_AS_16       = 0x00000027,
TCP_PERF_SEL_IMG_READ_FMT_32_AS_128      = 0x00000028,
TCP_PERF_SEL_IMG_READ_FMT_64_2_CYCLE     = 0x00000029,
TCP_PERF_SEL_IMG_READ_FMT_64_1_CYCLE     = 0x0000002a,
TCP_PERF_SEL_IMG_READ_FMT_96             = 0x0000002b,
TCP_PERF_SEL_IMG_READ_FMT_128_4_CYCLE    = 0x0000002c,
TCP_PERF_SEL_IMG_READ_FMT_128_1_CYCLE    = 0x0000002d,
TCP_PERF_SEL_IMG_READ_FMT_BC1            = 0x0000002e,
TCP_PERF_SEL_IMG_READ_FMT_BC2            = 0x0000002f,
TCP_PERF_SEL_IMG_READ_FMT_BC3            = 0x00000030,
TCP_PERF_SEL_IMG_READ_FMT_BC4            = 0x00000031,
TCP_PERF_SEL_IMG_READ_FMT_BC5            = 0x00000032,
TCP_PERF_SEL_IMG_READ_FMT_BC6            = 0x00000033,
TCP_PERF_SEL_IMG_READ_FMT_BC7            = 0x00000034,
TCP_PERF_SEL_IMG_READ_FMT_I8             = 0x00000035,
TCP_PERF_SEL_IMG_READ_FMT_I16            = 0x00000036,
TCP_PERF_SEL_IMG_READ_FMT_I32            = 0x00000037,
TCP_PERF_SEL_IMG_READ_FMT_I32_AS_8       = 0x00000038,
TCP_PERF_SEL_IMG_READ_FMT_I32_AS_16      = 0x00000039,
TCP_PERF_SEL_IMG_READ_FMT_D8             = 0x0000003a,
TCP_PERF_SEL_IMG_READ_FMT_D16            = 0x0000003b,
TCP_PERF_SEL_IMG_READ_FMT_D32            = 0x0000003c,
TCP_PERF_SEL_IMG_WRITE_FMT_8             = 0x0000003d,
TCP_PERF_SEL_IMG_WRITE_FMT_16            = 0x0000003e,
TCP_PERF_SEL_IMG_WRITE_FMT_32            = 0x0000003f,
TCP_PERF_SEL_IMG_WRITE_FMT_64            = 0x00000040,
TCP_PERF_SEL_IMG_WRITE_FMT_128           = 0x00000041,
TCP_PERF_SEL_IMG_WRITE_FMT_D8            = 0x00000042,
TCP_PERF_SEL_IMG_WRITE_FMT_D16           = 0x00000043,
TCP_PERF_SEL_IMG_WRITE_FMT_D32           = 0x00000044,
TCP_PERF_SEL_IMG_ATOMIC_WITH_RET_FMT_32  = 0x00000045,
TCP_PERF_SEL_IMG_ATOMIC_WITHOUT_RET_FMT_32  = 0x00000046,
TCP_PERF_SEL_IMG_ATOMIC_WITH_RET_FMT_64  = 0x00000047,
TCP_PERF_SEL_IMG_ATOMIC_WITHOUT_RET_FMT_64  = 0x00000048,
TCP_PERF_SEL_BUF_READ_FMT_8              = 0x00000049,
TCP_PERF_SEL_BUF_READ_FMT_16             = 0x0000004a,
TCP_PERF_SEL_BUF_READ_FMT_32             = 0x0000004b,
TCP_PERF_SEL_BUF_WRITE_FMT_8             = 0x0000004c,
TCP_PERF_SEL_BUF_WRITE_FMT_16            = 0x0000004d,
TCP_PERF_SEL_BUF_WRITE_FMT_32            = 0x0000004e,
TCP_PERF_SEL_BUF_ATOMIC_WITH_RET_FMT_32  = 0x0000004f,
TCP_PERF_SEL_BUF_ATOMIC_WITHOUT_RET_FMT_32  = 0x00000050,
TCP_PERF_SEL_BUF_ATOMIC_WITH_RET_FMT_64  = 0x00000051,
TCP_PERF_SEL_BUF_ATOMIC_WITHOUT_RET_FMT_64  = 0x00000052,
TCP_PERF_SEL_ARR_LINEAR_GENERAL          = 0x00000053,
TCP_PERF_SEL_ARR_LINEAR_ALIGNED          = 0x00000054,
TCP_PERF_SEL_ARR_1D_THIN1                = 0x00000055,
TCP_PERF_SEL_ARR_1D_THICK                = 0x00000056,
TCP_PERF_SEL_ARR_2D_THIN1                = 0x00000057,
TCP_PERF_SEL_ARR_2D_THICK                = 0x00000058,
TCP_PERF_SEL_ARR_2D_XTHICK               = 0x00000059,
TCP_PERF_SEL_ARR_3D_THIN1                = 0x0000005a,
TCP_PERF_SEL_ARR_3D_THICK                = 0x0000005b,
TCP_PERF_SEL_ARR_3D_XTHICK               = 0x0000005c,
TCP_PERF_SEL_DIM_1D                      = 0x0000005d,
TCP_PERF_SEL_DIM_2D                      = 0x0000005e,
TCP_PERF_SEL_DIM_3D                      = 0x0000005f,
TCP_PERF_SEL_DIM_1D_ARRAY                = 0x00000060,
TCP_PERF_SEL_DIM_2D_ARRAY                = 0x00000061,
TCP_PERF_SEL_DIM_2D_MSAA                 = 0x00000062,
TCP_PERF_SEL_DIM_2D_ARRAY_MSAA           = 0x00000063,
TCP_PERF_SEL_DIM_CUBE_ARRAY              = 0x00000064,
TCP_PERF_SEL_CP_TCP_INVALIDATE           = 0x00000065,
TCP_PERF_SEL_TA_TCP_STATE_READ           = 0x00000066,
TCP_PERF_SEL_TAGRAM0_REQ                 = 0x00000067,
TCP_PERF_SEL_TAGRAM1_REQ                 = 0x00000068,
TCP_PERF_SEL_TAGRAM2_REQ                 = 0x00000069,
TCP_PERF_SEL_TAGRAM3_REQ                 = 0x0000006a,
TCP_PERF_SEL_GATE_EN1                    = 0x0000006b,
TCP_PERF_SEL_GATE_EN2                    = 0x0000006c,
TCP_PERF_SEL_CORE_REG_SCLK_VLD           = 0x0000006d,
TCP_PERF_SEL_TCC_REQ                     = 0x0000006e,
TCP_PERF_SEL_TCC_NON_READ_REQ            = 0x0000006f,
TCP_PERF_SEL_TCC_BYPASS_READ_REQ         = 0x00000070,
TCP_PERF_SEL_TCC_MISS_EVICT_READ_REQ     = 0x00000071,
TCP_PERF_SEL_TCC_VOLATILE_READ_REQ       = 0x00000072,
TCP_PERF_SEL_TCC_VOLATILE_BYPASS_READ_REQ  = 0x00000073,
TCP_PERF_SEL_TCC_VOLATILE_MISS_EVICT_READ_REQ  = 0x00000074,
TCP_PERF_SEL_TCC_BYPASS_WRITE_REQ        = 0x00000075,
TCP_PERF_SEL_TCC_MISS_EVICT_WRITE_REQ    = 0x00000076,
TCP_PERF_SEL_TCC_VOLATILE_BYPASS_WRITE_REQ  = 0x00000077,
TCP_PERF_SEL_TCC_VOLATILE_WRITE_REQ      = 0x00000078,
TCP_PERF_SEL_TCC_VOLATILE_MISS_EVICT_WRITE_REQ  = 0x00000079,
TCP_PERF_SEL_TCC_BYPASS_ATOMIC_REQ       = 0x0000007a,
TCP_PERF_SEL_TCC_ATOMIC_REQ              = 0x0000007b,
TCP_PERF_SEL_TCC_VOLATILE_ATOMIC_REQ     = 0x0000007c,
TCP_PERF_SEL_TCC_DATA_BUS_BUSY           = 0x0000007d,
TCP_PERF_SEL_TOTAL_ACCESSES              = 0x0000007e,
TCP_PERF_SEL_TOTAL_READ                  = 0x0000007f,
TCP_PERF_SEL_TOTAL_HIT_LRU_READ          = 0x00000080,
TCP_PERF_SEL_TOTAL_HIT_EVICT_READ        = 0x00000081,
TCP_PERF_SEL_TOTAL_MISS_LRU_READ         = 0x00000082,
TCP_PERF_SEL_TOTAL_MISS_EVICT_READ       = 0x00000083,
TCP_PERF_SEL_TOTAL_NON_READ              = 0x00000084,
TCP_PERF_SEL_TOTAL_WRITE                 = 0x00000085,
TCP_PERF_SEL_TOTAL_MISS_LRU_WRITE        = 0x00000086,
TCP_PERF_SEL_TOTAL_MISS_EVICT_WRITE      = 0x00000087,
TCP_PERF_SEL_TOTAL_WBINVL1_VOL           = 0x00000088,
TCP_PERF_SEL_TOTAL_WRITEBACK_INVALIDATES  = 0x00000089,
TCP_PERF_SEL_DISPLAY_MICROTILING         = 0x0000008a,
TCP_PERF_SEL_THIN_MICROTILING            = 0x0000008b,
TCP_PERF_SEL_DEPTH_MICROTILING           = 0x0000008c,
TCP_PERF_SEL_ARR_PRT_THIN1               = 0x0000008d,
TCP_PERF_SEL_ARR_PRT_2D_THIN1            = 0x0000008e,
TCP_PERF_SEL_ARR_PRT_3D_THIN1            = 0x0000008f,
TCP_PERF_SEL_ARR_PRT_THICK               = 0x00000090,
TCP_PERF_SEL_ARR_PRT_2D_THICK            = 0x00000091,
TCP_PERF_SEL_ARR_PRT_3D_THICK            = 0x00000092,
TCP_PERF_SEL_CP_TCP_INVALIDATE_VOL       = 0x00000093,
TCP_PERF_SEL_SQ_TCP_INVALIDATE_VOL       = 0x00000094,
TCP_PERF_SEL_UNALIGNED                   = 0x00000095,
TCP_PERF_SEL_ROTATED_MICROTILING         = 0x00000096,
TCP_PERF_SEL_THICK_MICROTILING           = 0x00000097,
TCP_PERF_SEL_ATC                         = 0x00000098,
TCP_PERF_SEL_POWER_STALL                 = 0x00000099,
TCP_PERF_SEL_RESERVED_154                = 0x0000009a,
TCP_PERF_SEL_TCC_LRU_REQ                 = 0x0000009b,
TCP_PERF_SEL_TCC_STREAM_REQ              = 0x0000009c,
TCP_PERF_SEL_TCC_NC_READ_REQ             = 0x0000009d,
TCP_PERF_SEL_TCC_NC_WRITE_REQ            = 0x0000009e,
TCP_PERF_SEL_TCC_NC_ATOMIC_REQ           = 0x0000009f,
TCP_PERF_SEL_TCC_UC_READ_REQ             = 0x000000a0,
TCP_PERF_SEL_TCC_UC_WRITE_REQ            = 0x000000a1,
TCP_PERF_SEL_TCC_UC_ATOMIC_REQ           = 0x000000a2,
TCP_PERF_SEL_TCC_CC_READ_REQ             = 0x000000a3,
TCP_PERF_SEL_TCC_CC_WRITE_REQ            = 0x000000a4,
TCP_PERF_SEL_TCC_CC_ATOMIC_REQ           = 0x000000a5,
TCP_PERF_SEL_TCC_DCC_REQ                 = 0x000000a6,
TCP_PERF_SEL_TCC_PHYSICAL_REQ            = 0x000000a7,
TCP_PERF_SEL_UNORDERED_MTYPE_STALL       = 0x000000a8,
TCP_PERF_SEL_VOLATILE                    = 0x000000a9,
TCP_PERF_SEL_TC_TA_XNACK_STALL           = 0x000000aa,
TCP_PERF_SEL_UTCL1_SERIALIZATION_STALL   = 0x000000ab,
TCP_PERF_SEL_SHOOTDOWN                   = 0x000000ac,
TCP_PERF_SEL_UTCL1_TRANSLATION_MISS      = 0x000000ad,
TCP_PERF_SEL_UTCL1_PERMISSION_MISS       = 0x000000ae,
TCP_PERF_SEL_UTCL1_REQUEST               = 0x000000af,
TCP_PERF_SEL_UTCL1_STALL_INFLIGHT_MAX    = 0x000000b0,
TCP_PERF_SEL_UTCL1_STALL_LRU_INFLIGHT    = 0x000000b1,
TCP_PERF_SEL_UTCL1_LFIFO_FULL            = 0x000000b2,
TCP_PERF_SEL_UTCL1_STALL_LFIFO_NOT_RES   = 0x000000b3,
TCP_PERF_SEL_UTCL1_STALL_UTCL2_REQ_OUT_OF_CREDITS  = 0x000000b4,
TCP_PERF_SEL_UTCL1_UTCL2_INFLIGHT        = 0x000000b5,
TCP_PERF_SEL_UTCL1_STALL_MISSFIFO_FULL   = 0x000000b6,
TCP_PERF_SEL_IMG_READ_FMT_ETC2_RGB       = 0x000000b7,
TCP_PERF_SEL_IMG_READ_FMT_ETC2_RGBA      = 0x000000b8,
TCP_PERF_SEL_IMG_READ_FMT_ETC2_RGBA1     = 0x000000b9,
TCP_PERF_SEL_IMG_READ_FMT_ETC2_R         = 0x000000ba,
TCP_PERF_SEL_IMG_READ_FMT_ETC2_RG        = 0x000000bb,
TCP_PERF_SEL_IMG_READ_FMT_8_AS_32        = 0x000000bc,
TCP_PERF_SEL_IMG_READ_FMT_8_AS_64        = 0x000000bd,
TCP_PERF_SEL_IMG_READ_FMT_16_AS_64       = 0x000000be,
TCP_PERF_SEL_IMG_READ_FMT_16_AS_128      = 0x000000bf,
TCP_PERF_SEL_IMG_WRITE_FMT_8_AS_32       = 0x000000c0,
TCP_PERF_SEL_IMG_WRITE_FMT_8_AS_64       = 0x000000c1,
TCP_PERF_SEL_IMG_WRITE_FMT_16_AS_64      = 0x000000c2,
TCP_PERF_SEL_IMG_WRITE_FMT_16_AS_128     = 0x000000c3,
} TCP_PERFCOUNT_SELECT;

/*
 * TCP_CACHE_POLICIES enum
 */

typedef enum TCP_CACHE_POLICIES {
TCP_CACHE_POLICY_MISS_LRU                = 0x00000000,
TCP_CACHE_POLICY_MISS_EVICT              = 0x00000001,
TCP_CACHE_POLICY_HIT_LRU                 = 0x00000002,
TCP_CACHE_POLICY_HIT_EVICT               = 0x00000003,
} TCP_CACHE_POLICIES;

/*
 * TCP_CACHE_STORE_POLICIES enum
 */

typedef enum TCP_CACHE_STORE_POLICIES {
TCP_CACHE_STORE_POLICY_WT_LRU            = 0x00000000,
TCP_CACHE_STORE_POLICY_WT_EVICT          = 0x00000001,
} TCP_CACHE_STORE_POLICIES;

/*
 * TCP_WATCH_MODES enum
 */

typedef enum TCP_WATCH_MODES {
TCP_WATCH_MODE_READ                      = 0x00000000,
TCP_WATCH_MODE_NONREAD                   = 0x00000001,
TCP_WATCH_MODE_ATOMIC                    = 0x00000002,
TCP_WATCH_MODE_ALL                       = 0x00000003,
} TCP_WATCH_MODES;

/*
 * TCP_DSM_DATA_SEL enum
 */

typedef enum TCP_DSM_DATA_SEL {
TCP_DSM_DISABLE                          = 0x00000000,
TCP_DSM_SEL0                             = 0x00000001,
TCP_DSM_SEL1                             = 0x00000002,
TCP_DSM_SEL_BOTH                         = 0x00000003,
} TCP_DSM_DATA_SEL;

/*
 * TCP_DSM_SINGLE_WRITE enum
 */

typedef enum TCP_DSM_SINGLE_WRITE {
TCP_DSM_SINGLE_WRITE_DIS                 = 0x00000000,
TCP_DSM_SINGLE_WRITE_EN                  = 0x00000001,
} TCP_DSM_SINGLE_WRITE;

/*
 * TCP_DSM_INJECT_SEL enum
 */

typedef enum TCP_DSM_INJECT_SEL {
TCP_DSM_INJECT_SEL0                      = 0x00000000,
TCP_DSM_INJECT_SEL1                      = 0x00000001,
TCP_DSM_INJECT_SEL2                      = 0x00000002,
TCP_DSM_INJECT_SEL3                      = 0x00000003,
} TCP_DSM_INJECT_SEL;

/*******************************************************
 * TCC Enums
 *******************************************************/

/*
 * TCC_PERF_SEL enum
 */

typedef enum TCC_PERF_SEL {
TCC_PERF_SEL_NONE                        = 0x00000000,
TCC_PERF_SEL_CYCLE                       = 0x00000001,
TCC_PERF_SEL_BUSY                        = 0x00000002,
TCC_PERF_SEL_REQ                         = 0x00000003,
TCC_PERF_SEL_STREAMING_REQ               = 0x00000004,
TCC_PERF_SEL_EXE_REQ                     = 0x00000005,
TCC_PERF_SEL_COMPRESSED_REQ              = 0x00000006,
TCC_PERF_SEL_COMPRESSED_0_REQ            = 0x00000007,
TCC_PERF_SEL_METADATA_REQ                = 0x00000008,
TCC_PERF_SEL_NC_VIRTUAL_REQ              = 0x00000009,
TCC_PERF_SEL_UC_VIRTUAL_REQ              = 0x0000000a,
TCC_PERF_SEL_CC_PHYSICAL_REQ             = 0x0000000b,
TCC_PERF_SEL_PROBE                       = 0x0000000c,
TCC_PERF_SEL_PROBE_ALL                   = 0x0000000d,
TCC_PERF_SEL_READ                        = 0x0000000e,
TCC_PERF_SEL_WRITE                       = 0x0000000f,
TCC_PERF_SEL_ATOMIC                      = 0x00000010,
TCC_PERF_SEL_HIT                         = 0x00000011,
TCC_PERF_SEL_SECTOR_HIT                  = 0x00000012,
TCC_PERF_SEL_MISS                        = 0x00000013,
TCC_PERF_SEL_DEWRITE_ALLOCATE_HIT        = 0x00000014,
TCC_PERF_SEL_FULLY_WRITTEN_HIT           = 0x00000015,
TCC_PERF_SEL_WRITEBACK                   = 0x00000016,
TCC_PERF_SEL_LATENCY_FIFO_FULL           = 0x00000017,
TCC_PERF_SEL_SRC_FIFO_FULL               = 0x00000018,
TCC_PERF_SEL_HOLE_FIFO_FULL              = 0x00000019,
TCC_PERF_SEL_EA_WRREQ                    = 0x0000001a,
TCC_PERF_SEL_EA_WRREQ_64B                = 0x0000001b,
TCC_PERF_SEL_EA_WRREQ_PROBE_COMMAND      = 0x0000001c,
TCC_PERF_SEL_EA_WR_UNCACHED_32B          = 0x0000001d,
TCC_PERF_SEL_EA_WRREQ_STALL              = 0x0000001e,
TCC_PERF_SEL_EA_WRREQ_CREDIT_STALL       = 0x0000001f,
TCC_PERF_SEL_TOO_MANY_EA_WRREQS_STALL    = 0x00000020,
TCC_PERF_SEL_EA_WRREQ_LEVEL              = 0x00000021,
TCC_PERF_SEL_EA_ATOMIC                   = 0x00000022,
TCC_PERF_SEL_EA_ATOMIC_LEVEL             = 0x00000023,
TCC_PERF_SEL_EA_RDREQ                    = 0x00000024,
TCC_PERF_SEL_EA_RDREQ_32B                = 0x00000025,
TCC_PERF_SEL_EA_RD_UNCACHED_32B          = 0x00000026,
TCC_PERF_SEL_EA_RD_MDC_32B               = 0x00000027,
TCC_PERF_SEL_EA_RD_COMPRESSED_32B        = 0x00000028,
TCC_PERF_SEL_EA_RDREQ_CREDIT_STALL       = 0x00000029,
TCC_PERF_SEL_EA_RDREQ_LEVEL              = 0x0000002a,
TCC_PERF_SEL_TAG_STALL                   = 0x0000002b,
TCC_PERF_SEL_TAG_WRITEBACK_FIFO_FULL_STALL  = 0x0000002c,
TCC_PERF_SEL_TAG_MISS_NOTHING_REPLACEABLE_STALL  = 0x0000002d,
TCC_PERF_SEL_TAG_UNCACHED_WRITE_ATOMIC_FIFO_FULL_STALL  = 0x0000002e,
TCC_PERF_SEL_TAG_NO_UNCACHED_WRITE_ATOMIC_ENTRIES_STALL  = 0x0000002f,
TCC_PERF_SEL_TAG_PROBE_STALL             = 0x00000030,
TCC_PERF_SEL_TAG_PROBE_FILTER_STALL      = 0x00000031,
TCC_PERF_SEL_READ_RETURN_TIMEOUT         = 0x00000032,
TCC_PERF_SEL_WRITEBACK_READ_TIMEOUT      = 0x00000033,
TCC_PERF_SEL_READ_RETURN_FULL_BUBBLE     = 0x00000034,
TCC_PERF_SEL_BUBBLE                      = 0x00000035,
TCC_PERF_SEL_RETURN_ACK                  = 0x00000036,
TCC_PERF_SEL_RETURN_DATA                 = 0x00000037,
TCC_PERF_SEL_RETURN_HOLE                 = 0x00000038,
TCC_PERF_SEL_RETURN_ACK_HOLE             = 0x00000039,
TCC_PERF_SEL_IB_REQ                      = 0x0000003a,
TCC_PERF_SEL_IB_STALL                    = 0x0000003b,
TCC_PERF_SEL_IB_TAG_STALL                = 0x0000003c,
TCC_PERF_SEL_IB_MDC_STALL                = 0x0000003d,
TCC_PERF_SEL_TCA_LEVEL                   = 0x0000003e,
TCC_PERF_SEL_HOLE_LEVEL                  = 0x0000003f,
TCC_PERF_SEL_NORMAL_WRITEBACK            = 0x00000040,
TCC_PERF_SEL_TC_OP_WBL2_NC_WRITEBACK     = 0x00000041,
TCC_PERF_SEL_TC_OP_WBL2_WC_WRITEBACK     = 0x00000042,
TCC_PERF_SEL_TC_OP_WBINVL2_WRITEBACK     = 0x00000043,
TCC_PERF_SEL_TC_OP_WBINVL2_NC_WRITEBACK  = 0x00000044,
TCC_PERF_SEL_TC_OP_WBINVL2_SD_WRITEBACK  = 0x00000045,
TCC_PERF_SEL_ALL_TC_OP_WB_WRITEBACK      = 0x00000046,
TCC_PERF_SEL_NORMAL_EVICT                = 0x00000047,
TCC_PERF_SEL_TC_OP_WBL2_NC_EVICT         = 0x00000048,
TCC_PERF_SEL_TC_OP_WBL2_WC_EVICT         = 0x00000049,
TCC_PERF_SEL_TC_OP_INVL2_NC_EVICT        = 0x0000004a,
TCC_PERF_SEL_TC_OP_WBINVL2_EVICT         = 0x0000004b,
TCC_PERF_SEL_TC_OP_WBINVL2_NC_EVICT      = 0x0000004c,
TCC_PERF_SEL_TC_OP_WBINVL2_SD_EVICT      = 0x0000004d,
TCC_PERF_SEL_ALL_TC_OP_INV_EVICT         = 0x0000004e,
TCC_PERF_SEL_PROBE_EVICT                 = 0x0000004f,
TCC_PERF_SEL_TC_OP_WBL2_NC_CYCLE         = 0x00000050,
TCC_PERF_SEL_TC_OP_WBL2_WC_CYCLE         = 0x00000051,
TCC_PERF_SEL_TC_OP_INVL2_NC_CYCLE        = 0x00000052,
TCC_PERF_SEL_TC_OP_WBINVL2_CYCLE         = 0x00000053,
TCC_PERF_SEL_TC_OP_WBINVL2_NC_CYCLE      = 0x00000054,
TCC_PERF_SEL_TC_OP_WBINVL2_SD_CYCLE      = 0x00000055,
TCC_PERF_SEL_ALL_TC_OP_WB_OR_INV_CYCLE   = 0x00000056,
TCC_PERF_SEL_TC_OP_WBL2_NC_START         = 0x00000057,
TCC_PERF_SEL_TC_OP_WBL2_WC_START         = 0x00000058,
TCC_PERF_SEL_TC_OP_INVL2_NC_START        = 0x00000059,
TCC_PERF_SEL_TC_OP_WBINVL2_START         = 0x0000005a,
TCC_PERF_SEL_TC_OP_WBINVL2_NC_START      = 0x0000005b,
TCC_PERF_SEL_TC_OP_WBINVL2_SD_START      = 0x0000005c,
TCC_PERF_SEL_ALL_TC_OP_WB_OR_INV_START   = 0x0000005d,
TCC_PERF_SEL_TC_OP_WBL2_NC_FINISH        = 0x0000005e,
TCC_PERF_SEL_TC_OP_WBL2_WC_FINISH        = 0x0000005f,
TCC_PERF_SEL_TC_OP_INVL2_NC_FINISH       = 0x00000060,
TCC_PERF_SEL_TC_OP_WBINVL2_FINISH        = 0x00000061,
TCC_PERF_SEL_TC_OP_WBINVL2_NC_FINISH     = 0x00000062,
TCC_PERF_SEL_TC_OP_WBINVL2_SD_FINISH     = 0x00000063,
TCC_PERF_SEL_ALL_TC_OP_WB_OR_INV_FINISH  = 0x00000064,
TCC_PERF_SEL_MDC_REQ                     = 0x00000065,
TCC_PERF_SEL_MDC_LEVEL                   = 0x00000066,
TCC_PERF_SEL_MDC_TAG_HIT                 = 0x00000067,
TCC_PERF_SEL_MDC_SECTOR_HIT              = 0x00000068,
TCC_PERF_SEL_MDC_SECTOR_MISS             = 0x00000069,
TCC_PERF_SEL_MDC_TAG_STALL               = 0x0000006a,
TCC_PERF_SEL_MDC_TAG_REPLACEMENT_LINE_IN_USE_STALL  = 0x0000006b,
TCC_PERF_SEL_MDC_TAG_DESECTORIZATION_FIFO_FULL_STALL  = 0x0000006c,
TCC_PERF_SEL_MDC_TAG_WAITING_FOR_INVALIDATE_COMPLETION_STALL  = 0x0000006d,
TCC_PERF_SEL_PROBE_FILTER_DISABLE_TRANSITION  = 0x0000006e,
TCC_PERF_SEL_PROBE_FILTER_DISABLED       = 0x0000006f,
TCC_PERF_SEL_CLIENT0_REQ                 = 0x00000080,
TCC_PERF_SEL_CLIENT1_REQ                 = 0x00000081,
TCC_PERF_SEL_CLIENT2_REQ                 = 0x00000082,
TCC_PERF_SEL_CLIENT3_REQ                 = 0x00000083,
TCC_PERF_SEL_CLIENT4_REQ                 = 0x00000084,
TCC_PERF_SEL_CLIENT5_REQ                 = 0x00000085,
TCC_PERF_SEL_CLIENT6_REQ                 = 0x00000086,
TCC_PERF_SEL_CLIENT7_REQ                 = 0x00000087,
TCC_PERF_SEL_CLIENT8_REQ                 = 0x00000088,
TCC_PERF_SEL_CLIENT9_REQ                 = 0x00000089,
TCC_PERF_SEL_CLIENT10_REQ                = 0x0000008a,
TCC_PERF_SEL_CLIENT11_REQ                = 0x0000008b,
TCC_PERF_SEL_CLIENT12_REQ                = 0x0000008c,
TCC_PERF_SEL_CLIENT13_REQ                = 0x0000008d,
TCC_PERF_SEL_CLIENT14_REQ                = 0x0000008e,
TCC_PERF_SEL_CLIENT15_REQ                = 0x0000008f,
TCC_PERF_SEL_CLIENT16_REQ                = 0x00000090,
TCC_PERF_SEL_CLIENT17_REQ                = 0x00000091,
TCC_PERF_SEL_CLIENT18_REQ                = 0x00000092,
TCC_PERF_SEL_CLIENT19_REQ                = 0x00000093,
TCC_PERF_SEL_CLIENT20_REQ                = 0x00000094,
TCC_PERF_SEL_CLIENT21_REQ                = 0x00000095,
TCC_PERF_SEL_CLIENT22_REQ                = 0x00000096,
TCC_PERF_SEL_CLIENT23_REQ                = 0x00000097,
TCC_PERF_SEL_CLIENT24_REQ                = 0x00000098,
TCC_PERF_SEL_CLIENT25_REQ                = 0x00000099,
TCC_PERF_SEL_CLIENT26_REQ                = 0x0000009a,
TCC_PERF_SEL_CLIENT27_REQ                = 0x0000009b,
TCC_PERF_SEL_CLIENT28_REQ                = 0x0000009c,
TCC_PERF_SEL_CLIENT29_REQ                = 0x0000009d,
TCC_PERF_SEL_CLIENT30_REQ                = 0x0000009e,
TCC_PERF_SEL_CLIENT31_REQ                = 0x0000009f,
TCC_PERF_SEL_CLIENT32_REQ                = 0x000000a0,
TCC_PERF_SEL_CLIENT33_REQ                = 0x000000a1,
TCC_PERF_SEL_CLIENT34_REQ                = 0x000000a2,
TCC_PERF_SEL_CLIENT35_REQ                = 0x000000a3,
TCC_PERF_SEL_CLIENT36_REQ                = 0x000000a4,
TCC_PERF_SEL_CLIENT37_REQ                = 0x000000a5,
TCC_PERF_SEL_CLIENT38_REQ                = 0x000000a6,
TCC_PERF_SEL_CLIENT39_REQ                = 0x000000a7,
TCC_PERF_SEL_CLIENT40_REQ                = 0x000000a8,
TCC_PERF_SEL_CLIENT41_REQ                = 0x000000a9,
TCC_PERF_SEL_CLIENT42_REQ                = 0x000000aa,
TCC_PERF_SEL_CLIENT43_REQ                = 0x000000ab,
TCC_PERF_SEL_CLIENT44_REQ                = 0x000000ac,
TCC_PERF_SEL_CLIENT45_REQ                = 0x000000ad,
TCC_PERF_SEL_CLIENT46_REQ                = 0x000000ae,
TCC_PERF_SEL_CLIENT47_REQ                = 0x000000af,
TCC_PERF_SEL_CLIENT48_REQ                = 0x000000b0,
TCC_PERF_SEL_CLIENT49_REQ                = 0x000000b1,
TCC_PERF_SEL_CLIENT50_REQ                = 0x000000b2,
TCC_PERF_SEL_CLIENT51_REQ                = 0x000000b3,
TCC_PERF_SEL_CLIENT52_REQ                = 0x000000b4,
TCC_PERF_SEL_CLIENT53_REQ                = 0x000000b5,
TCC_PERF_SEL_CLIENT54_REQ                = 0x000000b6,
TCC_PERF_SEL_CLIENT55_REQ                = 0x000000b7,
TCC_PERF_SEL_CLIENT56_REQ                = 0x000000b8,
TCC_PERF_SEL_CLIENT57_REQ                = 0x000000b9,
TCC_PERF_SEL_CLIENT58_REQ                = 0x000000ba,
TCC_PERF_SEL_CLIENT59_REQ                = 0x000000bb,
TCC_PERF_SEL_CLIENT60_REQ                = 0x000000bc,
TCC_PERF_SEL_CLIENT61_REQ                = 0x000000bd,
TCC_PERF_SEL_CLIENT62_REQ                = 0x000000be,
TCC_PERF_SEL_CLIENT63_REQ                = 0x000000bf,
TCC_PERF_SEL_CLIENT64_REQ                = 0x000000c0,
TCC_PERF_SEL_CLIENT65_REQ                = 0x000000c1,
TCC_PERF_SEL_CLIENT66_REQ                = 0x000000c2,
TCC_PERF_SEL_CLIENT67_REQ                = 0x000000c3,
TCC_PERF_SEL_CLIENT68_REQ                = 0x000000c4,
TCC_PERF_SEL_CLIENT69_REQ                = 0x000000c5,
TCC_PERF_SEL_CLIENT70_REQ                = 0x000000c6,
TCC_PERF_SEL_CLIENT71_REQ                = 0x000000c7,
TCC_PERF_SEL_CLIENT72_REQ                = 0x000000c8,
TCC_PERF_SEL_CLIENT73_REQ                = 0x000000c9,
TCC_PERF_SEL_CLIENT74_REQ                = 0x000000ca,
TCC_PERF_SEL_CLIENT75_REQ                = 0x000000cb,
TCC_PERF_SEL_CLIENT76_REQ                = 0x000000cc,
TCC_PERF_SEL_CLIENT77_REQ                = 0x000000cd,
TCC_PERF_SEL_CLIENT78_REQ                = 0x000000ce,
TCC_PERF_SEL_CLIENT79_REQ                = 0x000000cf,
TCC_PERF_SEL_CLIENT80_REQ                = 0x000000d0,
TCC_PERF_SEL_CLIENT81_REQ                = 0x000000d1,
TCC_PERF_SEL_CLIENT82_REQ                = 0x000000d2,
TCC_PERF_SEL_CLIENT83_REQ                = 0x000000d3,
TCC_PERF_SEL_CLIENT84_REQ                = 0x000000d4,
TCC_PERF_SEL_CLIENT85_REQ                = 0x000000d5,
TCC_PERF_SEL_CLIENT86_REQ                = 0x000000d6,
TCC_PERF_SEL_CLIENT87_REQ                = 0x000000d7,
TCC_PERF_SEL_CLIENT88_REQ                = 0x000000d8,
TCC_PERF_SEL_CLIENT89_REQ                = 0x000000d9,
TCC_PERF_SEL_CLIENT90_REQ                = 0x000000da,
TCC_PERF_SEL_CLIENT91_REQ                = 0x000000db,
TCC_PERF_SEL_CLIENT92_REQ                = 0x000000dc,
TCC_PERF_SEL_CLIENT93_REQ                = 0x000000dd,
TCC_PERF_SEL_CLIENT94_REQ                = 0x000000de,
TCC_PERF_SEL_CLIENT95_REQ                = 0x000000df,
TCC_PERF_SEL_CLIENT96_REQ                = 0x000000e0,
TCC_PERF_SEL_CLIENT97_REQ                = 0x000000e1,
TCC_PERF_SEL_CLIENT98_REQ                = 0x000000e2,
TCC_PERF_SEL_CLIENT99_REQ                = 0x000000e3,
TCC_PERF_SEL_CLIENT100_REQ               = 0x000000e4,
TCC_PERF_SEL_CLIENT101_REQ               = 0x000000e5,
TCC_PERF_SEL_CLIENT102_REQ               = 0x000000e6,
TCC_PERF_SEL_CLIENT103_REQ               = 0x000000e7,
TCC_PERF_SEL_CLIENT104_REQ               = 0x000000e8,
TCC_PERF_SEL_CLIENT105_REQ               = 0x000000e9,
TCC_PERF_SEL_CLIENT106_REQ               = 0x000000ea,
TCC_PERF_SEL_CLIENT107_REQ               = 0x000000eb,
TCC_PERF_SEL_CLIENT108_REQ               = 0x000000ec,
TCC_PERF_SEL_CLIENT109_REQ               = 0x000000ed,
TCC_PERF_SEL_CLIENT110_REQ               = 0x000000ee,
TCC_PERF_SEL_CLIENT111_REQ               = 0x000000ef,
TCC_PERF_SEL_CLIENT112_REQ               = 0x000000f0,
TCC_PERF_SEL_CLIENT113_REQ               = 0x000000f1,
TCC_PERF_SEL_CLIENT114_REQ               = 0x000000f2,
TCC_PERF_SEL_CLIENT115_REQ               = 0x000000f3,
TCC_PERF_SEL_CLIENT116_REQ               = 0x000000f4,
TCC_PERF_SEL_CLIENT117_REQ               = 0x000000f5,
TCC_PERF_SEL_CLIENT118_REQ               = 0x000000f6,
TCC_PERF_SEL_CLIENT119_REQ               = 0x000000f7,
TCC_PERF_SEL_CLIENT120_REQ               = 0x000000f8,
TCC_PERF_SEL_CLIENT121_REQ               = 0x000000f9,
TCC_PERF_SEL_CLIENT122_REQ               = 0x000000fa,
TCC_PERF_SEL_CLIENT123_REQ               = 0x000000fb,
TCC_PERF_SEL_CLIENT124_REQ               = 0x000000fc,
TCC_PERF_SEL_CLIENT125_REQ               = 0x000000fd,
TCC_PERF_SEL_CLIENT126_REQ               = 0x000000fe,
TCC_PERF_SEL_CLIENT127_REQ               = 0x000000ff,
} TCC_PERF_SEL;

/*
 * TCA_PERF_SEL enum
 */

typedef enum TCA_PERF_SEL {
TCA_PERF_SEL_NONE                        = 0x00000000,
TCA_PERF_SEL_CYCLE                       = 0x00000001,
TCA_PERF_SEL_BUSY                        = 0x00000002,
TCA_PERF_SEL_FORCED_HOLE_TCC0            = 0x00000003,
TCA_PERF_SEL_FORCED_HOLE_TCC1            = 0x00000004,
TCA_PERF_SEL_FORCED_HOLE_TCC2            = 0x00000005,
TCA_PERF_SEL_FORCED_HOLE_TCC3            = 0x00000006,
TCA_PERF_SEL_FORCED_HOLE_TCC4            = 0x00000007,
TCA_PERF_SEL_FORCED_HOLE_TCC5            = 0x00000008,
TCA_PERF_SEL_FORCED_HOLE_TCC6            = 0x00000009,
TCA_PERF_SEL_FORCED_HOLE_TCC7            = 0x0000000a,
TCA_PERF_SEL_REQ_TCC0                    = 0x0000000b,
TCA_PERF_SEL_REQ_TCC1                    = 0x0000000c,
TCA_PERF_SEL_REQ_TCC2                    = 0x0000000d,
TCA_PERF_SEL_REQ_TCC3                    = 0x0000000e,
TCA_PERF_SEL_REQ_TCC4                    = 0x0000000f,
TCA_PERF_SEL_REQ_TCC5                    = 0x00000010,
TCA_PERF_SEL_REQ_TCC6                    = 0x00000011,
TCA_PERF_SEL_REQ_TCC7                    = 0x00000012,
TCA_PERF_SEL_CROSSBAR_DOUBLE_ARB_TCC0    = 0x00000013,
TCA_PERF_SEL_CROSSBAR_DOUBLE_ARB_TCC1    = 0x00000014,
TCA_PERF_SEL_CROSSBAR_DOUBLE_ARB_TCC2    = 0x00000015,
TCA_PERF_SEL_CROSSBAR_DOUBLE_ARB_TCC3    = 0x00000016,
TCA_PERF_SEL_CROSSBAR_DOUBLE_ARB_TCC4    = 0x00000017,
TCA_PERF_SEL_CROSSBAR_DOUBLE_ARB_TCC5    = 0x00000018,
TCA_PERF_SEL_CROSSBAR_DOUBLE_ARB_TCC6    = 0x00000019,
TCA_PERF_SEL_CROSSBAR_DOUBLE_ARB_TCC7    = 0x0000001a,
TCA_PERF_SEL_CROSSBAR_STALL_TCC0         = 0x0000001b,
TCA_PERF_SEL_CROSSBAR_STALL_TCC1         = 0x0000001c,
TCA_PERF_SEL_CROSSBAR_STALL_TCC2         = 0x0000001d,
TCA_PERF_SEL_CROSSBAR_STALL_TCC3         = 0x0000001e,
TCA_PERF_SEL_CROSSBAR_STALL_TCC4         = 0x0000001f,
TCA_PERF_SEL_CROSSBAR_STALL_TCC5         = 0x00000020,
TCA_PERF_SEL_CROSSBAR_STALL_TCC6         = 0x00000021,
TCA_PERF_SEL_CROSSBAR_STALL_TCC7         = 0x00000022,
} TCA_PERF_SEL;

/*******************************************************
 * GRBM Enums
 *******************************************************/

/*
 * GRBM_PERF_SEL enum
 */

typedef enum GRBM_PERF_SEL {
GRBM_PERF_SEL_COUNT                      = 0x00000000,
GRBM_PERF_SEL_USER_DEFINED               = 0x00000001,
GRBM_PERF_SEL_GUI_ACTIVE                 = 0x00000002,
GRBM_PERF_SEL_CP_BUSY                    = 0x00000003,
GRBM_PERF_SEL_CP_COHER_BUSY              = 0x00000004,
GRBM_PERF_SEL_CP_DMA_BUSY                = 0x00000005,
GRBM_PERF_SEL_CB_BUSY                    = 0x00000006,
GRBM_PERF_SEL_DB_BUSY                    = 0x00000007,
GRBM_PERF_SEL_PA_BUSY                    = 0x00000008,
GRBM_PERF_SEL_SC_BUSY                    = 0x00000009,
GRBM_PERF_SEL_RESERVED_6                 = 0x0000000a,
GRBM_PERF_SEL_SPI_BUSY                   = 0x0000000b,
GRBM_PERF_SEL_SX_BUSY                    = 0x0000000c,
GRBM_PERF_SEL_TA_BUSY                    = 0x0000000d,
GRBM_PERF_SEL_CB_CLEAN                   = 0x0000000e,
GRBM_PERF_SEL_DB_CLEAN                   = 0x0000000f,
GRBM_PERF_SEL_RESERVED_5                 = 0x00000010,
GRBM_PERF_SEL_VGT_BUSY                   = 0x00000011,
GRBM_PERF_SEL_RESERVED_4                 = 0x00000012,
GRBM_PERF_SEL_RESERVED_3                 = 0x00000013,
GRBM_PERF_SEL_RESERVED_2                 = 0x00000014,
GRBM_PERF_SEL_RESERVED_1                 = 0x00000015,
GRBM_PERF_SEL_RESERVED_0                 = 0x00000016,
GRBM_PERF_SEL_IA_BUSY                    = 0x00000017,
GRBM_PERF_SEL_IA_NO_DMA_BUSY             = 0x00000018,
GRBM_PERF_SEL_GDS_BUSY                   = 0x00000019,
GRBM_PERF_SEL_BCI_BUSY                   = 0x0000001a,
GRBM_PERF_SEL_RLC_BUSY                   = 0x0000001b,
GRBM_PERF_SEL_TC_BUSY                    = 0x0000001c,
GRBM_PERF_SEL_CPG_BUSY                   = 0x0000001d,
GRBM_PERF_SEL_CPC_BUSY                   = 0x0000001e,
GRBM_PERF_SEL_CPF_BUSY                   = 0x0000001f,
GRBM_PERF_SEL_WD_BUSY                    = 0x00000020,
GRBM_PERF_SEL_WD_NO_DMA_BUSY             = 0x00000021,
GRBM_PERF_SEL_UTCL2_BUSY                 = 0x00000022,
GRBM_PERF_SEL_EA_BUSY                    = 0x00000023,
GRBM_PERF_SEL_RMI_BUSY                   = 0x00000024,
GRBM_PERF_SEL_CPAXI_BUSY                 = 0x00000025,
} GRBM_PERF_SEL;

/*
 * GRBM_SE0_PERF_SEL enum
 */

typedef enum GRBM_SE0_PERF_SEL {
GRBM_SE0_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE0_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE0_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE0_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE0_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE0_PERF_SEL_RESERVED_1             = 0x00000005,
GRBM_SE0_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE0_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE0_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE0_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE0_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE0_PERF_SEL_RESERVED_0             = 0x0000000b,
GRBM_SE0_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE0_PERF_SEL_VGT_BUSY               = 0x0000000d,
GRBM_SE0_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE0_PERF_SEL_RMI_BUSY               = 0x0000000f,
} GRBM_SE0_PERF_SEL;

/*
 * GRBM_SE1_PERF_SEL enum
 */

typedef enum GRBM_SE1_PERF_SEL {
GRBM_SE1_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE1_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE1_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE1_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE1_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE1_PERF_SEL_RESERVED_1             = 0x00000005,
GRBM_SE1_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE1_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE1_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE1_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE1_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE1_PERF_SEL_RESERVED_0             = 0x0000000b,
GRBM_SE1_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE1_PERF_SEL_VGT_BUSY               = 0x0000000d,
GRBM_SE1_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE1_PERF_SEL_RMI_BUSY               = 0x0000000f,
} GRBM_SE1_PERF_SEL;

/*
 * GRBM_SE2_PERF_SEL enum
 */

typedef enum GRBM_SE2_PERF_SEL {
GRBM_SE2_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE2_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE2_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE2_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE2_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE2_PERF_SEL_RESERVED_1             = 0x00000005,
GRBM_SE2_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE2_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE2_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE2_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE2_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE2_PERF_SEL_RESERVED_0             = 0x0000000b,
GRBM_SE2_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE2_PERF_SEL_VGT_BUSY               = 0x0000000d,
GRBM_SE2_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE2_PERF_SEL_RMI_BUSY               = 0x0000000f,
} GRBM_SE2_PERF_SEL;

/*
 * GRBM_SE3_PERF_SEL enum
 */

typedef enum GRBM_SE3_PERF_SEL {
GRBM_SE3_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE3_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE3_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE3_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE3_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE3_PERF_SEL_RESERVED_1             = 0x00000005,
GRBM_SE3_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE3_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE3_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE3_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE3_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE3_PERF_SEL_RESERVED_0             = 0x0000000b,
GRBM_SE3_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE3_PERF_SEL_VGT_BUSY               = 0x0000000d,
GRBM_SE3_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE3_PERF_SEL_RMI_BUSY               = 0x0000000f,
} GRBM_SE3_PERF_SEL;

/*******************************************************
 * CP Enums
 *******************************************************/

/*
 * CP_RING_ID enum
 */

typedef enum CP_RING_ID {
RINGID0                                  = 0x00000000,
RINGID1                                  = 0x00000001,
RINGID2                                  = 0x00000002,
RINGID3                                  = 0x00000003,
} CP_RING_ID;

/*
 * CP_PIPE_ID enum
 */

typedef enum CP_PIPE_ID {
PIPE_ID0                                 = 0x00000000,
PIPE_ID1                                 = 0x00000001,
PIPE_ID2                                 = 0x00000002,
PIPE_ID3                                 = 0x00000003,
} CP_PIPE_ID;

/*
 * CP_ME_ID enum
 */

typedef enum CP_ME_ID {
ME_ID0                                   = 0x00000000,
ME_ID1                                   = 0x00000001,
ME_ID2                                   = 0x00000002,
ME_ID3                                   = 0x00000003,
} CP_ME_ID;

/*
 * SPM_PERFMON_STATE enum
 */

typedef enum SPM_PERFMON_STATE {
STRM_PERFMON_STATE_DISABLE_AND_RESET     = 0x00000000,
STRM_PERFMON_STATE_START_COUNTING        = 0x00000001,
STRM_PERFMON_STATE_STOP_COUNTING         = 0x00000002,
STRM_PERFMON_STATE_RESERVED_3            = 0x00000003,
STRM_PERFMON_STATE_DISABLE_AND_RESET_PHANTOM  = 0x00000004,
STRM_PERFMON_STATE_COUNT_AND_DUMP_PHANTOM  = 0x00000005,
} SPM_PERFMON_STATE;

/*
 * CP_PERFMON_STATE enum
 */

typedef enum CP_PERFMON_STATE {
CP_PERFMON_STATE_DISABLE_AND_RESET       = 0x00000000,
CP_PERFMON_STATE_START_COUNTING          = 0x00000001,
CP_PERFMON_STATE_STOP_COUNTING           = 0x00000002,
CP_PERFMON_STATE_RESERVED_3              = 0x00000003,
CP_PERFMON_STATE_DISABLE_AND_RESET_PHANTOM  = 0x00000004,
CP_PERFMON_STATE_COUNT_AND_DUMP_PHANTOM  = 0x00000005,
} CP_PERFMON_STATE;

/*
 * CP_PERFMON_ENABLE_MODE enum
 */

typedef enum CP_PERFMON_ENABLE_MODE {
CP_PERFMON_ENABLE_MODE_ALWAYS_COUNT      = 0x00000000,
CP_PERFMON_ENABLE_MODE_RESERVED_1        = 0x00000001,
CP_PERFMON_ENABLE_MODE_COUNT_CONTEXT_TRUE  = 0x00000002,
CP_PERFMON_ENABLE_MODE_COUNT_CONTEXT_FALSE  = 0x00000003,
} CP_PERFMON_ENABLE_MODE;

/*
 * CPG_PERFCOUNT_SEL enum
 */

typedef enum CPG_PERFCOUNT_SEL {
CPG_PERF_SEL_ALWAYS_COUNT                = 0x00000000,
CPG_PERF_SEL_RBIU_FIFO_FULL              = 0x00000001,
CPG_PERF_SEL_CSF_RTS_BUT_MIU_NOT_RTR     = 0x00000002,
CPG_PERF_SEL_CSF_ST_BASE_SIZE_FIFO_FULL  = 0x00000003,
CPG_PERF_SEL_CP_GRBM_DWORDS_SENT         = 0x00000004,
CPG_PERF_SEL_ME_PARSER_BUSY              = 0x00000005,
CPG_PERF_SEL_COUNT_TYPE0_PACKETS         = 0x00000006,
CPG_PERF_SEL_COUNT_TYPE3_PACKETS         = 0x00000007,
CPG_PERF_SEL_CSF_FETCHING_CMD_BUFFERS    = 0x00000008,
CPG_PERF_SEL_CP_GRBM_OUT_OF_CREDITS      = 0x00000009,
CPG_PERF_SEL_CP_PFP_GRBM_OUT_OF_CREDITS  = 0x0000000a,
CPG_PERF_SEL_CP_GDS_GRBM_OUT_OF_CREDITS  = 0x0000000b,
CPG_PERF_SEL_RCIU_STALLED_ON_ME_READ     = 0x0000000c,
CPG_PERF_SEL_RCIU_STALLED_ON_DMA_READ    = 0x0000000d,
CPG_PERF_SEL_SSU_STALLED_ON_ACTIVE_CNTX  = 0x0000000e,
CPG_PERF_SEL_SSU_STALLED_ON_CLEAN_SIGNALS  = 0x0000000f,
CPG_PERF_SEL_QU_STALLED_ON_EOP_DONE_PULSE  = 0x00000010,
CPG_PERF_SEL_QU_STALLED_ON_EOP_DONE_WR_CONFIRM  = 0x00000011,
CPG_PERF_SEL_PFP_STALLED_ON_CSF_READY    = 0x00000012,
CPG_PERF_SEL_PFP_STALLED_ON_MEQ_READY    = 0x00000013,
CPG_PERF_SEL_PFP_STALLED_ON_RCIU_READY   = 0x00000014,
CPG_PERF_SEL_PFP_STALLED_FOR_DATA_FROM_ROQ  = 0x00000015,
CPG_PERF_SEL_ME_STALLED_FOR_DATA_FROM_PFP  = 0x00000016,
CPG_PERF_SEL_ME_STALLED_FOR_DATA_FROM_STQ  = 0x00000017,
CPG_PERF_SEL_ME_STALLED_ON_NO_AVAIL_GFX_CNTX  = 0x00000018,
CPG_PERF_SEL_ME_STALLED_WRITING_TO_RCIU  = 0x00000019,
CPG_PERF_SEL_ME_STALLED_WRITING_CONSTANTS  = 0x0000001a,
CPG_PERF_SEL_ME_STALLED_ON_PARTIAL_FLUSH  = 0x0000001b,
CPG_PERF_SEL_ME_WAIT_ON_CE_COUNTER       = 0x0000001c,
CPG_PERF_SEL_ME_WAIT_ON_AVAIL_BUFFER     = 0x0000001d,
CPG_PERF_SEL_SEMAPHORE_BUSY_POLLING_FOR_PASS  = 0x0000001e,
CPG_PERF_SEL_LOAD_STALLED_ON_SET_COHERENCY  = 0x0000001f,
CPG_PERF_SEL_DYNAMIC_CLK_VALID           = 0x00000020,
CPG_PERF_SEL_REGISTER_CLK_VALID          = 0x00000021,
CPG_PERF_SEL_MIU_WRITE_REQUEST_SENT      = 0x00000022,
CPG_PERF_SEL_MIU_READ_REQUEST_SENT       = 0x00000023,
CPG_PERF_SEL_CE_STALL_RAM_DUMP           = 0x00000024,
CPG_PERF_SEL_CE_STALL_RAM_WRITE          = 0x00000025,
CPG_PERF_SEL_CE_STALL_ON_INC_FIFO        = 0x00000026,
CPG_PERF_SEL_CE_STALL_ON_WR_RAM_FIFO     = 0x00000027,
CPG_PERF_SEL_CE_STALL_ON_DATA_FROM_MIU   = 0x00000028,
CPG_PERF_SEL_CE_STALL_ON_DATA_FROM_ROQ   = 0x00000029,
CPG_PERF_SEL_CE_STALL_ON_CE_BUFFER_FLAG  = 0x0000002a,
CPG_PERF_SEL_CE_STALL_ON_DE_COUNTER      = 0x0000002b,
CPG_PERF_SEL_TCIU_STALL_WAIT_ON_FREE     = 0x0000002c,
CPG_PERF_SEL_TCIU_STALL_WAIT_ON_TAGS     = 0x0000002d,
CPG_PERF_SEL_UTCL2IU_STALL_WAIT_ON_FREE  = 0x0000002e,
CPG_PERF_SEL_UTCL2IU_STALL_WAIT_ON_TAGS  = 0x0000002f,
CPG_PERF_SEL_UTCL1_STALL_ON_TRANSLATION  = 0x00000030,
} CPG_PERFCOUNT_SEL;

/*
 * CPF_PERFCOUNT_SEL enum
 */

typedef enum CPF_PERFCOUNT_SEL {
CPF_PERF_SEL_ALWAYS_COUNT                = 0x00000000,
CPF_PERF_SEL_MIU_STALLED_WAITING_RDREQ_FREE  = 0x00000001,
CPF_PERF_SEL_TCIU_STALLED_WAITING_ON_FREE  = 0x00000002,
CPF_PERF_SEL_TCIU_STALLED_WAITING_ON_TAGS  = 0x00000003,
CPF_PERF_SEL_CSF_BUSY_FOR_FETCHING_RING  = 0x00000004,
CPF_PERF_SEL_CSF_BUSY_FOR_FETCHING_IB1   = 0x00000005,
CPF_PERF_SEL_CSF_BUSY_FOR_FETCHING_IB2   = 0x00000006,
CPF_PERF_SEL_CSF_BUSY_FOR_FECTHINC_STATE  = 0x00000007,
CPF_PERF_SEL_MIU_BUSY_FOR_OUTSTANDING_TAGS  = 0x00000008,
CPF_PERF_SEL_CSF_RTS_MIU_NOT_RTR         = 0x00000009,
CPF_PERF_SEL_CSF_STATE_FIFO_NOT_RTR      = 0x0000000a,
CPF_PERF_SEL_CSF_FETCHING_CMD_BUFFERS    = 0x0000000b,
CPF_PERF_SEL_GRBM_DWORDS_SENT            = 0x0000000c,
CPF_PERF_SEL_DYNAMIC_CLOCK_VALID         = 0x0000000d,
CPF_PERF_SEL_REGISTER_CLOCK_VALID        = 0x0000000e,
CPF_PERF_SEL_MIU_WRITE_REQUEST_SEND      = 0x0000000f,
CPF_PERF_SEL_MIU_READ_REQUEST_SEND       = 0x00000010,
CPF_PERF_SEL_UTCL2IU_STALL_WAIT_ON_FREE  = 0x00000011,
CPF_PERF_SEL_UTCL2IU_STALL_WAIT_ON_TAGS  = 0x00000012,
CPF_PERF_SEL_UTCL1_STALL_ON_TRANSLATION  = 0x00000013,
CPF_PERF_SEL_RCIU_STALL_WAIT_ON_FREE     = 0x00000014,
} CPF_PERFCOUNT_SEL;

/*
 * CPC_PERFCOUNT_SEL enum
 */

typedef enum CPC_PERFCOUNT_SEL {
CPC_PERF_SEL_ALWAYS_COUNT                = 0x00000000,
CPC_PERF_SEL_RCIU_STALL_WAIT_ON_FREE     = 0x00000001,
CPC_PERF_SEL_RCIU_STALL_PRIV_VIOLATION   = 0x00000002,
CPC_PERF_SEL_MIU_STALL_ON_RDREQ_FREE     = 0x00000003,
CPC_PERF_SEL_MIU_STALL_ON_WRREQ_FREE     = 0x00000004,
CPC_PERF_SEL_TCIU_STALL_WAIT_ON_FREE     = 0x00000005,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_RCIU_READY  = 0x00000006,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_RCIU_READY_PERF  = 0x00000007,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_RCIU_READ  = 0x00000008,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_MIU_READ  = 0x00000009,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_MIU_WRITE  = 0x0000000a,
CPC_PERF_SEL_ME1_STALL_ON_DATA_FROM_ROQ  = 0x0000000b,
CPC_PERF_SEL_ME1_STALL_ON_DATA_FROM_ROQ_PERF  = 0x0000000c,
CPC_PERF_SEL_ME1_BUSY_FOR_PACKET_DECODE  = 0x0000000d,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_RCIU_READY  = 0x0000000e,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_RCIU_READY_PERF  = 0x0000000f,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_RCIU_READ  = 0x00000010,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_MIU_READ  = 0x00000011,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_MIU_WRITE  = 0x00000012,
CPC_PERF_SEL_ME2_STALL_ON_DATA_FROM_ROQ  = 0x00000013,
CPC_PERF_SEL_ME2_STALL_ON_DATA_FROM_ROQ_PERF  = 0x00000014,
CPC_PERF_SEL_ME2_BUSY_FOR_PACKET_DECODE  = 0x00000015,
CPC_PERF_SEL_UTCL2IU_STALL_WAIT_ON_FREE  = 0x00000016,
CPC_PERF_SEL_UTCL2IU_STALL_WAIT_ON_TAGS  = 0x00000017,
CPC_PERF_SEL_UTCL1_STALL_ON_TRANSLATION  = 0x00000018,
} CPC_PERFCOUNT_SEL;

/*
 * CP_ALPHA_TAG_RAM_SEL enum
 */

typedef enum CP_ALPHA_TAG_RAM_SEL {
CPG_TAG_RAM                              = 0x00000000,
CPC_TAG_RAM                              = 0x00000001,
CPF_TAG_RAM                              = 0x00000002,
RSV_TAG_RAM                              = 0x00000003,
} CP_ALPHA_TAG_RAM_SEL;

/*
 * SEM_RESPONSE value
 */

#define SEM_ECC_ERROR                  0x00000000
#define SEM_TRANS_ERROR                0x00000001
#define SEM_FAILED                     0x00000002
#define SEM_PASSED                     0x00000003

/*
 * IQ_RETRY_TYPE value
 */

#define IQ_QUEUE_SLEEP                 0x00000000
#define IQ_OFFLOAD_RETRY               0x00000001
#define IQ_SCH_WAVE_MSG                0x00000002
#define IQ_SEM_REARM                   0x00000003
#define IQ_DEQUEUE_RETRY               0x00000004

/*
 * IQ_INTR_TYPE value
 */

#define IQ_INTR_TYPE_PQ                0x00000000
#define IQ_INTR_TYPE_IB                0x00000001
#define IQ_INTR_TYPE_MQD               0x00000002

/*
 * VMID_SIZE value
 */

#define VMID_SZ                        0x00000004

/*
 * CONFIG_SPACE value
 */

#define CONFIG_SPACE_START             0x00002000
#define CONFIG_SPACE_END               0x00009fff

/*
 * CONFIG_SPACE1 value
 */

#define CONFIG_SPACE1_START            0x00002000
#define CONFIG_SPACE1_END              0x00002bff

/*
 * CONFIG_SPACE2 value
 */

#define CONFIG_SPACE2_START            0x00003000
#define CONFIG_SPACE2_END              0x00009fff

/*
 * UCONFIG_SPACE value
 */

#define UCONFIG_SPACE_START            0x0000c000
#define UCONFIG_SPACE_END              0x0000ffff

/*
 * PERSISTENT_SPACE value
 */

#define PERSISTENT_SPACE_START         0x00002c00
#define PERSISTENT_SPACE_END           0x00002fff

/*
 * CONTEXT_SPACE value
 */

#define CONTEXT_SPACE_START            0x0000a000
#define CONTEXT_SPACE_END              0x0000bfff

/*******************************************************
 * SQ_UC Enums
 *******************************************************/

/*
 * VALUE_SQ_ENC_SOP1 value
 */

#define SQ_ENC_SOP1_BITS               0xbe800000
#define SQ_ENC_SOP1_MASK               0xff800000
#define SQ_ENC_SOP1_FIELD              0x0000017d

/*
 * VALUE_SQ_ENC_SOPC value
 */

#define SQ_ENC_SOPC_BITS               0xbf000000
#define SQ_ENC_SOPC_MASK               0xff800000
#define SQ_ENC_SOPC_FIELD              0x0000017e

/*
 * VALUE_SQ_ENC_SOPP value
 */

#define SQ_ENC_SOPP_BITS               0xbf800000
#define SQ_ENC_SOPP_MASK               0xff800000
#define SQ_ENC_SOPP_FIELD              0x0000017f

/*
 * VALUE_SQ_ENC_SOPK value
 */

#define SQ_ENC_SOPK_BITS               0xb0000000
#define SQ_ENC_SOPK_MASK               0xf0000000
#define SQ_ENC_SOPK_FIELD              0x0000000b

/*
 * VALUE_SQ_ENC_SOP2 value
 */

#define SQ_ENC_SOP2_BITS               0x80000000
#define SQ_ENC_SOP2_MASK               0xc0000000
#define SQ_ENC_SOP2_FIELD              0x00000002

/*
 * VALUE_SQ_ENC_SMEM value
 */

#define SQ_ENC_SMEM_BITS               0xc0000000
#define SQ_ENC_SMEM_MASK               0xfc000000
#define SQ_ENC_SMEM_FIELD              0x00000030

/*
 * VALUE_SQ_ENC_VOP1 value
 */

#define SQ_ENC_VOP1_BITS               0x7e000000
#define SQ_ENC_VOP1_MASK               0xfe000000
#define SQ_ENC_VOP1_FIELD              0x0000003f

/*
 * VALUE_SQ_ENC_VOPC value
 */

#define SQ_ENC_VOPC_BITS               0x7c000000
#define SQ_ENC_VOPC_MASK               0xfe000000
#define SQ_ENC_VOPC_FIELD              0x0000003e

/*
 * VALUE_SQ_ENC_VOP2 value
 */

#define SQ_ENC_VOP2_BITS               0x00000000
#define SQ_ENC_VOP2_MASK               0x80000000
#define SQ_ENC_VOP2_FIELD              0x00000000

/*
 * VALUE_SQ_ENC_VINTRP value
 */

#define SQ_ENC_VINTRP_BITS             0xd4000000
#define SQ_ENC_VINTRP_MASK             0xfc000000
#define SQ_ENC_VINTRP_FIELD            0x00000035

/*
 * VALUE_SQ_ENC_VOP3P value
 */

#define SQ_ENC_VOP3P_BITS              0xd3800000
#define SQ_ENC_VOP3P_MASK              0xff800000
#define SQ_ENC_VOP3P_FIELD             0x000001a7

/*
 * VALUE_SQ_ENC_VOP3 value
 */

#define SQ_ENC_VOP3_BITS               0xd0000000
#define SQ_ENC_VOP3_MASK               0xfc000000
#define SQ_ENC_VOP3_FIELD              0x00000034

/*
 * VALUE_SQ_ENC_DS value
 */

#define SQ_ENC_DS_BITS                 0xd8000000
#define SQ_ENC_DS_MASK                 0xfc000000
#define SQ_ENC_DS_FIELD                0x00000036

/*
 * VALUE_SQ_ENC_MUBUF value
 */

#define SQ_ENC_MUBUF_BITS              0xe0000000
#define SQ_ENC_MUBUF_MASK              0xfc000000
#define SQ_ENC_MUBUF_FIELD             0x00000038

/*
 * VALUE_SQ_ENC_MTBUF value
 */

#define SQ_ENC_MTBUF_BITS              0xe8000000
#define SQ_ENC_MTBUF_MASK              0xfc000000
#define SQ_ENC_MTBUF_FIELD             0x0000003a

/*
 * VALUE_SQ_ENC_MIMG value
 */

#define SQ_ENC_MIMG_BITS               0xf0000000
#define SQ_ENC_MIMG_MASK               0xfc000000
#define SQ_ENC_MIMG_FIELD              0x0000003c

/*
 * VALUE_SQ_ENC_EXP value
 */

#define SQ_ENC_EXP_BITS                0xc4000000
#define SQ_ENC_EXP_MASK                0xfc000000
#define SQ_ENC_EXP_FIELD               0x00000031

/*
 * VALUE_SQ_ENC_FLAT value
 */

#define SQ_ENC_FLAT_BITS               0xdc000000
#define SQ_ENC_FLAT_MASK               0xfc000000
#define SQ_ENC_FLAT_FIELD              0x00000037

/*
 * VALUE_SQ_V_OP3_INTRP_COUNT value
 */

#define SQ_V_OP3_INTRP_COUNT           0x0000000c

/*
 * VALUE_SQ_SENDMSG_SYSTEM_SIZE value
 */

#define SQ_SENDMSG_SYSTEM_SIZE         0x00000003

/*
 * VALUE_SQ_HWREG_ID_SIZE value
 */

#define SQ_HWREG_ID_SIZE               0x00000006

/*
 * VALUE_SQ_V_OPC_COUNT value
 */

#define SQ_V_OPC_COUNT                 0x00000100

/*
 * VALUE_SQ_NUM_VGPR value
 */

#define SQ_NUM_VGPR                    0x00000100

/*
 * VALUE_SQ_WAITCNT_LGKM_SHIFT value
 */

#define SQ_WAITCNT_LGKM_SHIFT          0x00000008

/*
 * VALUE_SQ_HWREG_ID_SHIFT value
 */

#define SQ_HWREG_ID_SHIFT              0x00000000

/*
 * VALUE_SQ_EXP_NUM_POS value
 */

#define SQ_EXP_NUM_POS                 0x00000004

/*
 * VALUE_SQ_XLATE_VOP3_TO_VOPC_OFFSET value
 */

#define SQ_XLATE_VOP3_TO_VOPC_OFFSET   0x00000000

/*
 * VALUE_SQ_V_OP3_2IN_OFFSET value
 */

#define SQ_V_OP3_2IN_OFFSET            0x00000280

/*
 * VALUE_SQ_XLATE_VOP3_TO_VOP2_OFFSET value
 */

#define SQ_XLATE_VOP3_TO_VOP2_OFFSET   0x00000100

/*
 * VALUE_SQ_EXP_NUM_MRT value
 */

#define SQ_EXP_NUM_MRT                 0x00000008

/*
 * VALUE_SQ_NUM_TTMP value
 */

#define SQ_NUM_TTMP                    0x00000010

/*
 * VALUE_SQ_SENDMSG_STREAMID_SHIFT value
 */

#define SQ_SENDMSG_STREAMID_SHIFT      0x00000008

/*
 * VALUE_SQ_V_OP1_COUNT value
 */

#define SQ_V_OP1_COUNT                 0x00000080

/*
 * VALUE_SQ_WAITCNT_LGKM_SIZE value
 */

#define SQ_WAITCNT_LGKM_SIZE           0x00000004

/*
 * VALUE_SQ_XLATE_VOP3_TO_VOPC_COUNT value
 */

#define SQ_XLATE_VOP3_TO_VOPC_COUNT    0x00000100

/*
 * VALUE_SQ_SENDMSG_MSG_SHIFT value
 */

#define SQ_SENDMSG_MSG_SHIFT           0x00000000

/*
 * VALUE_SQ_V_OP3_3IN_OFFSET value
 */

#define SQ_V_OP3_3IN_OFFSET            0x000001c0

/*
 * VALUE_SQ_HWREG_OFFSET_SHIFT value
 */

#define SQ_HWREG_OFFSET_SHIFT          0x00000006

/*
 * VALUE_SQ_HWREG_SIZE_SHIFT value
 */

#define SQ_HWREG_SIZE_SHIFT            0x0000000b

/*
 * VALUE_SQ_HWREG_OFFSET_SIZE value
 */

#define SQ_HWREG_OFFSET_SIZE           0x00000005

/*
 * VALUE_SQ_V_OP3_3IN_COUNT value
 */

#define SQ_V_OP3_3IN_COUNT             0x000000b0

/*
 * VALUE_SQ_SENDMSG_MSG_SIZE value
 */

#define SQ_SENDMSG_MSG_SIZE            0x00000004

/*
 * VALUE_SQ_XLATE_VOP3_TO_VOP1_COUNT value
 */

#define SQ_XLATE_VOP3_TO_VOP1_COUNT    0x00000080

/*
 * VALUE_SQ_EXP_NUM_GDS value
 */

#define SQ_EXP_NUM_GDS                 0x00000005

/*
 * VALUE_SQ_V_OP2_COUNT value
 */

#define SQ_V_OP2_COUNT                 0x00000040

/*
 * VALUE_SQ_SENDMSG_GSOP_SIZE value
 */

#define SQ_SENDMSG_GSOP_SIZE           0x00000002

/*
 * VALUE_SQ_WAITCNT_VM_SHIFT value
 */

#define SQ_WAITCNT_VM_SHIFT            0x00000000

/*
 * VALUE_SQ_XLATE_VOP3_TO_VOP3P_COUNT value
 */

#define SQ_XLATE_VOP3_TO_VOP3P_COUNT   0x00000080

/*
 * VALUE_SQ_V_OP3_2IN_COUNT value
 */

#define SQ_V_OP3_2IN_COUNT             0x00000080

/*
 * VALUE_SQ_SENDMSG_SYSTEM_SHIFT value
 */

#define SQ_SENDMSG_SYSTEM_SHIFT        0x00000004

/*
 * VALUE_SQ_WAITCNT_VM_SIZE value
 */

#define SQ_WAITCNT_VM_SIZE             0x00000004

/*
 * VALUE_SQ_XLATE_VOP3_TO_VOP3P_OFFSET value
 */

#define SQ_XLATE_VOP3_TO_VOP3P_OFFSET  0x00000380

/*
 * VALUE_SQ_WAITCNT_EXP_SHIFT value
 */

#define SQ_WAITCNT_EXP_SHIFT           0x00000004

/*
 * VALUE_SQ_XLATE_VOP3_TO_VOP2_COUNT value
 */

#define SQ_XLATE_VOP3_TO_VOP2_COUNT    0x00000040

/*
 * VALUE_SQ_EXP_NUM_PARAM value
 */

#define SQ_EXP_NUM_PARAM               0x00000020

/*
 * VALUE_SQ_HWREG_SIZE_SIZE value
 */

#define SQ_HWREG_SIZE_SIZE             0x00000005

/*
 * VALUE_SQ_WAITCNT_EXP_SIZE value
 */

#define SQ_WAITCNT_EXP_SIZE            0x00000003

/*
 * VALUE_SQ_V_OP3_INTRP_OFFSET value
 */

#define SQ_V_OP3_INTRP_OFFSET          0x00000274

/*
 * VALUE_SQ_SENDMSG_GSOP_SHIFT value
 */

#define SQ_SENDMSG_GSOP_SHIFT          0x00000004

/*
 * VALUE_SQ_XLATE_VOP3_TO_VINTRP_OFFSET value
 */

#define SQ_XLATE_VOP3_TO_VINTRP_OFFSET 0x00000270

/*
 * VALUE_SQ_NUM_ATTR value
 */

#define SQ_NUM_ATTR                    0x00000021

/*
 * VALUE_SQ_NUM_SGPR value
 */

#define SQ_NUM_SGPR                    0x00000066

/*
 * VALUE_SQ_SRC_VGPR_BIT value
 */

#define SQ_SRC_VGPR_BIT                0x00000100

/*
 * VALUE_SQ_V_INTRP_COUNT value
 */

#define SQ_V_INTRP_COUNT               0x00000004

/*
 * VALUE_SQ_SENDMSG_STREAMID_SIZE value
 */

#define SQ_SENDMSG_STREAMID_SIZE       0x00000002

/*
 * VALUE_SQ_V_OP3P_COUNT value
 */

#define SQ_V_OP3P_COUNT                0x00000080

/*
 * VALUE_SQ_XLATE_VOP3_TO_VOP1_OFFSET value
 */

#define SQ_XLATE_VOP3_TO_VOP1_OFFSET   0x00000140

/*
 * VALUE_SQ_XLATE_VOP3_TO_VINTRP_COUNT value
 */

#define SQ_XLATE_VOP3_TO_VINTRP_COUNT  0x00000004

/*
 * VALUE_SQ_SSRC_SPECIAL_DPP value
 */

#define SQ_SRC_DPP                     0x000000fa

/*
 * VALUE_SQ_OP_MTBUF value
 */

#define SQ_TBUFFER_LOAD_FORMAT_X       0x00000000
#define SQ_TBUFFER_LOAD_FORMAT_XY      0x00000001
#define SQ_TBUFFER_LOAD_FORMAT_XYZ     0x00000002
#define SQ_TBUFFER_LOAD_FORMAT_XYZW    0x00000003
#define SQ_TBUFFER_STORE_FORMAT_X      0x00000004
#define SQ_TBUFFER_STORE_FORMAT_XY     0x00000005
#define SQ_TBUFFER_STORE_FORMAT_XYZ    0x00000006
#define SQ_TBUFFER_STORE_FORMAT_XYZW   0x00000007
#define SQ_TBUFFER_LOAD_FORMAT_D16_X   0x00000008
#define SQ_TBUFFER_LOAD_FORMAT_D16_XY  0x00000009
#define SQ_TBUFFER_LOAD_FORMAT_D16_XYZ 0x0000000a
#define SQ_TBUFFER_LOAD_FORMAT_D16_XYZW 0x0000000b
#define SQ_TBUFFER_STORE_FORMAT_D16_X  0x0000000c
#define SQ_TBUFFER_STORE_FORMAT_D16_XY 0x0000000d
#define SQ_TBUFFER_STORE_FORMAT_D16_XYZ 0x0000000e
#define SQ_TBUFFER_STORE_FORMAT_D16_XYZW 0x0000000f

/*
 * VALUE_SQ_OP_FLAT_GLBL value
 */

#define SQ_GLOBAL_LOAD_UBYTE           0x00000010
#define SQ_GLOBAL_LOAD_SBYTE           0x00000011
#define SQ_GLOBAL_LOAD_USHORT          0x00000012
#define SQ_GLOBAL_LOAD_SSHORT          0x00000013
#define SQ_GLOBAL_LOAD_DWORD           0x00000014
#define SQ_GLOBAL_LOAD_DWORDX2         0x00000015
#define SQ_GLOBAL_LOAD_DWORDX3         0x00000016
#define SQ_GLOBAL_LOAD_DWORDX4         0x00000017
#define SQ_GLOBAL_STORE_BYTE           0x00000018
#define SQ_GLOBAL_STORE_SHORT          0x0000001a
#define SQ_GLOBAL_STORE_DWORD          0x0000001c
#define SQ_GLOBAL_STORE_DWORDX2        0x0000001d
#define SQ_GLOBAL_STORE_DWORDX3        0x0000001e
#define SQ_GLOBAL_STORE_DWORDX4        0x0000001f
#define SQ_GLOBAL_ATOMIC_SWAP          0x00000040
#define SQ_GLOBAL_ATOMIC_CMPSWAP       0x00000041
#define SQ_GLOBAL_ATOMIC_ADD           0x00000042
#define SQ_GLOBAL_ATOMIC_SUB           0x00000043
#define SQ_GLOBAL_ATOMIC_SMIN          0x00000044
#define SQ_GLOBAL_ATOMIC_UMIN          0x00000045
#define SQ_GLOBAL_ATOMIC_SMAX          0x00000046
#define SQ_GLOBAL_ATOMIC_UMAX          0x00000047
#define SQ_GLOBAL_ATOMIC_AND           0x00000048
#define SQ_GLOBAL_ATOMIC_OR            0x00000049
#define SQ_GLOBAL_ATOMIC_XOR           0x0000004a
#define SQ_GLOBAL_ATOMIC_INC           0x0000004b
#define SQ_GLOBAL_ATOMIC_DEC           0x0000004c
#define SQ_GLOBAL_ATOMIC_SWAP_X2       0x00000060
#define SQ_GLOBAL_ATOMIC_CMPSWAP_X2    0x00000061
#define SQ_GLOBAL_ATOMIC_ADD_X2        0x00000062
#define SQ_GLOBAL_ATOMIC_SUB_X2        0x00000063
#define SQ_GLOBAL_ATOMIC_SMIN_X2       0x00000064
#define SQ_GLOBAL_ATOMIC_UMIN_X2       0x00000065
#define SQ_GLOBAL_ATOMIC_SMAX_X2       0x00000066
#define SQ_GLOBAL_ATOMIC_UMAX_X2       0x00000067
#define SQ_GLOBAL_ATOMIC_AND_X2        0x00000068
#define SQ_GLOBAL_ATOMIC_OR_X2         0x00000069
#define SQ_GLOBAL_ATOMIC_XOR_X2        0x0000006a
#define SQ_GLOBAL_ATOMIC_INC_X2        0x0000006b
#define SQ_GLOBAL_ATOMIC_DEC_X2        0x0000006c

/*
 * VALUE_SQ_VGPR value
 */

#define SQ_VGPR0                       0x00000000

/*
 * VALUE_SQ_OP_FLAT_SCRATCH value
 */

#define SQ_SCRATCH_LOAD_UBYTE          0x00000010
#define SQ_SCRATCH_LOAD_SBYTE          0x00000011
#define SQ_SCRATCH_LOAD_USHORT         0x00000012
#define SQ_SCRATCH_LOAD_SSHORT         0x00000013
#define SQ_SCRATCH_LOAD_DWORD          0x00000014
#define SQ_SCRATCH_LOAD_DWORDX2        0x00000015
#define SQ_SCRATCH_LOAD_DWORDX3        0x00000016
#define SQ_SCRATCH_LOAD_DWORDX4        0x00000017
#define SQ_SCRATCH_STORE_BYTE          0x00000018
#define SQ_SCRATCH_STORE_SHORT         0x0000001a
#define SQ_SCRATCH_STORE_DWORD         0x0000001c
#define SQ_SCRATCH_STORE_DWORDX2       0x0000001d
#define SQ_SCRATCH_STORE_DWORDX3       0x0000001e
#define SQ_SCRATCH_STORE_DWORDX4       0x0000001f

/*
 * VALUE_SQ_VCC value
 */

#define SQ_VCC_ALL                     0x00000000

/*
 * VALUE_SQ_SSRC_0_63_INLINES value
 */

#define SQ_SRC_0                       0x00000080
#define SQ_SRC_1_INT                   0x00000081
#define SQ_SRC_2_INT                   0x00000082
#define SQ_SRC_3_INT                   0x00000083
#define SQ_SRC_4_INT                   0x00000084
#define SQ_SRC_5_INT                   0x00000085
#define SQ_SRC_6_INT                   0x00000086
#define SQ_SRC_7_INT                   0x00000087
#define SQ_SRC_8_INT                   0x00000088
#define SQ_SRC_9_INT                   0x00000089
#define SQ_SRC_10_INT                  0x0000008a
#define SQ_SRC_11_INT                  0x0000008b
#define SQ_SRC_12_INT                  0x0000008c
#define SQ_SRC_13_INT                  0x0000008d
#define SQ_SRC_14_INT                  0x0000008e
#define SQ_SRC_15_INT                  0x0000008f
#define SQ_SRC_16_INT                  0x00000090
#define SQ_SRC_17_INT                  0x00000091
#define SQ_SRC_18_INT                  0x00000092
#define SQ_SRC_19_INT                  0x00000093
#define SQ_SRC_20_INT                  0x00000094
#define SQ_SRC_21_INT                  0x00000095
#define SQ_SRC_22_INT                  0x00000096
#define SQ_SRC_23_INT                  0x00000097
#define SQ_SRC_24_INT                  0x00000098
#define SQ_SRC_25_INT                  0x00000099
#define SQ_SRC_26_INT                  0x0000009a
#define SQ_SRC_27_INT                  0x0000009b
#define SQ_SRC_28_INT                  0x0000009c
#define SQ_SRC_29_INT                  0x0000009d
#define SQ_SRC_30_INT                  0x0000009e
#define SQ_SRC_31_INT                  0x0000009f
#define SQ_SRC_32_INT                  0x000000a0
#define SQ_SRC_33_INT                  0x000000a1
#define SQ_SRC_34_INT                  0x000000a2
#define SQ_SRC_35_INT                  0x000000a3
#define SQ_SRC_36_INT                  0x000000a4
#define SQ_SRC_37_INT                  0x000000a5
#define SQ_SRC_38_INT                  0x000000a6
#define SQ_SRC_39_INT                  0x000000a7
#define SQ_SRC_40_INT                  0x000000a8
#define SQ_SRC_41_INT                  0x000000a9
#define SQ_SRC_42_INT                  0x000000aa
#define SQ_SRC_43_INT                  0x000000ab
#define SQ_SRC_44_INT                  0x000000ac
#define SQ_SRC_45_INT                  0x000000ad
#define SQ_SRC_46_INT                  0x000000ae
#define SQ_SRC_47_INT                  0x000000af
#define SQ_SRC_48_INT                  0x000000b0
#define SQ_SRC_49_INT                  0x000000b1
#define SQ_SRC_50_INT                  0x000000b2
#define SQ_SRC_51_INT                  0x000000b3
#define SQ_SRC_52_INT                  0x000000b4
#define SQ_SRC_53_INT                  0x000000b5
#define SQ_SRC_54_INT                  0x000000b6
#define SQ_SRC_55_INT                  0x000000b7
#define SQ_SRC_56_INT                  0x000000b8
#define SQ_SRC_57_INT                  0x000000b9
#define SQ_SRC_58_INT                  0x000000ba
#define SQ_SRC_59_INT                  0x000000bb
#define SQ_SRC_60_INT                  0x000000bc
#define SQ_SRC_61_INT                  0x000000bd
#define SQ_SRC_62_INT                  0x000000be
#define SQ_SRC_63_INT                  0x000000bf

/*
 * VALUE_SQ_OP_MIMG value
 */

#define SQ_IMAGE_LOAD                  0x00000000
#define SQ_IMAGE_LOAD_MIP              0x00000001
#define SQ_IMAGE_LOAD_PCK              0x00000002
#define SQ_IMAGE_LOAD_PCK_SGN          0x00000003
#define SQ_IMAGE_LOAD_MIP_PCK          0x00000004
#define SQ_IMAGE_LOAD_MIP_PCK_SGN      0x00000005
#define SQ_IMAGE_STORE                 0x00000008
#define SQ_IMAGE_STORE_MIP             0x00000009
#define SQ_IMAGE_STORE_PCK             0x0000000a
#define SQ_IMAGE_STORE_MIP_PCK         0x0000000b
#define SQ_IMAGE_GET_RESINFO           0x0000000e
#define SQ_IMAGE_ATOMIC_SWAP           0x00000010
#define SQ_IMAGE_ATOMIC_CMPSWAP        0x00000011
#define SQ_IMAGE_ATOMIC_ADD            0x00000012
#define SQ_IMAGE_ATOMIC_SUB            0x00000013
#define SQ_IMAGE_ATOMIC_SMIN           0x00000014
#define SQ_IMAGE_ATOMIC_UMIN           0x00000015
#define SQ_IMAGE_ATOMIC_SMAX           0x00000016
#define SQ_IMAGE_ATOMIC_UMAX           0x00000017
#define SQ_IMAGE_ATOMIC_AND            0x00000018
#define SQ_IMAGE_ATOMIC_OR             0x00000019
#define SQ_IMAGE_ATOMIC_XOR            0x0000001a
#define SQ_IMAGE_ATOMIC_INC            0x0000001b
#define SQ_IMAGE_ATOMIC_DEC            0x0000001c
#define SQ_IMAGE_SAMPLE                0x00000020
#define SQ_IMAGE_SAMPLE_CL             0x00000021
#define SQ_IMAGE_SAMPLE_D              0x00000022
#define SQ_IMAGE_SAMPLE_D_CL           0x00000023
#define SQ_IMAGE_SAMPLE_L              0x00000024
#define SQ_IMAGE_SAMPLE_B              0x00000025
#define SQ_IMAGE_SAMPLE_B_CL           0x00000026
#define SQ_IMAGE_SAMPLE_LZ             0x00000027
#define SQ_IMAGE_SAMPLE_C              0x00000028
#define SQ_IMAGE_SAMPLE_C_CL           0x00000029
#define SQ_IMAGE_SAMPLE_C_D            0x0000002a
#define SQ_IMAGE_SAMPLE_C_D_CL         0x0000002b
#define SQ_IMAGE_SAMPLE_C_L            0x0000002c
#define SQ_IMAGE_SAMPLE_C_B            0x0000002d
#define SQ_IMAGE_SAMPLE_C_B_CL         0x0000002e
#define SQ_IMAGE_SAMPLE_C_LZ           0x0000002f
#define SQ_IMAGE_SAMPLE_O              0x00000030
#define SQ_IMAGE_SAMPLE_CL_O           0x00000031
#define SQ_IMAGE_SAMPLE_D_O            0x00000032
#define SQ_IMAGE_SAMPLE_D_CL_O         0x00000033
#define SQ_IMAGE_SAMPLE_L_O            0x00000034
#define SQ_IMAGE_SAMPLE_B_O            0x00000035
#define SQ_IMAGE_SAMPLE_B_CL_O         0x00000036
#define SQ_IMAGE_SAMPLE_LZ_O           0x00000037
#define SQ_IMAGE_SAMPLE_C_O            0x00000038
#define SQ_IMAGE_SAMPLE_C_CL_O         0x00000039
#define SQ_IMAGE_SAMPLE_C_D_O          0x0000003a
#define SQ_IMAGE_SAMPLE_C_D_CL_O       0x0000003b
#define SQ_IMAGE_SAMPLE_C_L_O          0x0000003c
#define SQ_IMAGE_SAMPLE_C_B_O          0x0000003d
#define SQ_IMAGE_SAMPLE_C_B_CL_O       0x0000003e
#define SQ_IMAGE_SAMPLE_C_LZ_O         0x0000003f
#define SQ_IMAGE_GATHER4               0x00000040
#define SQ_IMAGE_GATHER4_CL            0x00000041
#define SQ_IMAGE_GATHER4H              0x00000042
#define SQ_IMAGE_GATHER4_L             0x00000044
#define SQ_IMAGE_GATHER4_B             0x00000045
#define SQ_IMAGE_GATHER4_B_CL          0x00000046
#define SQ_IMAGE_GATHER4_LZ            0x00000047
#define SQ_IMAGE_GATHER4_C             0x00000048
#define SQ_IMAGE_GATHER4_C_CL          0x00000049
#define SQ_IMAGE_GATHER4H_PCK          0x0000004a
#define SQ_IMAGE_GATHER8H_PCK          0x0000004b
#define SQ_IMAGE_GATHER4_C_L           0x0000004c
#define SQ_IMAGE_GATHER4_C_B           0x0000004d
#define SQ_IMAGE_GATHER4_C_B_CL        0x0000004e
#define SQ_IMAGE_GATHER4_C_LZ          0x0000004f
#define SQ_IMAGE_GATHER4_O             0x00000050
#define SQ_IMAGE_GATHER4_CL_O          0x00000051
#define SQ_IMAGE_GATHER4_L_O           0x00000054
#define SQ_IMAGE_GATHER4_B_O           0x00000055
#define SQ_IMAGE_GATHER4_B_CL_O        0x00000056
#define SQ_IMAGE_GATHER4_LZ_O          0x00000057
#define SQ_IMAGE_GATHER4_C_O           0x00000058
#define SQ_IMAGE_GATHER4_C_CL_O        0x00000059
#define SQ_IMAGE_GATHER4_C_L_O         0x0000005c
#define SQ_IMAGE_GATHER4_C_B_O         0x0000005d
#define SQ_IMAGE_GATHER4_C_B_CL_O      0x0000005e
#define SQ_IMAGE_GATHER4_C_LZ_O        0x0000005f
#define SQ_IMAGE_GET_LOD               0x00000060
#define SQ_IMAGE_SAMPLE_CD             0x00000068
#define SQ_IMAGE_SAMPLE_CD_CL          0x00000069
#define SQ_IMAGE_SAMPLE_C_CD           0x0000006a
#define SQ_IMAGE_SAMPLE_C_CD_CL        0x0000006b
#define SQ_IMAGE_SAMPLE_CD_O           0x0000006c
#define SQ_IMAGE_SAMPLE_CD_CL_O        0x0000006d
#define SQ_IMAGE_SAMPLE_C_CD_O         0x0000006e
#define SQ_IMAGE_SAMPLE_C_CD_CL_O      0x0000006f
#define SQ_IMAGE_RSRC256               0x0000007e
#define SQ_IMAGE_SAMPLER               0x0000007f

/*
 * VALUE_SQ_HW_REG value
 */

#define SQ_HW_REG_MODE                 0x00000001
#define SQ_HW_REG_STATUS               0x00000002
#define SQ_HW_REG_TRAPSTS              0x00000003
#define SQ_HW_REG_HW_ID                0x00000004
#define SQ_HW_REG_GPR_ALLOC            0x00000005
#define SQ_HW_REG_LDS_ALLOC            0x00000006
#define SQ_HW_REG_IB_STS               0x00000007
#define SQ_HW_REG_PC_LO                0x00000008
#define SQ_HW_REG_PC_HI                0x00000009
#define SQ_HW_REG_INST_DW0             0x0000000a
#define SQ_HW_REG_INST_DW1             0x0000000b
#define SQ_HW_REG_IB_DBG0              0x0000000c
#define SQ_HW_REG_IB_DBG1              0x0000000d
#define SQ_HW_REG_FLUSH_IB             0x0000000e
#define SQ_HW_REG_SH_MEM_BASES         0x0000000f
#define SQ_HW_REG_SQ_SHADER_TBA_LO     0x00000010
#define SQ_HW_REG_SQ_SHADER_TBA_HI     0x00000011
#define SQ_HW_REG_SQ_SHADER_TMA_LO     0x00000012
#define SQ_HW_REG_SQ_SHADER_TMA_HI     0x00000013

/*
 * VALUE_SQ_OP_SOP1 value
 */

#define SQ_S_MOV_B32                   0x00000000
#define SQ_S_MOV_B64                   0x00000001
#define SQ_S_CMOV_B32                  0x00000002
#define SQ_S_CMOV_B64                  0x00000003
#define SQ_S_NOT_B32                   0x00000004
#define SQ_S_NOT_B64                   0x00000005
#define SQ_S_WQM_B32                   0x00000006
#define SQ_S_WQM_B64                   0x00000007
#define SQ_S_BREV_B32                  0x00000008
#define SQ_S_BREV_B64                  0x00000009
#define SQ_S_BCNT0_I32_B32             0x0000000a
#define SQ_S_BCNT0_I32_B64             0x0000000b
#define SQ_S_BCNT1_I32_B32             0x0000000c
#define SQ_S_BCNT1_I32_B64             0x0000000d
#define SQ_S_FF0_I32_B32               0x0000000e
#define SQ_S_FF0_I32_B64               0x0000000f
#define SQ_S_FF1_I32_B32               0x00000010
#define SQ_S_FF1_I32_B64               0x00000011
#define SQ_S_FLBIT_I32_B32             0x00000012
#define SQ_S_FLBIT_I32_B64             0x00000013
#define SQ_S_FLBIT_I32                 0x00000014
#define SQ_S_FLBIT_I32_I64             0x00000015
#define SQ_S_SEXT_I32_I8               0x00000016
#define SQ_S_SEXT_I32_I16              0x00000017
#define SQ_S_BITSET0_B32               0x00000018
#define SQ_S_BITSET0_B64               0x00000019
#define SQ_S_BITSET1_B32               0x0000001a
#define SQ_S_BITSET1_B64               0x0000001b
#define SQ_S_GETPC_B64                 0x0000001c
#define SQ_S_SETPC_B64                 0x0000001d
#define SQ_S_SWAPPC_B64                0x0000001e
#define SQ_S_RFE_B64                   0x0000001f
#define SQ_S_AND_SAVEEXEC_B64          0x00000020
#define SQ_S_OR_SAVEEXEC_B64           0x00000021
#define SQ_S_XOR_SAVEEXEC_B64          0x00000022
#define SQ_S_ANDN2_SAVEEXEC_B64        0x00000023
#define SQ_S_ORN2_SAVEEXEC_B64         0x00000024
#define SQ_S_NAND_SAVEEXEC_B64         0x00000025
#define SQ_S_NOR_SAVEEXEC_B64          0x00000026
#define SQ_S_XNOR_SAVEEXEC_B64         0x00000027
#define SQ_S_QUADMASK_B32              0x00000028
#define SQ_S_QUADMASK_B64              0x00000029
#define SQ_S_MOVRELS_B32               0x0000002a
#define SQ_S_MOVRELS_B64               0x0000002b
#define SQ_S_MOVRELD_B32               0x0000002c
#define SQ_S_MOVRELD_B64               0x0000002d
#define SQ_S_CBRANCH_JOIN              0x0000002e
#define SQ_S_MOV_REGRD_B32             0x0000002f
#define SQ_S_ABS_I32                   0x00000030
#define SQ_S_MOV_FED_B32               0x00000031
#define SQ_S_SET_GPR_IDX_IDX           0x00000032
#define SQ_S_ANDN1_SAVEEXEC_B64        0x00000033
#define SQ_S_ORN1_SAVEEXEC_B64         0x00000034
#define SQ_S_ANDN1_WREXEC_B64          0x00000035
#define SQ_S_ANDN2_WREXEC_B64          0x00000036
#define SQ_S_BITREPLICATE_B64_B32      0x00000037

/*
 * VALUE_SQ_CNT value
 */

#define SQ_CNT1                        0x00000000
#define SQ_CNT2                        0x00000001
#define SQ_CNT3                        0x00000002
#define SQ_CNT4                        0x00000003

/*
 * VALUE_SQ_OP_VOP3 value
 */

#define SQ_V_MAD_LEGACY_F32            0x000001c0
#define SQ_V_MAD_F32                   0x000001c1
#define SQ_V_MAD_I32_I24               0x000001c2
#define SQ_V_MAD_U32_U24               0x000001c3
#define SQ_V_CUBEID_F32                0x000001c4
#define SQ_V_CUBESC_F32                0x000001c5
#define SQ_V_CUBETC_F32                0x000001c6
#define SQ_V_CUBEMA_F32                0x000001c7
#define SQ_V_BFE_U32                   0x000001c8
#define SQ_V_BFE_I32                   0x000001c9
#define SQ_V_BFI_B32                   0x000001ca
#define SQ_V_FMA_F32                   0x000001cb
#define SQ_V_FMA_F64                   0x000001cc
#define SQ_V_LERP_U8                   0x000001cd
#define SQ_V_ALIGNBIT_B32              0x000001ce
#define SQ_V_ALIGNBYTE_B32             0x000001cf
#define SQ_V_MIN3_F32                  0x000001d0
#define SQ_V_MIN3_I32                  0x000001d1
#define SQ_V_MIN3_U32                  0x000001d2
#define SQ_V_MAX3_F32                  0x000001d3
#define SQ_V_MAX3_I32                  0x000001d4
#define SQ_V_MAX3_U32                  0x000001d5
#define SQ_V_MED3_F32                  0x000001d6
#define SQ_V_MED3_I32                  0x000001d7
#define SQ_V_MED3_U32                  0x000001d8
#define SQ_V_SAD_U8                    0x000001d9
#define SQ_V_SAD_HI_U8                 0x000001da
#define SQ_V_SAD_U16                   0x000001db
#define SQ_V_SAD_U32                   0x000001dc
#define SQ_V_CVT_PK_U8_F32             0x000001dd
#define SQ_V_DIV_FIXUP_F32             0x000001de
#define SQ_V_DIV_FIXUP_F64             0x000001df
#define SQ_V_DIV_SCALE_F32             0x000001e0
#define SQ_V_DIV_SCALE_F64             0x000001e1
#define SQ_V_DIV_FMAS_F32              0x000001e2
#define SQ_V_DIV_FMAS_F64              0x000001e3
#define SQ_V_MSAD_U8                   0x000001e4
#define SQ_V_QSAD_PK_U16_U8            0x000001e5
#define SQ_V_MQSAD_PK_U16_U8           0x000001e6
#define SQ_V_MQSAD_U32_U8              0x000001e7
#define SQ_V_MAD_U64_U32               0x000001e8
#define SQ_V_MAD_I64_I32               0x000001e9
#define SQ_V_MAD_LEGACY_F16            0x000001ea
#define SQ_V_MAD_LEGACY_U16            0x000001eb
#define SQ_V_MAD_LEGACY_I16            0x000001ec
#define SQ_V_PERM_B32                  0x000001ed
#define SQ_V_FMA_LEGACY_F16            0x000001ee
#define SQ_V_DIV_FIXUP_LEGACY_F16      0x000001ef
#define SQ_V_CVT_PKACCUM_U8_F32        0x000001f0
#define SQ_V_MAD_U32_U16               0x000001f1
#define SQ_V_MAD_I32_I16               0x000001f2
#define SQ_V_XAD_U32                   0x000001f3
#define SQ_V_MIN3_F16                  0x000001f4
#define SQ_V_MIN3_I16                  0x000001f5
#define SQ_V_MIN3_U16                  0x000001f6
#define SQ_V_MAX3_F16                  0x000001f7
#define SQ_V_MAX3_I16                  0x000001f8
#define SQ_V_MAX3_U16                  0x000001f9
#define SQ_V_MED3_F16                  0x000001fa
#define SQ_V_MED3_I16                  0x000001fb
#define SQ_V_MED3_U16                  0x000001fc
#define SQ_V_LSHL_ADD_U32              0x000001fd
#define SQ_V_ADD_LSHL_U32              0x000001fe
#define SQ_V_ADD3_U32                  0x000001ff
#define SQ_V_LSHL_OR_B32               0x00000200
#define SQ_V_AND_OR_B32                0x00000201
#define SQ_V_OR3_B32                   0x00000202
#define SQ_V_MAD_F16                   0x00000203
#define SQ_V_MAD_U16                   0x00000204
#define SQ_V_MAD_I16                   0x00000205
#define SQ_V_FMA_F16                   0x00000206
#define SQ_V_DIV_FIXUP_F16             0x00000207
#define SQ_V_INTERP_P1LL_F16           0x00000274
#define SQ_V_INTERP_P1LV_F16           0x00000275
#define SQ_V_INTERP_P2_LEGACY_F16      0x00000276
#define SQ_V_INTERP_P2_F16             0x00000277
#define SQ_V_ADD_F64                   0x00000280
#define SQ_V_MUL_F64                   0x00000281
#define SQ_V_MIN_F64                   0x00000282
#define SQ_V_MAX_F64                   0x00000283
#define SQ_V_LDEXP_F64                 0x00000284
#define SQ_V_MUL_LO_U32                0x00000285
#define SQ_V_MUL_HI_U32                0x00000286
#define SQ_V_MUL_HI_I32                0x00000287
#define SQ_V_LDEXP_F32                 0x00000288
#define SQ_V_READLANE_B32              0x00000289
#define SQ_V_WRITELANE_B32             0x0000028a
#define SQ_V_BCNT_U32_B32              0x0000028b
#define SQ_V_MBCNT_LO_U32_B32          0x0000028c
#define SQ_V_MBCNT_HI_U32_B32          0x0000028d
#define SQ_V_MAC_LEGACY_F32            0x0000028e
#define SQ_V_LSHLREV_B64               0x0000028f
#define SQ_V_LSHRREV_B64               0x00000290
#define SQ_V_ASHRREV_I64               0x00000291
#define SQ_V_TRIG_PREOP_F64            0x00000292
#define SQ_V_BFM_B32                   0x00000293
#define SQ_V_CVT_PKNORM_I16_F32        0x00000294
#define SQ_V_CVT_PKNORM_U16_F32        0x00000295
#define SQ_V_CVT_PKRTZ_F16_F32         0x00000296
#define SQ_V_CVT_PK_U16_U32            0x00000297
#define SQ_V_CVT_PK_I16_I32            0x00000298
#define SQ_V_CVT_PKNORM_I16_F16        0x00000299
#define SQ_V_CVT_PKNORM_U16_F16        0x0000029a
#define SQ_V_READLANE_REGRD_B32        0x0000029b
#define SQ_V_ADD_I32                   0x0000029c
#define SQ_V_SUB_I32                   0x0000029d
#define SQ_V_ADD_I16                   0x0000029e
#define SQ_V_SUB_I16                   0x0000029f
#define SQ_V_PACK_B32_F16              0x000002a0

/*
 * VALUE_SQ_SSRC_SPECIAL_LIT value
 */

#define SQ_SRC_LITERAL                 0x000000ff

/*
 * VALUE_SQ_DPP_CTRL value
 */

#define SQ_DPP_QUAD_PERM               0x00000000
#define SQ_DPP_ROW_SL1                 0x00000101
#define SQ_DPP_ROW_SL2                 0x00000102
#define SQ_DPP_ROW_SL3                 0x00000103
#define SQ_DPP_ROW_SL4                 0x00000104
#define SQ_DPP_ROW_SL5                 0x00000105
#define SQ_DPP_ROW_SL6                 0x00000106
#define SQ_DPP_ROW_SL7                 0x00000107
#define SQ_DPP_ROW_SL8                 0x00000108
#define SQ_DPP_ROW_SL9                 0x00000109
#define SQ_DPP_ROW_SL10                0x0000010a
#define SQ_DPP_ROW_SL11                0x0000010b
#define SQ_DPP_ROW_SL12                0x0000010c
#define SQ_DPP_ROW_SL13                0x0000010d
#define SQ_DPP_ROW_SL14                0x0000010e
#define SQ_DPP_ROW_SL15                0x0000010f
#define SQ_DPP_ROW_SR1                 0x00000111
#define SQ_DPP_ROW_SR2                 0x00000112
#define SQ_DPP_ROW_SR3                 0x00000113
#define SQ_DPP_ROW_SR4                 0x00000114
#define SQ_DPP_ROW_SR5                 0x00000115
#define SQ_DPP_ROW_SR6                 0x00000116
#define SQ_DPP_ROW_SR7                 0x00000117
#define SQ_DPP_ROW_SR8                 0x00000118
#define SQ_DPP_ROW_SR9                 0x00000119
#define SQ_DPP_ROW_SR10                0x0000011a
#define SQ_DPP_ROW_SR11                0x0000011b
#define SQ_DPP_ROW_SR12                0x0000011c
#define SQ_DPP_ROW_SR13                0x0000011d
#define SQ_DPP_ROW_SR14                0x0000011e
#define SQ_DPP_ROW_SR15                0x0000011f
#define SQ_DPP_ROW_RR1                 0x00000121
#define SQ_DPP_ROW_RR2                 0x00000122
#define SQ_DPP_ROW_RR3                 0x00000123
#define SQ_DPP_ROW_RR4                 0x00000124
#define SQ_DPP_ROW_RR5                 0x00000125
#define SQ_DPP_ROW_RR6                 0x00000126
#define SQ_DPP_ROW_RR7                 0x00000127
#define SQ_DPP_ROW_RR8                 0x00000128
#define SQ_DPP_ROW_RR9                 0x00000129
#define SQ_DPP_ROW_RR10                0x0000012a
#define SQ_DPP_ROW_RR11                0x0000012b
#define SQ_DPP_ROW_RR12                0x0000012c
#define SQ_DPP_ROW_RR13                0x0000012d
#define SQ_DPP_ROW_RR14                0x0000012e
#define SQ_DPP_ROW_RR15                0x0000012f
#define SQ_DPP_WF_SL1                  0x00000130
#define SQ_DPP_WF_RL1                  0x00000134
#define SQ_DPP_WF_SR1                  0x00000138
#define SQ_DPP_WF_RR1                  0x0000013c
#define SQ_DPP_ROW_MIRROR              0x00000140
#define SQ_DPP_ROW_HALF_MIRROR         0x00000141
#define SQ_DPP_ROW_BCAST15             0x00000142
#define SQ_DPP_ROW_BCAST31             0x00000143

/*
 * VALUE_SQ_FLAT_SCRATCH_LOHI value
 */

#define SQ_FLAT_SCRATCH_LO             0x00000066
#define SQ_FLAT_SCRATCH_HI             0x00000067

/*
 * VALUE_SQ_OP_VOP1 value
 */

#define SQ_V_NOP                       0x00000000
#define SQ_V_MOV_B32                   0x00000001
#define SQ_V_READFIRSTLANE_B32         0x00000002
#define SQ_V_CVT_I32_F64               0x00000003
#define SQ_V_CVT_F64_I32               0x00000004
#define SQ_V_CVT_F32_I32               0x00000005
#define SQ_V_CVT_F32_U32               0x00000006
#define SQ_V_CVT_U32_F32               0x00000007
#define SQ_V_CVT_I32_F32               0x00000008
#define SQ_V_MOV_FED_B32               0x00000009
#define SQ_V_CVT_F16_F32               0x0000000a
#define SQ_V_CVT_F32_F16               0x0000000b
#define SQ_V_CVT_RPI_I32_F32           0x0000000c
#define SQ_V_CVT_FLR_I32_F32           0x0000000d
#define SQ_V_CVT_OFF_F32_I4            0x0000000e
#define SQ_V_CVT_F32_F64               0x0000000f
#define SQ_V_CVT_F64_F32               0x00000010
#define SQ_V_CVT_F32_UBYTE0            0x00000011
#define SQ_V_CVT_F32_UBYTE1            0x00000012
#define SQ_V_CVT_F32_UBYTE2            0x00000013
#define SQ_V_CVT_F32_UBYTE3            0x00000014
#define SQ_V_CVT_U32_F64               0x00000015
#define SQ_V_CVT_F64_U32               0x00000016
#define SQ_V_TRUNC_F64                 0x00000017
#define SQ_V_CEIL_F64                  0x00000018
#define SQ_V_RNDNE_F64                 0x00000019
#define SQ_V_FLOOR_F64                 0x0000001a
#define SQ_V_FRACT_F32                 0x0000001b
#define SQ_V_TRUNC_F32                 0x0000001c
#define SQ_V_CEIL_F32                  0x0000001d
#define SQ_V_RNDNE_F32                 0x0000001e
#define SQ_V_FLOOR_F32                 0x0000001f
#define SQ_V_EXP_F32                   0x00000020
#define SQ_V_LOG_F32                   0x00000021
#define SQ_V_RCP_F32                   0x00000022
#define SQ_V_RCP_IFLAG_F32             0x00000023
#define SQ_V_RSQ_F32                   0x00000024
#define SQ_V_RCP_F64                   0x00000025
#define SQ_V_RSQ_F64                   0x00000026
#define SQ_V_SQRT_F32                  0x00000027
#define SQ_V_SQRT_F64                  0x00000028
#define SQ_V_SIN_F32                   0x00000029
#define SQ_V_COS_F32                   0x0000002a
#define SQ_V_NOT_B32                   0x0000002b
#define SQ_V_BFREV_B32                 0x0000002c
#define SQ_V_FFBH_U32                  0x0000002d
#define SQ_V_FFBL_B32                  0x0000002e
#define SQ_V_FFBH_I32                  0x0000002f
#define SQ_V_FREXP_EXP_I32_F64         0x00000030
#define SQ_V_FREXP_MANT_F64            0x00000031
#define SQ_V_FRACT_F64                 0x00000032
#define SQ_V_FREXP_EXP_I32_F32         0x00000033
#define SQ_V_FREXP_MANT_F32            0x00000034
#define SQ_V_CLREXCP                   0x00000035
#define SQ_V_MOV_PRSV_B32              0x00000036
#define SQ_V_CVT_F16_U16               0x00000039
#define SQ_V_CVT_F16_I16               0x0000003a
#define SQ_V_CVT_U16_F16               0x0000003b
#define SQ_V_CVT_I16_F16               0x0000003c
#define SQ_V_RCP_F16                   0x0000003d
#define SQ_V_SQRT_F16                  0x0000003e
#define SQ_V_RSQ_F16                   0x0000003f
#define SQ_V_LOG_F16                   0x00000040
#define SQ_V_EXP_F16                   0x00000041
#define SQ_V_FREXP_MANT_F16            0x00000042
#define SQ_V_FREXP_EXP_I16_F16         0x00000043
#define SQ_V_FLOOR_F16                 0x00000044
#define SQ_V_CEIL_F16                  0x00000045
#define SQ_V_TRUNC_F16                 0x00000046
#define SQ_V_RNDNE_F16                 0x00000047
#define SQ_V_FRACT_F16                 0x00000048
#define SQ_V_SIN_F16                   0x00000049
#define SQ_V_COS_F16                   0x0000004a
#define SQ_V_EXP_LEGACY_F32            0x0000004b
#define SQ_V_LOG_LEGACY_F32            0x0000004c
#define SQ_V_CVT_NORM_I16_F16          0x0000004d
#define SQ_V_CVT_NORM_U16_F16          0x0000004e
#define SQ_V_SAT_PK_U8_I16             0x0000004f
#define SQ_V_WRITELANE_IMM32           0x00000050
#define SQ_V_SWAP_B32                  0x00000051

/*
 * VALUE_SQ_OP_FLAT value
 */

#define SQ_FLAT_LOAD_UBYTE             0x00000010
#define SQ_FLAT_LOAD_SBYTE             0x00000011
#define SQ_FLAT_LOAD_USHORT            0x00000012
#define SQ_FLAT_LOAD_SSHORT            0x00000013
#define SQ_FLAT_LOAD_DWORD             0x00000014
#define SQ_FLAT_LOAD_DWORDX2           0x00000015
#define SQ_FLAT_LOAD_DWORDX3           0x00000016
#define SQ_FLAT_LOAD_DWORDX4           0x00000017
#define SQ_FLAT_STORE_BYTE             0x00000018
#define SQ_FLAT_STORE_SHORT            0x0000001a
#define SQ_FLAT_STORE_DWORD            0x0000001c
#define SQ_FLAT_STORE_DWORDX2          0x0000001d
#define SQ_FLAT_STORE_DWORDX3          0x0000001e
#define SQ_FLAT_STORE_DWORDX4          0x0000001f
#define SQ_FLAT_ATOMIC_SWAP            0x00000040
#define SQ_FLAT_ATOMIC_CMPSWAP         0x00000041
#define SQ_FLAT_ATOMIC_ADD             0x00000042
#define SQ_FLAT_ATOMIC_SUB             0x00000043
#define SQ_FLAT_ATOMIC_SMIN            0x00000044
#define SQ_FLAT_ATOMIC_UMIN            0x00000045
#define SQ_FLAT_ATOMIC_SMAX            0x00000046
#define SQ_FLAT_ATOMIC_UMAX            0x00000047
#define SQ_FLAT_ATOMIC_AND             0x00000048
#define SQ_FLAT_ATOMIC_OR              0x00000049
#define SQ_FLAT_ATOMIC_XOR             0x0000004a
#define SQ_FLAT_ATOMIC_INC             0x0000004b
#define SQ_FLAT_ATOMIC_DEC             0x0000004c
#define SQ_FLAT_ATOMIC_SWAP_X2         0x00000060
#define SQ_FLAT_ATOMIC_CMPSWAP_X2      0x00000061
#define SQ_FLAT_ATOMIC_ADD_X2          0x00000062
#define SQ_FLAT_ATOMIC_SUB_X2          0x00000063
#define SQ_FLAT_ATOMIC_SMIN_X2         0x00000064
#define SQ_FLAT_ATOMIC_UMIN_X2         0x00000065
#define SQ_FLAT_ATOMIC_SMAX_X2         0x00000066
#define SQ_FLAT_ATOMIC_UMAX_X2         0x00000067
#define SQ_FLAT_ATOMIC_AND_X2          0x00000068
#define SQ_FLAT_ATOMIC_OR_X2           0x00000069
#define SQ_FLAT_ATOMIC_XOR_X2          0x0000006a
#define SQ_FLAT_ATOMIC_INC_X2          0x0000006b
#define SQ_FLAT_ATOMIC_DEC_X2          0x0000006c

/*
 * VALUE_SQ_OP_DS value
 */

#define SQ_DS_ADD_U32                  0x00000000
#define SQ_DS_SUB_U32                  0x00000001
#define SQ_DS_RSUB_U32                 0x00000002
#define SQ_DS_INC_U32                  0x00000003
#define SQ_DS_DEC_U32                  0x00000004
#define SQ_DS_MIN_I32                  0x00000005
#define SQ_DS_MAX_I32                  0x00000006
#define SQ_DS_MIN_U32                  0x00000007
#define SQ_DS_MAX_U32                  0x00000008
#define SQ_DS_AND_B32                  0x00000009
#define SQ_DS_OR_B32                   0x0000000a
#define SQ_DS_XOR_B32                  0x0000000b
#define SQ_DS_MSKOR_B32                0x0000000c
#define SQ_DS_WRITE_B32                0x0000000d
#define SQ_DS_WRITE2_B32               0x0000000e
#define SQ_DS_WRITE2ST64_B32           0x0000000f
#define SQ_DS_CMPST_B32                0x00000010
#define SQ_DS_CMPST_F32                0x00000011
#define SQ_DS_MIN_F32                  0x00000012
#define SQ_DS_MAX_F32                  0x00000013
#define SQ_DS_NOP                      0x00000014
#define SQ_DS_ADD_F32                  0x00000015
#define SQ_DS_WRITE_ADDTID_B32         0x0000001d
#define SQ_DS_WRITE_B8                 0x0000001e
#define SQ_DS_WRITE_B16                0x0000001f
#define SQ_DS_ADD_RTN_U32              0x00000020
#define SQ_DS_SUB_RTN_U32              0x00000021
#define SQ_DS_RSUB_RTN_U32             0x00000022
#define SQ_DS_INC_RTN_U32              0x00000023
#define SQ_DS_DEC_RTN_U32              0x00000024
#define SQ_DS_MIN_RTN_I32              0x00000025
#define SQ_DS_MAX_RTN_I32              0x00000026
#define SQ_DS_MIN_RTN_U32              0x00000027
#define SQ_DS_MAX_RTN_U32              0x00000028
#define SQ_DS_AND_RTN_B32              0x00000029
#define SQ_DS_OR_RTN_B32               0x0000002a
#define SQ_DS_XOR_RTN_B32              0x0000002b
#define SQ_DS_MSKOR_RTN_B32            0x0000002c
#define SQ_DS_WRXCHG_RTN_B32           0x0000002d
#define SQ_DS_WRXCHG2_RTN_B32          0x0000002e
#define SQ_DS_WRXCHG2ST64_RTN_B32      0x0000002f
#define SQ_DS_CMPST_RTN_B32            0x00000030
#define SQ_DS_CMPST_RTN_F32            0x00000031
#define SQ_DS_MIN_RTN_F32              0x00000032
#define SQ_DS_MAX_RTN_F32              0x00000033
#define SQ_DS_WRAP_RTN_B32             0x00000034
#define SQ_DS_ADD_RTN_F32              0x00000035
#define SQ_DS_READ_B32                 0x00000036
#define SQ_DS_READ2_B32                0x00000037
#define SQ_DS_READ2ST64_B32            0x00000038
#define SQ_DS_READ_I8                  0x00000039
#define SQ_DS_READ_U8                  0x0000003a
#define SQ_DS_READ_I16                 0x0000003b
#define SQ_DS_READ_U16                 0x0000003c
#define SQ_DS_SWIZZLE_B32              0x0000003d
#define SQ_DS_PERMUTE_B32              0x0000003e
#define SQ_DS_BPERMUTE_B32             0x0000003f
#define SQ_DS_ADD_U64                  0x00000040
#define SQ_DS_SUB_U64                  0x00000041
#define SQ_DS_RSUB_U64                 0x00000042
#define SQ_DS_INC_U64                  0x00000043
#define SQ_DS_DEC_U64                  0x00000044
#define SQ_DS_MIN_I64                  0x00000045
#define SQ_DS_MAX_I64                  0x00000046
#define SQ_DS_MIN_U64                  0x00000047
#define SQ_DS_MAX_U64                  0x00000048
#define SQ_DS_AND_B64                  0x00000049
#define SQ_DS_OR_B64                   0x0000004a
#define SQ_DS_XOR_B64                  0x0000004b
#define SQ_DS_MSKOR_B64                0x0000004c
#define SQ_DS_WRITE_B64                0x0000004d
#define SQ_DS_WRITE2_B64               0x0000004e
#define SQ_DS_WRITE2ST64_B64           0x0000004f
#define SQ_DS_CMPST_B64                0x00000050
#define SQ_DS_CMPST_F64                0x00000051
#define SQ_DS_MIN_F64                  0x00000052
#define SQ_DS_MAX_F64                  0x00000053
#define SQ_DS_ADD_RTN_U64              0x00000060
#define SQ_DS_SUB_RTN_U64              0x00000061
#define SQ_DS_RSUB_RTN_U64             0x00000062
#define SQ_DS_INC_RTN_U64              0x00000063
#define SQ_DS_DEC_RTN_U64              0x00000064
#define SQ_DS_MIN_RTN_I64              0x00000065
#define SQ_DS_MAX_RTN_I64              0x00000066
#define SQ_DS_MIN_RTN_U64              0x00000067
#define SQ_DS_MAX_RTN_U64              0x00000068
#define SQ_DS_AND_RTN_B64              0x00000069
#define SQ_DS_OR_RTN_B64               0x0000006a
#define SQ_DS_XOR_RTN_B64              0x0000006b
#define SQ_DS_MSKOR_RTN_B64            0x0000006c
#define SQ_DS_WRXCHG_RTN_B64           0x0000006d
#define SQ_DS_WRXCHG2_RTN_B64          0x0000006e
#define SQ_DS_WRXCHG2ST64_RTN_B64      0x0000006f
#define SQ_DS_CMPST_RTN_B64            0x00000070
#define SQ_DS_CMPST_RTN_F64            0x00000071
#define SQ_DS_MIN_RTN_F64              0x00000072
#define SQ_DS_MAX_RTN_F64              0x00000073
#define SQ_DS_READ_B64                 0x00000076
#define SQ_DS_READ2_B64                0x00000077
#define SQ_DS_READ2ST64_B64            0x00000078
#define SQ_DS_CONDXCHG32_RTN_B64       0x0000007e
#define SQ_DS_ADD_SRC2_U32             0x00000080
#define SQ_DS_SUB_SRC2_U32             0x00000081
#define SQ_DS_RSUB_SRC2_U32            0x00000082
#define SQ_DS_INC_SRC2_U32             0x00000083
#define SQ_DS_DEC_SRC2_U32             0x00000084
#define SQ_DS_MIN_SRC2_I32             0x00000085
#define SQ_DS_MAX_SRC2_I32             0x00000086
#define SQ_DS_MIN_SRC2_U32             0x00000087
#define SQ_DS_MAX_SRC2_U32             0x00000088
#define SQ_DS_AND_SRC2_B32             0x00000089
#define SQ_DS_OR_SRC2_B32              0x0000008a
#define SQ_DS_XOR_SRC2_B32             0x0000008b
#define SQ_DS_WRITE_SRC2_B32           0x0000008d
#define SQ_DS_MIN_SRC2_F32             0x00000092
#define SQ_DS_MAX_SRC2_F32             0x00000093
#define SQ_DS_ADD_SRC2_F32             0x00000095
#define SQ_DS_GWS_SEMA_RELEASE_ALL     0x00000098
#define SQ_DS_GWS_INIT                 0x00000099
#define SQ_DS_GWS_SEMA_V               0x0000009a
#define SQ_DS_GWS_SEMA_BR              0x0000009b
#define SQ_DS_GWS_SEMA_P               0x0000009c
#define SQ_DS_GWS_BARRIER              0x0000009d
#define SQ_DS_READ_ADDTID_B32          0x000000b6
#define SQ_DS_CONSUME                  0x000000bd
#define SQ_DS_APPEND                   0x000000be
#define SQ_DS_ORDERED_COUNT            0x000000bf
#define SQ_DS_ADD_SRC2_U64             0x000000c0
#define SQ_DS_SUB_SRC2_U64             0x000000c1
#define SQ_DS_RSUB_SRC2_U64            0x000000c2
#define SQ_DS_INC_SRC2_U64             0x000000c3
#define SQ_DS_DEC_SRC2_U64             0x000000c4
#define SQ_DS_MIN_SRC2_I64             0x000000c5
#define SQ_DS_MAX_SRC2_I64             0x000000c6
#define SQ_DS_MIN_SRC2_U64             0x000000c7
#define SQ_DS_MAX_SRC2_U64             0x000000c8
#define SQ_DS_AND_SRC2_B64             0x000000c9
#define SQ_DS_OR_SRC2_B64              0x000000ca
#define SQ_DS_XOR_SRC2_B64             0x000000cb
#define SQ_DS_WRITE_SRC2_B64           0x000000cd
#define SQ_DS_MIN_SRC2_F64             0x000000d2
#define SQ_DS_MAX_SRC2_F64             0x000000d3
#define SQ_DS_WRITE_B96                0x000000de
#define SQ_DS_WRITE_B128               0x000000df
#define SQ_DS_CONDXCHG32_RTN_B128      0x000000fd
#define SQ_DS_READ_B96                 0x000000fe
#define SQ_DS_READ_B128                0x000000ff

/*
 * VALUE_SQ_OP_SMEM value
 */

#define SQ_S_LOAD_DWORD                0x00000000
#define SQ_S_LOAD_DWORDX2              0x00000001
#define SQ_S_LOAD_DWORDX4              0x00000002
#define SQ_S_LOAD_DWORDX8              0x00000003
#define SQ_S_LOAD_DWORDX16             0x00000004
#define SQ_S_SCRATCH_LOAD_DWORD        0x00000005
#define SQ_S_SCRATCH_LOAD_DWORDX2      0x00000006
#define SQ_S_SCRATCH_LOAD_DWORDX4      0x00000007
#define SQ_S_BUFFER_LOAD_DWORD         0x00000008
#define SQ_S_BUFFER_LOAD_DWORDX2       0x00000009
#define SQ_S_BUFFER_LOAD_DWORDX4       0x0000000a
#define SQ_S_BUFFER_LOAD_DWORDX8       0x0000000b
#define SQ_S_BUFFER_LOAD_DWORDX16      0x0000000c
#define SQ_S_STORE_DWORD               0x00000010
#define SQ_S_STORE_DWORDX2             0x00000011
#define SQ_S_STORE_DWORDX4             0x00000012
#define SQ_S_SCRATCH_STORE_DWORD       0x00000015
#define SQ_S_SCRATCH_STORE_DWORDX2     0x00000016
#define SQ_S_SCRATCH_STORE_DWORDX4     0x00000017
#define SQ_S_BUFFER_STORE_DWORD        0x00000018
#define SQ_S_BUFFER_STORE_DWORDX2      0x00000019
#define SQ_S_BUFFER_STORE_DWORDX4      0x0000001a
#define SQ_S_DCACHE_INV                0x00000020
#define SQ_S_DCACHE_WB                 0x00000021
#define SQ_S_DCACHE_INV_VOL            0x00000022
#define SQ_S_DCACHE_WB_VOL             0x00000023
#define SQ_S_MEMTIME                   0x00000024
#define SQ_S_MEMREALTIME               0x00000025
#define SQ_S_ATC_PROBE                 0x00000026
#define SQ_S_ATC_PROBE_BUFFER          0x00000027
#define SQ_S_BUFFER_ATOMIC_SWAP        0x00000040
#define SQ_S_BUFFER_ATOMIC_CMPSWAP     0x00000041
#define SQ_S_BUFFER_ATOMIC_ADD         0x00000042
#define SQ_S_BUFFER_ATOMIC_SUB         0x00000043
#define SQ_S_BUFFER_ATOMIC_SMIN        0x00000044
#define SQ_S_BUFFER_ATOMIC_UMIN        0x00000045
#define SQ_S_BUFFER_ATOMIC_SMAX        0x00000046
#define SQ_S_BUFFER_ATOMIC_UMAX        0x00000047
#define SQ_S_BUFFER_ATOMIC_AND         0x00000048
#define SQ_S_BUFFER_ATOMIC_OR          0x00000049
#define SQ_S_BUFFER_ATOMIC_XOR         0x0000004a
#define SQ_S_BUFFER_ATOMIC_INC         0x0000004b
#define SQ_S_BUFFER_ATOMIC_DEC         0x0000004c
#define SQ_S_BUFFER_ATOMIC_SWAP_X2     0x00000060
#define SQ_S_BUFFER_ATOMIC_CMPSWAP_X2  0x00000061
#define SQ_S_BUFFER_ATOMIC_ADD_X2      0x00000062
#define SQ_S_BUFFER_ATOMIC_SUB_X2      0x00000063
#define SQ_S_BUFFER_ATOMIC_SMIN_X2     0x00000064
#define SQ_S_BUFFER_ATOMIC_UMIN_X2     0x00000065
#define SQ_S_BUFFER_ATOMIC_SMAX_X2     0x00000066
#define SQ_S_BUFFER_ATOMIC_UMAX_X2     0x00000067
#define SQ_S_BUFFER_ATOMIC_AND_X2      0x00000068
#define SQ_S_BUFFER_ATOMIC_OR_X2       0x00000069
#define SQ_S_BUFFER_ATOMIC_XOR_X2      0x0000006a
#define SQ_S_BUFFER_ATOMIC_INC_X2      0x0000006b
#define SQ_S_BUFFER_ATOMIC_DEC_X2      0x0000006c
#define SQ_S_ATOMIC_SWAP               0x00000080
#define SQ_S_ATOMIC_CMPSWAP            0x00000081
#define SQ_S_ATOMIC_ADD                0x00000082
#define SQ_S_ATOMIC_SUB                0x00000083
#define SQ_S_ATOMIC_SMIN               0x00000084
#define SQ_S_ATOMIC_UMIN               0x00000085
#define SQ_S_ATOMIC_SMAX               0x00000086
#define SQ_S_ATOMIC_UMAX               0x00000087
#define SQ_S_ATOMIC_AND                0x00000088
#define SQ_S_ATOMIC_OR                 0x00000089
#define SQ_S_ATOMIC_XOR                0x0000008a
#define SQ_S_ATOMIC_INC                0x0000008b
#define SQ_S_ATOMIC_DEC                0x0000008c
#define SQ_S_ATOMIC_SWAP_X2            0x000000a0
#define SQ_S_ATOMIC_CMPSWAP_X2         0x000000a1
#define SQ_S_ATOMIC_ADD_X2             0x000000a2
#define SQ_S_ATOMIC_SUB_X2             0x000000a3
#define SQ_S_ATOMIC_SMIN_X2            0x000000a4
#define SQ_S_ATOMIC_UMIN_X2            0x000000a5
#define SQ_S_ATOMIC_SMAX_X2            0x000000a6
#define SQ_S_ATOMIC_UMAX_X2            0x000000a7
#define SQ_S_ATOMIC_AND_X2             0x000000a8
#define SQ_S_ATOMIC_OR_X2              0x000000a9
#define SQ_S_ATOMIC_XOR_X2             0x000000aa
#define SQ_S_ATOMIC_INC_X2             0x000000ab
#define SQ_S_ATOMIC_DEC_X2             0x000000ac

/*
 * VALUE_SQ_OP_VOP2 value
 */

#define SQ_V_CNDMASK_B32               0x00000000
#define SQ_V_ADD_F32                   0x00000001
#define SQ_V_SUB_F32                   0x00000002
#define SQ_V_SUBREV_F32                0x00000003
#define SQ_V_MUL_LEGACY_F32            0x00000004
#define SQ_V_MUL_F32                   0x00000005
#define SQ_V_MUL_I32_I24               0x00000006
#define SQ_V_MUL_HI_I32_I24            0x00000007
#define SQ_V_MUL_U32_U24               0x00000008
#define SQ_V_MUL_HI_U32_U24            0x00000009
#define SQ_V_MIN_F32                   0x0000000a
#define SQ_V_MAX_F32                   0x0000000b
#define SQ_V_MIN_I32                   0x0000000c
#define SQ_V_MAX_I32                   0x0000000d
#define SQ_V_MIN_U32                   0x0000000e
#define SQ_V_MAX_U32                   0x0000000f
#define SQ_V_LSHRREV_B32               0x00000010
#define SQ_V_ASHRREV_I32               0x00000011
#define SQ_V_LSHLREV_B32               0x00000012
#define SQ_V_AND_B32                   0x00000013
#define SQ_V_OR_B32                    0x00000014
#define SQ_V_XOR_B32                   0x00000015
#define SQ_V_MAC_F32                   0x00000016
#define SQ_V_MADMK_F32                 0x00000017
#define SQ_V_MADAK_F32                 0x00000018
#define SQ_V_ADD_CO_U32                0x00000019
#define SQ_V_SUB_CO_U32                0x0000001a
#define SQ_V_SUBREV_CO_U32             0x0000001b
#define SQ_V_ADDC_CO_U32               0x0000001c
#define SQ_V_SUBB_CO_U32               0x0000001d
#define SQ_V_SUBBREV_CO_U32            0x0000001e
#define SQ_V_ADD_F16                   0x0000001f
#define SQ_V_SUB_F16                   0x00000020
#define SQ_V_SUBREV_F16                0x00000021
#define SQ_V_MUL_F16                   0x00000022
#define SQ_V_MAC_F16                   0x00000023
#define SQ_V_MADMK_F16                 0x00000024
#define SQ_V_MADAK_F16                 0x00000025
#define SQ_V_ADD_U16                   0x00000026
#define SQ_V_SUB_U16                   0x00000027
#define SQ_V_SUBREV_U16                0x00000028
#define SQ_V_MUL_LO_U16                0x00000029
#define SQ_V_LSHLREV_B16               0x0000002a
#define SQ_V_LSHRREV_B16               0x0000002b
#define SQ_V_ASHRREV_I16               0x0000002c
#define SQ_V_MAX_F16                   0x0000002d
#define SQ_V_MIN_F16                   0x0000002e
#define SQ_V_MAX_U16                   0x0000002f
#define SQ_V_MAX_I16                   0x00000030
#define SQ_V_MIN_U16                   0x00000031
#define SQ_V_MIN_I16                   0x00000032
#define SQ_V_LDEXP_F16                 0x00000033
#define SQ_V_ADD_U32                   0x00000034
#define SQ_V_SUB_U32                   0x00000035
#define SQ_V_SUBREV_U32                0x00000036

/*
 * VALUE_SQ_SYSMSG_OP value
 */

#define SQ_SYSMSG_OP_ECC_ERR_INTERRUPT 0x00000001
#define SQ_SYSMSG_OP_REG_RD            0x00000002
#define SQ_SYSMSG_OP_HOST_TRAP_ACK     0x00000003
#define SQ_SYSMSG_OP_TTRACE_PC         0x00000004
#define SQ_SYSMSG_OP_ILLEGAL_INST_INTERRUPT 0x00000005
#define SQ_SYSMSG_OP_MEMVIOL_INTERRUPT 0x00000006

/*
 * VALUE_SQ_SSRC_SPECIAL_VCCZ value
 */

#define SQ_SRC_VCCZ                    0x000000fb

/*
 * VALUE_SQ_CHAN value
 */

#define SQ_CHAN_X                      0x00000000
#define SQ_CHAN_Y                      0x00000001
#define SQ_CHAN_Z                      0x00000002
#define SQ_CHAN_W                      0x00000003

/*
 * VALUE_SQ_OP_SOPK value
 */

#define SQ_S_MOVK_I32                  0x00000000
#define SQ_S_CMOVK_I32                 0x00000001
#define SQ_S_CMPK_EQ_I32               0x00000002
#define SQ_S_CMPK_LG_I32               0x00000003
#define SQ_S_CMPK_GT_I32               0x00000004
#define SQ_S_CMPK_GE_I32               0x00000005
#define SQ_S_CMPK_LT_I32               0x00000006
#define SQ_S_CMPK_LE_I32               0x00000007
#define SQ_S_CMPK_EQ_U32               0x00000008
#define SQ_S_CMPK_LG_U32               0x00000009
#define SQ_S_CMPK_GT_U32               0x0000000a
#define SQ_S_CMPK_GE_U32               0x0000000b
#define SQ_S_CMPK_LT_U32               0x0000000c
#define SQ_S_CMPK_LE_U32               0x0000000d
#define SQ_S_ADDK_I32                  0x0000000e
#define SQ_S_MULK_I32                  0x0000000f
#define SQ_S_CBRANCH_I_FORK            0x00000010
#define SQ_S_GETREG_B32                0x00000011
#define SQ_S_SETREG_B32                0x00000012
#define SQ_S_GETREG_REGRD_B32          0x00000013
#define SQ_S_SETREG_IMM32_B32          0x00000014
#define SQ_S_CALL_B64                  0x00000015

/*
 * VALUE_SQ_DPP_CTRL_L_1_15 value
 */

#define SQ_L1                          0x00000001
#define SQ_L2                          0x00000002
#define SQ_L3                          0x00000003
#define SQ_L4                          0x00000004
#define SQ_L5                          0x00000005
#define SQ_L6                          0x00000006
#define SQ_L7                          0x00000007
#define SQ_L8                          0x00000008
#define SQ_L9                          0x00000009
#define SQ_L10                         0x0000000a
#define SQ_L11                         0x0000000b
#define SQ_L12                         0x0000000c
#define SQ_L13                         0x0000000d
#define SQ_L14                         0x0000000e
#define SQ_L15                         0x0000000f

/*
 * VALUE_SQ_SGPR value
 */

#define SQ_SGPR0                       0x00000000

/*
 * VALUE_SQ_OP_VOP3P value
 */

#define SQ_V_PK_MAD_I16                0x00000000
#define SQ_V_PK_MUL_LO_U16             0x00000001
#define SQ_V_PK_ADD_I16                0x00000002
#define SQ_V_PK_SUB_I16                0x00000003
#define SQ_V_PK_LSHLREV_B16            0x00000004
#define SQ_V_PK_LSHRREV_B16            0x00000005
#define SQ_V_PK_ASHRREV_I16            0x00000006
#define SQ_V_PK_MAX_I16                0x00000007
#define SQ_V_PK_MIN_I16                0x00000008
#define SQ_V_PK_MAD_U16                0x00000009
#define SQ_V_PK_ADD_U16                0x0000000a
#define SQ_V_PK_SUB_U16                0x0000000b
#define SQ_V_PK_MAX_U16                0x0000000c
#define SQ_V_PK_MIN_U16                0x0000000d
#define SQ_V_PK_MAD_F16                0x0000000e
#define SQ_V_PK_ADD_F16                0x0000000f
#define SQ_V_PK_MUL_F16                0x00000010
#define SQ_V_PK_MIN_F16                0x00000011
#define SQ_V_PK_MAX_F16                0x00000012
#define SQ_V_MAD_MIX_F32               0x00000020
#define SQ_V_MAD_MIXLO_F16             0x00000021
#define SQ_V_MAD_MIXHI_F16             0x00000022

/*
 * VALUE_SQ_OP_VINTRP value
 */

#define SQ_V_INTERP_P1_F32             0x00000000
#define SQ_V_INTERP_P2_F32             0x00000001
#define SQ_V_INTERP_MOV_F32            0x00000002

/*
 * VALUE_SQ_DPP_CTRL_R_1_15 value
 */

#define SQ_R1                          0x00000001
#define SQ_R2                          0x00000002
#define SQ_R3                          0x00000003
#define SQ_R4                          0x00000004
#define SQ_R5                          0x00000005
#define SQ_R6                          0x00000006
#define SQ_R7                          0x00000007
#define SQ_R8                          0x00000008
#define SQ_R9                          0x00000009
#define SQ_R10                         0x0000000a
#define SQ_R11                         0x0000000b
#define SQ_R12                         0x0000000c
#define SQ_R13                         0x0000000d
#define SQ_R14                         0x0000000e
#define SQ_R15                         0x0000000f

/*
 * VALUE_SQ_OP_SOP2 value
 */

#define SQ_S_ADD_U32                   0x00000000
#define SQ_S_SUB_U32                   0x00000001
#define SQ_S_ADD_I32                   0x00000002
#define SQ_S_SUB_I32                   0x00000003
#define SQ_S_ADDC_U32                  0x00000004
#define SQ_S_SUBB_U32                  0x00000005
#define SQ_S_MIN_I32                   0x00000006
#define SQ_S_MIN_U32                   0x00000007
#define SQ_S_MAX_I32                   0x00000008
#define SQ_S_MAX_U32                   0x00000009
#define SQ_S_CSELECT_B32               0x0000000a
#define SQ_S_CSELECT_B64               0x0000000b
#define SQ_S_AND_B32                   0x0000000c
#define SQ_S_AND_B64                   0x0000000d
#define SQ_S_OR_B32                    0x0000000e
#define SQ_S_OR_B64                    0x0000000f
#define SQ_S_XOR_B32                   0x00000010
#define SQ_S_XOR_B64                   0x00000011
#define SQ_S_ANDN2_B32                 0x00000012
#define SQ_S_ANDN2_B64                 0x00000013
#define SQ_S_ORN2_B32                  0x00000014
#define SQ_S_ORN2_B64                  0x00000015
#define SQ_S_NAND_B32                  0x00000016
#define SQ_S_NAND_B64                  0x00000017
#define SQ_S_NOR_B32                   0x00000018
#define SQ_S_NOR_B64                   0x00000019
#define SQ_S_XNOR_B32                  0x0000001a
#define SQ_S_XNOR_B64                  0x0000001b
#define SQ_S_LSHL_B32                  0x0000001c
#define SQ_S_LSHL_B64                  0x0000001d
#define SQ_S_LSHR_B32                  0x0000001e
#define SQ_S_LSHR_B64                  0x0000001f
#define SQ_S_ASHR_I32                  0x00000020
#define SQ_S_ASHR_I64                  0x00000021
#define SQ_S_BFM_B32                   0x00000022
#define SQ_S_BFM_B64                   0x00000023
#define SQ_S_MUL_I32                   0x00000024
#define SQ_S_BFE_U32                   0x00000025
#define SQ_S_BFE_I32                   0x00000026
#define SQ_S_BFE_U64                   0x00000027
#define SQ_S_BFE_I64                   0x00000028
#define SQ_S_CBRANCH_G_FORK            0x00000029
#define SQ_S_ABSDIFF_I32               0x0000002a
#define SQ_S_RFE_RESTORE_B64           0x0000002b
#define SQ_S_MUL_HI_U32                0x0000002c
#define SQ_S_MUL_HI_I32                0x0000002d
#define SQ_S_LSHL1_ADD_U32             0x0000002e
#define SQ_S_LSHL2_ADD_U32             0x0000002f
#define SQ_S_LSHL3_ADD_U32             0x00000030
#define SQ_S_LSHL4_ADD_U32             0x00000031
#define SQ_S_PACK_LL_B32_B16           0x00000032
#define SQ_S_PACK_LH_B32_B16           0x00000033
#define SQ_S_PACK_HH_B32_B16           0x00000034

/*
 * VALUE_SQ_SEG value
 */

#define SQ_FLAT                        0x00000000
#define SQ_SCRATCH                     0x00000001
#define SQ_GLOBAL                      0x00000002

/*
 * VALUE_SQ_SDST_EXEC value
 */

#define SQ_EXEC_LO                     0x0000007e
#define SQ_EXEC_HI                     0x0000007f

/*
 * VALUE_SQ_SSRC_SPECIAL_NOLIT value
 */

#define SQ_SRC_64_INT                  0x000000c0
#define SQ_SRC_M_1_INT                 0x000000c1
#define SQ_SRC_M_2_INT                 0x000000c2
#define SQ_SRC_M_3_INT                 0x000000c3
#define SQ_SRC_M_4_INT                 0x000000c4
#define SQ_SRC_M_5_INT                 0x000000c5
#define SQ_SRC_M_6_INT                 0x000000c6
#define SQ_SRC_M_7_INT                 0x000000c7
#define SQ_SRC_M_8_INT                 0x000000c8
#define SQ_SRC_M_9_INT                 0x000000c9
#define SQ_SRC_M_10_INT                0x000000ca
#define SQ_SRC_M_11_INT                0x000000cb
#define SQ_SRC_M_12_INT                0x000000cc
#define SQ_SRC_M_13_INT                0x000000cd
#define SQ_SRC_M_14_INT                0x000000ce
#define SQ_SRC_M_15_INT                0x000000cf
#define SQ_SRC_M_16_INT                0x000000d0
#define SQ_SRC_0_5                     0x000000f0
#define SQ_SRC_M_0_5                   0x000000f1
#define SQ_SRC_1                       0x000000f2
#define SQ_SRC_M_1                     0x000000f3
#define SQ_SRC_2                       0x000000f4
#define SQ_SRC_M_2                     0x000000f5
#define SQ_SRC_4                       0x000000f6
#define SQ_SRC_M_4                     0x000000f7
#define SQ_SRC_INV_2PI                 0x000000f8

/*
 * VALUE_SQ_VCC_LOHI value
 */

#define SQ_VCC_LO                      0x0000006a
#define SQ_VCC_HI                      0x0000006b

/*
 * VALUE_SQ_TGT value
 */

#define SQ_EXP_MRT0                    0x00000000
#define SQ_EXP_MRTZ                    0x00000008
#define SQ_EXP_NULL                    0x00000009
#define SQ_EXP_POS0                    0x0000000c
#define SQ_EXP_PARAM0                  0x00000020

/*
 * VALUE_SQ_OP_SOPP value
 */

#define SQ_S_NOP                       0x00000000
#define SQ_S_ENDPGM                    0x00000001
#define SQ_S_BRANCH                    0x00000002
#define SQ_S_WAKEUP                    0x00000003
#define SQ_S_CBRANCH_SCC0              0x00000004
#define SQ_S_CBRANCH_SCC1              0x00000005
#define SQ_S_CBRANCH_VCCZ              0x00000006
#define SQ_S_CBRANCH_VCCNZ             0x00000007
#define SQ_S_CBRANCH_EXECZ             0x00000008
#define SQ_S_CBRANCH_EXECNZ            0x00000009
#define SQ_S_BARRIER                   0x0000000a
#define SQ_S_SETKILL                   0x0000000b
#define SQ_S_WAITCNT                   0x0000000c
#define SQ_S_SETHALT                   0x0000000d
#define SQ_S_SLEEP                     0x0000000e
#define SQ_S_SETPRIO                   0x0000000f
#define SQ_S_SENDMSG                   0x00000010
#define SQ_S_SENDMSGHALT               0x00000011
#define SQ_S_TRAP                      0x00000012
#define SQ_S_ICACHE_INV                0x00000013
#define SQ_S_INCPERFLEVEL              0x00000014
#define SQ_S_DECPERFLEVEL              0x00000015
#define SQ_S_TTRACEDATA                0x00000016
#define SQ_S_CBRANCH_CDBGSYS           0x00000017
#define SQ_S_CBRANCH_CDBGUSER          0x00000018
#define SQ_S_CBRANCH_CDBGSYS_OR_USER   0x00000019
#define SQ_S_CBRANCH_CDBGSYS_AND_USER  0x0000001a
#define SQ_S_ENDPGM_SAVED              0x0000001b
#define SQ_S_SET_GPR_IDX_OFF           0x0000001c
#define SQ_S_SET_GPR_IDX_MODE          0x0000001d
#define SQ_S_ENDPGM_ORDERED_PS_DONE    0x0000001e

/*
 * VALUE_SQ_OP_EXP value
 */

#define SQ_EXP                         0x00000000

/*
 * VALUE_SQ_SSRC_SPECIAL_POPS_EXITING_WAVE_ID value
 */

#define SQ_SRC_POPS_EXITING_WAVE_ID    0x000000ef

/*
 * VALUE_SQ_XNACK_MASK_LOHI value
 */

#define SQ_XNACK_MASK_LO               0x00000068
#define SQ_XNACK_MASK_HI               0x00000069

/*
 * VALUE_SQ_OMOD value
 */

#define SQ_OMOD_OFF                    0x00000000
#define SQ_OMOD_M2                     0x00000001
#define SQ_OMOD_M4                     0x00000002
#define SQ_OMOD_D2                     0x00000003

/*
 * VALUE_SQ_SSRC_SPECIAL_EXECZ value
 */

#define SQ_SRC_EXECZ                   0x000000fc

/*
 * VALUE_SQ_COMPI value
 */

#define SQ_F                           0x00000000
#define SQ_LT                          0x00000001
#define SQ_EQ                          0x00000002
#define SQ_LE                          0x00000003
#define SQ_GT                          0x00000004
#define SQ_NE                          0x00000005
#define SQ_GE                          0x00000006
#define SQ_T                           0x00000007

/*
 * VALUE_SQ_DPP_BOUND_CTRL value
 */

#define SQ_DPP_BOUND_OFF               0x00000000
#define SQ_DPP_BOUND_ZERO              0x00000001

/*
 * VALUE_SQ_SDST_M0 value
 */

#define SQ_M0                          0x0000007c

/*
 * VALUE_SQ_MSG value
 */

#define SQ_MSG_INTERRUPT               0x00000001
#define SQ_MSG_GS                      0x00000002
#define SQ_MSG_GS_DONE                 0x00000003
#define SQ_MSG_SAVEWAVE                0x00000004
#define SQ_MSG_STALL_WAVE_GEN          0x00000005
#define SQ_MSG_HALT_WAVES              0x00000006
#define SQ_MSG_ORDERED_PS_DONE         0x00000007
#define SQ_MSG_EARLY_PRIM_DEALLOC      0x00000008
#define SQ_MSG_GS_ALLOC_REQ            0x00000009
#define SQ_MSG_SYSMSG                  0x0000000f

/*
 * VALUE_SQ_PARAM value
 */

#define SQ_PARAM_P10                   0x00000000
#define SQ_PARAM_P20                   0x00000001
#define SQ_PARAM_P0                    0x00000002

/*
 * VALUE_SQ_OPU_VOP3 value
 */

#define SQ_V_OPC_OFFSET                0x00000000
#define SQ_V_OP2_OFFSET                0x00000100
#define SQ_V_OP1_OFFSET                0x00000140
#define SQ_V_INTRP_OFFSET              0x00000270
#define SQ_V_OP3P_OFFSET               0x00000380

/*
 * VALUE_SQ_SSRC_SPECIAL_SDWA value
 */

#define SQ_SRC_SDWA                    0x000000f9

/*
 * VALUE_SQ_SSRC_SPECIAL_APERTURE value
 */

#define SQ_SRC_SHARED_BASE             0x000000eb
#define SQ_SRC_SHARED_LIMIT            0x000000ec
#define SQ_SRC_PRIVATE_BASE            0x000000ed
#define SQ_SRC_PRIVATE_LIMIT           0x000000ee

/*
 * VALUE_SQ_COMPF value
 */

#define SQ_F                           0x00000000
#define SQ_LT                          0x00000001
#define SQ_EQ                          0x00000002
#define SQ_LE                          0x00000003
#define SQ_GT                          0x00000004
#define SQ_LG                          0x00000005
#define SQ_GE                          0x00000006
#define SQ_O                           0x00000007
#define SQ_U                           0x00000008
#define SQ_NGE                         0x00000009
#define SQ_NLG                         0x0000000a
#define SQ_NGT                         0x0000000b
#define SQ_NLE                         0x0000000c
#define SQ_NEQ                         0x0000000d
#define SQ_NLT                         0x0000000e
#define SQ_TRU                         0x0000000f

/*
 * VALUE_SQ_SDWA_UNUSED value
 */

#define SQ_SDWA_UNUSED_PAD             0x00000000
#define SQ_SDWA_UNUSED_SEXT            0x00000001
#define SQ_SDWA_UNUSED_PRESERVE        0x00000002

/*
 * VALUE_SQ_SSRC_SPECIAL_SCC value
 */

#define SQ_SRC_SCC                     0x000000fd

/*
 * VALUE_SQ_OP_VOPC value
 */

#define SQ_V_CMP_CLASS_F32             0x00000010
#define SQ_V_CMPX_CLASS_F32            0x00000011
#define SQ_V_CMP_CLASS_F64             0x00000012
#define SQ_V_CMPX_CLASS_F64            0x00000013
#define SQ_V_CMP_CLASS_F16             0x00000014
#define SQ_V_CMPX_CLASS_F16            0x00000015
#define SQ_V_CMP_F_F16                 0x00000020
#define SQ_V_CMP_LT_F16                0x00000021
#define SQ_V_CMP_EQ_F16                0x00000022
#define SQ_V_CMP_LE_F16                0x00000023
#define SQ_V_CMP_GT_F16                0x00000024
#define SQ_V_CMP_LG_F16                0x00000025
#define SQ_V_CMP_GE_F16                0x00000026
#define SQ_V_CMP_O_F16                 0x00000027
#define SQ_V_CMP_U_F16                 0x00000028
#define SQ_V_CMP_NGE_F16               0x00000029
#define SQ_V_CMP_NLG_F16               0x0000002a
#define SQ_V_CMP_NGT_F16               0x0000002b
#define SQ_V_CMP_NLE_F16               0x0000002c
#define SQ_V_CMP_NEQ_F16               0x0000002d
#define SQ_V_CMP_NLT_F16               0x0000002e
#define SQ_V_CMP_TRU_F16               0x0000002f
#define SQ_V_CMPX_F_F16                0x00000030
#define SQ_V_CMPX_LT_F16               0x00000031
#define SQ_V_CMPX_EQ_F16               0x00000032
#define SQ_V_CMPX_LE_F16               0x00000033
#define SQ_V_CMPX_GT_F16               0x00000034
#define SQ_V_CMPX_LG_F16               0x00000035
#define SQ_V_CMPX_GE_F16               0x00000036
#define SQ_V_CMPX_O_F16                0x00000037
#define SQ_V_CMPX_U_F16                0x00000038
#define SQ_V_CMPX_NGE_F16              0x00000039
#define SQ_V_CMPX_NLG_F16              0x0000003a
#define SQ_V_CMPX_NGT_F16              0x0000003b
#define SQ_V_CMPX_NLE_F16              0x0000003c
#define SQ_V_CMPX_NEQ_F16              0x0000003d
#define SQ_V_CMPX_NLT_F16              0x0000003e
#define SQ_V_CMPX_TRU_F16              0x0000003f
#define SQ_V_CMP_F_F32                 0x00000040
#define SQ_V_CMP_LT_F32                0x00000041
#define SQ_V_CMP_EQ_F32                0x00000042
#define SQ_V_CMP_LE_F32                0x00000043
#define SQ_V_CMP_GT_F32                0x00000044
#define SQ_V_CMP_LG_F32                0x00000045
#define SQ_V_CMP_GE_F32                0x00000046
#define SQ_V_CMP_O_F32                 0x00000047
#define SQ_V_CMP_U_F32                 0x00000048
#define SQ_V_CMP_NGE_F32               0x00000049
#define SQ_V_CMP_NLG_F32               0x0000004a
#define SQ_V_CMP_NGT_F32               0x0000004b
#define SQ_V_CMP_NLE_F32               0x0000004c
#define SQ_V_CMP_NEQ_F32               0x0000004d
#define SQ_V_CMP_NLT_F32               0x0000004e
#define SQ_V_CMP_TRU_F32               0x0000004f
#define SQ_V_CMPX_F_F32                0x00000050
#define SQ_V_CMPX_LT_F32               0x00000051
#define SQ_V_CMPX_EQ_F32               0x00000052
#define SQ_V_CMPX_LE_F32               0x00000053
#define SQ_V_CMPX_GT_F32               0x00000054
#define SQ_V_CMPX_LG_F32               0x00000055
#define SQ_V_CMPX_GE_F32               0x00000056
#define SQ_V_CMPX_O_F32                0x00000057
#define SQ_V_CMPX_U_F32                0x00000058
#define SQ_V_CMPX_NGE_F32              0x00000059
#define SQ_V_CMPX_NLG_F32              0x0000005a
#define SQ_V_CMPX_NGT_F32              0x0000005b
#define SQ_V_CMPX_NLE_F32              0x0000005c
#define SQ_V_CMPX_NEQ_F32              0x0000005d
#define SQ_V_CMPX_NLT_F32              0x0000005e
#define SQ_V_CMPX_TRU_F32              0x0000005f
#define SQ_V_CMP_F_F64                 0x00000060
#define SQ_V_CMP_LT_F64                0x00000061
#define SQ_V_CMP_EQ_F64                0x00000062
#define SQ_V_CMP_LE_F64                0x00000063
#define SQ_V_CMP_GT_F64                0x00000064
#define SQ_V_CMP_LG_F64                0x00000065
#define SQ_V_CMP_GE_F64                0x00000066
#define SQ_V_CMP_O_F64                 0x00000067
#define SQ_V_CMP_U_F64                 0x00000068
#define SQ_V_CMP_NGE_F64               0x00000069
#define SQ_V_CMP_NLG_F64               0x0000006a
#define SQ_V_CMP_NGT_F64               0x0000006b
#define SQ_V_CMP_NLE_F64               0x0000006c
#define SQ_V_CMP_NEQ_F64               0x0000006d
#define SQ_V_CMP_NLT_F64               0x0000006e
#define SQ_V_CMP_TRU_F64               0x0000006f
#define SQ_V_CMPX_F_F64                0x00000070
#define SQ_V_CMPX_LT_F64               0x00000071
#define SQ_V_CMPX_EQ_F64               0x00000072
#define SQ_V_CMPX_LE_F64               0x00000073
#define SQ_V_CMPX_GT_F64               0x00000074
#define SQ_V_CMPX_LG_F64               0x00000075
#define SQ_V_CMPX_GE_F64               0x00000076
#define SQ_V_CMPX_O_F64                0x00000077
#define SQ_V_CMPX_U_F64                0x00000078
#define SQ_V_CMPX_NGE_F64              0x00000079
#define SQ_V_CMPX_NLG_F64              0x0000007a
#define SQ_V_CMPX_NGT_F64              0x0000007b
#define SQ_V_CMPX_NLE_F64              0x0000007c
#define SQ_V_CMPX_NEQ_F64              0x0000007d
#define SQ_V_CMPX_NLT_F64              0x0000007e
#define SQ_V_CMPX_TRU_F64              0x0000007f
#define SQ_V_CMP_F_I16                 0x000000a0
#define SQ_V_CMP_LT_I16                0x000000a1
#define SQ_V_CMP_EQ_I16                0x000000a2
#define SQ_V_CMP_LE_I16                0x000000a3
#define SQ_V_CMP_GT_I16                0x000000a4
#define SQ_V_CMP_NE_I16                0x000000a5
#define SQ_V_CMP_GE_I16                0x000000a6
#define SQ_V_CMP_T_I16                 0x000000a7
#define SQ_V_CMP_F_U16                 0x000000a8
#define SQ_V_CMP_LT_U16                0x000000a9
#define SQ_V_CMP_EQ_U16                0x000000aa
#define SQ_V_CMP_LE_U16                0x000000ab
#define SQ_V_CMP_GT_U16                0x000000ac
#define SQ_V_CMP_NE_U16                0x000000ad
#define SQ_V_CMP_GE_U16                0x000000ae
#define SQ_V_CMP_T_U16                 0x000000af
#define SQ_V_CMPX_F_I16                0x000000b0
#define SQ_V_CMPX_LT_I16               0x000000b1
#define SQ_V_CMPX_EQ_I16               0x000000b2
#define SQ_V_CMPX_LE_I16               0x000000b3
#define SQ_V_CMPX_GT_I16               0x000000b4
#define SQ_V_CMPX_NE_I16               0x000000b5
#define SQ_V_CMPX_GE_I16               0x000000b6
#define SQ_V_CMPX_T_I16                0x000000b7
#define SQ_V_CMPX_F_U16                0x000000b8
#define SQ_V_CMPX_LT_U16               0x000000b9
#define SQ_V_CMPX_EQ_U16               0x000000ba
#define SQ_V_CMPX_LE_U16               0x000000bb
#define SQ_V_CMPX_GT_U16               0x000000bc
#define SQ_V_CMPX_NE_U16               0x000000bd
#define SQ_V_CMPX_GE_U16               0x000000be
#define SQ_V_CMPX_T_U16                0x000000bf
#define SQ_V_CMP_F_I32                 0x000000c0
#define SQ_V_CMP_LT_I32                0x000000c1
#define SQ_V_CMP_EQ_I32                0x000000c2
#define SQ_V_CMP_LE_I32                0x000000c3
#define SQ_V_CMP_GT_I32                0x000000c4
#define SQ_V_CMP_NE_I32                0x000000c5
#define SQ_V_CMP_GE_I32                0x000000c6
#define SQ_V_CMP_T_I32                 0x000000c7
#define SQ_V_CMP_F_U32                 0x000000c8
#define SQ_V_CMP_LT_U32                0x000000c9
#define SQ_V_CMP_EQ_U32                0x000000ca
#define SQ_V_CMP_LE_U32                0x000000cb
#define SQ_V_CMP_GT_U32                0x000000cc
#define SQ_V_CMP_NE_U32                0x000000cd
#define SQ_V_CMP_GE_U32                0x000000ce
#define SQ_V_CMP_T_U32                 0x000000cf
#define SQ_V_CMPX_F_I32                0x000000d0
#define SQ_V_CMPX_LT_I32               0x000000d1
#define SQ_V_CMPX_EQ_I32               0x000000d2
#define SQ_V_CMPX_LE_I32               0x000000d3
#define SQ_V_CMPX_GT_I32               0x000000d4
#define SQ_V_CMPX_NE_I32               0x000000d5
#define SQ_V_CMPX_GE_I32               0x000000d6
#define SQ_V_CMPX_T_I32                0x000000d7
#define SQ_V_CMPX_F_U32                0x000000d8
#define SQ_V_CMPX_LT_U32               0x000000d9
#define SQ_V_CMPX_EQ_U32               0x000000da
#define SQ_V_CMPX_LE_U32               0x000000db
#define SQ_V_CMPX_GT_U32               0x000000dc
#define SQ_V_CMPX_NE_U32               0x000000dd
#define SQ_V_CMPX_GE_U32               0x000000de
#define SQ_V_CMPX_T_U32                0x000000df
#define SQ_V_CMP_F_I64                 0x000000e0
#define SQ_V_CMP_LT_I64                0x000000e1
#define SQ_V_CMP_EQ_I64                0x000000e2
#define SQ_V_CMP_LE_I64                0x000000e3
#define SQ_V_CMP_GT_I64                0x000000e4
#define SQ_V_CMP_NE_I64                0x000000e5
#define SQ_V_CMP_GE_I64                0x000000e6
#define SQ_V_CMP_T_I64                 0x000000e7
#define SQ_V_CMP_F_U64                 0x000000e8
#define SQ_V_CMP_LT_U64                0x000000e9
#define SQ_V_CMP_EQ_U64                0x000000ea
#define SQ_V_CMP_LE_U64                0x000000eb
#define SQ_V_CMP_GT_U64                0x000000ec
#define SQ_V_CMP_NE_U64                0x000000ed
#define SQ_V_CMP_GE_U64                0x000000ee
#define SQ_V_CMP_T_U64                 0x000000ef
#define SQ_V_CMPX_F_I64                0x000000f0
#define SQ_V_CMPX_LT_I64               0x000000f1
#define SQ_V_CMPX_EQ_I64               0x000000f2
#define SQ_V_CMPX_LE_I64               0x000000f3
#define SQ_V_CMPX_GT_I64               0x000000f4
#define SQ_V_CMPX_NE_I64               0x000000f5
#define SQ_V_CMPX_GE_I64               0x000000f6
#define SQ_V_CMPX_T_I64                0x000000f7
#define SQ_V_CMPX_F_U64                0x000000f8
#define SQ_V_CMPX_LT_U64               0x000000f9
#define SQ_V_CMPX_EQ_U64               0x000000fa
#define SQ_V_CMPX_LE_U64               0x000000fb
#define SQ_V_CMPX_GT_U64               0x000000fc
#define SQ_V_CMPX_NE_U64               0x000000fd
#define SQ_V_CMPX_GE_U64               0x000000fe
#define SQ_V_CMPX_T_U64                0x000000ff

/*
 * VALUE_SQ_GS_OP value
 */

#define SQ_GS_OP_NOP                   0x00000000
#define SQ_GS_OP_CUT                   0x00000001
#define SQ_GS_OP_EMIT                  0x00000002
#define SQ_GS_OP_EMIT_CUT              0x00000003

/*
 * VALUE_SQ_SSRC_SPECIAL_LDS value
 */

#define SQ_SRC_LDS_DIRECT              0x000000fe

/*
 * VALUE_SQ_ATTR value
 */

#define SQ_ATTR0                       0x00000000

/*
 * VALUE_SQ_TGT_INTERNAL value
 */

#define SQ_EXP_GDS0                    0x00000018

/*
 * VALUE_SQ_OP_SOPC value
 */

#define SQ_S_CMP_EQ_I32                0x00000000
#define SQ_S_CMP_LG_I32                0x00000001
#define SQ_S_CMP_GT_I32                0x00000002
#define SQ_S_CMP_GE_I32                0x00000003
#define SQ_S_CMP_LT_I32                0x00000004
#define SQ_S_CMP_LE_I32                0x00000005
#define SQ_S_CMP_EQ_U32                0x00000006
#define SQ_S_CMP_LG_U32                0x00000007
#define SQ_S_CMP_GT_U32                0x00000008
#define SQ_S_CMP_GE_U32                0x00000009
#define SQ_S_CMP_LT_U32                0x0000000a
#define SQ_S_CMP_LE_U32                0x0000000b
#define SQ_S_BITCMP0_B32               0x0000000c
#define SQ_S_BITCMP1_B32               0x0000000d
#define SQ_S_BITCMP0_B64               0x0000000e
#define SQ_S_BITCMP1_B64               0x0000000f
#define SQ_S_SETVSKIP                  0x00000010
#define SQ_S_SET_GPR_IDX_ON            0x00000011
#define SQ_S_CMP_EQ_U64                0x00000012
#define SQ_S_CMP_LG_U64                0x00000013

/*
 * VALUE_SQ_TRAP value
 */

#define SQ_TTMP0                       0x0000006c
#define SQ_TTMP1                       0x0000006d
#define SQ_TTMP2                       0x0000006e
#define SQ_TTMP3                       0x0000006f
#define SQ_TTMP4                       0x00000070
#define SQ_TTMP5                       0x00000071
#define SQ_TTMP6                       0x00000072
#define SQ_TTMP7                       0x00000073
#define SQ_TTMP8                       0x00000074
#define SQ_TTMP9                       0x00000075
#define SQ_TTMP10                      0x00000076
#define SQ_TTMP11                      0x00000077
#define SQ_TTMP12                      0x00000078
#define SQ_TTMP13                      0x00000079
#define SQ_TTMP14                      0x0000007a
#define SQ_TTMP15                      0x0000007b

/*
 * VALUE_SQ_SRC_VGPR value
 */

#define SQ_SRC_VGPR0                   0x00000100

/*
 * VALUE_SQ_OP_MUBUF value
 */

#define SQ_BUFFER_LOAD_FORMAT_X        0x00000000
#define SQ_BUFFER_LOAD_FORMAT_XY       0x00000001
#define SQ_BUFFER_LOAD_FORMAT_XYZ      0x00000002
#define SQ_BUFFER_LOAD_FORMAT_XYZW     0x00000003
#define SQ_BUFFER_STORE_FORMAT_X       0x00000004
#define SQ_BUFFER_STORE_FORMAT_XY      0x00000005
#define SQ_BUFFER_STORE_FORMAT_XYZ     0x00000006
#define SQ_BUFFER_STORE_FORMAT_XYZW    0x00000007
#define SQ_BUFFER_LOAD_FORMAT_D16_X    0x00000008
#define SQ_BUFFER_LOAD_FORMAT_D16_XY   0x00000009
#define SQ_BUFFER_LOAD_FORMAT_D16_XYZ  0x0000000a
#define SQ_BUFFER_LOAD_FORMAT_D16_XYZW 0x0000000b
#define SQ_BUFFER_STORE_FORMAT_D16_X   0x0000000c
#define SQ_BUFFER_STORE_FORMAT_D16_XY  0x0000000d
#define SQ_BUFFER_STORE_FORMAT_D16_XYZ 0x0000000e
#define SQ_BUFFER_STORE_FORMAT_D16_XYZW 0x0000000f
#define SQ_BUFFER_LOAD_UBYTE           0x00000010
#define SQ_BUFFER_LOAD_SBYTE           0x00000011
#define SQ_BUFFER_LOAD_USHORT          0x00000012
#define SQ_BUFFER_LOAD_SSHORT          0x00000013
#define SQ_BUFFER_LOAD_DWORD           0x00000014
#define SQ_BUFFER_LOAD_DWORDX2         0x00000015
#define SQ_BUFFER_LOAD_DWORDX3         0x00000016
#define SQ_BUFFER_LOAD_DWORDX4         0x00000017
#define SQ_BUFFER_STORE_BYTE           0x00000018
#define SQ_BUFFER_STORE_SHORT          0x0000001a
#define SQ_BUFFER_STORE_DWORD          0x0000001c
#define SQ_BUFFER_STORE_DWORDX2        0x0000001d
#define SQ_BUFFER_STORE_DWORDX3        0x0000001e
#define SQ_BUFFER_STORE_DWORDX4        0x0000001f
#define SQ_BUFFER_STORE_LDS_DWORD      0x0000003d
#define SQ_BUFFER_WBINVL1              0x0000003e
#define SQ_BUFFER_WBINVL1_VOL          0x0000003f
#define SQ_BUFFER_ATOMIC_SWAP          0x00000040
#define SQ_BUFFER_ATOMIC_CMPSWAP       0x00000041
#define SQ_BUFFER_ATOMIC_ADD           0x00000042
#define SQ_BUFFER_ATOMIC_SUB           0x00000043
#define SQ_BUFFER_ATOMIC_SMIN          0x00000044
#define SQ_BUFFER_ATOMIC_UMIN          0x00000045
#define SQ_BUFFER_ATOMIC_SMAX          0x00000046
#define SQ_BUFFER_ATOMIC_UMAX          0x00000047
#define SQ_BUFFER_ATOMIC_AND           0x00000048
#define SQ_BUFFER_ATOMIC_OR            0x00000049
#define SQ_BUFFER_ATOMIC_XOR           0x0000004a
#define SQ_BUFFER_ATOMIC_INC           0x0000004b
#define SQ_BUFFER_ATOMIC_DEC           0x0000004c
#define SQ_BUFFER_ATOMIC_SWAP_X2       0x00000060
#define SQ_BUFFER_ATOMIC_CMPSWAP_X2    0x00000061
#define SQ_BUFFER_ATOMIC_ADD_X2        0x00000062
#define SQ_BUFFER_ATOMIC_SUB_X2        0x00000063
#define SQ_BUFFER_ATOMIC_SMIN_X2       0x00000064
#define SQ_BUFFER_ATOMIC_UMIN_X2       0x00000065
#define SQ_BUFFER_ATOMIC_SMAX_X2       0x00000066
#define SQ_BUFFER_ATOMIC_UMAX_X2       0x00000067
#define SQ_BUFFER_ATOMIC_AND_X2        0x00000068
#define SQ_BUFFER_ATOMIC_OR_X2         0x00000069
#define SQ_BUFFER_ATOMIC_XOR_X2        0x0000006a
#define SQ_BUFFER_ATOMIC_INC_X2        0x0000006b
#define SQ_BUFFER_ATOMIC_DEC_X2        0x0000006c

/*
 * VALUE_SQ_SDWA_SEL value
 */

#define SQ_SDWA_BYTE_0                 0x00000000
#define SQ_SDWA_BYTE_1                 0x00000001
#define SQ_SDWA_BYTE_2                 0x00000002
#define SQ_SDWA_BYTE_3                 0x00000003
#define SQ_SDWA_WORD_0                 0x00000004
#define SQ_SDWA_WORD_1                 0x00000005
#define SQ_SDWA_DWORD                  0x00000006

/*******************************************************
 * SX Enums
 *******************************************************/

/*
 * SX_BLEND_OPT enum
 */

typedef enum SX_BLEND_OPT {
BLEND_OPT_PRESERVE_NONE_IGNORE_ALL       = 0x00000000,
BLEND_OPT_PRESERVE_ALL_IGNORE_NONE       = 0x00000001,
BLEND_OPT_PRESERVE_C1_IGNORE_C0          = 0x00000002,
BLEND_OPT_PRESERVE_C0_IGNORE_C1          = 0x00000003,
BLEND_OPT_PRESERVE_A1_IGNORE_A0          = 0x00000004,
BLEND_OPT_PRESERVE_A0_IGNORE_A1          = 0x00000005,
BLEND_OPT_PRESERVE_NONE_IGNORE_A0        = 0x00000006,
BLEND_OPT_PRESERVE_NONE_IGNORE_NONE      = 0x00000007,
} SX_BLEND_OPT;

/*
 * SX_OPT_COMB_FCN enum
 */

typedef enum SX_OPT_COMB_FCN {
OPT_COMB_NONE                            = 0x00000000,
OPT_COMB_ADD                             = 0x00000001,
OPT_COMB_SUBTRACT                        = 0x00000002,
OPT_COMB_MIN                             = 0x00000003,
OPT_COMB_MAX                             = 0x00000004,
OPT_COMB_REVSUBTRACT                     = 0x00000005,
OPT_COMB_BLEND_DISABLED                  = 0x00000006,
OPT_COMB_SAFE_ADD                        = 0x00000007,
} SX_OPT_COMB_FCN;

/*
 * SX_DOWNCONVERT_FORMAT enum
 */

typedef enum SX_DOWNCONVERT_FORMAT {
SX_RT_EXPORT_NO_CONVERSION               = 0x00000000,
SX_RT_EXPORT_32_R                        = 0x00000001,
SX_RT_EXPORT_32_A                        = 0x00000002,
SX_RT_EXPORT_10_11_11                    = 0x00000003,
SX_RT_EXPORT_2_10_10_10                  = 0x00000004,
SX_RT_EXPORT_8_8_8_8                     = 0x00000005,
SX_RT_EXPORT_5_6_5                       = 0x00000006,
SX_RT_EXPORT_1_5_5_5                     = 0x00000007,
SX_RT_EXPORT_4_4_4_4                     = 0x00000008,
SX_RT_EXPORT_16_16_GR                    = 0x00000009,
SX_RT_EXPORT_16_16_AR                    = 0x0000000a,
} SX_DOWNCONVERT_FORMAT;

/*
 * SX_PERFCOUNTER_VALS enum
 */

typedef enum SX_PERFCOUNTER_VALS {
SX_PERF_SEL_PA_IDLE_CYCLES               = 0x00000000,
SX_PERF_SEL_PA_REQ                       = 0x00000001,
SX_PERF_SEL_PA_POS                       = 0x00000002,
SX_PERF_SEL_CLOCK                        = 0x00000003,
SX_PERF_SEL_GATE_EN1                     = 0x00000004,
SX_PERF_SEL_GATE_EN2                     = 0x00000005,
SX_PERF_SEL_GATE_EN3                     = 0x00000006,
SX_PERF_SEL_GATE_EN4                     = 0x00000007,
SX_PERF_SEL_SH_POS_STARVE                = 0x00000008,
SX_PERF_SEL_SH_COLOR_STARVE              = 0x00000009,
SX_PERF_SEL_SH_POS_STALL                 = 0x0000000a,
SX_PERF_SEL_SH_COLOR_STALL               = 0x0000000b,
SX_PERF_SEL_DB0_PIXELS                   = 0x0000000c,
SX_PERF_SEL_DB0_HALF_QUADS               = 0x0000000d,
SX_PERF_SEL_DB0_PIXEL_STALL              = 0x0000000e,
SX_PERF_SEL_DB0_PIXEL_IDLE               = 0x0000000f,
SX_PERF_SEL_DB0_PRED_PIXELS              = 0x00000010,
SX_PERF_SEL_DB1_PIXELS                   = 0x00000011,
SX_PERF_SEL_DB1_HALF_QUADS               = 0x00000012,
SX_PERF_SEL_DB1_PIXEL_STALL              = 0x00000013,
SX_PERF_SEL_DB1_PIXEL_IDLE               = 0x00000014,
SX_PERF_SEL_DB1_PRED_PIXELS              = 0x00000015,
SX_PERF_SEL_DB2_PIXELS                   = 0x00000016,
SX_PERF_SEL_DB2_HALF_QUADS               = 0x00000017,
SX_PERF_SEL_DB2_PIXEL_STALL              = 0x00000018,
SX_PERF_SEL_DB2_PIXEL_IDLE               = 0x00000019,
SX_PERF_SEL_DB2_PRED_PIXELS              = 0x0000001a,
SX_PERF_SEL_DB3_PIXELS                   = 0x0000001b,
SX_PERF_SEL_DB3_HALF_QUADS               = 0x0000001c,
SX_PERF_SEL_DB3_PIXEL_STALL              = 0x0000001d,
SX_PERF_SEL_DB3_PIXEL_IDLE               = 0x0000001e,
SX_PERF_SEL_DB3_PRED_PIXELS              = 0x0000001f,
SX_PERF_SEL_COL_BUSY                     = 0x00000020,
SX_PERF_SEL_POS_BUSY                     = 0x00000021,
SX_PERF_SEL_DB0_A2M_DISCARD_QUADS        = 0x00000022,
SX_PERF_SEL_DB0_MRT0_BLEND_BYPASS        = 0x00000023,
SX_PERF_SEL_DB0_MRT0_DONT_RD_DEST        = 0x00000024,
SX_PERF_SEL_DB0_MRT0_DISCARD_SRC         = 0x00000025,
SX_PERF_SEL_DB0_MRT0_SINGLE_QUADS        = 0x00000026,
SX_PERF_SEL_DB0_MRT0_DOUBLE_QUADS        = 0x00000027,
SX_PERF_SEL_DB0_MRT1_BLEND_BYPASS        = 0x00000028,
SX_PERF_SEL_DB0_MRT1_DONT_RD_DEST        = 0x00000029,
SX_PERF_SEL_DB0_MRT1_DISCARD_SRC         = 0x0000002a,
SX_PERF_SEL_DB0_MRT1_SINGLE_QUADS        = 0x0000002b,
SX_PERF_SEL_DB0_MRT1_DOUBLE_QUADS        = 0x0000002c,
SX_PERF_SEL_DB0_MRT2_BLEND_BYPASS        = 0x0000002d,
SX_PERF_SEL_DB0_MRT2_DONT_RD_DEST        = 0x0000002e,
SX_PERF_SEL_DB0_MRT2_DISCARD_SRC         = 0x0000002f,
SX_PERF_SEL_DB0_MRT2_SINGLE_QUADS        = 0x00000030,
SX_PERF_SEL_DB0_MRT2_DOUBLE_QUADS        = 0x00000031,
SX_PERF_SEL_DB0_MRT3_BLEND_BYPASS        = 0x00000032,
SX_PERF_SEL_DB0_MRT3_DONT_RD_DEST        = 0x00000033,
SX_PERF_SEL_DB0_MRT3_DISCARD_SRC         = 0x00000034,
SX_PERF_SEL_DB0_MRT3_SINGLE_QUADS        = 0x00000035,
SX_PERF_SEL_DB0_MRT3_DOUBLE_QUADS        = 0x00000036,
SX_PERF_SEL_DB0_MRT4_BLEND_BYPASS        = 0x00000037,
SX_PERF_SEL_DB0_MRT4_DONT_RD_DEST        = 0x00000038,
SX_PERF_SEL_DB0_MRT4_DISCARD_SRC         = 0x00000039,
SX_PERF_SEL_DB0_MRT4_SINGLE_QUADS        = 0x0000003a,
SX_PERF_SEL_DB0_MRT4_DOUBLE_QUADS        = 0x0000003b,
SX_PERF_SEL_DB0_MRT5_BLEND_BYPASS        = 0x0000003c,
SX_PERF_SEL_DB0_MRT5_DONT_RD_DEST        = 0x0000003d,
SX_PERF_SEL_DB0_MRT5_DISCARD_SRC         = 0x0000003e,
SX_PERF_SEL_DB0_MRT5_SINGLE_QUADS        = 0x0000003f,
SX_PERF_SEL_DB0_MRT5_DOUBLE_QUADS        = 0x00000040,
SX_PERF_SEL_DB0_MRT6_BLEND_BYPASS        = 0x00000041,
SX_PERF_SEL_DB0_MRT6_DONT_RD_DEST        = 0x00000042,
SX_PERF_SEL_DB0_MRT6_DISCARD_SRC         = 0x00000043,
SX_PERF_SEL_DB0_MRT6_SINGLE_QUADS        = 0x00000044,
SX_PERF_SEL_DB0_MRT6_DOUBLE_QUADS        = 0x00000045,
SX_PERF_SEL_DB0_MRT7_BLEND_BYPASS        = 0x00000046,
SX_PERF_SEL_DB0_MRT7_DONT_RD_DEST        = 0x00000047,
SX_PERF_SEL_DB0_MRT7_DISCARD_SRC         = 0x00000048,
SX_PERF_SEL_DB0_MRT7_SINGLE_QUADS        = 0x00000049,
SX_PERF_SEL_DB0_MRT7_DOUBLE_QUADS        = 0x0000004a,
SX_PERF_SEL_DB1_A2M_DISCARD_QUADS        = 0x0000004b,
SX_PERF_SEL_DB1_MRT0_BLEND_BYPASS        = 0x0000004c,
SX_PERF_SEL_DB1_MRT0_DONT_RD_DEST        = 0x0000004d,
SX_PERF_SEL_DB1_MRT0_DISCARD_SRC         = 0x0000004e,
SX_PERF_SEL_DB1_MRT0_SINGLE_QUADS        = 0x0000004f,
SX_PERF_SEL_DB1_MRT0_DOUBLE_QUADS        = 0x00000050,
SX_PERF_SEL_DB1_MRT1_BLEND_BYPASS        = 0x00000051,
SX_PERF_SEL_DB1_MRT1_DONT_RD_DEST        = 0x00000052,
SX_PERF_SEL_DB1_MRT1_DISCARD_SRC         = 0x00000053,
SX_PERF_SEL_DB1_MRT1_SINGLE_QUADS        = 0x00000054,
SX_PERF_SEL_DB1_MRT1_DOUBLE_QUADS        = 0x00000055,
SX_PERF_SEL_DB1_MRT2_BLEND_BYPASS        = 0x00000056,
SX_PERF_SEL_DB1_MRT2_DONT_RD_DEST        = 0x00000057,
SX_PERF_SEL_DB1_MRT2_DISCARD_SRC         = 0x00000058,
SX_PERF_SEL_DB1_MRT2_SINGLE_QUADS        = 0x00000059,
SX_PERF_SEL_DB1_MRT2_DOUBLE_QUADS        = 0x0000005a,
SX_PERF_SEL_DB1_MRT3_BLEND_BYPASS        = 0x0000005b,
SX_PERF_SEL_DB1_MRT3_DONT_RD_DEST        = 0x0000005c,
SX_PERF_SEL_DB1_MRT3_DISCARD_SRC         = 0x0000005d,
SX_PERF_SEL_DB1_MRT3_SINGLE_QUADS        = 0x0000005e,
SX_PERF_SEL_DB1_MRT3_DOUBLE_QUADS        = 0x0000005f,
SX_PERF_SEL_DB1_MRT4_BLEND_BYPASS        = 0x00000060,
SX_PERF_SEL_DB1_MRT4_DONT_RD_DEST        = 0x00000061,
SX_PERF_SEL_DB1_MRT4_DISCARD_SRC         = 0x00000062,
SX_PERF_SEL_DB1_MRT4_SINGLE_QUADS        = 0x00000063,
SX_PERF_SEL_DB1_MRT4_DOUBLE_QUADS        = 0x00000064,
SX_PERF_SEL_DB1_MRT5_BLEND_BYPASS        = 0x00000065,
SX_PERF_SEL_DB1_MRT5_DONT_RD_DEST        = 0x00000066,
SX_PERF_SEL_DB1_MRT5_DISCARD_SRC         = 0x00000067,
SX_PERF_SEL_DB1_MRT5_SINGLE_QUADS        = 0x00000068,
SX_PERF_SEL_DB1_MRT5_DOUBLE_QUADS        = 0x00000069,
SX_PERF_SEL_DB1_MRT6_BLEND_BYPASS        = 0x0000006a,
SX_PERF_SEL_DB1_MRT6_DONT_RD_DEST        = 0x0000006b,
SX_PERF_SEL_DB1_MRT6_DISCARD_SRC         = 0x0000006c,
SX_PERF_SEL_DB1_MRT6_SINGLE_QUADS        = 0x0000006d,
SX_PERF_SEL_DB1_MRT6_DOUBLE_QUADS        = 0x0000006e,
SX_PERF_SEL_DB1_MRT7_BLEND_BYPASS        = 0x0000006f,
SX_PERF_SEL_DB1_MRT7_DONT_RD_DEST        = 0x00000070,
SX_PERF_SEL_DB1_MRT7_DISCARD_SRC         = 0x00000071,
SX_PERF_SEL_DB1_MRT7_SINGLE_QUADS        = 0x00000072,
SX_PERF_SEL_DB1_MRT7_DOUBLE_QUADS        = 0x00000073,
SX_PERF_SEL_DB2_A2M_DISCARD_QUADS        = 0x00000074,
SX_PERF_SEL_DB2_MRT0_BLEND_BYPASS        = 0x00000075,
SX_PERF_SEL_DB2_MRT0_DONT_RD_DEST        = 0x00000076,
SX_PERF_SEL_DB2_MRT0_DISCARD_SRC         = 0x00000077,
SX_PERF_SEL_DB2_MRT0_SINGLE_QUADS        = 0x00000078,
SX_PERF_SEL_DB2_MRT0_DOUBLE_QUADS        = 0x00000079,
SX_PERF_SEL_DB2_MRT1_BLEND_BYPASS        = 0x0000007a,
SX_PERF_SEL_DB2_MRT1_DONT_RD_DEST        = 0x0000007b,
SX_PERF_SEL_DB2_MRT1_DISCARD_SRC         = 0x0000007c,
SX_PERF_SEL_DB2_MRT1_SINGLE_QUADS        = 0x0000007d,
SX_PERF_SEL_DB2_MRT1_DOUBLE_QUADS        = 0x0000007e,
SX_PERF_SEL_DB2_MRT2_BLEND_BYPASS        = 0x0000007f,
SX_PERF_SEL_DB2_MRT2_DONT_RD_DEST        = 0x00000080,
SX_PERF_SEL_DB2_MRT2_DISCARD_SRC         = 0x00000081,
SX_PERF_SEL_DB2_MRT2_SINGLE_QUADS        = 0x00000082,
SX_PERF_SEL_DB2_MRT2_DOUBLE_QUADS        = 0x00000083,
SX_PERF_SEL_DB2_MRT3_BLEND_BYPASS        = 0x00000084,
SX_PERF_SEL_DB2_MRT3_DONT_RD_DEST        = 0x00000085,
SX_PERF_SEL_DB2_MRT3_DISCARD_SRC         = 0x00000086,
SX_PERF_SEL_DB2_MRT3_SINGLE_QUADS        = 0x00000087,
SX_PERF_SEL_DB2_MRT3_DOUBLE_QUADS        = 0x00000088,
SX_PERF_SEL_DB2_MRT4_BLEND_BYPASS        = 0x00000089,
SX_PERF_SEL_DB2_MRT4_DONT_RD_DEST        = 0x0000008a,
SX_PERF_SEL_DB2_MRT4_DISCARD_SRC         = 0x0000008b,
SX_PERF_SEL_DB2_MRT4_SINGLE_QUADS        = 0x0000008c,
SX_PERF_SEL_DB2_MRT4_DOUBLE_QUADS        = 0x0000008d,
SX_PERF_SEL_DB2_MRT5_BLEND_BYPASS        = 0x0000008e,
SX_PERF_SEL_DB2_MRT5_DONT_RD_DEST        = 0x0000008f,
SX_PERF_SEL_DB2_MRT5_DISCARD_SRC         = 0x00000090,
SX_PERF_SEL_DB2_MRT5_SINGLE_QUADS        = 0x00000091,
SX_PERF_SEL_DB2_MRT5_DOUBLE_QUADS        = 0x00000092,
SX_PERF_SEL_DB2_MRT6_BLEND_BYPASS        = 0x00000093,
SX_PERF_SEL_DB2_MRT6_DONT_RD_DEST        = 0x00000094,
SX_PERF_SEL_DB2_MRT6_DISCARD_SRC         = 0x00000095,
SX_PERF_SEL_DB2_MRT6_SINGLE_QUADS        = 0x00000096,
SX_PERF_SEL_DB2_MRT6_DOUBLE_QUADS        = 0x00000097,
SX_PERF_SEL_DB2_MRT7_BLEND_BYPASS        = 0x00000098,
SX_PERF_SEL_DB2_MRT7_DONT_RD_DEST        = 0x00000099,
SX_PERF_SEL_DB2_MRT7_DISCARD_SRC         = 0x0000009a,
SX_PERF_SEL_DB2_MRT7_SINGLE_QUADS        = 0x0000009b,
SX_PERF_SEL_DB2_MRT7_DOUBLE_QUADS        = 0x0000009c,
SX_PERF_SEL_DB3_A2M_DISCARD_QUADS        = 0x0000009d,
SX_PERF_SEL_DB3_MRT0_BLEND_BYPASS        = 0x0000009e,
SX_PERF_SEL_DB3_MRT0_DONT_RD_DEST        = 0x0000009f,
SX_PERF_SEL_DB3_MRT0_DISCARD_SRC         = 0x000000a0,
SX_PERF_SEL_DB3_MRT0_SINGLE_QUADS        = 0x000000a1,
SX_PERF_SEL_DB3_MRT0_DOUBLE_QUADS        = 0x000000a2,
SX_PERF_SEL_DB3_MRT1_BLEND_BYPASS        = 0x000000a3,
SX_PERF_SEL_DB3_MRT1_DONT_RD_DEST        = 0x000000a4,
SX_PERF_SEL_DB3_MRT1_DISCARD_SRC         = 0x000000a5,
SX_PERF_SEL_DB3_MRT1_SINGLE_QUADS        = 0x000000a6,
SX_PERF_SEL_DB3_MRT1_DOUBLE_QUADS        = 0x000000a7,
SX_PERF_SEL_DB3_MRT2_BLEND_BYPASS        = 0x000000a8,
SX_PERF_SEL_DB3_MRT2_DONT_RD_DEST        = 0x000000a9,
SX_PERF_SEL_DB3_MRT2_DISCARD_SRC         = 0x000000aa,
SX_PERF_SEL_DB3_MRT2_SINGLE_QUADS        = 0x000000ab,
SX_PERF_SEL_DB3_MRT2_DOUBLE_QUADS        = 0x000000ac,
SX_PERF_SEL_DB3_MRT3_BLEND_BYPASS        = 0x000000ad,
SX_PERF_SEL_DB3_MRT3_DONT_RD_DEST        = 0x000000ae,
SX_PERF_SEL_DB3_MRT3_DISCARD_SRC         = 0x000000af,
SX_PERF_SEL_DB3_MRT3_SINGLE_QUADS        = 0x000000b0,
SX_PERF_SEL_DB3_MRT3_DOUBLE_QUADS        = 0x000000b1,
SX_PERF_SEL_DB3_MRT4_BLEND_BYPASS        = 0x000000b2,
SX_PERF_SEL_DB3_MRT4_DONT_RD_DEST        = 0x000000b3,
SX_PERF_SEL_DB3_MRT4_DISCARD_SRC         = 0x000000b4,
SX_PERF_SEL_DB3_MRT4_SINGLE_QUADS        = 0x000000b5,
SX_PERF_SEL_DB3_MRT4_DOUBLE_QUADS        = 0x000000b6,
SX_PERF_SEL_DB3_MRT5_BLEND_BYPASS        = 0x000000b7,
SX_PERF_SEL_DB3_MRT5_DONT_RD_DEST        = 0x000000b8,
SX_PERF_SEL_DB3_MRT5_DISCARD_SRC         = 0x000000b9,
SX_PERF_SEL_DB3_MRT5_SINGLE_QUADS        = 0x000000ba,
SX_PERF_SEL_DB3_MRT5_DOUBLE_QUADS        = 0x000000bb,
SX_PERF_SEL_DB3_MRT6_BLEND_BYPASS        = 0x000000bc,
SX_PERF_SEL_DB3_MRT6_DONT_RD_DEST        = 0x000000bd,
SX_PERF_SEL_DB3_MRT6_DISCARD_SRC         = 0x000000be,
SX_PERF_SEL_DB3_MRT6_SINGLE_QUADS        = 0x000000bf,
SX_PERF_SEL_DB3_MRT6_DOUBLE_QUADS        = 0x000000c0,
SX_PERF_SEL_DB3_MRT7_BLEND_BYPASS        = 0x000000c1,
SX_PERF_SEL_DB3_MRT7_DONT_RD_DEST        = 0x000000c2,
SX_PERF_SEL_DB3_MRT7_DISCARD_SRC         = 0x000000c3,
SX_PERF_SEL_DB3_MRT7_SINGLE_QUADS        = 0x000000c4,
SX_PERF_SEL_DB3_MRT7_DOUBLE_QUADS        = 0x000000c5,
} SX_PERFCOUNTER_VALS;

/*******************************************************
 * DB Enums
 *******************************************************/

/*
 * ForceControl enum
 */

typedef enum ForceControl {
FORCE_OFF                                = 0x00000000,
FORCE_ENABLE                             = 0x00000001,
FORCE_DISABLE                            = 0x00000002,
FORCE_RESERVED                           = 0x00000003,
} ForceControl;

/*
 * ZSamplePosition enum
 */

typedef enum ZSamplePosition {
Z_SAMPLE_CENTER                          = 0x00000000,
Z_SAMPLE_CENTROID                        = 0x00000001,
} ZSamplePosition;

/*
 * ZOrder enum
 */

typedef enum ZOrder {
LATE_Z                                   = 0x00000000,
EARLY_Z_THEN_LATE_Z                      = 0x00000001,
RE_Z                                     = 0x00000002,
EARLY_Z_THEN_RE_Z                        = 0x00000003,
} ZOrder;

/*
 * ZpassControl enum
 */

typedef enum ZpassControl {
ZPASS_DISABLE                            = 0x00000000,
ZPASS_SAMPLES                            = 0x00000001,
ZPASS_PIXELS                             = 0x00000002,
} ZpassControl;

/*
 * ZModeForce enum
 */

typedef enum ZModeForce {
NO_FORCE                                 = 0x00000000,
FORCE_EARLY_Z                            = 0x00000001,
FORCE_LATE_Z                             = 0x00000002,
FORCE_RE_Z                               = 0x00000003,
} ZModeForce;

/*
 * ZLimitSumm enum
 */

typedef enum ZLimitSumm {
FORCE_SUMM_OFF                           = 0x00000000,
FORCE_SUMM_MINZ                          = 0x00000001,
FORCE_SUMM_MAXZ                          = 0x00000002,
FORCE_SUMM_BOTH                          = 0x00000003,
} ZLimitSumm;

/*
 * CompareFrag enum
 */

typedef enum CompareFrag {
FRAG_NEVER                               = 0x00000000,
FRAG_LESS                                = 0x00000001,
FRAG_EQUAL                               = 0x00000002,
FRAG_LEQUAL                              = 0x00000003,
FRAG_GREATER                             = 0x00000004,
FRAG_NOTEQUAL                            = 0x00000005,
FRAG_GEQUAL                              = 0x00000006,
FRAG_ALWAYS                              = 0x00000007,
} CompareFrag;

/*
 * StencilOp enum
 */

typedef enum StencilOp {
STENCIL_KEEP                             = 0x00000000,
STENCIL_ZERO                             = 0x00000001,
STENCIL_ONES                             = 0x00000002,
STENCIL_REPLACE_TEST                     = 0x00000003,
STENCIL_REPLACE_OP                       = 0x00000004,
STENCIL_ADD_CLAMP                        = 0x00000005,
STENCIL_SUB_CLAMP                        = 0x00000006,
STENCIL_INVERT                           = 0x00000007,
STENCIL_ADD_WRAP                         = 0x00000008,
STENCIL_SUB_WRAP                         = 0x00000009,
STENCIL_AND                              = 0x0000000a,
STENCIL_OR                               = 0x0000000b,
STENCIL_XOR                              = 0x0000000c,
STENCIL_NAND                             = 0x0000000d,
STENCIL_NOR                              = 0x0000000e,
STENCIL_XNOR                             = 0x0000000f,
} StencilOp;

/*
 * ConservativeZExport enum
 */

typedef enum ConservativeZExport {
EXPORT_ANY_Z                             = 0x00000000,
EXPORT_LESS_THAN_Z                       = 0x00000001,
EXPORT_GREATER_THAN_Z                    = 0x00000002,
EXPORT_RESERVED                          = 0x00000003,
} ConservativeZExport;

/*
 * DbPSLControl enum
 */

typedef enum DbPSLControl {
PSLC_AUTO                                = 0x00000000,
PSLC_ON_HANG_ONLY                        = 0x00000001,
PSLC_ASAP                                = 0x00000002,
PSLC_COUNTDOWN                           = 0x00000003,
} DbPSLControl;

/*
 * DbPRTFaultBehavior enum
 */

typedef enum DbPRTFaultBehavior {
FAULT_ZERO                               = 0x00000000,
FAULT_ONE                                = 0x00000001,
FAULT_FAIL                               = 0x00000002,
FAULT_PASS                               = 0x00000003,
} DbPRTFaultBehavior;

/*
 * PerfCounter_Vals enum
 */

typedef enum PerfCounter_Vals {
DB_PERF_SEL_SC_DB_tile_sends             = 0x00000000,
DB_PERF_SEL_SC_DB_tile_busy              = 0x00000001,
DB_PERF_SEL_SC_DB_tile_stalls            = 0x00000002,
DB_PERF_SEL_SC_DB_tile_events            = 0x00000003,
DB_PERF_SEL_SC_DB_tile_tiles             = 0x00000004,
DB_PERF_SEL_SC_DB_tile_covered           = 0x00000005,
DB_PERF_SEL_hiz_tc_read_starved          = 0x00000006,
DB_PERF_SEL_hiz_tc_write_stall           = 0x00000007,
DB_PERF_SEL_hiz_qtiles_culled            = 0x00000008,
DB_PERF_SEL_his_qtiles_culled            = 0x00000009,
DB_PERF_SEL_DB_SC_tile_sends             = 0x0000000a,
DB_PERF_SEL_DB_SC_tile_busy              = 0x0000000b,
DB_PERF_SEL_DB_SC_tile_stalls            = 0x0000000c,
DB_PERF_SEL_DB_SC_tile_df_stalls         = 0x0000000d,
DB_PERF_SEL_DB_SC_tile_tiles             = 0x0000000e,
DB_PERF_SEL_DB_SC_tile_culled            = 0x0000000f,
DB_PERF_SEL_DB_SC_tile_hier_kill         = 0x00000010,
DB_PERF_SEL_DB_SC_tile_fast_ops          = 0x00000011,
DB_PERF_SEL_DB_SC_tile_no_ops            = 0x00000012,
DB_PERF_SEL_DB_SC_tile_tile_rate         = 0x00000013,
DB_PERF_SEL_DB_SC_tile_ssaa_kill         = 0x00000014,
DB_PERF_SEL_DB_SC_tile_fast_z_ops        = 0x00000015,
DB_PERF_SEL_DB_SC_tile_fast_stencil_ops  = 0x00000016,
DB_PERF_SEL_SC_DB_quad_sends             = 0x00000017,
DB_PERF_SEL_SC_DB_quad_busy              = 0x00000018,
DB_PERF_SEL_SC_DB_quad_squads            = 0x00000019,
DB_PERF_SEL_SC_DB_quad_tiles             = 0x0000001a,
DB_PERF_SEL_SC_DB_quad_pixels            = 0x0000001b,
DB_PERF_SEL_SC_DB_quad_killed_tiles      = 0x0000001c,
DB_PERF_SEL_DB_SC_quad_sends             = 0x0000001d,
DB_PERF_SEL_DB_SC_quad_busy              = 0x0000001e,
DB_PERF_SEL_DB_SC_quad_stalls            = 0x0000001f,
DB_PERF_SEL_DB_SC_quad_tiles             = 0x00000020,
DB_PERF_SEL_DB_SC_quad_lit_quad          = 0x00000021,
DB_PERF_SEL_DB_CB_tile_sends             = 0x00000022,
DB_PERF_SEL_DB_CB_tile_busy              = 0x00000023,
DB_PERF_SEL_DB_CB_tile_stalls            = 0x00000024,
DB_PERF_SEL_SX_DB_quad_sends             = 0x00000025,
DB_PERF_SEL_SX_DB_quad_busy              = 0x00000026,
DB_PERF_SEL_SX_DB_quad_stalls            = 0x00000027,
DB_PERF_SEL_SX_DB_quad_quads             = 0x00000028,
DB_PERF_SEL_SX_DB_quad_pixels            = 0x00000029,
DB_PERF_SEL_SX_DB_quad_exports           = 0x0000002a,
DB_PERF_SEL_SH_quads_outstanding_sum     = 0x0000002b,
DB_PERF_SEL_DB_CB_lquad_sends            = 0x0000002c,
DB_PERF_SEL_DB_CB_lquad_busy             = 0x0000002d,
DB_PERF_SEL_DB_CB_lquad_stalls           = 0x0000002e,
DB_PERF_SEL_DB_CB_lquad_quads            = 0x0000002f,
DB_PERF_SEL_tile_rd_sends                = 0x00000030,
DB_PERF_SEL_mi_tile_rd_outstanding_sum   = 0x00000031,
DB_PERF_SEL_quad_rd_sends                = 0x00000032,
DB_PERF_SEL_quad_rd_busy                 = 0x00000033,
DB_PERF_SEL_quad_rd_mi_stall             = 0x00000034,
DB_PERF_SEL_quad_rd_rw_collision         = 0x00000035,
DB_PERF_SEL_quad_rd_tag_stall            = 0x00000036,
DB_PERF_SEL_quad_rd_32byte_reqs          = 0x00000037,
DB_PERF_SEL_quad_rd_panic                = 0x00000038,
DB_PERF_SEL_mi_quad_rd_outstanding_sum   = 0x00000039,
DB_PERF_SEL_quad_rdret_sends             = 0x0000003a,
DB_PERF_SEL_quad_rdret_busy              = 0x0000003b,
DB_PERF_SEL_tile_wr_sends                = 0x0000003c,
DB_PERF_SEL_tile_wr_acks                 = 0x0000003d,
DB_PERF_SEL_mi_tile_wr_outstanding_sum   = 0x0000003e,
DB_PERF_SEL_quad_wr_sends                = 0x0000003f,
DB_PERF_SEL_quad_wr_busy                 = 0x00000040,
DB_PERF_SEL_quad_wr_mi_stall             = 0x00000041,
DB_PERF_SEL_quad_wr_coherency_stall      = 0x00000042,
DB_PERF_SEL_quad_wr_acks                 = 0x00000043,
DB_PERF_SEL_mi_quad_wr_outstanding_sum   = 0x00000044,
DB_PERF_SEL_Tile_Cache_misses            = 0x00000045,
DB_PERF_SEL_Tile_Cache_hits              = 0x00000046,
DB_PERF_SEL_Tile_Cache_flushes           = 0x00000047,
DB_PERF_SEL_Tile_Cache_surface_stall     = 0x00000048,
DB_PERF_SEL_Tile_Cache_starves           = 0x00000049,
DB_PERF_SEL_Tile_Cache_mem_return_starve  = 0x0000004a,
DB_PERF_SEL_tcp_dispatcher_reads         = 0x0000004b,
DB_PERF_SEL_tcp_prefetcher_reads         = 0x0000004c,
DB_PERF_SEL_tcp_preloader_reads          = 0x0000004d,
DB_PERF_SEL_tcp_dispatcher_flushes       = 0x0000004e,
DB_PERF_SEL_tcp_prefetcher_flushes       = 0x0000004f,
DB_PERF_SEL_tcp_preloader_flushes        = 0x00000050,
DB_PERF_SEL_Depth_Tile_Cache_sends       = 0x00000051,
DB_PERF_SEL_Depth_Tile_Cache_busy        = 0x00000052,
DB_PERF_SEL_Depth_Tile_Cache_starves     = 0x00000053,
DB_PERF_SEL_Depth_Tile_Cache_dtile_locked  = 0x00000054,
DB_PERF_SEL_Depth_Tile_Cache_alloc_stall  = 0x00000055,
DB_PERF_SEL_Depth_Tile_Cache_misses      = 0x00000056,
DB_PERF_SEL_Depth_Tile_Cache_hits        = 0x00000057,
DB_PERF_SEL_Depth_Tile_Cache_flushes     = 0x00000058,
DB_PERF_SEL_Depth_Tile_Cache_noop_tile   = 0x00000059,
DB_PERF_SEL_Depth_Tile_Cache_detailed_noop  = 0x0000005a,
DB_PERF_SEL_Depth_Tile_Cache_event       = 0x0000005b,
DB_PERF_SEL_Depth_Tile_Cache_tile_frees  = 0x0000005c,
DB_PERF_SEL_Depth_Tile_Cache_data_frees  = 0x0000005d,
DB_PERF_SEL_Depth_Tile_Cache_mem_return_starve  = 0x0000005e,
DB_PERF_SEL_Stencil_Cache_misses         = 0x0000005f,
DB_PERF_SEL_Stencil_Cache_hits           = 0x00000060,
DB_PERF_SEL_Stencil_Cache_flushes        = 0x00000061,
DB_PERF_SEL_Stencil_Cache_starves        = 0x00000062,
DB_PERF_SEL_Stencil_Cache_frees          = 0x00000063,
DB_PERF_SEL_Z_Cache_separate_Z_misses    = 0x00000064,
DB_PERF_SEL_Z_Cache_separate_Z_hits      = 0x00000065,
DB_PERF_SEL_Z_Cache_separate_Z_flushes   = 0x00000066,
DB_PERF_SEL_Z_Cache_separate_Z_starves   = 0x00000067,
DB_PERF_SEL_Z_Cache_pmask_misses         = 0x00000068,
DB_PERF_SEL_Z_Cache_pmask_hits           = 0x00000069,
DB_PERF_SEL_Z_Cache_pmask_flushes        = 0x0000006a,
DB_PERF_SEL_Z_Cache_pmask_starves        = 0x0000006b,
DB_PERF_SEL_Z_Cache_frees                = 0x0000006c,
DB_PERF_SEL_Plane_Cache_misses           = 0x0000006d,
DB_PERF_SEL_Plane_Cache_hits             = 0x0000006e,
DB_PERF_SEL_Plane_Cache_flushes          = 0x0000006f,
DB_PERF_SEL_Plane_Cache_starves          = 0x00000070,
DB_PERF_SEL_Plane_Cache_frees            = 0x00000071,
DB_PERF_SEL_flush_expanded_stencil       = 0x00000072,
DB_PERF_SEL_flush_compressed_stencil     = 0x00000073,
DB_PERF_SEL_flush_single_stencil         = 0x00000074,
DB_PERF_SEL_planes_flushed               = 0x00000075,
DB_PERF_SEL_flush_1plane                 = 0x00000076,
DB_PERF_SEL_flush_2plane                 = 0x00000077,
DB_PERF_SEL_flush_3plane                 = 0x00000078,
DB_PERF_SEL_flush_4plane                 = 0x00000079,
DB_PERF_SEL_flush_5plane                 = 0x0000007a,
DB_PERF_SEL_flush_6plane                 = 0x0000007b,
DB_PERF_SEL_flush_7plane                 = 0x0000007c,
DB_PERF_SEL_flush_8plane                 = 0x0000007d,
DB_PERF_SEL_flush_9plane                 = 0x0000007e,
DB_PERF_SEL_flush_10plane                = 0x0000007f,
DB_PERF_SEL_flush_11plane                = 0x00000080,
DB_PERF_SEL_flush_12plane                = 0x00000081,
DB_PERF_SEL_flush_13plane                = 0x00000082,
DB_PERF_SEL_flush_14plane                = 0x00000083,
DB_PERF_SEL_flush_15plane                = 0x00000084,
DB_PERF_SEL_flush_16plane                = 0x00000085,
DB_PERF_SEL_flush_expanded_z             = 0x00000086,
DB_PERF_SEL_earlyZ_waiting_for_postZ_done  = 0x00000087,
DB_PERF_SEL_reZ_waiting_for_postZ_done   = 0x00000088,
DB_PERF_SEL_dk_tile_sends                = 0x00000089,
DB_PERF_SEL_dk_tile_busy                 = 0x0000008a,
DB_PERF_SEL_dk_tile_quad_starves         = 0x0000008b,
DB_PERF_SEL_dk_tile_stalls               = 0x0000008c,
DB_PERF_SEL_dk_squad_sends               = 0x0000008d,
DB_PERF_SEL_dk_squad_busy                = 0x0000008e,
DB_PERF_SEL_dk_squad_stalls              = 0x0000008f,
DB_PERF_SEL_Op_Pipe_Busy                 = 0x00000090,
DB_PERF_SEL_Op_Pipe_MC_Read_stall        = 0x00000091,
DB_PERF_SEL_qc_busy                      = 0x00000092,
DB_PERF_SEL_qc_xfc                       = 0x00000093,
DB_PERF_SEL_qc_conflicts                 = 0x00000094,
DB_PERF_SEL_qc_full_stall                = 0x00000095,
DB_PERF_SEL_qc_in_preZ_tile_stalls_postZ  = 0x00000096,
DB_PERF_SEL_qc_in_postZ_tile_stalls_preZ  = 0x00000097,
DB_PERF_SEL_tsc_insert_summarize_stall   = 0x00000098,
DB_PERF_SEL_tl_busy                      = 0x00000099,
DB_PERF_SEL_tl_dtc_read_starved          = 0x0000009a,
DB_PERF_SEL_tl_z_fetch_stall             = 0x0000009b,
DB_PERF_SEL_tl_stencil_stall             = 0x0000009c,
DB_PERF_SEL_tl_z_decompress_stall        = 0x0000009d,
DB_PERF_SEL_tl_stencil_locked_stall      = 0x0000009e,
DB_PERF_SEL_tl_events                    = 0x0000009f,
DB_PERF_SEL_tl_summarize_squads          = 0x000000a0,
DB_PERF_SEL_tl_flush_expand_squads       = 0x000000a1,
DB_PERF_SEL_tl_expand_squads             = 0x000000a2,
DB_PERF_SEL_tl_preZ_squads               = 0x000000a3,
DB_PERF_SEL_tl_postZ_squads              = 0x000000a4,
DB_PERF_SEL_tl_preZ_noop_squads          = 0x000000a5,
DB_PERF_SEL_tl_postZ_noop_squads         = 0x000000a6,
DB_PERF_SEL_tl_tile_ops                  = 0x000000a7,
DB_PERF_SEL_tl_in_xfc                    = 0x000000a8,
DB_PERF_SEL_tl_in_single_stencil_expand_stall  = 0x000000a9,
DB_PERF_SEL_tl_in_fast_z_stall           = 0x000000aa,
DB_PERF_SEL_tl_out_xfc                   = 0x000000ab,
DB_PERF_SEL_tl_out_squads                = 0x000000ac,
DB_PERF_SEL_zf_plane_multicycle          = 0x000000ad,
DB_PERF_SEL_PostZ_Samples_passing_Z      = 0x000000ae,
DB_PERF_SEL_PostZ_Samples_failing_Z      = 0x000000af,
DB_PERF_SEL_PostZ_Samples_failing_S      = 0x000000b0,
DB_PERF_SEL_PreZ_Samples_passing_Z       = 0x000000b1,
DB_PERF_SEL_PreZ_Samples_failing_Z       = 0x000000b2,
DB_PERF_SEL_PreZ_Samples_failing_S       = 0x000000b3,
DB_PERF_SEL_ts_tc_update_stall           = 0x000000b4,
DB_PERF_SEL_sc_kick_start                = 0x000000b5,
DB_PERF_SEL_sc_kick_end                  = 0x000000b6,
DB_PERF_SEL_clock_reg_active             = 0x000000b7,
DB_PERF_SEL_clock_main_active            = 0x000000b8,
DB_PERF_SEL_clock_mem_export_active      = 0x000000b9,
DB_PERF_SEL_esr_ps_out_busy              = 0x000000ba,
DB_PERF_SEL_esr_ps_lqf_busy              = 0x000000bb,
DB_PERF_SEL_esr_ps_lqf_stall             = 0x000000bc,
DB_PERF_SEL_etr_out_send                 = 0x000000bd,
DB_PERF_SEL_etr_out_busy                 = 0x000000be,
DB_PERF_SEL_etr_out_ltile_probe_fifo_full_stall  = 0x000000bf,
DB_PERF_SEL_etr_out_cb_tile_stall        = 0x000000c0,
DB_PERF_SEL_etr_out_esr_stall            = 0x000000c1,
DB_PERF_SEL_esr_ps_sqq_busy              = 0x000000c2,
DB_PERF_SEL_esr_ps_sqq_stall             = 0x000000c3,
DB_PERF_SEL_esr_eot_fwd_busy             = 0x000000c4,
DB_PERF_SEL_esr_eot_fwd_holding_squad    = 0x000000c5,
DB_PERF_SEL_esr_eot_fwd_forward          = 0x000000c6,
DB_PERF_SEL_esr_sqq_zi_busy              = 0x000000c7,
DB_PERF_SEL_esr_sqq_zi_stall             = 0x000000c8,
DB_PERF_SEL_postzl_sq_pt_busy            = 0x000000c9,
DB_PERF_SEL_postzl_sq_pt_stall           = 0x000000ca,
DB_PERF_SEL_postzl_se_busy               = 0x000000cb,
DB_PERF_SEL_postzl_se_stall              = 0x000000cc,
DB_PERF_SEL_postzl_partial_launch        = 0x000000cd,
DB_PERF_SEL_postzl_full_launch           = 0x000000ce,
DB_PERF_SEL_postzl_partial_waiting       = 0x000000cf,
DB_PERF_SEL_postzl_tile_mem_stall        = 0x000000d0,
DB_PERF_SEL_postzl_tile_init_stall       = 0x000000d1,
DB_PEFF_SEL_prezl_tile_mem_stall         = 0x000000d2,
DB_PERF_SEL_prezl_tile_init_stall        = 0x000000d3,
DB_PERF_SEL_dtt_sm_clash_stall           = 0x000000d4,
DB_PERF_SEL_dtt_sm_slot_stall            = 0x000000d5,
DB_PERF_SEL_dtt_sm_miss_stall            = 0x000000d6,
DB_PERF_SEL_mi_rdreq_busy                = 0x000000d7,
DB_PERF_SEL_mi_rdreq_stall               = 0x000000d8,
DB_PERF_SEL_mi_wrreq_busy                = 0x000000d9,
DB_PERF_SEL_mi_wrreq_stall               = 0x000000da,
DB_PERF_SEL_recomp_tile_to_1zplane_no_fastop  = 0x000000db,
DB_PERF_SEL_dkg_tile_rate_tile           = 0x000000dc,
DB_PERF_SEL_prezl_src_in_sends           = 0x000000dd,
DB_PERF_SEL_prezl_src_in_stall           = 0x000000de,
DB_PERF_SEL_prezl_src_in_squads          = 0x000000df,
DB_PERF_SEL_prezl_src_in_squads_unrolled  = 0x000000e0,
DB_PERF_SEL_prezl_src_in_tile_rate       = 0x000000e1,
DB_PERF_SEL_prezl_src_in_tile_rate_unrolled  = 0x000000e2,
DB_PERF_SEL_prezl_src_out_stall          = 0x000000e3,
DB_PERF_SEL_postzl_src_in_sends          = 0x000000e4,
DB_PERF_SEL_postzl_src_in_stall          = 0x000000e5,
DB_PERF_SEL_postzl_src_in_squads         = 0x000000e6,
DB_PERF_SEL_postzl_src_in_squads_unrolled  = 0x000000e7,
DB_PERF_SEL_postzl_src_in_tile_rate      = 0x000000e8,
DB_PERF_SEL_postzl_src_in_tile_rate_unrolled  = 0x000000e9,
DB_PERF_SEL_postzl_src_out_stall         = 0x000000ea,
DB_PERF_SEL_esr_ps_src_in_sends          = 0x000000eb,
DB_PERF_SEL_esr_ps_src_in_stall          = 0x000000ec,
DB_PERF_SEL_esr_ps_src_in_squads         = 0x000000ed,
DB_PERF_SEL_esr_ps_src_in_squads_unrolled  = 0x000000ee,
DB_PERF_SEL_esr_ps_src_in_tile_rate      = 0x000000ef,
DB_PERF_SEL_esr_ps_src_in_tile_rate_unrolled  = 0x000000f0,
DB_PERF_SEL_esr_ps_src_in_tile_rate_unrolled_to_pixel_rate  = 0x000000f1,
DB_PERF_SEL_esr_ps_src_out_stall         = 0x000000f2,
DB_PERF_SEL_depth_bounds_qtiles_culled   = 0x000000f3,
DB_PERF_SEL_PreZ_Samples_failing_DB      = 0x000000f4,
DB_PERF_SEL_PostZ_Samples_failing_DB     = 0x000000f5,
DB_PERF_SEL_flush_compressed             = 0x000000f6,
DB_PERF_SEL_flush_plane_le4              = 0x000000f7,
DB_PERF_SEL_tiles_z_fully_summarized     = 0x000000f8,
DB_PERF_SEL_tiles_stencil_fully_summarized  = 0x000000f9,
DB_PERF_SEL_tiles_z_clear_on_expclear    = 0x000000fa,
DB_PERF_SEL_tiles_s_clear_on_expclear    = 0x000000fb,
DB_PERF_SEL_tiles_decomp_on_expclear     = 0x000000fc,
DB_PERF_SEL_tiles_compressed_to_decompressed  = 0x000000fd,
DB_PERF_SEL_Op_Pipe_Prez_Busy            = 0x000000fe,
DB_PERF_SEL_Op_Pipe_Postz_Busy           = 0x000000ff,
DB_PERF_SEL_di_dt_stall                  = 0x00000100,
DB_PERF_SEL_DB_SC_quad_double_quad       = 0x00000101,
DB_PERF_SEL_SX_DB_quad_export_quads      = 0x00000102,
DB_PERF_SEL_SX_DB_quad_double_format     = 0x00000103,
DB_PERF_SEL_SX_DB_quad_fast_format       = 0x00000104,
DB_PERF_SEL_SX_DB_quad_slow_format       = 0x00000105,
DB_PERF_SEL_DB_CB_lquad_export_quads     = 0x00000106,
DB_PERF_SEL_DB_CB_lquad_double_format    = 0x00000107,
DB_PERF_SEL_DB_CB_lquad_fast_format      = 0x00000108,
DB_PERF_SEL_DB_CB_lquad_slow_format      = 0x00000109,
DB_PERF_SEL_CB_DB_rdreq_sends            = 0x0000010a,
DB_PERF_SEL_CB_DB_rdreq_prt_sends        = 0x0000010b,
DB_PERF_SEL_CB_DB_wrreq_sends            = 0x0000010c,
DB_PERF_SEL_CB_DB_wrreq_prt_sends        = 0x0000010d,
DB_PERF_SEL_DB_CB_rdret_ack              = 0x0000010e,
DB_PERF_SEL_DB_CB_rdret_nack             = 0x0000010f,
DB_PERF_SEL_DB_CB_wrret_ack              = 0x00000110,
DB_PERF_SEL_DB_CB_wrret_nack             = 0x00000111,
DB_PERF_SEL_DFSM_squads_in               = 0x00000112,
DB_PERF_SEL_DFSM_full_cleared_squads_out  = 0x00000113,
DB_PERF_SEL_DFSM_quads_in                = 0x00000114,
DB_PERF_SEL_DFSM_fully_cleared_quads_out  = 0x00000115,
DB_PERF_SEL_DFSM_lit_pixels_in           = 0x00000116,
DB_PERF_SEL_DFSM_fully_cleared_pixels_out  = 0x00000117,
DB_PERF_SEL_DFSM_lit_samples_in          = 0x00000118,
DB_PERF_SEL_DFSM_lit_samples_out         = 0x00000119,
DB_PERF_SEL_DFSM_cycles_above_watermark  = 0x0000011a,
DB_PERF_SEL_DFSM_cant_accept_squads_but_not_stalled_by_downstream  = 0x0000011b,
DB_PERF_SEL_DFSM_stalled_by_downstream   = 0x0000011c,
DB_PERF_SEL_DFSM_evicted_squads_above_watermark  = 0x0000011d,
DB_PERF_SEL_DFSM_collisions_due_to_POPS_overflow  = 0x0000011e,
DB_PERF_SEL_DFSM_collisions_detected_within_POPS_FIFO  = 0x0000011f,
DB_PERF_SEL_DFSM_evicted_squads_due_to_prim_watermark  = 0x00000120,
} PerfCounter_Vals;

/*
 * RingCounterControl enum
 */

typedef enum RingCounterControl {
COUNTER_RING_SPLIT                       = 0x00000000,
COUNTER_RING_0                           = 0x00000001,
COUNTER_RING_1                           = 0x00000002,
} RingCounterControl;

/*
 * DbMemArbWatermarks enum
 */

typedef enum DbMemArbWatermarks {
TRANSFERRED_64_BYTES                     = 0x00000000,
TRANSFERRED_128_BYTES                    = 0x00000001,
TRANSFERRED_256_BYTES                    = 0x00000002,
TRANSFERRED_512_BYTES                    = 0x00000003,
TRANSFERRED_1024_BYTES                   = 0x00000004,
TRANSFERRED_2048_BYTES                   = 0x00000005,
TRANSFERRED_4096_BYTES                   = 0x00000006,
TRANSFERRED_8192_BYTES                   = 0x00000007,
} DbMemArbWatermarks;

/*
 * DFSMFlushEvents enum
 */

typedef enum DFSMFlushEvents {
DB_FLUSH_AND_INV_DB_DATA_TS              = 0x00000000,
DB_FLUSH_AND_INV_DB_META                 = 0x00000001,
DB_CACHE_FLUSH                           = 0x00000002,
DB_CACHE_FLUSH_TS                        = 0x00000003,
DB_CACHE_FLUSH_AND_INV_EVENT             = 0x00000004,
DB_CACHE_FLUSH_AND_INV_TS_EVENT          = 0x00000005,
} DFSMFlushEvents;

/*
 * PixelPipeCounterId enum
 */

typedef enum PixelPipeCounterId {
PIXEL_PIPE_OCCLUSION_COUNT_0             = 0x00000000,
PIXEL_PIPE_OCCLUSION_COUNT_1             = 0x00000001,
PIXEL_PIPE_OCCLUSION_COUNT_2             = 0x00000002,
PIXEL_PIPE_OCCLUSION_COUNT_3             = 0x00000003,
PIXEL_PIPE_SCREEN_MIN_EXTENTS_0          = 0x00000004,
PIXEL_PIPE_SCREEN_MAX_EXTENTS_0          = 0x00000005,
PIXEL_PIPE_SCREEN_MIN_EXTENTS_1          = 0x00000006,
PIXEL_PIPE_SCREEN_MAX_EXTENTS_1          = 0x00000007,
} PixelPipeCounterId;

/*
 * PixelPipeStride enum
 */

typedef enum PixelPipeStride {
PIXEL_PIPE_STRIDE_32_BITS                = 0x00000000,
PIXEL_PIPE_STRIDE_64_BITS                = 0x00000001,
PIXEL_PIPE_STRIDE_128_BITS               = 0x00000002,
PIXEL_PIPE_STRIDE_256_BITS               = 0x00000003,
} PixelPipeStride;

/*******************************************************
 * TA Enums
 *******************************************************/

/*
 * TEX_BORDER_COLOR_TYPE enum
 */

typedef enum TEX_BORDER_COLOR_TYPE {
TEX_BorderColor_TransparentBlack         = 0x00000000,
TEX_BorderColor_OpaqueBlack              = 0x00000001,
TEX_BorderColor_OpaqueWhite              = 0x00000002,
TEX_BorderColor_Register                 = 0x00000003,
} TEX_BORDER_COLOR_TYPE;

/*
 * TEX_CHROMA_KEY enum
 */

typedef enum TEX_CHROMA_KEY {
TEX_ChromaKey_Disabled                   = 0x00000000,
TEX_ChromaKey_Kill                       = 0x00000001,
TEX_ChromaKey_Blend                      = 0x00000002,
TEX_ChromaKey_RESERVED_3                 = 0x00000003,
} TEX_CHROMA_KEY;

/*
 * TEX_CLAMP enum
 */

typedef enum TEX_CLAMP {
TEX_Clamp_Repeat                         = 0x00000000,
TEX_Clamp_Mirror                         = 0x00000001,
TEX_Clamp_ClampToLast                    = 0x00000002,
TEX_Clamp_MirrorOnceToLast               = 0x00000003,
TEX_Clamp_ClampHalfToBorder              = 0x00000004,
TEX_Clamp_MirrorOnceHalfToBorder         = 0x00000005,
TEX_Clamp_ClampToBorder                  = 0x00000006,
TEX_Clamp_MirrorOnceToBorder             = 0x00000007,
} TEX_CLAMP;

/*
 * TEX_COORD_TYPE enum
 */

typedef enum TEX_COORD_TYPE {
TEX_CoordType_Unnormalized               = 0x00000000,
TEX_CoordType_Normalized                 = 0x00000001,
} TEX_COORD_TYPE;

/*
 * TEX_DEPTH_COMPARE_FUNCTION enum
 */

typedef enum TEX_DEPTH_COMPARE_FUNCTION {
TEX_DepthCompareFunction_Never           = 0x00000000,
TEX_DepthCompareFunction_Less            = 0x00000001,
TEX_DepthCompareFunction_Equal           = 0x00000002,
TEX_DepthCompareFunction_LessEqual       = 0x00000003,
TEX_DepthCompareFunction_Greater         = 0x00000004,
TEX_DepthCompareFunction_NotEqual        = 0x00000005,
TEX_DepthCompareFunction_GreaterEqual    = 0x00000006,
TEX_DepthCompareFunction_Always          = 0x00000007,
} TEX_DEPTH_COMPARE_FUNCTION;

/*
 * TEX_DIM enum
 */

typedef enum TEX_DIM {
TEX_Dim_1D                               = 0x00000000,
TEX_Dim_2D                               = 0x00000001,
TEX_Dim_3D                               = 0x00000002,
TEX_Dim_CubeMap                          = 0x00000003,
TEX_Dim_1DArray                          = 0x00000004,
TEX_Dim_2DArray                          = 0x00000005,
TEX_Dim_2D_MSAA                          = 0x00000006,
TEX_Dim_2DArray_MSAA                     = 0x00000007,
} TEX_DIM;

/*
 * TEX_FORMAT_COMP enum
 */

typedef enum TEX_FORMAT_COMP {
TEX_FormatComp_Unsigned                  = 0x00000000,
TEX_FormatComp_Signed                    = 0x00000001,
TEX_FormatComp_UnsignedBiased            = 0x00000002,
TEX_FormatComp_RESERVED_3                = 0x00000003,
} TEX_FORMAT_COMP;

/*
 * TEX_MAX_ANISO_RATIO enum
 */

typedef enum TEX_MAX_ANISO_RATIO {
TEX_MaxAnisoRatio_1to1                   = 0x00000000,
TEX_MaxAnisoRatio_2to1                   = 0x00000001,
TEX_MaxAnisoRatio_4to1                   = 0x00000002,
TEX_MaxAnisoRatio_8to1                   = 0x00000003,
TEX_MaxAnisoRatio_16to1                  = 0x00000004,
TEX_MaxAnisoRatio_RESERVED_5             = 0x00000005,
TEX_MaxAnisoRatio_RESERVED_6             = 0x00000006,
TEX_MaxAnisoRatio_RESERVED_7             = 0x00000007,
} TEX_MAX_ANISO_RATIO;

/*
 * TEX_MIP_FILTER enum
 */

typedef enum TEX_MIP_FILTER {
TEX_MipFilter_None                       = 0x00000000,
TEX_MipFilter_Point                      = 0x00000001,
TEX_MipFilter_Linear                     = 0x00000002,
TEX_MipFilter_Point_Aniso_Adj            = 0x00000003,
} TEX_MIP_FILTER;

/*
 * TEX_REQUEST_SIZE enum
 */

typedef enum TEX_REQUEST_SIZE {
TEX_RequestSize_32B                      = 0x00000000,
TEX_RequestSize_64B                      = 0x00000001,
TEX_RequestSize_128B                     = 0x00000002,
TEX_RequestSize_2X64B                    = 0x00000003,
} TEX_REQUEST_SIZE;

/*
 * TEX_SAMPLER_TYPE enum
 */

typedef enum TEX_SAMPLER_TYPE {
TEX_SamplerType_Invalid                  = 0x00000000,
TEX_SamplerType_Valid                    = 0x00000001,
} TEX_SAMPLER_TYPE;

/*
 * TEX_XY_FILTER enum
 */

typedef enum TEX_XY_FILTER {
TEX_XYFilter_Point                       = 0x00000000,
TEX_XYFilter_Linear                      = 0x00000001,
TEX_XYFilter_AnisoPoint                  = 0x00000002,
TEX_XYFilter_AnisoLinear                 = 0x00000003,
} TEX_XY_FILTER;

/*
 * TEX_Z_FILTER enum
 */

typedef enum TEX_Z_FILTER {
TEX_ZFilter_None                         = 0x00000000,
TEX_ZFilter_Point                        = 0x00000001,
TEX_ZFilter_Linear                       = 0x00000002,
TEX_ZFilter_RESERVED_3                   = 0x00000003,
} TEX_Z_FILTER;

/*
 * VTX_CLAMP enum
 */

typedef enum VTX_CLAMP {
VTX_Clamp_ClampToZero                    = 0x00000000,
VTX_Clamp_ClampToNAN                     = 0x00000001,
} VTX_CLAMP;

/*
 * VTX_FETCH_TYPE enum
 */

typedef enum VTX_FETCH_TYPE {
VTX_FetchType_VertexData                 = 0x00000000,
VTX_FetchType_InstanceData               = 0x00000001,
VTX_FetchType_NoIndexOffset              = 0x00000002,
VTX_FetchType_RESERVED_3                 = 0x00000003,
} VTX_FETCH_TYPE;

/*
 * VTX_FORMAT_COMP_ALL enum
 */

typedef enum VTX_FORMAT_COMP_ALL {
VTX_FormatCompAll_Unsigned               = 0x00000000,
VTX_FormatCompAll_Signed                 = 0x00000001,
} VTX_FORMAT_COMP_ALL;

/*
 * VTX_MEM_REQUEST_SIZE enum
 */

typedef enum VTX_MEM_REQUEST_SIZE {
VTX_MemRequestSize_32B                   = 0x00000000,
VTX_MemRequestSize_64B                   = 0x00000001,
} VTX_MEM_REQUEST_SIZE;

/*
 * TVX_DATA_FORMAT enum
 */

typedef enum TVX_DATA_FORMAT {
TVX_FMT_INVALID                          = 0x00000000,
TVX_FMT_8                                = 0x00000001,
TVX_FMT_4_4                              = 0x00000002,
TVX_FMT_3_3_2                            = 0x00000003,
TVX_FMT_RESERVED_4                       = 0x00000004,
TVX_FMT_16                               = 0x00000005,
TVX_FMT_16_FLOAT                         = 0x00000006,
TVX_FMT_8_8                              = 0x00000007,
TVX_FMT_5_6_5                            = 0x00000008,
TVX_FMT_6_5_5                            = 0x00000009,
TVX_FMT_1_5_5_5                          = 0x0000000a,
TVX_FMT_4_4_4_4                          = 0x0000000b,
TVX_FMT_5_5_5_1                          = 0x0000000c,
TVX_FMT_32                               = 0x0000000d,
TVX_FMT_32_FLOAT                         = 0x0000000e,
TVX_FMT_16_16                            = 0x0000000f,
TVX_FMT_16_16_FLOAT                      = 0x00000010,
TVX_FMT_8_24                             = 0x00000011,
TVX_FMT_8_24_FLOAT                       = 0x00000012,
TVX_FMT_24_8                             = 0x00000013,
TVX_FMT_24_8_FLOAT                       = 0x00000014,
TVX_FMT_10_11_11                         = 0x00000015,
TVX_FMT_10_11_11_FLOAT                   = 0x00000016,
TVX_FMT_11_11_10                         = 0x00000017,
TVX_FMT_11_11_10_FLOAT                   = 0x00000018,
TVX_FMT_2_10_10_10                       = 0x00000019,
TVX_FMT_8_8_8_8                          = 0x0000001a,
TVX_FMT_10_10_10_2                       = 0x0000001b,
TVX_FMT_X24_8_32_FLOAT                   = 0x0000001c,
TVX_FMT_32_32                            = 0x0000001d,
TVX_FMT_32_32_FLOAT                      = 0x0000001e,
TVX_FMT_16_16_16_16                      = 0x0000001f,
TVX_FMT_16_16_16_16_FLOAT                = 0x00000020,
TVX_FMT_RESERVED_33                      = 0x00000021,
TVX_FMT_32_32_32_32                      = 0x00000022,
TVX_FMT_32_32_32_32_FLOAT                = 0x00000023,
TVX_FMT_RESERVED_36                      = 0x00000024,
TVX_FMT_1                                = 0x00000025,
TVX_FMT_1_REVERSED                       = 0x00000026,
TVX_FMT_GB_GR                            = 0x00000027,
TVX_FMT_BG_RG                            = 0x00000028,
TVX_FMT_32_AS_8                          = 0x00000029,
TVX_FMT_32_AS_8_8                        = 0x0000002a,
TVX_FMT_5_9_9_9_SHAREDEXP                = 0x0000002b,
TVX_FMT_8_8_8                            = 0x0000002c,
TVX_FMT_16_16_16                         = 0x0000002d,
TVX_FMT_16_16_16_FLOAT                   = 0x0000002e,
TVX_FMT_32_32_32                         = 0x0000002f,
TVX_FMT_32_32_32_FLOAT                   = 0x00000030,
TVX_FMT_BC1                              = 0x00000031,
TVX_FMT_BC2                              = 0x00000032,
TVX_FMT_BC3                              = 0x00000033,
TVX_FMT_BC4                              = 0x00000034,
TVX_FMT_BC5                              = 0x00000035,
TVX_FMT_APC0                             = 0x00000036,
TVX_FMT_APC1                             = 0x00000037,
TVX_FMT_APC2                             = 0x00000038,
TVX_FMT_APC3                             = 0x00000039,
TVX_FMT_APC4                             = 0x0000003a,
TVX_FMT_APC5                             = 0x0000003b,
TVX_FMT_APC6                             = 0x0000003c,
TVX_FMT_APC7                             = 0x0000003d,
TVX_FMT_CTX1                             = 0x0000003e,
TVX_FMT_RESERVED_63                      = 0x0000003f,
} TVX_DATA_FORMAT;

/*
 * TVX_DST_SEL enum
 */

typedef enum TVX_DST_SEL {
TVX_DstSel_X                             = 0x00000000,
TVX_DstSel_Y                             = 0x00000001,
TVX_DstSel_Z                             = 0x00000002,
TVX_DstSel_W                             = 0x00000003,
TVX_DstSel_0f                            = 0x00000004,
TVX_DstSel_1f                            = 0x00000005,
TVX_DstSel_RESERVED_6                    = 0x00000006,
TVX_DstSel_Mask                          = 0x00000007,
} TVX_DST_SEL;

/*
 * TVX_ENDIAN_SWAP enum
 */

typedef enum TVX_ENDIAN_SWAP {
TVX_EndianSwap_None                      = 0x00000000,
TVX_EndianSwap_8in16                     = 0x00000001,
TVX_EndianSwap_8in32                     = 0x00000002,
TVX_EndianSwap_8in64                     = 0x00000003,
} TVX_ENDIAN_SWAP;

/*
 * TVX_INST enum
 */

typedef enum TVX_INST {
TVX_Inst_NormalVertexFetch               = 0x00000000,
TVX_Inst_SemanticVertexFetch             = 0x00000001,
TVX_Inst_RESERVED_2                      = 0x00000002,
TVX_Inst_LD                              = 0x00000003,
TVX_Inst_GetTextureResInfo               = 0x00000004,
TVX_Inst_GetNumberOfSamples              = 0x00000005,
TVX_Inst_GetLOD                          = 0x00000006,
TVX_Inst_GetGradientsH                   = 0x00000007,
TVX_Inst_GetGradientsV                   = 0x00000008,
TVX_Inst_SetTextureOffsets               = 0x00000009,
TVX_Inst_KeepGradients                   = 0x0000000a,
TVX_Inst_SetGradientsH                   = 0x0000000b,
TVX_Inst_SetGradientsV                   = 0x0000000c,
TVX_Inst_Pass                            = 0x0000000d,
TVX_Inst_GetBufferResInfo                = 0x0000000e,
TVX_Inst_RESERVED_15                     = 0x0000000f,
TVX_Inst_Sample                          = 0x00000010,
TVX_Inst_Sample_L                        = 0x00000011,
TVX_Inst_Sample_LB                       = 0x00000012,
TVX_Inst_Sample_LZ                       = 0x00000013,
TVX_Inst_Sample_G                        = 0x00000014,
TVX_Inst_Gather4                         = 0x00000015,
TVX_Inst_Sample_G_LB                     = 0x00000016,
TVX_Inst_Gather4_O                       = 0x00000017,
TVX_Inst_Sample_C                        = 0x00000018,
TVX_Inst_Sample_C_L                      = 0x00000019,
TVX_Inst_Sample_C_LB                     = 0x0000001a,
TVX_Inst_Sample_C_LZ                     = 0x0000001b,
TVX_Inst_Sample_C_G                      = 0x0000001c,
TVX_Inst_Gather4_C                       = 0x0000001d,
TVX_Inst_Sample_C_G_LB                   = 0x0000001e,
TVX_Inst_Gather4_C_O                     = 0x0000001f,
} TVX_INST;

/*
 * TVX_NUM_FORMAT_ALL enum
 */

typedef enum TVX_NUM_FORMAT_ALL {
TVX_NumFormatAll_Norm                    = 0x00000000,
TVX_NumFormatAll_Int                     = 0x00000001,
TVX_NumFormatAll_Scaled                  = 0x00000002,
TVX_NumFormatAll_RESERVED_3              = 0x00000003,
} TVX_NUM_FORMAT_ALL;

/*
 * TVX_SRC_SEL enum
 */

typedef enum TVX_SRC_SEL {
TVX_SrcSel_X                             = 0x00000000,
TVX_SrcSel_Y                             = 0x00000001,
TVX_SrcSel_Z                             = 0x00000002,
TVX_SrcSel_W                             = 0x00000003,
TVX_SrcSel_0f                            = 0x00000004,
TVX_SrcSel_1f                            = 0x00000005,
} TVX_SRC_SEL;

/*
 * TVX_SRF_MODE_ALL enum
 */

typedef enum TVX_SRF_MODE_ALL {
TVX_SRFModeAll_ZCMO                      = 0x00000000,
TVX_SRFModeAll_NZ                        = 0x00000001,
} TVX_SRF_MODE_ALL;

/*
 * TVX_TYPE enum
 */

typedef enum TVX_TYPE {
TVX_Type_InvalidTextureResource          = 0x00000000,
TVX_Type_InvalidVertexBuffer             = 0x00000001,
TVX_Type_ValidTextureResource            = 0x00000002,
TVX_Type_ValidVertexBuffer               = 0x00000003,
} TVX_TYPE;

/*******************************************************
 * PA Enums
 *******************************************************/

/*
 * SU_PERFCNT_SEL enum
 */

typedef enum SU_PERFCNT_SEL {
PERF_PAPC_PASX_REQ                       = 0x00000000,
PERF_PAPC_PASX_DISABLE_PIPE              = 0x00000001,
PERF_PAPC_PASX_FIRST_VECTOR              = 0x00000002,
PERF_PAPC_PASX_SECOND_VECTOR             = 0x00000003,
PERF_PAPC_PASX_FIRST_DEAD                = 0x00000004,
PERF_PAPC_PASX_SECOND_DEAD               = 0x00000005,
PERF_PAPC_PASX_VTX_KILL_DISCARD          = 0x00000006,
PERF_PAPC_PASX_VTX_NAN_DISCARD           = 0x00000007,
PERF_PAPC_PA_INPUT_PRIM                  = 0x00000008,
PERF_PAPC_PA_INPUT_NULL_PRIM             = 0x00000009,
PERF_PAPC_PA_INPUT_EVENT_FLAG            = 0x0000000a,
PERF_PAPC_PA_INPUT_FIRST_PRIM_SLOT       = 0x0000000b,
PERF_PAPC_PA_INPUT_END_OF_PACKET         = 0x0000000c,
PERF_PAPC_PA_INPUT_EXTENDED_EVENT        = 0x0000000d,
PERF_PAPC_CLPR_CULL_PRIM                 = 0x0000000e,
PERF_PAPC_CLPR_VVUCP_CULL_PRIM           = 0x0000000f,
PERF_PAPC_CLPR_VV_CULL_PRIM              = 0x00000010,
PERF_PAPC_CLPR_UCP_CULL_PRIM             = 0x00000011,
PERF_PAPC_CLPR_VTX_KILL_CULL_PRIM        = 0x00000012,
PERF_PAPC_CLPR_VTX_NAN_CULL_PRIM         = 0x00000013,
PERF_PAPC_CLPR_CULL_TO_NULL_PRIM         = 0x00000014,
PERF_PAPC_CLPR_VVUCP_CLIP_PRIM           = 0x00000015,
PERF_PAPC_CLPR_VV_CLIP_PRIM              = 0x00000016,
PERF_PAPC_CLPR_UCP_CLIP_PRIM             = 0x00000017,
PERF_PAPC_CLPR_POINT_CLIP_CANDIDATE      = 0x00000018,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_1          = 0x00000019,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_2          = 0x0000001a,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_3          = 0x0000001b,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_4          = 0x0000001c,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_5_8        = 0x0000001d,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_9_12       = 0x0000001e,
PERF_PAPC_CLPR_CLIP_PLANE_NEAR           = 0x0000001f,
PERF_PAPC_CLPR_CLIP_PLANE_FAR            = 0x00000020,
PERF_PAPC_CLPR_CLIP_PLANE_LEFT           = 0x00000021,
PERF_PAPC_CLPR_CLIP_PLANE_RIGHT          = 0x00000022,
PERF_PAPC_CLPR_CLIP_PLANE_TOP            = 0x00000023,
PERF_PAPC_CLPR_CLIP_PLANE_BOTTOM         = 0x00000024,
PERF_PAPC_CLPR_GSC_KILL_CULL_PRIM        = 0x00000025,
PERF_PAPC_CLPR_RASTER_KILL_CULL_PRIM     = 0x00000026,
PERF_PAPC_CLSM_NULL_PRIM                 = 0x00000027,
PERF_PAPC_CLSM_TOTALLY_VISIBLE_PRIM      = 0x00000028,
PERF_PAPC_CLSM_CULL_TO_NULL_PRIM         = 0x00000029,
PERF_PAPC_CLSM_OUT_PRIM_CNT_1            = 0x0000002a,
PERF_PAPC_CLSM_OUT_PRIM_CNT_2            = 0x0000002b,
PERF_PAPC_CLSM_OUT_PRIM_CNT_3            = 0x0000002c,
PERF_PAPC_CLSM_OUT_PRIM_CNT_4            = 0x0000002d,
PERF_PAPC_CLSM_OUT_PRIM_CNT_5_8          = 0x0000002e,
PERF_PAPC_CLSM_OUT_PRIM_CNT_9_13         = 0x0000002f,
PERF_PAPC_CLIPGA_VTE_KILL_PRIM           = 0x00000030,
PERF_PAPC_SU_INPUT_PRIM                  = 0x00000031,
PERF_PAPC_SU_INPUT_CLIP_PRIM             = 0x00000032,
PERF_PAPC_SU_INPUT_NULL_PRIM             = 0x00000033,
PERF_PAPC_SU_INPUT_PRIM_DUAL             = 0x00000034,
PERF_PAPC_SU_INPUT_CLIP_PRIM_DUAL        = 0x00000035,
PERF_PAPC_SU_ZERO_AREA_CULL_PRIM         = 0x00000036,
PERF_PAPC_SU_BACK_FACE_CULL_PRIM         = 0x00000037,
PERF_PAPC_SU_FRONT_FACE_CULL_PRIM        = 0x00000038,
PERF_PAPC_SU_POLYMODE_FACE_CULL          = 0x00000039,
PERF_PAPC_SU_POLYMODE_BACK_CULL          = 0x0000003a,
PERF_PAPC_SU_POLYMODE_FRONT_CULL         = 0x0000003b,
PERF_PAPC_SU_POLYMODE_INVALID_FILL       = 0x0000003c,
PERF_PAPC_SU_OUTPUT_PRIM                 = 0x0000003d,
PERF_PAPC_SU_OUTPUT_CLIP_PRIM            = 0x0000003e,
PERF_PAPC_SU_OUTPUT_NULL_PRIM            = 0x0000003f,
PERF_PAPC_SU_OUTPUT_EVENT_FLAG           = 0x00000040,
PERF_PAPC_SU_OUTPUT_FIRST_PRIM_SLOT      = 0x00000041,
PERF_PAPC_SU_OUTPUT_END_OF_PACKET        = 0x00000042,
PERF_PAPC_SU_OUTPUT_POLYMODE_FACE        = 0x00000043,
PERF_PAPC_SU_OUTPUT_POLYMODE_BACK        = 0x00000044,
PERF_PAPC_SU_OUTPUT_POLYMODE_FRONT       = 0x00000045,
PERF_PAPC_SU_OUT_CLIP_POLYMODE_FACE      = 0x00000046,
PERF_PAPC_SU_OUT_CLIP_POLYMODE_BACK      = 0x00000047,
PERF_PAPC_SU_OUT_CLIP_POLYMODE_FRONT     = 0x00000048,
PERF_PAPC_SU_OUTPUT_PRIM_DUAL            = 0x00000049,
PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL       = 0x0000004a,
PERF_PAPC_SU_OUTPUT_POLYMODE_DUAL        = 0x0000004b,
PERF_PAPC_SU_OUTPUT_CLIP_POLYMODE_DUAL   = 0x0000004c,
PERF_PAPC_PASX_REQ_IDLE                  = 0x0000004d,
PERF_PAPC_PASX_REQ_BUSY                  = 0x0000004e,
PERF_PAPC_PASX_REQ_STALLED               = 0x0000004f,
PERF_PAPC_PASX_REC_IDLE                  = 0x00000050,
PERF_PAPC_PASX_REC_BUSY                  = 0x00000051,
PERF_PAPC_PASX_REC_STARVED_SX            = 0x00000052,
PERF_PAPC_PASX_REC_STALLED               = 0x00000053,
PERF_PAPC_PASX_REC_STALLED_POS_MEM       = 0x00000054,
PERF_PAPC_PASX_REC_STALLED_CCGSM_IN      = 0x00000055,
PERF_PAPC_CCGSM_IDLE                     = 0x00000056,
PERF_PAPC_CCGSM_BUSY                     = 0x00000057,
PERF_PAPC_CCGSM_STALLED                  = 0x00000058,
PERF_PAPC_CLPRIM_IDLE                    = 0x00000059,
PERF_PAPC_CLPRIM_BUSY                    = 0x0000005a,
PERF_PAPC_CLPRIM_STALLED                 = 0x0000005b,
PERF_PAPC_CLPRIM_STARVED_CCGSM           = 0x0000005c,
PERF_PAPC_CLIPSM_IDLE                    = 0x0000005d,
PERF_PAPC_CLIPSM_BUSY                    = 0x0000005e,
PERF_PAPC_CLIPSM_WAIT_CLIP_VERT_ENGH     = 0x0000005f,
PERF_PAPC_CLIPSM_WAIT_HIGH_PRI_SEQ       = 0x00000060,
PERF_PAPC_CLIPSM_WAIT_CLIPGA             = 0x00000061,
PERF_PAPC_CLIPSM_WAIT_AVAIL_VTE_CLIP     = 0x00000062,
PERF_PAPC_CLIPSM_WAIT_CLIP_OUTSM         = 0x00000063,
PERF_PAPC_CLIPGA_IDLE                    = 0x00000064,
PERF_PAPC_CLIPGA_BUSY                    = 0x00000065,
PERF_PAPC_CLIPGA_STARVED_VTE_CLIP        = 0x00000066,
PERF_PAPC_CLIPGA_STALLED                 = 0x00000067,
PERF_PAPC_CLIP_IDLE                      = 0x00000068,
PERF_PAPC_CLIP_BUSY                      = 0x00000069,
PERF_PAPC_SU_IDLE                        = 0x0000006a,
PERF_PAPC_SU_BUSY                        = 0x0000006b,
PERF_PAPC_SU_STARVED_CLIP                = 0x0000006c,
PERF_PAPC_SU_STALLED_SC                  = 0x0000006d,
PERF_PAPC_CL_DYN_SCLK_VLD                = 0x0000006e,
PERF_PAPC_SU_DYN_SCLK_VLD                = 0x0000006f,
PERF_PAPC_PA_REG_SCLK_VLD                = 0x00000070,
PERF_PAPC_SU_MULTI_GPU_PRIM_FILTER_CULL  = 0x00000071,
PERF_PAPC_PASX_SE0_REQ                   = 0x00000072,
PERF_PAPC_PASX_SE1_REQ                   = 0x00000073,
PERF_PAPC_PASX_SE0_FIRST_VECTOR          = 0x00000074,
PERF_PAPC_PASX_SE0_SECOND_VECTOR         = 0x00000075,
PERF_PAPC_PASX_SE1_FIRST_VECTOR          = 0x00000076,
PERF_PAPC_PASX_SE1_SECOND_VECTOR         = 0x00000077,
PERF_PAPC_SU_SE0_PRIM_FILTER_CULL        = 0x00000078,
PERF_PAPC_SU_SE1_PRIM_FILTER_CULL        = 0x00000079,
PERF_PAPC_SU_SE01_PRIM_FILTER_CULL       = 0x0000007a,
PERF_PAPC_SU_SE0_OUTPUT_PRIM             = 0x0000007b,
PERF_PAPC_SU_SE1_OUTPUT_PRIM             = 0x0000007c,
PERF_PAPC_SU_SE01_OUTPUT_PRIM            = 0x0000007d,
PERF_PAPC_SU_SE0_OUTPUT_NULL_PRIM        = 0x0000007e,
PERF_PAPC_SU_SE1_OUTPUT_NULL_PRIM        = 0x0000007f,
PERF_PAPC_SU_SE01_OUTPUT_NULL_PRIM       = 0x00000080,
PERF_PAPC_SU_SE0_OUTPUT_FIRST_PRIM_SLOT  = 0x00000081,
PERF_PAPC_SU_SE1_OUTPUT_FIRST_PRIM_SLOT  = 0x00000082,
PERF_PAPC_SU_SE0_STALLED_SC              = 0x00000083,
PERF_PAPC_SU_SE1_STALLED_SC              = 0x00000084,
PERF_PAPC_SU_SE01_STALLED_SC             = 0x00000085,
PERF_PAPC_CLSM_CLIPPING_PRIM             = 0x00000086,
PERF_PAPC_SU_CULLED_PRIM                 = 0x00000087,
PERF_PAPC_SU_OUTPUT_EOPG                 = 0x00000088,
PERF_PAPC_SU_SE2_PRIM_FILTER_CULL        = 0x00000089,
PERF_PAPC_SU_SE3_PRIM_FILTER_CULL        = 0x0000008a,
PERF_PAPC_SU_SE2_OUTPUT_PRIM             = 0x0000008b,
PERF_PAPC_SU_SE3_OUTPUT_PRIM             = 0x0000008c,
PERF_PAPC_SU_SE2_OUTPUT_NULL_PRIM        = 0x0000008d,
PERF_PAPC_SU_SE3_OUTPUT_NULL_PRIM        = 0x0000008e,
PERF_PAPC_SU_SE0_OUTPUT_END_OF_PACKET    = 0x0000008f,
PERF_PAPC_SU_SE1_OUTPUT_END_OF_PACKET    = 0x00000090,
PERF_PAPC_SU_SE2_OUTPUT_END_OF_PACKET    = 0x00000091,
PERF_PAPC_SU_SE3_OUTPUT_END_OF_PACKET    = 0x00000092,
PERF_PAPC_SU_SE0_OUTPUT_EOPG             = 0x00000093,
PERF_PAPC_SU_SE1_OUTPUT_EOPG             = 0x00000094,
PERF_PAPC_SU_SE2_OUTPUT_EOPG             = 0x00000095,
PERF_PAPC_SU_SE3_OUTPUT_EOPG             = 0x00000096,
PERF_PAPC_SU_SE2_STALLED_SC              = 0x00000097,
PERF_PAPC_SU_SE3_STALLED_SC              = 0x00000098,
} SU_PERFCNT_SEL;

/*
 * SC_PERFCNT_SEL enum
 */

typedef enum SC_PERFCNT_SEL {
SC_SRPS_WINDOW_VALID                     = 0x00000000,
SC_PSSW_WINDOW_VALID                     = 0x00000001,
SC_TPQZ_WINDOW_VALID                     = 0x00000002,
SC_QZQP_WINDOW_VALID                     = 0x00000003,
SC_TRPK_WINDOW_VALID                     = 0x00000004,
SC_SRPS_WINDOW_VALID_BUSY                = 0x00000005,
SC_PSSW_WINDOW_VALID_BUSY                = 0x00000006,
SC_TPQZ_WINDOW_VALID_BUSY                = 0x00000007,
SC_QZQP_WINDOW_VALID_BUSY                = 0x00000008,
SC_TRPK_WINDOW_VALID_BUSY                = 0x00000009,
SC_STARVED_BY_PA                         = 0x0000000a,
SC_STALLED_BY_PRIMFIFO                   = 0x0000000b,
SC_STALLED_BY_DB_TILE                    = 0x0000000c,
SC_STARVED_BY_DB_TILE                    = 0x0000000d,
SC_STALLED_BY_TILEORDERFIFO              = 0x0000000e,
SC_STALLED_BY_TILEFIFO                   = 0x0000000f,
SC_STALLED_BY_DB_QUAD                    = 0x00000010,
SC_STARVED_BY_DB_QUAD                    = 0x00000011,
SC_STALLED_BY_QUADFIFO                   = 0x00000012,
SC_STALLED_BY_BCI                        = 0x00000013,
SC_STALLED_BY_SPI                        = 0x00000014,
SC_SCISSOR_DISCARD                       = 0x00000015,
SC_BB_DISCARD                            = 0x00000016,
SC_SUPERTILE_COUNT                       = 0x00000017,
SC_SUPERTILE_PER_PRIM_H0                 = 0x00000018,
SC_SUPERTILE_PER_PRIM_H1                 = 0x00000019,
SC_SUPERTILE_PER_PRIM_H2                 = 0x0000001a,
SC_SUPERTILE_PER_PRIM_H3                 = 0x0000001b,
SC_SUPERTILE_PER_PRIM_H4                 = 0x0000001c,
SC_SUPERTILE_PER_PRIM_H5                 = 0x0000001d,
SC_SUPERTILE_PER_PRIM_H6                 = 0x0000001e,
SC_SUPERTILE_PER_PRIM_H7                 = 0x0000001f,
SC_SUPERTILE_PER_PRIM_H8                 = 0x00000020,
SC_SUPERTILE_PER_PRIM_H9                 = 0x00000021,
SC_SUPERTILE_PER_PRIM_H10                = 0x00000022,
SC_SUPERTILE_PER_PRIM_H11                = 0x00000023,
SC_SUPERTILE_PER_PRIM_H12                = 0x00000024,
SC_SUPERTILE_PER_PRIM_H13                = 0x00000025,
SC_SUPERTILE_PER_PRIM_H14                = 0x00000026,
SC_SUPERTILE_PER_PRIM_H15                = 0x00000027,
SC_SUPERTILE_PER_PRIM_H16                = 0x00000028,
SC_TILE_PER_PRIM_H0                      = 0x00000029,
SC_TILE_PER_PRIM_H1                      = 0x0000002a,
SC_TILE_PER_PRIM_H2                      = 0x0000002b,
SC_TILE_PER_PRIM_H3                      = 0x0000002c,
SC_TILE_PER_PRIM_H4                      = 0x0000002d,
SC_TILE_PER_PRIM_H5                      = 0x0000002e,
SC_TILE_PER_PRIM_H6                      = 0x0000002f,
SC_TILE_PER_PRIM_H7                      = 0x00000030,
SC_TILE_PER_PRIM_H8                      = 0x00000031,
SC_TILE_PER_PRIM_H9                      = 0x00000032,
SC_TILE_PER_PRIM_H10                     = 0x00000033,
SC_TILE_PER_PRIM_H11                     = 0x00000034,
SC_TILE_PER_PRIM_H12                     = 0x00000035,
SC_TILE_PER_PRIM_H13                     = 0x00000036,
SC_TILE_PER_PRIM_H14                     = 0x00000037,
SC_TILE_PER_PRIM_H15                     = 0x00000038,
SC_TILE_PER_PRIM_H16                     = 0x00000039,
SC_TILE_PER_SUPERTILE_H0                 = 0x0000003a,
SC_TILE_PER_SUPERTILE_H1                 = 0x0000003b,
SC_TILE_PER_SUPERTILE_H2                 = 0x0000003c,
SC_TILE_PER_SUPERTILE_H3                 = 0x0000003d,
SC_TILE_PER_SUPERTILE_H4                 = 0x0000003e,
SC_TILE_PER_SUPERTILE_H5                 = 0x0000003f,
SC_TILE_PER_SUPERTILE_H6                 = 0x00000040,
SC_TILE_PER_SUPERTILE_H7                 = 0x00000041,
SC_TILE_PER_SUPERTILE_H8                 = 0x00000042,
SC_TILE_PER_SUPERTILE_H9                 = 0x00000043,
SC_TILE_PER_SUPERTILE_H10                = 0x00000044,
SC_TILE_PER_SUPERTILE_H11                = 0x00000045,
SC_TILE_PER_SUPERTILE_H12                = 0x00000046,
SC_TILE_PER_SUPERTILE_H13                = 0x00000047,
SC_TILE_PER_SUPERTILE_H14                = 0x00000048,
SC_TILE_PER_SUPERTILE_H15                = 0x00000049,
SC_TILE_PER_SUPERTILE_H16                = 0x0000004a,
SC_TILE_PICKED_H1                        = 0x0000004b,
SC_TILE_PICKED_H2                        = 0x0000004c,
SC_TILE_PICKED_H3                        = 0x0000004d,
SC_TILE_PICKED_H4                        = 0x0000004e,
SC_QZ0_MULTI_GPU_TILE_DISCARD            = 0x0000004f,
SC_QZ1_MULTI_GPU_TILE_DISCARD            = 0x00000050,
SC_QZ2_MULTI_GPU_TILE_DISCARD            = 0x00000051,
SC_QZ3_MULTI_GPU_TILE_DISCARD            = 0x00000052,
SC_QZ0_TILE_COUNT                        = 0x00000053,
SC_QZ1_TILE_COUNT                        = 0x00000054,
SC_QZ2_TILE_COUNT                        = 0x00000055,
SC_QZ3_TILE_COUNT                        = 0x00000056,
SC_QZ0_TILE_COVERED_COUNT                = 0x00000057,
SC_QZ1_TILE_COVERED_COUNT                = 0x00000058,
SC_QZ2_TILE_COVERED_COUNT                = 0x00000059,
SC_QZ3_TILE_COVERED_COUNT                = 0x0000005a,
SC_QZ0_TILE_NOT_COVERED_COUNT            = 0x0000005b,
SC_QZ1_TILE_NOT_COVERED_COUNT            = 0x0000005c,
SC_QZ2_TILE_NOT_COVERED_COUNT            = 0x0000005d,
SC_QZ3_TILE_NOT_COVERED_COUNT            = 0x0000005e,
SC_QZ0_QUAD_PER_TILE_H0                  = 0x0000005f,
SC_QZ0_QUAD_PER_TILE_H1                  = 0x00000060,
SC_QZ0_QUAD_PER_TILE_H2                  = 0x00000061,
SC_QZ0_QUAD_PER_TILE_H3                  = 0x00000062,
SC_QZ0_QUAD_PER_TILE_H4                  = 0x00000063,
SC_QZ0_QUAD_PER_TILE_H5                  = 0x00000064,
SC_QZ0_QUAD_PER_TILE_H6                  = 0x00000065,
SC_QZ0_QUAD_PER_TILE_H7                  = 0x00000066,
SC_QZ0_QUAD_PER_TILE_H8                  = 0x00000067,
SC_QZ0_QUAD_PER_TILE_H9                  = 0x00000068,
SC_QZ0_QUAD_PER_TILE_H10                 = 0x00000069,
SC_QZ0_QUAD_PER_TILE_H11                 = 0x0000006a,
SC_QZ0_QUAD_PER_TILE_H12                 = 0x0000006b,
SC_QZ0_QUAD_PER_TILE_H13                 = 0x0000006c,
SC_QZ0_QUAD_PER_TILE_H14                 = 0x0000006d,
SC_QZ0_QUAD_PER_TILE_H15                 = 0x0000006e,
SC_QZ0_QUAD_PER_TILE_H16                 = 0x0000006f,
SC_QZ1_QUAD_PER_TILE_H0                  = 0x00000070,
SC_QZ1_QUAD_PER_TILE_H1                  = 0x00000071,
SC_QZ1_QUAD_PER_TILE_H2                  = 0x00000072,
SC_QZ1_QUAD_PER_TILE_H3                  = 0x00000073,
SC_QZ1_QUAD_PER_TILE_H4                  = 0x00000074,
SC_QZ1_QUAD_PER_TILE_H5                  = 0x00000075,
SC_QZ1_QUAD_PER_TILE_H6                  = 0x00000076,
SC_QZ1_QUAD_PER_TILE_H7                  = 0x00000077,
SC_QZ1_QUAD_PER_TILE_H8                  = 0x00000078,
SC_QZ1_QUAD_PER_TILE_H9                  = 0x00000079,
SC_QZ1_QUAD_PER_TILE_H10                 = 0x0000007a,
SC_QZ1_QUAD_PER_TILE_H11                 = 0x0000007b,
SC_QZ1_QUAD_PER_TILE_H12                 = 0x0000007c,
SC_QZ1_QUAD_PER_TILE_H13                 = 0x0000007d,
SC_QZ1_QUAD_PER_TILE_H14                 = 0x0000007e,
SC_QZ1_QUAD_PER_TILE_H15                 = 0x0000007f,
SC_QZ1_QUAD_PER_TILE_H16                 = 0x00000080,
SC_QZ2_QUAD_PER_TILE_H0                  = 0x00000081,
SC_QZ2_QUAD_PER_TILE_H1                  = 0x00000082,
SC_QZ2_QUAD_PER_TILE_H2                  = 0x00000083,
SC_QZ2_QUAD_PER_TILE_H3                  = 0x00000084,
SC_QZ2_QUAD_PER_TILE_H4                  = 0x00000085,
SC_QZ2_QUAD_PER_TILE_H5                  = 0x00000086,
SC_QZ2_QUAD_PER_TILE_H6                  = 0x00000087,
SC_QZ2_QUAD_PER_TILE_H7                  = 0x00000088,
SC_QZ2_QUAD_PER_TILE_H8                  = 0x00000089,
SC_QZ2_QUAD_PER_TILE_H9                  = 0x0000008a,
SC_QZ2_QUAD_PER_TILE_H10                 = 0x0000008b,
SC_QZ2_QUAD_PER_TILE_H11                 = 0x0000008c,
SC_QZ2_QUAD_PER_TILE_H12                 = 0x0000008d,
SC_QZ2_QUAD_PER_TILE_H13                 = 0x0000008e,
SC_QZ2_QUAD_PER_TILE_H14                 = 0x0000008f,
SC_QZ2_QUAD_PER_TILE_H15                 = 0x00000090,
SC_QZ2_QUAD_PER_TILE_H16                 = 0x00000091,
SC_QZ3_QUAD_PER_TILE_H0                  = 0x00000092,
SC_QZ3_QUAD_PER_TILE_H1                  = 0x00000093,
SC_QZ3_QUAD_PER_TILE_H2                  = 0x00000094,
SC_QZ3_QUAD_PER_TILE_H3                  = 0x00000095,
SC_QZ3_QUAD_PER_TILE_H4                  = 0x00000096,
SC_QZ3_QUAD_PER_TILE_H5                  = 0x00000097,
SC_QZ3_QUAD_PER_TILE_H6                  = 0x00000098,
SC_QZ3_QUAD_PER_TILE_H7                  = 0x00000099,
SC_QZ3_QUAD_PER_TILE_H8                  = 0x0000009a,
SC_QZ3_QUAD_PER_TILE_H9                  = 0x0000009b,
SC_QZ3_QUAD_PER_TILE_H10                 = 0x0000009c,
SC_QZ3_QUAD_PER_TILE_H11                 = 0x0000009d,
SC_QZ3_QUAD_PER_TILE_H12                 = 0x0000009e,
SC_QZ3_QUAD_PER_TILE_H13                 = 0x0000009f,
SC_QZ3_QUAD_PER_TILE_H14                 = 0x000000a0,
SC_QZ3_QUAD_PER_TILE_H15                 = 0x000000a1,
SC_QZ3_QUAD_PER_TILE_H16                 = 0x000000a2,
SC_QZ0_QUAD_COUNT                        = 0x000000a3,
SC_QZ1_QUAD_COUNT                        = 0x000000a4,
SC_QZ2_QUAD_COUNT                        = 0x000000a5,
SC_QZ3_QUAD_COUNT                        = 0x000000a6,
SC_P0_HIZ_TILE_COUNT                     = 0x000000a7,
SC_P1_HIZ_TILE_COUNT                     = 0x000000a8,
SC_P2_HIZ_TILE_COUNT                     = 0x000000a9,
SC_P3_HIZ_TILE_COUNT                     = 0x000000aa,
SC_P0_HIZ_QUAD_PER_TILE_H0               = 0x000000ab,
SC_P0_HIZ_QUAD_PER_TILE_H1               = 0x000000ac,
SC_P0_HIZ_QUAD_PER_TILE_H2               = 0x000000ad,
SC_P0_HIZ_QUAD_PER_TILE_H3               = 0x000000ae,
SC_P0_HIZ_QUAD_PER_TILE_H4               = 0x000000af,
SC_P0_HIZ_QUAD_PER_TILE_H5               = 0x000000b0,
SC_P0_HIZ_QUAD_PER_TILE_H6               = 0x000000b1,
SC_P0_HIZ_QUAD_PER_TILE_H7               = 0x000000b2,
SC_P0_HIZ_QUAD_PER_TILE_H8               = 0x000000b3,
SC_P0_HIZ_QUAD_PER_TILE_H9               = 0x000000b4,
SC_P0_HIZ_QUAD_PER_TILE_H10              = 0x000000b5,
SC_P0_HIZ_QUAD_PER_TILE_H11              = 0x000000b6,
SC_P0_HIZ_QUAD_PER_TILE_H12              = 0x000000b7,
SC_P0_HIZ_QUAD_PER_TILE_H13              = 0x000000b8,
SC_P0_HIZ_QUAD_PER_TILE_H14              = 0x000000b9,
SC_P0_HIZ_QUAD_PER_TILE_H15              = 0x000000ba,
SC_P0_HIZ_QUAD_PER_TILE_H16              = 0x000000bb,
SC_P1_HIZ_QUAD_PER_TILE_H0               = 0x000000bc,
SC_P1_HIZ_QUAD_PER_TILE_H1               = 0x000000bd,
SC_P1_HIZ_QUAD_PER_TILE_H2               = 0x000000be,
SC_P1_HIZ_QUAD_PER_TILE_H3               = 0x000000bf,
SC_P1_HIZ_QUAD_PER_TILE_H4               = 0x000000c0,
SC_P1_HIZ_QUAD_PER_TILE_H5               = 0x000000c1,
SC_P1_HIZ_QUAD_PER_TILE_H6               = 0x000000c2,
SC_P1_HIZ_QUAD_PER_TILE_H7               = 0x000000c3,
SC_P1_HIZ_QUAD_PER_TILE_H8               = 0x000000c4,
SC_P1_HIZ_QUAD_PER_TILE_H9               = 0x000000c5,
SC_P1_HIZ_QUAD_PER_TILE_H10              = 0x000000c6,
SC_P1_HIZ_QUAD_PER_TILE_H11              = 0x000000c7,
SC_P1_HIZ_QUAD_PER_TILE_H12              = 0x000000c8,
SC_P1_HIZ_QUAD_PER_TILE_H13              = 0x000000c9,
SC_P1_HIZ_QUAD_PER_TILE_H14              = 0x000000ca,
SC_P1_HIZ_QUAD_PER_TILE_H15              = 0x000000cb,
SC_P1_HIZ_QUAD_PER_TILE_H16              = 0x000000cc,
SC_P2_HIZ_QUAD_PER_TILE_H0               = 0x000000cd,
SC_P2_HIZ_QUAD_PER_TILE_H1               = 0x000000ce,
SC_P2_HIZ_QUAD_PER_TILE_H2               = 0x000000cf,
SC_P2_HIZ_QUAD_PER_TILE_H3               = 0x000000d0,
SC_P2_HIZ_QUAD_PER_TILE_H4               = 0x000000d1,
SC_P2_HIZ_QUAD_PER_TILE_H5               = 0x000000d2,
SC_P2_HIZ_QUAD_PER_TILE_H6               = 0x000000d3,
SC_P2_HIZ_QUAD_PER_TILE_H7               = 0x000000d4,
SC_P2_HIZ_QUAD_PER_TILE_H8               = 0x000000d5,
SC_P2_HIZ_QUAD_PER_TILE_H9               = 0x000000d6,
SC_P2_HIZ_QUAD_PER_TILE_H10              = 0x000000d7,
SC_P2_HIZ_QUAD_PER_TILE_H11              = 0x000000d8,
SC_P2_HIZ_QUAD_PER_TILE_H12              = 0x000000d9,
SC_P2_HIZ_QUAD_PER_TILE_H13              = 0x000000da,
SC_P2_HIZ_QUAD_PER_TILE_H14              = 0x000000db,
SC_P2_HIZ_QUAD_PER_TILE_H15              = 0x000000dc,
SC_P2_HIZ_QUAD_PER_TILE_H16              = 0x000000dd,
SC_P3_HIZ_QUAD_PER_TILE_H0               = 0x000000de,
SC_P3_HIZ_QUAD_PER_TILE_H1               = 0x000000df,
SC_P3_HIZ_QUAD_PER_TILE_H2               = 0x000000e0,
SC_P3_HIZ_QUAD_PER_TILE_H3               = 0x000000e1,
SC_P3_HIZ_QUAD_PER_TILE_H4               = 0x000000e2,
SC_P3_HIZ_QUAD_PER_TILE_H5               = 0x000000e3,
SC_P3_HIZ_QUAD_PER_TILE_H6               = 0x000000e4,
SC_P3_HIZ_QUAD_PER_TILE_H7               = 0x000000e5,
SC_P3_HIZ_QUAD_PER_TILE_H8               = 0x000000e6,
SC_P3_HIZ_QUAD_PER_TILE_H9               = 0x000000e7,
SC_P3_HIZ_QUAD_PER_TILE_H10              = 0x000000e8,
SC_P3_HIZ_QUAD_PER_TILE_H11              = 0x000000e9,
SC_P3_HIZ_QUAD_PER_TILE_H12              = 0x000000ea,
SC_P3_HIZ_QUAD_PER_TILE_H13              = 0x000000eb,
SC_P3_HIZ_QUAD_PER_TILE_H14              = 0x000000ec,
SC_P3_HIZ_QUAD_PER_TILE_H15              = 0x000000ed,
SC_P3_HIZ_QUAD_PER_TILE_H16              = 0x000000ee,
SC_P0_HIZ_QUAD_COUNT                     = 0x000000ef,
SC_P1_HIZ_QUAD_COUNT                     = 0x000000f0,
SC_P2_HIZ_QUAD_COUNT                     = 0x000000f1,
SC_P3_HIZ_QUAD_COUNT                     = 0x000000f2,
SC_P0_DETAIL_QUAD_COUNT                  = 0x000000f3,
SC_P1_DETAIL_QUAD_COUNT                  = 0x000000f4,
SC_P2_DETAIL_QUAD_COUNT                  = 0x000000f5,
SC_P3_DETAIL_QUAD_COUNT                  = 0x000000f6,
SC_P0_DETAIL_QUAD_WITH_1_PIX             = 0x000000f7,
SC_P0_DETAIL_QUAD_WITH_2_PIX             = 0x000000f8,
SC_P0_DETAIL_QUAD_WITH_3_PIX             = 0x000000f9,
SC_P0_DETAIL_QUAD_WITH_4_PIX             = 0x000000fa,
SC_P1_DETAIL_QUAD_WITH_1_PIX             = 0x000000fb,
SC_P1_DETAIL_QUAD_WITH_2_PIX             = 0x000000fc,
SC_P1_DETAIL_QUAD_WITH_3_PIX             = 0x000000fd,
SC_P1_DETAIL_QUAD_WITH_4_PIX             = 0x000000fe,
SC_P2_DETAIL_QUAD_WITH_1_PIX             = 0x000000ff,
SC_P2_DETAIL_QUAD_WITH_2_PIX             = 0x00000100,
SC_P2_DETAIL_QUAD_WITH_3_PIX             = 0x00000101,
SC_P2_DETAIL_QUAD_WITH_4_PIX             = 0x00000102,
SC_P3_DETAIL_QUAD_WITH_1_PIX             = 0x00000103,
SC_P3_DETAIL_QUAD_WITH_2_PIX             = 0x00000104,
SC_P3_DETAIL_QUAD_WITH_3_PIX             = 0x00000105,
SC_P3_DETAIL_QUAD_WITH_4_PIX             = 0x00000106,
SC_EARLYZ_QUAD_COUNT                     = 0x00000107,
SC_EARLYZ_QUAD_WITH_1_PIX                = 0x00000108,
SC_EARLYZ_QUAD_WITH_2_PIX                = 0x00000109,
SC_EARLYZ_QUAD_WITH_3_PIX                = 0x0000010a,
SC_EARLYZ_QUAD_WITH_4_PIX                = 0x0000010b,
SC_PKR_QUAD_PER_ROW_H1                   = 0x0000010c,
SC_PKR_QUAD_PER_ROW_H2                   = 0x0000010d,
SC_PKR_4X2_QUAD_SPLIT                    = 0x0000010e,
SC_PKR_4X2_FILL_QUAD                     = 0x0000010f,
SC_PKR_END_OF_VECTOR                     = 0x00000110,
SC_PKR_CONTROL_XFER                      = 0x00000111,
SC_PKR_DBHANG_FORCE_EOV                  = 0x00000112,
SC_REG_SCLK_BUSY                         = 0x00000113,
SC_GRP0_DYN_SCLK_BUSY                    = 0x00000114,
SC_GRP1_DYN_SCLK_BUSY                    = 0x00000115,
SC_GRP2_DYN_SCLK_BUSY                    = 0x00000116,
SC_GRP3_DYN_SCLK_BUSY                    = 0x00000117,
SC_GRP4_DYN_SCLK_BUSY                    = 0x00000118,
SC_PA0_SC_DATA_FIFO_RD                   = 0x00000119,
SC_PA0_SC_DATA_FIFO_WE                   = 0x0000011a,
SC_PA1_SC_DATA_FIFO_RD                   = 0x0000011b,
SC_PA1_SC_DATA_FIFO_WE                   = 0x0000011c,
SC_PS_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES   = 0x0000011d,
SC_PS_ARB_XFC_ONLY_PRIM_CYCLES           = 0x0000011e,
SC_PS_ARB_XFC_ONLY_ONE_INC_PER_PRIM      = 0x0000011f,
SC_PS_ARB_STALLED_FROM_BELOW             = 0x00000120,
SC_PS_ARB_STARVED_FROM_ABOVE             = 0x00000121,
SC_PS_ARB_SC_BUSY                        = 0x00000122,
SC_PS_ARB_PA_SC_BUSY                     = 0x00000123,
SC_PA2_SC_DATA_FIFO_RD                   = 0x00000124,
SC_PA2_SC_DATA_FIFO_WE                   = 0x00000125,
SC_PA3_SC_DATA_FIFO_RD                   = 0x00000126,
SC_PA3_SC_DATA_FIFO_WE                   = 0x00000127,
SC_PA_SC_DEALLOC_0_0_WE                  = 0x00000128,
SC_PA_SC_DEALLOC_0_1_WE                  = 0x00000129,
SC_PA_SC_DEALLOC_1_0_WE                  = 0x0000012a,
SC_PA_SC_DEALLOC_1_1_WE                  = 0x0000012b,
SC_PA_SC_DEALLOC_2_0_WE                  = 0x0000012c,
SC_PA_SC_DEALLOC_2_1_WE                  = 0x0000012d,
SC_PA_SC_DEALLOC_3_0_WE                  = 0x0000012e,
SC_PA_SC_DEALLOC_3_1_WE                  = 0x0000012f,
SC_PA0_SC_EOP_WE                         = 0x00000130,
SC_PA0_SC_EOPG_WE                        = 0x00000131,
SC_PA0_SC_EVENT_WE                       = 0x00000132,
SC_PA1_SC_EOP_WE                         = 0x00000133,
SC_PA1_SC_EOPG_WE                        = 0x00000134,
SC_PA1_SC_EVENT_WE                       = 0x00000135,
SC_PA2_SC_EOP_WE                         = 0x00000136,
SC_PA2_SC_EOPG_WE                        = 0x00000137,
SC_PA2_SC_EVENT_WE                       = 0x00000138,
SC_PA3_SC_EOP_WE                         = 0x00000139,
SC_PA3_SC_EOPG_WE                        = 0x0000013a,
SC_PA3_SC_EVENT_WE                       = 0x0000013b,
SC_PS_ARB_OOO_THRESHOLD_SWITCH_TO_DESIRED_FIFO  = 0x0000013c,
SC_PS_ARB_OOO_FIFO_EMPTY_SWITCH          = 0x0000013d,
SC_PS_ARB_NULL_PRIM_BUBBLE_POP           = 0x0000013e,
SC_PS_ARB_EOP_POP_SYNC_POP               = 0x0000013f,
SC_PS_ARB_EVENT_SYNC_POP                 = 0x00000140,
SC_SC_PS_ENG_MULTICYCLE_BUBBLE           = 0x00000141,
SC_PA0_SC_FPOV_WE                        = 0x00000142,
SC_PA1_SC_FPOV_WE                        = 0x00000143,
SC_PA2_SC_FPOV_WE                        = 0x00000144,
SC_PA3_SC_FPOV_WE                        = 0x00000145,
SC_PA0_SC_LPOV_WE                        = 0x00000146,
SC_PA1_SC_LPOV_WE                        = 0x00000147,
SC_PA2_SC_LPOV_WE                        = 0x00000148,
SC_PA3_SC_LPOV_WE                        = 0x00000149,
SC_SC_SPI_DEALLOC_0_0                    = 0x0000014a,
SC_SC_SPI_DEALLOC_0_1                    = 0x0000014b,
SC_SC_SPI_DEALLOC_0_2                    = 0x0000014c,
SC_SC_SPI_DEALLOC_1_0                    = 0x0000014d,
SC_SC_SPI_DEALLOC_1_1                    = 0x0000014e,
SC_SC_SPI_DEALLOC_1_2                    = 0x0000014f,
SC_SC_SPI_DEALLOC_2_0                    = 0x00000150,
SC_SC_SPI_DEALLOC_2_1                    = 0x00000151,
SC_SC_SPI_DEALLOC_2_2                    = 0x00000152,
SC_SC_SPI_DEALLOC_3_0                    = 0x00000153,
SC_SC_SPI_DEALLOC_3_1                    = 0x00000154,
SC_SC_SPI_DEALLOC_3_2                    = 0x00000155,
SC_SC_SPI_FPOV_0                         = 0x00000156,
SC_SC_SPI_FPOV_1                         = 0x00000157,
SC_SC_SPI_FPOV_2                         = 0x00000158,
SC_SC_SPI_FPOV_3                         = 0x00000159,
SC_SC_SPI_EVENT                          = 0x0000015a,
SC_PS_TS_EVENT_FIFO_PUSH                 = 0x0000015b,
SC_PS_TS_EVENT_FIFO_POP                  = 0x0000015c,
SC_PS_CTX_DONE_FIFO_PUSH                 = 0x0000015d,
SC_PS_CTX_DONE_FIFO_POP                  = 0x0000015e,
SC_MULTICYCLE_BUBBLE_FREEZE              = 0x0000015f,
SC_EOP_SYNC_WINDOW                       = 0x00000160,
SC_PA0_SC_NULL_WE                        = 0x00000161,
SC_PA0_SC_NULL_DEALLOC_WE                = 0x00000162,
SC_PA0_SC_DATA_FIFO_EOPG_RD              = 0x00000163,
SC_PA0_SC_DATA_FIFO_EOP_RD               = 0x00000164,
SC_PA0_SC_DEALLOC_0_RD                   = 0x00000165,
SC_PA0_SC_DEALLOC_1_RD                   = 0x00000166,
SC_PA1_SC_DATA_FIFO_EOPG_RD              = 0x00000167,
SC_PA1_SC_DATA_FIFO_EOP_RD               = 0x00000168,
SC_PA1_SC_DEALLOC_0_RD                   = 0x00000169,
SC_PA1_SC_DEALLOC_1_RD                   = 0x0000016a,
SC_PA1_SC_NULL_WE                        = 0x0000016b,
SC_PA1_SC_NULL_DEALLOC_WE                = 0x0000016c,
SC_PA2_SC_DATA_FIFO_EOPG_RD              = 0x0000016d,
SC_PA2_SC_DATA_FIFO_EOP_RD               = 0x0000016e,
SC_PA2_SC_DEALLOC_0_RD                   = 0x0000016f,
SC_PA2_SC_DEALLOC_1_RD                   = 0x00000170,
SC_PA2_SC_NULL_WE                        = 0x00000171,
SC_PA2_SC_NULL_DEALLOC_WE                = 0x00000172,
SC_PA3_SC_DATA_FIFO_EOPG_RD              = 0x00000173,
SC_PA3_SC_DATA_FIFO_EOP_RD               = 0x00000174,
SC_PA3_SC_DEALLOC_0_RD                   = 0x00000175,
SC_PA3_SC_DEALLOC_1_RD                   = 0x00000176,
SC_PA3_SC_NULL_WE                        = 0x00000177,
SC_PA3_SC_NULL_DEALLOC_WE                = 0x00000178,
SC_PS_PA0_SC_FIFO_EMPTY                  = 0x00000179,
SC_PS_PA0_SC_FIFO_FULL                   = 0x0000017a,
SC_PA0_PS_DATA_SEND                      = 0x0000017b,
SC_PS_PA1_SC_FIFO_EMPTY                  = 0x0000017c,
SC_PS_PA1_SC_FIFO_FULL                   = 0x0000017d,
SC_PA1_PS_DATA_SEND                      = 0x0000017e,
SC_PS_PA2_SC_FIFO_EMPTY                  = 0x0000017f,
SC_PS_PA2_SC_FIFO_FULL                   = 0x00000180,
SC_PA2_PS_DATA_SEND                      = 0x00000181,
SC_PS_PA3_SC_FIFO_EMPTY                  = 0x00000182,
SC_PS_PA3_SC_FIFO_FULL                   = 0x00000183,
SC_PA3_PS_DATA_SEND                      = 0x00000184,
SC_BUSY_PROCESSING_MULTICYCLE_PRIM       = 0x00000185,
SC_BUSY_CNT_NOT_ZERO                     = 0x00000186,
SC_BM_BUSY                               = 0x00000187,
SC_BACKEND_BUSY                          = 0x00000188,
SC_SCF_SCB_INTERFACE_BUSY                = 0x00000189,
SC_SCB_BUSY                              = 0x0000018a,
SC_STARVED_BY_PA_WITH_UNSELECTED_PA_NOT_EMPTY  = 0x0000018b,
SC_STARVED_BY_PA_WITH_UNSELECTED_PA_FULL  = 0x0000018c,
SC_PBB_BIN_HIST_NUM_PRIMS                = 0x0000018d,
SC_PBB_BATCH_HIST_NUM_PRIMS              = 0x0000018e,
SC_PBB_BIN_HIST_NUM_CONTEXTS             = 0x0000018f,
SC_PBB_BATCH_HIST_NUM_CONTEXTS           = 0x00000190,
SC_PBB_BIN_HIST_NUM_PERSISTENT_STATES    = 0x00000191,
SC_PBB_BATCH_HIST_NUM_PERSISTENT_STATES  = 0x00000192,
SC_PBB_BATCH_HIST_NUM_PS_WAVE_BREAKS     = 0x00000193,
SC_PBB_BATCH_HIST_NUM_TRIV_REJECTED_PRIMS  = 0x00000194,
SC_PBB_BATCH_HIST_NUM_ROWS_PER_PRIM      = 0x00000195,
SC_PBB_BATCH_HIST_NUM_COLUMNS_PER_ROW    = 0x00000196,
SC_PBB_BUSY                              = 0x00000197,
SC_PBB_BUSY_AND_RTR                      = 0x00000198,
SC_PBB_STALLS_PA_DUE_TO_NO_TILES         = 0x00000199,
SC_PBB_NUM_BINS                          = 0x0000019a,
SC_PBB_END_OF_BIN                        = 0x0000019b,
SC_PBB_END_OF_BATCH                      = 0x0000019c,
SC_PBB_PRIMBIN_PROCESSED                 = 0x0000019d,
SC_PBB_PRIM_ADDED_TO_BATCH               = 0x0000019e,
SC_PBB_NONBINNED_PRIM                    = 0x0000019f,
SC_PBB_TOTAL_REAL_PRIMS_OUT_OF_PBB       = 0x000001a0,
SC_PBB_TOTAL_NULL_PRIMS_OUT_OF_PBB       = 0x000001a1,
SC_PBB_IDLE_CLK_DUE_TO_ROW_TO_COLUMN_TRANSITION  = 0x000001a2,
SC_PBB_IDLE_CLK_DUE_TO_FALSE_POSITIVE_ON_ROW  = 0x000001a3,
SC_PBB_IDLE_CLK_DUE_TO_FALSE_POSITIVE_ON_COLUMN  = 0x000001a4,
SC_PBB_BATCH_BREAK_DUE_TO_PERSISTENT_STATE  = 0x000001a5,
SC_PBB_BATCH_BREAK_DUE_TO_CONTEXT_STATE  = 0x000001a6,
SC_PBB_BATCH_BREAK_DUE_TO_PRIM           = 0x000001a7,
SC_PBB_BATCH_BREAK_DUE_TO_PC_STORAGE     = 0x000001a8,
SC_PBB_BATCH_BREAK_DUE_TO_EVENT          = 0x000001a9,
SC_PBB_BATCH_BREAK_DUE_TO_FPOV_LIMIT     = 0x000001aa,
SC_POPS_INTRA_WAVE_OVERLAPS              = 0x000001ab,
SC_POPS_FORCE_EOV                        = 0x000001ac,
SC_PKR_QUAD_OVERLAP_NOT_FOUND_IN_WAVE_TABLE  = 0x000001ad,
SC_PKR_QUAD_OVERLAP_FOUND_IN_WAVE_TABLE  = 0x000001ae,
} SC_PERFCNT_SEL;

/*
 * SePairXsel enum
 */

typedef enum SePairXsel {
RASTER_CONFIG_SE_PAIR_XSEL_8_WIDE_TILE   = 0x00000000,
RASTER_CONFIG_SE_PAIR_XSEL_16_WIDE_TILE  = 0x00000001,
RASTER_CONFIG_SE_PAIR_XSEL_32_WIDE_TILE  = 0x00000002,
RASTER_CONFIG_SE_PAIR_XSEL_64_WIDE_TILE  = 0x00000003,
RASTER_CONFIG_SE_PAIR_XSEL_128_WIDE_TILE  = 0x00000004,
} SePairXsel;

/*
 * SePairYsel enum
 */

typedef enum SePairYsel {
RASTER_CONFIG_SE_PAIR_YSEL_8_WIDE_TILE   = 0x00000000,
RASTER_CONFIG_SE_PAIR_YSEL_16_WIDE_TILE  = 0x00000001,
RASTER_CONFIG_SE_PAIR_YSEL_32_WIDE_TILE  = 0x00000002,
RASTER_CONFIG_SE_PAIR_YSEL_64_WIDE_TILE  = 0x00000003,
RASTER_CONFIG_SE_PAIR_YSEL_128_WIDE_TILE  = 0x00000004,
} SePairYsel;

/*
 * SePairMap enum
 */

typedef enum SePairMap {
RASTER_CONFIG_SE_PAIR_MAP_0              = 0x00000000,
RASTER_CONFIG_SE_PAIR_MAP_1              = 0x00000001,
RASTER_CONFIG_SE_PAIR_MAP_2              = 0x00000002,
RASTER_CONFIG_SE_PAIR_MAP_3              = 0x00000003,
} SePairMap;

/*
 * SeXsel enum
 */

typedef enum SeXsel {
RASTER_CONFIG_SE_XSEL_8_WIDE_TILE        = 0x00000000,
RASTER_CONFIG_SE_XSEL_16_WIDE_TILE       = 0x00000001,
RASTER_CONFIG_SE_XSEL_32_WIDE_TILE       = 0x00000002,
RASTER_CONFIG_SE_XSEL_64_WIDE_TILE       = 0x00000003,
RASTER_CONFIG_SE_XSEL_128_WIDE_TILE      = 0x00000004,
} SeXsel;

/*
 * SeYsel enum
 */

typedef enum SeYsel {
RASTER_CONFIG_SE_YSEL_8_WIDE_TILE        = 0x00000000,
RASTER_CONFIG_SE_YSEL_16_WIDE_TILE       = 0x00000001,
RASTER_CONFIG_SE_YSEL_32_WIDE_TILE       = 0x00000002,
RASTER_CONFIG_SE_YSEL_64_WIDE_TILE       = 0x00000003,
RASTER_CONFIG_SE_YSEL_128_WIDE_TILE      = 0x00000004,
} SeYsel;

/*
 * SeMap enum
 */

typedef enum SeMap {
RASTER_CONFIG_SE_MAP_0                   = 0x00000000,
RASTER_CONFIG_SE_MAP_1                   = 0x00000001,
RASTER_CONFIG_SE_MAP_2                   = 0x00000002,
RASTER_CONFIG_SE_MAP_3                   = 0x00000003,
} SeMap;

/*
 * ScXsel enum
 */

typedef enum ScXsel {
RASTER_CONFIG_SC_XSEL_8_WIDE_TILE        = 0x00000000,
RASTER_CONFIG_SC_XSEL_16_WIDE_TILE       = 0x00000001,
RASTER_CONFIG_SC_XSEL_32_WIDE_TILE       = 0x00000002,
RASTER_CONFIG_SC_XSEL_64_WIDE_TILE       = 0x00000003,
} ScXsel;

/*
 * ScYsel enum
 */

typedef enum ScYsel {
RASTER_CONFIG_SC_YSEL_8_WIDE_TILE        = 0x00000000,
RASTER_CONFIG_SC_YSEL_16_WIDE_TILE       = 0x00000001,
RASTER_CONFIG_SC_YSEL_32_WIDE_TILE       = 0x00000002,
RASTER_CONFIG_SC_YSEL_64_WIDE_TILE       = 0x00000003,
} ScYsel;

/*
 * ScMap enum
 */

typedef enum ScMap {
RASTER_CONFIG_SC_MAP_0                   = 0x00000000,
RASTER_CONFIG_SC_MAP_1                   = 0x00000001,
RASTER_CONFIG_SC_MAP_2                   = 0x00000002,
RASTER_CONFIG_SC_MAP_3                   = 0x00000003,
} ScMap;

/*
 * PkrXsel2 enum
 */

typedef enum PkrXsel2 {
RASTER_CONFIG_PKR_XSEL2_0                = 0x00000000,
RASTER_CONFIG_PKR_XSEL2_1                = 0x00000001,
RASTER_CONFIG_PKR_XSEL2_2                = 0x00000002,
RASTER_CONFIG_PKR_XSEL2_3                = 0x00000003,
} PkrXsel2;

/*
 * PkrXsel enum
 */

typedef enum PkrXsel {
RASTER_CONFIG_PKR_XSEL_0                 = 0x00000000,
RASTER_CONFIG_PKR_XSEL_1                 = 0x00000001,
RASTER_CONFIG_PKR_XSEL_2                 = 0x00000002,
RASTER_CONFIG_PKR_XSEL_3                 = 0x00000003,
} PkrXsel;

/*
 * PkrYsel enum
 */

typedef enum PkrYsel {
RASTER_CONFIG_PKR_YSEL_0                 = 0x00000000,
RASTER_CONFIG_PKR_YSEL_1                 = 0x00000001,
RASTER_CONFIG_PKR_YSEL_2                 = 0x00000002,
RASTER_CONFIG_PKR_YSEL_3                 = 0x00000003,
} PkrYsel;

/*
 * PkrMap enum
 */

typedef enum PkrMap {
RASTER_CONFIG_PKR_MAP_0                  = 0x00000000,
RASTER_CONFIG_PKR_MAP_1                  = 0x00000001,
RASTER_CONFIG_PKR_MAP_2                  = 0x00000002,
RASTER_CONFIG_PKR_MAP_3                  = 0x00000003,
} PkrMap;

/*
 * RbXsel enum
 */

typedef enum RbXsel {
RASTER_CONFIG_RB_XSEL_0                  = 0x00000000,
RASTER_CONFIG_RB_XSEL_1                  = 0x00000001,
} RbXsel;

/*
 * RbYsel enum
 */

typedef enum RbYsel {
RASTER_CONFIG_RB_YSEL_0                  = 0x00000000,
RASTER_CONFIG_RB_YSEL_1                  = 0x00000001,
} RbYsel;

/*
 * RbXsel2 enum
 */

typedef enum RbXsel2 {
RASTER_CONFIG_RB_XSEL2_0                 = 0x00000000,
RASTER_CONFIG_RB_XSEL2_1                 = 0x00000001,
RASTER_CONFIG_RB_XSEL2_2                 = 0x00000002,
RASTER_CONFIG_RB_XSEL2_3                 = 0x00000003,
} RbXsel2;

/*
 * RbMap enum
 */

typedef enum RbMap {
RASTER_CONFIG_RB_MAP_0                   = 0x00000000,
RASTER_CONFIG_RB_MAP_1                   = 0x00000001,
RASTER_CONFIG_RB_MAP_2                   = 0x00000002,
RASTER_CONFIG_RB_MAP_3                   = 0x00000003,
} RbMap;

/*
 * BinningMode enum
 */

typedef enum BinningMode {
BINNING_ALLOWED                          = 0x00000000,
FORCE_BINNING_ON                         = 0x00000001,
DISABLE_BINNING_USE_NEW_SC               = 0x00000002,
DISABLE_BINNING_USE_LEGACY_SC            = 0x00000003,
} BinningMode;

/*
 * BinEventCntl enum
 */

typedef enum BinEventCntl {
BINNER_BREAK_BATCH                       = 0x00000000,
BINNER_PIPELINE                          = 0x00000001,
BINNER_DROP_ASSERT                       = 0x00000002,
} BinEventCntl;

/*
 * CovToShaderSel enum
 */

typedef enum CovToShaderSel {
INPUT_COVERAGE                           = 0x00000000,
INPUT_INNER_COVERAGE                     = 0x00000001,
INPUT_DEPTH_COVERAGE                     = 0x00000002,
RAW                                      = 0x00000003,
} CovToShaderSel;

/*******************************************************
 * RMI Enums
 *******************************************************/

/*
 * RMIPerfSel enum
 */

typedef enum RMIPerfSel {
RMI_PERF_SEL_NONE                        = 0x00000000,
RMI_PERF_SEL_BUSY                        = 0x00000001,
RMI_PERF_SEL_REG_CLK_VLD                 = 0x00000002,
RMI_PERF_SEL_DYN_CLK_CMN_VLD             = 0x00000003,
RMI_PERF_SEL_DYN_CLK_RB_VLD              = 0x00000004,
RMI_PERF_SEL_DYN_CLK_PERF_VLD            = 0x00000005,
RMI_PERF_SEL_PERF_WINDOW                 = 0x00000006,
RMI_PERF_SEL_EVENT_SEND                  = 0x00000007,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID0 = 0x00000008,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID1 = 0x00000009,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID2 = 0x0000000a,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID3 = 0x0000000b,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID4 = 0x0000000c,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID5 = 0x0000000d,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID6 = 0x0000000e,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID7 = 0x0000000f,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID8 = 0x00000010,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID9 = 0x00000011,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID10 = 0x00000012,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID11 = 0x00000013,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID12 = 0x00000014,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID13 = 0x00000015,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID14 = 0x00000016,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID15 = 0x00000017,
RMI_PERF_SEL_RMI_INVALIDATION_ATC_REQ_VMID_ALL = 0x00000018,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID0 = 0x00000019,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID1 = 0x0000001a,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID2 = 0x0000001b,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID3 = 0x0000001c,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID4 = 0x0000001d,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID5 = 0x0000001e,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID6 = 0x0000001f,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID7 = 0x00000020,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID8 = 0x00000021,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID9 = 0x00000022,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID10 = 0x00000023,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID11 = 0x00000024,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID12 = 0x00000025,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID13 = 0x00000026,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID14 = 0x00000027,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID15 = 0x00000028,
RMI_PERF_SEL_RMI_INVALIDATION_REQ_START_FINISH_VMID_ALL = 0x00000029,
RMI_PERF_SEL_UTCL1_TRANSLATION_MISS      = 0x0000002a,
RMI_PERF_SEL_UTCL1_PERMISSION_MISS       = 0x0000002b,
RMI_PERF_SEL_UTCL1_REQUEST               = 0x0000002c,
RMI_PERF_SEL_UTCL1_STALL_INFLIGHT_MAX    = 0x0000002d,
RMI_PERF_SEL_UTCL1_STALL_LRU_INFLIGHT    = 0x0000002e,
RMI_PERF_SEL_UTCL1_LFIFO_FULL            = 0x0000002f,
RMI_PERF_SEL_UTCL1_STALL_LFIFO_NOT_RES   = 0x00000030,
RMI_PERF_SEL_UTCL1_STALL_UTCL2_REQ_OUT_OF_CREDITS  = 0x00000031,
RMI_PERF_SEL_UTCL1_STALL_MISSFIFO_FULL   = 0x00000032,
RMI_PERF_SEL_UTCL1_HIT_FIFO_FULL         = 0x00000033,
RMI_PERF_SEL_UTCL1_STALL_MULTI_MISS      = 0x00000034,
RMI_PERF_SEL_RB_RMI_WRREQ_ALL_CID        = 0x00000035,
RMI_PERF_SEL_RB_RMI_WRREQ_BUSY           = 0x00000036,
RMI_PERF_SEL_RB_RMI_WRREQ_CID0           = 0x00000037,
RMI_PERF_SEL_RB_RMI_WRREQ_CID1           = 0x00000038,
RMI_PERF_SEL_RB_RMI_WRREQ_CID2           = 0x00000039,
RMI_PERF_SEL_RB_RMI_WRREQ_CID3           = 0x0000003a,
RMI_PERF_SEL_RB_RMI_WRREQ_CID4           = 0x0000003b,
RMI_PERF_SEL_RB_RMI_WRREQ_CID5           = 0x0000003c,
RMI_PERF_SEL_RB_RMI_WRREQ_CID6           = 0x0000003d,
RMI_PERF_SEL_RB_RMI_WRREQ_CID7           = 0x0000003e,
RMI_PERF_SEL_RB_RMI_WRREQ_INFLIGHT_ALL_ORONE_CID = 0x0000003f,
RMI_PERF_SEL_RB_RMI_WRREQ_BURST_LENGTH_ALL_ORONE_CID = 0x00000040,
RMI_PERF_SEL_RB_RMI_WRREQ_BURST_ALL_ORONE_CID = 0x00000041,
RMI_PERF_SEL_RB_RMI_WRREQ_RESIDENCY      = 0x00000042,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_ALL_CID  = 0x00000043,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_CID0     = 0x00000044,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_CID1     = 0x00000045,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_CID2     = 0x00000046,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_CID3     = 0x00000047,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_CID4     = 0x00000048,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_CID5     = 0x00000049,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_CID6     = 0x0000004a,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_CID7     = 0x0000004b,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_NACK0    = 0x0000004c,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_NACK1    = 0x0000004d,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_NACK2    = 0x0000004e,
RMI_PERF_SEL_RMI_RB_WRRET_VALID_NACK3    = 0x0000004f,
RMI_PERF_SEL_RB_RMI_32BRDREQ_ALL_CID     = 0x00000050,
RMI_PERF_SEL_RB_RMI_RDREQ_ALL_CID        = 0x00000051,
RMI_PERF_SEL_RB_RMI_RDREQ_BUSY           = 0x00000052,
RMI_PERF_SEL_RB_RMI_32BRDREQ_CID0        = 0x00000053,
RMI_PERF_SEL_RB_RMI_32BRDREQ_CID1        = 0x00000054,
RMI_PERF_SEL_RB_RMI_32BRDREQ_CID2        = 0x00000055,
RMI_PERF_SEL_RB_RMI_32BRDREQ_CID3        = 0x00000056,
RMI_PERF_SEL_RB_RMI_32BRDREQ_CID4        = 0x00000057,
RMI_PERF_SEL_RB_RMI_32BRDREQ_CID5        = 0x00000058,
RMI_PERF_SEL_RB_RMI_32BRDREQ_CID6        = 0x00000059,
RMI_PERF_SEL_RB_RMI_32BRDREQ_CID7        = 0x0000005a,
RMI_PERF_SEL_RB_RMI_RDREQ_CID0           = 0x0000005b,
RMI_PERF_SEL_RB_RMI_RDREQ_CID1           = 0x0000005c,
RMI_PERF_SEL_RB_RMI_RDREQ_CID2           = 0x0000005d,
RMI_PERF_SEL_RB_RMI_RDREQ_CID3           = 0x0000005e,
RMI_PERF_SEL_RB_RMI_RDREQ_CID4           = 0x0000005f,
RMI_PERF_SEL_RB_RMI_RDREQ_CID5           = 0x00000060,
RMI_PERF_SEL_RB_RMI_RDREQ_CID6           = 0x00000061,
RMI_PERF_SEL_RB_RMI_RDREQ_CID7           = 0x00000062,
RMI_PERF_SEL_RB_RMI_32BRDREQ_INFLIGHT_ALL_ORONE_CID = 0x00000063,
RMI_PERF_SEL_RB_RMI_RDREQ_BURST_LENGTH_ALL_ORONE_CID = 0x00000064,
RMI_PERF_SEL_RB_RMI_RDREQ_BURST_ALL_ORONE_CID = 0x00000065,
RMI_PERF_SEL_RB_RMI_RDREQ_RESIDENCY      = 0x00000066,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_ALL_CID = 0x00000067,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_CID0  = 0x00000068,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_CID1  = 0x00000069,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_CID2  = 0x0000006a,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_CID3  = 0x0000006b,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_CID4  = 0x0000006c,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_CID5  = 0x0000006d,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_CID6  = 0x0000006e,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_CID7  = 0x0000006f,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_NACK0 = 0x00000070,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_NACK1 = 0x00000071,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_NACK2 = 0x00000072,
RMI_PERF_SEL_RMI_RB_32BRDRET_VALID_NACK3 = 0x00000073,
RMI_PERF_SEL_RMI_TC_WRREQ_ALL_CID        = 0x00000074,
RMI_PERF_SEL_RMI_TC_REQ_BUSY             = 0x00000075,
RMI_PERF_SEL_RMI_TC_WRREQ_CID0           = 0x00000076,
RMI_PERF_SEL_RMI_TC_WRREQ_CID1           = 0x00000077,
RMI_PERF_SEL_RMI_TC_WRREQ_CID2           = 0x00000078,
RMI_PERF_SEL_RMI_TC_WRREQ_CID3           = 0x00000079,
RMI_PERF_SEL_RMI_TC_WRREQ_CID4           = 0x0000007a,
RMI_PERF_SEL_RMI_TC_WRREQ_CID5           = 0x0000007b,
RMI_PERF_SEL_RMI_TC_WRREQ_CID6           = 0x0000007c,
RMI_PERF_SEL_RMI_TC_WRREQ_CID7           = 0x0000007d,
RMI_PERF_SEL_RMI_TC_WRREQ_INFLIGHT_ALL_CID = 0x0000007e,
RMI_PERF_SEL_TC_RMI_WRRET_VALID_ALL_CID  = 0x0000007f,
RMI_PERF_SEL_RMI_TC_RDREQ_ALL_CID        = 0x00000080,
RMI_PERF_SEL_RMI_TC_RDREQ_CID0           = 0x00000081,
RMI_PERF_SEL_RMI_TC_RDREQ_CID1           = 0x00000082,
RMI_PERF_SEL_RMI_TC_RDREQ_CID2           = 0x00000083,
RMI_PERF_SEL_RMI_TC_RDREQ_CID3           = 0x00000084,
RMI_PERF_SEL_RMI_TC_RDREQ_CID4           = 0x00000085,
RMI_PERF_SEL_RMI_TC_RDREQ_CID5           = 0x00000086,
RMI_PERF_SEL_RMI_TC_RDREQ_CID6           = 0x00000087,
RMI_PERF_SEL_RMI_TC_RDREQ_CID7           = 0x00000088,
RMI_PERF_SEL_RMI_TC_RDREQ_INFLIGHT_ALL_CID = 0x00000089,
RMI_PERF_SEL_TC_RMI_RDRET_VALID_ALL_CID  = 0x0000008a,
RMI_PERF_SEL_UTCL1_BUSY                  = 0x0000008b,
RMI_PERF_SEL_RMI_UTC_REQ                 = 0x0000008c,
RMI_PERF_SEL_RMI_UTC_BUSY                = 0x0000008d,
RMI_PERF_SEL_UTCL1_UTCL2_REQ             = 0x0000008e,
RMI_PERF_SEL_PROBE_UTCL1_XNACK_RETRY     = 0x0000008f,
RMI_PERF_SEL_PROBE_UTCL1_ALL_FAULT       = 0x00000090,
RMI_PERF_SEL_PROBE_UTCL1_PRT_FAULT       = 0x00000091,
RMI_PERF_SEL_PROBE_UTCL1_XNACK_NORETRY_FAULT = 0x00000092,
RMI_PERF_SEL_XNACK_FIFO_NUM_USED         = 0x00000093,
RMI_PERF_SEL_LAT_FIFO_NUM_USED           = 0x00000094,
RMI_PERF_SEL_LAT_FIFO_BLOCKING_REQ       = 0x00000095,
RMI_PERF_SEL_LAT_FIFO_NONBLOCKING_REQ    = 0x00000096,
RMI_PERF_SEL_XNACK_FIFO_FULL             = 0x00000097,
RMI_PERF_SEL_XNACK_FIFO_BUSY             = 0x00000098,
RMI_PERF_SEL_LAT_FIFO_FULL               = 0x00000099,
RMI_PERF_SEL_SKID_FIFO_DEPTH             = 0x0000009a,
RMI_PERF_SEL_TCIW_INFLIGHT_COUNT         = 0x0000009b,
RMI_PERF_SEL_PRT_FIFO_NUM_USED           = 0x0000009c,
RMI_PERF_SEL_PRT_FIFO_REQ                = 0x0000009d,
RMI_PERF_SEL_PRT_FIFO_BUSY               = 0x0000009e,
RMI_PERF_SEL_TCIW_REQ                    = 0x0000009f,
RMI_PERF_SEL_TCIW_BUSY                   = 0x000000a0,
RMI_PERF_SEL_SKID_FIFO_REQ               = 0x000000a1,
RMI_PERF_SEL_SKID_FIFO_BUSY              = 0x000000a2,
RMI_PERF_SEL_DEMUX_TCIW_RESIDENCY_NACK0  = 0x000000a3,
RMI_PERF_SEL_DEMUX_TCIW_RESIDENCY_NACK1  = 0x000000a4,
RMI_PERF_SEL_DEMUX_TCIW_RESIDENCY_NACK2  = 0x000000a5,
RMI_PERF_SEL_DEMUX_TCIW_RESIDENCY_NACK3  = 0x000000a6,
RMI_PERF_SEL_XBAR_PROBEGEN_RTS_RTR       = 0x000000a7,
RMI_PERF_SEL_XBAR_PROBEGEN_RTSB_RTR      = 0x000000a8,
RMI_PERF_SEL_XBAR_PROBEGEN_RTS_RTRB      = 0x000000a9,
RMI_PERF_SEL_XBAR_PROBEGEN_RTSB_RTRB     = 0x000000aa,
RMI_PERF_SEL_DEMUX_TCIW_FORMATTER_RTS_RTR = 0x000000ab,
RMI_PERF_SEL_DEMUX_TCIW_FORMATTER_RTSB_RTR = 0x000000ac,
RMI_PERF_SEL_DEMUX_TCIW_FORMATTER_RTS_RTRB = 0x000000ad,
RMI_PERF_SEL_DEMUX_TCIW_FORMATTER_RTSB_RTRB = 0x000000ae,
RMI_PERF_SEL_WRREQCONSUMER_XBAR_WRREQ_RTS_RTR = 0x000000af,
RMI_PERF_SEL_WRREQCONSUMER_XBAR_WRREQ_RTSB_RTR = 0x000000b0,
RMI_PERF_SEL_WRREQCONSUMER_XBAR_WRREQ_RTS_RTRB = 0x000000b1,
RMI_PERF_SEL_WRREQCONSUMER_XBAR_WRREQ_RTSB_RTRB = 0x000000b2,
RMI_PERF_SEL_RDREQCONSUMER_XBAR_RDREQ_RTS_RTR = 0x000000b3,
RMI_PERF_SEL_RDREQCONSUMER_XBAR_RDREQ_RTSB_RTR = 0x000000b4,
RMI_PERF_SEL_RDREQCONSUMER_XBAR_RDREQ_RTS_RTRB = 0x000000b5,
RMI_PERF_SEL_RDREQCONSUMER_XBAR_RDREQ_RTSB_RTRB = 0x000000b6,
RMI_PERF_SEL_POP_DEMUX_RTS_RTR           = 0x000000b7,
RMI_PERF_SEL_POP_DEMUX_RTSB_RTR          = 0x000000b8,
RMI_PERF_SEL_POP_DEMUX_RTS_RTRB          = 0x000000b9,
RMI_PERF_SEL_POP_DEMUX_RTSB_RTRB         = 0x000000ba,
RMI_PERF_SEL_PROBEGEN_UTC_RTS_RTR        = 0x000000bb,
RMI_PERF_SEL_PROBEGEN_UTC_RTSB_RTR       = 0x000000bc,
RMI_PERF_SEL_PROBEGEN_UTC_RTS_RTRB       = 0x000000bd,
RMI_PERF_SEL_PROBEGEN_UTC_RTSB_RTRB      = 0x000000be,
RMI_PERF_SEL_UTC_POP_RTS_RTR             = 0x000000bf,
RMI_PERF_SEL_UTC_POP_RTSB_RTR            = 0x000000c0,
RMI_PERF_SEL_UTC_POP_RTS_RTRB            = 0x000000c1,
RMI_PERF_SEL_UTC_POP_RTSB_RTRB           = 0x000000c2,
RMI_PERF_SEL_POP_XNACK_RTS_RTR           = 0x000000c3,
RMI_PERF_SEL_POP_XNACK_RTSB_RTR          = 0x000000c4,
RMI_PERF_SEL_POP_XNACK_RTS_RTRB          = 0x000000c5,
RMI_PERF_SEL_POP_XNACK_RTSB_RTRB         = 0x000000c6,
RMI_PERF_SEL_XNACK_PROBEGEN_RTS_RTR      = 0x000000c7,
RMI_PERF_SEL_XNACK_PROBEGEN_RTSB_RTR     = 0x000000c8,
RMI_PERF_SEL_XNACK_PROBEGEN_RTS_RTRB     = 0x000000c9,
RMI_PERF_SEL_XNACK_PROBEGEN_RTSB_RTRB    = 0x000000ca,
RMI_PERF_SEL_PRTFIFO_RTNFORMATTER_RTS_RTR = 0x000000cb,
RMI_PERF_SEL_PRTFIFO_RTNFORMATTER_RTSB_RTR = 0x000000cc,
RMI_PERF_SEL_PRTFIFO_RTNFORMATTER_RTS_RTRB = 0x000000cd,
RMI_PERF_SEL_PRTFIFO_RTNFORMATTER_RTSB_RTRB = 0x000000ce,
RMI_PERF_SEL_SKID_FIFO_IN_RTS            = 0x000000cf,
RMI_PERF_SEL_SKID_FIFO_IN_RTSB           = 0x000000d0,
RMI_PERF_SEL_SKID_FIFO_OUT_RTS           = 0x000000d1,
RMI_PERF_SEL_SKID_FIFO_OUT_RTSB          = 0x000000d2,
RMI_PERF_SEL_XBAR_PROBEGEN_READ_RTS_RTR  = 0x000000d3,
RMI_PERF_SEL_XBAR_PROBEGEN_WRITE_RTS_RTR = 0x000000d4,
RMI_PERF_SEL_XBAR_PROBEGEN_IN0_RTS_RTR   = 0x000000d5,
RMI_PERF_SEL_XBAR_PROBEGEN_IN1_RTS_RTR   = 0x000000d6,
RMI_PERF_SEL_XBAR_PROBEGEN_CB_RTS_RTR    = 0x000000d7,
RMI_PERF_SEL_XBAR_PROBEGEN_DB_RTS_RTR    = 0x000000d8,
RMI_PERF_SEL_REORDER_FIFO_REQ            = 0x000000d9,
RMI_PERF_SEL_REORDER_FIFO_BUSY           = 0x000000da,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_ALL_CID  = 0x000000db,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_CID0     = 0x000000dc,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_CID1     = 0x000000dd,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_CID2     = 0x000000de,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_CID3     = 0x000000df,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_CID4     = 0x000000e0,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_CID5     = 0x000000e1,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_CID6     = 0x000000e2,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_CID7     = 0x000000e3,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_NACK0    = 0x000000e4,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_NACK1    = 0x000000e5,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_NACK2    = 0x000000e6,
RMI_PERF_SEL_RMI_RB_EARLY_WRACK_NACK3    = 0x000000e7,
} RMIPerfSel;

/*******************************************************
 * IH Enums
 *******************************************************/

/*
 * IH_PERF_SEL enum
 */

typedef enum IH_PERF_SEL {
IH_PERF_SEL_CYCLE                        = 0x00000000,
IH_PERF_SEL_IDLE                         = 0x00000001,
IH_PERF_SEL_INPUT_IDLE                   = 0x00000002,
IH_PERF_SEL_BUFFER_IDLE                  = 0x00000003,
IH_PERF_SEL_RB0_FULL                     = 0x00000004,
IH_PERF_SEL_RB0_OVERFLOW                 = 0x00000005,
IH_PERF_SEL_RB0_WPTR_WRITEBACK           = 0x00000006,
IH_PERF_SEL_RB0_WPTR_WRAP                = 0x00000007,
IH_PERF_SEL_RB0_RPTR_WRAP                = 0x00000008,
IH_PERF_SEL_MC_WR_IDLE                   = 0x00000009,
IH_PERF_SEL_MC_WR_COUNT                  = 0x0000000a,
IH_PERF_SEL_MC_WR_STALL                  = 0x0000000b,
IH_PERF_SEL_MC_WR_CLEAN_PENDING          = 0x0000000c,
IH_PERF_SEL_MC_WR_CLEAN_STALL            = 0x0000000d,
IH_PERF_SEL_BIF_LINE0_RISING             = 0x0000000e,
IH_PERF_SEL_BIF_LINE0_FALLING            = 0x0000000f,
IH_PERF_SEL_RB1_FULL                     = 0x00000010,
IH_PERF_SEL_RB1_OVERFLOW                 = 0x00000011,
Reserved18                               = 0x00000012,
IH_PERF_SEL_RB1_WPTR_WRAP                = 0x00000013,
IH_PERF_SEL_RB1_RPTR_WRAP                = 0x00000014,
IH_PERF_SEL_RB2_FULL                     = 0x00000015,
IH_PERF_SEL_RB2_OVERFLOW                 = 0x00000016,
Reserved23                               = 0x00000017,
IH_PERF_SEL_RB2_WPTR_WRAP                = 0x00000018,
IH_PERF_SEL_RB2_RPTR_WRAP                = 0x00000019,
Reserved26                               = 0x0000001a,
Reserved27                               = 0x0000001b,
Reserved28                               = 0x0000001c,
Reserved29                               = 0x0000001d,
IH_PERF_SEL_RB0_FULL_VF0                 = 0x0000001e,
IH_PERF_SEL_RB0_FULL_VF1                 = 0x0000001f,
IH_PERF_SEL_RB0_FULL_VF2                 = 0x00000020,
IH_PERF_SEL_RB0_FULL_VF3                 = 0x00000021,
IH_PERF_SEL_RB0_FULL_VF4                 = 0x00000022,
IH_PERF_SEL_RB0_FULL_VF5                 = 0x00000023,
IH_PERF_SEL_RB0_FULL_VF6                 = 0x00000024,
IH_PERF_SEL_RB0_FULL_VF7                 = 0x00000025,
IH_PERF_SEL_RB0_FULL_VF8                 = 0x00000026,
IH_PERF_SEL_RB0_FULL_VF9                 = 0x00000027,
IH_PERF_SEL_RB0_FULL_VF10                = 0x00000028,
IH_PERF_SEL_RB0_FULL_VF11                = 0x00000029,
IH_PERF_SEL_RB0_FULL_VF12                = 0x0000002a,
IH_PERF_SEL_RB0_FULL_VF13                = 0x0000002b,
IH_PERF_SEL_RB0_FULL_VF14                = 0x0000002c,
IH_PERF_SEL_RB0_FULL_VF15                = 0x0000002d,
IH_PERF_SEL_RB0_OVERFLOW_VF0             = 0x0000002e,
IH_PERF_SEL_RB0_OVERFLOW_VF1             = 0x0000002f,
IH_PERF_SEL_RB0_OVERFLOW_VF2             = 0x00000030,
IH_PERF_SEL_RB0_OVERFLOW_VF3             = 0x00000031,
IH_PERF_SEL_RB0_OVERFLOW_VF4             = 0x00000032,
IH_PERF_SEL_RB0_OVERFLOW_VF5             = 0x00000033,
IH_PERF_SEL_RB0_OVERFLOW_VF6             = 0x00000034,
IH_PERF_SEL_RB0_OVERFLOW_VF7             = 0x00000035,
IH_PERF_SEL_RB0_OVERFLOW_VF8             = 0x00000036,
IH_PERF_SEL_RB0_OVERFLOW_VF9             = 0x00000037,
IH_PERF_SEL_RB0_OVERFLOW_VF10            = 0x00000038,
IH_PERF_SEL_RB0_OVERFLOW_VF11            = 0x00000039,
IH_PERF_SEL_RB0_OVERFLOW_VF12            = 0x0000003a,
IH_PERF_SEL_RB0_OVERFLOW_VF13            = 0x0000003b,
IH_PERF_SEL_RB0_OVERFLOW_VF14            = 0x0000003c,
IH_PERF_SEL_RB0_OVERFLOW_VF15            = 0x0000003d,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF0       = 0x0000003e,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF1       = 0x0000003f,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF2       = 0x00000040,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF3       = 0x00000041,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF4       = 0x00000042,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF5       = 0x00000043,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF6       = 0x00000044,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF7       = 0x00000045,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF8       = 0x00000046,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF9       = 0x00000047,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF10      = 0x00000048,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF11      = 0x00000049,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF12      = 0x0000004a,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF13      = 0x0000004b,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF14      = 0x0000004c,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF15      = 0x0000004d,
IH_PERF_SEL_RB0_WPTR_WRAP_VF0            = 0x0000004e,
IH_PERF_SEL_RB0_WPTR_WRAP_VF1            = 0x0000004f,
IH_PERF_SEL_RB0_WPTR_WRAP_VF2            = 0x00000050,
IH_PERF_SEL_RB0_WPTR_WRAP_VF3            = 0x00000051,
IH_PERF_SEL_RB0_WPTR_WRAP_VF4            = 0x00000052,
IH_PERF_SEL_RB0_WPTR_WRAP_VF5            = 0x00000053,
IH_PERF_SEL_RB0_WPTR_WRAP_VF6            = 0x00000054,
IH_PERF_SEL_RB0_WPTR_WRAP_VF7            = 0x00000055,
IH_PERF_SEL_RB0_WPTR_WRAP_VF8            = 0x00000056,
IH_PERF_SEL_RB0_WPTR_WRAP_VF9            = 0x00000057,
IH_PERF_SEL_RB0_WPTR_WRAP_VF10           = 0x00000058,
IH_PERF_SEL_RB0_WPTR_WRAP_VF11           = 0x00000059,
IH_PERF_SEL_RB0_WPTR_WRAP_VF12           = 0x0000005a,
IH_PERF_SEL_RB0_WPTR_WRAP_VF13           = 0x0000005b,
IH_PERF_SEL_RB0_WPTR_WRAP_VF14           = 0x0000005c,
IH_PERF_SEL_RB0_WPTR_WRAP_VF15           = 0x0000005d,
IH_PERF_SEL_RB0_RPTR_WRAP_VF0            = 0x0000005e,
IH_PERF_SEL_RB0_RPTR_WRAP_VF1            = 0x0000005f,
IH_PERF_SEL_RB0_RPTR_WRAP_VF2            = 0x00000060,
IH_PERF_SEL_RB0_RPTR_WRAP_VF3            = 0x00000061,
IH_PERF_SEL_RB0_RPTR_WRAP_VF4            = 0x00000062,
IH_PERF_SEL_RB0_RPTR_WRAP_VF5            = 0x00000063,
IH_PERF_SEL_RB0_RPTR_WRAP_VF6            = 0x00000064,
IH_PERF_SEL_RB0_RPTR_WRAP_VF7            = 0x00000065,
IH_PERF_SEL_RB0_RPTR_WRAP_VF8            = 0x00000066,
IH_PERF_SEL_RB0_RPTR_WRAP_VF9            = 0x00000067,
IH_PERF_SEL_RB0_RPTR_WRAP_VF10           = 0x00000068,
IH_PERF_SEL_RB0_RPTR_WRAP_VF11           = 0x00000069,
IH_PERF_SEL_RB0_RPTR_WRAP_VF12           = 0x0000006a,
IH_PERF_SEL_RB0_RPTR_WRAP_VF13           = 0x0000006b,
IH_PERF_SEL_RB0_RPTR_WRAP_VF14           = 0x0000006c,
IH_PERF_SEL_RB0_RPTR_WRAP_VF15           = 0x0000006d,
IH_PERF_SEL_BIF_LINE0_RISING_VF0         = 0x0000006e,
IH_PERF_SEL_BIF_LINE0_RISING_VF1         = 0x0000006f,
IH_PERF_SEL_BIF_LINE0_RISING_VF2         = 0x00000070,
IH_PERF_SEL_BIF_LINE0_RISING_VF3         = 0x00000071,
IH_PERF_SEL_BIF_LINE0_RISING_VF4         = 0x00000072,
IH_PERF_SEL_BIF_LINE0_RISING_VF5         = 0x00000073,
IH_PERF_SEL_BIF_LINE0_RISING_VF6         = 0x00000074,
IH_PERF_SEL_BIF_LINE0_RISING_VF7         = 0x00000075,
IH_PERF_SEL_BIF_LINE0_RISING_VF8         = 0x00000076,
IH_PERF_SEL_BIF_LINE0_RISING_VF9         = 0x00000077,
IH_PERF_SEL_BIF_LINE0_RISING_VF10        = 0x00000078,
IH_PERF_SEL_BIF_LINE0_RISING_VF11        = 0x00000079,
IH_PERF_SEL_BIF_LINE0_RISING_VF12        = 0x0000007a,
IH_PERF_SEL_BIF_LINE0_RISING_VF13        = 0x0000007b,
IH_PERF_SEL_BIF_LINE0_RISING_VF14        = 0x0000007c,
IH_PERF_SEL_BIF_LINE0_RISING_VF15        = 0x0000007d,
IH_PERF_SEL_BIF_LINE0_FALLING_VF0        = 0x0000007e,
IH_PERF_SEL_BIF_LINE0_FALLING_VF1        = 0x0000007f,
IH_PERF_SEL_BIF_LINE0_FALLING_VF2        = 0x00000080,
IH_PERF_SEL_BIF_LINE0_FALLING_VF3        = 0x00000081,
IH_PERF_SEL_BIF_LINE0_FALLING_VF4        = 0x00000082,
IH_PERF_SEL_BIF_LINE0_FALLING_VF5        = 0x00000083,
IH_PERF_SEL_BIF_LINE0_FALLING_VF6        = 0x00000084,
IH_PERF_SEL_BIF_LINE0_FALLING_VF7        = 0x00000085,
IH_PERF_SEL_BIF_LINE0_FALLING_VF8        = 0x00000086,
IH_PERF_SEL_BIF_LINE0_FALLING_VF9        = 0x00000087,
IH_PERF_SEL_BIF_LINE0_FALLING_VF10       = 0x00000088,
IH_PERF_SEL_BIF_LINE0_FALLING_VF11       = 0x00000089,
IH_PERF_SEL_BIF_LINE0_FALLING_VF12       = 0x0000008a,
IH_PERF_SEL_BIF_LINE0_FALLING_VF13       = 0x0000008b,
IH_PERF_SEL_BIF_LINE0_FALLING_VF14       = 0x0000008c,
IH_PERF_SEL_BIF_LINE0_FALLING_VF15       = 0x0000008d,
Reserved142                              = 0x0000008e,
Reserved143                              = 0x0000008f,
Reserved144                              = 0x00000090,
Reserved145                              = 0x00000091,
Reserved146                              = 0x00000092,
Reserved147                              = 0x00000093,
Reserved148                              = 0x00000094,
Reserved149                              = 0x00000095,
IH_PERF_SEL_CLIENT0_INT                  = 0x00000096,
IH_PERF_SEL_CLIENT1_INT                  = 0x00000097,
IH_PERF_SEL_CLIENT2_INT                  = 0x00000098,
IH_PERF_SEL_CLIENT3_INT                  = 0x00000099,
IH_PERF_SEL_CLIENT4_INT                  = 0x0000009a,
IH_PERF_SEL_CLIENT5_INT                  = 0x0000009b,
IH_PERF_SEL_CLIENT6_INT                  = 0x0000009c,
IH_PERF_SEL_CLIENT7_INT                  = 0x0000009d,
IH_PERF_SEL_CLIENT8_INT                  = 0x0000009e,
IH_PERF_SEL_CLIENT9_INT                  = 0x0000009f,
IH_PERF_SEL_CLIENT10_INT                 = 0x000000a0,
IH_PERF_SEL_CLIENT11_INT                 = 0x000000a1,
IH_PERF_SEL_CLIENT12_INT                 = 0x000000a2,
IH_PERF_SEL_CLIENT13_INT                 = 0x000000a3,
IH_PERF_SEL_CLIENT14_INT                 = 0x000000a4,
IH_PERF_SEL_CLIENT15_INT                 = 0x000000a5,
IH_PERF_SEL_CLIENT16_INT                 = 0x000000a6,
IH_PERF_SEL_CLIENT17_INT                 = 0x000000a7,
IH_PERF_SEL_CLIENT18_INT                 = 0x000000a8,
IH_PERF_SEL_CLIENT19_INT                 = 0x000000a9,
IH_PERF_SEL_CLIENT20_INT                 = 0x000000aa,
IH_PERF_SEL_CLIENT21_INT                 = 0x000000ab,
IH_PERF_SEL_CLIENT22_INT                 = 0x000000ac,
IH_PERF_SEL_CLIENT23_INT                 = 0x000000ad,
IH_PERF_SEL_CLIENT24_INT                 = 0x000000ae,
IH_PERF_SEL_CLIENT25_INT                 = 0x000000af,
IH_PERF_SEL_CLIENT26_INT                 = 0x000000b0,
IH_PERF_SEL_CLIENT27_INT                 = 0x000000b1,
IH_PERF_SEL_CLIENT28_INT                 = 0x000000b2,
IH_PERF_SEL_CLIENT29_INT                 = 0x000000b3,
IH_PERF_SEL_CLIENT30_INT                 = 0x000000b4,
IH_PERF_SEL_CLIENT31_INT                 = 0x000000b5,
Reserved182                              = 0x000000b6,
Reserved183                              = 0x000000b7,
Reserved184                              = 0x000000b8,
Reserved185                              = 0x000000b9,
Reserved186                              = 0x000000ba,
Reserved187                              = 0x000000bb,
Reserved188                              = 0x000000bc,
Reserved189                              = 0x000000bd,
Reserved190                              = 0x000000be,
Reserved191                              = 0x000000bf,
Reserved192                              = 0x000000c0,
Reserved193                              = 0x000000c1,
Reserved194                              = 0x000000c2,
Reserved195                              = 0x000000c3,
Reserved196                              = 0x000000c4,
Reserved197                              = 0x000000c5,
Reserved198                              = 0x000000c6,
Reserved199                              = 0x000000c7,
Reserved200                              = 0x000000c8,
Reserved201                              = 0x000000c9,
Reserved202                              = 0x000000ca,
Reserved203                              = 0x000000cb,
Reserved204                              = 0x000000cc,
Reserved205                              = 0x000000cd,
Reserved206                              = 0x000000ce,
Reserved207                              = 0x000000cf,
Reserved208                              = 0x000000d0,
Reserved209                              = 0x000000d1,
Reserved210                              = 0x000000d2,
Reserved211                              = 0x000000d3,
Reserved212                              = 0x000000d4,
Reserved213                              = 0x000000d5,
Reserved214                              = 0x000000d6,
Reserved215                              = 0x000000d7,
Reserved216                              = 0x000000d8,
Reserved217                              = 0x000000d9,
Reserved218                              = 0x000000da,
Reserved219                              = 0x000000db,
IH_PERF_SEL_RB1_FULL_VF0                 = 0x000000dc,
IH_PERF_SEL_RB1_FULL_VF1                 = 0x000000dd,
IH_PERF_SEL_RB1_FULL_VF2                 = 0x000000de,
IH_PERF_SEL_RB1_FULL_VF3                 = 0x000000df,
IH_PERF_SEL_RB1_FULL_VF4                 = 0x000000e0,
IH_PERF_SEL_RB1_FULL_VF5                 = 0x000000e1,
IH_PERF_SEL_RB1_FULL_VF6                 = 0x000000e2,
IH_PERF_SEL_RB1_FULL_VF7                 = 0x000000e3,
IH_PERF_SEL_RB1_FULL_VF8                 = 0x000000e4,
IH_PERF_SEL_RB1_FULL_VF9                 = 0x000000e5,
IH_PERF_SEL_RB1_FULL_VF10                = 0x000000e6,
IH_PERF_SEL_RB1_FULL_VF11                = 0x000000e7,
IH_PERF_SEL_RB1_FULL_VF12                = 0x000000e8,
IH_PERF_SEL_RB1_FULL_VF13                = 0x000000e9,
IH_PERF_SEL_RB1_FULL_VF14                = 0x000000ea,
IH_PERF_SEL_RB1_FULL_VF15                = 0x000000eb,
IH_PERF_SEL_RB1_OVERFLOW_VF0             = 0x000000ec,
IH_PERF_SEL_RB1_OVERFLOW_VF1             = 0x000000ed,
IH_PERF_SEL_RB1_OVERFLOW_VF2             = 0x000000ee,
IH_PERF_SEL_RB1_OVERFLOW_VF3             = 0x000000ef,
IH_PERF_SEL_RB1_OVERFLOW_VF4             = 0x000000f0,
IH_PERF_SEL_RB1_OVERFLOW_VF5             = 0x000000f1,
IH_PERF_SEL_RB1_OVERFLOW_VF6             = 0x000000f2,
IH_PERF_SEL_RB1_OVERFLOW_VF7             = 0x000000f3,
IH_PERF_SEL_RB1_OVERFLOW_VF8             = 0x000000f4,
IH_PERF_SEL_RB1_OVERFLOW_VF9             = 0x000000f5,
IH_PERF_SEL_RB1_OVERFLOW_VF10            = 0x000000f6,
IH_PERF_SEL_RB1_OVERFLOW_VF11            = 0x000000f7,
IH_PERF_SEL_RB1_OVERFLOW_VF12            = 0x000000f8,
IH_PERF_SEL_RB1_OVERFLOW_VF13            = 0x000000f9,
IH_PERF_SEL_RB1_OVERFLOW_VF14            = 0x000000fa,
IH_PERF_SEL_RB1_OVERFLOW_VF15            = 0x000000fb,
Reserved252                              = 0x000000fc,
Reserved253                              = 0x000000fd,
Reserved254                              = 0x000000fe,
Reserved255                              = 0x000000ff,
Reserved256                              = 0x00000100,
Reserved257                              = 0x00000101,
Reserved258                              = 0x00000102,
Reserved259                              = 0x00000103,
Reserved260                              = 0x00000104,
Reserved261                              = 0x00000105,
Reserved262                              = 0x00000106,
Reserved263                              = 0x00000107,
Reserved264                              = 0x00000108,
Reserved265                              = 0x00000109,
Reserved266                              = 0x0000010a,
Reserved267                              = 0x0000010b,
IH_PERF_SEL_RB1_WPTR_WRAP_VF0            = 0x0000010c,
IH_PERF_SEL_RB1_WPTR_WRAP_VF1            = 0x0000010d,
IH_PERF_SEL_RB1_WPTR_WRAP_VF2            = 0x0000010e,
IH_PERF_SEL_RB1_WPTR_WRAP_VF3            = 0x0000010f,
IH_PERF_SEL_RB1_WPTR_WRAP_VF4            = 0x00000110,
IH_PERF_SEL_RB1_WPTR_WRAP_VF5            = 0x00000111,
IH_PERF_SEL_RB1_WPTR_WRAP_VF6            = 0x00000112,
IH_PERF_SEL_RB1_WPTR_WRAP_VF7            = 0x00000113,
IH_PERF_SEL_RB1_WPTR_WRAP_VF8            = 0x00000114,
IH_PERF_SEL_RB1_WPTR_WRAP_VF9            = 0x00000115,
IH_PERF_SEL_RB1_WPTR_WRAP_VF10           = 0x00000116,
IH_PERF_SEL_RB1_WPTR_WRAP_VF11           = 0x00000117,
IH_PERF_SEL_RB1_WPTR_WRAP_VF12           = 0x00000118,
IH_PERF_SEL_RB1_WPTR_WRAP_VF13           = 0x00000119,
IH_PERF_SEL_RB1_WPTR_WRAP_VF14           = 0x0000011a,
IH_PERF_SEL_RB1_WPTR_WRAP_VF15           = 0x0000011b,
IH_PERF_SEL_RB1_RPTR_WRAP_VF0            = 0x0000011c,
IH_PERF_SEL_RB1_RPTR_WRAP_VF1            = 0x0000011d,
IH_PERF_SEL_RB1_RPTR_WRAP_VF2            = 0x0000011e,
IH_PERF_SEL_RB1_RPTR_WRAP_VF3            = 0x0000011f,
IH_PERF_SEL_RB1_RPTR_WRAP_VF4            = 0x00000120,
IH_PERF_SEL_RB1_RPTR_WRAP_VF5            = 0x00000121,
IH_PERF_SEL_RB1_RPTR_WRAP_VF6            = 0x00000122,
IH_PERF_SEL_RB1_RPTR_WRAP_VF7            = 0x00000123,
IH_PERF_SEL_RB1_RPTR_WRAP_VF8            = 0x00000124,
IH_PERF_SEL_RB1_RPTR_WRAP_VF9            = 0x00000125,
IH_PERF_SEL_RB1_RPTR_WRAP_VF10           = 0x00000126,
IH_PERF_SEL_RB1_RPTR_WRAP_VF11           = 0x00000127,
IH_PERF_SEL_RB1_RPTR_WRAP_VF12           = 0x00000128,
IH_PERF_SEL_RB1_RPTR_WRAP_VF13           = 0x00000129,
IH_PERF_SEL_RB1_RPTR_WRAP_VF14           = 0x0000012a,
IH_PERF_SEL_RB1_RPTR_WRAP_VF15           = 0x0000012b,
Reserved300                              = 0x0000012c,
Reserved301                              = 0x0000012d,
Reserved302                              = 0x0000012e,
Reserved303                              = 0x0000012f,
Reserved304                              = 0x00000130,
Reserved305                              = 0x00000131,
Reserved306                              = 0x00000132,
Reserved307                              = 0x00000133,
Reserved308                              = 0x00000134,
Reserved309                              = 0x00000135,
Reserved310                              = 0x00000136,
Reserved311                              = 0x00000137,
Reserved312                              = 0x00000138,
Reserved313                              = 0x00000139,
Reserved314                              = 0x0000013a,
Reserved315                              = 0x0000013b,
Reserved316                              = 0x0000013c,
Reserved317                              = 0x0000013d,
Reserved318                              = 0x0000013e,
Reserved319                              = 0x0000013f,
Reserved320                              = 0x00000140,
Reserved321                              = 0x00000141,
Reserved322                              = 0x00000142,
Reserved323                              = 0x00000143,
Reserved324                              = 0x00000144,
Reserved325                              = 0x00000145,
Reserved326                              = 0x00000146,
Reserved327                              = 0x00000147,
Reserved328                              = 0x00000148,
Reserved329                              = 0x00000149,
Reserved330                              = 0x0000014a,
Reserved331                              = 0x0000014b,
IH_PERF_SEL_RB2_FULL_VF0                 = 0x0000014c,
IH_PERF_SEL_RB2_FULL_VF1                 = 0x0000014d,
IH_PERF_SEL_RB2_FULL_VF2                 = 0x0000014e,
IH_PERF_SEL_RB2_FULL_VF3                 = 0x0000014f,
IH_PERF_SEL_RB2_FULL_VF4                 = 0x00000150,
IH_PERF_SEL_RB2_FULL_VF5                 = 0x00000151,
IH_PERF_SEL_RB2_FULL_VF6                 = 0x00000152,
IH_PERF_SEL_RB2_FULL_VF7                 = 0x00000153,
IH_PERF_SEL_RB2_FULL_VF8                 = 0x00000154,
IH_PERF_SEL_RB2_FULL_VF9                 = 0x00000155,
IH_PERF_SEL_RB2_FULL_VF10                = 0x00000156,
IH_PERF_SEL_RB2_FULL_VF11                = 0x00000157,
IH_PERF_SEL_RB2_FULL_VF12                = 0x00000158,
IH_PERF_SEL_RB2_FULL_VF13                = 0x00000159,
IH_PERF_SEL_RB2_FULL_VF14                = 0x0000015a,
IH_PERF_SEL_RB2_FULL_VF15                = 0x0000015b,
IH_PERF_SEL_RB2_OVERFLOW_VF0             = 0x0000015c,
IH_PERF_SEL_RB2_OVERFLOW_VF1             = 0x0000015d,
IH_PERF_SEL_RB2_OVERFLOW_VF2             = 0x0000015e,
IH_PERF_SEL_RB2_OVERFLOW_VF3             = 0x0000015f,
IH_PERF_SEL_RB2_OVERFLOW_VF4             = 0x00000160,
IH_PERF_SEL_RB2_OVERFLOW_VF5             = 0x00000161,
IH_PERF_SEL_RB2_OVERFLOW_VF6             = 0x00000162,
IH_PERF_SEL_RB2_OVERFLOW_VF7             = 0x00000163,
IH_PERF_SEL_RB2_OVERFLOW_VF8             = 0x00000164,
IH_PERF_SEL_RB2_OVERFLOW_VF9             = 0x00000165,
IH_PERF_SEL_RB2_OVERFLOW_VF10            = 0x00000166,
IH_PERF_SEL_RB2_OVERFLOW_VF11            = 0x00000167,
IH_PERF_SEL_RB2_OVERFLOW_VF12            = 0x00000168,
IH_PERF_SEL_RB2_OVERFLOW_VF13            = 0x00000169,
IH_PERF_SEL_RB2_OVERFLOW_VF14            = 0x0000016a,
IH_PERF_SEL_RB2_OVERFLOW_VF15            = 0x0000016b,
Reserved364                              = 0x0000016c,
Reserved365                              = 0x0000016d,
Reserved366                              = 0x0000016e,
Reserved367                              = 0x0000016f,
Reserved368                              = 0x00000170,
Reserved369                              = 0x00000171,
Reserved370                              = 0x00000172,
Reserved371                              = 0x00000173,
Reserved372                              = 0x00000174,
Reserved373                              = 0x00000175,
Reserved374                              = 0x00000176,
Reserved375                              = 0x00000177,
Reserved376                              = 0x00000178,
Reserved377                              = 0x00000179,
Reserved378                              = 0x0000017a,
Reserved379                              = 0x0000017b,
IH_PERF_SEL_RB2_WPTR_WRAP_VF0            = 0x0000017c,
IH_PERF_SEL_RB2_WPTR_WRAP_VF1            = 0x0000017d,
IH_PERF_SEL_RB2_WPTR_WRAP_VF2            = 0x0000017e,
IH_PERF_SEL_RB2_WPTR_WRAP_VF3            = 0x0000017f,
IH_PERF_SEL_RB2_WPTR_WRAP_VF4            = 0x00000180,
IH_PERF_SEL_RB2_WPTR_WRAP_VF5            = 0x00000181,
IH_PERF_SEL_RB2_WPTR_WRAP_VF6            = 0x00000182,
IH_PERF_SEL_RB2_WPTR_WRAP_VF7            = 0x00000183,
IH_PERF_SEL_RB2_WPTR_WRAP_VF8            = 0x00000184,
IH_PERF_SEL_RB2_WPTR_WRAP_VF9            = 0x00000185,
IH_PERF_SEL_RB2_WPTR_WRAP_VF10           = 0x00000186,
IH_PERF_SEL_RB2_WPTR_WRAP_VF11           = 0x00000187,
IH_PERF_SEL_RB2_WPTR_WRAP_VF12           = 0x00000188,
IH_PERF_SEL_RB2_WPTR_WRAP_VF13           = 0x00000189,
IH_PERF_SEL_RB2_WPTR_WRAP_VF14           = 0x0000018a,
IH_PERF_SEL_RB2_WPTR_WRAP_VF15           = 0x0000018b,
IH_PERF_SEL_RB2_RPTR_WRAP_VF0            = 0x0000018c,
IH_PERF_SEL_RB2_RPTR_WRAP_VF1            = 0x0000018d,
IH_PERF_SEL_RB2_RPTR_WRAP_VF2            = 0x0000018e,
IH_PERF_SEL_RB2_RPTR_WRAP_VF3            = 0x0000018f,
IH_PERF_SEL_RB2_RPTR_WRAP_VF4            = 0x00000190,
IH_PERF_SEL_RB2_RPTR_WRAP_VF5            = 0x00000191,
IH_PERF_SEL_RB2_RPTR_WRAP_VF6            = 0x00000192,
IH_PERF_SEL_RB2_RPTR_WRAP_VF7            = 0x00000193,
IH_PERF_SEL_RB2_RPTR_WRAP_VF8            = 0x00000194,
IH_PERF_SEL_RB2_RPTR_WRAP_VF9            = 0x00000195,
IH_PERF_SEL_RB2_RPTR_WRAP_VF10           = 0x00000196,
IH_PERF_SEL_RB2_RPTR_WRAP_VF11           = 0x00000197,
IH_PERF_SEL_RB2_RPTR_WRAP_VF12           = 0x00000198,
IH_PERF_SEL_RB2_RPTR_WRAP_VF13           = 0x00000199,
IH_PERF_SEL_RB2_RPTR_WRAP_VF14           = 0x0000019a,
IH_PERF_SEL_RB2_RPTR_WRAP_VF15           = 0x0000019b,
Reserved412                              = 0x0000019c,
Reserved413                              = 0x0000019d,
Reserved414                              = 0x0000019e,
Reserved415                              = 0x0000019f,
Reserved416                              = 0x000001a0,
Reserved417                              = 0x000001a1,
Reserved418                              = 0x000001a2,
Reserved419                              = 0x000001a3,
Reserved420                              = 0x000001a4,
Reserved421                              = 0x000001a5,
Reserved422                              = 0x000001a6,
Reserved423                              = 0x000001a7,
Reserved424                              = 0x000001a8,
Reserved425                              = 0x000001a9,
Reserved426                              = 0x000001aa,
Reserved427                              = 0x000001ab,
Reserved428                              = 0x000001ac,
Reserved429                              = 0x000001ad,
Reserved430                              = 0x000001ae,
Reserved431                              = 0x000001af,
Reserved432                              = 0x000001b0,
Reserved433                              = 0x000001b1,
Reserved434                              = 0x000001b2,
Reserved435                              = 0x000001b3,
Reserved436                              = 0x000001b4,
Reserved437                              = 0x000001b5,
Reserved438                              = 0x000001b6,
Reserved439                              = 0x000001b7,
Reserved440                              = 0x000001b8,
Reserved441                              = 0x000001b9,
Reserved442                              = 0x000001ba,
Reserved443                              = 0x000001bb,
Reserved444                              = 0x000001bc,
Reserved445                              = 0x000001bd,
Reserved446                              = 0x000001be,
Reserved447                              = 0x000001bf,
Reserved448                              = 0x000001c0,
Reserved449                              = 0x000001c1,
Reserved450                              = 0x000001c2,
Reserved451                              = 0x000001c3,
Reserved452                              = 0x000001c4,
Reserved453                              = 0x000001c5,
Reserved454                              = 0x000001c6,
Reserved455                              = 0x000001c7,
Reserved456                              = 0x000001c8,
Reserved457                              = 0x000001c9,
Reserved458                              = 0x000001ca,
Reserved459                              = 0x000001cb,
Reserved460                              = 0x000001cc,
Reserved461                              = 0x000001cd,
Reserved462                              = 0x000001ce,
Reserved463                              = 0x000001cf,
Reserved464                              = 0x000001d0,
Reserved465                              = 0x000001d1,
Reserved466                              = 0x000001d2,
Reserved467                              = 0x000001d3,
Reserved468                              = 0x000001d4,
Reserved469                              = 0x000001d5,
Reserved470                              = 0x000001d6,
Reserved471                              = 0x000001d7,
Reserved472                              = 0x000001d8,
Reserved473                              = 0x000001d9,
Reserved474                              = 0x000001da,
Reserved475                              = 0x000001db,
Reserved476                              = 0x000001dc,
Reserved477                              = 0x000001dd,
Reserved478                              = 0x000001de,
Reserved479                              = 0x000001df,
Reserved480                              = 0x000001e0,
Reserved481                              = 0x000001e1,
Reserved482                              = 0x000001e2,
Reserved483                              = 0x000001e3,
Reserved484                              = 0x000001e4,
Reserved485                              = 0x000001e5,
Reserved486                              = 0x000001e6,
Reserved487                              = 0x000001e7,
Reserved488                              = 0x000001e8,
Reserved489                              = 0x000001e9,
Reserved490                              = 0x000001ea,
Reserved491                              = 0x000001eb,
Reserved492                              = 0x000001ec,
Reserved493                              = 0x000001ed,
Reserved494                              = 0x000001ee,
Reserved495                              = 0x000001ef,
Reserved496                              = 0x000001f0,
Reserved497                              = 0x000001f1,
Reserved498                              = 0x000001f2,
Reserved499                              = 0x000001f3,
Reserved500                              = 0x000001f4,
Reserved501                              = 0x000001f5,
Reserved502                              = 0x000001f6,
Reserved503                              = 0x000001f7,
Reserved504                              = 0x000001f8,
Reserved505                              = 0x000001f9,
Reserved506                              = 0x000001fa,
Reserved507                              = 0x000001fb,
Reserved508                              = 0x000001fc,
Reserved509                              = 0x000001fd,
Reserved510                              = 0x000001fe,
Reserved511                              = 0x000001ff,
} IH_PERF_SEL;

/*******************************************************
 * SEM Enums
 *******************************************************/

/*
 * SEM_PERF_SEL enum
 */

typedef enum SEM_PERF_SEL {
SEM_PERF_SEL_CYCLE                       = 0x00000000,
SEM_PERF_SEL_IDLE                        = 0x00000001,
SEM_PERF_SEL_SDMA0_REQ_SIGNAL            = 0x00000002,
SEM_PERF_SEL_SDMA1_REQ_SIGNAL            = 0x00000003,
SEM_PERF_SEL_UVD_REQ_SIGNAL              = 0x00000004,
SEM_PERF_SEL_VCE0_REQ_SIGNAL             = 0x00000005,
SEM_PERF_SEL_ACP_REQ_SIGNAL              = 0x00000006,
SEM_PERF_SEL_ISP_REQ_SIGNAL              = 0x00000007,
SEM_PERF_SEL_VCE1_REQ_SIGNAL             = 0x00000008,
SEM_PERF_SEL_VP8_REQ_SIGNAL              = 0x00000009,
SEM_PERF_SEL_CPG_E0_REQ_SIGNAL           = 0x0000000a,
SEM_PERF_SEL_CPG_E1_REQ_SIGNAL           = 0x0000000b,
SEM_PERF_SEL_CPC1_IMME_E0_REQ_SIGNAL     = 0x0000000c,
SEM_PERF_SEL_CPC1_IMME_E1_REQ_SIGNAL     = 0x0000000d,
SEM_PERF_SEL_CPC1_IMME_E2_REQ_SIGNAL     = 0x0000000e,
SEM_PERF_SEL_CPC1_IMME_E3_REQ_SIGNAL     = 0x0000000f,
SEM_PERF_SEL_CPC2_IMME_E0_REQ_SIGNAL     = 0x00000010,
SEM_PERF_SEL_CPC2_IMME_E1_REQ_SIGNAL     = 0x00000011,
SEM_PERF_SEL_CPC2_IMME_E2_REQ_SIGNAL     = 0x00000012,
SEM_PERF_SEL_CPC2_IMME_E3_REQ_SIGNAL     = 0x00000013,
SEM_PERF_SEL_SDMA0_REQ_WAIT              = 0x00000014,
SEM_PERF_SEL_SDMA1_REQ_WAIT              = 0x00000015,
SEM_PERF_SEL_UVD_REQ_WAIT                = 0x00000016,
SEM_PERF_SEL_VCE0_REQ_WAIT               = 0x00000017,
SEM_PERF_SEL_ACP_REQ_WAIT                = 0x00000018,
SEM_PERF_SEL_ISP_REQ_WAIT                = 0x00000019,
SEM_PERF_SEL_VCE1_REQ_WAIT               = 0x0000001a,
SEM_PERF_SEL_VP8_REQ_WAIT                = 0x0000001b,
SEM_PERF_SEL_CPG_E0_REQ_WAIT             = 0x0000001c,
SEM_PERF_SEL_CPG_E1_REQ_WAIT             = 0x0000001d,
SEM_PERF_SEL_CPC1_IMME_E0_REQ_WAIT       = 0x0000001e,
SEM_PERF_SEL_CPC1_IMME_E1_REQ_WAIT       = 0x0000001f,
SEM_PERF_SEL_CPC1_IMME_E2_REQ_WAIT       = 0x00000020,
SEM_PERF_SEL_CPC1_IMME_E3_REQ_WAIT       = 0x00000021,
SEM_PERF_SEL_CPC2_IMME_E0_REQ_WAIT       = 0x00000022,
SEM_PERF_SEL_CPC2_IMME_E1_REQ_WAIT       = 0x00000023,
SEM_PERF_SEL_CPC2_IMME_E2_REQ_WAIT       = 0x00000024,
SEM_PERF_SEL_CPC2_IMME_E3_REQ_WAIT       = 0x00000025,
SEM_PERF_SEL_CPC1_OFFL_E0_REQ_WAIT       = 0x00000026,
SEM_PERF_SEL_CPC1_OFFL_E1_REQ_WAIT       = 0x00000027,
SEM_PERF_SEL_CPC1_OFFL_E2_REQ_WAIT       = 0x00000028,
SEM_PERF_SEL_CPC1_OFFL_E3_REQ_WAIT       = 0x00000029,
SEM_PERF_SEL_CPC1_OFFL_E4_REQ_WAIT       = 0x0000002a,
SEM_PERF_SEL_CPC1_OFFL_E5_REQ_WAIT       = 0x0000002b,
SEM_PERF_SEL_CPC1_OFFL_E6_REQ_WAIT       = 0x0000002c,
SEM_PERF_SEL_CPC1_OFFL_E7_REQ_WAIT       = 0x0000002d,
SEM_PERF_SEL_CPC1_OFFL_E8_REQ_WAIT       = 0x0000002e,
SEM_PERF_SEL_CPC1_OFFL_E9_REQ_WAIT       = 0x0000002f,
SEM_PERF_SEL_CPC1_OFFL_E10_REQ_WAIT      = 0x00000030,
SEM_PERF_SEL_CPC1_OFFL_E11_REQ_WAIT      = 0x00000031,
SEM_PERF_SEL_CPC1_OFFL_E12_REQ_WAIT      = 0x00000032,
SEM_PERF_SEL_CPC1_OFFL_E13_REQ_WAIT      = 0x00000033,
SEM_PERF_SEL_CPC1_OFFL_E14_REQ_WAIT      = 0x00000034,
SEM_PERF_SEL_CPC1_OFFL_E15_REQ_WAIT      = 0x00000035,
SEM_PERF_SEL_CPC1_OFFL_E16_REQ_WAIT      = 0x00000036,
SEM_PERF_SEL_CPC1_OFFL_E17_REQ_WAIT      = 0x00000037,
SEM_PERF_SEL_CPC1_OFFL_E18_REQ_WAIT      = 0x00000038,
SEM_PERF_SEL_CPC1_OFFL_E19_REQ_WAIT      = 0x00000039,
SEM_PERF_SEL_CPC1_OFFL_E20_REQ_WAIT      = 0x0000003a,
SEM_PERF_SEL_CPC1_OFFL_E21_REQ_WAIT      = 0x0000003b,
SEM_PERF_SEL_CPC1_OFFL_E22_REQ_WAIT      = 0x0000003c,
SEM_PERF_SEL_CPC1_OFFL_E23_REQ_WAIT      = 0x0000003d,
SEM_PERF_SEL_CPC1_OFFL_E24_REQ_WAIT      = 0x0000003e,
SEM_PERF_SEL_CPC1_OFFL_E25_REQ_WAIT      = 0x0000003f,
SEM_PERF_SEL_CPC1_OFFL_E26_REQ_WAIT      = 0x00000040,
SEM_PERF_SEL_CPC1_OFFL_E27_REQ_WAIT      = 0x00000041,
SEM_PERF_SEL_CPC1_OFFL_E28_REQ_WAIT      = 0x00000042,
SEM_PERF_SEL_CPC1_OFFL_E29_REQ_WAIT      = 0x00000043,
SEM_PERF_SEL_CPC1_OFFL_E30_REQ_WAIT      = 0x00000044,
SEM_PERF_SEL_CPC1_OFFL_E31_REQ_WAIT      = 0x00000045,
SEM_PERF_SEL_CPC2_OFFL_E0_REQ_WAIT       = 0x00000046,
SEM_PERF_SEL_CPC2_OFFL_E1_REQ_WAIT       = 0x00000047,
SEM_PERF_SEL_CPC2_OFFL_E2_REQ_WAIT       = 0x00000048,
SEM_PERF_SEL_CPC2_OFFL_E3_REQ_WAIT       = 0x00000049,
SEM_PERF_SEL_CPC2_OFFL_E4_REQ_WAIT       = 0x0000004a,
SEM_PERF_SEL_CPC2_OFFL_E5_REQ_WAIT       = 0x0000004b,
SEM_PERF_SEL_CPC2_OFFL_E6_REQ_WAIT       = 0x0000004c,
SEM_PERF_SEL_CPC2_OFFL_E7_REQ_WAIT       = 0x0000004d,
SEM_PERF_SEL_CPC2_OFFL_E8_REQ_WAIT       = 0x0000004e,
SEM_PERF_SEL_CPC2_OFFL_E9_REQ_WAIT       = 0x0000004f,
SEM_PERF_SEL_CPC2_OFFL_E10_REQ_WAIT      = 0x00000050,
SEM_PERF_SEL_CPC2_OFFL_E11_REQ_WAIT      = 0x00000051,
SEM_PERF_SEL_CPC2_OFFL_E12_REQ_WAIT      = 0x00000052,
SEM_PERF_SEL_CPC2_OFFL_E13_REQ_WAIT      = 0x00000053,
SEM_PERF_SEL_CPC2_OFFL_E14_REQ_WAIT      = 0x00000054,
SEM_PERF_SEL_CPC2_OFFL_E15_REQ_WAIT      = 0x00000055,
SEM_PERF_SEL_CPC2_OFFL_E16_REQ_WAIT      = 0x00000056,
SEM_PERF_SEL_CPC2_OFFL_E17_REQ_WAIT      = 0x00000057,
SEM_PERF_SEL_CPC2_OFFL_E18_REQ_WAIT      = 0x00000058,
SEM_PERF_SEL_CPC2_OFFL_E19_REQ_WAIT      = 0x00000059,
SEM_PERF_SEL_CPC2_OFFL_E20_REQ_WAIT      = 0x0000005a,
SEM_PERF_SEL_CPC2_OFFL_E21_REQ_WAIT      = 0x0000005b,
SEM_PERF_SEL_CPC2_OFFL_E22_REQ_WAIT      = 0x0000005c,
SEM_PERF_SEL_CPC2_OFFL_E23_REQ_WAIT      = 0x0000005d,
SEM_PERF_SEL_CPC2_OFFL_E24_REQ_WAIT      = 0x0000005e,
SEM_PERF_SEL_CPC2_OFFL_E25_REQ_WAIT      = 0x0000005f,
SEM_PERF_SEL_CPC2_OFFL_E26_REQ_WAIT      = 0x00000060,
SEM_PERF_SEL_CPC2_OFFL_E27_REQ_WAIT      = 0x00000061,
SEM_PERF_SEL_CPC2_OFFL_E28_REQ_WAIT      = 0x00000062,
SEM_PERF_SEL_CPC2_OFFL_E29_REQ_WAIT      = 0x00000063,
SEM_PERF_SEL_CPC2_OFFL_E30_REQ_WAIT      = 0x00000064,
SEM_PERF_SEL_CPC2_OFFL_E31_REQ_WAIT      = 0x00000065,
SEM_PERF_SEL_CPC1_OFFL_E0_POLL_WAIT      = 0x00000066,
SEM_PERF_SEL_CPC1_OFFL_E1_POLL_WAIT      = 0x00000067,
SEM_PERF_SEL_CPC1_OFFL_E2_POLL_WAIT      = 0x00000068,
SEM_PERF_SEL_CPC1_OFFL_E3_POLL_WAIT      = 0x00000069,
SEM_PERF_SEL_CPC1_OFFL_E4_POLL_WAIT      = 0x0000006a,
SEM_PERF_SEL_CPC1_OFFL_E5_POLL_WAIT      = 0x0000006b,
SEM_PERF_SEL_CPC1_OFFL_E6_POLL_WAIT      = 0x0000006c,
SEM_PERF_SEL_CPC1_OFFL_E7_POLL_WAIT      = 0x0000006d,
SEM_PERF_SEL_CPC1_OFFL_E8_POLL_WAIT      = 0x0000006e,
SEM_PERF_SEL_CPC1_OFFL_E9_POLL_WAIT      = 0x0000006f,
SEM_PERF_SEL_CPC1_OFFL_E10_POLL_WAIT     = 0x00000070,
SEM_PERF_SEL_CPC1_OFFL_E11_POLL_WAIT     = 0x00000071,
SEM_PERF_SEL_CPC1_OFFL_E12_POLL_WAIT     = 0x00000072,
SEM_PERF_SEL_CPC1_OFFL_E13_POLL_WAIT     = 0x00000073,
SEM_PERF_SEL_CPC1_OFFL_E14_POLL_WAIT     = 0x00000074,
SEM_PERF_SEL_CPC1_OFFL_E15_POLL_WAIT     = 0x00000075,
SEM_PERF_SEL_CPC1_OFFL_E16_POLL_WAIT     = 0x00000076,
SEM_PERF_SEL_CPC1_OFFL_E17_POLL_WAIT     = 0x00000077,
SEM_PERF_SEL_CPC1_OFFL_E18_POLL_WAIT     = 0x00000078,
SEM_PERF_SEL_CPC1_OFFL_E19_POLL_WAIT     = 0x00000079,
SEM_PERF_SEL_CPC1_OFFL_E20_POLL_WAIT     = 0x0000007a,
SEM_PERF_SEL_CPC1_OFFL_E21_POLL_WAIT     = 0x0000007b,
SEM_PERF_SEL_CPC1_OFFL_E22_POLL_WAIT     = 0x0000007c,
SEM_PERF_SEL_CPC1_OFFL_E23_POLL_WAIT     = 0x0000007d,
SEM_PERF_SEL_CPC1_OFFL_E24_POLL_WAIT     = 0x0000007e,
SEM_PERF_SEL_CPC1_OFFL_E25_POLL_WAIT     = 0x0000007f,
SEM_PERF_SEL_CPC1_OFFL_E26_POLL_WAIT     = 0x00000080,
SEM_PERF_SEL_CPC1_OFFL_E27_POLL_WAIT     = 0x00000081,
SEM_PERF_SEL_CPC1_OFFL_E28_POLL_WAIT     = 0x00000082,
SEM_PERF_SEL_CPC1_OFFL_E29_POLL_WAIT     = 0x00000083,
SEM_PERF_SEL_CPC1_OFFL_E30_POLL_WAIT     = 0x00000084,
SEM_PERF_SEL_CPC1_OFFL_E31_POLL_WAIT     = 0x00000085,
SEM_PERF_SEL_CPC2_OFFL_E0_POLL_WAIT      = 0x00000086,
SEM_PERF_SEL_CPC2_OFFL_E1_POLL_WAIT      = 0x00000087,
SEM_PERF_SEL_CPC2_OFFL_E2_POLL_WAIT      = 0x00000088,
SEM_PERF_SEL_CPC2_OFFL_E3_POLL_WAIT      = 0x00000089,
SEM_PERF_SEL_CPC2_OFFL_E4_POLL_WAIT      = 0x0000008a,
SEM_PERF_SEL_CPC2_OFFL_E5_POLL_WAIT      = 0x0000008b,
SEM_PERF_SEL_CPC2_OFFL_E6_POLL_WAIT      = 0x0000008c,
SEM_PERF_SEL_CPC2_OFFL_E7_POLL_WAIT      = 0x0000008d,
SEM_PERF_SEL_CPC2_OFFL_E8_POLL_WAIT      = 0x0000008e,
SEM_PERF_SEL_CPC2_OFFL_E9_POLL_WAIT      = 0x0000008f,
SEM_PERF_SEL_CPC2_OFFL_E10_POLL_WAIT     = 0x00000090,
SEM_PERF_SEL_CPC2_OFFL_E11_POLL_WAIT     = 0x00000091,
SEM_PERF_SEL_CPC2_OFFL_E12_POLL_WAIT     = 0x00000092,
SEM_PERF_SEL_CPC2_OFFL_E13_POLL_WAIT     = 0x00000093,
SEM_PERF_SEL_CPC2_OFFL_E14_POLL_WAIT     = 0x00000094,
SEM_PERF_SEL_CPC2_OFFL_E15_POLL_WAIT     = 0x00000095,
SEM_PERF_SEL_CPC2_OFFL_E16_POLL_WAIT     = 0x00000096,
SEM_PERF_SEL_CPC2_OFFL_E17_POLL_WAIT     = 0x00000097,
SEM_PERF_SEL_CPC2_OFFL_E18_POLL_WAIT     = 0x00000098,
SEM_PERF_SEL_CPC2_OFFL_E19_POLL_WAIT     = 0x00000099,
SEM_PERF_SEL_CPC2_OFFL_E20_POLL_WAIT     = 0x0000009a,
SEM_PERF_SEL_CPC2_OFFL_E21_POLL_WAIT     = 0x0000009b,
SEM_PERF_SEL_CPC2_OFFL_E22_POLL_WAIT     = 0x0000009c,
SEM_PERF_SEL_CPC2_OFFL_E23_POLL_WAIT     = 0x0000009d,
SEM_PERF_SEL_CPC2_OFFL_E24_POLL_WAIT     = 0x0000009e,
SEM_PERF_SEL_CPC2_OFFL_E25_POLL_WAIT     = 0x0000009f,
SEM_PERF_SEL_CPC2_OFFL_E26_POLL_WAIT     = 0x000000a0,
SEM_PERF_SEL_CPC2_OFFL_E27_POLL_WAIT     = 0x000000a1,
SEM_PERF_SEL_CPC2_OFFL_E28_POLL_WAIT     = 0x000000a2,
SEM_PERF_SEL_CPC2_OFFL_E29_POLL_WAIT     = 0x000000a3,
SEM_PERF_SEL_CPC2_OFFL_E30_POLL_WAIT     = 0x000000a4,
SEM_PERF_SEL_CPC2_OFFL_E31_POLL_WAIT     = 0x000000a5,
SEM_PERF_SEL_MC_RD_REQ                   = 0x000000a6,
SEM_PERF_SEL_MC_RD_RET                   = 0x000000a7,
SEM_PERF_SEL_MC_WR_REQ                   = 0x000000a8,
SEM_PERF_SEL_MC_WR_RET                   = 0x000000a9,
SEM_PERF_SEL_ATC_REQ                     = 0x000000aa,
SEM_PERF_SEL_ATC_RET                     = 0x000000ab,
SEM_PERF_SEL_ATC_XNACK                   = 0x000000ac,
SEM_PERF_SEL_ATC_INVALIDATION            = 0x000000ad,
} SEM_PERF_SEL;

/*******************************************************
 * SDMA Enums
 *******************************************************/

/*
 * SDMA_PERF_SEL enum
 */

typedef enum SDMA_PERF_SEL {
SDMA_PERF_SEL_CYCLE                      = 0x00000000,
SDMA_PERF_SEL_IDLE                       = 0x00000001,
SDMA_PERF_SEL_REG_IDLE                   = 0x00000002,
SDMA_PERF_SEL_RB_EMPTY                   = 0x00000003,
SDMA_PERF_SEL_RB_FULL                    = 0x00000004,
SDMA_PERF_SEL_RB_WPTR_WRAP               = 0x00000005,
SDMA_PERF_SEL_RB_RPTR_WRAP               = 0x00000006,
SDMA_PERF_SEL_RB_WPTR_POLL_READ          = 0x00000007,
SDMA_PERF_SEL_RB_RPTR_WB                 = 0x00000008,
SDMA_PERF_SEL_RB_CMD_IDLE                = 0x00000009,
SDMA_PERF_SEL_RB_CMD_FULL                = 0x0000000a,
SDMA_PERF_SEL_IB_CMD_IDLE                = 0x0000000b,
SDMA_PERF_SEL_IB_CMD_FULL                = 0x0000000c,
SDMA_PERF_SEL_EX_IDLE                    = 0x0000000d,
SDMA_PERF_SEL_SRBM_REG_SEND              = 0x0000000e,
SDMA_PERF_SEL_EX_IDLE_POLL_TIMER_EXPIRE  = 0x0000000f,
SDMA_PERF_SEL_MC_WR_IDLE                 = 0x00000010,
SDMA_PERF_SEL_MC_WR_COUNT                = 0x00000011,
SDMA_PERF_SEL_MC_RD_IDLE                 = 0x00000012,
SDMA_PERF_SEL_MC_RD_COUNT                = 0x00000013,
SDMA_PERF_SEL_MC_RD_RET_STALL            = 0x00000014,
SDMA_PERF_SEL_MC_RD_NO_POLL_IDLE         = 0x00000015,
SDMA_PERF_SEL_SEM_IDLE                   = 0x00000018,
SDMA_PERF_SEL_SEM_REQ_STALL              = 0x00000019,
SDMA_PERF_SEL_SEM_REQ_COUNT              = 0x0000001a,
SDMA_PERF_SEL_SEM_RESP_INCOMPLETE        = 0x0000001b,
SDMA_PERF_SEL_SEM_RESP_FAIL              = 0x0000001c,
SDMA_PERF_SEL_SEM_RESP_PASS              = 0x0000001d,
SDMA_PERF_SEL_INT_IDLE                   = 0x0000001e,
SDMA_PERF_SEL_INT_REQ_STALL              = 0x0000001f,
SDMA_PERF_SEL_INT_REQ_COUNT              = 0x00000020,
SDMA_PERF_SEL_INT_RESP_ACCEPTED          = 0x00000021,
SDMA_PERF_SEL_INT_RESP_RETRY             = 0x00000022,
SDMA_PERF_SEL_NUM_PACKET                 = 0x00000023,
SDMA_PERF_SEL_CE_WREQ_IDLE               = 0x00000025,
SDMA_PERF_SEL_CE_WR_IDLE                 = 0x00000026,
SDMA_PERF_SEL_CE_SPLIT_IDLE              = 0x00000027,
SDMA_PERF_SEL_CE_RREQ_IDLE               = 0x00000028,
SDMA_PERF_SEL_CE_OUT_IDLE                = 0x00000029,
SDMA_PERF_SEL_CE_IN_IDLE                 = 0x0000002a,
SDMA_PERF_SEL_CE_DST_IDLE                = 0x0000002b,
SDMA_PERF_SEL_CE_AFIFO_FULL              = 0x0000002e,
SDMA_PERF_SEL_CE_INFO_FULL               = 0x00000031,
SDMA_PERF_SEL_CE_INFO1_FULL              = 0x00000032,
SDMA_PERF_SEL_CE_RD_STALL                = 0x00000033,
SDMA_PERF_SEL_CE_WR_STALL                = 0x00000034,
SDMA_PERF_SEL_GFX_SELECT                 = 0x00000035,
SDMA_PERF_SEL_RLC0_SELECT                = 0x00000036,
SDMA_PERF_SEL_RLC1_SELECT                = 0x00000037,
SDMA_PERF_SEL_PAGE_SELECT                = 0x00000038,
SDMA_PERF_SEL_CTX_CHANGE                 = 0x00000039,
SDMA_PERF_SEL_CTX_CHANGE_EXPIRED         = 0x0000003a,
SDMA_PERF_SEL_CTX_CHANGE_EXCEPTION       = 0x0000003b,
SDMA_PERF_SEL_DOORBELL                   = 0x0000003c,
SDMA_PERF_SEL_RD_BA_RTR                  = 0x0000003d,
SDMA_PERF_SEL_WR_BA_RTR                  = 0x0000003e,
SDMA_PERF_SEL_F32_L1_WR_VLD              = 0x0000003f,
SDMA_PERF_SEL_CE_L1_WR_VLD               = 0x00000040,
SDMA_PERF_SEL_CE_L1_STALL                = 0x00000041,
SDMA_PERF_SEL_SDMA_INVACK_NFLUSH         = 0x00000042,
SDMA_PERF_SEL_SDMA_INVACK_FLUSH          = 0x00000043,
SDMA_PERF_SEL_ATCL2_INVREQ_NFLUSH        = 0x00000044,
SDMA_PERF_SEL_ATCL2_INVREQ_FLUSH         = 0x00000045,
SDMA_PERF_SEL_ATCL2_RET_XNACK            = 0x00000046,
SDMA_PERF_SEL_ATCL2_RET_ACK              = 0x00000047,
SDMA_PERF_SEL_ATCL2_FREE                 = 0x00000048,
SDMA_PERF_SEL_SDMA_ATCL2_SEND            = 0x00000049,
SDMA_PERF_SEL_DMA_L1_WR_SEND             = 0x0000004a,
SDMA_PERF_SEL_DMA_L1_RD_SEND             = 0x0000004b,
SDMA_PERF_SEL_DMA_MC_WR_SEND             = 0x0000004c,
SDMA_PERF_SEL_DMA_MC_RD_SEND             = 0x0000004d,
SDMA_PERF_SEL_L1_WR_FIFO_IDLE            = 0x0000004e,
SDMA_PERF_SEL_L1_RD_FIFO_IDLE            = 0x0000004f,
SDMA_PERF_SEL_L1_WRL2_IDLE               = 0x00000050,
SDMA_PERF_SEL_L1_RDL2_IDLE               = 0x00000051,
SDMA_PERF_SEL_L1_WRMC_IDLE               = 0x00000052,
SDMA_PERF_SEL_L1_RDMC_IDLE               = 0x00000053,
SDMA_PERF_SEL_L1_WR_INV_IDLE             = 0x00000054,
SDMA_PERF_SEL_L1_RD_INV_IDLE             = 0x00000055,
SDMA_PERF_SEL_L1_WR_INV_EN               = 0x00000056,
SDMA_PERF_SEL_L1_RD_INV_EN               = 0x00000057,
SDMA_PERF_SEL_L1_WR_WAIT_INVADR          = 0x00000058,
SDMA_PERF_SEL_L1_RD_WAIT_INVADR          = 0x00000059,
SDMA_PERF_SEL_IS_INVREQ_ADDR_WR          = 0x0000005a,
SDMA_PERF_SEL_IS_INVREQ_ADDR_RD          = 0x0000005b,
SDMA_PERF_SEL_L1_WR_XNACK_TIMEOUT        = 0x0000005c,
SDMA_PERF_SEL_L1_RD_XNACK_TIMEOUT        = 0x0000005d,
SDMA_PERF_SEL_L1_INV_MIDDLE              = 0x0000005e,
SDMA_PERF_SEL_UTCL1_TAG_DELAY_COUNTER    = 0x000000fe,
SDMA_PERF_SEL_MMHUB_TAG_DELAY_COUNTER    = 0x000000ff,
} SDMA_PERF_SEL;

/*******************************************************
 * SMUIO Enums
 *******************************************************/

/*
 * ROM_SIGNATURE value
 */

#define ROM_SIGNATURE                  0x0000aa55

/*******************************************************
 * XDMA_CMN Enums
 *******************************************************/

/*
 * ENUM_XDMA_LOCAL_SW_MODE enum
 */

typedef enum ENUM_XDMA_LOCAL_SW_MODE {
XDMA_LOCAL_SW_MODE_SW_256B_D             = 0x00000002,
XDMA_LOCAL_SW_MODE_SW_64KB_D             = 0x0000000a,
XDMA_LOCAL_SW_MODE_SW_64KB_D_X           = 0x0000001a,
} ENUM_XDMA_LOCAL_SW_MODE;

/*******************************************************
 * XDMA_SLV Enums
 *******************************************************/

/*
 * ENUM_XDMA_SLV_ALPHA_POSITION enum
 */

typedef enum ENUM_XDMA_SLV_ALPHA_POSITION {
XDMA_SLV_ALPHA_POSITION_7_0              = 0x00000000,
XDMA_SLV_ALPHA_POSITION_15_8             = 0x00000001,
XDMA_SLV_ALPHA_POSITION_23_16            = 0x00000002,
XDMA_SLV_ALPHA_POSITION_31_24            = 0x00000003,
} ENUM_XDMA_SLV_ALPHA_POSITION;

/*******************************************************
 * XDMA_MSTR Enums
 *******************************************************/

/*
 * ENUM_XDMA_MSTR_ALPHA_POSITION enum
 */

typedef enum ENUM_XDMA_MSTR_ALPHA_POSITION {
XDMA_MSTR_ALPHA_POSITION_7_0             = 0x00000000,
XDMA_MSTR_ALPHA_POSITION_15_8            = 0x00000001,
XDMA_MSTR_ALPHA_POSITION_23_16           = 0x00000002,
XDMA_MSTR_ALPHA_POSITION_31_24           = 0x00000003,
} ENUM_XDMA_MSTR_ALPHA_POSITION;

/*
 * ENUM_XDMA_MSTR_VSYNC_GSL_CHECK_SEL enum
 */

typedef enum ENUM_XDMA_MSTR_VSYNC_GSL_CHECK_SEL {
XDMA_MSTR_VSYNC_GSL_CHECK_SEL_PIPE0      = 0x00000000,
XDMA_MSTR_VSYNC_GSL_CHECK_SEL_PIPE1      = 0x00000001,
XDMA_MSTR_VSYNC_GSL_CHECK_SEL_PIPE2      = 0x00000002,
XDMA_MSTR_VSYNC_GSL_CHECK_SEL_PIPE3      = 0x00000003,
XDMA_MSTR_VSYNC_GSL_CHECK_SEL_PIPE4      = 0x00000004,
XDMA_MSTR_VSYNC_GSL_CHECK_SEL_PIPE5      = 0x00000005,
} ENUM_XDMA_MSTR_VSYNC_GSL_CHECK_SEL;


#endif /*_vega10_ENUM_HEADER*/

/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __VANGOGH_IP_OFFSET_H__
#define __VANGOGH_IP_OFFSET_H__

#define MAX_INSTANCE                                        8
#define MAX_SEGMENT                                         6


struct IP_BASE_INSTANCE
{
    unsigned int segment[MAX_SEGMENT];
};

struct IP_BASE
{
    struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
} __maybe_unused;


static const struct IP_BASE ACP_BASE = { { { { 0x02403800, 0x00480000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE ATHUB_BASE = { { { { 0x00000C00, 0x00013300, 0x02408C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE CLK_BASE = { { { { 0x00016C00, 0x02401800, 0, 0, 0, 0 } },
                                        { { 0x00016E00, 0x02401C00, 0, 0, 0, 0 } },
                                        { { 0x00017000, 0x02402000, 0, 0, 0, 0 } },
                                        { { 0x00017200, 0x02402400, 0, 0, 0, 0 } },
                                        { { 0x0001B000, 0x0242D800, 0, 0, 0, 0 } },
                                        { { 0x0001B200, 0x0242DC00, 0, 0, 0, 0 } },
                                        { { 0x0001B400, 0x0242E000, 0, 0, 0, 0 } },
                                        { { 0x00017E00, 0x0240BC00, 0, 0, 0, 0 } } } };
static const struct IP_BASE DF_BASE = { { { { 0x00007000, 0x0240B800, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DCN_BASE = { { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DPCS_BASE = { { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FCH_BASE = { { { { 0x0240C000, 0x00B40000, 0x11000000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FUSE_BASE = { { { { 0x00017400, 0x02401400, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE GC_BASE = { { { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDP_BASE = { { { { 0x00000F20, 0x0240A400, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE ISP_BASE = { { { { 0x00018000, 0x0240B000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MMHUB_BASE = { { { { 0x00013200, 0x0001A000, 0x02408800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP0_BASE = { { { { 0x00016000, 0x0243FC00, 0x00DC0000, 0x00E00000, 0x00E40000, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP1_BASE = { { { { 0x00016000, 0x0243FC00, 0x00DC0000, 0x00E00000, 0x00E40000, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP2_BASE = { { { { 0x00016400, 0x02400800, 0x00F40000, 0x00F80000, 0x00FC0000, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE NBIO_BASE = { { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000, 0x04040000 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE OSSSYS_BASE = { { { { 0x000010A0, 0x0240A000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE PCIE0_BASE = { { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000, 0x04040000 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SMUIO_BASE = { { { { 0x00016800, 0x00016A00, 0x02401000, 0x00440000, 0, 0 } },
                                        { { 0x0001BC00, 0x0242D400, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE THM_BASE = { { { { 0x00016600, 0x02400C00, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UMC_BASE = { { { { 0x00014000, 0x02425800, 0, 0, 0, 0 } },
                                        { { 0x00054000, 0x02425C00, 0, 0, 0, 0 } },
                                        { { 0x00094000, 0x02426000, 0, 0, 0, 0 } },
                                        { { 0x000D4000, 0x02426400, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE USB_BASE = { { { { 0x0242A800, 0x05B00000, 0, 0, 0, 0 } },
                                        { { 0x0242AC00, 0x05B80000, 0, 0, 0, 0 } },
                                        { { 0x0242B000, 0x05C00000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE VCN_BASE = { { { { 0x00007800, 0x00007E00, 0x02403000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };


#define ACP_BASE__INST0_SEG0                       0x02403800
#define ACP_BASE__INST0_SEG1                       0x00480000
#define ACP_BASE__INST0_SEG2                       0
#define ACP_BASE__INST0_SEG3                       0
#define ACP_BASE__INST0_SEG4                       0
#define ACP_BASE__INST0_SEG5                       0

#define ACP_BASE__INST1_SEG0                       0
#define ACP_BASE__INST1_SEG1                       0
#define ACP_BASE__INST1_SEG2                       0
#define ACP_BASE__INST1_SEG3                       0
#define ACP_BASE__INST1_SEG4                       0
#define ACP_BASE__INST1_SEG5                       0

#define ACP_BASE__INST2_SEG0                       0
#define ACP_BASE__INST2_SEG1                       0
#define ACP_BASE__INST2_SEG2                       0
#define ACP_BASE__INST2_SEG3                       0
#define ACP_BASE__INST2_SEG4                       0
#define ACP_BASE__INST2_SEG5                       0

#define ACP_BASE__INST3_SEG0                       0
#define ACP_BASE__INST3_SEG1                       0
#define ACP_BASE__INST3_SEG2                       0
#define ACP_BASE__INST3_SEG3                       0
#define ACP_BASE__INST3_SEG4                       0
#define ACP_BASE__INST3_SEG5                       0

#define ACP_BASE__INST4_SEG0                       0
#define ACP_BASE__INST4_SEG1                       0
#define ACP_BASE__INST4_SEG2                       0
#define ACP_BASE__INST4_SEG3                       0
#define ACP_BASE__INST4_SEG4                       0
#define ACP_BASE__INST4_SEG5                       0

#define ACP_BASE__INST5_SEG0                       0
#define ACP_BASE__INST5_SEG1                       0
#define ACP_BASE__INST5_SEG2                       0
#define ACP_BASE__INST5_SEG3                       0
#define ACP_BASE__INST5_SEG4                       0
#define ACP_BASE__INST5_SEG5                       0

#define ACP_BASE__INST6_SEG0                       0
#define ACP_BASE__INST6_SEG1                       0
#define ACP_BASE__INST6_SEG2                       0
#define ACP_BASE__INST6_SEG3                       0
#define ACP_BASE__INST6_SEG4                       0
#define ACP_BASE__INST6_SEG5                       0

#define ACP_BASE__INST7_SEG0                       0
#define ACP_BASE__INST7_SEG1                       0
#define ACP_BASE__INST7_SEG2                       0
#define ACP_BASE__INST7_SEG3                       0
#define ACP_BASE__INST7_SEG4                       0
#define ACP_BASE__INST7_SEG5                       0

#define ATHUB_BASE__INST0_SEG0                     0x00000C00
#define ATHUB_BASE__INST0_SEG1                     0x00013300
#define ATHUB_BASE__INST0_SEG2                     0x02408C00
#define ATHUB_BASE__INST0_SEG3                     0
#define ATHUB_BASE__INST0_SEG4                     0
#define ATHUB_BASE__INST0_SEG5                     0

#define ATHUB_BASE__INST1_SEG0                     0
#define ATHUB_BASE__INST1_SEG1                     0
#define ATHUB_BASE__INST1_SEG2                     0
#define ATHUB_BASE__INST1_SEG3                     0
#define ATHUB_BASE__INST1_SEG4                     0
#define ATHUB_BASE__INST1_SEG5                     0

#define ATHUB_BASE__INST2_SEG0                     0
#define ATHUB_BASE__INST2_SEG1                     0
#define ATHUB_BASE__INST2_SEG2                     0
#define ATHUB_BASE__INST2_SEG3                     0
#define ATHUB_BASE__INST2_SEG4                     0
#define ATHUB_BASE__INST2_SEG5                     0

#define ATHUB_BASE__INST3_SEG0                     0
#define ATHUB_BASE__INST3_SEG1                     0
#define ATHUB_BASE__INST3_SEG2                     0
#define ATHUB_BASE__INST3_SEG3                     0
#define ATHUB_BASE__INST3_SEG4                     0
#define ATHUB_BASE__INST3_SEG5                     0

#define ATHUB_BASE__INST4_SEG0                     0
#define ATHUB_BASE__INST4_SEG1                     0
#define ATHUB_BASE__INST4_SEG2                     0
#define ATHUB_BASE__INST4_SEG3                     0
#define ATHUB_BASE__INST4_SEG4                     0
#define ATHUB_BASE__INST4_SEG5                     0

#define ATHUB_BASE__INST5_SEG0                     0
#define ATHUB_BASE__INST5_SEG1                     0
#define ATHUB_BASE__INST5_SEG2                     0
#define ATHUB_BASE__INST5_SEG3                     0
#define ATHUB_BASE__INST5_SEG4                     0
#define ATHUB_BASE__INST5_SEG5                     0

#define ATHUB_BASE__INST6_SEG0                     0
#define ATHUB_BASE__INST6_SEG1                     0
#define ATHUB_BASE__INST6_SEG2                     0
#define ATHUB_BASE__INST6_SEG3                     0
#define ATHUB_BASE__INST6_SEG4                     0
#define ATHUB_BASE__INST6_SEG5                     0

#define ATHUB_BASE__INST7_SEG0                     0
#define ATHUB_BASE__INST7_SEG1                     0
#define ATHUB_BASE__INST7_SEG2                     0
#define ATHUB_BASE__INST7_SEG3                     0
#define ATHUB_BASE__INST7_SEG4                     0
#define ATHUB_BASE__INST7_SEG5                     0

#define CLK_BASE__INST0_SEG0                       0x00016C00
#define CLK_BASE__INST0_SEG1                       0x02401800
#define CLK_BASE__INST0_SEG2                       0
#define CLK_BASE__INST0_SEG3                       0
#define CLK_BASE__INST0_SEG4                       0
#define CLK_BASE__INST0_SEG5                       0

#define CLK_BASE__INST1_SEG0                       0x00016E00
#define CLK_BASE__INST1_SEG1                       0x02401C00
#define CLK_BASE__INST1_SEG2                       0
#define CLK_BASE__INST1_SEG3                       0
#define CLK_BASE__INST1_SEG4                       0
#define CLK_BASE__INST1_SEG5                       0

#define CLK_BASE__INST2_SEG0                       0x00017000
#define CLK_BASE__INST2_SEG1                       0x02402000
#define CLK_BASE__INST2_SEG2                       0
#define CLK_BASE__INST2_SEG3                       0
#define CLK_BASE__INST2_SEG4                       0
#define CLK_BASE__INST2_SEG5                       0

#define CLK_BASE__INST3_SEG0                       0x00017200
#define CLK_BASE__INST3_SEG1                       0x02402400
#define CLK_BASE__INST3_SEG2                       0
#define CLK_BASE__INST3_SEG3                       0
#define CLK_BASE__INST3_SEG4                       0
#define CLK_BASE__INST3_SEG5                       0

#define CLK_BASE__INST4_SEG0                       0x0001B000
#define CLK_BASE__INST4_SEG1                       0x0242D800
#define CLK_BASE__INST4_SEG2                       0
#define CLK_BASE__INST4_SEG3                       0
#define CLK_BASE__INST4_SEG4                       0
#define CLK_BASE__INST4_SEG5                       0

#define CLK_BASE__INST5_SEG0                       0x0001B200
#define CLK_BASE__INST5_SEG1                       0x0242DC00
#define CLK_BASE__INST5_SEG2                       0
#define CLK_BASE__INST5_SEG3                       0
#define CLK_BASE__INST5_SEG4                       0
#define CLK_BASE__INST5_SEG5                       0

#define CLK_BASE__INST6_SEG0                       0x0001B400
#define CLK_BASE__INST6_SEG1                       0x0242E000
#define CLK_BASE__INST6_SEG2                       0
#define CLK_BASE__INST6_SEG3                       0
#define CLK_BASE__INST6_SEG4                       0
#define CLK_BASE__INST6_SEG5                       0

#define CLK_BASE__INST7_SEG0                       0x00017E00
#define CLK_BASE__INST7_SEG1                       0x0240BC00
#define CLK_BASE__INST7_SEG2                       0
#define CLK_BASE__INST7_SEG3                       0
#define CLK_BASE__INST7_SEG4                       0
#define CLK_BASE__INST7_SEG5                       0

#define DF_BASE__INST0_SEG0                        0x00007000
#define DF_BASE__INST0_SEG1                        0x0240B800
#define DF_BASE__INST0_SEG2                        0
#define DF_BASE__INST0_SEG3                        0
#define DF_BASE__INST0_SEG4                        0
#define DF_BASE__INST0_SEG5                        0

#define DF_BASE__INST1_SEG0                        0
#define DF_BASE__INST1_SEG1                        0
#define DF_BASE__INST1_SEG2                        0
#define DF_BASE__INST1_SEG3                        0
#define DF_BASE__INST1_SEG4                        0
#define DF_BASE__INST1_SEG5                        0

#define DF_BASE__INST2_SEG0                        0
#define DF_BASE__INST2_SEG1                        0
#define DF_BASE__INST2_SEG2                        0
#define DF_BASE__INST2_SEG3                        0
#define DF_BASE__INST2_SEG4                        0
#define DF_BASE__INST2_SEG5                        0

#define DF_BASE__INST3_SEG0                        0
#define DF_BASE__INST3_SEG1                        0
#define DF_BASE__INST3_SEG2                        0
#define DF_BASE__INST3_SEG3                        0
#define DF_BASE__INST3_SEG4                        0
#define DF_BASE__INST3_SEG5                        0

#define DF_BASE__INST4_SEG0                        0
#define DF_BASE__INST4_SEG1                        0
#define DF_BASE__INST4_SEG2                        0
#define DF_BASE__INST4_SEG3                        0
#define DF_BASE__INST4_SEG4                        0
#define DF_BASE__INST4_SEG5                        0

#define DF_BASE__INST5_SEG0                        0
#define DF_BASE__INST5_SEG1                        0
#define DF_BASE__INST5_SEG2                        0
#define DF_BASE__INST5_SEG3                        0
#define DF_BASE__INST5_SEG4                        0
#define DF_BASE__INST5_SEG5                        0

#define DF_BASE__INST6_SEG0                        0
#define DF_BASE__INST6_SEG1                        0
#define DF_BASE__INST6_SEG2                        0
#define DF_BASE__INST6_SEG3                        0
#define DF_BASE__INST6_SEG4                        0
#define DF_BASE__INST6_SEG5                        0

#define DF_BASE__INST7_SEG0                        0
#define DF_BASE__INST7_SEG1                        0
#define DF_BASE__INST7_SEG2                        0
#define DF_BASE__INST7_SEG3                        0
#define DF_BASE__INST7_SEG4                        0
#define DF_BASE__INST7_SEG5                        0

#define DCN_BASE__INST0_SEG0                       0x00000012
#define DCN_BASE__INST0_SEG1                       0x000000C0
#define DCN_BASE__INST0_SEG2                       0x000034C0
#define DCN_BASE__INST0_SEG3                       0x00009000
#define DCN_BASE__INST0_SEG4                       0x02403C00
#define DCN_BASE__INST0_SEG5                       0

#define DCN_BASE__INST1_SEG0                       0
#define DCN_BASE__INST1_SEG1                       0
#define DCN_BASE__INST1_SEG2                       0
#define DCN_BASE__INST1_SEG3                       0
#define DCN_BASE__INST1_SEG4                       0
#define DCN_BASE__INST1_SEG5                       0

#define DCN_BASE__INST2_SEG0                       0
#define DCN_BASE__INST2_SEG1                       0
#define DCN_BASE__INST2_SEG2                       0
#define DCN_BASE__INST2_SEG3                       0
#define DCN_BASE__INST2_SEG4                       0
#define DCN_BASE__INST2_SEG5                       0

#define DCN_BASE__INST3_SEG0                       0
#define DCN_BASE__INST3_SEG1                       0
#define DCN_BASE__INST3_SEG2                       0
#define DCN_BASE__INST3_SEG3                       0
#define DCN_BASE__INST3_SEG4                       0
#define DCN_BASE__INST3_SEG5                       0

#define DCN_BASE__INST4_SEG0                       0
#define DCN_BASE__INST4_SEG1                       0
#define DCN_BASE__INST4_SEG2                       0
#define DCN_BASE__INST4_SEG3                       0
#define DCN_BASE__INST4_SEG4                       0
#define DCN_BASE__INST4_SEG5                       0

#define DCN_BASE__INST5_SEG0                       0
#define DCN_BASE__INST5_SEG1                       0
#define DCN_BASE__INST5_SEG2                       0
#define DCN_BASE__INST5_SEG3                       0
#define DCN_BASE__INST5_SEG4                       0
#define DCN_BASE__INST5_SEG5                       0

#define DCN_BASE__INST6_SEG0                       0
#define DCN_BASE__INST6_SEG1                       0
#define DCN_BASE__INST6_SEG2                       0
#define DCN_BASE__INST6_SEG3                       0
#define DCN_BASE__INST6_SEG4                       0
#define DCN_BASE__INST6_SEG5                       0

#define DCN_BASE__INST7_SEG0                       0
#define DCN_BASE__INST7_SEG1                       0
#define DCN_BASE__INST7_SEG2                       0
#define DCN_BASE__INST7_SEG3                       0
#define DCN_BASE__INST7_SEG4                       0
#define DCN_BASE__INST7_SEG5                       0

#define DPCS_BASE__INST0_SEG0                      0x00000012
#define DPCS_BASE__INST0_SEG1                      0x000000C0
#define DPCS_BASE__INST0_SEG2                      0x000034C0
#define DPCS_BASE__INST0_SEG3                      0x00009000
#define DPCS_BASE__INST0_SEG4                      0x02403C00
#define DPCS_BASE__INST0_SEG5                      0

#define DPCS_BASE__INST1_SEG0                      0
#define DPCS_BASE__INST1_SEG1                      0
#define DPCS_BASE__INST1_SEG2                      0
#define DPCS_BASE__INST1_SEG3                      0
#define DPCS_BASE__INST1_SEG4                      0
#define DPCS_BASE__INST1_SEG5                      0

#define DPCS_BASE__INST2_SEG0                      0
#define DPCS_BASE__INST2_SEG1                      0
#define DPCS_BASE__INST2_SEG2                      0
#define DPCS_BASE__INST2_SEG3                      0
#define DPCS_BASE__INST2_SEG4                      0
#define DPCS_BASE__INST2_SEG5                      0

#define DPCS_BASE__INST3_SEG0                      0
#define DPCS_BASE__INST3_SEG1                      0
#define DPCS_BASE__INST3_SEG2                      0
#define DPCS_BASE__INST3_SEG3                      0
#define DPCS_BASE__INST3_SEG4                      0
#define DPCS_BASE__INST3_SEG5                      0

#define DPCS_BASE__INST4_SEG0                      0
#define DPCS_BASE__INST4_SEG1                      0
#define DPCS_BASE__INST4_SEG2                      0
#define DPCS_BASE__INST4_SEG3                      0
#define DPCS_BASE__INST4_SEG4                      0
#define DPCS_BASE__INST4_SEG5                      0

#define DPCS_BASE__INST5_SEG0                      0
#define DPCS_BASE__INST5_SEG1                      0
#define DPCS_BASE__INST5_SEG2                      0
#define DPCS_BASE__INST5_SEG3                      0
#define DPCS_BASE__INST5_SEG4                      0
#define DPCS_BASE__INST5_SEG5                      0

#define DPCS_BASE__INST6_SEG0                      0
#define DPCS_BASE__INST6_SEG1                      0
#define DPCS_BASE__INST6_SEG2                      0
#define DPCS_BASE__INST6_SEG3                      0
#define DPCS_BASE__INST6_SEG4                      0
#define DPCS_BASE__INST6_SEG5                      0

#define DPCS_BASE__INST7_SEG0                      0
#define DPCS_BASE__INST7_SEG1                      0
#define DPCS_BASE__INST7_SEG2                      0
#define DPCS_BASE__INST7_SEG3                      0
#define DPCS_BASE__INST7_SEG4                      0
#define DPCS_BASE__INST7_SEG5                      0

#define FCH_BASE__INST0_SEG0                       0x0240C000
#define FCH_BASE__INST0_SEG1                       0x00B40000
#define FCH_BASE__INST0_SEG2                       0x11000000
#define FCH_BASE__INST0_SEG3                       0
#define FCH_BASE__INST0_SEG4                       0
#define FCH_BASE__INST0_SEG5                       0

#define FCH_BASE__INST1_SEG0                       0
#define FCH_BASE__INST1_SEG1                       0
#define FCH_BASE__INST1_SEG2                       0
#define FCH_BASE__INST1_SEG3                       0
#define FCH_BASE__INST1_SEG4                       0
#define FCH_BASE__INST1_SEG5                       0

#define FCH_BASE__INST2_SEG0                       0
#define FCH_BASE__INST2_SEG1                       0
#define FCH_BASE__INST2_SEG2                       0
#define FCH_BASE__INST2_SEG3                       0
#define FCH_BASE__INST2_SEG4                       0
#define FCH_BASE__INST2_SEG5                       0

#define FCH_BASE__INST3_SEG0                       0
#define FCH_BASE__INST3_SEG1                       0
#define FCH_BASE__INST3_SEG2                       0
#define FCH_BASE__INST3_SEG3                       0
#define FCH_BASE__INST3_SEG4                       0
#define FCH_BASE__INST3_SEG5                       0

#define FCH_BASE__INST4_SEG0                       0
#define FCH_BASE__INST4_SEG1                       0
#define FCH_BASE__INST4_SEG2                       0
#define FCH_BASE__INST4_SEG3                       0
#define FCH_BASE__INST4_SEG4                       0
#define FCH_BASE__INST4_SEG5                       0

#define FCH_BASE__INST5_SEG0                       0
#define FCH_BASE__INST5_SEG1                       0
#define FCH_BASE__INST5_SEG2                       0
#define FCH_BASE__INST5_SEG3                       0
#define FCH_BASE__INST5_SEG4                       0
#define FCH_BASE__INST5_SEG5                       0

#define FCH_BASE__INST6_SEG0                       0
#define FCH_BASE__INST6_SEG1                       0
#define FCH_BASE__INST6_SEG2                       0
#define FCH_BASE__INST6_SEG3                       0
#define FCH_BASE__INST6_SEG4                       0
#define FCH_BASE__INST6_SEG5                       0

#define FCH_BASE__INST7_SEG0                       0
#define FCH_BASE__INST7_SEG1                       0
#define FCH_BASE__INST7_SEG2                       0
#define FCH_BASE__INST7_SEG3                       0
#define FCH_BASE__INST7_SEG4                       0
#define FCH_BASE__INST7_SEG5                       0

#define FUSE_BASE__INST0_SEG0                      0x00017400
#define FUSE_BASE__INST0_SEG1                      0x02401400
#define FUSE_BASE__INST0_SEG2                      0
#define FUSE_BASE__INST0_SEG3                      0
#define FUSE_BASE__INST0_SEG4                      0
#define FUSE_BASE__INST0_SEG5                      0

#define FUSE_BASE__INST1_SEG0                      0
#define FUSE_BASE__INST1_SEG1                      0
#define FUSE_BASE__INST1_SEG2                      0
#define FUSE_BASE__INST1_SEG3                      0
#define FUSE_BASE__INST1_SEG4                      0
#define FUSE_BASE__INST1_SEG5                      0

#define FUSE_BASE__INST2_SEG0                      0
#define FUSE_BASE__INST2_SEG1                      0
#define FUSE_BASE__INST2_SEG2                      0
#define FUSE_BASE__INST2_SEG3                      0
#define FUSE_BASE__INST2_SEG4                      0
#define FUSE_BASE__INST2_SEG5                      0

#define FUSE_BASE__INST3_SEG0                      0
#define FUSE_BASE__INST3_SEG1                      0
#define FUSE_BASE__INST3_SEG2                      0
#define FUSE_BASE__INST3_SEG3                      0
#define FUSE_BASE__INST3_SEG4                      0
#define FUSE_BASE__INST3_SEG5                      0

#define FUSE_BASE__INST4_SEG0                      0
#define FUSE_BASE__INST4_SEG1                      0
#define FUSE_BASE__INST4_SEG2                      0
#define FUSE_BASE__INST4_SEG3                      0
#define FUSE_BASE__INST4_SEG4                      0
#define FUSE_BASE__INST4_SEG5                      0

#define FUSE_BASE__INST5_SEG0                      0
#define FUSE_BASE__INST5_SEG1                      0
#define FUSE_BASE__INST5_SEG2                      0
#define FUSE_BASE__INST5_SEG3                      0
#define FUSE_BASE__INST5_SEG4                      0
#define FUSE_BASE__INST5_SEG5                      0

#define FUSE_BASE__INST6_SEG0                      0
#define FUSE_BASE__INST6_SEG1                      0
#define FUSE_BASE__INST6_SEG2                      0
#define FUSE_BASE__INST6_SEG3                      0
#define FUSE_BASE__INST6_SEG4                      0
#define FUSE_BASE__INST6_SEG5                      0

#define FUSE_BASE__INST7_SEG0                      0
#define FUSE_BASE__INST7_SEG1                      0
#define FUSE_BASE__INST7_SEG2                      0
#define FUSE_BASE__INST7_SEG3                      0
#define FUSE_BASE__INST7_SEG4                      0
#define FUSE_BASE__INST7_SEG5                      0

#define GC_BASE__INST0_SEG0                        0x00001260
#define GC_BASE__INST0_SEG1                        0x0000A000
#define GC_BASE__INST0_SEG2                        0x02402C00
#define GC_BASE__INST0_SEG3                        0
#define GC_BASE__INST0_SEG4                        0
#define GC_BASE__INST0_SEG5                        0

#define GC_BASE__INST1_SEG0                        0
#define GC_BASE__INST1_SEG1                        0
#define GC_BASE__INST1_SEG2                        0
#define GC_BASE__INST1_SEG3                        0
#define GC_BASE__INST1_SEG4                        0
#define GC_BASE__INST1_SEG5                        0

#define GC_BASE__INST2_SEG0                        0
#define GC_BASE__INST2_SEG1                        0
#define GC_BASE__INST2_SEG2                        0
#define GC_BASE__INST2_SEG3                        0
#define GC_BASE__INST2_SEG4                        0
#define GC_BASE__INST2_SEG5                        0

#define GC_BASE__INST3_SEG0                        0
#define GC_BASE__INST3_SEG1                        0
#define GC_BASE__INST3_SEG2                        0
#define GC_BASE__INST3_SEG3                        0
#define GC_BASE__INST3_SEG4                        0
#define GC_BASE__INST3_SEG5                        0

#define GC_BASE__INST4_SEG0                        0
#define GC_BASE__INST4_SEG1                        0
#define GC_BASE__INST4_SEG2                        0
#define GC_BASE__INST4_SEG3                        0
#define GC_BASE__INST4_SEG4                        0
#define GC_BASE__INST4_SEG5                        0

#define GC_BASE__INST5_SEG0                        0
#define GC_BASE__INST5_SEG1                        0
#define GC_BASE__INST5_SEG2                        0
#define GC_BASE__INST5_SEG3                        0
#define GC_BASE__INST5_SEG4                        0
#define GC_BASE__INST5_SEG5                        0

#define GC_BASE__INST6_SEG0                        0
#define GC_BASE__INST6_SEG1                        0
#define GC_BASE__INST6_SEG2                        0
#define GC_BASE__INST6_SEG3                        0
#define GC_BASE__INST6_SEG4                        0
#define GC_BASE__INST6_SEG5                        0

#define GC_BASE__INST7_SEG0                        0
#define GC_BASE__INST7_SEG1                        0
#define GC_BASE__INST7_SEG2                        0
#define GC_BASE__INST7_SEG3                        0
#define GC_BASE__INST7_SEG4                        0
#define GC_BASE__INST7_SEG5                        0

#define HDP_BASE__INST0_SEG0                       0x00000F20
#define HDP_BASE__INST0_SEG1                       0x0240A400
#define HDP_BASE__INST0_SEG2                       0
#define HDP_BASE__INST0_SEG3                       0
#define HDP_BASE__INST0_SEG4                       0
#define HDP_BASE__INST0_SEG5                       0

#define HDP_BASE__INST1_SEG0                       0
#define HDP_BASE__INST1_SEG1                       0
#define HDP_BASE__INST1_SEG2                       0
#define HDP_BASE__INST1_SEG3                       0
#define HDP_BASE__INST1_SEG4                       0
#define HDP_BASE__INST1_SEG5                       0

#define HDP_BASE__INST2_SEG0                       0
#define HDP_BASE__INST2_SEG1                       0
#define HDP_BASE__INST2_SEG2                       0
#define HDP_BASE__INST2_SEG3                       0
#define HDP_BASE__INST2_SEG4                       0
#define HDP_BASE__INST2_SEG5                       0

#define HDP_BASE__INST3_SEG0                       0
#define HDP_BASE__INST3_SEG1                       0
#define HDP_BASE__INST3_SEG2                       0
#define HDP_BASE__INST3_SEG3                       0
#define HDP_BASE__INST3_SEG4                       0
#define HDP_BASE__INST3_SEG5                       0

#define HDP_BASE__INST4_SEG0                       0
#define HDP_BASE__INST4_SEG1                       0
#define HDP_BASE__INST4_SEG2                       0
#define HDP_BASE__INST4_SEG3                       0
#define HDP_BASE__INST4_SEG4                       0
#define HDP_BASE__INST4_SEG5                       0

#define HDP_BASE__INST5_SEG0                       0
#define HDP_BASE__INST5_SEG1                       0
#define HDP_BASE__INST5_SEG2                       0
#define HDP_BASE__INST5_SEG3                       0
#define HDP_BASE__INST5_SEG4                       0
#define HDP_BASE__INST5_SEG5                       0

#define HDP_BASE__INST6_SEG0                       0
#define HDP_BASE__INST6_SEG1                       0
#define HDP_BASE__INST6_SEG2                       0
#define HDP_BASE__INST6_SEG3                       0
#define HDP_BASE__INST6_SEG4                       0
#define HDP_BASE__INST6_SEG5                       0

#define HDP_BASE__INST7_SEG0                       0
#define HDP_BASE__INST7_SEG1                       0
#define HDP_BASE__INST7_SEG2                       0
#define HDP_BASE__INST7_SEG3                       0
#define HDP_BASE__INST7_SEG4                       0
#define HDP_BASE__INST7_SEG5                       0

#define ISP_BASE__INST0_SEG0                       0x00018000
#define ISP_BASE__INST0_SEG1                       0x0240B000
#define ISP_BASE__INST0_SEG2                       0
#define ISP_BASE__INST0_SEG3                       0
#define ISP_BASE__INST0_SEG4                       0
#define ISP_BASE__INST0_SEG5                       0

#define ISP_BASE__INST1_SEG0                       0
#define ISP_BASE__INST1_SEG1                       0
#define ISP_BASE__INST1_SEG2                       0
#define ISP_BASE__INST1_SEG3                       0
#define ISP_BASE__INST1_SEG4                       0
#define ISP_BASE__INST1_SEG5                       0

#define ISP_BASE__INST2_SEG0                       0
#define ISP_BASE__INST2_SEG1                       0
#define ISP_BASE__INST2_SEG2                       0
#define ISP_BASE__INST2_SEG3                       0
#define ISP_BASE__INST2_SEG4                       0
#define ISP_BASE__INST2_SEG5                       0

#define ISP_BASE__INST3_SEG0                       0
#define ISP_BASE__INST3_SEG1                       0
#define ISP_BASE__INST3_SEG2                       0
#define ISP_BASE__INST3_SEG3                       0
#define ISP_BASE__INST3_SEG4                       0
#define ISP_BASE__INST3_SEG5                       0

#define ISP_BASE__INST4_SEG0                       0
#define ISP_BASE__INST4_SEG1                       0
#define ISP_BASE__INST4_SEG2                       0
#define ISP_BASE__INST4_SEG3                       0
#define ISP_BASE__INST4_SEG4                       0
#define ISP_BASE__INST4_SEG5                       0

#define ISP_BASE__INST5_SEG0                       0
#define ISP_BASE__INST5_SEG1                       0
#define ISP_BASE__INST5_SEG2                       0
#define ISP_BASE__INST5_SEG3                       0
#define ISP_BASE__INST5_SEG4                       0
#define ISP_BASE__INST5_SEG5                       0

#define ISP_BASE__INST6_SEG0                       0
#define ISP_BASE__INST6_SEG1                       0
#define ISP_BASE__INST6_SEG2                       0
#define ISP_BASE__INST6_SEG3                       0
#define ISP_BASE__INST6_SEG4                       0
#define ISP_BASE__INST6_SEG5                       0

#define ISP_BASE__INST7_SEG0                       0
#define ISP_BASE__INST7_SEG1                       0
#define ISP_BASE__INST7_SEG2                       0
#define ISP_BASE__INST7_SEG3                       0
#define ISP_BASE__INST7_SEG4                       0
#define ISP_BASE__INST7_SEG5                       0

#define MMHUB_BASE__INST0_SEG0                     0x00013200
#define MMHUB_BASE__INST0_SEG1                     0x0001A000
#define MMHUB_BASE__INST0_SEG2                     0x02408800
#define MMHUB_BASE__INST0_SEG3                     0
#define MMHUB_BASE__INST0_SEG4                     0
#define MMHUB_BASE__INST0_SEG5                     0

#define MMHUB_BASE__INST1_SEG0                     0
#define MMHUB_BASE__INST1_SEG1                     0
#define MMHUB_BASE__INST1_SEG2                     0
#define MMHUB_BASE__INST1_SEG3                     0
#define MMHUB_BASE__INST1_SEG4                     0
#define MMHUB_BASE__INST1_SEG5                     0

#define MMHUB_BASE__INST2_SEG0                     0
#define MMHUB_BASE__INST2_SEG1                     0
#define MMHUB_BASE__INST2_SEG2                     0
#define MMHUB_BASE__INST2_SEG3                     0
#define MMHUB_BASE__INST2_SEG4                     0
#define MMHUB_BASE__INST2_SEG5                     0

#define MMHUB_BASE__INST3_SEG0                     0
#define MMHUB_BASE__INST3_SEG1                     0
#define MMHUB_BASE__INST3_SEG2                     0
#define MMHUB_BASE__INST3_SEG3                     0
#define MMHUB_BASE__INST3_SEG4                     0
#define MMHUB_BASE__INST3_SEG5                     0

#define MMHUB_BASE__INST4_SEG0                     0
#define MMHUB_BASE__INST4_SEG1                     0
#define MMHUB_BASE__INST4_SEG2                     0
#define MMHUB_BASE__INST4_SEG3                     0
#define MMHUB_BASE__INST4_SEG4                     0
#define MMHUB_BASE__INST4_SEG5                     0

#define MMHUB_BASE__INST5_SEG0                     0
#define MMHUB_BASE__INST5_SEG1                     0
#define MMHUB_BASE__INST5_SEG2                     0
#define MMHUB_BASE__INST5_SEG3                     0
#define MMHUB_BASE__INST5_SEG4                     0
#define MMHUB_BASE__INST5_SEG5                     0

#define MMHUB_BASE__INST6_SEG0                     0
#define MMHUB_BASE__INST6_SEG1                     0
#define MMHUB_BASE__INST6_SEG2                     0
#define MMHUB_BASE__INST6_SEG3                     0
#define MMHUB_BASE__INST6_SEG4                     0
#define MMHUB_BASE__INST6_SEG5                     0

#define MMHUB_BASE__INST7_SEG0                     0
#define MMHUB_BASE__INST7_SEG1                     0
#define MMHUB_BASE__INST7_SEG2                     0
#define MMHUB_BASE__INST7_SEG3                     0
#define MMHUB_BASE__INST7_SEG4                     0
#define MMHUB_BASE__INST7_SEG5                     0

#define MP0_BASE__INST0_SEG0                       0x00016000
#define MP0_BASE__INST0_SEG1                       0x0243FC00
#define MP0_BASE__INST0_SEG2                       0x00DC0000
#define MP0_BASE__INST0_SEG3                       0x00E00000
#define MP0_BASE__INST0_SEG4                       0x00E40000
#define MP0_BASE__INST0_SEG5                       0

#define MP0_BASE__INST1_SEG0                       0
#define MP0_BASE__INST1_SEG1                       0
#define MP0_BASE__INST1_SEG2                       0
#define MP0_BASE__INST1_SEG3                       0
#define MP0_BASE__INST1_SEG4                       0
#define MP0_BASE__INST1_SEG5                       0

#define MP0_BASE__INST2_SEG0                       0
#define MP0_BASE__INST2_SEG1                       0
#define MP0_BASE__INST2_SEG2                       0
#define MP0_BASE__INST2_SEG3                       0
#define MP0_BASE__INST2_SEG4                       0
#define MP0_BASE__INST2_SEG5                       0

#define MP0_BASE__INST3_SEG0                       0
#define MP0_BASE__INST3_SEG1                       0
#define MP0_BASE__INST3_SEG2                       0
#define MP0_BASE__INST3_SEG3                       0
#define MP0_BASE__INST3_SEG4                       0
#define MP0_BASE__INST3_SEG5                       0

#define MP0_BASE__INST4_SEG0                       0
#define MP0_BASE__INST4_SEG1                       0
#define MP0_BASE__INST4_SEG2                       0
#define MP0_BASE__INST4_SEG3                       0
#define MP0_BASE__INST4_SEG4                       0
#define MP0_BASE__INST4_SEG5                       0

#define MP0_BASE__INST5_SEG0                       0
#define MP0_BASE__INST5_SEG1                       0
#define MP0_BASE__INST5_SEG2                       0
#define MP0_BASE__INST5_SEG3                       0
#define MP0_BASE__INST5_SEG4                       0
#define MP0_BASE__INST5_SEG5                       0

#define MP0_BASE__INST6_SEG0                       0
#define MP0_BASE__INST6_SEG1                       0
#define MP0_BASE__INST6_SEG2                       0
#define MP0_BASE__INST6_SEG3                       0
#define MP0_BASE__INST6_SEG4                       0
#define MP0_BASE__INST6_SEG5                       0

#define MP0_BASE__INST7_SEG0                       0
#define MP0_BASE__INST7_SEG1                       0
#define MP0_BASE__INST7_SEG2                       0
#define MP0_BASE__INST7_SEG3                       0
#define MP0_BASE__INST7_SEG4                       0
#define MP0_BASE__INST7_SEG5                       0

#define MP1_BASE__INST0_SEG0                       0x00016000
#define MP1_BASE__INST0_SEG1                       0x0243FC00
#define MP1_BASE__INST0_SEG2                       0x00DC0000
#define MP1_BASE__INST0_SEG3                       0x00E00000
#define MP1_BASE__INST0_SEG4                       0x00E40000
#define MP1_BASE__INST0_SEG5                       0

#define MP1_BASE__INST1_SEG0                       0
#define MP1_BASE__INST1_SEG1                       0
#define MP1_BASE__INST1_SEG2                       0
#define MP1_BASE__INST1_SEG3                       0
#define MP1_BASE__INST1_SEG4                       0
#define MP1_BASE__INST1_SEG5                       0

#define MP1_BASE__INST2_SEG0                       0
#define MP1_BASE__INST2_SEG1                       0
#define MP1_BASE__INST2_SEG2                       0
#define MP1_BASE__INST2_SEG3                       0
#define MP1_BASE__INST2_SEG4                       0
#define MP1_BASE__INST2_SEG5                       0

#define MP1_BASE__INST3_SEG0                       0
#define MP1_BASE__INST3_SEG1                       0
#define MP1_BASE__INST3_SEG2                       0
#define MP1_BASE__INST3_SEG3                       0
#define MP1_BASE__INST3_SEG4                       0
#define MP1_BASE__INST3_SEG5                       0

#define MP1_BASE__INST4_SEG0                       0
#define MP1_BASE__INST4_SEG1                       0
#define MP1_BASE__INST4_SEG2                       0
#define MP1_BASE__INST4_SEG3                       0
#define MP1_BASE__INST4_SEG4                       0
#define MP1_BASE__INST4_SEG5                       0

#define MP1_BASE__INST5_SEG0                       0
#define MP1_BASE__INST5_SEG1                       0
#define MP1_BASE__INST5_SEG2                       0
#define MP1_BASE__INST5_SEG3                       0
#define MP1_BASE__INST5_SEG4                       0
#define MP1_BASE__INST5_SEG5                       0

#define MP1_BASE__INST6_SEG0                       0
#define MP1_BASE__INST6_SEG1                       0
#define MP1_BASE__INST6_SEG2                       0
#define MP1_BASE__INST6_SEG3                       0
#define MP1_BASE__INST6_SEG4                       0
#define MP1_BASE__INST6_SEG5                       0

#define MP1_BASE__INST7_SEG0                       0
#define MP1_BASE__INST7_SEG1                       0
#define MP1_BASE__INST7_SEG2                       0
#define MP1_BASE__INST7_SEG3                       0
#define MP1_BASE__INST7_SEG4                       0
#define MP1_BASE__INST7_SEG5                       0

#define MP2_BASE__INST0_SEG0                       0x00016400
#define MP2_BASE__INST0_SEG1                       0x02400800
#define MP2_BASE__INST0_SEG2                       0x00F40000
#define MP2_BASE__INST0_SEG3                       0x00F80000
#define MP2_BASE__INST0_SEG4                       0x00FC0000
#define MP2_BASE__INST0_SEG5                       0

#define MP2_BASE__INST1_SEG0                       0
#define MP2_BASE__INST1_SEG1                       0
#define MP2_BASE__INST1_SEG2                       0
#define MP2_BASE__INST1_SEG3                       0
#define MP2_BASE__INST1_SEG4                       0
#define MP2_BASE__INST1_SEG5                       0

#define MP2_BASE__INST2_SEG0                       0
#define MP2_BASE__INST2_SEG1                       0
#define MP2_BASE__INST2_SEG2                       0
#define MP2_BASE__INST2_SEG3                       0
#define MP2_BASE__INST2_SEG4                       0
#define MP2_BASE__INST2_SEG5                       0

#define MP2_BASE__INST3_SEG0                       0
#define MP2_BASE__INST3_SEG1                       0
#define MP2_BASE__INST3_SEG2                       0
#define MP2_BASE__INST3_SEG3                       0
#define MP2_BASE__INST3_SEG4                       0
#define MP2_BASE__INST3_SEG5                       0

#define MP2_BASE__INST4_SEG0                       0
#define MP2_BASE__INST4_SEG1                       0
#define MP2_BASE__INST4_SEG2                       0
#define MP2_BASE__INST4_SEG3                       0
#define MP2_BASE__INST4_SEG4                       0
#define MP2_BASE__INST4_SEG5                       0

#define MP2_BASE__INST5_SEG0                       0
#define MP2_BASE__INST5_SEG1                       0
#define MP2_BASE__INST5_SEG2                       0
#define MP2_BASE__INST5_SEG3                       0
#define MP2_BASE__INST5_SEG4                       0
#define MP2_BASE__INST5_SEG5                       0

#define MP2_BASE__INST6_SEG0                       0
#define MP2_BASE__INST6_SEG1                       0
#define MP2_BASE__INST6_SEG2                       0
#define MP2_BASE__INST6_SEG3                       0
#define MP2_BASE__INST6_SEG4                       0
#define MP2_BASE__INST6_SEG5                       0

#define MP2_BASE__INST7_SEG0                       0
#define MP2_BASE__INST7_SEG1                       0
#define MP2_BASE__INST7_SEG2                       0
#define MP2_BASE__INST7_SEG3                       0
#define MP2_BASE__INST7_SEG4                       0
#define MP2_BASE__INST7_SEG5                       0

#define NBIO_BASE__INST0_SEG0                      0x00000000
#define NBIO_BASE__INST0_SEG1                      0x00000014
#define NBIO_BASE__INST0_SEG2                      0x00000D20
#define NBIO_BASE__INST0_SEG3                      0x00010400
#define NBIO_BASE__INST0_SEG4                      0x0241B000
#define NBIO_BASE__INST0_SEG5                      0x04040000

#define NBIO_BASE__INST1_SEG0                      0
#define NBIO_BASE__INST1_SEG1                      0
#define NBIO_BASE__INST1_SEG2                      0
#define NBIO_BASE__INST1_SEG3                      0
#define NBIO_BASE__INST1_SEG4                      0
#define NBIO_BASE__INST1_SEG5                      0

#define NBIO_BASE__INST2_SEG0                      0
#define NBIO_BASE__INST2_SEG1                      0
#define NBIO_BASE__INST2_SEG2                      0
#define NBIO_BASE__INST2_SEG3                      0
#define NBIO_BASE__INST2_SEG4                      0
#define NBIO_BASE__INST2_SEG5                      0

#define NBIO_BASE__INST3_SEG0                      0
#define NBIO_BASE__INST3_SEG1                      0
#define NBIO_BASE__INST3_SEG2                      0
#define NBIO_BASE__INST3_SEG3                      0
#define NBIO_BASE__INST3_SEG4                      0
#define NBIO_BASE__INST3_SEG5                      0

#define NBIO_BASE__INST4_SEG0                      0
#define NBIO_BASE__INST4_SEG1                      0
#define NBIO_BASE__INST4_SEG2                      0
#define NBIO_BASE__INST4_SEG3                      0
#define NBIO_BASE__INST4_SEG4                      0
#define NBIO_BASE__INST4_SEG5                      0

#define NBIO_BASE__INST5_SEG0                      0
#define NBIO_BASE__INST5_SEG1                      0
#define NBIO_BASE__INST5_SEG2                      0
#define NBIO_BASE__INST5_SEG3                      0
#define NBIO_BASE__INST5_SEG4                      0
#define NBIO_BASE__INST5_SEG5                      0

#define NBIO_BASE__INST6_SEG0                      0
#define NBIO_BASE__INST6_SEG1                      0
#define NBIO_BASE__INST6_SEG2                      0
#define NBIO_BASE__INST6_SEG3                      0
#define NBIO_BASE__INST6_SEG4                      0
#define NBIO_BASE__INST6_SEG5                      0

#define NBIO_BASE__INST7_SEG0                      0
#define NBIO_BASE__INST7_SEG1                      0
#define NBIO_BASE__INST7_SEG2                      0
#define NBIO_BASE__INST7_SEG3                      0
#define NBIO_BASE__INST7_SEG4                      0
#define NBIO_BASE__INST7_SEG5                      0

#define OSSSYS_BASE__INST0_SEG0                    0x000010A0
#define OSSSYS_BASE__INST0_SEG1                    0x0240A000
#define OSSSYS_BASE__INST0_SEG2                    0
#define OSSSYS_BASE__INST0_SEG3                    0
#define OSSSYS_BASE__INST0_SEG4                    0
#define OSSSYS_BASE__INST0_SEG5                    0

#define OSSSYS_BASE__INST1_SEG0                    0
#define OSSSYS_BASE__INST1_SEG1                    0
#define OSSSYS_BASE__INST1_SEG2                    0
#define OSSSYS_BASE__INST1_SEG3                    0
#define OSSSYS_BASE__INST1_SEG4                    0
#define OSSSYS_BASE__INST1_SEG5                    0

#define OSSSYS_BASE__INST2_SEG0                    0
#define OSSSYS_BASE__INST2_SEG1                    0
#define OSSSYS_BASE__INST2_SEG2                    0
#define OSSSYS_BASE__INST2_SEG3                    0
#define OSSSYS_BASE__INST2_SEG4                    0
#define OSSSYS_BASE__INST2_SEG5                    0

#define OSSSYS_BASE__INST3_SEG0                    0
#define OSSSYS_BASE__INST3_SEG1                    0
#define OSSSYS_BASE__INST3_SEG2                    0
#define OSSSYS_BASE__INST3_SEG3                    0
#define OSSSYS_BASE__INST3_SEG4                    0
#define OSSSYS_BASE__INST3_SEG5                    0

#define OSSSYS_BASE__INST4_SEG0                    0
#define OSSSYS_BASE__INST4_SEG1                    0
#define OSSSYS_BASE__INST4_SEG2                    0
#define OSSSYS_BASE__INST4_SEG3                    0
#define OSSSYS_BASE__INST4_SEG4                    0
#define OSSSYS_BASE__INST4_SEG5                    0

#define OSSSYS_BASE__INST5_SEG0                    0
#define OSSSYS_BASE__INST5_SEG1                    0
#define OSSSYS_BASE__INST5_SEG2                    0
#define OSSSYS_BASE__INST5_SEG3                    0
#define OSSSYS_BASE__INST5_SEG4                    0
#define OSSSYS_BASE__INST5_SEG5                    0

#define OSSSYS_BASE__INST6_SEG0                    0
#define OSSSYS_BASE__INST6_SEG1                    0
#define OSSSYS_BASE__INST6_SEG2                    0
#define OSSSYS_BASE__INST6_SEG3                    0
#define OSSSYS_BASE__INST6_SEG4                    0
#define OSSSYS_BASE__INST6_SEG5                    0

#define OSSSYS_BASE__INST7_SEG0                    0
#define OSSSYS_BASE__INST7_SEG1                    0
#define OSSSYS_BASE__INST7_SEG2                    0
#define OSSSYS_BASE__INST7_SEG3                    0
#define OSSSYS_BASE__INST7_SEG4                    0
#define OSSSYS_BASE__INST7_SEG5                    0

#define PCIE0_BASE__INST0_SEG0                     0x00000000
#define PCIE0_BASE__INST0_SEG1                     0x00000014
#define PCIE0_BASE__INST0_SEG2                     0x00000D20
#define PCIE0_BASE__INST0_SEG3                     0x00010400
#define PCIE0_BASE__INST0_SEG4                     0x0241B000
#define PCIE0_BASE__INST0_SEG5                     0x04040000

#define PCIE0_BASE__INST1_SEG0                     0
#define PCIE0_BASE__INST1_SEG1                     0
#define PCIE0_BASE__INST1_SEG2                     0
#define PCIE0_BASE__INST1_SEG3                     0
#define PCIE0_BASE__INST1_SEG4                     0
#define PCIE0_BASE__INST1_SEG5                     0

#define PCIE0_BASE__INST2_SEG0                     0
#define PCIE0_BASE__INST2_SEG1                     0
#define PCIE0_BASE__INST2_SEG2                     0
#define PCIE0_BASE__INST2_SEG3                     0
#define PCIE0_BASE__INST2_SEG4                     0
#define PCIE0_BASE__INST2_SEG5                     0

#define PCIE0_BASE__INST3_SEG0                     0
#define PCIE0_BASE__INST3_SEG1                     0
#define PCIE0_BASE__INST3_SEG2                     0
#define PCIE0_BASE__INST3_SEG3                     0
#define PCIE0_BASE__INST3_SEG4                     0
#define PCIE0_BASE__INST3_SEG5                     0

#define PCIE0_BASE__INST4_SEG0                     0
#define PCIE0_BASE__INST4_SEG1                     0
#define PCIE0_BASE__INST4_SEG2                     0
#define PCIE0_BASE__INST4_SEG3                     0
#define PCIE0_BASE__INST4_SEG4                     0
#define PCIE0_BASE__INST4_SEG5                     0

#define PCIE0_BASE__INST5_SEG0                     0
#define PCIE0_BASE__INST5_SEG1                     0
#define PCIE0_BASE__INST5_SEG2                     0
#define PCIE0_BASE__INST5_SEG3                     0
#define PCIE0_BASE__INST5_SEG4                     0
#define PCIE0_BASE__INST5_SEG5                     0

#define PCIE0_BASE__INST6_SEG0                     0
#define PCIE0_BASE__INST6_SEG1                     0
#define PCIE0_BASE__INST6_SEG2                     0
#define PCIE0_BASE__INST6_SEG3                     0
#define PCIE0_BASE__INST6_SEG4                     0
#define PCIE0_BASE__INST6_SEG5                     0

#define PCIE0_BASE__INST7_SEG0                     0
#define PCIE0_BASE__INST7_SEG1                     0
#define PCIE0_BASE__INST7_SEG2                     0
#define PCIE0_BASE__INST7_SEG3                     0
#define PCIE0_BASE__INST7_SEG4                     0
#define PCIE0_BASE__INST7_SEG5                     0

#define SMUIO_BASE__INST0_SEG0                      0x00016800
#define SMUIO_BASE__INST0_SEG1                      0x00016A00
#define SMUIO_BASE__INST0_SEG2                      0x02401000
#define SMUIO_BASE__INST0_SEG3                      0x00440000
#define SMUIO_BASE__INST0_SEG4                      0
#define SMUIO_BASE__INST0_SEG5                      0

#define SMUIO_BASE__INST1_SEG0                      0x0001BC00
#define SMUIO_BASE__INST1_SEG1                      0x0242D400
#define SMUIO_BASE__INST1_SEG2                      0
#define SMUIO_BASE__INST1_SEG3                      0
#define SMUIO_BASE__INST1_SEG4                      0
#define SMUIO_BASE__INST1_SEG5                      0

#define SMUIO_BASE__INST2_SEG0                      0
#define SMUIO_BASE__INST2_SEG1                      0
#define SMUIO_BASE__INST2_SEG2                      0
#define SMUIO_BASE__INST2_SEG3                      0
#define SMUIO_BASE__INST2_SEG4                      0
#define SMUIO_BASE__INST2_SEG5                      0

#define SMUIO_BASE__INST3_SEG0                      0
#define SMUIO_BASE__INST3_SEG1                      0
#define SMUIO_BASE__INST3_SEG2                      0
#define SMUIO_BASE__INST3_SEG3                      0
#define SMUIO_BASE__INST3_SEG4                      0
#define SMUIO_BASE__INST3_SEG5                      0

#define SMUIO_BASE__INST4_SEG0                      0
#define SMUIO_BASE__INST4_SEG1                      0
#define SMUIO_BASE__INST4_SEG2                      0
#define SMUIO_BASE__INST4_SEG3                      0
#define SMUIO_BASE__INST4_SEG4                      0
#define SMUIO_BASE__INST4_SEG5                      0

#define SMUIO_BASE__INST5_SEG0                      0
#define SMUIO_BASE__INST5_SEG1                      0
#define SMUIO_BASE__INST5_SEG2                      0
#define SMUIO_BASE__INST5_SEG3                      0
#define SMUIO_BASE__INST5_SEG4                      0
#define SMUIO_BASE__INST5_SEG5                      0

#define SMUIO_BASE__INST6_SEG0                      0
#define SMUIO_BASE__INST6_SEG1                      0
#define SMUIO_BASE__INST6_SEG2                      0
#define SMUIO_BASE__INST6_SEG3                      0
#define SMUIO_BASE__INST6_SEG4                      0
#define SMUIO_BASE__INST6_SEG5                      0

#define SMUIO_BASE__INST7_SEG0                      0
#define SMUIO_BASE__INST7_SEG1                      0
#define SMUIO_BASE__INST7_SEG2                      0
#define SMUIO_BASE__INST7_SEG3                      0
#define SMUIO_BASE__INST7_SEG4                      0
#define SMUIO_BASE__INST7_SEG5                      0

#define THM_BASE__INST0_SEG0                       0x00016600
#define THM_BASE__INST0_SEG1                       0x02400C00
#define THM_BASE__INST0_SEG2                       0
#define THM_BASE__INST0_SEG3                       0
#define THM_BASE__INST0_SEG4                       0
#define THM_BASE__INST0_SEG5                       0

#define THM_BASE__INST1_SEG0                       0
#define THM_BASE__INST1_SEG1                       0
#define THM_BASE__INST1_SEG2                       0
#define THM_BASE__INST1_SEG3                       0
#define THM_BASE__INST1_SEG4                       0
#define THM_BASE__INST1_SEG5                       0

#define THM_BASE__INST2_SEG0                       0
#define THM_BASE__INST2_SEG1                       0
#define THM_BASE__INST2_SEG2                       0
#define THM_BASE__INST2_SEG3                       0
#define THM_BASE__INST2_SEG4                       0
#define THM_BASE__INST2_SEG5                       0

#define THM_BASE__INST3_SEG0                       0
#define THM_BASE__INST3_SEG1                       0
#define THM_BASE__INST3_SEG2                       0
#define THM_BASE__INST3_SEG3                       0
#define THM_BASE__INST3_SEG4                       0
#define THM_BASE__INST3_SEG5                       0

#define THM_BASE__INST4_SEG0                       0
#define THM_BASE__INST4_SEG1                       0
#define THM_BASE__INST4_SEG2                       0
#define THM_BASE__INST4_SEG3                       0
#define THM_BASE__INST4_SEG4                       0
#define THM_BASE__INST4_SEG5                       0

#define THM_BASE__INST5_SEG0                       0
#define THM_BASE__INST5_SEG1                       0
#define THM_BASE__INST5_SEG2                       0
#define THM_BASE__INST5_SEG3                       0
#define THM_BASE__INST5_SEG4                       0
#define THM_BASE__INST5_SEG5                       0

#define THM_BASE__INST6_SEG0                       0
#define THM_BASE__INST6_SEG1                       0
#define THM_BASE__INST6_SEG2                       0
#define THM_BASE__INST6_SEG3                       0
#define THM_BASE__INST6_SEG4                       0
#define THM_BASE__INST6_SEG5                       0

#define THM_BASE__INST7_SEG0                       0
#define THM_BASE__INST7_SEG1                       0
#define THM_BASE__INST7_SEG2                       0
#define THM_BASE__INST7_SEG3                       0
#define THM_BASE__INST7_SEG4                       0
#define THM_BASE__INST7_SEG5                       0

#define UMC_BASE__INST0_SEG0                       0x00014000
#define UMC_BASE__INST0_SEG1                       0x02425800
#define UMC_BASE__INST0_SEG2                       0
#define UMC_BASE__INST0_SEG3                       0
#define UMC_BASE__INST0_SEG4                       0
#define UMC_BASE__INST0_SEG5                       0

#define UMC_BASE__INST1_SEG0                       0x00054000
#define UMC_BASE__INST1_SEG1                       0x02425C00
#define UMC_BASE__INST1_SEG2                       0
#define UMC_BASE__INST1_SEG3                       0
#define UMC_BASE__INST1_SEG4                       0
#define UMC_BASE__INST1_SEG5                       0

#define UMC_BASE__INST2_SEG0                       0x00094000
#define UMC_BASE__INST2_SEG1                       0x02426000
#define UMC_BASE__INST2_SEG2                       0
#define UMC_BASE__INST2_SEG3                       0
#define UMC_BASE__INST2_SEG4                       0
#define UMC_BASE__INST2_SEG5                       0

#define UMC_BASE__INST3_SEG0                       0x000D4000
#define UMC_BASE__INST3_SEG1                       0x02426400
#define UMC_BASE__INST3_SEG2                       0
#define UMC_BASE__INST3_SEG3                       0
#define UMC_BASE__INST3_SEG4                       0
#define UMC_BASE__INST3_SEG5                       0

#define UMC_BASE__INST4_SEG0                       0
#define UMC_BASE__INST4_SEG1                       0
#define UMC_BASE__INST4_SEG2                       0
#define UMC_BASE__INST4_SEG3                       0
#define UMC_BASE__INST4_SEG4                       0
#define UMC_BASE__INST4_SEG5                       0

#define UMC_BASE__INST5_SEG0                       0
#define UMC_BASE__INST5_SEG1                       0
#define UMC_BASE__INST5_SEG2                       0
#define UMC_BASE__INST5_SEG3                       0
#define UMC_BASE__INST5_SEG4                       0
#define UMC_BASE__INST5_SEG5                       0

#define UMC_BASE__INST6_SEG0                       0
#define UMC_BASE__INST6_SEG1                       0
#define UMC_BASE__INST6_SEG2                       0
#define UMC_BASE__INST6_SEG3                       0
#define UMC_BASE__INST6_SEG4                       0
#define UMC_BASE__INST6_SEG5                       0

#define UMC_BASE__INST7_SEG0                       0
#define UMC_BASE__INST7_SEG1                       0
#define UMC_BASE__INST7_SEG2                       0
#define UMC_BASE__INST7_SEG3                       0
#define UMC_BASE__INST7_SEG4                       0
#define UMC_BASE__INST7_SEG5                       0

#define USB_BASE__INST0_SEG0                       0x0242A800
#define USB_BASE__INST0_SEG1                       0x05B00000
#define USB_BASE__INST0_SEG2                       0
#define USB_BASE__INST0_SEG3                       0
#define USB_BASE__INST0_SEG4                       0
#define USB_BASE__INST0_SEG5                       0

#define USB_BASE__INST1_SEG0                       0x0242AC00
#define USB_BASE__INST1_SEG1                       0x05B80000
#define USB_BASE__INST1_SEG2                       0
#define USB_BASE__INST1_SEG3                       0
#define USB_BASE__INST1_SEG4                       0
#define USB_BASE__INST1_SEG5                       0

#define USB_BASE__INST2_SEG0                       0x0242B000
#define USB_BASE__INST2_SEG1                       0x05C00000
#define USB_BASE__INST2_SEG2                       0
#define USB_BASE__INST2_SEG3                       0
#define USB_BASE__INST2_SEG4                       0
#define USB_BASE__INST2_SEG5                       0

#define USB_BASE__INST3_SEG0                       0
#define USB_BASE__INST3_SEG1                       0
#define USB_BASE__INST3_SEG2                       0
#define USB_BASE__INST3_SEG3                       0
#define USB_BASE__INST3_SEG4                       0
#define USB_BASE__INST3_SEG5                       0

#define USB_BASE__INST4_SEG0                       0
#define USB_BASE__INST4_SEG1                       0
#define USB_BASE__INST4_SEG2                       0
#define USB_BASE__INST4_SEG3                       0
#define USB_BASE__INST4_SEG4                       0
#define USB_BASE__INST4_SEG5                       0

#define USB_BASE__INST5_SEG0                       0
#define USB_BASE__INST5_SEG1                       0
#define USB_BASE__INST5_SEG2                       0
#define USB_BASE__INST5_SEG3                       0
#define USB_BASE__INST5_SEG4                       0
#define USB_BASE__INST5_SEG5                       0

#define USB_BASE__INST6_SEG0                       0
#define USB_BASE__INST6_SEG1                       0
#define USB_BASE__INST6_SEG2                       0
#define USB_BASE__INST6_SEG3                       0
#define USB_BASE__INST6_SEG4                       0
#define USB_BASE__INST6_SEG5                       0

#define USB_BASE__INST7_SEG0                       0
#define USB_BASE__INST7_SEG1                       0
#define USB_BASE__INST7_SEG2                       0
#define USB_BASE__INST7_SEG3                       0
#define USB_BASE__INST7_SEG4                       0
#define USB_BASE__INST7_SEG5                       0

#define VCN_BASE__INST0_SEG0                      0x00007800
#define VCN_BASE__INST0_SEG1                      0x00007E00
#define VCN_BASE__INST0_SEG2                      0x02403000
#define VCN_BASE__INST0_SEG3                      0
#define VCN_BASE__INST0_SEG4                      0
#define VCN_BASE__INST0_SEG5                      0

#define VCN_BASE__INST1_SEG0                      0
#define VCN_BASE__INST1_SEG1                      0
#define VCN_BASE__INST1_SEG2                      0
#define VCN_BASE__INST1_SEG3                      0
#define VCN_BASE__INST1_SEG4                      0
#define VCN_BASE__INST1_SEG5                      0

#define VCN_BASE__INST2_SEG0                      0
#define VCN_BASE__INST2_SEG1                      0
#define VCN_BASE__INST2_SEG2                      0
#define VCN_BASE__INST2_SEG3                      0
#define VCN_BASE__INST2_SEG4                      0
#define VCN_BASE__INST2_SEG5                      0

#define VCN_BASE__INST3_SEG0                      0
#define VCN_BASE__INST3_SEG1                      0
#define VCN_BASE__INST3_SEG2                      0
#define VCN_BASE__INST3_SEG3                      0
#define VCN_BASE__INST3_SEG4                      0
#define VCN_BASE__INST3_SEG5                      0

#define VCN_BASE__INST4_SEG0                      0
#define VCN_BASE__INST4_SEG1                      0
#define VCN_BASE__INST4_SEG2                      0
#define VCN_BASE__INST4_SEG3                      0
#define VCN_BASE__INST4_SEG4                      0
#define VCN_BASE__INST4_SEG5                      0

#define VCN_BASE__INST5_SEG0                      0
#define VCN_BASE__INST5_SEG1                      0
#define VCN_BASE__INST5_SEG2                      0
#define VCN_BASE__INST5_SEG3                      0
#define VCN_BASE__INST5_SEG4                      0
#define VCN_BASE__INST5_SEG5                      0

#define VCN_BASE__INST6_SEG0                      0
#define VCN_BASE__INST6_SEG1                      0
#define VCN_BASE__INST6_SEG2                      0
#define VCN_BASE__INST6_SEG3                      0
#define VCN_BASE__INST6_SEG4                      0
#define VCN_BASE__INST6_SEG5                      0

#define VCN_BASE__INST7_SEG0                      0
#define VCN_BASE__INST7_SEG1                      0
#define VCN_BASE__INST7_SEG2                      0
#define VCN_BASE__INST7_SEG3                      0
#define VCN_BASE__INST7_SEG4                      0
#define VCN_BASE__INST7_SEG5                      0

#endif
/*
 * Copyright 2012-2016 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef V9_STRUCTS_H_
#define V9_STRUCTS_H_

struct v9_sdma_mqd {
	uint32_t sdmax_rlcx_rb_cntl;
	uint32_t sdmax_rlcx_rb_base;
	uint32_t sdmax_rlcx_rb_base_hi;
	uint32_t sdmax_rlcx_rb_rptr;
	uint32_t sdmax_rlcx_rb_rptr_hi;
	uint32_t sdmax_rlcx_rb_wptr;
	uint32_t sdmax_rlcx_rb_wptr_hi;
	uint32_t sdmax_rlcx_rb_wptr_poll_cntl;
	uint32_t sdmax_rlcx_rb_rptr_addr_hi;
	uint32_t sdmax_rlcx_rb_rptr_addr_lo;
	uint32_t sdmax_rlcx_ib_cntl;
	uint32_t sdmax_rlcx_ib_rptr;
	uint32_t sdmax_rlcx_ib_offset;
	uint32_t sdmax_rlcx_ib_base_lo;
	uint32_t sdmax_rlcx_ib_base_hi;
	uint32_t sdmax_rlcx_ib_size;
	uint32_t sdmax_rlcx_skip_cntl;
	uint32_t sdmax_rlcx_context_status;
	uint32_t sdmax_rlcx_doorbell;
	uint32_t sdmax_rlcx_status;
	uint32_t sdmax_rlcx_doorbell_log;
	uint32_t sdmax_rlcx_watermark;
	uint32_t sdmax_rlcx_doorbell_offset;
	uint32_t sdmax_rlcx_csa_addr_lo;
	uint32_t sdmax_rlcx_csa_addr_hi;
	uint32_t sdmax_rlcx_ib_sub_remain;
	uint32_t sdmax_rlcx_preempt;
	uint32_t sdmax_rlcx_dummy_reg;
	uint32_t sdmax_rlcx_rb_wptr_poll_addr_hi;
	uint32_t sdmax_rlcx_rb_wptr_poll_addr_lo;
	uint32_t sdmax_rlcx_rb_aql_cntl;
	uint32_t sdmax_rlcx_minor_ptr_update;
	uint32_t sdmax_rlcx_midcmd_data0;
	uint32_t sdmax_rlcx_midcmd_data1;
	uint32_t sdmax_rlcx_midcmd_data2;
	uint32_t sdmax_rlcx_midcmd_data3;
	uint32_t sdmax_rlcx_midcmd_data4;
	uint32_t sdmax_rlcx_midcmd_data5;
	uint32_t sdmax_rlcx_midcmd_data6;
	uint32_t sdmax_rlcx_midcmd_data7;
	uint32_t sdmax_rlcx_midcmd_data8;
	uint32_t sdmax_rlcx_midcmd_cntl;
	uint32_t reserved_42;
	uint32_t reserved_43;
	uint32_t reserved_44;
	uint32_t reserved_45;
	uint32_t reserved_46;
	uint32_t reserved_47;
	uint32_t reserved_48;
	uint32_t reserved_49;
	uint32_t reserved_50;
	uint32_t reserved_51;
	uint32_t reserved_52;
	uint32_t reserved_53;
	uint32_t reserved_54;
	uint32_t reserved_55;
	uint32_t reserved_56;
	uint32_t reserved_57;
	uint32_t reserved_58;
	uint32_t reserved_59;
	uint32_t reserved_60;
	uint32_t reserved_61;
	uint32_t reserved_62;
	uint32_t reserved_63;
	uint32_t reserved_64;
	uint32_t reserved_65;
	uint32_t reserved_66;
	uint32_t reserved_67;
	uint32_t reserved_68;
	uint32_t reserved_69;
	uint32_t reserved_70;
	uint32_t reserved_71;
	uint32_t reserved_72;
	uint32_t reserved_73;
	uint32_t reserved_74;
	uint32_t reserved_75;
	uint32_t reserved_76;
	uint32_t reserved_77;
	uint32_t reserved_78;
	uint32_t reserved_79;
	uint32_t reserved_80;
	uint32_t reserved_81;
	uint32_t reserved_82;
	uint32_t reserved_83;
	uint32_t reserved_84;
	uint32_t reserved_85;
	uint32_t reserved_86;
	uint32_t reserved_87;
	uint32_t reserved_88;
	uint32_t reserved_89;
	uint32_t reserved_90;
	uint32_t reserved_91;
	uint32_t reserved_92;
	uint32_t reserved_93;
	uint32_t reserved_94;
	uint32_t reserved_95;
	uint32_t reserved_96;
	uint32_t reserved_97;
	uint32_t reserved_98;
	uint32_t reserved_99;
	uint32_t reserved_100;
	uint32_t reserved_101;
	uint32_t reserved_102;
	uint32_t reserved_103;
	uint32_t reserved_104;
	uint32_t reserved_105;
	uint32_t reserved_106;
	uint32_t reserved_107;
	uint32_t reserved_108;
	uint32_t reserved_109;
	uint32_t reserved_110;
	uint32_t reserved_111;
	uint32_t reserved_112;
	uint32_t reserved_113;
	uint32_t reserved_114;
	uint32_t reserved_115;
	uint32_t reserved_116;
	uint32_t reserved_117;
	uint32_t reserved_118;
	uint32_t reserved_119;
	uint32_t reserved_120;
	uint32_t reserved_121;
	uint32_t reserved_122;
	uint32_t reserved_123;
	uint32_t reserved_124;
	uint32_t reserved_125;
	/* reserved_126,127: repurposed for driver-internal use */
	uint32_t sdma_engine_id;
	uint32_t sdma_queue_id;
};

struct v9_mqd {
	uint32_t header;
	uint32_t compute_dispatch_initiator;
	uint32_t compute_dim_x;
	uint32_t compute_dim_y;
	uint32_t compute_dim_z;
	uint32_t compute_start_x;
	uint32_t compute_start_y;
	uint32_t compute_start_z;
	uint32_t compute_num_thread_x;
	uint32_t compute_num_thread_y;
	uint32_t compute_num_thread_z;
	uint32_t compute_pipelinestat_enable;
	uint32_t compute_perfcount_enable;
	uint32_t compute_pgm_lo;
	uint32_t compute_pgm_hi;
	uint32_t compute_tba_lo;
	uint32_t compute_tba_hi;
	uint32_t compute_tma_lo;
	uint32_t compute_tma_hi;
	uint32_t compute_pgm_rsrc1;
	uint32_t compute_pgm_rsrc2;
	uint32_t compute_vmid;
	uint32_t compute_resource_limits;
	uint32_t compute_static_thread_mgmt_se0;
	uint32_t compute_static_thread_mgmt_se1;
	uint32_t compute_tmpring_size;
	uint32_t compute_static_thread_mgmt_se2;
	uint32_t compute_static_thread_mgmt_se3;
	uint32_t compute_restart_x;
	uint32_t compute_restart_y;
	uint32_t compute_restart_z;
	uint32_t compute_thread_trace_enable;
	uint32_t compute_misc_reserved;
	uint32_t compute_dispatch_id;
	uint32_t compute_threadgroup_id;
	uint32_t compute_relaunch;
	uint32_t compute_wave_restore_addr_lo;
	uint32_t compute_wave_restore_addr_hi;
	uint32_t compute_wave_restore_control;
	uint32_t compute_static_thread_mgmt_se4;
	uint32_t compute_static_thread_mgmt_se5;
	uint32_t compute_static_thread_mgmt_se6;
	uint32_t compute_static_thread_mgmt_se7;
	uint32_t reserved_43;
	uint32_t reserved_44;
	uint32_t reserved_45;
	uint32_t reserved_46;
	uint32_t reserved_47;
	uint32_t reserved_48;
	uint32_t reserved_49;
	uint32_t reserved_50;
	uint32_t reserved_51;
	uint32_t reserved_52;
	uint32_t reserved_53;
	uint32_t reserved_54;
	uint32_t reserved_55;
	uint32_t reserved_56;
	uint32_t reserved_57;
	uint32_t reserved_58;
	uint32_t reserved_59;
	uint32_t reserved_60;
	uint32_t reserved_61;
	uint32_t reserved_62;
	uint32_t reserved_63;
	uint32_t reserved_64;
	uint32_t compute_user_data_0;
	uint32_t compute_user_data_1;
	uint32_t compute_user_data_2;
	uint32_t compute_user_data_3;
	uint32_t compute_user_data_4;
	uint32_t compute_user_data_5;
	uint32_t compute_user_data_6;
	uint32_t compute_user_data_7;
	uint32_t compute_user_data_8;
	uint32_t compute_user_data_9;
	uint32_t compute_user_data_10;
	uint32_t compute_user_data_11;
	uint32_t compute_user_data_12;
	uint32_t compute_user_data_13;
	uint32_t compute_user_data_14;
	uint32_t compute_user_data_15;
	uint32_t cp_compute_csinvoc_count_lo;
	uint32_t cp_compute_csinvoc_count_hi;
	uint32_t reserved_83;
	uint32_t reserved_84;
	uint32_t reserved_85;
	uint32_t cp_mqd_query_time_lo;
	uint32_t cp_mqd_query_time_hi;
	uint32_t cp_mqd_connect_start_time_lo;
	uint32_t cp_mqd_connect_start_time_hi;
	uint32_t cp_mqd_connect_end_time_lo;
	uint32_t cp_mqd_connect_end_time_hi;
	uint32_t cp_mqd_connect_end_wf_count;
	uint32_t cp_mqd_connect_end_pq_rptr;
	uint32_t cp_mqd_connect_end_pq_wptr;
	uint32_t cp_mqd_connect_end_ib_rptr;
	uint32_t cp_mqd_readindex_lo;
	uint32_t cp_mqd_readindex_hi;
	uint32_t cp_mqd_save_start_time_lo;
	uint32_t cp_mqd_save_start_time_hi;
	uint32_t cp_mqd_save_end_time_lo;
	uint32_t cp_mqd_save_end_time_hi;
	uint32_t cp_mqd_restore_start_time_lo;
	uint32_t cp_mqd_restore_start_time_hi;
	uint32_t cp_mqd_restore_end_time_lo;
	uint32_t cp_mqd_restore_end_time_hi;
	uint32_t disable_queue;
	uint32_t reserved_107;
	uint32_t gds_cs_ctxsw_cnt0;
	uint32_t gds_cs_ctxsw_cnt1;
	uint32_t gds_cs_ctxsw_cnt2;
	uint32_t gds_cs_ctxsw_cnt3;
	uint32_t reserved_112;
	uint32_t reserved_113;
	uint32_t cp_pq_exe_status_lo;
	uint32_t cp_pq_exe_status_hi;
	uint32_t cp_packet_id_lo;
	uint32_t cp_packet_id_hi;
	uint32_t cp_packet_exe_status_lo;
	uint32_t cp_packet_exe_status_hi;
	uint32_t gds_save_base_addr_lo;
	uint32_t gds_save_base_addr_hi;
	uint32_t gds_save_mask_lo;
	uint32_t gds_save_mask_hi;
	uint32_t ctx_save_base_addr_lo;
	uint32_t ctx_save_base_addr_hi;
	uint32_t dynamic_cu_mask_addr_lo;
	uint32_t dynamic_cu_mask_addr_hi;
	uint32_t cp_mqd_base_addr_lo;
	uint32_t cp_mqd_base_addr_hi;
	uint32_t cp_hqd_active;
	uint32_t cp_hqd_vmid;
	uint32_t cp_hqd_persistent_state;
	uint32_t cp_hqd_pipe_priority;
	uint32_t cp_hqd_queue_priority;
	uint32_t cp_hqd_quantum;
	uint32_t cp_hqd_pq_base_lo;
	uint32_t cp_hqd_pq_base_hi;
	uint32_t cp_hqd_pq_rptr;
	uint32_t cp_hqd_pq_rptr_report_addr_lo;
	uint32_t cp_hqd_pq_rptr_report_addr_hi;
	uint32_t cp_hqd_pq_wptr_poll_addr_lo;
	uint32_t cp_hqd_pq_wptr_poll_addr_hi;
	uint32_t cp_hqd_pq_doorbell_control;
	uint32_t reserved_144;
	uint32_t cp_hqd_pq_control;
	uint32_t cp_hqd_ib_base_addr_lo;
	uint32_t cp_hqd_ib_base_addr_hi;
	uint32_t cp_hqd_ib_rptr;
	uint32_t cp_hqd_ib_control;
	uint32_t cp_hqd_iq_timer;
	uint32_t cp_hqd_iq_rptr;
	uint32_t cp_hqd_dequeue_request;
	uint32_t cp_hqd_dma_offload;
	uint32_t cp_hqd_sema_cmd;
	uint32_t cp_hqd_msg_type;
	uint32_t cp_hqd_atomic0_preop_lo;
	uint32_t cp_hqd_atomic0_preop_hi;
	uint32_t cp_hqd_atomic1_preop_lo;
	uint32_t cp_hqd_atomic1_preop_hi;
	uint32_t cp_hqd_hq_status0;
	uint32_t cp_hqd_hq_control0;
	uint32_t cp_mqd_control;
	uint32_t cp_hqd_hq_status1;
	uint32_t cp_hqd_hq_control1;
	uint32_t cp_hqd_eop_base_addr_lo;
	uint32_t cp_hqd_eop_base_addr_hi;
	uint32_t cp_hqd_eop_control;
	uint32_t cp_hqd_eop_rptr;
	uint32_t cp_hqd_eop_wptr;
	uint32_t cp_hqd_eop_done_events;
	uint32_t cp_hqd_ctx_save_base_addr_lo;
	uint32_t cp_hqd_ctx_save_base_addr_hi;
	uint32_t cp_hqd_ctx_save_control;
	uint32_t cp_hqd_cntl_stack_offset;
	uint32_t cp_hqd_cntl_stack_size;
	uint32_t cp_hqd_wg_state_offset;
	uint32_t cp_hqd_ctx_save_size;
	uint32_t cp_hqd_gds_resource_state;
	uint32_t cp_hqd_error;
	uint32_t cp_hqd_eop_wptr_mem;
	uint32_t cp_hqd_aql_control;
	uint32_t cp_hqd_pq_wptr_lo;
	uint32_t cp_hqd_pq_wptr_hi;
	uint32_t reserved_184;
	uint32_t reserved_185;
	uint32_t reserved_186;
	uint32_t reserved_187;
	uint32_t reserved_188;
	uint32_t reserved_189;
	uint32_t reserved_190;
	uint32_t reserved_191;
	uint32_t iqtimer_pkt_header;
	uint32_t iqtimer_pkt_dw0;
	uint32_t iqtimer_pkt_dw1;
	uint32_t iqtimer_pkt_dw2;
	uint32_t iqtimer_pkt_dw3;
	uint32_t iqtimer_pkt_dw4;
	uint32_t iqtimer_pkt_dw5;
	uint32_t iqtimer_pkt_dw6;
	uint32_t iqtimer_pkt_dw7;
	uint32_t iqtimer_pkt_dw8;
	uint32_t iqtimer_pkt_dw9;
	uint32_t iqtimer_pkt_dw10;
	uint32_t iqtimer_pkt_dw11;
	uint32_t iqtimer_pkt_dw12;
	uint32_t iqtimer_pkt_dw13;
	uint32_t iqtimer_pkt_dw14;
	uint32_t iqtimer_pkt_dw15;
	uint32_t iqtimer_pkt_dw16;
	uint32_t iqtimer_pkt_dw17;
	uint32_t iqtimer_pkt_dw18;
	uint32_t iqtimer_pkt_dw19;
	uint32_t iqtimer_pkt_dw20;
	uint32_t iqtimer_pkt_dw21;
	uint32_t iqtimer_pkt_dw22;
	uint32_t iqtimer_pkt_dw23;
	uint32_t iqtimer_pkt_dw24;
	uint32_t iqtimer_pkt_dw25;
	uint32_t iqtimer_pkt_dw26;
	uint32_t iqtimer_pkt_dw27;
	uint32_t iqtimer_pkt_dw28;
	uint32_t iqtimer_pkt_dw29;
	uint32_t iqtimer_pkt_dw30;
	uint32_t iqtimer_pkt_dw31;
	uint32_t reserved_225;
	uint32_t reserved_226;
	uint32_t reserved_227;
	uint32_t set_resources_header;
	uint32_t set_resources_dw1;
	uint32_t set_resources_dw2;
	uint32_t set_resources_dw3;
	uint32_t set_resources_dw4;
	uint32_t set_resources_dw5;
	uint32_t set_resources_dw6;
	uint32_t set_resources_dw7;
	uint32_t reserved_236;
	uint32_t reserved_237;
	uint32_t reserved_238;
	uint32_t reserved_239;
	uint32_t queue_doorbell_id0;
	uint32_t queue_doorbell_id1;
	uint32_t queue_doorbell_id2;
	uint32_t queue_doorbell_id3;
	uint32_t queue_doorbell_id4;
	uint32_t queue_doorbell_id5;
	uint32_t queue_doorbell_id6;
	uint32_t queue_doorbell_id7;
	uint32_t queue_doorbell_id8;
	uint32_t queue_doorbell_id9;
	uint32_t queue_doorbell_id10;
	uint32_t queue_doorbell_id11;
	uint32_t queue_doorbell_id12;
	uint32_t queue_doorbell_id13;
	uint32_t queue_doorbell_id14;
	uint32_t queue_doorbell_id15;
	uint32_t reserved_256;
	uint32_t reserved_257;
	uint32_t reserved_258;
	uint32_t reserved_259;
	uint32_t reserved_260;
	uint32_t reserved_261;
	uint32_t reserved_262;
	uint32_t reserved_263;
	uint32_t reserved_264;
	uint32_t reserved_265;
	uint32_t reserved_266;
	uint32_t reserved_267;
	uint32_t reserved_268;
	uint32_t reserved_269;
	uint32_t reserved_270;
	uint32_t reserved_271;
	uint32_t reserved_272;
	uint32_t reserved_273;
	uint32_t reserved_274;
	uint32_t reserved_275;
	uint32_t reserved_276;
	uint32_t reserved_277;
	uint32_t reserved_278;
	uint32_t reserved_279;
	uint32_t reserved_280;
	uint32_t reserved_281;
	uint32_t reserved_282;
	uint32_t reserved_283;
	uint32_t reserved_284;
	uint32_t reserved_285;
	uint32_t reserved_286;
	uint32_t reserved_287;
	uint32_t reserved_288;
	uint32_t reserved_289;
	uint32_t reserved_290;
	uint32_t reserved_291;
	uint32_t reserved_292;
	uint32_t reserved_293;
	uint32_t reserved_294;
	uint32_t reserved_295;
	uint32_t reserved_296;
	uint32_t reserved_297;
	uint32_t reserved_298;
	uint32_t reserved_299;
	uint32_t reserved_300;
	uint32_t reserved_301;
	uint32_t reserved_302;
	uint32_t reserved_303;
	uint32_t reserved_304;
	uint32_t reserved_305;
	uint32_t reserved_306;
	uint32_t reserved_307;
	uint32_t reserved_308;
	uint32_t reserved_309;
	uint32_t reserved_310;
	uint32_t reserved_311;
	uint32_t reserved_312;
	uint32_t reserved_313;
	uint32_t reserved_314;
	uint32_t reserved_315;
	uint32_t reserved_316;
	uint32_t reserved_317;
	uint32_t reserved_318;
	uint32_t reserved_319;
	uint32_t reserved_320;
	uint32_t reserved_321;
	uint32_t reserved_322;
	uint32_t reserved_323;
	uint32_t reserved_324;
	uint32_t reserved_325;
	uint32_t reserved_326;
	uint32_t reserved_327;
	uint32_t reserved_328;
	uint32_t reserved_329;
	uint32_t reserved_330;
	uint32_t reserved_331;
	uint32_t reserved_332;
	uint32_t reserved_333;
	uint32_t reserved_334;
	uint32_t reserved_335;
	uint32_t reserved_336;
	uint32_t reserved_337;
	uint32_t reserved_338;
	uint32_t reserved_339;
	uint32_t reserved_340;
	uint32_t reserved_341;
	uint32_t reserved_342;
	uint32_t reserved_343;
	uint32_t reserved_344;
	uint32_t reserved_345;
	uint32_t reserved_346;
	uint32_t reserved_347;
	uint32_t reserved_348;
	uint32_t reserved_349;
	uint32_t reserved_350;
	uint32_t reserved_351;
	uint32_t reserved_352;
	uint32_t reserved_353;
	uint32_t reserved_354;
	uint32_t reserved_355;
	uint32_t reserved_356;
	uint32_t reserved_357;
	uint32_t reserved_358;
	uint32_t reserved_359;
	uint32_t reserved_360;
	uint32_t reserved_361;
	uint32_t reserved_362;
	uint32_t reserved_363;
	uint32_t reserved_364;
	uint32_t reserved_365;
	uint32_t reserved_366;
	uint32_t reserved_367;
	uint32_t reserved_368;
	uint32_t reserved_369;
	uint32_t reserved_370;
	uint32_t reserved_371;
	uint32_t reserved_372;
	uint32_t reserved_373;
	uint32_t reserved_374;
	uint32_t reserved_375;
	uint32_t reserved_376;
	uint32_t reserved_377;
	uint32_t reserved_378;
	uint32_t reserved_379;
	uint32_t reserved_380;
	uint32_t reserved_381;
	uint32_t reserved_382;
	uint32_t reserved_383;
	uint32_t reserved_384;
	uint32_t reserved_385;
	uint32_t reserved_386;
	uint32_t reserved_387;
	uint32_t reserved_388;
	uint32_t reserved_389;
	uint32_t reserved_390;
	uint32_t reserved_391;
	uint32_t reserved_392;
	uint32_t reserved_393;
	uint32_t reserved_394;
	uint32_t reserved_395;
	uint32_t reserved_396;
	uint32_t reserved_397;
	uint32_t reserved_398;
	uint32_t reserved_399;
	uint32_t reserved_400;
	uint32_t reserved_401;
	uint32_t reserved_402;
	uint32_t reserved_403;
	uint32_t reserved_404;
	uint32_t reserved_405;
	uint32_t reserved_406;
	uint32_t reserved_407;
	uint32_t reserved_408;
	uint32_t reserved_409;
	uint32_t reserved_410;
	uint32_t reserved_411;
	uint32_t reserved_412;
	uint32_t reserved_413;
	uint32_t reserved_414;
	uint32_t reserved_415;
	uint32_t reserved_416;
	uint32_t reserved_417;
	uint32_t reserved_418;
	uint32_t reserved_419;
	uint32_t reserved_420;
	uint32_t reserved_421;
	uint32_t reserved_422;
	uint32_t reserved_423;
	uint32_t reserved_424;
	uint32_t reserved_425;
	uint32_t reserved_426;
	uint32_t reserved_427;
	uint32_t reserved_428;
	uint32_t reserved_429;
	uint32_t reserved_430;
	uint32_t reserved_431;
	uint32_t reserved_432;
	uint32_t reserved_433;
	uint32_t reserved_434;
	uint32_t reserved_435;
	uint32_t reserved_436;
	uint32_t reserved_437;
	uint32_t reserved_438;
	uint32_t reserved_439;
	uint32_t reserved_440;
	uint32_t reserved_441;
	uint32_t reserved_442;
	uint32_t reserved_443;
	uint32_t reserved_444;
	uint32_t reserved_445;
	uint32_t reserved_446;
	uint32_t reserved_447;
	uint32_t reserved_448;
	uint32_t reserved_449;
	uint32_t reserved_450;
	uint32_t reserved_451;
	uint32_t reserved_452;
	uint32_t reserved_453;
	uint32_t reserved_454;
	uint32_t reserved_455;
	uint32_t reserved_456;
	uint32_t reserved_457;
	uint32_t reserved_458;
	uint32_t reserved_459;
	uint32_t reserved_460;
	uint32_t reserved_461;
	uint32_t reserved_462;
	uint32_t reserved_463;
	uint32_t reserved_464;
	uint32_t reserved_465;
	uint32_t reserved_466;
	uint32_t reserved_467;
	uint32_t reserved_468;
	uint32_t reserved_469;
	uint32_t reserved_470;
	uint32_t reserved_471;
	uint32_t reserved_472;
	uint32_t reserved_473;
	uint32_t reserved_474;
	uint32_t reserved_475;
	uint32_t reserved_476;
	uint32_t reserved_477;
	uint32_t reserved_478;
	uint32_t reserved_479;
	uint32_t reserved_480;
	uint32_t reserved_481;
	uint32_t reserved_482;
	uint32_t reserved_483;
	uint32_t reserved_484;
	uint32_t reserved_485;
	uint32_t reserved_486;
	uint32_t reserved_487;
	uint32_t reserved_488;
	uint32_t reserved_489;
	uint32_t reserved_490;
	uint32_t reserved_491;
	uint32_t reserved_492;
	uint32_t reserved_493;
	uint32_t reserved_494;
	uint32_t reserved_495;
	uint32_t reserved_496;
	uint32_t reserved_497;
	uint32_t reserved_498;
	uint32_t reserved_499;
	uint32_t reserved_500;
	uint32_t reserved_501;
	uint32_t reserved_502;
	uint32_t reserved_503;
	uint32_t reserved_504;
	uint32_t reserved_505;
	uint32_t reserved_506;
	uint32_t reserved_507;
	uint32_t reserved_508;
	uint32_t reserved_509;
	uint32_t reserved_510;
	uint32_t reserved_511;
};

struct v9_mqd_allocation {
	struct v9_mqd mqd;
	uint32_t wptr_poll_mem;
	uint32_t rptr_report_mem;
	uint32_t dynamic_cu_mask;
	uint32_t dynamic_rb_mask;
};

/* from vega10 all CSA format is shifted to chain ib compatible mode */
struct v9_ce_ib_state {
    /* section of non chained ib part */
    uint32_t ce_ib_completion_status;
    uint32_t ce_constegnine_count;
    uint32_t ce_ibOffset_ib1;
    uint32_t ce_ibOffset_ib2;

    /* section of chained ib */
    uint32_t ce_chainib_addrlo_ib1;
    uint32_t ce_chainib_addrlo_ib2;
    uint32_t ce_chainib_addrhi_ib1;
    uint32_t ce_chainib_addrhi_ib2;
    uint32_t ce_chainib_size_ib1;
    uint32_t ce_chainib_size_ib2;
}; /* total 10 DWORD */

struct v9_de_ib_state {
    /* section of non chained ib part */
    uint32_t ib_completion_status;
    uint32_t de_constEngine_count;
    uint32_t ib_offset_ib1;
    uint32_t ib_offset_ib2;

    /* section of chained ib */
    uint32_t chain_ib_addrlo_ib1;
    uint32_t chain_ib_addrlo_ib2;
    uint32_t chain_ib_addrhi_ib1;
    uint32_t chain_ib_addrhi_ib2;
    uint32_t chain_ib_size_ib1;
    uint32_t chain_ib_size_ib2;

    /* section of non chained ib part */
    uint32_t preamble_begin_ib1;
    uint32_t preamble_begin_ib2;
    uint32_t preamble_end_ib1;
    uint32_t preamble_end_ib2;

    /* section of chained ib */
    uint32_t chain_ib_pream_addrlo_ib1;
    uint32_t chain_ib_pream_addrlo_ib2;
    uint32_t chain_ib_pream_addrhi_ib1;
    uint32_t chain_ib_pream_addrhi_ib2;

    /* section of non chained ib part */
    uint32_t draw_indirect_baseLo;
    uint32_t draw_indirect_baseHi;
    uint32_t disp_indirect_baseLo;
    uint32_t disp_indirect_baseHi;
    uint32_t gds_backup_addrlo;
    uint32_t gds_backup_addrhi;
    uint32_t index_base_addrlo;
    uint32_t index_base_addrhi;
    uint32_t sample_cntl;
}; /* Total of 27 DWORD */

struct v9_gfx_meta_data {
    /* 10 DWORD, address must be 4KB aligned */
    struct v9_ce_ib_state ce_payload;
    uint32_t reserved1[54];
    /* 27 DWORD, address must be 64B aligned */
    struct v9_de_ib_state de_payload;
    /* PFP IB base address which get pre-empted */
    uint32_t DeIbBaseAddrLo;
    uint32_t DeIbBaseAddrHi;
    uint32_t reserved2[931];
}; /* Total of 4K Bytes */

#endif /* V9_STRUCTS_H_ */
/*
 * Copyright 2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef V11_STRUCTS_H_
#define V11_STRUCTS_H_

struct v11_gfx_mqd {
	uint32_t reserved_0; // offset: 0  (0x0)
	uint32_t reserved_1; // offset: 1  (0x1)
	uint32_t reserved_2; // offset: 2  (0x2)
	uint32_t reserved_3; // offset: 3  (0x3)
	uint32_t reserved_4; // offset: 4  (0x4)
	uint32_t reserved_5; // offset: 5  (0x5)
	uint32_t reserved_6; // offset: 6  (0x6)
	uint32_t reserved_7; // offset: 7  (0x7)
	uint32_t reserved_8; // offset: 8  (0x8)
	uint32_t reserved_9; // offset: 9  (0x9)
	uint32_t reserved_10; // offset: 10  (0xA)
	uint32_t reserved_11; // offset: 11  (0xB)
	uint32_t reserved_12; // offset: 12  (0xC)
	uint32_t reserved_13; // offset: 13  (0xD)
	uint32_t reserved_14; // offset: 14  (0xE)
	uint32_t reserved_15; // offset: 15  (0xF)
	uint32_t reserved_16; // offset: 16  (0x10)
	uint32_t reserved_17; // offset: 17  (0x11)
	uint32_t reserved_18; // offset: 18  (0x12)
	uint32_t reserved_19; // offset: 19  (0x13)
	uint32_t reserved_20; // offset: 20  (0x14)
	uint32_t reserved_21; // offset: 21  (0x15)
	uint32_t reserved_22; // offset: 22  (0x16)
	uint32_t reserved_23; // offset: 23  (0x17)
	uint32_t reserved_24; // offset: 24  (0x18)
	uint32_t reserved_25; // offset: 25  (0x19)
	uint32_t reserved_26; // offset: 26  (0x1A)
	uint32_t reserved_27; // offset: 27  (0x1B)
	uint32_t reserved_28; // offset: 28  (0x1C)
	uint32_t reserved_29; // offset: 29  (0x1D)
	uint32_t reserved_30; // offset: 30  (0x1E)
	uint32_t reserved_31; // offset: 31  (0x1F)
	uint32_t reserved_32; // offset: 32  (0x20)
	uint32_t reserved_33; // offset: 33  (0x21)
	uint32_t reserved_34; // offset: 34  (0x22)
	uint32_t reserved_35; // offset: 35  (0x23)
	uint32_t reserved_36; // offset: 36  (0x24)
	uint32_t reserved_37; // offset: 37  (0x25)
	uint32_t reserved_38; // offset: 38  (0x26)
	uint32_t reserved_39; // offset: 39  (0x27)
	uint32_t reserved_40; // offset: 40  (0x28)
	uint32_t reserved_41; // offset: 41  (0x29)
	uint32_t reserved_42; // offset: 42  (0x2A)
	uint32_t reserved_43; // offset: 43  (0x2B)
	uint32_t reserved_44; // offset: 44  (0x2C)
	uint32_t reserved_45; // offset: 45  (0x2D)
	uint32_t reserved_46; // offset: 46  (0x2E)
	uint32_t reserved_47; // offset: 47  (0x2F)
	uint32_t reserved_48; // offset: 48  (0x30)
	uint32_t reserved_49; // offset: 49  (0x31)
	uint32_t reserved_50; // offset: 50  (0x32)
	uint32_t reserved_51; // offset: 51  (0x33)
	uint32_t reserved_52; // offset: 52  (0x34)
	uint32_t reserved_53; // offset: 53  (0x35)
	uint32_t reserved_54; // offset: 54  (0x36)
	uint32_t reserved_55; // offset: 55  (0x37)
	uint32_t reserved_56; // offset: 56  (0x38)
	uint32_t reserved_57; // offset: 57  (0x39)
	uint32_t reserved_58; // offset: 58  (0x3A)
	uint32_t reserved_59; // offset: 59  (0x3B)
	uint32_t reserved_60; // offset: 60  (0x3C)
	uint32_t reserved_61; // offset: 61  (0x3D)
	uint32_t reserved_62; // offset: 62  (0x3E)
	uint32_t reserved_63; // offset: 63  (0x3F)
	uint32_t reserved_64; // offset: 64  (0x40)
	uint32_t reserved_65; // offset: 65  (0x41)
	uint32_t reserved_66; // offset: 66  (0x42)
	uint32_t reserved_67; // offset: 67  (0x43)
	uint32_t reserved_68; // offset: 68  (0x44)
	uint32_t reserved_69; // offset: 69  (0x45)
	uint32_t reserved_70; // offset: 70  (0x46)
	uint32_t reserved_71; // offset: 71  (0x47)
	uint32_t reserved_72; // offset: 72  (0x48)
	uint32_t reserved_73; // offset: 73  (0x49)
	uint32_t reserved_74; // offset: 74  (0x4A)
	uint32_t reserved_75; // offset: 75  (0x4B)
	uint32_t reserved_76; // offset: 76  (0x4C)
	uint32_t reserved_77; // offset: 77  (0x4D)
	uint32_t reserved_78; // offset: 78  (0x4E)
	uint32_t reserved_79; // offset: 79  (0x4F)
	uint32_t reserved_80; // offset: 80  (0x50)
	uint32_t reserved_81; // offset: 81  (0x51)
	uint32_t reserved_82; // offset: 82  (0x52)
	uint32_t reserved_83; // offset: 83  (0x53)
	uint32_t checksum_lo; // offset: 84  (0x54)
	uint32_t checksum_hi; // offset: 85  (0x55)
	uint32_t cp_mqd_query_time_lo; // offset: 86  (0x56)
	uint32_t cp_mqd_query_time_hi; // offset: 87  (0x57)
	uint32_t reserved_88; // offset: 88  (0x58)
	uint32_t reserved_89; // offset: 89  (0x59)
	uint32_t reserved_90; // offset: 90  (0x5A)
	uint32_t reserved_91; // offset: 91  (0x5B)
	uint32_t cp_mqd_query_wave_count; // offset: 92  (0x5C)
	uint32_t cp_mqd_query_gfx_hqd_rptr; // offset: 93  (0x5D)
	uint32_t cp_mqd_query_gfx_hqd_wptr; // offset: 94  (0x5E)
	uint32_t cp_mqd_query_gfx_hqd_offset; // offset: 95  (0x5F)
	uint32_t reserved_96; // offset: 96  (0x60)
	uint32_t reserved_97; // offset: 97  (0x61)
	uint32_t reserved_98; // offset: 98  (0x62)
	uint32_t reserved_99; // offset: 99  (0x63)
	uint32_t reserved_100; // offset: 100  (0x64)
	uint32_t reserved_101; // offset: 101  (0x65)
	uint32_t reserved_102; // offset: 102  (0x66)
	uint32_t reserved_103; // offset: 103  (0x67)
	uint32_t control_buf_addr_lo; // offset: 104  (0x68)
	uint32_t control_buf_addr_hi; // offset: 105  (0x69)
	uint32_t disable_queue; // offset: 106  (0x6A)
	uint32_t reserved_107; // offset: 107  (0x6B)
	uint32_t reserved_108; // offset: 108  (0x6C)
	uint32_t reserved_109; // offset: 109  (0x6D)
	uint32_t reserved_110; // offset: 110  (0x6E)
	uint32_t reserved_111; // offset: 111  (0x6F)
	uint32_t reserved_112; // offset: 112  (0x70)
	uint32_t reserved_113; // offset: 113  (0x71)
	uint32_t reserved_114; // offset: 114  (0x72)
	uint32_t reserved_115; // offset: 115  (0x73)
	uint32_t reserved_116; // offset: 116  (0x74)
	uint32_t reserved_117; // offset: 117  (0x75)
	uint32_t reserved_118; // offset: 118  (0x76)
	uint32_t reserved_119; // offset: 119  (0x77)
	uint32_t reserved_120; // offset: 120  (0x78)
	uint32_t reserved_121; // offset: 121  (0x79)
	uint32_t reserved_122; // offset: 122  (0x7A)
	uint32_t reserved_123; // offset: 123  (0x7B)
	uint32_t reserved_124; // offset: 124  (0x7C)
	uint32_t reserved_125; // offset: 125  (0x7D)
	uint32_t reserved_126; // offset: 126  (0x7E)
	uint32_t reserved_127; // offset: 127  (0x7F)
	uint32_t cp_mqd_base_addr; // offset: 128  (0x80)
	uint32_t cp_mqd_base_addr_hi; // offset: 129  (0x81)
	uint32_t cp_gfx_hqd_active; // offset: 130  (0x82)
	uint32_t cp_gfx_hqd_vmid; // offset: 131  (0x83)
	uint32_t reserved_131; // offset: 132  (0x84)
	uint32_t reserved_132; // offset: 133  (0x85)
	uint32_t cp_gfx_hqd_queue_priority; // offset: 134  (0x86)
	uint32_t cp_gfx_hqd_quantum; // offset: 135  (0x87)
	uint32_t cp_gfx_hqd_base; // offset: 136  (0x88)
	uint32_t cp_gfx_hqd_base_hi; // offset: 137  (0x89)
	uint32_t cp_gfx_hqd_rptr; // offset: 138  (0x8A)
	uint32_t cp_gfx_hqd_rptr_addr; // offset: 139  (0x8B)
	uint32_t cp_gfx_hqd_rptr_addr_hi; // offset: 140  (0x8C)
	uint32_t cp_rb_wptr_poll_addr_lo; // offset: 141  (0x8D)
	uint32_t cp_rb_wptr_poll_addr_hi; // offset: 142  (0x8E)
	uint32_t cp_rb_doorbell_control; // offset: 143  (0x8F)
	uint32_t cp_gfx_hqd_offset; // offset: 144  (0x90)
	uint32_t cp_gfx_hqd_cntl; // offset: 145  (0x91)
	uint32_t reserved_146; // offset: 146  (0x92)
	uint32_t reserved_147; // offset: 147  (0x93)
	uint32_t cp_gfx_hqd_csmd_rptr; // offset: 148  (0x94)
	uint32_t cp_gfx_hqd_wptr; // offset: 149  (0x95)
	uint32_t cp_gfx_hqd_wptr_hi; // offset: 150  (0x96)
	uint32_t reserved_151; // offset: 151  (0x97)
	uint32_t reserved_152; // offset: 152  (0x98)
	uint32_t reserved_153; // offset: 153  (0x99)
	uint32_t reserved_154; // offset: 154  (0x9A)
	uint32_t reserved_155; // offset: 155  (0x9B)
	uint32_t cp_gfx_hqd_mapped; // offset: 156  (0x9C)
	uint32_t cp_gfx_hqd_que_mgr_control; // offset: 157  (0x9D)
	uint32_t reserved_158; // offset: 158  (0x9E)
	uint32_t reserved_159; // offset: 159  (0x9F)
	uint32_t cp_gfx_hqd_hq_status0; // offset: 160  (0xA0)
	uint32_t cp_gfx_hqd_hq_control0; // offset: 161  (0xA1)
	uint32_t cp_gfx_mqd_control; // offset: 162  (0xA2)
	uint32_t reserved_163; // offset: 163  (0xA3)
	uint32_t reserved_164; // offset: 164  (0xA4)
	uint32_t reserved_165; // offset: 165  (0xA5)
	uint32_t reserved_166; // offset: 166  (0xA6)
	uint32_t reserved_167; // offset: 167  (0xA7)
	uint32_t reserved_168; // offset: 168  (0xA8)
	uint32_t reserved_169; // offset: 169  (0xA9)
	uint32_t cp_num_prim_needed_count0_lo; // offset: 170  (0xAA)
	uint32_t cp_num_prim_needed_count0_hi; // offset: 171  (0xAB)
	uint32_t cp_num_prim_needed_count1_lo; // offset: 172  (0xAC)
	uint32_t cp_num_prim_needed_count1_hi; // offset: 173  (0xAD)
	uint32_t cp_num_prim_needed_count2_lo; // offset: 174  (0xAE)
	uint32_t cp_num_prim_needed_count2_hi; // offset: 175  (0xAF)
	uint32_t cp_num_prim_needed_count3_lo; // offset: 176  (0xB0)
	uint32_t cp_num_prim_needed_count3_hi; // offset: 177  (0xB1)
	uint32_t cp_num_prim_written_count0_lo; // offset: 178  (0xB2)
	uint32_t cp_num_prim_written_count0_hi; // offset: 179  (0xB3)
	uint32_t cp_num_prim_written_count1_lo; // offset: 180  (0xB4)
	uint32_t cp_num_prim_written_count1_hi; // offset: 181  (0xB5)
	uint32_t cp_num_prim_written_count2_lo; // offset: 182  (0xB6)
	uint32_t cp_num_prim_written_count2_hi; // offset: 183  (0xB7)
	uint32_t cp_num_prim_written_count3_lo; // offset: 184  (0xB8)
	uint32_t cp_num_prim_written_count3_hi; // offset: 185  (0xB9)
	uint32_t reserved_186; // offset: 186  (0xBA)
	uint32_t reserved_187; // offset: 187  (0xBB)
	uint32_t reserved_188; // offset: 188  (0xBC)
	uint32_t reserved_189; // offset: 189  (0xBD)
	uint32_t mp1_smn_fps_cnt; // offset: 190  (0xBE)
	uint32_t sq_thread_trace_buf0_base; // offset: 191  (0xBF)
	uint32_t sq_thread_trace_buf0_size; // offset: 192  (0xC0)
	uint32_t sq_thread_trace_buf1_base; // offset: 193  (0xC1)
	uint32_t sq_thread_trace_buf1_size; // offset: 194  (0xC2)
	uint32_t sq_thread_trace_wptr; // offset: 195  (0xC3)
	uint32_t sq_thread_trace_mask; // offset: 196  (0xC4)
	uint32_t sq_thread_trace_token_mask; // offset: 197  (0xC5)
	uint32_t sq_thread_trace_ctrl; // offset: 198  (0xC6)
	uint32_t sq_thread_trace_status; // offset: 199  (0xC7)
	uint32_t sq_thread_trace_dropped_cntr; // offset: 200  (0xC8)
	uint32_t sq_thread_trace_finish_done_debug; // offset: 201  (0xC9)
	uint32_t sq_thread_trace_gfx_draw_cntr; // offset: 202  (0xCA)
	uint32_t sq_thread_trace_gfx_marker_cntr; // offset: 203  (0xCB)
	uint32_t sq_thread_trace_hp3d_draw_cntr; // offset: 204  (0xCC)
	uint32_t sq_thread_trace_hp3d_marker_cntr; // offset: 205  (0xCD)
	uint32_t reserved_206; // offset: 206  (0xCE)
	uint32_t reserved_207; // offset: 207  (0xCF)
	uint32_t cp_sc_psinvoc_count0_lo; // offset: 208  (0xD0)
	uint32_t cp_sc_psinvoc_count0_hi; // offset: 209  (0xD1)
	uint32_t cp_pa_cprim_count_lo; // offset: 210  (0xD2)
	uint32_t cp_pa_cprim_count_hi; // offset: 211  (0xD3)
	uint32_t cp_pa_cinvoc_count_lo; // offset: 212  (0xD4)
	uint32_t cp_pa_cinvoc_count_hi; // offset: 213  (0xD5)
	uint32_t cp_vgt_vsinvoc_count_lo; // offset: 214  (0xD6)
	uint32_t cp_vgt_vsinvoc_count_hi; // offset: 215  (0xD7)
	uint32_t cp_vgt_gsinvoc_count_lo; // offset: 216  (0xD8)
	uint32_t cp_vgt_gsinvoc_count_hi; // offset: 217  (0xD9)
	uint32_t cp_vgt_gsprim_count_lo; // offset: 218  (0xDA)
	uint32_t cp_vgt_gsprim_count_hi; // offset: 219  (0xDB)
	uint32_t cp_vgt_iaprim_count_lo; // offset: 220  (0xDC)
	uint32_t cp_vgt_iaprim_count_hi; // offset: 221  (0xDD)
	uint32_t cp_vgt_iavert_count_lo; // offset: 222  (0xDE)
	uint32_t cp_vgt_iavert_count_hi; // offset: 223  (0xDF)
	uint32_t cp_vgt_hsinvoc_count_lo; // offset: 224  (0xE0)
	uint32_t cp_vgt_hsinvoc_count_hi; // offset: 225  (0xE1)
	uint32_t cp_vgt_dsinvoc_count_lo; // offset: 226  (0xE2)
	uint32_t cp_vgt_dsinvoc_count_hi; // offset: 227  (0xE3)
	uint32_t cp_vgt_csinvoc_count_lo; // offset: 228  (0xE4)
	uint32_t cp_vgt_csinvoc_count_hi; // offset: 229  (0xE5)
	uint32_t reserved_230; // offset: 230  (0xE6)
	uint32_t reserved_231; // offset: 231  (0xE7)
	uint32_t reserved_232; // offset: 232  (0xE8)
	uint32_t reserved_233; // offset: 233  (0xE9)
	uint32_t reserved_234; // offset: 234  (0xEA)
	uint32_t reserved_235; // offset: 235  (0xEB)
	uint32_t reserved_236; // offset: 236  (0xEC)
	uint32_t reserved_237; // offset: 237  (0xED)
	uint32_t reserved_238; // offset: 238  (0xEE)
	uint32_t reserved_239; // offset: 239  (0xEF)
	uint32_t reserved_240; // offset: 240  (0xF0)
	uint32_t reserved_241; // offset: 241  (0xF1)
	uint32_t reserved_242; // offset: 242  (0xF2)
	uint32_t reserved_243; // offset: 243  (0xF3)
	uint32_t reserved_244; // offset: 244  (0xF4)
	uint32_t reserved_245; // offset: 245  (0xF5)
	uint32_t reserved_246; // offset: 246  (0xF6)
	uint32_t reserved_247; // offset: 247  (0xF7)
	uint32_t reserved_248; // offset: 248  (0xF8)
	uint32_t reserved_249; // offset: 249  (0xF9)
	uint32_t reserved_250; // offset: 250  (0xFA)
	uint32_t reserved_251; // offset: 251  (0xFB)
	uint32_t reserved_252; // offset: 252  (0xFC)
	uint32_t reserved_253; // offset: 253  (0xFD)
	uint32_t reserved_254; // offset: 254  (0xFE)
	uint32_t reserved_255; // offset: 255  (0xFF)
	uint32_t reserved_256; // offset: 256  (0x100)
	uint32_t reserved_257; // offset: 257  (0x101)
	uint32_t reserved_258; // offset: 258  (0x102)
	uint32_t reserved_259; // offset: 259  (0x103)
	uint32_t reserved_260; // offset: 260  (0x104)
	uint32_t reserved_261; // offset: 261  (0x105)
	uint32_t reserved_262; // offset: 262  (0x106)
	uint32_t reserved_263; // offset: 263  (0x107)
	uint32_t reserved_264; // offset: 264  (0x108)
	uint32_t reserved_265; // offset: 265  (0x109)
	uint32_t reserved_266; // offset: 266  (0x10A)
	uint32_t reserved_267; // offset: 267  (0x10B)
	uint32_t vgt_strmout_buffer_filled_size_0; // offset: 268  (0x10C)
	uint32_t vgt_strmout_buffer_filled_size_1; // offset: 269  (0x10D)
	uint32_t vgt_strmout_buffer_filled_size_2; // offset: 270  (0x10E)
	uint32_t vgt_strmout_buffer_filled_size_3; // offset: 271  (0x10F)
	uint32_t reserved_272; // offset: 272  (0x110)
	uint32_t reserved_273; // offset: 273  (0x111)
	uint32_t reserved_274; // offset: 274  (0x112)
	uint32_t reserved_275; // offset: 275  (0x113)
	uint32_t vgt_dma_max_size; // offset: 276  (0x114)
	uint32_t vgt_dma_num_instances; // offset: 277  (0x115)
	uint32_t reserved_278; // offset: 278  (0x116)
	uint32_t reserved_279; // offset: 279  (0x117)
	uint32_t reserved_280; // offset: 280  (0x118)
	uint32_t reserved_281; // offset: 281  (0x119)
	uint32_t reserved_282; // offset: 282  (0x11A)
	uint32_t reserved_283; // offset: 283  (0x11B)
	uint32_t reserved_284; // offset: 284  (0x11C)
	uint32_t reserved_285; // offset: 285  (0x11D)
	uint32_t reserved_286; // offset: 286  (0x11E)
	uint32_t reserved_287; // offset: 287  (0x11F)
	uint32_t it_set_base_ib_addr_lo; // offset: 288  (0x120)
	uint32_t it_set_base_ib_addr_hi; // offset: 289  (0x121)
	uint32_t reserved_290; // offset: 290  (0x122)
	uint32_t reserved_291; // offset: 291  (0x123)
	uint32_t reserved_292; // offset: 292  (0x124)
	uint32_t reserved_293; // offset: 293  (0x125)
	uint32_t reserved_294; // offset: 294  (0x126)
	uint32_t reserved_295; // offset: 295  (0x127)
	uint32_t reserved_296; // offset: 296  (0x128)
	uint32_t reserved_297; // offset: 297  (0x129)
	uint32_t reserved_298; // offset: 298  (0x12A)
	uint32_t reserved_299; // offset: 299  (0x12B)
	uint32_t reserved_300; // offset: 300  (0x12C)
	uint32_t reserved_301; // offset: 301  (0x12D)
	uint32_t reserved_302; // offset: 302  (0x12E)
	uint32_t reserved_303; // offset: 303  (0x12F)
	uint32_t reserved_304; // offset: 304  (0x130)
	uint32_t reserved_305; // offset: 305  (0x131)
	uint32_t reserved_306; // offset: 306  (0x132)
	uint32_t reserved_307; // offset: 307  (0x133)
	uint32_t reserved_308; // offset: 308  (0x134)
	uint32_t reserved_309; // offset: 309  (0x135)
	uint32_t reserved_310; // offset: 310  (0x136)
	uint32_t reserved_311; // offset: 311  (0x137)
	uint32_t reserved_312; // offset: 312  (0x138)
	uint32_t reserved_313; // offset: 313  (0x139)
	uint32_t reserved_314; // offset: 314  (0x13A)
	uint32_t reserved_315; // offset: 315  (0x13B)
	uint32_t reserved_316; // offset: 316  (0x13C)
	uint32_t reserved_317; // offset: 317  (0x13D)
	uint32_t reserved_318; // offset: 318  (0x13E)
	uint32_t reserved_319; // offset: 319  (0x13F)
	uint32_t reserved_320; // offset: 320  (0x140)
	uint32_t reserved_321; // offset: 321  (0x141)
	uint32_t reserved_322; // offset: 322  (0x142)
	uint32_t reserved_323; // offset: 323  (0x143)
	uint32_t reserved_324; // offset: 324  (0x144)
	uint32_t reserved_325; // offset: 325  (0x145)
	uint32_t reserved_326; // offset: 326  (0x146)
	uint32_t reserved_327; // offset: 327  (0x147)
	uint32_t reserved_328; // offset: 328  (0x148)
	uint32_t reserved_329; // offset: 329  (0x149)
	uint32_t reserved_330; // offset: 330  (0x14A)
	uint32_t reserved_331; // offset: 331  (0x14B)
	uint32_t reserved_332; // offset: 332  (0x14C)
	uint32_t reserved_333; // offset: 333  (0x14D)
	uint32_t reserved_334; // offset: 334  (0x14E)
	uint32_t reserved_335; // offset: 335  (0x14F)
	uint32_t reserved_336; // offset: 336  (0x150)
	uint32_t reserved_337; // offset: 337  (0x151)
	uint32_t reserved_338; // offset: 338  (0x152)
	uint32_t reserved_339; // offset: 339  (0x153)
	uint32_t reserved_340; // offset: 340  (0x154)
	uint32_t reserved_341; // offset: 341  (0x155)
	uint32_t reserved_342; // offset: 342  (0x156)
	uint32_t reserved_343; // offset: 343  (0x157)
	uint32_t reserved_344; // offset: 344  (0x158)
	uint32_t reserved_345; // offset: 345  (0x159)
	uint32_t reserved_346; // offset: 346  (0x15A)
	uint32_t reserved_347; // offset: 347  (0x15B)
	uint32_t reserved_348; // offset: 348  (0x15C)
	uint32_t reserved_349; // offset: 349  (0x15D)
	uint32_t reserved_350; // offset: 350  (0x15E)
	uint32_t reserved_351; // offset: 351  (0x15F)
	uint32_t reserved_352; // offset: 352  (0x160)
	uint32_t reserved_353; // offset: 353  (0x161)
	uint32_t reserved_354; // offset: 354  (0x162)
	uint32_t reserved_355; // offset: 355  (0x163)
	uint32_t spi_shader_pgm_rsrc3_ps; // offset: 356  (0x164)
	uint32_t spi_shader_pgm_rsrc3_vs; // offset: 357  (0x165)
	uint32_t spi_shader_pgm_rsrc3_gs; // offset: 358  (0x166)
	uint32_t spi_shader_pgm_rsrc3_hs; // offset: 359  (0x167)
	uint32_t spi_shader_pgm_rsrc4_ps; // offset: 360  (0x168)
	uint32_t spi_shader_pgm_rsrc4_vs; // offset: 361  (0x169)
	uint32_t spi_shader_pgm_rsrc4_gs; // offset: 362  (0x16A)
	uint32_t spi_shader_pgm_rsrc4_hs; // offset: 363  (0x16B)
	uint32_t db_occlusion_count0_low_00; // offset: 364  (0x16C)
	uint32_t db_occlusion_count0_hi_00; // offset: 365  (0x16D)
	uint32_t db_occlusion_count1_low_00; // offset: 366  (0x16E)
	uint32_t db_occlusion_count1_hi_00; // offset: 367  (0x16F)
	uint32_t db_occlusion_count2_low_00; // offset: 368  (0x170)
	uint32_t db_occlusion_count2_hi_00; // offset: 369  (0x171)
	uint32_t db_occlusion_count3_low_00; // offset: 370  (0x172)
	uint32_t db_occlusion_count3_hi_00; // offset: 371  (0x173)
	uint32_t db_occlusion_count0_low_01; // offset: 372  (0x174)
	uint32_t db_occlusion_count0_hi_01; // offset: 373  (0x175)
	uint32_t db_occlusion_count1_low_01; // offset: 374  (0x176)
	uint32_t db_occlusion_count1_hi_01; // offset: 375  (0x177)
	uint32_t db_occlusion_count2_low_01; // offset: 376  (0x178)
	uint32_t db_occlusion_count2_hi_01; // offset: 377  (0x179)
	uint32_t db_occlusion_count3_low_01; // offset: 378  (0x17A)
	uint32_t db_occlusion_count3_hi_01; // offset: 379  (0x17B)
	uint32_t db_occlusion_count0_low_02; // offset: 380  (0x17C)
	uint32_t db_occlusion_count0_hi_02; // offset: 381  (0x17D)
	uint32_t db_occlusion_count1_low_02; // offset: 382  (0x17E)
	uint32_t db_occlusion_count1_hi_02; // offset: 383  (0x17F)
	uint32_t db_occlusion_count2_low_02; // offset: 384  (0x180)
	uint32_t db_occlusion_count2_hi_02; // offset: 385  (0x181)
	uint32_t db_occlusion_count3_low_02; // offset: 386  (0x182)
	uint32_t db_occlusion_count3_hi_02; // offset: 387  (0x183)
	uint32_t db_occlusion_count0_low_03; // offset: 388  (0x184)
	uint32_t db_occlusion_count0_hi_03; // offset: 389  (0x185)
	uint32_t db_occlusion_count1_low_03; // offset: 390  (0x186)
	uint32_t db_occlusion_count1_hi_03; // offset: 391  (0x187)
	uint32_t db_occlusion_count2_low_03; // offset: 392  (0x188)
	uint32_t db_occlusion_count2_hi_03; // offset: 393  (0x189)
	uint32_t db_occlusion_count3_low_03; // offset: 394  (0x18A)
	uint32_t db_occlusion_count3_hi_03; // offset: 395  (0x18B)
	uint32_t db_occlusion_count0_low_04; // offset: 396  (0x18C)
	uint32_t db_occlusion_count0_hi_04; // offset: 397  (0x18D)
	uint32_t db_occlusion_count1_low_04; // offset: 398  (0x18E)
	uint32_t db_occlusion_count1_hi_04; // offset: 399  (0x18F)
	uint32_t db_occlusion_count2_low_04; // offset: 400  (0x190)
	uint32_t db_occlusion_count2_hi_04; // offset: 401  (0x191)
	uint32_t db_occlusion_count3_low_04; // offset: 402  (0x192)
	uint32_t db_occlusion_count3_hi_04; // offset: 403  (0x193)
	uint32_t db_occlusion_count0_low_05; // offset: 404  (0x194)
	uint32_t db_occlusion_count0_hi_05; // offset: 405  (0x195)
	uint32_t db_occlusion_count1_low_05; // offset: 406  (0x196)
	uint32_t db_occlusion_count1_hi_05; // offset: 407  (0x197)
	uint32_t db_occlusion_count2_low_05; // offset: 408  (0x198)
	uint32_t db_occlusion_count2_hi_05; // offset: 409  (0x199)
	uint32_t db_occlusion_count3_low_05; // offset: 410  (0x19A)
	uint32_t db_occlusion_count3_hi_05; // offset: 411  (0x19B)
	uint32_t db_occlusion_count0_low_06; // offset: 412  (0x19C)
	uint32_t db_occlusion_count0_hi_06; // offset: 413  (0x19D)
	uint32_t db_occlusion_count1_low_06; // offset: 414  (0x19E)
	uint32_t db_occlusion_count1_hi_06; // offset: 415  (0x19F)
	uint32_t db_occlusion_count2_low_06; // offset: 416  (0x1A0)
	uint32_t db_occlusion_count2_hi_06; // offset: 417  (0x1A1)
	uint32_t db_occlusion_count3_low_06; // offset: 418  (0x1A2)
	uint32_t db_occlusion_count3_hi_06; // offset: 419  (0x1A3)
	uint32_t db_occlusion_count0_low_07; // offset: 420  (0x1A4)
	uint32_t db_occlusion_count0_hi_07; // offset: 421  (0x1A5)
	uint32_t db_occlusion_count1_low_07; // offset: 422  (0x1A6)
	uint32_t db_occlusion_count1_hi_07; // offset: 423  (0x1A7)
	uint32_t db_occlusion_count2_low_07; // offset: 424  (0x1A8)
	uint32_t db_occlusion_count2_hi_07; // offset: 425  (0x1A9)
	uint32_t db_occlusion_count3_low_07; // offset: 426  (0x1AA)
	uint32_t db_occlusion_count3_hi_07; // offset: 427  (0x1AB)
	uint32_t db_occlusion_count0_low_10; // offset: 428  (0x1AC)
	uint32_t db_occlusion_count0_hi_10; // offset: 429  (0x1AD)
	uint32_t db_occlusion_count1_low_10; // offset: 430  (0x1AE)
	uint32_t db_occlusion_count1_hi_10; // offset: 431  (0x1AF)
	uint32_t db_occlusion_count2_low_10; // offset: 432  (0x1B0)
	uint32_t db_occlusion_count2_hi_10; // offset: 433  (0x1B1)
	uint32_t db_occlusion_count3_low_10; // offset: 434  (0x1B2)
	uint32_t db_occlusion_count3_hi_10; // offset: 435  (0x1B3)
	uint32_t db_occlusion_count0_low_11; // offset: 436  (0x1B4)
	uint32_t db_occlusion_count0_hi_11; // offset: 437  (0x1B5)
	uint32_t db_occlusion_count1_low_11; // offset: 438  (0x1B6)
	uint32_t db_occlusion_count1_hi_11; // offset: 439  (0x1B7)
	uint32_t db_occlusion_count2_low_11; // offset: 440  (0x1B8)
	uint32_t db_occlusion_count2_hi_11; // offset: 441  (0x1B9)
	uint32_t db_occlusion_count3_low_11; // offset: 442  (0x1BA)
	uint32_t db_occlusion_count3_hi_11; // offset: 443  (0x1BB)
	uint32_t db_occlusion_count0_low_12; // offset: 444  (0x1BC)
	uint32_t db_occlusion_count0_hi_12; // offset: 445  (0x1BD)
	uint32_t db_occlusion_count1_low_12; // offset: 446  (0x1BE)
	uint32_t db_occlusion_count1_hi_12; // offset: 447  (0x1BF)
	uint32_t db_occlusion_count2_low_12; // offset: 448  (0x1C0)
	uint32_t db_occlusion_count2_hi_12; // offset: 449  (0x1C1)
	uint32_t db_occlusion_count3_low_12; // offset: 450  (0x1C2)
	uint32_t db_occlusion_count3_hi_12; // offset: 451  (0x1C3)
	uint32_t db_occlusion_count0_low_13; // offset: 452  (0x1C4)
	uint32_t db_occlusion_count0_hi_13; // offset: 453  (0x1C5)
	uint32_t db_occlusion_count1_low_13; // offset: 454  (0x1C6)
	uint32_t db_occlusion_count1_hi_13; // offset: 455  (0x1C7)
	uint32_t db_occlusion_count2_low_13; // offset: 456  (0x1C8)
	uint32_t db_occlusion_count2_hi_13; // offset: 457  (0x1C9)
	uint32_t db_occlusion_count3_low_13; // offset: 458  (0x1CA)
	uint32_t db_occlusion_count3_hi_13; // offset: 459  (0x1CB)
	uint32_t db_occlusion_count0_low_14; // offset: 460  (0x1CC)
	uint32_t db_occlusion_count0_hi_14; // offset: 461  (0x1CD)
	uint32_t db_occlusion_count1_low_14; // offset: 462  (0x1CE)
	uint32_t db_occlusion_count1_hi_14; // offset: 463  (0x1CF)
	uint32_t db_occlusion_count2_low_14; // offset: 464  (0x1D0)
	uint32_t db_occlusion_count2_hi_14; // offset: 465  (0x1D1)
	uint32_t db_occlusion_count3_low_14; // offset: 466  (0x1D2)
	uint32_t db_occlusion_count3_hi_14; // offset: 467  (0x1D3)
	uint32_t db_occlusion_count0_low_15; // offset: 468  (0x1D4)
	uint32_t db_occlusion_count0_hi_15; // offset: 469  (0x1D5)
	uint32_t db_occlusion_count1_low_15; // offset: 470  (0x1D6)
	uint32_t db_occlusion_count1_hi_15; // offset: 471  (0x1D7)
	uint32_t db_occlusion_count2_low_15; // offset: 472  (0x1D8)
	uint32_t db_occlusion_count2_hi_15; // offset: 473  (0x1D9)
	uint32_t db_occlusion_count3_low_15; // offset: 474  (0x1DA)
	uint32_t db_occlusion_count3_hi_15; // offset: 475  (0x1DB)
	uint32_t db_occlusion_count0_low_16; // offset: 476  (0x1DC)
	uint32_t db_occlusion_count0_hi_16; // offset: 477  (0x1DD)
	uint32_t db_occlusion_count1_low_16; // offset: 478  (0x1DE)
	uint32_t db_occlusion_count1_hi_16; // offset: 479  (0x1DF)
	uint32_t db_occlusion_count2_low_16; // offset: 480  (0x1E0)
	uint32_t db_occlusion_count2_hi_16; // offset: 481  (0x1E1)
	uint32_t db_occlusion_count3_low_16; // offset: 482  (0x1E2)
	uint32_t db_occlusion_count3_hi_16; // offset: 483  (0x1E3)
	uint32_t db_occlusion_count0_low_17; // offset: 484  (0x1E4)
	uint32_t db_occlusion_count0_hi_17; // offset: 485  (0x1E5)
	uint32_t db_occlusion_count1_low_17; // offset: 486  (0x1E6)
	uint32_t db_occlusion_count1_hi_17; // offset: 487  (0x1E7)
	uint32_t db_occlusion_count2_low_17; // offset: 488  (0x1E8)
	uint32_t db_occlusion_count2_hi_17; // offset: 489  (0x1E9)
	uint32_t db_occlusion_count3_low_17; // offset: 490  (0x1EA)
	uint32_t db_occlusion_count3_hi_17; // offset: 491  (0x1EB)
	uint32_t reserved_492; // offset: 492  (0x1EC)
	uint32_t reserved_493; // offset: 493  (0x1ED)
	uint32_t reserved_494; // offset: 494  (0x1EE)
	uint32_t reserved_495; // offset: 495  (0x1EF)
	uint32_t reserved_496; // offset: 496  (0x1F0)
	uint32_t reserved_497; // offset: 497  (0x1F1)
	uint32_t reserved_498; // offset: 498  (0x1F2)
	uint32_t reserved_499; // offset: 499  (0x1F3)
	uint32_t reserved_500; // offset: 500  (0x1F4)
	uint32_t reserved_501; // offset: 501  (0x1F5)
	uint32_t reserved_502; // offset: 502  (0x1F6)
	uint32_t reserved_503; // offset: 503  (0x1F7)
	uint32_t reserved_504; // offset: 504  (0x1F8)
	uint32_t reserved_505; // offset: 505  (0x1F9)
	uint32_t reserved_506; // offset: 506  (0x1FA)
	uint32_t reserved_507; // offset: 507  (0x1FB)
	uint32_t reserved_508; // offset: 508  (0x1FC)
	uint32_t reserved_509; // offset: 509  (0x1FD)
	uint32_t reserved_510; // offset: 510  (0x1FE)
	uint32_t reserved_511; // offset: 511  (0x1FF)
};

struct v11_sdma_mqd {
	uint32_t sdmax_rlcx_rb_cntl; // offset: 0  (0x0)
	uint32_t sdmax_rlcx_rb_base; // offset: 1  (0x1)
	uint32_t sdmax_rlcx_rb_base_hi; // offset: 2  (0x2)
	uint32_t sdmax_rlcx_rb_rptr; // offset: 3  (0x3)
	uint32_t sdmax_rlcx_rb_rptr_hi; // offset: 4  (0x4)
	uint32_t sdmax_rlcx_rb_wptr; // offset: 5  (0x5)
	uint32_t sdmax_rlcx_rb_wptr_hi; // offset: 6  (0x6)
	uint32_t sdmax_rlcx_rb_rptr_addr_hi; // offset: 7  (0x7)
	uint32_t sdmax_rlcx_rb_rptr_addr_lo; // offset: 8  (0x8)
	uint32_t sdmax_rlcx_ib_cntl; // offset: 9  (0x9)
	uint32_t sdmax_rlcx_ib_rptr; // offset: 10  (0xA)
	uint32_t sdmax_rlcx_ib_offset; // offset: 11  (0xB)
	uint32_t sdmax_rlcx_ib_base_lo; // offset: 12  (0xC)
	uint32_t sdmax_rlcx_ib_base_hi; // offset: 13  (0xD)
	uint32_t sdmax_rlcx_ib_size; // offset: 14  (0xE)
	uint32_t sdmax_rlcx_skip_cntl; // offset: 15  (0xF)
	uint32_t sdmax_rlcx_context_status; // offset: 16  (0x10)
	uint32_t sdmax_rlcx_doorbell; // offset: 17  (0x11)
	uint32_t sdmax_rlcx_doorbell_log; // offset: 18  (0x12)
	uint32_t sdmax_rlcx_doorbell_offset; // offset: 19  (0x13)
	uint32_t sdmax_rlcx_csa_addr_lo; // offset: 20  (0x14)
	uint32_t sdmax_rlcx_csa_addr_hi; // offset: 21  (0x15)
	uint32_t sdmax_rlcx_sched_cntl; // offset: 22  (0x16)
	uint32_t sdmax_rlcx_ib_sub_remain; // offset: 23  (0x17)
	uint32_t sdmax_rlcx_preempt; // offset: 24  (0x18)
	uint32_t sdmax_rlcx_dummy_reg; // offset: 25  (0x19)
	uint32_t sdmax_rlcx_rb_wptr_poll_addr_hi; // offset: 26  (0x1A)
	uint32_t sdmax_rlcx_rb_wptr_poll_addr_lo; // offset: 27  (0x1B)
	uint32_t sdmax_rlcx_rb_aql_cntl; // offset: 28  (0x1C)
	uint32_t sdmax_rlcx_minor_ptr_update; // offset: 29  (0x1D)
	uint32_t sdmax_rlcx_rb_preempt; // offset: 30  (0x1E)
	uint32_t sdmax_rlcx_midcmd_data0; // offset: 31  (0x1F)
	uint32_t sdmax_rlcx_midcmd_data1; // offset: 32  (0x20)
	uint32_t sdmax_rlcx_midcmd_data2; // offset: 33  (0x21)
	uint32_t sdmax_rlcx_midcmd_data3; // offset: 34  (0x22)
	uint32_t sdmax_rlcx_midcmd_data4; // offset: 35  (0x23)
	uint32_t sdmax_rlcx_midcmd_data5; // offset: 36  (0x24)
	uint32_t sdmax_rlcx_midcmd_data6; // offset: 37  (0x25)
	uint32_t sdmax_rlcx_midcmd_data7; // offset: 38  (0x26)
	uint32_t sdmax_rlcx_midcmd_data8; // offset: 39  (0x27)
	uint32_t sdmax_rlcx_midcmd_data9; // offset: 40  (0x28)
	uint32_t sdmax_rlcx_midcmd_data10; // offset: 41  (0x29)
	uint32_t sdmax_rlcx_midcmd_cntl; // offset: 42  (0x2A)
	uint32_t sdmax_rlcx_f32_dbg0; // offset: 43  (0x2B)
	uint32_t sdmax_rlcx_f32_dbg1; // offset: 44  (0x2C)
	uint32_t reserved_45; // offset: 45  (0x2D)
	uint32_t reserved_46; // offset: 46  (0x2E)
	uint32_t reserved_47; // offset: 47  (0x2F)
	uint32_t reserved_48; // offset: 48  (0x30)
	uint32_t reserved_49; // offset: 49  (0x31)
	uint32_t reserved_50; // offset: 50  (0x32)
	uint32_t reserved_51; // offset: 51  (0x33)
	uint32_t reserved_52; // offset: 52  (0x34)
	uint32_t reserved_53; // offset: 53  (0x35)
	uint32_t reserved_54; // offset: 54  (0x36)
	uint32_t reserved_55; // offset: 55  (0x37)
	uint32_t reserved_56; // offset: 56  (0x38)
	uint32_t reserved_57; // offset: 57  (0x39)
	uint32_t reserved_58; // offset: 58  (0x3A)
	uint32_t reserved_59; // offset: 59  (0x3B)
	uint32_t reserved_60; // offset: 60  (0x3C)
	uint32_t reserved_61; // offset: 61  (0x3D)
	uint32_t reserved_62; // offset: 62  (0x3E)
	uint32_t reserved_63; // offset: 63  (0x3F)
	uint32_t reserved_64; // offset: 64  (0x40)
	uint32_t reserved_65; // offset: 65  (0x41)
	uint32_t reserved_66; // offset: 66  (0x42)
	uint32_t reserved_67; // offset: 67  (0x43)
	uint32_t reserved_68; // offset: 68  (0x44)
	uint32_t reserved_69; // offset: 69  (0x45)
	uint32_t reserved_70; // offset: 70  (0x46)
	uint32_t reserved_71; // offset: 0  (0x47)
	uint32_t reserved_72; // offset: 1  (0x48)
	uint32_t reserved_73; // offset: 2  (0x49)
	uint32_t reserved_74; // offset: 3  (0x4A)
	uint32_t reserved_75; // offset: 4  (0x4B)
	uint32_t reserved_76; // offset: 5  (0x4C)
	uint32_t reserved_77; // offset: 6  (0x4D)
	uint32_t reserved_78; // offset: 7  (0x4E)
	uint32_t reserved_79; // offset: 79  (0x4F)
	uint32_t reserved_80; // offset: 80  (0x50)
	uint32_t reserved_81; // offset: 81  (0x51)
	uint32_t reserved_82; // offset: 82  (0x52)
	uint32_t reserved_83; // offset: 83  (0x53)
	uint32_t reserved_84; // offset: 84  (0x54)
	uint32_t reserved_85; // offset: 85  (0x55)
	uint32_t reserved_86; // offset: 86  (0x56)
	uint32_t reserved_87; // offset: 87  (0x57)
	uint32_t reserved_88; // offset: 88  (0x58)
	uint32_t reserved_89; // offset: 89  (0x59)
	uint32_t reserved_90; // offset: 90  (0x5A)
	uint32_t reserved_91; // offset: 91  (0x5B)
	uint32_t reserved_92; // offset: 92  (0x5C)
	uint32_t reserved_93; // offset: 93  (0x5D)
	uint32_t reserved_94; // offset: 94  (0x5E)
	uint32_t reserved_95; // offset: 95  (0x5F)
	uint32_t reserved_96; // offset: 96  (0x60)
	uint32_t reserved_97; // offset: 97  (0x61)
	uint32_t reserved_98; // offset: 98  (0x62)
	uint32_t reserved_99; // offset: 99  (0x63)
	uint32_t reserved_100; // offset: 100  (0x64)
	uint32_t reserved_101; // offset: 101  (0x65)
	uint32_t reserved_102; // offset: 102  (0x66)
	uint32_t reserved_103; // offset: 103  (0x67)
	uint32_t reserved_104; // offset: 104  (0x68)
	uint32_t reserved_105; // offset: 105  (0x69)
	uint32_t reserved_106; // offset: 106  (0x6A)
	uint32_t reserved_107; // offset: 107  (0x6B)
	uint32_t reserved_108; // offset: 108  (0x6C)
	uint32_t reserved_109; // offset: 109  (0x6D)
	uint32_t reserved_110; // offset: 110  (0x6E)
	uint32_t reserved_111; // offset: 111  (0x6F)
	uint32_t reserved_112; // offset: 112  (0x70)
	uint32_t reserved_113; // offset: 113  (0x71)
	uint32_t reserved_114; // offset: 114  (0x72)
	uint32_t reserved_115; // offset: 115  (0x73)
	uint32_t reserved_116; // offset: 116  (0x74)
	uint32_t reserved_117; // offset: 117  (0x75)
	uint32_t reserved_118; // offset: 118  (0x76)
	uint32_t reserved_119; // offset: 119  (0x77)
	uint32_t reserved_120; // offset: 120  (0x78)
	uint32_t reserved_121; // offset: 121  (0x79)
	uint32_t reserved_122; // offset: 122  (0x7A)
	uint32_t reserved_123; // offset: 123  (0x7B)
	uint32_t reserved_124; // offset: 124  (0x7C)
	uint32_t reserved_125; // offset: 125  (0x7D)
	/* reserved_126,127: repurposed for driver-internal use */
	uint32_t sdma_engine_id;
	uint32_t sdma_queue_id;
};

struct v11_compute_mqd {
	uint32_t header; // offset: 0  (0x0)
	uint32_t compute_dispatch_initiator; // offset: 1  (0x1)
	uint32_t compute_dim_x; // offset: 2  (0x2)
	uint32_t compute_dim_y; // offset: 3  (0x3)
	uint32_t compute_dim_z; // offset: 4  (0x4)
	uint32_t compute_start_x; // offset: 5  (0x5)
	uint32_t compute_start_y; // offset: 6  (0x6)
	uint32_t compute_start_z; // offset: 7  (0x7)
	uint32_t compute_num_thread_x; // offset: 8  (0x8)
	uint32_t compute_num_thread_y; // offset: 9  (0x9)
	uint32_t compute_num_thread_z; // offset: 10  (0xA)
	uint32_t compute_pipelinestat_enable; // offset: 11  (0xB)
	uint32_t compute_perfcount_enable; // offset: 12  (0xC)
	uint32_t compute_pgm_lo; // offset: 13  (0xD)
	uint32_t compute_pgm_hi; // offset: 14  (0xE)
	uint32_t compute_dispatch_pkt_addr_lo; // offset: 15  (0xF)
	uint32_t compute_dispatch_pkt_addr_hi; // offset: 16  (0x10)
	uint32_t compute_dispatch_scratch_base_lo; // offset: 17  (0x11)
	uint32_t compute_dispatch_scratch_base_hi; // offset: 18  (0x12)
	uint32_t compute_pgm_rsrc1; // offset: 19  (0x13)
	uint32_t compute_pgm_rsrc2; // offset: 20  (0x14)
	uint32_t compute_vmid; // offset: 21  (0x15)
	uint32_t compute_resource_limits; // offset: 22  (0x16)
	uint32_t compute_static_thread_mgmt_se0; // offset: 23  (0x17)
	uint32_t compute_static_thread_mgmt_se1; // offset: 24  (0x18)
	uint32_t compute_tmpring_size; // offset: 25  (0x19)
	uint32_t compute_static_thread_mgmt_se2; // offset: 26  (0x1A)
	uint32_t compute_static_thread_mgmt_se3; // offset: 27  (0x1B)
	uint32_t compute_restart_x; // offset: 28  (0x1C)
	uint32_t compute_restart_y; // offset: 29  (0x1D)
	uint32_t compute_restart_z; // offset: 30  (0x1E)
	uint32_t compute_thread_trace_enable; // offset: 31  (0x1F)
	uint32_t compute_misc_reserved; // offset: 32  (0x20)
	uint32_t compute_dispatch_id; // offset: 33  (0x21)
	uint32_t compute_threadgroup_id; // offset: 34  (0x22)
	uint32_t compute_req_ctrl; // offset: 35  (0x23)
	uint32_t reserved_36; // offset: 36  (0x24)
	uint32_t compute_user_accum_0; // offset: 37  (0x25)
	uint32_t compute_user_accum_1; // offset: 38  (0x26)
	uint32_t compute_user_accum_2; // offset: 39  (0x27)
	uint32_t compute_user_accum_3; // offset: 40  (0x28)
	uint32_t compute_pgm_rsrc3; // offset: 41  (0x29)
	uint32_t compute_ddid_index; // offset: 42  (0x2A)
	uint32_t compute_shader_chksum; // offset: 43  (0x2B)
	uint32_t compute_static_thread_mgmt_se4; // offset: 44  (0x2C)
	uint32_t compute_static_thread_mgmt_se5; // offset: 45  (0x2D)
	uint32_t compute_static_thread_mgmt_se6; // offset: 46  (0x2E)
	uint32_t compute_static_thread_mgmt_se7; // offset: 47  (0x2F)
	uint32_t compute_dispatch_interleave; // offset: 48  (0x30)
	uint32_t compute_relaunch; // offset: 49  (0x31)
	uint32_t compute_wave_restore_addr_lo; // offset: 50  (0x32)
	uint32_t compute_wave_restore_addr_hi; // offset: 51  (0x33)
	uint32_t compute_wave_restore_control; // offset: 52  (0x34)
	uint32_t reserved_53; // offset: 53  (0x35)
	uint32_t reserved_54; // offset: 54  (0x36)
	uint32_t reserved_55; // offset: 55  (0x37)
	uint32_t reserved_56; // offset: 56  (0x38)
	uint32_t reserved_57; // offset: 57  (0x39)
	uint32_t reserved_58; // offset: 58  (0x3A)
	uint32_t reserved_59; // offset: 59  (0x3B)
	uint32_t reserved_60; // offset: 60  (0x3C)
	uint32_t reserved_61; // offset: 61  (0x3D)
	uint32_t reserved_62; // offset: 62  (0x3E)
	uint32_t reserved_63; // offset: 63  (0x3F)
	uint32_t reserved_64; // offset: 64  (0x40)
	uint32_t compute_user_data_0; // offset: 65  (0x41)
	uint32_t compute_user_data_1; // offset: 66  (0x42)
	uint32_t compute_user_data_2; // offset: 67  (0x43)
	uint32_t compute_user_data_3; // offset: 68  (0x44)
	uint32_t compute_user_data_4; // offset: 69  (0x45)
	uint32_t compute_user_data_5; // offset: 70  (0x46)
	uint32_t compute_user_data_6; // offset: 71  (0x47)
	uint32_t compute_user_data_7; // offset: 72  (0x48)
	uint32_t compute_user_data_8; // offset: 73  (0x49)
	uint32_t compute_user_data_9; // offset: 74  (0x4A)
	uint32_t compute_user_data_10; // offset: 75  (0x4B)
	uint32_t compute_user_data_11; // offset: 76  (0x4C)
	uint32_t compute_user_data_12; // offset: 77  (0x4D)
	uint32_t compute_user_data_13; // offset: 78  (0x4E)
	uint32_t compute_user_data_14; // offset: 79  (0x4F)
	uint32_t compute_user_data_15; // offset: 80  (0x50)
	uint32_t cp_compute_csinvoc_count_lo; // offset: 81  (0x51)
	uint32_t cp_compute_csinvoc_count_hi; // offset: 82  (0x52)
	uint32_t reserved_83; // offset: 83  (0x53)
	uint32_t reserved_84; // offset: 84  (0x54)
	uint32_t reserved_85; // offset: 85  (0x55)
	uint32_t cp_mqd_query_time_lo; // offset: 86  (0x56)
	uint32_t cp_mqd_query_time_hi; // offset: 87  (0x57)
	uint32_t cp_mqd_connect_start_time_lo; // offset: 88  (0x58)
	uint32_t cp_mqd_connect_start_time_hi; // offset: 89  (0x59)
	uint32_t cp_mqd_connect_end_time_lo; // offset: 90  (0x5A)
	uint32_t cp_mqd_connect_end_time_hi; // offset: 91  (0x5B)
	uint32_t cp_mqd_connect_end_wf_count; // offset: 92  (0x5C)
	uint32_t cp_mqd_connect_end_pq_rptr; // offset: 93  (0x5D)
	uint32_t cp_mqd_connect_end_pq_wptr; // offset: 94  (0x5E)
	uint32_t cp_mqd_connect_end_ib_rptr; // offset: 95  (0x5F)
	uint32_t cp_mqd_readindex_lo; // offset: 96  (0x60)
	uint32_t cp_mqd_readindex_hi; // offset: 97  (0x61)
	uint32_t cp_mqd_save_start_time_lo; // offset: 98  (0x62)
	uint32_t cp_mqd_save_start_time_hi; // offset: 99  (0x63)
	uint32_t cp_mqd_save_end_time_lo; // offset: 100  (0x64)
	uint32_t cp_mqd_save_end_time_hi; // offset: 101  (0x65)
	uint32_t cp_mqd_restore_start_time_lo; // offset: 102  (0x66)
	uint32_t cp_mqd_restore_start_time_hi; // offset: 103  (0x67)
	uint32_t cp_mqd_restore_end_time_lo; // offset: 104  (0x68)
	uint32_t cp_mqd_restore_end_time_hi; // offset: 105  (0x69)
	uint32_t disable_queue; // offset: 106  (0x6A)
	uint32_t reserved_107; // offset: 107  (0x6B)
	uint32_t gds_cs_ctxsw_cnt0; // offset: 108  (0x6C)
	uint32_t gds_cs_ctxsw_cnt1; // offset: 109  (0x6D)
	uint32_t gds_cs_ctxsw_cnt2; // offset: 110  (0x6E)
	uint32_t gds_cs_ctxsw_cnt3; // offset: 111  (0x6F)
	uint32_t reserved_112; // offset: 112  (0x70)
	uint32_t reserved_113; // offset: 113  (0x71)
	uint32_t cp_pq_exe_status_lo; // offset: 114  (0x72)
	uint32_t cp_pq_exe_status_hi; // offset: 115  (0x73)
	uint32_t cp_packet_id_lo; // offset: 116  (0x74)
	uint32_t cp_packet_id_hi; // offset: 117  (0x75)
	uint32_t cp_packet_exe_status_lo; // offset: 118  (0x76)
	uint32_t cp_packet_exe_status_hi; // offset: 119  (0x77)
	uint32_t gds_save_base_addr_lo; // offset: 120  (0x78)
	uint32_t gds_save_base_addr_hi; // offset: 121  (0x79)
	uint32_t gds_save_mask_lo; // offset: 122  (0x7A)
	uint32_t gds_save_mask_hi; // offset: 123  (0x7B)
	uint32_t ctx_save_base_addr_lo; // offset: 124  (0x7C)
	uint32_t ctx_save_base_addr_hi; // offset: 125  (0x7D)
	uint32_t reserved_126; // offset: 126  (0x7E)
	uint32_t reserved_127; // offset: 127  (0x7F)
	uint32_t cp_mqd_base_addr_lo; // offset: 128  (0x80)
	uint32_t cp_mqd_base_addr_hi; // offset: 129  (0x81)
	uint32_t cp_hqd_active; // offset: 130  (0x82)
	uint32_t cp_hqd_vmid; // offset: 131  (0x83)
	uint32_t cp_hqd_persistent_state; // offset: 132  (0x84)
	uint32_t cp_hqd_pipe_priority; // offset: 133  (0x85)
	uint32_t cp_hqd_queue_priority; // offset: 134  (0x86)
	uint32_t cp_hqd_quantum; // offset: 135  (0x87)
	uint32_t cp_hqd_pq_base_lo; // offset: 136  (0x88)
	uint32_t cp_hqd_pq_base_hi; // offset: 137  (0x89)
	uint32_t cp_hqd_pq_rptr; // offset: 138  (0x8A)
	uint32_t cp_hqd_pq_rptr_report_addr_lo; // offset: 139  (0x8B)
	uint32_t cp_hqd_pq_rptr_report_addr_hi; // offset: 140  (0x8C)
	uint32_t cp_hqd_pq_wptr_poll_addr_lo; // offset: 141  (0x8D)
	uint32_t cp_hqd_pq_wptr_poll_addr_hi; // offset: 142  (0x8E)
	uint32_t cp_hqd_pq_doorbell_control; // offset: 143  (0x8F)
	uint32_t reserved_144; // offset: 144  (0x90)
	uint32_t cp_hqd_pq_control; // offset: 145  (0x91)
	uint32_t cp_hqd_ib_base_addr_lo; // offset: 146  (0x92)
	uint32_t cp_hqd_ib_base_addr_hi; // offset: 147  (0x93)
	uint32_t cp_hqd_ib_rptr; // offset: 148  (0x94)
	uint32_t cp_hqd_ib_control; // offset: 149  (0x95)
	uint32_t cp_hqd_iq_timer; // offset: 150  (0x96)
	uint32_t cp_hqd_iq_rptr; // offset: 151  (0x97)
	uint32_t cp_hqd_dequeue_request; // offset: 152  (0x98)
	uint32_t cp_hqd_dma_offload; // offset: 153  (0x99)
	uint32_t cp_hqd_sema_cmd; // offset: 154  (0x9A)
	uint32_t cp_hqd_msg_type; // offset: 155  (0x9B)
	uint32_t cp_hqd_atomic0_preop_lo; // offset: 156  (0x9C)
	uint32_t cp_hqd_atomic0_preop_hi; // offset: 157  (0x9D)
	uint32_t cp_hqd_atomic1_preop_lo; // offset: 158  (0x9E)
	uint32_t cp_hqd_atomic1_preop_hi; // offset: 159  (0x9F)
	uint32_t cp_hqd_hq_status0; // offset: 160  (0xA0)
	uint32_t cp_hqd_hq_control0; // offset: 161  (0xA1)
	uint32_t cp_mqd_control; // offset: 162  (0xA2)
	uint32_t cp_hqd_hq_status1; // offset: 163  (0xA3)
	uint32_t cp_hqd_hq_control1; // offset: 164  (0xA4)
	uint32_t cp_hqd_eop_base_addr_lo; // offset: 165  (0xA5)
	uint32_t cp_hqd_eop_base_addr_hi; // offset: 166  (0xA6)
	uint32_t cp_hqd_eop_control; // offset: 167  (0xA7)
	uint32_t cp_hqd_eop_rptr; // offset: 168  (0xA8)
	uint32_t cp_hqd_eop_wptr; // offset: 169  (0xA9)
	uint32_t cp_hqd_eop_done_events; // offset: 170  (0xAA)
	uint32_t cp_hqd_ctx_save_base_addr_lo; // offset: 171  (0xAB)
	uint32_t cp_hqd_ctx_save_base_addr_hi; // offset: 172  (0xAC)
	uint32_t cp_hqd_ctx_save_control; // offset: 173  (0xAD)
	uint32_t cp_hqd_cntl_stack_offset; // offset: 174  (0xAE)
	uint32_t cp_hqd_cntl_stack_size; // offset: 175  (0xAF)
	uint32_t cp_hqd_wg_state_offset; // offset: 176  (0xB0)
	uint32_t cp_hqd_ctx_save_size; // offset: 177  (0xB1)
	uint32_t cp_hqd_gds_resource_state; // offset: 178  (0xB2)
	uint32_t cp_hqd_error; // offset: 179  (0xB3)
	uint32_t cp_hqd_eop_wptr_mem; // offset: 180  (0xB4)
	uint32_t cp_hqd_aql_control; // offset: 181  (0xB5)
	uint32_t cp_hqd_pq_wptr_lo; // offset: 182  (0xB6)
	uint32_t cp_hqd_pq_wptr_hi; // offset: 183  (0xB7)
	uint32_t reserved_184; // offset: 184  (0xB8)
	uint32_t reserved_185; // offset: 185  (0xB9)
	uint32_t reserved_186; // offset: 186  (0xBA)
	uint32_t reserved_187; // offset: 187  (0xBB)
	uint32_t reserved_188; // offset: 188  (0xBC)
	uint32_t reserved_189; // offset: 189  (0xBD)
	uint32_t reserved_190; // offset: 190  (0xBE)
	uint32_t reserved_191; // offset: 191  (0xBF)
	uint32_t iqtimer_pkt_header; // offset: 192  (0xC0)
	uint32_t iqtimer_pkt_dw0; // offset: 193  (0xC1)
	uint32_t iqtimer_pkt_dw1; // offset: 194  (0xC2)
	uint32_t iqtimer_pkt_dw2; // offset: 195  (0xC3)
	uint32_t iqtimer_pkt_dw3; // offset: 196  (0xC4)
	uint32_t iqtimer_pkt_dw4; // offset: 197  (0xC5)
	uint32_t iqtimer_pkt_dw5; // offset: 198  (0xC6)
	uint32_t iqtimer_pkt_dw6; // offset: 199  (0xC7)
	uint32_t iqtimer_pkt_dw7; // offset: 200  (0xC8)
	uint32_t iqtimer_pkt_dw8; // offset: 201  (0xC9)
	uint32_t iqtimer_pkt_dw9; // offset: 202  (0xCA)
	uint32_t iqtimer_pkt_dw10; // offset: 203  (0xCB)
	uint32_t iqtimer_pkt_dw11; // offset: 204  (0xCC)
	uint32_t iqtimer_pkt_dw12; // offset: 205  (0xCD)
	uint32_t iqtimer_pkt_dw13; // offset: 206  (0xCE)
	uint32_t iqtimer_pkt_dw14; // offset: 207  (0xCF)
	uint32_t iqtimer_pkt_dw15; // offset: 208  (0xD0)
	uint32_t iqtimer_pkt_dw16; // offset: 209  (0xD1)
	uint32_t iqtimer_pkt_dw17; // offset: 210  (0xD2)
	uint32_t iqtimer_pkt_dw18; // offset: 211  (0xD3)
	uint32_t iqtimer_pkt_dw19; // offset: 212  (0xD4)
	uint32_t iqtimer_pkt_dw20; // offset: 213  (0xD5)
	uint32_t iqtimer_pkt_dw21; // offset: 214  (0xD6)
	uint32_t iqtimer_pkt_dw22; // offset: 215  (0xD7)
	uint32_t iqtimer_pkt_dw23; // offset: 216  (0xD8)
	uint32_t iqtimer_pkt_dw24; // offset: 217  (0xD9)
	uint32_t iqtimer_pkt_dw25; // offset: 218  (0xDA)
	uint32_t iqtimer_pkt_dw26; // offset: 219  (0xDB)
	uint32_t iqtimer_pkt_dw27; // offset: 220  (0xDC)
	uint32_t iqtimer_pkt_dw28; // offset: 221  (0xDD)
	uint32_t iqtimer_pkt_dw29; // offset: 222  (0xDE)
	uint32_t iqtimer_pkt_dw30; // offset: 223  (0xDF)
	uint32_t iqtimer_pkt_dw31; // offset: 224  (0xE0)
	uint32_t reserved_225; // offset: 225  (0xE1)
	uint32_t reserved_226; // offset: 226  (0xE2)
	uint32_t reserved_227; // offset: 227  (0xE3)
	uint32_t set_resources_header; // offset: 228  (0xE4)
	uint32_t set_resources_dw1; // offset: 229  (0xE5)
	uint32_t set_resources_dw2; // offset: 230  (0xE6)
	uint32_t set_resources_dw3; // offset: 231  (0xE7)
	uint32_t set_resources_dw4; // offset: 232  (0xE8)
	uint32_t set_resources_dw5; // offset: 233  (0xE9)
	uint32_t set_resources_dw6; // offset: 234  (0xEA)
	uint32_t set_resources_dw7; // offset: 235  (0xEB)
	uint32_t reserved_236; // offset: 236  (0xEC)
	uint32_t reserved_237; // offset: 237  (0xED)
	uint32_t reserved_238; // offset: 238  (0xEE)
	uint32_t reserved_239; // offset: 239  (0xEF)
	uint32_t queue_doorbell_id0; // offset: 240  (0xF0)
	uint32_t queue_doorbell_id1; // offset: 241  (0xF1)
	uint32_t queue_doorbell_id2; // offset: 242  (0xF2)
	uint32_t queue_doorbell_id3; // offset: 243  (0xF3)
	uint32_t queue_doorbell_id4; // offset: 244  (0xF4)
	uint32_t queue_doorbell_id5; // offset: 245  (0xF5)
	uint32_t queue_doorbell_id6; // offset: 246  (0xF6)
	uint32_t queue_doorbell_id7; // offset: 247  (0xF7)
	uint32_t queue_doorbell_id8; // offset: 248  (0xF8)
	uint32_t queue_doorbell_id9; // offset: 249  (0xF9)
	uint32_t queue_doorbell_id10; // offset: 250  (0xFA)
	uint32_t queue_doorbell_id11; // offset: 251  (0xFB)
	uint32_t queue_doorbell_id12; // offset: 252  (0xFC)
	uint32_t queue_doorbell_id13; // offset: 253  (0xFD)
	uint32_t queue_doorbell_id14; // offset: 254  (0xFE)
	uint32_t queue_doorbell_id15; // offset: 255  (0xFF)
	uint32_t control_buf_addr_lo; // offset: 256  (0x100)
	uint32_t control_buf_addr_hi; // offset: 257  (0x101)
	uint32_t control_buf_wptr_lo; // offset: 258  (0x102)
	uint32_t control_buf_wptr_hi; // offset: 259  (0x103)
	uint32_t control_buf_dptr_lo; // offset: 260  (0x104)
	uint32_t control_buf_dptr_hi; // offset: 261  (0x105)
	uint32_t control_buf_num_entries; // offset: 262  (0x106)
	uint32_t draw_ring_addr_lo; // offset: 263  (0x107)
	uint32_t draw_ring_addr_hi; // offset: 264  (0x108)
	uint32_t reserved_265; // offset: 265  (0x109)
	uint32_t reserved_266; // offset: 266  (0x10A)
	uint32_t reserved_267; // offset: 267  (0x10B)
	uint32_t reserved_268; // offset: 268  (0x10C)
	uint32_t reserved_269; // offset: 269  (0x10D)
	uint32_t reserved_270; // offset: 270  (0x10E)
	uint32_t reserved_271; // offset: 271  (0x10F)
	uint32_t reserved_272; // offset: 272  (0x110)
	uint32_t reserved_273; // offset: 273  (0x111)
	uint32_t reserved_274; // offset: 274  (0x112)
	uint32_t reserved_275; // offset: 275  (0x113)
	uint32_t reserved_276; // offset: 276  (0x114)
	uint32_t reserved_277; // offset: 277  (0x115)
	uint32_t reserved_278; // offset: 278  (0x116)
	uint32_t reserved_279; // offset: 279  (0x117)
	uint32_t reserved_280; // offset: 280  (0x118)
	uint32_t reserved_281; // offset: 281  (0x119)
	uint32_t reserved_282; // offset: 282  (0x11A)
	uint32_t reserved_283; // offset: 283  (0x11B)
	uint32_t reserved_284; // offset: 284  (0x11C)
	uint32_t reserved_285; // offset: 285  (0x11D)
	uint32_t reserved_286; // offset: 286  (0x11E)
	uint32_t reserved_287; // offset: 287  (0x11F)
	uint32_t reserved_288; // offset: 288  (0x120)
	uint32_t reserved_289; // offset: 289  (0x121)
	uint32_t reserved_290; // offset: 290  (0x122)
	uint32_t reserved_291; // offset: 291  (0x123)
	uint32_t reserved_292; // offset: 292  (0x124)
	uint32_t reserved_293; // offset: 293  (0x125)
	uint32_t reserved_294; // offset: 294  (0x126)
	uint32_t reserved_295; // offset: 295  (0x127)
	uint32_t reserved_296; // offset: 296  (0x128)
	uint32_t reserved_297; // offset: 297  (0x129)
	uint32_t reserved_298; // offset: 298  (0x12A)
	uint32_t reserved_299; // offset: 299  (0x12B)
	uint32_t reserved_300; // offset: 300  (0x12C)
	uint32_t reserved_301; // offset: 301  (0x12D)
	uint32_t reserved_302; // offset: 302  (0x12E)
	uint32_t reserved_303; // offset: 303  (0x12F)
	uint32_t reserved_304; // offset: 304  (0x130)
	uint32_t reserved_305; // offset: 305  (0x131)
	uint32_t reserved_306; // offset: 306  (0x132)
	uint32_t reserved_307; // offset: 307  (0x133)
	uint32_t reserved_308; // offset: 308  (0x134)
	uint32_t reserved_309; // offset: 309  (0x135)
	uint32_t reserved_310; // offset: 310  (0x136)
	uint32_t reserved_311; // offset: 311  (0x137)
	uint32_t reserved_312; // offset: 312  (0x138)
	uint32_t reserved_313; // offset: 313  (0x139)
	uint32_t reserved_314; // offset: 314  (0x13A)
	uint32_t reserved_315; // offset: 315  (0x13B)
	uint32_t reserved_316; // offset: 316  (0x13C)
	uint32_t reserved_317; // offset: 317  (0x13D)
	uint32_t reserved_318; // offset: 318  (0x13E)
	uint32_t reserved_319; // offset: 319  (0x13F)
	uint32_t reserved_320; // offset: 320  (0x140)
	uint32_t reserved_321; // offset: 321  (0x141)
	uint32_t reserved_322; // offset: 322  (0x142)
	uint32_t reserved_323; // offset: 323  (0x143)
	uint32_t reserved_324; // offset: 324  (0x144)
	uint32_t reserved_325; // offset: 325  (0x145)
	uint32_t reserved_326; // offset: 326  (0x146)
	uint32_t reserved_327; // offset: 327  (0x147)
	uint32_t reserved_328; // offset: 328  (0x148)
	uint32_t reserved_329; // offset: 329  (0x149)
	uint32_t reserved_330; // offset: 330  (0x14A)
	uint32_t reserved_331; // offset: 331  (0x14B)
	uint32_t reserved_332; // offset: 332  (0x14C)
	uint32_t reserved_333; // offset: 333  (0x14D)
	uint32_t reserved_334; // offset: 334  (0x14E)
	uint32_t reserved_335; // offset: 335  (0x14F)
	uint32_t reserved_336; // offset: 336  (0x150)
	uint32_t reserved_337; // offset: 337  (0x151)
	uint32_t reserved_338; // offset: 338  (0x152)
	uint32_t reserved_339; // offset: 339  (0x153)
	uint32_t reserved_340; // offset: 340  (0x154)
	uint32_t reserved_341; // offset: 341  (0x155)
	uint32_t reserved_342; // offset: 342  (0x156)
	uint32_t reserved_343; // offset: 343  (0x157)
	uint32_t reserved_344; // offset: 344  (0x158)
	uint32_t reserved_345; // offset: 345  (0x159)
	uint32_t reserved_346; // offset: 346  (0x15A)
	uint32_t reserved_347; // offset: 347  (0x15B)
	uint32_t reserved_348; // offset: 348  (0x15C)
	uint32_t reserved_349; // offset: 349  (0x15D)
	uint32_t reserved_350; // offset: 350  (0x15E)
	uint32_t reserved_351; // offset: 351  (0x15F)
	uint32_t reserved_352; // offset: 352  (0x160)
	uint32_t reserved_353; // offset: 353  (0x161)
	uint32_t reserved_354; // offset: 354  (0x162)
	uint32_t reserved_355; // offset: 355  (0x163)
	uint32_t reserved_356; // offset: 356  (0x164)
	uint32_t reserved_357; // offset: 357  (0x165)
	uint32_t reserved_358; // offset: 358  (0x166)
	uint32_t reserved_359; // offset: 359  (0x167)
	uint32_t reserved_360; // offset: 360  (0x168)
	uint32_t reserved_361; // offset: 361  (0x169)
	uint32_t reserved_362; // offset: 362  (0x16A)
	uint32_t reserved_363; // offset: 363  (0x16B)
	uint32_t reserved_364; // offset: 364  (0x16C)
	uint32_t reserved_365; // offset: 365  (0x16D)
	uint32_t reserved_366; // offset: 366  (0x16E)
	uint32_t reserved_367; // offset: 367  (0x16F)
	uint32_t reserved_368; // offset: 368  (0x170)
	uint32_t reserved_369; // offset: 369  (0x171)
	uint32_t reserved_370; // offset: 370  (0x172)
	uint32_t reserved_371; // offset: 371  (0x173)
	uint32_t reserved_372; // offset: 372  (0x174)
	uint32_t reserved_373; // offset: 373  (0x175)
	uint32_t reserved_374; // offset: 374  (0x176)
	uint32_t reserved_375; // offset: 375  (0x177)
	uint32_t reserved_376; // offset: 376  (0x178)
	uint32_t reserved_377; // offset: 377  (0x179)
	uint32_t reserved_378; // offset: 378  (0x17A)
	uint32_t reserved_379; // offset: 379  (0x17B)
	uint32_t reserved_380; // offset: 380  (0x17C)
	uint32_t reserved_381; // offset: 381  (0x17D)
	uint32_t reserved_382; // offset: 382  (0x17E)
	uint32_t reserved_383; // offset: 383  (0x17F)
	uint32_t reserved_384; // offset: 384  (0x180)
	uint32_t reserved_385; // offset: 385  (0x181)
	uint32_t reserved_386; // offset: 386  (0x182)
	uint32_t reserved_387; // offset: 387  (0x183)
	uint32_t reserved_388; // offset: 388  (0x184)
	uint32_t reserved_389; // offset: 389  (0x185)
	uint32_t reserved_390; // offset: 390  (0x186)
	uint32_t reserved_391; // offset: 391  (0x187)
	uint32_t reserved_392; // offset: 392  (0x188)
	uint32_t reserved_393; // offset: 393  (0x189)
	uint32_t reserved_394; // offset: 394  (0x18A)
	uint32_t reserved_395; // offset: 395  (0x18B)
	uint32_t reserved_396; // offset: 396  (0x18C)
	uint32_t reserved_397; // offset: 397  (0x18D)
	uint32_t reserved_398; // offset: 398  (0x18E)
	uint32_t reserved_399; // offset: 399  (0x18F)
	uint32_t reserved_400; // offset: 400  (0x190)
	uint32_t reserved_401; // offset: 401  (0x191)
	uint32_t reserved_402; // offset: 402  (0x192)
	uint32_t reserved_403; // offset: 403  (0x193)
	uint32_t reserved_404; // offset: 404  (0x194)
	uint32_t reserved_405; // offset: 405  (0x195)
	uint32_t reserved_406; // offset: 406  (0x196)
	uint32_t reserved_407; // offset: 407  (0x197)
	uint32_t reserved_408; // offset: 408  (0x198)
	uint32_t reserved_409; // offset: 409  (0x199)
	uint32_t reserved_410; // offset: 410  (0x19A)
	uint32_t reserved_411; // offset: 411  (0x19B)
	uint32_t reserved_412; // offset: 412  (0x19C)
	uint32_t reserved_413; // offset: 413  (0x19D)
	uint32_t reserved_414; // offset: 414  (0x19E)
	uint32_t reserved_415; // offset: 415  (0x19F)
	uint32_t reserved_416; // offset: 416  (0x1A0)
	uint32_t reserved_417; // offset: 417  (0x1A1)
	uint32_t reserved_418; // offset: 418  (0x1A2)
	uint32_t reserved_419; // offset: 419  (0x1A3)
	uint32_t reserved_420; // offset: 420  (0x1A4)
	uint32_t reserved_421; // offset: 421  (0x1A5)
	uint32_t reserved_422; // offset: 422  (0x1A6)
	uint32_t reserved_423; // offset: 423  (0x1A7)
	uint32_t reserved_424; // offset: 424  (0x1A8)
	uint32_t reserved_425; // offset: 425  (0x1A9)
	uint32_t reserved_426; // offset: 426  (0x1AA)
	uint32_t reserved_427; // offset: 427  (0x1AB)
	uint32_t reserved_428; // offset: 428  (0x1AC)
	uint32_t reserved_429; // offset: 429  (0x1AD)
	uint32_t reserved_430; // offset: 430  (0x1AE)
	uint32_t reserved_431; // offset: 431  (0x1AF)
	uint32_t reserved_432; // offset: 432  (0x1B0)
	uint32_t reserved_433; // offset: 433  (0x1B1)
	uint32_t reserved_434; // offset: 434  (0x1B2)
	uint32_t reserved_435; // offset: 435  (0x1B3)
	uint32_t reserved_436; // offset: 436  (0x1B4)
	uint32_t reserved_437; // offset: 437  (0x1B5)
	uint32_t reserved_438; // offset: 438  (0x1B6)
	uint32_t reserved_439; // offset: 439  (0x1B7)
	uint32_t reserved_440; // offset: 440  (0x1B8)
	uint32_t reserved_441; // offset: 441  (0x1B9)
	uint32_t reserved_442; // offset: 442  (0x1BA)
	uint32_t reserved_443; // offset: 443  (0x1BB)
	uint32_t reserved_444; // offset: 444  (0x1BC)
	uint32_t reserved_445; // offset: 445  (0x1BD)
	uint32_t reserved_446; // offset: 446  (0x1BE)
	uint32_t reserved_447; // offset: 447  (0x1BF)
	uint32_t gws_0_val; // offset: 448  (0x1C0)
	uint32_t gws_1_val; // offset: 449  (0x1C1)
	uint32_t gws_2_val; // offset: 450  (0x1C2)
	uint32_t gws_3_val; // offset: 451  (0x1C3)
	uint32_t gws_4_val; // offset: 452  (0x1C4)
	uint32_t gws_5_val; // offset: 453  (0x1C5)
	uint32_t gws_6_val; // offset: 454  (0x1C6)
	uint32_t gws_7_val; // offset: 455  (0x1C7)
	uint32_t gws_8_val; // offset: 456  (0x1C8)
	uint32_t gws_9_val; // offset: 457  (0x1C9)
	uint32_t gws_10_val; // offset: 458  (0x1CA)
	uint32_t gws_11_val; // offset: 459  (0x1CB)
	uint32_t gws_12_val; // offset: 460  (0x1CC)
	uint32_t gws_13_val; // offset: 461  (0x1CD)
	uint32_t gws_14_val; // offset: 462  (0x1CE)
	uint32_t gws_15_val; // offset: 463  (0x1CF)
	uint32_t gws_16_val; // offset: 464  (0x1D0)
	uint32_t gws_17_val; // offset: 465  (0x1D1)
	uint32_t gws_18_val; // offset: 466  (0x1D2)
	uint32_t gws_19_val; // offset: 467  (0x1D3)
	uint32_t gws_20_val; // offset: 468  (0x1D4)
	uint32_t gws_21_val; // offset: 469  (0x1D5)
	uint32_t gws_22_val; // offset: 470  (0x1D6)
	uint32_t gws_23_val; // offset: 471  (0x1D7)
	uint32_t gws_24_val; // offset: 472  (0x1D8)
	uint32_t gws_25_val; // offset: 473  (0x1D9)
	uint32_t gws_26_val; // offset: 474  (0x1DA)
	uint32_t gws_27_val; // offset: 475  (0x1DB)
	uint32_t gws_28_val; // offset: 476  (0x1DC)
	uint32_t gws_29_val; // offset: 477  (0x1DD)
	uint32_t gws_30_val; // offset: 478  (0x1DE)
	uint32_t gws_31_val; // offset: 479  (0x1DF)
	uint32_t gws_32_val; // offset: 480  (0x1E0)
	uint32_t gws_33_val; // offset: 481  (0x1E1)
	uint32_t gws_34_val; // offset: 482  (0x1E2)
	uint32_t gws_35_val; // offset: 483  (0x1E3)
	uint32_t gws_36_val; // offset: 484  (0x1E4)
	uint32_t gws_37_val; // offset: 485  (0x1E5)
	uint32_t gws_38_val; // offset: 486  (0x1E6)
	uint32_t gws_39_val; // offset: 487  (0x1E7)
	uint32_t gws_40_val; // offset: 488  (0x1E8)
	uint32_t gws_41_val; // offset: 489  (0x1E9)
	uint32_t gws_42_val; // offset: 490  (0x1EA)
	uint32_t gws_43_val; // offset: 491  (0x1EB)
	uint32_t gws_44_val; // offset: 492  (0x1EC)
	uint32_t gws_45_val; // offset: 493  (0x1ED)
	uint32_t gws_46_val; // offset: 494  (0x1EE)
	uint32_t gws_47_val; // offset: 495  (0x1EF)
	uint32_t gws_48_val; // offset: 496  (0x1F0)
	uint32_t gws_49_val; // offset: 497  (0x1F1)
	uint32_t gws_50_val; // offset: 498  (0x1F2)
	uint32_t gws_51_val; // offset: 499  (0x1F3)
	uint32_t gws_52_val; // offset: 500  (0x1F4)
	uint32_t gws_53_val; // offset: 501  (0x1F5)
	uint32_t gws_54_val; // offset: 502  (0x1F6)
	uint32_t gws_55_val; // offset: 503  (0x1F7)
	uint32_t gws_56_val; // offset: 504  (0x1F8)
	uint32_t gws_57_val; // offset: 505  (0x1F9)
	uint32_t gws_58_val; // offset: 506  (0x1FA)
	uint32_t gws_59_val; // offset: 507  (0x1FB)
	uint32_t gws_60_val; // offset: 508  (0x1FC)
	uint32_t gws_61_val; // offset: 509  (0x1FD)
	uint32_t gws_62_val; // offset: 510  (0x1FE)
	uint32_t gws_63_val; // offset: 511  (0x1FF)
};

#endif /* V11_STRUCTS_H_ */
/*
 * Copyright 2019 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef V10_STRUCTS_H_
#define V10_STRUCTS_H_

struct v10_gfx_mqd
{
	uint32_t reserved_0; // offset: 0  (0x0)
	uint32_t reserved_1; // offset: 1  (0x1)
	uint32_t reserved_2; // offset: 2  (0x2)
	uint32_t reserved_3; // offset: 3  (0x3)
	uint32_t reserved_4; // offset: 4  (0x4)
	uint32_t reserved_5; // offset: 5  (0x5)
	uint32_t reserved_6; // offset: 6  (0x6)
	uint32_t reserved_7; // offset: 7  (0x7)
	uint32_t reserved_8; // offset: 8  (0x8)
	uint32_t reserved_9; // offset: 9  (0x9)
	uint32_t reserved_10; // offset: 10  (0xA)
	uint32_t reserved_11; // offset: 11  (0xB)
	uint32_t reserved_12; // offset: 12  (0xC)
	uint32_t reserved_13; // offset: 13  (0xD)
	uint32_t reserved_14; // offset: 14  (0xE)
	uint32_t reserved_15; // offset: 15  (0xF)
	uint32_t reserved_16; // offset: 16  (0x10)
	uint32_t reserved_17; // offset: 17  (0x11)
	uint32_t reserved_18; // offset: 18  (0x12)
	uint32_t reserved_19; // offset: 19  (0x13)
	uint32_t reserved_20; // offset: 20  (0x14)
	uint32_t reserved_21; // offset: 21  (0x15)
	uint32_t reserved_22; // offset: 22  (0x16)
	uint32_t reserved_23; // offset: 23  (0x17)
	uint32_t reserved_24; // offset: 24  (0x18)
	uint32_t reserved_25; // offset: 25  (0x19)
	uint32_t reserved_26; // offset: 26  (0x1A)
	uint32_t reserved_27; // offset: 27  (0x1B)
	uint32_t reserved_28; // offset: 28  (0x1C)
	uint32_t reserved_29; // offset: 29  (0x1D)
	uint32_t reserved_30; // offset: 30  (0x1E)
	uint32_t reserved_31; // offset: 31  (0x1F)
	uint32_t reserved_32; // offset: 32  (0x20)
	uint32_t reserved_33; // offset: 33  (0x21)
	uint32_t reserved_34; // offset: 34  (0x22)
	uint32_t reserved_35; // offset: 35  (0x23)
	uint32_t reserved_36; // offset: 36  (0x24)
	uint32_t reserved_37; // offset: 37  (0x25)
	uint32_t reserved_38; // offset: 38  (0x26)
	uint32_t reserved_39; // offset: 39  (0x27)
	uint32_t reserved_40; // offset: 40  (0x28)
	uint32_t reserved_41; // offset: 41  (0x29)
	uint32_t reserved_42; // offset: 42  (0x2A)
	uint32_t reserved_43; // offset: 43  (0x2B)
	uint32_t reserved_44; // offset: 44  (0x2C)
	uint32_t reserved_45; // offset: 45  (0x2D)
	uint32_t reserved_46; // offset: 46  (0x2E)
	uint32_t reserved_47; // offset: 47  (0x2F)
	uint32_t reserved_48; // offset: 48  (0x30)
	uint32_t reserved_49; // offset: 49  (0x31)
	uint32_t reserved_50; // offset: 50  (0x32)
	uint32_t reserved_51; // offset: 51  (0x33)
	uint32_t reserved_52; // offset: 52  (0x34)
	uint32_t reserved_53; // offset: 53  (0x35)
	uint32_t reserved_54; // offset: 54  (0x36)
	uint32_t reserved_55; // offset: 55  (0x37)
	uint32_t reserved_56; // offset: 56  (0x38)
	uint32_t reserved_57; // offset: 57  (0x39)
	uint32_t reserved_58; // offset: 58  (0x3A)
	uint32_t reserved_59; // offset: 59  (0x3B)
	uint32_t reserved_60; // offset: 60  (0x3C)
	uint32_t reserved_61; // offset: 61  (0x3D)
	uint32_t reserved_62; // offset: 62  (0x3E)
	uint32_t reserved_63; // offset: 63  (0x3F)
	uint32_t reserved_64; // offset: 64  (0x40)
	uint32_t reserved_65; // offset: 65  (0x41)
	uint32_t reserved_66; // offset: 66  (0x42)
	uint32_t reserved_67; // offset: 67  (0x43)
	uint32_t reserved_68; // offset: 68  (0x44)
	uint32_t reserved_69; // offset: 69  (0x45)
	uint32_t reserved_70; // offset: 70  (0x46)
	uint32_t reserved_71; // offset: 71  (0x47)
	uint32_t reserved_72; // offset: 72  (0x48)
	uint32_t reserved_73; // offset: 73  (0x49)
	uint32_t reserved_74; // offset: 74  (0x4A)
	uint32_t reserved_75; // offset: 75  (0x4B)
	uint32_t reserved_76; // offset: 76  (0x4C)
	uint32_t reserved_77; // offset: 77  (0x4D)
	uint32_t reserved_78; // offset: 78  (0x4E)
	uint32_t reserved_79; // offset: 79  (0x4F)
	uint32_t reserved_80; // offset: 80  (0x50)
	uint32_t reserved_81; // offset: 81  (0x51)
	uint32_t reserved_82; // offset: 82  (0x52)
	uint32_t reserved_83; // offset: 83  (0x53)
	uint32_t reserved_84; // offset: 84  (0x54)
	uint32_t reserved_85; // offset: 85  (0x55)
	uint32_t reserved_86; // offset: 86  (0x56)
	uint32_t reserved_87; // offset: 87  (0x57)
	uint32_t reserved_88; // offset: 88  (0x58)
	uint32_t reserved_89; // offset: 89  (0x59)
	uint32_t reserved_90; // offset: 90  (0x5A)
	uint32_t reserved_91; // offset: 91  (0x5B)
	uint32_t reserved_92; // offset: 92  (0x5C)
	uint32_t reserved_93; // offset: 93  (0x5D)
	uint32_t reserved_94; // offset: 94  (0x5E)
	uint32_t reserved_95; // offset: 95  (0x5F)
	uint32_t reserved_96; // offset: 96  (0x60)
	uint32_t reserved_97; // offset: 97  (0x61)
	uint32_t reserved_98; // offset: 98  (0x62)
	uint32_t reserved_99; // offset: 99  (0x63)
	uint32_t reserved_100; // offset: 100  (0x64)
	uint32_t reserved_101; // offset: 101  (0x65)
	uint32_t reserved_102; // offset: 102  (0x66)
	uint32_t reserved_103; // offset: 103  (0x67)
	uint32_t reserved_104; // offset: 104  (0x68)
	uint32_t reserved_105; // offset: 105  (0x69)
	uint32_t disable_queue; // offset: 106  (0x6A)
	uint32_t reserved_107; // offset: 107  (0x6B)
	uint32_t reserved_108; // offset: 108  (0x6C)
	uint32_t reserved_109; // offset: 109  (0x6D)
	uint32_t reserved_110; // offset: 110  (0x6E)
	uint32_t reserved_111; // offset: 111  (0x6F)
	uint32_t reserved_112; // offset: 112  (0x70)
	uint32_t reserved_113; // offset: 113  (0x71)
	uint32_t reserved_114; // offset: 114  (0x72)
	uint32_t reserved_115; // offset: 115  (0x73)
	uint32_t reserved_116; // offset: 116  (0x74)
	uint32_t reserved_117; // offset: 117  (0x75)
	uint32_t reserved_118; // offset: 118  (0x76)
	uint32_t reserved_119; // offset: 119  (0x77)
	uint32_t reserved_120; // offset: 120  (0x78)
	uint32_t reserved_121; // offset: 121  (0x79)
	uint32_t reserved_122; // offset: 122  (0x7A)
	uint32_t reserved_123; // offset: 123  (0x7B)
	uint32_t reserved_124; // offset: 124  (0x7C)
	uint32_t reserved_125; // offset: 125  (0x7D)
	uint32_t reserved_126; // offset: 126  (0x7E)
	uint32_t reserved_127; // offset: 127  (0x7F)
	uint32_t cp_mqd_base_addr; // offset: 128  (0x80)
	uint32_t cp_mqd_base_addr_hi; // offset: 129  (0x81)
	uint32_t cp_gfx_hqd_active; // offset: 130  (0x82)
	uint32_t cp_gfx_hqd_vmid; // offset: 131  (0x83)
	uint32_t reserved_131; // offset: 132  (0x84)
	uint32_t reserved_132; // offset: 133  (0x85)
	uint32_t cp_gfx_hqd_queue_priority; // offset: 134  (0x86)
	uint32_t cp_gfx_hqd_quantum; // offset: 135  (0x87)
	uint32_t cp_gfx_hqd_base; // offset: 136  (0x88)
	uint32_t cp_gfx_hqd_base_hi; // offset: 137  (0x89)
	uint32_t cp_gfx_hqd_rptr; // offset: 138  (0x8A)
	uint32_t cp_gfx_hqd_rptr_addr; // offset: 139  (0x8B)
	uint32_t cp_gfx_hqd_rptr_addr_hi; // offset: 140  (0x8C)
	uint32_t cp_rb_wptr_poll_addr_lo; // offset: 141  (0x8D)
	uint32_t cp_rb_wptr_poll_addr_hi; // offset: 142  (0x8E)
	uint32_t cp_rb_doorbell_control; // offset: 143  (0x8F)
	uint32_t cp_gfx_hqd_offset; // offset: 144  (0x90)
	uint32_t cp_gfx_hqd_cntl; // offset: 145  (0x91)
	uint32_t reserved_146; // offset: 146  (0x92)
	uint32_t reserved_147; // offset: 147  (0x93)
	uint32_t cp_gfx_hqd_csmd_rptr; // offset: 148  (0x94)
	uint32_t cp_gfx_hqd_wptr; // offset: 149  (0x95)
	uint32_t cp_gfx_hqd_wptr_hi; // offset: 150  (0x96)
	uint32_t reserved_151; // offset: 151  (0x97)
	uint32_t reserved_152; // offset: 152  (0x98)
	uint32_t reserved_153; // offset: 153  (0x99)
	uint32_t reserved_154; // offset: 154  (0x9A)
	uint32_t reserved_155; // offset: 155  (0x9B)
	uint32_t cp_gfx_hqd_mapped; // offset: 156  (0x9C)
	uint32_t cp_gfx_hqd_que_mgr_control; // offset: 157  (0x9D)
	uint32_t reserved_158; // offset: 158  (0x9E)
	uint32_t reserved_159; // offset: 159  (0x9F)
	uint32_t cp_gfx_hqd_hq_status0; // offset: 160  (0xA0)
	uint32_t cp_gfx_hqd_hq_control0; // offset: 161  (0xA1)
	uint32_t cp_gfx_mqd_control; // offset: 162  (0xA2)
	uint32_t reserved_163; // offset: 163  (0xA3)
	uint32_t reserved_164; // offset: 164  (0xA4)
	uint32_t reserved_165; // offset: 165  (0xA5)
	uint32_t reserved_166; // offset: 166  (0xA6)
	uint32_t reserved_167; // offset: 167  (0xA7)
	uint32_t reserved_168; // offset: 168  (0xA8)
	uint32_t reserved_169; // offset: 169  (0xA9)
	uint32_t cp_num_prim_needed_count0_lo; // offset: 170  (0xAA)
	uint32_t cp_num_prim_needed_count0_hi; // offset: 171  (0xAB)
	uint32_t cp_num_prim_needed_count1_lo; // offset: 172  (0xAC)
	uint32_t cp_num_prim_needed_count1_hi; // offset: 173  (0xAD)
	uint32_t cp_num_prim_needed_count2_lo; // offset: 174  (0xAE)
	uint32_t cp_num_prim_needed_count2_hi; // offset: 175  (0xAF)
	uint32_t cp_num_prim_needed_count3_lo; // offset: 176  (0xB0)
	uint32_t cp_num_prim_needed_count3_hi; // offset: 177  (0xB1)
	uint32_t cp_num_prim_written_count0_lo; // offset: 178  (0xB2)
	uint32_t cp_num_prim_written_count0_hi; // offset: 179  (0xB3)
	uint32_t cp_num_prim_written_count1_lo; // offset: 180  (0xB4)
	uint32_t cp_num_prim_written_count1_hi; // offset: 181  (0xB5)
	uint32_t cp_num_prim_written_count2_lo; // offset: 182  (0xB6)
	uint32_t cp_num_prim_written_count2_hi; // offset: 183  (0xB7)
	uint32_t cp_num_prim_written_count3_lo; // offset: 184  (0xB8)
	uint32_t cp_num_prim_written_count3_hi; // offset: 185  (0xB9)
	uint32_t reserved_186; // offset: 186  (0xBA)
	uint32_t reserved_187; // offset: 187  (0xBB)
	uint32_t reserved_188; // offset: 188  (0xBC)
	uint32_t reserved_189; // offset: 189  (0xBD)
	uint32_t mp1_smn_fps_cnt; // offset: 190  (0xBE)
	uint32_t sq_thread_trace_buf0_base; // offset: 191  (0xBF)
	uint32_t sq_thread_trace_buf0_size; // offset: 192  (0xC0)
	uint32_t sq_thread_trace_buf1_base; // offset: 193  (0xC1)
	uint32_t sq_thread_trace_buf1_size; // offset: 194  (0xC2)
	uint32_t sq_thread_trace_wptr; // offset: 195  (0xC3)
	uint32_t sq_thread_trace_mask; // offset: 196  (0xC4)
	uint32_t sq_thread_trace_token_mask; // offset: 197  (0xC5)
	uint32_t sq_thread_trace_ctrl; // offset: 198  (0xC6)
	uint32_t sq_thread_trace_status; // offset: 199  (0xC7)
	uint32_t sq_thread_trace_dropped_cntr; // offset: 200  (0xC8)
	uint32_t sq_thread_trace_finish_done_debug; // offset: 201  (0xC9)
	uint32_t sq_thread_trace_gfx_draw_cntr; // offset: 202  (0xCA)
	uint32_t sq_thread_trace_gfx_marker_cntr; // offset: 203  (0xCB)
	uint32_t sq_thread_trace_hp3d_draw_cntr; // offset: 204  (0xCC)
	uint32_t sq_thread_trace_hp3d_marker_cntr; // offset: 205  (0xCD)
	uint32_t reserved_206; // offset: 206  (0xCE)
	uint32_t reserved_207; // offset: 207  (0xCF)
	uint32_t cp_sc_psinvoc_count0_lo; // offset: 208  (0xD0)
	uint32_t cp_sc_psinvoc_count0_hi; // offset: 209  (0xD1)
	uint32_t cp_pa_cprim_count_lo; // offset: 210  (0xD2)
	uint32_t cp_pa_cprim_count_hi; // offset: 211  (0xD3)
	uint32_t cp_pa_cinvoc_count_lo; // offset: 212  (0xD4)
	uint32_t cp_pa_cinvoc_count_hi; // offset: 213  (0xD5)
	uint32_t cp_vgt_vsinvoc_count_lo; // offset: 214  (0xD6)
	uint32_t cp_vgt_vsinvoc_count_hi; // offset: 215  (0xD7)
	uint32_t cp_vgt_gsinvoc_count_lo; // offset: 216  (0xD8)
	uint32_t cp_vgt_gsinvoc_count_hi; // offset: 217  (0xD9)
	uint32_t cp_vgt_gsprim_count_lo; // offset: 218  (0xDA)
	uint32_t cp_vgt_gsprim_count_hi; // offset: 219  (0xDB)
	uint32_t cp_vgt_iaprim_count_lo; // offset: 220  (0xDC)
	uint32_t cp_vgt_iaprim_count_hi; // offset: 221  (0xDD)
	uint32_t cp_vgt_iavert_count_lo; // offset: 222  (0xDE)
	uint32_t cp_vgt_iavert_count_hi; // offset: 223  (0xDF)
	uint32_t cp_vgt_hsinvoc_count_lo; // offset: 224  (0xE0)
	uint32_t cp_vgt_hsinvoc_count_hi; // offset: 225  (0xE1)
	uint32_t cp_vgt_dsinvoc_count_lo; // offset: 226  (0xE2)
	uint32_t cp_vgt_dsinvoc_count_hi; // offset: 227  (0xE3)
	uint32_t cp_vgt_csinvoc_count_lo; // offset: 228  (0xE4)
	uint32_t cp_vgt_csinvoc_count_hi; // offset: 229  (0xE5)
	uint32_t reserved_230; // offset: 230  (0xE6)
	uint32_t reserved_231; // offset: 231  (0xE7)
	uint32_t reserved_232; // offset: 232  (0xE8)
	uint32_t reserved_233; // offset: 233  (0xE9)
	uint32_t reserved_234; // offset: 234  (0xEA)
	uint32_t reserved_235; // offset: 235  (0xEB)
	uint32_t reserved_236; // offset: 236  (0xEC)
	uint32_t reserved_237; // offset: 237  (0xED)
	uint32_t reserved_238; // offset: 238  (0xEE)
	uint32_t reserved_239; // offset: 239  (0xEF)
	uint32_t reserved_240; // offset: 240  (0xF0)
	uint32_t reserved_241; // offset: 241  (0xF1)
	uint32_t reserved_242; // offset: 242  (0xF2)
	uint32_t reserved_243; // offset: 243  (0xF3)
	uint32_t reserved_244; // offset: 244  (0xF4)
	uint32_t reserved_245; // offset: 245  (0xF5)
	uint32_t reserved_246; // offset: 246  (0xF6)
	uint32_t reserved_247; // offset: 247  (0xF7)
	uint32_t reserved_248; // offset: 248  (0xF8)
	uint32_t reserved_249; // offset: 249  (0xF9)
	uint32_t reserved_250; // offset: 250  (0xFA)
	uint32_t reserved_251; // offset: 251  (0xFB)
	uint32_t reserved_252; // offset: 252  (0xFC)
	uint32_t reserved_253; // offset: 253  (0xFD)
	uint32_t reserved_254; // offset: 254  (0xFE)
	uint32_t reserved_255; // offset: 255  (0xFF)
	uint32_t reserved_256; // offset: 256  (0x100)
	uint32_t reserved_257; // offset: 257  (0x101)
	uint32_t reserved_258; // offset: 258  (0x102)
	uint32_t reserved_259; // offset: 259  (0x103)
	uint32_t reserved_260; // offset: 260  (0x104)
	uint32_t reserved_261; // offset: 261  (0x105)
	uint32_t reserved_262; // offset: 262  (0x106)
	uint32_t reserved_263; // offset: 263  (0x107)
	uint32_t reserved_264; // offset: 264  (0x108)
	uint32_t reserved_265; // offset: 265  (0x109)
	uint32_t reserved_266; // offset: 266  (0x10A)
	uint32_t reserved_267; // offset: 267  (0x10B)
	uint32_t vgt_strmout_buffer_filled_size_0; // offset: 268  (0x10C)
	uint32_t vgt_strmout_buffer_filled_size_1; // offset: 269  (0x10D)
	uint32_t vgt_strmout_buffer_filled_size_2; // offset: 270  (0x10E)
	uint32_t vgt_strmout_buffer_filled_size_3; // offset: 271  (0x10F)
	uint32_t reserved_272; // offset: 272  (0x110)
	uint32_t reserved_273; // offset: 273  (0x111)
	uint32_t reserved_274; // offset: 274  (0x112)
	uint32_t reserved_275; // offset: 275  (0x113)
	uint32_t vgt_dma_max_size; // offset: 276  (0x114)
	uint32_t vgt_dma_num_instances; // offset: 277  (0x115)
	uint32_t reserved_278; // offset: 278  (0x116)
	uint32_t reserved_279; // offset: 279  (0x117)
	uint32_t reserved_280; // offset: 280  (0x118)
	uint32_t reserved_281; // offset: 281  (0x119)
	uint32_t reserved_282; // offset: 282  (0x11A)
	uint32_t reserved_283; // offset: 283  (0x11B)
	uint32_t reserved_284; // offset: 284  (0x11C)
	uint32_t reserved_285; // offset: 285  (0x11D)
	uint32_t reserved_286; // offset: 286  (0x11E)
	uint32_t reserved_287; // offset: 287  (0x11F)
	uint32_t it_set_base_ib_addr_lo; // offset: 288  (0x120)
	uint32_t it_set_base_ib_addr_hi; // offset: 289  (0x121)
	uint32_t reserved_290; // offset: 290  (0x122)
	uint32_t reserved_291; // offset: 291  (0x123)
	uint32_t reserved_292; // offset: 292  (0x124)
	uint32_t reserved_293; // offset: 293  (0x125)
	uint32_t reserved_294; // offset: 294  (0x126)
	uint32_t reserved_295; // offset: 295  (0x127)
	uint32_t reserved_296; // offset: 296  (0x128)
	uint32_t reserved_297; // offset: 297  (0x129)
	uint32_t reserved_298; // offset: 298  (0x12A)
	uint32_t reserved_299; // offset: 299  (0x12B)
	uint32_t reserved_300; // offset: 300  (0x12C)
	uint32_t reserved_301; // offset: 301  (0x12D)
	uint32_t reserved_302; // offset: 302  (0x12E)
	uint32_t reserved_303; // offset: 303  (0x12F)
	uint32_t reserved_304; // offset: 304  (0x130)
	uint32_t reserved_305; // offset: 305  (0x131)
	uint32_t reserved_306; // offset: 306  (0x132)
	uint32_t reserved_307; // offset: 307  (0x133)
	uint32_t reserved_308; // offset: 308  (0x134)
	uint32_t reserved_309; // offset: 309  (0x135)
	uint32_t reserved_310; // offset: 310  (0x136)
	uint32_t reserved_311; // offset: 311  (0x137)
	uint32_t reserved_312; // offset: 312  (0x138)
	uint32_t reserved_313; // offset: 313  (0x139)
	uint32_t reserved_314; // offset: 314  (0x13A)
	uint32_t reserved_315; // offset: 315  (0x13B)
	uint32_t reserved_316; // offset: 316  (0x13C)
	uint32_t reserved_317; // offset: 317  (0x13D)
	uint32_t reserved_318; // offset: 318  (0x13E)
	uint32_t reserved_319; // offset: 319  (0x13F)
	uint32_t reserved_320; // offset: 320  (0x140)
	uint32_t reserved_321; // offset: 321  (0x141)
	uint32_t reserved_322; // offset: 322  (0x142)
	uint32_t reserved_323; // offset: 323  (0x143)
	uint32_t reserved_324; // offset: 324  (0x144)
	uint32_t reserved_325; // offset: 325  (0x145)
	uint32_t reserved_326; // offset: 326  (0x146)
	uint32_t reserved_327; // offset: 327  (0x147)
	uint32_t reserved_328; // offset: 328  (0x148)
	uint32_t reserved_329; // offset: 329  (0x149)
	uint32_t reserved_330; // offset: 330  (0x14A)
	uint32_t reserved_331; // offset: 331  (0x14B)
	uint32_t reserved_332; // offset: 332  (0x14C)
	uint32_t reserved_333; // offset: 333  (0x14D)
	uint32_t reserved_334; // offset: 334  (0x14E)
	uint32_t reserved_335; // offset: 335  (0x14F)
	uint32_t reserved_336; // offset: 336  (0x150)
	uint32_t reserved_337; // offset: 337  (0x151)
	uint32_t reserved_338; // offset: 338  (0x152)
	uint32_t reserved_339; // offset: 339  (0x153)
	uint32_t reserved_340; // offset: 340  (0x154)
	uint32_t reserved_341; // offset: 341  (0x155)
	uint32_t reserved_342; // offset: 342  (0x156)
	uint32_t reserved_343; // offset: 343  (0x157)
	uint32_t reserved_344; // offset: 344  (0x158)
	uint32_t reserved_345; // offset: 345  (0x159)
	uint32_t reserved_346; // offset: 346  (0x15A)
	uint32_t reserved_347; // offset: 347  (0x15B)
	uint32_t reserved_348; // offset: 348  (0x15C)
	uint32_t reserved_349; // offset: 349  (0x15D)
	uint32_t reserved_350; // offset: 350  (0x15E)
	uint32_t reserved_351; // offset: 351  (0x15F)
	uint32_t reserved_352; // offset: 352  (0x160)
	uint32_t reserved_353; // offset: 353  (0x161)
	uint32_t reserved_354; // offset: 354  (0x162)
	uint32_t reserved_355; // offset: 355  (0x163)
	uint32_t spi_shader_pgm_rsrc3_ps; // offset: 356  (0x164)
	uint32_t spi_shader_pgm_rsrc3_vs; // offset: 357  (0x165)
	uint32_t spi_shader_pgm_rsrc3_gs; // offset: 358  (0x166)
	uint32_t spi_shader_pgm_rsrc3_hs; // offset: 359  (0x167)
	uint32_t spi_shader_pgm_rsrc4_ps; // offset: 360  (0x168)
	uint32_t spi_shader_pgm_rsrc4_vs; // offset: 361  (0x169)
	uint32_t spi_shader_pgm_rsrc4_gs; // offset: 362  (0x16A)
	uint32_t spi_shader_pgm_rsrc4_hs; // offset: 363  (0x16B)
	uint32_t db_occlusion_count0_low_00; // offset: 364  (0x16C)
	uint32_t db_occlusion_count0_hi_00; // offset: 365  (0x16D)
	uint32_t db_occlusion_count1_low_00; // offset: 366  (0x16E)
	uint32_t db_occlusion_count1_hi_00; // offset: 367  (0x16F)
	uint32_t db_occlusion_count2_low_00; // offset: 368  (0x170)
	uint32_t db_occlusion_count2_hi_00; // offset: 369  (0x171)
	uint32_t db_occlusion_count3_low_00; // offset: 370  (0x172)
	uint32_t db_occlusion_count3_hi_00; // offset: 371  (0x173)
	uint32_t db_occlusion_count0_low_01; // offset: 372  (0x174)
	uint32_t db_occlusion_count0_hi_01; // offset: 373  (0x175)
	uint32_t db_occlusion_count1_low_01; // offset: 374  (0x176)
	uint32_t db_occlusion_count1_hi_01; // offset: 375  (0x177)
	uint32_t db_occlusion_count2_low_01; // offset: 376  (0x178)
	uint32_t db_occlusion_count2_hi_01; // offset: 377  (0x179)
	uint32_t db_occlusion_count3_low_01; // offset: 378  (0x17A)
	uint32_t db_occlusion_count3_hi_01; // offset: 379  (0x17B)
	uint32_t db_occlusion_count0_low_02; // offset: 380  (0x17C)
	uint32_t db_occlusion_count0_hi_02; // offset: 381  (0x17D)
	uint32_t db_occlusion_count1_low_02; // offset: 382  (0x17E)
	uint32_t db_occlusion_count1_hi_02; // offset: 383  (0x17F)
	uint32_t db_occlusion_count2_low_02; // offset: 384  (0x180)
	uint32_t db_occlusion_count2_hi_02; // offset: 385  (0x181)
	uint32_t db_occlusion_count3_low_02; // offset: 386  (0x182)
	uint32_t db_occlusion_count3_hi_02; // offset: 387  (0x183)
	uint32_t db_occlusion_count0_low_03; // offset: 388  (0x184)
	uint32_t db_occlusion_count0_hi_03; // offset: 389  (0x185)
	uint32_t db_occlusion_count1_low_03; // offset: 390  (0x186)
	uint32_t db_occlusion_count1_hi_03; // offset: 391  (0x187)
	uint32_t db_occlusion_count2_low_03; // offset: 392  (0x188)
	uint32_t db_occlusion_count2_hi_03; // offset: 393  (0x189)
	uint32_t db_occlusion_count3_low_03; // offset: 394  (0x18A)
	uint32_t db_occlusion_count3_hi_03; // offset: 395  (0x18B)
	uint32_t db_occlusion_count0_low_04; // offset: 396  (0x18C)
	uint32_t db_occlusion_count0_hi_04; // offset: 397  (0x18D)
	uint32_t db_occlusion_count1_low_04; // offset: 398  (0x18E)
	uint32_t db_occlusion_count1_hi_04; // offset: 399  (0x18F)
	uint32_t db_occlusion_count2_low_04; // offset: 400  (0x190)
	uint32_t db_occlusion_count2_hi_04; // offset: 401  (0x191)
	uint32_t db_occlusion_count3_low_04; // offset: 402  (0x192)
	uint32_t db_occlusion_count3_hi_04; // offset: 403  (0x193)
	uint32_t db_occlusion_count0_low_05; // offset: 404  (0x194)
	uint32_t db_occlusion_count0_hi_05; // offset: 405  (0x195)
	uint32_t db_occlusion_count1_low_05; // offset: 406  (0x196)
	uint32_t db_occlusion_count1_hi_05; // offset: 407  (0x197)
	uint32_t db_occlusion_count2_low_05; // offset: 408  (0x198)
	uint32_t db_occlusion_count2_hi_05; // offset: 409  (0x199)
	uint32_t db_occlusion_count3_low_05; // offset: 410  (0x19A)
	uint32_t db_occlusion_count3_hi_05; // offset: 411  (0x19B)
	uint32_t db_occlusion_count0_low_06; // offset: 412  (0x19C)
	uint32_t db_occlusion_count0_hi_06; // offset: 413  (0x19D)
	uint32_t db_occlusion_count1_low_06; // offset: 414  (0x19E)
	uint32_t db_occlusion_count1_hi_06; // offset: 415  (0x19F)
	uint32_t db_occlusion_count2_low_06; // offset: 416  (0x1A0)
	uint32_t db_occlusion_count2_hi_06; // offset: 417  (0x1A1)
	uint32_t db_occlusion_count3_low_06; // offset: 418  (0x1A2)
	uint32_t db_occlusion_count3_hi_06; // offset: 419  (0x1A3)
	uint32_t db_occlusion_count0_low_07; // offset: 420  (0x1A4)
	uint32_t db_occlusion_count0_hi_07; // offset: 421  (0x1A5)
	uint32_t db_occlusion_count1_low_07; // offset: 422  (0x1A6)
	uint32_t db_occlusion_count1_hi_07; // offset: 423  (0x1A7)
	uint32_t db_occlusion_count2_low_07; // offset: 424  (0x1A8)
	uint32_t db_occlusion_count2_hi_07; // offset: 425  (0x1A9)
	uint32_t db_occlusion_count3_low_07; // offset: 426  (0x1AA)
	uint32_t db_occlusion_count3_hi_07; // offset: 427  (0x1AB)
	uint32_t db_occlusion_count0_low_10; // offset: 428  (0x1AC)
	uint32_t db_occlusion_count0_hi_10; // offset: 429  (0x1AD)
	uint32_t db_occlusion_count1_low_10; // offset: 430  (0x1AE)
	uint32_t db_occlusion_count1_hi_10; // offset: 431  (0x1AF)
	uint32_t db_occlusion_count2_low_10; // offset: 432  (0x1B0)
	uint32_t db_occlusion_count2_hi_10; // offset: 433  (0x1B1)
	uint32_t db_occlusion_count3_low_10; // offset: 434  (0x1B2)
	uint32_t db_occlusion_count3_hi_10; // offset: 435  (0x1B3)
	uint32_t db_occlusion_count0_low_11; // offset: 436  (0x1B4)
	uint32_t db_occlusion_count0_hi_11; // offset: 437  (0x1B5)
	uint32_t db_occlusion_count1_low_11; // offset: 438  (0x1B6)
	uint32_t db_occlusion_count1_hi_11; // offset: 439  (0x1B7)
	uint32_t db_occlusion_count2_low_11; // offset: 440  (0x1B8)
	uint32_t db_occlusion_count2_hi_11; // offset: 441  (0x1B9)
	uint32_t db_occlusion_count3_low_11; // offset: 442  (0x1BA)
	uint32_t db_occlusion_count3_hi_11; // offset: 443  (0x1BB)
	uint32_t db_occlusion_count0_low_12; // offset: 444  (0x1BC)
	uint32_t db_occlusion_count0_hi_12; // offset: 445  (0x1BD)
	uint32_t db_occlusion_count1_low_12; // offset: 446  (0x1BE)
	uint32_t db_occlusion_count1_hi_12; // offset: 447  (0x1BF)
	uint32_t db_occlusion_count2_low_12; // offset: 448  (0x1C0)
	uint32_t db_occlusion_count2_hi_12; // offset: 449  (0x1C1)
	uint32_t db_occlusion_count3_low_12; // offset: 450  (0x1C2)
	uint32_t db_occlusion_count3_hi_12; // offset: 451  (0x1C3)
	uint32_t db_occlusion_count0_low_13; // offset: 452  (0x1C4)
	uint32_t db_occlusion_count0_hi_13; // offset: 453  (0x1C5)
	uint32_t db_occlusion_count1_low_13; // offset: 454  (0x1C6)
	uint32_t db_occlusion_count1_hi_13; // offset: 455  (0x1C7)
	uint32_t db_occlusion_count2_low_13; // offset: 456  (0x1C8)
	uint32_t db_occlusion_count2_hi_13; // offset: 457  (0x1C9)
	uint32_t db_occlusion_count3_low_13; // offset: 458  (0x1CA)
	uint32_t db_occlusion_count3_hi_13; // offset: 459  (0x1CB)
	uint32_t db_occlusion_count0_low_14; // offset: 460  (0x1CC)
	uint32_t db_occlusion_count0_hi_14; // offset: 461  (0x1CD)
	uint32_t db_occlusion_count1_low_14; // offset: 462  (0x1CE)
	uint32_t db_occlusion_count1_hi_14; // offset: 463  (0x1CF)
	uint32_t db_occlusion_count2_low_14; // offset: 464  (0x1D0)
	uint32_t db_occlusion_count2_hi_14; // offset: 465  (0x1D1)
	uint32_t db_occlusion_count3_low_14; // offset: 466  (0x1D2)
	uint32_t db_occlusion_count3_hi_14; // offset: 467  (0x1D3)
	uint32_t db_occlusion_count0_low_15; // offset: 468  (0x1D4)
	uint32_t db_occlusion_count0_hi_15; // offset: 469  (0x1D5)
	uint32_t db_occlusion_count1_low_15; // offset: 470  (0x1D6)
	uint32_t db_occlusion_count1_hi_15; // offset: 471  (0x1D7)
	uint32_t db_occlusion_count2_low_15; // offset: 472  (0x1D8)
	uint32_t db_occlusion_count2_hi_15; // offset: 473  (0x1D9)
	uint32_t db_occlusion_count3_low_15; // offset: 474  (0x1DA)
	uint32_t db_occlusion_count3_hi_15; // offset: 475  (0x1DB)
	uint32_t db_occlusion_count0_low_16; // offset: 476  (0x1DC)
	uint32_t db_occlusion_count0_hi_16; // offset: 477  (0x1DD)
	uint32_t db_occlusion_count1_low_16; // offset: 478  (0x1DE)
	uint32_t db_occlusion_count1_hi_16; // offset: 479  (0x1DF)
	uint32_t db_occlusion_count2_low_16; // offset: 480  (0x1E0)
	uint32_t db_occlusion_count2_hi_16; // offset: 481  (0x1E1)
	uint32_t db_occlusion_count3_low_16; // offset: 482  (0x1E2)
	uint32_t db_occlusion_count3_hi_16; // offset: 483  (0x1E3)
	uint32_t db_occlusion_count0_low_17; // offset: 484  (0x1E4)
	uint32_t db_occlusion_count0_hi_17; // offset: 485  (0x1E5)
	uint32_t db_occlusion_count1_low_17; // offset: 486  (0x1E6)
	uint32_t db_occlusion_count1_hi_17; // offset: 487  (0x1E7)
	uint32_t db_occlusion_count2_low_17; // offset: 488  (0x1E8)
	uint32_t db_occlusion_count2_hi_17; // offset: 489  (0x1E9)
	uint32_t db_occlusion_count3_low_17; // offset: 490  (0x1EA)
	uint32_t db_occlusion_count3_hi_17; // offset: 491  (0x1EB)
	uint32_t reserved_492; // offset: 492  (0x1EC)
	uint32_t reserved_493; // offset: 493  (0x1ED)
	uint32_t reserved_494; // offset: 494  (0x1EE)
	uint32_t reserved_495; // offset: 495  (0x1EF)
	uint32_t reserved_496; // offset: 496  (0x1F0)
	uint32_t reserved_497; // offset: 497  (0x1F1)
	uint32_t reserved_498; // offset: 498  (0x1F2)
	uint32_t reserved_499; // offset: 499  (0x1F3)
	uint32_t reserved_500; // offset: 500  (0x1F4)
	uint32_t reserved_501; // offset: 501  (0x1F5)
	uint32_t reserved_502; // offset: 502  (0x1F6)
	uint32_t reserved_503; // offset: 503  (0x1F7)
	uint32_t reserved_504; // offset: 504  (0x1F8)
	uint32_t reserved_505; // offset: 505  (0x1F9)
	uint32_t reserved_506; // offset: 506  (0x1FA)
	uint32_t reserved_507; // offset: 507  (0x1FB)
	uint32_t reserved_508; // offset: 508  (0x1FC)
	uint32_t reserved_509; // offset: 509  (0x1FD)
	uint32_t reserved_510; // offset: 510  (0x1FE)
	uint32_t reserved_511; // offset: 511  (0x1FF)
};

struct v10_sdma_mqd {
	uint32_t sdmax_rlcx_rb_cntl;
	uint32_t sdmax_rlcx_rb_base;
	uint32_t sdmax_rlcx_rb_base_hi;
	uint32_t sdmax_rlcx_rb_rptr;
	uint32_t sdmax_rlcx_rb_rptr_hi;
	uint32_t sdmax_rlcx_rb_wptr;
	uint32_t sdmax_rlcx_rb_wptr_hi;
	uint32_t sdmax_rlcx_rb_wptr_poll_cntl;
	uint32_t sdmax_rlcx_rb_rptr_addr_hi;
	uint32_t sdmax_rlcx_rb_rptr_addr_lo;
	uint32_t sdmax_rlcx_ib_cntl;
	uint32_t sdmax_rlcx_ib_rptr;
	uint32_t sdmax_rlcx_ib_offset;
	uint32_t sdmax_rlcx_ib_base_lo;
	uint32_t sdmax_rlcx_ib_base_hi;
	uint32_t sdmax_rlcx_ib_size;
	uint32_t sdmax_rlcx_skip_cntl;
	uint32_t sdmax_rlcx_context_status;
	uint32_t sdmax_rlcx_doorbell;
	uint32_t sdmax_rlcx_status;
	uint32_t sdmax_rlcx_doorbell_log;
	uint32_t sdmax_rlcx_watermark;
	uint32_t sdmax_rlcx_doorbell_offset;
	uint32_t sdmax_rlcx_csa_addr_lo;
	uint32_t sdmax_rlcx_csa_addr_hi;
	uint32_t sdmax_rlcx_ib_sub_remain;
	uint32_t sdmax_rlcx_preempt;
	uint32_t sdmax_rlcx_dummy_reg;
	uint32_t sdmax_rlcx_rb_wptr_poll_addr_hi;
	uint32_t sdmax_rlcx_rb_wptr_poll_addr_lo;
	uint32_t sdmax_rlcx_rb_aql_cntl;
	uint32_t sdmax_rlcx_minor_ptr_update;
	uint32_t sdmax_rlcx_midcmd_data0;
	uint32_t sdmax_rlcx_midcmd_data1;
	uint32_t sdmax_rlcx_midcmd_data2;
	uint32_t sdmax_rlcx_midcmd_data3;
	uint32_t sdmax_rlcx_midcmd_data4;
	uint32_t sdmax_rlcx_midcmd_data5;
	uint32_t sdmax_rlcx_midcmd_data6;
	uint32_t sdmax_rlcx_midcmd_data7;
	uint32_t sdmax_rlcx_midcmd_data8;
	uint32_t sdmax_rlcx_midcmd_cntl;
	uint32_t reserved_42;
	uint32_t reserved_43;
	uint32_t reserved_44;
	uint32_t reserved_45;
	uint32_t reserved_46;
	uint32_t reserved_47;
	uint32_t reserved_48;
	uint32_t reserved_49;
	uint32_t reserved_50;
	uint32_t reserved_51;
	uint32_t reserved_52;
	uint32_t reserved_53;
	uint32_t reserved_54;
	uint32_t reserved_55;
	uint32_t reserved_56;
	uint32_t reserved_57;
	uint32_t reserved_58;
	uint32_t reserved_59;
	uint32_t reserved_60;
	uint32_t reserved_61;
	uint32_t reserved_62;
	uint32_t reserved_63;
	uint32_t reserved_64;
	uint32_t reserved_65;
	uint32_t reserved_66;
	uint32_t reserved_67;
	uint32_t reserved_68;
	uint32_t reserved_69;
	uint32_t reserved_70;
	uint32_t reserved_71;
	uint32_t reserved_72;
	uint32_t reserved_73;
	uint32_t reserved_74;
	uint32_t reserved_75;
	uint32_t reserved_76;
	uint32_t reserved_77;
	uint32_t reserved_78;
	uint32_t reserved_79;
	uint32_t reserved_80;
	uint32_t reserved_81;
	uint32_t reserved_82;
	uint32_t reserved_83;
	uint32_t reserved_84;
	uint32_t reserved_85;
	uint32_t reserved_86;
	uint32_t reserved_87;
	uint32_t reserved_88;
	uint32_t reserved_89;
	uint32_t reserved_90;
	uint32_t reserved_91;
	uint32_t reserved_92;
	uint32_t reserved_93;
	uint32_t reserved_94;
	uint32_t reserved_95;
	uint32_t reserved_96;
	uint32_t reserved_97;
	uint32_t reserved_98;
	uint32_t reserved_99;
	uint32_t reserved_100;
	uint32_t reserved_101;
	uint32_t reserved_102;
	uint32_t reserved_103;
	uint32_t reserved_104;
	uint32_t reserved_105;
	uint32_t reserved_106;
	uint32_t reserved_107;
	uint32_t reserved_108;
	uint32_t reserved_109;
	uint32_t reserved_110;
	uint32_t reserved_111;
	uint32_t reserved_112;
	uint32_t reserved_113;
	uint32_t reserved_114;
	uint32_t reserved_115;
	uint32_t reserved_116;
	uint32_t reserved_117;
	uint32_t reserved_118;
	uint32_t reserved_119;
	uint32_t reserved_120;
	uint32_t reserved_121;
	uint32_t reserved_122;
	uint32_t reserved_123;
	uint32_t reserved_124;
	uint32_t reserved_125;
	uint32_t reserved_126;
	uint32_t reserved_127;
	uint32_t sdma_engine_id;
	uint32_t sdma_queue_id;
};

struct v10_compute_mqd {
	uint32_t header;
	uint32_t compute_dispatch_initiator;
	uint32_t compute_dim_x;
	uint32_t compute_dim_y;
	uint32_t compute_dim_z;
	uint32_t compute_start_x;
	uint32_t compute_start_y;
	uint32_t compute_start_z;
	uint32_t compute_num_thread_x;
	uint32_t compute_num_thread_y;
	uint32_t compute_num_thread_z;
	uint32_t compute_pipelinestat_enable;
	uint32_t compute_perfcount_enable;
	uint32_t compute_pgm_lo;
	uint32_t compute_pgm_hi;
	uint32_t compute_tba_lo;
	uint32_t compute_tba_hi;
	uint32_t compute_tma_lo;
	uint32_t compute_tma_hi;
	uint32_t compute_pgm_rsrc1;
	uint32_t compute_pgm_rsrc2;
	uint32_t compute_vmid;
	uint32_t compute_resource_limits;
	uint32_t compute_static_thread_mgmt_se0;
	uint32_t compute_static_thread_mgmt_se1;
	uint32_t compute_tmpring_size;
	uint32_t compute_static_thread_mgmt_se2;
	uint32_t compute_static_thread_mgmt_se3;
	uint32_t compute_restart_x;
	uint32_t compute_restart_y;
	uint32_t compute_restart_z;
	uint32_t compute_thread_trace_enable;
	uint32_t compute_misc_reserved;
	uint32_t compute_dispatch_id;
	uint32_t compute_threadgroup_id;
	uint32_t compute_relaunch;
	uint32_t compute_wave_restore_addr_lo;
	uint32_t compute_wave_restore_addr_hi;
	uint32_t compute_wave_restore_control;
	uint32_t reserved_39;
	uint32_t reserved_40;
	uint32_t reserved_41;
	uint32_t reserved_42;
	uint32_t reserved_43;
	uint32_t reserved_44;
	uint32_t reserved_45;
	uint32_t reserved_46;
	uint32_t reserved_47;
	uint32_t reserved_48;
	uint32_t reserved_49;
	uint32_t reserved_50;
	uint32_t reserved_51;
	uint32_t reserved_52;
	uint32_t reserved_53;
	uint32_t reserved_54;
	uint32_t reserved_55;
	uint32_t reserved_56;
	uint32_t reserved_57;
	uint32_t reserved_58;
	uint32_t reserved_59;
	uint32_t reserved_60;
	uint32_t reserved_61;
	uint32_t reserved_62;
	uint32_t reserved_63;
	uint32_t reserved_64;
	uint32_t compute_user_data_0;
	uint32_t compute_user_data_1;
	uint32_t compute_user_data_2;
	uint32_t compute_user_data_3;
	uint32_t compute_user_data_4;
	uint32_t compute_user_data_5;
	uint32_t compute_user_data_6;
	uint32_t compute_user_data_7;
	uint32_t compute_user_data_8;
	uint32_t compute_user_data_9;
	uint32_t compute_user_data_10;
	uint32_t compute_user_data_11;
	uint32_t compute_user_data_12;
	uint32_t compute_user_data_13;
	uint32_t compute_user_data_14;
	uint32_t compute_user_data_15;
	uint32_t cp_compute_csinvoc_count_lo;
	uint32_t cp_compute_csinvoc_count_hi;
	uint32_t reserved_83;
	uint32_t reserved_84;
	uint32_t reserved_85;
	uint32_t cp_mqd_query_time_lo;
	uint32_t cp_mqd_query_time_hi;
	uint32_t cp_mqd_connect_start_time_lo;
	uint32_t cp_mqd_connect_start_time_hi;
	uint32_t cp_mqd_connect_end_time_lo;
	uint32_t cp_mqd_connect_end_time_hi;
	uint32_t cp_mqd_connect_end_wf_count;
	uint32_t cp_mqd_connect_end_pq_rptr;
	uint32_t cp_mqd_connect_end_pq_wptr;
	uint32_t cp_mqd_connect_end_ib_rptr;
	uint32_t cp_mqd_readindex_lo;
	uint32_t cp_mqd_readindex_hi;
	uint32_t cp_mqd_save_start_time_lo;
	uint32_t cp_mqd_save_start_time_hi;
	uint32_t cp_mqd_save_end_time_lo;
	uint32_t cp_mqd_save_end_time_hi;
	uint32_t cp_mqd_restore_start_time_lo;
	uint32_t cp_mqd_restore_start_time_hi;
	uint32_t cp_mqd_restore_end_time_lo;
	uint32_t cp_mqd_restore_end_time_hi;
	uint32_t disable_queue;
	uint32_t reserved_107;
	uint32_t gds_cs_ctxsw_cnt0;
	uint32_t gds_cs_ctxsw_cnt1;
	uint32_t gds_cs_ctxsw_cnt2;
	uint32_t gds_cs_ctxsw_cnt3;
	uint32_t reserved_112;
	uint32_t reserved_113;
	uint32_t cp_pq_exe_status_lo;
	uint32_t cp_pq_exe_status_hi;
	uint32_t cp_packet_id_lo;
	uint32_t cp_packet_id_hi;
	uint32_t cp_packet_exe_status_lo;
	uint32_t cp_packet_exe_status_hi;
	uint32_t gds_save_base_addr_lo;
	uint32_t gds_save_base_addr_hi;
	uint32_t gds_save_mask_lo;
	uint32_t gds_save_mask_hi;
	uint32_t ctx_save_base_addr_lo;
	uint32_t ctx_save_base_addr_hi;
	uint32_t reserved_126;
	uint32_t reserved_127;
	uint32_t cp_mqd_base_addr_lo;
	uint32_t cp_mqd_base_addr_hi;
	uint32_t cp_hqd_active;
	uint32_t cp_hqd_vmid;
	uint32_t cp_hqd_persistent_state;
	uint32_t cp_hqd_pipe_priority;
	uint32_t cp_hqd_queue_priority;
	uint32_t cp_hqd_quantum;
	uint32_t cp_hqd_pq_base_lo;
	uint32_t cp_hqd_pq_base_hi;
	uint32_t cp_hqd_pq_rptr;
	uint32_t cp_hqd_pq_rptr_report_addr_lo;
	uint32_t cp_hqd_pq_rptr_report_addr_hi;
	uint32_t cp_hqd_pq_wptr_poll_addr_lo;
	uint32_t cp_hqd_pq_wptr_poll_addr_hi;
	uint32_t cp_hqd_pq_doorbell_control;
	uint32_t reserved_144;
	uint32_t cp_hqd_pq_control;
	uint32_t cp_hqd_ib_base_addr_lo;
	uint32_t cp_hqd_ib_base_addr_hi;
	uint32_t cp_hqd_ib_rptr;
	uint32_t cp_hqd_ib_control;
	uint32_t cp_hqd_iq_timer;
	uint32_t cp_hqd_iq_rptr;
	uint32_t cp_hqd_dequeue_request;
	uint32_t cp_hqd_dma_offload;
	uint32_t cp_hqd_sema_cmd;
	uint32_t cp_hqd_msg_type;
	uint32_t cp_hqd_atomic0_preop_lo;
	uint32_t cp_hqd_atomic0_preop_hi;
	uint32_t cp_hqd_atomic1_preop_lo;
	uint32_t cp_hqd_atomic1_preop_hi;
	uint32_t cp_hqd_hq_scheduler0;
	uint32_t cp_hqd_hq_scheduler1;
	uint32_t cp_mqd_control;
	uint32_t cp_hqd_hq_status1;
	uint32_t cp_hqd_hq_control1;
	uint32_t cp_hqd_eop_base_addr_lo;
	uint32_t cp_hqd_eop_base_addr_hi;
	uint32_t cp_hqd_eop_control;
	uint32_t cp_hqd_eop_rptr;
	uint32_t cp_hqd_eop_wptr;
	uint32_t cp_hqd_eop_done_events;
	uint32_t cp_hqd_ctx_save_base_addr_lo;
	uint32_t cp_hqd_ctx_save_base_addr_hi;
	uint32_t cp_hqd_ctx_save_control;
	uint32_t cp_hqd_cntl_stack_offset;
	uint32_t cp_hqd_cntl_stack_size;
	uint32_t cp_hqd_wg_state_offset;
	uint32_t cp_hqd_ctx_save_size;
	uint32_t cp_hqd_gds_resource_state;
	uint32_t cp_hqd_error;
	uint32_t cp_hqd_eop_wptr_mem;
	uint32_t cp_hqd_aql_control;
	uint32_t cp_hqd_pq_wptr_lo;
	uint32_t cp_hqd_pq_wptr_hi;
	uint32_t cp_hqd_suspend_cntl_stack_offset;
	uint32_t cp_hqd_suspend_cntl_stack_dw_cnt;
	uint32_t cp_hqd_suspend_wg_state_offset;
	uint32_t reserved_187;
	uint32_t reserved_188;
	uint32_t reserved_189;
	uint32_t reserved_190;
	uint32_t reserved_191;
	uint32_t iqtimer_pkt_header;
	uint32_t iqtimer_pkt_dw0;
	uint32_t iqtimer_pkt_dw1;
	uint32_t iqtimer_pkt_dw2;
	uint32_t iqtimer_pkt_dw3;
	uint32_t iqtimer_pkt_dw4;
	uint32_t iqtimer_pkt_dw5;
	uint32_t iqtimer_pkt_dw6;
	uint32_t iqtimer_pkt_dw7;
	uint32_t iqtimer_pkt_dw8;
	uint32_t iqtimer_pkt_dw9;
	uint32_t iqtimer_pkt_dw10;
	uint32_t iqtimer_pkt_dw11;
	uint32_t iqtimer_pkt_dw12;
	uint32_t iqtimer_pkt_dw13;
	uint32_t iqtimer_pkt_dw14;
	uint32_t iqtimer_pkt_dw15;
	uint32_t iqtimer_pkt_dw16;
	uint32_t iqtimer_pkt_dw17;
	uint32_t iqtimer_pkt_dw18;
	uint32_t iqtimer_pkt_dw19;
	uint32_t iqtimer_pkt_dw20;
	uint32_t iqtimer_pkt_dw21;
	uint32_t iqtimer_pkt_dw22;
	uint32_t iqtimer_pkt_dw23;
	uint32_t iqtimer_pkt_dw24;
	uint32_t iqtimer_pkt_dw25;
	uint32_t iqtimer_pkt_dw26;
	uint32_t iqtimer_pkt_dw27;
	uint32_t iqtimer_pkt_dw28;
	uint32_t iqtimer_pkt_dw29;
	uint32_t iqtimer_pkt_dw30;
	uint32_t iqtimer_pkt_dw31;
	uint32_t reserved_225;
	uint32_t reserved_226;
	uint32_t reserved_227;
	uint32_t set_resources_header;
	uint32_t set_resources_dw1;
	uint32_t set_resources_dw2;
	uint32_t set_resources_dw3;
	uint32_t set_resources_dw4;
	uint32_t set_resources_dw5;
	uint32_t set_resources_dw6;
	uint32_t set_resources_dw7;
	uint32_t reserved_236;
	uint32_t reserved_237;
	uint32_t reserved_238;
	uint32_t reserved_239;
	uint32_t queue_doorbell_id0;
	uint32_t queue_doorbell_id1;
	uint32_t queue_doorbell_id2;
	uint32_t queue_doorbell_id3;
	uint32_t queue_doorbell_id4;
	uint32_t queue_doorbell_id5;
	uint32_t queue_doorbell_id6;
	uint32_t queue_doorbell_id7;
	uint32_t queue_doorbell_id8;
	uint32_t queue_doorbell_id9;
	uint32_t queue_doorbell_id10;
	uint32_t queue_doorbell_id11;
	uint32_t queue_doorbell_id12;
	uint32_t queue_doorbell_id13;
	uint32_t queue_doorbell_id14;
	uint32_t queue_doorbell_id15;
	uint32_t reserved_256;
	uint32_t reserved_257;
	uint32_t reserved_258;
	uint32_t reserved_259;
	uint32_t reserved_260;
	uint32_t reserved_261;
	uint32_t reserved_262;
	uint32_t reserved_263;
	uint32_t reserved_264;
	uint32_t reserved_265;
	uint32_t reserved_266;
	uint32_t reserved_267;
	uint32_t reserved_268;
	uint32_t reserved_269;
	uint32_t reserved_270;
	uint32_t reserved_271;
	uint32_t reserved_272;
	uint32_t reserved_273;
	uint32_t reserved_274;
	uint32_t reserved_275;
	uint32_t reserved_276;
	uint32_t reserved_277;
	uint32_t reserved_278;
	uint32_t reserved_279;
	uint32_t reserved_280;
	uint32_t reserved_281;
	uint32_t reserved_282;
	uint32_t reserved_283;
	uint32_t reserved_284;
	uint32_t reserved_285;
	uint32_t reserved_286;
	uint32_t reserved_287;
	uint32_t reserved_288;
	uint32_t reserved_289;
	uint32_t reserved_290;
	uint32_t reserved_291;
	uint32_t reserved_292;
	uint32_t reserved_293;
	uint32_t reserved_294;
	uint32_t reserved_295;
	uint32_t reserved_296;
	uint32_t reserved_297;
	uint32_t reserved_298;
	uint32_t reserved_299;
	uint32_t reserved_300;
	uint32_t reserved_301;
	uint32_t reserved_302;
	uint32_t reserved_303;
	uint32_t reserved_304;
	uint32_t reserved_305;
	uint32_t reserved_306;
	uint32_t reserved_307;
	uint32_t reserved_308;
	uint32_t reserved_309;
	uint32_t reserved_310;
	uint32_t reserved_311;
	uint32_t reserved_312;
	uint32_t reserved_313;
	uint32_t reserved_314;
	uint32_t reserved_315;
	uint32_t reserved_316;
	uint32_t reserved_317;
	uint32_t reserved_318;
	uint32_t reserved_319;
	uint32_t reserved_320;
	uint32_t reserved_321;
	uint32_t reserved_322;
	uint32_t reserved_323;
	uint32_t reserved_324;
	uint32_t reserved_325;
	uint32_t reserved_326;
	uint32_t reserved_327;
	uint32_t reserved_328;
	uint32_t reserved_329;
	uint32_t reserved_330;
	uint32_t reserved_331;
	uint32_t reserved_332;
	uint32_t reserved_333;
	uint32_t reserved_334;
	uint32_t reserved_335;
	uint32_t reserved_336;
	uint32_t reserved_337;
	uint32_t reserved_338;
	uint32_t reserved_339;
	uint32_t reserved_340;
	uint32_t reserved_341;
	uint32_t reserved_342;
	uint32_t reserved_343;
	uint32_t reserved_344;
	uint32_t reserved_345;
	uint32_t reserved_346;
	uint32_t reserved_347;
	uint32_t reserved_348;
	uint32_t reserved_349;
	uint32_t reserved_350;
	uint32_t reserved_351;
	uint32_t reserved_352;
	uint32_t reserved_353;
	uint32_t reserved_354;
	uint32_t reserved_355;
	uint32_t reserved_356;
	uint32_t reserved_357;
	uint32_t reserved_358;
	uint32_t reserved_359;
	uint32_t reserved_360;
	uint32_t reserved_361;
	uint32_t reserved_362;
	uint32_t reserved_363;
	uint32_t reserved_364;
	uint32_t reserved_365;
	uint32_t reserved_366;
	uint32_t reserved_367;
	uint32_t reserved_368;
	uint32_t reserved_369;
	uint32_t reserved_370;
	uint32_t reserved_371;
	uint32_t reserved_372;
	uint32_t reserved_373;
	uint32_t reserved_374;
	uint32_t reserved_375;
	uint32_t reserved_376;
	uint32_t reserved_377;
	uint32_t reserved_378;
	uint32_t reserved_379;
	uint32_t reserved_380;
	uint32_t reserved_381;
	uint32_t reserved_382;
	uint32_t reserved_383;
	uint32_t reserved_384;
	uint32_t reserved_385;
	uint32_t reserved_386;
	uint32_t reserved_387;
	uint32_t reserved_388;
	uint32_t reserved_389;
	uint32_t reserved_390;
	uint32_t reserved_391;
	uint32_t reserved_392;
	uint32_t reserved_393;
	uint32_t reserved_394;
	uint32_t reserved_395;
	uint32_t reserved_396;
	uint32_t reserved_397;
	uint32_t reserved_398;
	uint32_t reserved_399;
	uint32_t reserved_400;
	uint32_t reserved_401;
	uint32_t reserved_402;
	uint32_t reserved_403;
	uint32_t reserved_404;
	uint32_t reserved_405;
	uint32_t reserved_406;
	uint32_t reserved_407;
	uint32_t reserved_408;
	uint32_t reserved_409;
	uint32_t reserved_410;
	uint32_t reserved_411;
	uint32_t reserved_412;
	uint32_t reserved_413;
	uint32_t reserved_414;
	uint32_t reserved_415;
	uint32_t reserved_416;
	uint32_t reserved_417;
	uint32_t reserved_418;
	uint32_t reserved_419;
	uint32_t reserved_420;
	uint32_t reserved_421;
	uint32_t reserved_422;
	uint32_t reserved_423;
	uint32_t reserved_424;
	uint32_t reserved_425;
	uint32_t reserved_426;
	uint32_t reserved_427;
	uint32_t reserved_428;
	uint32_t reserved_429;
	uint32_t reserved_430;
	uint32_t reserved_431;
	uint32_t reserved_432;
	uint32_t reserved_433;
	uint32_t reserved_434;
	uint32_t reserved_435;
	uint32_t reserved_436;
	uint32_t reserved_437;
	uint32_t reserved_438;
	uint32_t reserved_439;
	uint32_t reserved_440;
	uint32_t reserved_441;
	uint32_t reserved_442;
	uint32_t reserved_443;
	uint32_t reserved_444;
	uint32_t reserved_445;
	uint32_t reserved_446;
	uint32_t reserved_447;
	uint32_t reserved_448;
	uint32_t reserved_449;
	uint32_t reserved_450;
	uint32_t reserved_451;
	uint32_t reserved_452;
	uint32_t reserved_453;
	uint32_t reserved_454;
	uint32_t reserved_455;
	uint32_t reserved_456;
	uint32_t reserved_457;
	uint32_t reserved_458;
	uint32_t reserved_459;
	uint32_t reserved_460;
	uint32_t reserved_461;
	uint32_t reserved_462;
	uint32_t reserved_463;
	uint32_t reserved_464;
	uint32_t reserved_465;
	uint32_t reserved_466;
	uint32_t reserved_467;
	uint32_t reserved_468;
	uint32_t reserved_469;
	uint32_t reserved_470;
	uint32_t reserved_471;
	uint32_t reserved_472;
	uint32_t reserved_473;
	uint32_t reserved_474;
	uint32_t reserved_475;
	uint32_t reserved_476;
	uint32_t reserved_477;
	uint32_t reserved_478;
	uint32_t reserved_479;
	uint32_t reserved_480;
	uint32_t reserved_481;
	uint32_t reserved_482;
	uint32_t reserved_483;
	uint32_t reserved_484;
	uint32_t reserved_485;
	uint32_t reserved_486;
	uint32_t reserved_487;
	uint32_t reserved_488;
	uint32_t reserved_489;
	uint32_t reserved_490;
	uint32_t reserved_491;
	uint32_t reserved_492;
	uint32_t reserved_493;
	uint32_t reserved_494;
	uint32_t reserved_495;
	uint32_t reserved_496;
	uint32_t reserved_497;
	uint32_t reserved_498;
	uint32_t reserved_499;
	uint32_t reserved_500;
	uint32_t reserved_501;
	uint32_t reserved_502;
	uint32_t reserved_503;
	uint32_t reserved_504;
	uint32_t reserved_505;
	uint32_t reserved_506;
	uint32_t reserved_507;
	uint32_t reserved_508;
	uint32_t reserved_509;
	uint32_t reserved_510;
	uint32_t reserved_511;
};

struct v10_ce_ib_state {
	/* section of non chained ib part */
	uint32_t ce_ib_completion_status;
	uint32_t ce_constegnine_count;
	uint32_t ce_ibOffset_ib1;
	uint32_t ce_ibOffset_ib2;

	/* section of chained ib */
	uint32_t ce_chainib_addrlo_ib1;
	uint32_t ce_chainib_addrlo_ib2;
	uint32_t ce_chainib_addrhi_ib1;
	uint32_t ce_chainib_addrhi_ib2;
	uint32_t ce_chainib_size_ib1;
	uint32_t ce_chainib_size_ib2;
}; /* total 10 DWORD */

struct v10_de_ib_state {
	/* section of non chained ib part */
	uint32_t ib_completion_status;
	uint32_t de_constEngine_count;
	uint32_t ib_offset_ib1;
	uint32_t ib_offset_ib2;

	/* section of chained ib */
	uint32_t chain_ib_addrlo_ib1;
	uint32_t chain_ib_addrlo_ib2;
	uint32_t chain_ib_addrhi_ib1;
	uint32_t chain_ib_addrhi_ib2;
	uint32_t chain_ib_size_ib1;
	uint32_t chain_ib_size_ib2;

	/* section of non chained ib part */
	uint32_t preamble_begin_ib1;
	uint32_t preamble_begin_ib2;
	uint32_t preamble_end_ib1;
	uint32_t preamble_end_ib2;

	/* section of chained ib */
	uint32_t chain_ib_pream_addrlo_ib1;
	uint32_t chain_ib_pream_addrlo_ib2;
	uint32_t chain_ib_pream_addrhi_ib1;
	uint32_t chain_ib_pream_addrhi_ib2;

	/* section of non chained ib part */
	uint32_t draw_indirect_baseLo;
	uint32_t draw_indirect_baseHi;
	uint32_t disp_indirect_baseLo;
	uint32_t disp_indirect_baseHi;
	uint32_t gds_backup_addrlo;
	uint32_t gds_backup_addrhi;
	uint32_t index_base_addrlo;
	uint32_t index_base_addrhi;
	uint32_t sample_cntl;
}; /* Total of 27 DWORD */

struct v10_gfx_meta_data {
	/* 10 DWORD, address must be 4KB aligned */
	struct v10_ce_ib_state ce_payload;
	uint32_t reserved1[54];
	/* 27 DWORD, address must be 64B aligned */
	struct v10_de_ib_state de_payload;
	/* PFP IB base address which get pre-empted */
	uint32_t DeIbBaseAddrLo;
	uint32_t DeIbBaseAddrHi;
	uint32_t reserved2[931];
}; /* Total of 4K Bytes */

#endif /* V10_STRUCTS_H_ */
/*
 * Copyright 2021 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#if !defined (_soc21_ENUM_HEADER)
#define _soc21_ENUM_HEADER

#ifndef _DRIVER_BUILD
#ifndef GL_ZERO
#define GL__ZERO                      BLEND_ZERO
#define GL__ONE                       BLEND_ONE
#define GL__SRC_COLOR                 BLEND_SRC_COLOR
#define GL__ONE_MINUS_SRC_COLOR       BLEND_ONE_MINUS_SRC_COLOR
#define GL__DST_COLOR                 BLEND_DST_COLOR
#define GL__ONE_MINUS_DST_COLOR       BLEND_ONE_MINUS_DST_COLOR
#define GL__SRC_ALPHA                 BLEND_SRC_ALPHA
#define GL__ONE_MINUS_SRC_ALPHA       BLEND_ONE_MINUS_SRC_ALPHA
#define GL__DST_ALPHA                 BLEND_DST_ALPHA
#define GL__ONE_MINUS_DST_ALPHA       BLEND_ONE_MINUS_DST_ALPHA
#define GL__SRC_ALPHA_SATURATE        BLEND_SRC_ALPHA_SATURATE
#define GL__CONSTANT_COLOR            BLEND_CONSTANT_COLOR
#define GL__ONE_MINUS_CONSTANT_COLOR  BLEND_ONE_MINUS_CONSTANT_COLOR
#define GL__CONSTANT_ALPHA            BLEND_CONSTANT_ALPHA
#define GL__ONE_MINUS_CONSTANT_ALPHA  BLEND_ONE_MINUS_CONSTANT_ALPHA
#endif
#endif

/*******************************************************
 * Chip Enums
 *******************************************************/

/*
 * DSM_DATA_SEL enum
 */

typedef enum DSM_DATA_SEL {
DSM_DATA_SEL_DISABLE                     = 0x00000000,
DSM_DATA_SEL_0                           = 0x00000001,
DSM_DATA_SEL_1                           = 0x00000002,
DSM_DATA_SEL_BOTH                        = 0x00000003,
} DSM_DATA_SEL;

/*
 * DSM_ENABLE_ERROR_INJECT enum
 */

typedef enum DSM_ENABLE_ERROR_INJECT {
DSM_ENABLE_ERROR_INJECT_FED_IN           = 0x00000000,
DSM_ENABLE_ERROR_INJECT_SINGLE           = 0x00000001,
DSM_ENABLE_ERROR_INJECT_UNCORRECTABLE    = 0x00000002,
DSM_ENABLE_ERROR_INJECT_UNCORRECTABLE_LIMITED = 0x00000003,
} DSM_ENABLE_ERROR_INJECT;

/*
 * DSM_SELECT_INJECT_DELAY enum
 */

typedef enum DSM_SELECT_INJECT_DELAY {
DSM_SELECT_INJECT_DELAY_NO_DELAY         = 0x00000000,
DSM_SELECT_INJECT_DELAY_DELAY_ERROR      = 0x00000001,
} DSM_SELECT_INJECT_DELAY;

/*
 * DSM_SINGLE_WRITE enum
 */

typedef enum DSM_SINGLE_WRITE {
DSM_SINGLE_WRITE_DIS                     = 0x00000000,
DSM_SINGLE_WRITE_EN                      = 0x00000001,
} DSM_SINGLE_WRITE;

/*
 * ENUM_NUM_SIMD_PER_CU enum
 */

typedef enum ENUM_NUM_SIMD_PER_CU {
NUM_SIMD_PER_CU                          = 0x00000004,
} ENUM_NUM_SIMD_PER_CU;

/*
 * GATCL1RequestType enum
 */

typedef enum GATCL1RequestType {
GATCL1_TYPE_NORMAL                       = 0x00000000,
GATCL1_TYPE_SHOOTDOWN                    = 0x00000001,
GATCL1_TYPE_BYPASS                       = 0x00000002,
} GATCL1RequestType;

/*
 * GL0V_CACHE_POLICIES enum
 */

typedef enum GL0V_CACHE_POLICIES {
GL0V_CACHE_POLICY_MISS_LRU               = 0x00000000,
GL0V_CACHE_POLICY_MISS_EVICT             = 0x00000001,
GL0V_CACHE_POLICY_HIT_LRU                = 0x00000002,
GL0V_CACHE_POLICY_HIT_EVICT              = 0x00000003,
} GL0V_CACHE_POLICIES;

/*
 * GL1_CACHE_POLICIES enum
 */

typedef enum GL1_CACHE_POLICIES {
GL1_CACHE_POLICY_MISS_LRU                = 0x00000000,
GL1_CACHE_POLICY_MISS_EVICT              = 0x00000001,
GL1_CACHE_POLICY_HIT_LRU                 = 0x00000002,
GL1_CACHE_POLICY_HIT_EVICT               = 0x00000003,
} GL1_CACHE_POLICIES;

/*
 * GL1_CACHE_STORE_POLICIES enum
 */

typedef enum GL1_CACHE_STORE_POLICIES {
GL1_CACHE_STORE_POLICY_BYPASS            = 0x00000000,
} GL1_CACHE_STORE_POLICIES;

/*
 * GL2_CACHE_POLICIES enum
 */

typedef enum GL2_CACHE_POLICIES {
GL2_CACHE_POLICY_LRU                     = 0x00000000,
GL2_CACHE_POLICY_STREAM                  = 0x00000001,
GL2_CACHE_POLICY_NOA                     = 0x00000002,
GL2_CACHE_POLICY_BYPASS                  = 0x00000003,
} GL2_CACHE_POLICIES;

/*
 * Hdp_SurfaceEndian enum
 */

typedef enum Hdp_SurfaceEndian {
HDP_ENDIAN_NONE                          = 0x00000000,
HDP_ENDIAN_8IN16                         = 0x00000001,
HDP_ENDIAN_8IN32                         = 0x00000002,
HDP_ENDIAN_8IN64                         = 0x00000003,
} Hdp_SurfaceEndian;

/*
 * MTYPE enum
 */

typedef enum MTYPE {
MTYPE_C_RW_US                            = 0x00000000,
MTYPE_RESERVED_1                         = 0x00000001,
MTYPE_C_RO_S                             = 0x00000002,
MTYPE_UC                                 = 0x00000003,
MTYPE_C_RW_S                             = 0x00000004,
MTYPE_RESERVED_5                         = 0x00000005,
MTYPE_C_RO_US                            = 0x00000006,
MTYPE_RESERVED_7                         = 0x00000007,
} MTYPE;

/*
 * PERFMON_COUNTER_MODE enum
 */

typedef enum PERFMON_COUNTER_MODE {
PERFMON_COUNTER_MODE_ACCUM               = 0x00000000,
PERFMON_COUNTER_MODE_ACTIVE_CYCLES       = 0x00000001,
PERFMON_COUNTER_MODE_MAX                 = 0x00000002,
PERFMON_COUNTER_MODE_DIRTY               = 0x00000003,
PERFMON_COUNTER_MODE_SAMPLE              = 0x00000004,
PERFMON_COUNTER_MODE_CYCLES_SINCE_FIRST_EVENT = 0x00000005,
PERFMON_COUNTER_MODE_CYCLES_SINCE_LAST_EVENT = 0x00000006,
PERFMON_COUNTER_MODE_CYCLES_GE_HI        = 0x00000007,
PERFMON_COUNTER_MODE_CYCLES_EQ_HI        = 0x00000008,
PERFMON_COUNTER_MODE_INACTIVE_CYCLES     = 0x00000009,
PERFMON_COUNTER_MODE_RESERVED            = 0x0000000f,
} PERFMON_COUNTER_MODE;

/*
 * PERFMON_SPM_MODE enum
 */

typedef enum PERFMON_SPM_MODE {
PERFMON_SPM_MODE_OFF                     = 0x00000000,
PERFMON_SPM_MODE_16BIT_CLAMP             = 0x00000001,
PERFMON_SPM_MODE_16BIT_NO_CLAMP          = 0x00000002,
PERFMON_SPM_MODE_32BIT_CLAMP             = 0x00000003,
PERFMON_SPM_MODE_32BIT_NO_CLAMP          = 0x00000004,
PERFMON_SPM_MODE_RESERVED_5              = 0x00000005,
PERFMON_SPM_MODE_RESERVED_6              = 0x00000006,
PERFMON_SPM_MODE_RESERVED_7              = 0x00000007,
PERFMON_SPM_MODE_TEST_MODE_0             = 0x00000008,
PERFMON_SPM_MODE_TEST_MODE_1             = 0x00000009,
PERFMON_SPM_MODE_TEST_MODE_2             = 0x0000000a,
} PERFMON_SPM_MODE;

/*
 * RMI_CID enum
 */

typedef enum RMI_CID {
RMI_CID_CC                               = 0x00000000,
RMI_CID_FC                               = 0x00000001,
RMI_CID_CM                               = 0x00000002,
RMI_CID_DC                               = 0x00000003,
RMI_CID_Z                                = 0x00000004,
RMI_CID_S                                = 0x00000005,
RMI_CID_TILE                             = 0x00000006,
RMI_CID_ZPCPSD                           = 0x00000007,
} RMI_CID;

/*
 * ReadPolicy enum
 */

typedef enum ReadPolicy {
CACHE_LRU_RD                             = 0x00000000,
CACHE_STREAM_RD                          = 0x00000001,
CACHE_NOA                                = 0x00000002,
RESERVED_RDPOLICY                        = 0x00000003,
} ReadPolicy;

/*
 * SDMA_PERFMON_SEL enum
 */

typedef enum SDMA_PERFMON_SEL {
SDMA_PERFMON_SEL_CYCLE                   = 0x00000000,
SDMA_PERFMON_SEL_IDLE                    = 0x00000001,
SDMA_PERFMON_SEL_REG_IDLE                = 0x00000002,
SDMA_PERFMON_SEL_RB_EMPTY                = 0x00000003,
SDMA_PERFMON_SEL_RB_FULL                 = 0x00000004,
SDMA_PERFMON_SEL_RB_WPTR_WRAP            = 0x00000005,
SDMA_PERFMON_SEL_RB_RPTR_WRAP            = 0x00000006,
SDMA_PERFMON_SEL_RB_WPTR_POLL_READ       = 0x00000007,
SDMA_PERFMON_SEL_RB_RPTR_WB              = 0x00000008,
SDMA_PERFMON_SEL_RB_CMD_IDLE             = 0x00000009,
SDMA_PERFMON_SEL_RB_CMD_FULL             = 0x0000000a,
SDMA_PERFMON_SEL_IB_CMD_IDLE             = 0x0000000b,
SDMA_PERFMON_SEL_IB_CMD_FULL             = 0x0000000c,
SDMA_PERFMON_SEL_EX_IDLE                 = 0x0000000d,
SDMA_PERFMON_SEL_SRBM_REG_SEND           = 0x0000000e,
SDMA_PERFMON_SEL_EX_IDLE_POLL_TIMER_EXPIRE = 0x0000000f,
SDMA_PERFMON_SEL_WR_BA_RTR               = 0x00000010,
SDMA_PERFMON_SEL_MC_WR_IDLE              = 0x00000011,
SDMA_PERFMON_SEL_MC_WR_COUNT             = 0x00000012,
SDMA_PERFMON_SEL_RD_BA_RTR               = 0x00000013,
SDMA_PERFMON_SEL_MC_RD_IDLE              = 0x00000014,
SDMA_PERFMON_SEL_MC_RD_COUNT             = 0x00000015,
SDMA_PERFMON_SEL_MC_RD_RET_STALL         = 0x00000016,
SDMA_PERFMON_SEL_MC_RD_NO_POLL_IDLE      = 0x00000017,
SDMA_PERFMON_SEL_SEM_IDLE                = 0x0000001a,
SDMA_PERFMON_SEL_SEM_REQ_STALL           = 0x0000001b,
SDMA_PERFMON_SEL_SEM_REQ_COUNT           = 0x0000001c,
SDMA_PERFMON_SEL_SEM_RESP_INCOMPLETE     = 0x0000001d,
SDMA_PERFMON_SEL_SEM_RESP_FAIL           = 0x0000001e,
SDMA_PERFMON_SEL_SEM_RESP_PASS           = 0x0000001f,
SDMA_PERFMON_SEL_INT_IDLE                = 0x00000020,
SDMA_PERFMON_SEL_INT_REQ_STALL           = 0x00000021,
SDMA_PERFMON_SEL_INT_REQ_COUNT           = 0x00000022,
SDMA_PERFMON_SEL_INT_RESP_ACCEPTED       = 0x00000023,
SDMA_PERFMON_SEL_INT_RESP_RETRY          = 0x00000024,
SDMA_PERFMON_SEL_NUM_PACKET              = 0x00000025,
SDMA_PERFMON_SEL_CE_WREQ_IDLE            = 0x00000027,
SDMA_PERFMON_SEL_CE_WR_IDLE              = 0x00000028,
SDMA_PERFMON_SEL_CE_SPLIT_IDLE           = 0x00000029,
SDMA_PERFMON_SEL_CE_RREQ_IDLE            = 0x0000002a,
SDMA_PERFMON_SEL_CE_OUT_IDLE             = 0x0000002b,
SDMA_PERFMON_SEL_CE_IN_IDLE              = 0x0000002c,
SDMA_PERFMON_SEL_CE_DST_IDLE             = 0x0000002d,
SDMA_PERFMON_SEL_CE_AFIFO_FULL           = 0x00000030,
SDMA_PERFMON_SEL_CE_INFO_FULL            = 0x00000033,
SDMA_PERFMON_SEL_CE_INFO1_FULL           = 0x00000034,
SDMA_PERFMON_SEL_CE_RD_STALL             = 0x00000035,
SDMA_PERFMON_SEL_CE_WR_STALL             = 0x00000036,
SDMA_PERFMON_SEL_GFX_SELECT              = 0x00000037,
SDMA_PERFMON_SEL_RLC0_SELECT             = 0x00000038,
SDMA_PERFMON_SEL_RLC1_SELECT             = 0x00000039,
SDMA_PERFMON_SEL_PAGE_SELECT             = 0x0000003a,
SDMA_PERFMON_SEL_CTX_CHANGE              = 0x0000003b,
SDMA_PERFMON_SEL_CTX_CHANGE_EXPIRED      = 0x0000003c,
SDMA_PERFMON_SEL_CTX_CHANGE_EXCEPTION    = 0x0000003d,
SDMA_PERFMON_SEL_DOORBELL                = 0x0000003e,
SDMA_PERFMON_SEL_F32_L1_WR_VLD           = 0x0000003f,
SDMA_PERFMON_SEL_CE_L1_WR_VLD            = 0x00000040,
SDMA_PERFMON_SEL_CPF_SDMA_INVREQ         = 0x00000041,
SDMA_PERFMON_SEL_SDMA_CPF_INVACK         = 0x00000042,
SDMA_PERFMON_SEL_UTCL2_SDMA_INVREQ       = 0x00000043,
SDMA_PERFMON_SEL_SDMA_UTCL2_INVACK       = 0x00000044,
SDMA_PERFMON_SEL_UTCL2_SDMA_INVREQ_ALL   = 0x00000045,
SDMA_PERFMON_SEL_SDMA_UTCL2_INVACK_ALL   = 0x00000046,
SDMA_PERFMON_SEL_UTCL2_RET_XNACK         = 0x00000047,
SDMA_PERFMON_SEL_UTCL2_RET_ACK           = 0x00000048,
SDMA_PERFMON_SEL_UTCL2_FREE              = 0x00000049,
SDMA_PERFMON_SEL_SDMA_UTCL2_SEND         = 0x0000004a,
SDMA_PERFMON_SEL_DMA_L1_WR_SEND          = 0x0000004b,
SDMA_PERFMON_SEL_DMA_L1_RD_SEND          = 0x0000004c,
SDMA_PERFMON_SEL_DMA_MC_WR_SEND          = 0x0000004d,
SDMA_PERFMON_SEL_DMA_MC_RD_SEND          = 0x0000004e,
SDMA_PERFMON_SEL_GPUVM_INV_HIGH          = 0x0000004f,
SDMA_PERFMON_SEL_GPUVM_INV_LOW           = 0x00000050,
SDMA_PERFMON_SEL_L1_WRL2_IDLE            = 0x00000051,
SDMA_PERFMON_SEL_L1_RDL2_IDLE            = 0x00000052,
SDMA_PERFMON_SEL_L1_WRMC_IDLE            = 0x00000053,
SDMA_PERFMON_SEL_L1_RDMC_IDLE            = 0x00000054,
SDMA_PERFMON_SEL_L1_WR_INV_IDLE          = 0x00000055,
SDMA_PERFMON_SEL_L1_RD_INV_IDLE          = 0x00000056,
SDMA_PERFMON_SEL_META_L2_REQ_SEND        = 0x00000057,
SDMA_PERFMON_SEL_L2_META_RET_VLD         = 0x00000058,
SDMA_PERFMON_SEL_SDMA_UTCL2_RD_SEND      = 0x00000059,
SDMA_PERFMON_SEL_UTCL2_SDMA_RD_RTN       = 0x0000005a,
SDMA_PERFMON_SEL_SDMA_UTCL2_WR_SEND      = 0x0000005b,
SDMA_PERFMON_SEL_UTCL2_SDMA_WR_RTN       = 0x0000005c,
SDMA_PERFMON_SEL_META_REQ_SEND           = 0x0000005d,
SDMA_PERFMON_SEL_META_RTN_VLD            = 0x0000005e,
SDMA_PERFMON_SEL_TLBI_SEND               = 0x0000005f,
SDMA_PERFMON_SEL_TLBI_RTN                = 0x00000060,
SDMA_PERFMON_SEL_GCR_SEND                = 0x00000061,
SDMA_PERFMON_SEL_GCR_RTN                 = 0x00000062,
SDMA_PERFMON_SEL_UTCL1_TAG_DELAY_COUNTER = 0x00000063,
SDMA_PERFMON_SEL_MMHUB_TAG_DELAY_COUNTER = 0x00000064,
} SDMA_PERFMON_SEL;

/*
 * SDMA_PERF_SEL enum
 */

typedef enum SDMA_PERF_SEL {
SDMA_PERF_SEL_CYCLE                      = 0x00000000,
SDMA_PERF_SEL_IDLE                       = 0x00000001,
SDMA_PERF_SEL_REG_IDLE                   = 0x00000002,
SDMA_PERF_SEL_RB_EMPTY                   = 0x00000003,
SDMA_PERF_SEL_RB_FULL                    = 0x00000004,
SDMA_PERF_SEL_RB_WPTR_WRAP               = 0x00000005,
SDMA_PERF_SEL_RB_RPTR_WRAP               = 0x00000006,
SDMA_PERF_SEL_RB_WPTR_POLL_READ          = 0x00000007,
SDMA_PERF_SEL_RB_RPTR_WB                 = 0x00000008,
SDMA_PERF_SEL_RB_CMD_IDLE                = 0x00000009,
SDMA_PERF_SEL_RB_CMD_FULL                = 0x0000000a,
SDMA_PERF_SEL_IB_CMD_IDLE                = 0x0000000b,
SDMA_PERF_SEL_IB_CMD_FULL                = 0x0000000c,
SDMA_PERF_SEL_EX_IDLE                    = 0x0000000d,
SDMA_PERF_SEL_SRBM_REG_SEND              = 0x0000000e,
SDMA_PERF_SEL_EX_IDLE_POLL_TIMER_EXPIRE  = 0x0000000f,
SDMA_PERF_SEL_MC_WR_IDLE                 = 0x00000010,
SDMA_PERF_SEL_MC_WR_COUNT                = 0x00000011,
SDMA_PERF_SEL_MC_RD_IDLE                 = 0x00000012,
SDMA_PERF_SEL_MC_RD_COUNT                = 0x00000013,
SDMA_PERF_SEL_MC_RD_RET_STALL            = 0x00000014,
SDMA_PERF_SEL_MC_RD_NO_POLL_IDLE         = 0x00000015,
SDMA_PERF_SEL_SEM_IDLE                   = 0x00000018,
SDMA_PERF_SEL_SEM_REQ_STALL              = 0x00000019,
SDMA_PERF_SEL_SEM_REQ_COUNT              = 0x0000001a,
SDMA_PERF_SEL_SEM_RESP_INCOMPLETE        = 0x0000001b,
SDMA_PERF_SEL_SEM_RESP_FAIL              = 0x0000001c,
SDMA_PERF_SEL_SEM_RESP_PASS              = 0x0000001d,
SDMA_PERF_SEL_INT_IDLE                   = 0x0000001e,
SDMA_PERF_SEL_INT_REQ_STALL              = 0x0000001f,
SDMA_PERF_SEL_INT_REQ_COUNT              = 0x00000020,
SDMA_PERF_SEL_INT_RESP_ACCEPTED          = 0x00000021,
SDMA_PERF_SEL_INT_RESP_RETRY             = 0x00000022,
SDMA_PERF_SEL_NUM_PACKET                 = 0x00000023,
SDMA_PERF_SEL_CE_WREQ_IDLE               = 0x00000025,
SDMA_PERF_SEL_CE_WR_IDLE                 = 0x00000026,
SDMA_PERF_SEL_CE_SPLIT_IDLE              = 0x00000027,
SDMA_PERF_SEL_CE_RREQ_IDLE               = 0x00000028,
SDMA_PERF_SEL_CE_OUT_IDLE                = 0x00000029,
SDMA_PERF_SEL_CE_IN_IDLE                 = 0x0000002a,
SDMA_PERF_SEL_CE_DST_IDLE                = 0x0000002b,
SDMA_PERF_SEL_CE_AFIFO_FULL              = 0x0000002e,
SDMA_PERF_SEL_CE_INFO_FULL               = 0x00000031,
SDMA_PERF_SEL_CE_INFO1_FULL              = 0x00000032,
SDMA_PERF_SEL_CE_RD_STALL                = 0x00000033,
SDMA_PERF_SEL_CE_WR_STALL                = 0x00000034,
SDMA_PERF_SEL_GFX_SELECT                 = 0x00000035,
SDMA_PERF_SEL_RLC0_SELECT                = 0x00000036,
SDMA_PERF_SEL_RLC1_SELECT                = 0x00000037,
SDMA_PERF_SEL_PAGE_SELECT                = 0x00000038,
SDMA_PERF_SEL_CTX_CHANGE                 = 0x00000039,
SDMA_PERF_SEL_CTX_CHANGE_EXPIRED         = 0x0000003a,
SDMA_PERF_SEL_CTX_CHANGE_EXCEPTION       = 0x0000003b,
SDMA_PERF_SEL_DOORBELL                   = 0x0000003c,
SDMA_PERF_SEL_RD_BA_RTR                  = 0x0000003d,
SDMA_PERF_SEL_WR_BA_RTR                  = 0x0000003e,
SDMA_PERF_SEL_F32_L1_WR_VLD              = 0x0000003f,
SDMA_PERF_SEL_CE_L1_WR_VLD               = 0x00000040,
SDMA_PERF_SEL_CPF_SDMA_INVREQ            = 0x00000041,
SDMA_PERF_SEL_SDMA_CPF_INVACK            = 0x00000042,
SDMA_PERF_SEL_UTCL2_SDMA_INVREQ          = 0x00000043,
SDMA_PERF_SEL_SDMA_UTCL2_INVACK          = 0x00000044,
SDMA_PERF_SEL_UTCL2_SDMA_INVREQ_ALL      = 0x00000045,
SDMA_PERF_SEL_SDMA_UTCL2_INVACK_ALL      = 0x00000046,
SDMA_PERF_SEL_UTCL2_RET_XNACK            = 0x00000047,
SDMA_PERF_SEL_UTCL2_RET_ACK              = 0x00000048,
SDMA_PERF_SEL_UTCL2_FREE                 = 0x00000049,
SDMA_PERF_SEL_SDMA_UTCL2_SEND            = 0x0000004a,
SDMA_PERF_SEL_DMA_L1_WR_SEND             = 0x0000004b,
SDMA_PERF_SEL_DMA_L1_RD_SEND             = 0x0000004c,
SDMA_PERF_SEL_DMA_MC_WR_SEND             = 0x0000004d,
SDMA_PERF_SEL_DMA_MC_RD_SEND             = 0x0000004e,
SDMA_PERF_SEL_GPUVM_INV_HIGH             = 0x0000004f,
SDMA_PERF_SEL_GPUVM_INV_LOW              = 0x00000050,
SDMA_PERF_SEL_L1_WRL2_IDLE               = 0x00000051,
SDMA_PERF_SEL_L1_RDL2_IDLE               = 0x00000052,
SDMA_PERF_SEL_L1_WRMC_IDLE               = 0x00000053,
SDMA_PERF_SEL_L1_RDMC_IDLE               = 0x00000054,
SDMA_PERF_SEL_L1_WR_INV_IDLE             = 0x00000055,
SDMA_PERF_SEL_L1_RD_INV_IDLE             = 0x00000056,
SDMA_PERF_SEL_META_L2_REQ_SEND           = 0x00000057,
SDMA_PERF_SEL_L2_META_RET_VLD            = 0x00000058,
SDMA_PERF_SEL_SDMA_UTCL2_RD_SEND         = 0x00000059,
SDMA_PERF_SEL_UTCL2_SDMA_RD_RTN          = 0x0000005a,
SDMA_PERF_SEL_SDMA_UTCL2_WR_SEND         = 0x0000005b,
SDMA_PERF_SEL_UTCL2_SDMA_WR_RTN          = 0x0000005c,
SDMA_PERF_SEL_META_REQ_SEND              = 0x0000005d,
SDMA_PERF_SEL_META_RTN_VLD               = 0x0000005e,
SDMA_PERF_SEL_TLBI_SEND                  = 0x0000005f,
SDMA_PERF_SEL_TLBI_RTN                   = 0x00000060,
SDMA_PERF_SEL_GCR_SEND                   = 0x00000061,
SDMA_PERF_SEL_GCR_RTN                    = 0x00000062,
SDMA_PERF_SEL_CGCG_FENCE                 = 0x00000063,
SDMA_PERF_SEL_CE_CH_WR_REQ               = 0x00000064,
SDMA_PERF_SEL_CE_CH_WR_RET               = 0x00000065,
SDMA_PERF_SEL_F32_CH_WR_REQ              = 0x00000066,
SDMA_PERF_SEL_F32_CH_WR_RET              = 0x00000067,
SDMA_PERF_SEL_CE_OR_F32_CH_RD_REQ        = 0x00000068,
SDMA_PERF_SEL_CE_OR_F32_CH_RD_RET        = 0x00000069,
SDMA_PERF_SEL_RB_CH_RD_REQ               = 0x0000006a,
SDMA_PERF_SEL_RB_CH_RD_RET               = 0x0000006b,
SDMA_PERF_SEL_IB_CH_RD_REQ               = 0x0000006c,
SDMA_PERF_SEL_IB_CH_RD_RET               = 0x0000006d,
SDMA_PERF_SEL_WPTR_CH_RD_REQ             = 0x0000006e,
SDMA_PERF_SEL_WPTR_CH_RD_RET             = 0x0000006f,
SDMA_PERF_SEL_UTCL1_UTCL2_REQ            = 0x00000070,
SDMA_PERF_SEL_UTCL1_UTCL2_RET            = 0x00000071,
SDMA_PERF_SEL_CMD_OP_MATCH               = 0x00000072,
SDMA_PERF_SEL_CMD_OP_START               = 0x00000073,
SDMA_PERF_SEL_CMD_OP_END                 = 0x00000074,
SDMA_PERF_SEL_CE_BUSY                    = 0x00000075,
SDMA_PERF_SEL_CE_BUSY_START              = 0x00000076,
SDMA_PERF_SEL_CE_BUSY_END                = 0x00000077,
SDMA_PERF_SEL_F32_PERFCNT_TRIGGER        = 0x00000078,
SDMA_PERF_SEL_F32_PERFCNT_TRIGGER_START  = 0x00000079,
SDMA_PERF_SEL_F32_PERFCNT_TRIGGER_END    = 0x0000007a,
SDMA_PERF_SEL_CE_CH_WRREQ_SEND           = 0x0000007b,
SDMA_PERF_SEL_CH_CE_WRRET_VALID          = 0x0000007c,
SDMA_PERF_SEL_CE_CH_RDREQ_SEND           = 0x0000007d,
SDMA_PERF_SEL_CH_CE_RDRET_VALID          = 0x0000007e,
} SDMA_PERF_SEL;

/*
 * TCC_CACHE_POLICIES enum
 */

typedef enum TCC_CACHE_POLICIES {
TCC_CACHE_POLICY_LRU                     = 0x00000000,
TCC_CACHE_POLICY_STREAM                  = 0x00000001,
} TCC_CACHE_POLICIES;

/*
 * TCC_MTYPE enum
 */

typedef enum TCC_MTYPE {
MTYPE_NC                                 = 0x00000000,
MTYPE_WC                                 = 0x00000001,
MTYPE_CC                                 = 0x00000002,
} TCC_MTYPE;

/*
 * UTCL0FaultType enum
 */

typedef enum UTCL0FaultType {
UTCL0_XNACK_SUCCESS                      = 0x00000000,
UTCL0_XNACK_RETRY                        = 0x00000001,
UTCL0_XNACK_PRT                          = 0x00000002,
UTCL0_XNACK_NO_RETRY                     = 0x00000003,
} UTCL0FaultType;

/*
 * UTCL0RequestType enum
 */

typedef enum UTCL0RequestType {
UTCL0_TYPE_NORMAL                        = 0x00000000,
UTCL0_TYPE_SHOOTDOWN                     = 0x00000001,
UTCL0_TYPE_BYPASS                        = 0x00000002,
} UTCL0RequestType;

/*
 * UTCL1FaultType enum
 */

typedef enum UTCL1FaultType {
UTCL1_XNACK_SUCCESS                      = 0x00000000,
UTCL1_XNACK_RETRY                        = 0x00000001,
UTCL1_XNACK_PRT                          = 0x00000002,
UTCL1_XNACK_NO_RETRY                     = 0x00000003,
} UTCL1FaultType;

/*
 * UTCL1RequestType enum
 */

typedef enum UTCL1RequestType {
UTCL1_TYPE_NORMAL                        = 0x00000000,
UTCL1_TYPE_SHOOTDOWN                     = 0x00000001,
UTCL1_TYPE_BYPASS                        = 0x00000002,
} UTCL1RequestType;

/*
 * VMEMCMD_RETURN_ORDER enum
 */

typedef enum VMEMCMD_RETURN_ORDER {
VMEMCMD_RETURN_OUT_OF_ORDER              = 0x00000000,
VMEMCMD_RETURN_IN_ORDER                  = 0x00000001,
VMEMCMD_RETURN_IN_ORDER_READ             = 0x00000002,
} VMEMCMD_RETURN_ORDER;

/*
 * WritePolicy enum
 */

typedef enum WritePolicy {
CACHE_LRU_WR                             = 0x00000000,
CACHE_STREAM                             = 0x00000001,
CACHE_NOA_WR                             = 0x00000002,
CACHE_BYPASS                             = 0x00000003,
} WritePolicy;

/*******************************************************
 * CNVC_CFG Enums
 *******************************************************/

/*
 * CNVC_BYPASS enum
 */

typedef enum CNVC_BYPASS {
CNVC_BYPASS_DISABLE                      = 0x00000000,
CNVC_BYPASS_EN                           = 0x00000001,
} CNVC_BYPASS;

/*
 * CNVC_COEF_FORMAT_ENUM enum
 */

typedef enum CNVC_COEF_FORMAT_ENUM {
CNVC_FIX_S2_13                           = 0x00000000,
CNVC_FIX_S3_12                           = 0x00000001,
} CNVC_COEF_FORMAT_ENUM;

/*
 * CNVC_ENABLE enum
 */

typedef enum CNVC_ENABLE {
CNVC_DIS                                 = 0x00000000,
CNVC_EN                                  = 0x00000001,
} CNVC_ENABLE;

/*
 * CNVC_PENDING enum
 */

typedef enum CNVC_PENDING {
CNVC_NOT_PENDING                         = 0x00000000,
CNVC_YES_PENDING                         = 0x00000001,
} CNVC_PENDING;

/*
 * COLOR_KEYER_MODE enum
 */

typedef enum COLOR_KEYER_MODE {
FORCE_00                                 = 0x00000000,
FORCE_FF                                 = 0x00000001,
RANGE_00                                 = 0x00000002,
RANGE_FF                                 = 0x00000003,
} COLOR_KEYER_MODE;

/*
 * DENORM_TRUNCATE enum
 */

typedef enum DENORM_TRUNCATE {
CNVC_ROUND                               = 0x00000000,
CNVC_TRUNCATE                            = 0x00000001,
} DENORM_TRUNCATE;

/*
 * FORMAT_CROSSBAR enum
 */

typedef enum FORMAT_CROSSBAR {
FORMAT_CROSSBAR_R                        = 0x00000000,
FORMAT_CROSSBAR_G                        = 0x00000001,
FORMAT_CROSSBAR_B                        = 0x00000002,
} FORMAT_CROSSBAR;

/*
 * PIX_EXPAND_MODE enum
 */

typedef enum PIX_EXPAND_MODE {
PIX_DYNAMIC_EXPANSION                    = 0x00000000,
PIX_ZERO_EXPANSION                       = 0x00000001,
} PIX_EXPAND_MODE;

/*
 * PRE_CSC_MODE_ENUM enum
 */

typedef enum PRE_CSC_MODE_ENUM {
PRE_CSC_BYPASS                           = 0x00000000,
PRE_CSC_SET_A                            = 0x00000001,
PRE_CSC_SET_B                            = 0x00000002,
} PRE_CSC_MODE_ENUM;

/*
 * PRE_DEGAM_MODE enum
 */

typedef enum PRE_DEGAM_MODE {
PRE_DEGAM_BYPASS                         = 0x00000000,
PRE_DEGAM_ENABLE                         = 0x00000001,
} PRE_DEGAM_MODE;

/*
 * PRE_DEGAM_SELECT enum
 */

typedef enum PRE_DEGAM_SELECT {
PRE_DEGAM_SRGB                           = 0x00000000,
PRE_DEGAM_GAMMA_22                       = 0x00000001,
PRE_DEGAM_GAMMA_24                       = 0x00000002,
PRE_DEGAM_GAMMA_26                       = 0x00000003,
PRE_DEGAM_BT2020                         = 0x00000004,
PRE_DEGAM_BT2100PQ                       = 0x00000005,
PRE_DEGAM_BT2100HLG                      = 0x00000006,
} PRE_DEGAM_SELECT;

/*
 * SURFACE_PIXEL_FORMAT enum
 */

typedef enum SURFACE_PIXEL_FORMAT {
ARGB1555                                 = 0x00000001,
RGBA5551                                 = 0x00000002,
RGB565                                   = 0x00000003,
BGR565                                   = 0x00000004,
ARGB4444                                 = 0x00000005,
RGBA4444                                 = 0x00000006,
ARGB8888                                 = 0x00000008,
RGBA8888                                 = 0x00000009,
ARGB2101010                              = 0x0000000a,
RGBA1010102                              = 0x0000000b,
AYCrCb8888                               = 0x0000000c,
YCrCbA8888                               = 0x0000000d,
ACrYCb8888                               = 0x0000000e,
CrYCbA8888                               = 0x0000000f,
ARGB16161616_10MSB                       = 0x00000010,
RGBA16161616_10MSB                       = 0x00000011,
ARGB16161616_10LSB                       = 0x00000012,
RGBA16161616_10LSB                       = 0x00000013,
ARGB16161616_12MSB                       = 0x00000014,
RGBA16161616_12MSB                       = 0x00000015,
ARGB16161616_12LSB                       = 0x00000016,
RGBA16161616_12LSB                       = 0x00000017,
ARGB16161616_FLOAT                       = 0x00000018,
RGBA16161616_FLOAT                       = 0x00000019,
ARGB16161616_UNORM                       = 0x0000001a,
RGBA16161616_UNORM                       = 0x0000001b,
ARGB16161616_SNORM                       = 0x0000001c,
RGBA16161616_SNORM                       = 0x0000001d,
AYCrCb16161616_10MSB                     = 0x00000020,
AYCrCb16161616_10LSB                     = 0x00000021,
YCrCbA16161616_10MSB                     = 0x00000022,
YCrCbA16161616_10LSB                     = 0x00000023,
ACrYCb16161616_10MSB                     = 0x00000024,
ACrYCb16161616_10LSB                     = 0x00000025,
CrYCbA16161616_10MSB                     = 0x00000026,
CrYCbA16161616_10LSB                     = 0x00000027,
AYCrCb16161616_12MSB                     = 0x00000028,
AYCrCb16161616_12LSB                     = 0x00000029,
YCrCbA16161616_12MSB                     = 0x0000002a,
YCrCbA16161616_12LSB                     = 0x0000002b,
ACrYCb16161616_12MSB                     = 0x0000002c,
ACrYCb16161616_12LSB                     = 0x0000002d,
CrYCbA16161616_12MSB                     = 0x0000002e,
CrYCbA16161616_12LSB                     = 0x0000002f,
Y8_CrCb88_420_PLANAR                     = 0x00000040,
Y8_CbCr88_420_PLANAR                     = 0x00000041,
Y10_CrCb1010_420_PLANAR                  = 0x00000042,
Y10_CbCr1010_420_PLANAR                  = 0x00000043,
Y12_CrCb1212_420_PLANAR                  = 0x00000044,
Y12_CbCr1212_420_PLANAR                  = 0x00000045,
YCrYCb8888_422_PACKED                    = 0x00000048,
YCbYCr8888_422_PACKED                    = 0x00000049,
CrYCbY8888_422_PACKED                    = 0x0000004a,
CbYCrY8888_422_PACKED                    = 0x0000004b,
YCrYCb10101010_422_PACKED                = 0x0000004c,
YCbYCr10101010_422_PACKED                = 0x0000004d,
CrYCbY10101010_422_PACKED                = 0x0000004e,
CbYCrY10101010_422_PACKED                = 0x0000004f,
YCrYCb12121212_422_PACKED                = 0x00000050,
YCbYCr12121212_422_PACKED                = 0x00000051,
CrYCbY12121212_422_PACKED                = 0x00000052,
CbYCrY12121212_422_PACKED                = 0x00000053,
RGB111110_FIX                            = 0x00000070,
BGR101111_FIX                            = 0x00000071,
ACrYCb2101010                            = 0x00000072,
CrYCbA1010102                            = 0x00000073,
RGBE                                     = 0x00000074,
RGB111110_FLOAT                          = 0x00000076,
BGR101111_FLOAT                          = 0x00000077,
MONO_8                                   = 0x00000078,
MONO_10MSB                               = 0x00000079,
MONO_10LSB                               = 0x0000007a,
MONO_12MSB                               = 0x0000007b,
MONO_12LSB                               = 0x0000007c,
MONO_16                                  = 0x0000007d,
} SURFACE_PIXEL_FORMAT;

/*
 * XNORM enum
 */

typedef enum XNORM {
XNORM_A                                  = 0x00000000,
XNORM_B                                  = 0x00000001,
} XNORM;

/*******************************************************
 * CNVC_CUR Enums
 *******************************************************/

/*
 * CUR_ENABLE enum
 */

typedef enum CUR_ENABLE {
CUR_DIS                                  = 0x00000000,
CUR_EN                                   = 0x00000001,
} CUR_ENABLE;

/*
 * CUR_EXPAND_MODE enum
 */

typedef enum CUR_EXPAND_MODE {
CUR_DYNAMIC_EXPANSION                    = 0x00000000,
CUR_ZERO_EXPANSION                       = 0x00000001,
} CUR_EXPAND_MODE;

/*
 * CUR_INV_CLAMP enum
 */

typedef enum CUR_INV_CLAMP {
CUR_CLAMP_DIS                            = 0x00000000,
CUR_CLAMP_EN                             = 0x00000001,
} CUR_INV_CLAMP;

/*
 * CUR_MODE enum
 */

typedef enum CUR_MODE {
MONO_2BIT                                = 0x00000000,
COLOR_24BIT_1BIT_AND                     = 0x00000001,
COLOR_24BIT_8BIT_ALPHA_PREMULT           = 0x00000002,
COLOR_24BIT_8BIT_ALPHA_UNPREMULT         = 0x00000003,
COLOR_64BIT_FP_PREMULT                   = 0x00000004,
COLOR_64BIT_FP_UNPREMULT                 = 0x00000005,
} CUR_MODE;

/*
 * CUR_PENDING enum
 */

typedef enum CUR_PENDING {
CUR_NOT_PENDING                          = 0x00000000,
CUR_YES_PENDING                          = 0x00000001,
} CUR_PENDING;

/*
 * CUR_ROM_EN enum
 */

typedef enum CUR_ROM_EN {
CUR_FP_NO_ROM                            = 0x00000000,
CUR_FP_USE_ROM                           = 0x00000001,
} CUR_ROM_EN;

/*******************************************************
 * DSCL Enums
 *******************************************************/

/*
 * COEF_RAM_SELECT_RD enum
 */

typedef enum COEF_RAM_SELECT_RD {
COEF_RAM_SELECT_BACK                     = 0x00000000,
COEF_RAM_SELECT_CURRENT                  = 0x00000001,
} COEF_RAM_SELECT_RD;

/*
 * DSCL_MODE_SEL enum
 */

typedef enum DSCL_MODE_SEL {
DSCL_MODE_SCALING_444_BYPASS             = 0x00000000,
DSCL_MODE_SCALING_444_RGB_ENABLE         = 0x00000001,
DSCL_MODE_SCALING_444_YCBCR_ENABLE       = 0x00000002,
DSCL_MODE_SCALING_YCBCR_ENABLE           = 0x00000003,
DSCL_MODE_LUMA_SCALING_BYPASS            = 0x00000004,
DSCL_MODE_CHROMA_SCALING_BYPASS          = 0x00000005,
DSCL_MODE_DSCL_BYPASS                    = 0x00000006,
} DSCL_MODE_SEL;

/*
 * LB_ALPHA_EN enum
 */

typedef enum LB_ALPHA_EN {
LB_ALPHA_DISABLE                         = 0x00000000,
LB_ALPHA_ENABLE                          = 0x00000001,
} LB_ALPHA_EN;

/*
 * LB_INTERLEAVE_EN enum
 */

typedef enum LB_INTERLEAVE_EN {
LB_INTERLEAVE_DISABLE                    = 0x00000000,
LB_INTERLEAVE_ENABLE                     = 0x00000001,
} LB_INTERLEAVE_EN;

/*
 * LB_MEMORY_CONFIG enum
 */

typedef enum LB_MEMORY_CONFIG {
LB_MEMORY_CONFIG_0                       = 0x00000000,
LB_MEMORY_CONFIG_1                       = 0x00000001,
LB_MEMORY_CONFIG_2                       = 0x00000002,
LB_MEMORY_CONFIG_3                       = 0x00000003,
} LB_MEMORY_CONFIG;

/*
 * OBUF_BYPASS_SEL enum
 */

typedef enum OBUF_BYPASS_SEL {
OBUF_BYPASS_DIS                          = 0x00000000,
OBUF_BYPASS_EN                           = 0x00000001,
} OBUF_BYPASS_SEL;

/*
 * OBUF_IS_HALF_RECOUT_WIDTH_SEL enum
 */

typedef enum OBUF_IS_HALF_RECOUT_WIDTH_SEL {
OBUF_FULL_RECOUT                         = 0x00000000,
OBUF_HALF_RECOUT                         = 0x00000001,
} OBUF_IS_HALF_RECOUT_WIDTH_SEL;

/*
 * OBUF_USE_FULL_BUFFER_SEL enum
 */

typedef enum OBUF_USE_FULL_BUFFER_SEL {
OBUF_RECOUT                              = 0x00000000,
OBUF_FULL                                = 0x00000001,
} OBUF_USE_FULL_BUFFER_SEL;

/*
 * SCL_2TAP_HARDCODE enum
 */

typedef enum SCL_2TAP_HARDCODE {
SCL_COEF_2TAP_HARDCODE_OFF               = 0x00000000,
SCL_COEF_2TAP_HARDCODE_ON                = 0x00000001,
} SCL_2TAP_HARDCODE;

/*
 * SCL_ALPHA_COEF enum
 */

typedef enum SCL_ALPHA_COEF {
SCL_ALPHA_COEF_FIRST                     = 0x00000000,
SCL_ALPHA_COEF_SECOND                    = 0x00000001,
} SCL_ALPHA_COEF;

/*
 * SCL_AUTOCAL_MODE enum
 */

typedef enum SCL_AUTOCAL_MODE {
AUTOCAL_MODE_OFF                         = 0x00000000,
AUTOCAL_MODE_AUTOSCALE                   = 0x00000001,
AUTOCAL_MODE_AUTOCENTER                  = 0x00000002,
AUTOCAL_MODE_AUTOREPLICATE               = 0x00000003,
} SCL_AUTOCAL_MODE;

/*
 * SCL_BOUNDARY enum
 */

typedef enum SCL_BOUNDARY {
SCL_BOUNDARY_EDGE                        = 0x00000000,
SCL_BOUNDARY_BLACK                       = 0x00000001,
} SCL_BOUNDARY;

/*
 * SCL_CHROMA_COEF enum
 */

typedef enum SCL_CHROMA_COEF {
SCL_CHROMA_COEF_FIRST                    = 0x00000000,
SCL_CHROMA_COEF_SECOND                   = 0x00000001,
} SCL_CHROMA_COEF;

/*
 * SCL_COEF_FILTER_TYPE_SEL enum
 */

typedef enum SCL_COEF_FILTER_TYPE_SEL {
SCL_COEF_LUMA_VERT_FILTER                = 0x00000000,
SCL_COEF_LUMA_HORZ_FILTER                = 0x00000001,
SCL_COEF_CHROMA_VERT_FILTER              = 0x00000002,
SCL_COEF_CHROMA_HORZ_FILTER              = 0x00000003,
} SCL_COEF_FILTER_TYPE_SEL;

/*
 * SCL_COEF_RAM_SEL enum
 */

typedef enum SCL_COEF_RAM_SEL {
SCL_COEF_RAM_SEL_0                       = 0x00000000,
SCL_COEF_RAM_SEL_1                       = 0x00000001,
} SCL_COEF_RAM_SEL;

/*
 * SCL_SHARP_EN enum
 */

typedef enum SCL_SHARP_EN {
SCL_SHARP_DISABLE                        = 0x00000000,
SCL_SHARP_ENABLE                         = 0x00000001,
} SCL_SHARP_EN;

/*******************************************************
 * CM Enums
 *******************************************************/

/*
 * CMC_3DLUT_30BIT_ENUM enum
 */

typedef enum CMC_3DLUT_30BIT_ENUM {
CMC_3DLUT_36BIT                          = 0x00000000,
CMC_3DLUT_30BIT                          = 0x00000001,
} CMC_3DLUT_30BIT_ENUM;

/*
 * CMC_3DLUT_RAM_SEL enum
 */

typedef enum CMC_3DLUT_RAM_SEL {
CMC_RAM0_ACCESS                          = 0x00000000,
CMC_RAM1_ACCESS                          = 0x00000001,
CMC_RAM2_ACCESS                          = 0x00000002,
CMC_RAM3_ACCESS                          = 0x00000003,
} CMC_3DLUT_RAM_SEL;

/*
 * CMC_3DLUT_SIZE_ENUM enum
 */

typedef enum CMC_3DLUT_SIZE_ENUM {
CMC_3DLUT_17CUBE                         = 0x00000000,
CMC_3DLUT_9CUBE                          = 0x00000001,
} CMC_3DLUT_SIZE_ENUM;

/*
 * CMC_LUT_2_CONFIG_ENUM enum
 */

typedef enum CMC_LUT_2_CONFIG_ENUM {
CMC_LUT_2CFG_NO_MEMORY                   = 0x00000000,
CMC_LUT_2CFG_MEMORY_A                    = 0x00000001,
CMC_LUT_2CFG_MEMORY_B                    = 0x00000002,
} CMC_LUT_2_CONFIG_ENUM;

/*
 * CMC_LUT_2_MODE_ENUM enum
 */

typedef enum CMC_LUT_2_MODE_ENUM {
CMC_LUT_2_MODE_BYPASS                    = 0x00000000,
CMC_LUT_2_MODE_RAMA_LUT                  = 0x00000001,
CMC_LUT_2_MODE_RAMB_LUT                  = 0x00000002,
} CMC_LUT_2_MODE_ENUM;

/*
 * CMC_LUT_NUM_SEG enum
 */

typedef enum CMC_LUT_NUM_SEG {
CMC_SEGMENTS_1                           = 0x00000000,
CMC_SEGMENTS_2                           = 0x00000001,
CMC_SEGMENTS_4                           = 0x00000002,
CMC_SEGMENTS_8                           = 0x00000003,
CMC_SEGMENTS_16                          = 0x00000004,
CMC_SEGMENTS_32                          = 0x00000005,
CMC_SEGMENTS_64                          = 0x00000006,
CMC_SEGMENTS_128                         = 0x00000007,
} CMC_LUT_NUM_SEG;

/*
 * CMC_LUT_RAM_SEL enum
 */

typedef enum CMC_LUT_RAM_SEL {
CMC_RAMA_ACCESS                          = 0x00000000,
CMC_RAMB_ACCESS                          = 0x00000001,
} CMC_LUT_RAM_SEL;

/*
 * CM_BYPASS enum
 */

typedef enum CM_BYPASS {
NON_BYPASS                               = 0x00000000,
BYPASS_EN                                = 0x00000001,
} CM_BYPASS;

/*
 * CM_COEF_FORMAT_ENUM enum
 */

typedef enum CM_COEF_FORMAT_ENUM {
FIX_S2_13                                = 0x00000000,
FIX_S3_12                                = 0x00000001,
} CM_COEF_FORMAT_ENUM;

/*
 * CM_DATA_SIGNED enum
 */

typedef enum CM_DATA_SIGNED {
UNSIGNED                                 = 0x00000000,
SIGNED                                   = 0x00000001,
} CM_DATA_SIGNED;

/*
 * CM_EN enum
 */

typedef enum CM_EN {
CM_DISABLE                               = 0x00000000,
CM_ENABLE                                = 0x00000001,
} CM_EN;

/*
 * CM_GAMMA_LUT_MODE_ENUM enum
 */

typedef enum CM_GAMMA_LUT_MODE_ENUM {
BYPASS                                   = 0x00000000,
RESERVED_1                               = 0x00000001,
RAM_LUT                                  = 0x00000002,
RESERVED_3                               = 0x00000003,
} CM_GAMMA_LUT_MODE_ENUM;

/*
 * CM_GAMMA_LUT_PWL_DISABLE_ENUM enum
 */

typedef enum CM_GAMMA_LUT_PWL_DISABLE_ENUM {
ENABLE_PWL                               = 0x00000000,
DISABLE_PWL                              = 0x00000001,
} CM_GAMMA_LUT_PWL_DISABLE_ENUM;

/*
 * CM_GAMMA_LUT_SEL_ENUM enum
 */

typedef enum CM_GAMMA_LUT_SEL_ENUM {
RAMA                                     = 0x00000000,
RAMB                                     = 0x00000001,
} CM_GAMMA_LUT_SEL_ENUM;

/*
 * CM_GAMUT_REMAP_MODE_ENUM enum
 */

typedef enum CM_GAMUT_REMAP_MODE_ENUM {
BYPASS_GAMUT                             = 0x00000000,
GAMUT_COEF                               = 0x00000001,
GAMUT_COEF_B                             = 0x00000002,
} CM_GAMUT_REMAP_MODE_ENUM;

/*
 * CM_LUT_2_CONFIG_ENUM enum
 */

typedef enum CM_LUT_2_CONFIG_ENUM {
LUT_2CFG_NO_MEMORY                       = 0x00000000,
LUT_2CFG_MEMORY_A                        = 0x00000001,
LUT_2CFG_MEMORY_B                        = 0x00000002,
} CM_LUT_2_CONFIG_ENUM;

/*
 * CM_LUT_2_MODE_ENUM enum
 */

typedef enum CM_LUT_2_MODE_ENUM {
LUT_2_MODE_BYPASS                        = 0x00000000,
LUT_2_MODE_RAMA_LUT                      = 0x00000001,
LUT_2_MODE_RAMB_LUT                      = 0x00000002,
} CM_LUT_2_MODE_ENUM;

/*
 * CM_LUT_4_CONFIG_ENUM enum
 */

typedef enum CM_LUT_4_CONFIG_ENUM {
LUT_4CFG_NO_MEMORY                       = 0x00000000,
LUT_4CFG_ROM_A                           = 0x00000001,
LUT_4CFG_ROM_B                           = 0x00000002,
LUT_4CFG_MEMORY_A                        = 0x00000003,
LUT_4CFG_MEMORY_B                        = 0x00000004,
} CM_LUT_4_CONFIG_ENUM;

/*
 * CM_LUT_4_MODE_ENUM enum
 */

typedef enum CM_LUT_4_MODE_ENUM {
LUT_4_MODE_BYPASS                        = 0x00000000,
LUT_4_MODE_ROMA_LUT                      = 0x00000001,
LUT_4_MODE_ROMB_LUT                      = 0x00000002,
LUT_4_MODE_RAMA_LUT                      = 0x00000003,
LUT_4_MODE_RAMB_LUT                      = 0x00000004,
} CM_LUT_4_MODE_ENUM;

/*
 * CM_LUT_CONFIG_MODE enum
 */

typedef enum CM_LUT_CONFIG_MODE {
DIFFERENT_RGB                            = 0x00000000,
ALL_USE_R                                = 0x00000001,
} CM_LUT_CONFIG_MODE;

/*
 * CM_LUT_NUM_SEG enum
 */

typedef enum CM_LUT_NUM_SEG {
SEGMENTS_1                               = 0x00000000,
SEGMENTS_2                               = 0x00000001,
SEGMENTS_4                               = 0x00000002,
SEGMENTS_8                               = 0x00000003,
SEGMENTS_16                              = 0x00000004,
SEGMENTS_32                              = 0x00000005,
SEGMENTS_64                              = 0x00000006,
SEGMENTS_128                             = 0x00000007,
} CM_LUT_NUM_SEG;

/*
 * CM_LUT_RAM_SEL enum
 */

typedef enum CM_LUT_RAM_SEL {
RAMA_ACCESS                              = 0x00000000,
RAMB_ACCESS                              = 0x00000001,
} CM_LUT_RAM_SEL;

/*
 * CM_LUT_READ_COLOR_SEL enum
 */

typedef enum CM_LUT_READ_COLOR_SEL {
BLUE_LUT                                 = 0x00000000,
GREEN_LUT                                = 0x00000001,
RED_LUT                                  = 0x00000002,
} CM_LUT_READ_COLOR_SEL;

/*
 * CM_LUT_READ_DBG enum
 */

typedef enum CM_LUT_READ_DBG {
DISABLE_DEBUG                            = 0x00000000,
ENABLE_DEBUG                             = 0x00000001,
} CM_LUT_READ_DBG;

/*
 * CM_PENDING enum
 */

typedef enum CM_PENDING {
CM_NOT_PENDING                           = 0x00000000,
CM_YES_PENDING                           = 0x00000001,
} CM_PENDING;

/*
 * CM_POST_CSC_MODE_ENUM enum
 */

typedef enum CM_POST_CSC_MODE_ENUM {
BYPASS_POST_CSC                          = 0x00000000,
COEF_POST_CSC                            = 0x00000001,
COEF_POST_CSC_B                          = 0x00000002,
} CM_POST_CSC_MODE_ENUM;

/*
 * CM_WRITE_BASE_ONLY enum
 */

typedef enum CM_WRITE_BASE_ONLY {
WRITE_BOTH                               = 0x00000000,
WRITE_BASE_ONLY                          = 0x00000001,
} CM_WRITE_BASE_ONLY;

/*******************************************************
 * DPP_TOP Enums
 *******************************************************/

/*
 * CRC_CUR_SEL enum
 */

typedef enum CRC_CUR_SEL {
CRC_CUR_0                                = 0x00000000,
CRC_CUR_1                                = 0x00000001,
} CRC_CUR_SEL;

/*
 * CRC_INTERLACE_SEL enum
 */

typedef enum CRC_INTERLACE_SEL {
CRC_INTERLACE_0                          = 0x00000000,
CRC_INTERLACE_1                          = 0x00000001,
CRC_INTERLACE_2                          = 0x00000002,
CRC_INTERLACE_3                          = 0x00000003,
} CRC_INTERLACE_SEL;

/*
 * CRC_IN_CUR_SEL enum
 */

typedef enum CRC_IN_CUR_SEL {
CRC_IN_CUR_0                             = 0x00000000,
CRC_IN_CUR_1                             = 0x00000001,
CRC_IN_CUR_2                             = 0x00000002,
CRC_IN_CUR_3                             = 0x00000003,
} CRC_IN_CUR_SEL;

/*
 * CRC_IN_PIX_SEL enum
 */

typedef enum CRC_IN_PIX_SEL {
CRC_IN_PIX_0                             = 0x00000000,
CRC_IN_PIX_1                             = 0x00000001,
CRC_IN_PIX_2                             = 0x00000002,
CRC_IN_PIX_3                             = 0x00000003,
CRC_IN_PIX_4                             = 0x00000004,
CRC_IN_PIX_5                             = 0x00000005,
CRC_IN_PIX_6                             = 0x00000006,
CRC_IN_PIX_7                             = 0x00000007,
} CRC_IN_PIX_SEL;

/*
 * CRC_SRC_SEL enum
 */

typedef enum CRC_SRC_SEL {
CRC_SRC_0                                = 0x00000000,
CRC_SRC_1                                = 0x00000001,
CRC_SRC_2                                = 0x00000002,
CRC_SRC_3                                = 0x00000003,
} CRC_SRC_SEL;

/*
 * CRC_STEREO_SEL enum
 */

typedef enum CRC_STEREO_SEL {
CRC_STEREO_0                             = 0x00000000,
CRC_STEREO_1                             = 0x00000001,
CRC_STEREO_2                             = 0x00000002,
CRC_STEREO_3                             = 0x00000003,
} CRC_STEREO_SEL;

/*
 * TEST_CLK_SEL enum
 */

typedef enum TEST_CLK_SEL {
TEST_CLK_SEL_0                           = 0x00000000,
TEST_CLK_SEL_1                           = 0x00000001,
TEST_CLK_SEL_2                           = 0x00000002,
TEST_CLK_SEL_3                           = 0x00000003,
TEST_CLK_SEL_4                           = 0x00000004,
TEST_CLK_SEL_5                           = 0x00000005,
TEST_CLK_SEL_6                           = 0x00000006,
TEST_CLK_SEL_7                           = 0x00000007,
} TEST_CLK_SEL;

/*******************************************************
 * DC_PERFMON Enums
 *******************************************************/

/*
 * PERFCOUNTER_ACTIVE enum
 */

typedef enum PERFCOUNTER_ACTIVE {
PERFCOUNTER_IS_IDLE                      = 0x00000000,
PERFCOUNTER_IS_ACTIVE                    = 0x00000001,
} PERFCOUNTER_ACTIVE;

/*
 * PERFCOUNTER_CNT0_STATE enum
 */

typedef enum PERFCOUNTER_CNT0_STATE {
PERFCOUNTER_CNT0_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT0_STATE_START             = 0x00000001,
PERFCOUNTER_CNT0_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT0_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT0_STATE;

/*
 * PERFCOUNTER_CNT1_STATE enum
 */

typedef enum PERFCOUNTER_CNT1_STATE {
PERFCOUNTER_CNT1_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT1_STATE_START             = 0x00000001,
PERFCOUNTER_CNT1_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT1_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT1_STATE;

/*
 * PERFCOUNTER_CNT2_STATE enum
 */

typedef enum PERFCOUNTER_CNT2_STATE {
PERFCOUNTER_CNT2_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT2_STATE_START             = 0x00000001,
PERFCOUNTER_CNT2_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT2_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT2_STATE;

/*
 * PERFCOUNTER_CNT3_STATE enum
 */

typedef enum PERFCOUNTER_CNT3_STATE {
PERFCOUNTER_CNT3_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT3_STATE_START             = 0x00000001,
PERFCOUNTER_CNT3_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT3_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT3_STATE;

/*
 * PERFCOUNTER_CNT4_STATE enum
 */

typedef enum PERFCOUNTER_CNT4_STATE {
PERFCOUNTER_CNT4_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT4_STATE_START             = 0x00000001,
PERFCOUNTER_CNT4_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT4_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT4_STATE;

/*
 * PERFCOUNTER_CNT5_STATE enum
 */

typedef enum PERFCOUNTER_CNT5_STATE {
PERFCOUNTER_CNT5_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT5_STATE_START             = 0x00000001,
PERFCOUNTER_CNT5_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT5_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT5_STATE;

/*
 * PERFCOUNTER_CNT6_STATE enum
 */

typedef enum PERFCOUNTER_CNT6_STATE {
PERFCOUNTER_CNT6_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT6_STATE_START             = 0x00000001,
PERFCOUNTER_CNT6_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT6_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT6_STATE;

/*
 * PERFCOUNTER_CNT7_STATE enum
 */

typedef enum PERFCOUNTER_CNT7_STATE {
PERFCOUNTER_CNT7_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT7_STATE_START             = 0x00000001,
PERFCOUNTER_CNT7_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT7_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT7_STATE;

/*
 * PERFCOUNTER_CNTL_SEL enum
 */

typedef enum PERFCOUNTER_CNTL_SEL {
PERFCOUNTER_CNTL_SEL_0                   = 0x00000000,
PERFCOUNTER_CNTL_SEL_1                   = 0x00000001,
PERFCOUNTER_CNTL_SEL_2                   = 0x00000002,
PERFCOUNTER_CNTL_SEL_3                   = 0x00000003,
PERFCOUNTER_CNTL_SEL_4                   = 0x00000004,
PERFCOUNTER_CNTL_SEL_5                   = 0x00000005,
PERFCOUNTER_CNTL_SEL_6                   = 0x00000006,
PERFCOUNTER_CNTL_SEL_7                   = 0x00000007,
} PERFCOUNTER_CNTL_SEL;

/*
 * PERFCOUNTER_CNTOFF_START_DIS enum
 */

typedef enum PERFCOUNTER_CNTOFF_START_DIS {
PERFCOUNTER_CNTOFF_START_ENABLE          = 0x00000000,
PERFCOUNTER_CNTOFF_START_DISABLE         = 0x00000001,
} PERFCOUNTER_CNTOFF_START_DIS;

/*
 * PERFCOUNTER_COUNTED_VALUE_TYPE enum
 */

typedef enum PERFCOUNTER_COUNTED_VALUE_TYPE {
PERFCOUNTER_COUNTED_VALUE_TYPE_ACC       = 0x00000000,
PERFCOUNTER_COUNTED_VALUE_TYPE_MAX       = 0x00000001,
PERFCOUNTER_COUNTED_VALUE_TYPE_MIN       = 0x00000002,
} PERFCOUNTER_COUNTED_VALUE_TYPE;

/*
 * PERFCOUNTER_CVALUE_SEL enum
 */

typedef enum PERFCOUNTER_CVALUE_SEL {
PERFCOUNTER_CVALUE_SEL_47_0              = 0x00000000,
PERFCOUNTER_CVALUE_SEL_15_0              = 0x00000001,
PERFCOUNTER_CVALUE_SEL_31_16             = 0x00000002,
PERFCOUNTER_CVALUE_SEL_47_32             = 0x00000003,
PERFCOUNTER_CVALUE_SEL_11_0              = 0x00000004,
PERFCOUNTER_CVALUE_SEL_23_12             = 0x00000005,
PERFCOUNTER_CVALUE_SEL_35_24             = 0x00000006,
PERFCOUNTER_CVALUE_SEL_47_36             = 0x00000007,
} PERFCOUNTER_CVALUE_SEL;

/*
 * PERFCOUNTER_HW_CNTL_SEL enum
 */

typedef enum PERFCOUNTER_HW_CNTL_SEL {
PERFCOUNTER_HW_CNTL_SEL_RUNEN            = 0x00000000,
PERFCOUNTER_HW_CNTL_SEL_CNTOFF           = 0x00000001,
} PERFCOUNTER_HW_CNTL_SEL;

/*
 * PERFCOUNTER_HW_STOP1_SEL enum
 */

typedef enum PERFCOUNTER_HW_STOP1_SEL {
PERFCOUNTER_HW_STOP1_0                   = 0x00000000,
PERFCOUNTER_HW_STOP1_1                   = 0x00000001,
} PERFCOUNTER_HW_STOP1_SEL;

/*
 * PERFCOUNTER_HW_STOP2_SEL enum
 */

typedef enum PERFCOUNTER_HW_STOP2_SEL {
PERFCOUNTER_HW_STOP2_0                   = 0x00000000,
PERFCOUNTER_HW_STOP2_1                   = 0x00000001,
} PERFCOUNTER_HW_STOP2_SEL;

/*
 * PERFCOUNTER_INC_MODE enum
 */

typedef enum PERFCOUNTER_INC_MODE {
PERFCOUNTER_INC_MODE_MULTI_BIT           = 0x00000000,
PERFCOUNTER_INC_MODE_BOTH_EDGE           = 0x00000001,
PERFCOUNTER_INC_MODE_LSB                 = 0x00000002,
PERFCOUNTER_INC_MODE_POS_EDGE            = 0x00000003,
PERFCOUNTER_INC_MODE_NEG_EDGE            = 0x00000004,
} PERFCOUNTER_INC_MODE;

/*
 * PERFCOUNTER_INT_EN enum
 */

typedef enum PERFCOUNTER_INT_EN {
PERFCOUNTER_INT_DISABLE                  = 0x00000000,
PERFCOUNTER_INT_ENABLE                   = 0x00000001,
} PERFCOUNTER_INT_EN;

/*
 * PERFCOUNTER_INT_TYPE enum
 */

typedef enum PERFCOUNTER_INT_TYPE {
PERFCOUNTER_INT_TYPE_LEVEL               = 0x00000000,
PERFCOUNTER_INT_TYPE_PULSE               = 0x00000001,
} PERFCOUNTER_INT_TYPE;

/*
 * PERFCOUNTER_OFF_MASK enum
 */

typedef enum PERFCOUNTER_OFF_MASK {
PERFCOUNTER_OFF_MASK_DISABLE             = 0x00000000,
PERFCOUNTER_OFF_MASK_ENABLE              = 0x00000001,
} PERFCOUNTER_OFF_MASK;

/*
 * PERFCOUNTER_RESTART_EN enum
 */

typedef enum PERFCOUNTER_RESTART_EN {
PERFCOUNTER_RESTART_DISABLE              = 0x00000000,
PERFCOUNTER_RESTART_ENABLE               = 0x00000001,
} PERFCOUNTER_RESTART_EN;

/*
 * PERFCOUNTER_RUNEN_MODE enum
 */

typedef enum PERFCOUNTER_RUNEN_MODE {
PERFCOUNTER_RUNEN_MODE_LEVEL             = 0x00000000,
PERFCOUNTER_RUNEN_MODE_EDGE              = 0x00000001,
} PERFCOUNTER_RUNEN_MODE;

/*
 * PERFCOUNTER_STATE_SEL0 enum
 */

typedef enum PERFCOUNTER_STATE_SEL0 {
PERFCOUNTER_STATE_SEL0_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL0_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL0;

/*
 * PERFCOUNTER_STATE_SEL1 enum
 */

typedef enum PERFCOUNTER_STATE_SEL1 {
PERFCOUNTER_STATE_SEL1_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL1_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL1;

/*
 * PERFCOUNTER_STATE_SEL2 enum
 */

typedef enum PERFCOUNTER_STATE_SEL2 {
PERFCOUNTER_STATE_SEL2_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL2_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL2;

/*
 * PERFCOUNTER_STATE_SEL3 enum
 */

typedef enum PERFCOUNTER_STATE_SEL3 {
PERFCOUNTER_STATE_SEL3_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL3_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL3;

/*
 * PERFCOUNTER_STATE_SEL4 enum
 */

typedef enum PERFCOUNTER_STATE_SEL4 {
PERFCOUNTER_STATE_SEL4_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL4_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL4;

/*
 * PERFCOUNTER_STATE_SEL5 enum
 */

typedef enum PERFCOUNTER_STATE_SEL5 {
PERFCOUNTER_STATE_SEL5_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL5_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL5;

/*
 * PERFCOUNTER_STATE_SEL6 enum
 */

typedef enum PERFCOUNTER_STATE_SEL6 {
PERFCOUNTER_STATE_SEL6_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL6_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL6;

/*
 * PERFCOUNTER_STATE_SEL7 enum
 */

typedef enum PERFCOUNTER_STATE_SEL7 {
PERFCOUNTER_STATE_SEL7_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL7_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL7;

/*
 * PERFMON_CNTOFF_AND_OR enum
 */

typedef enum PERFMON_CNTOFF_AND_OR {
PERFMON_CNTOFF_OR                        = 0x00000000,
PERFMON_CNTOFF_AND                       = 0x00000001,
} PERFMON_CNTOFF_AND_OR;

/*
 * PERFMON_CNTOFF_INT_EN enum
 */

typedef enum PERFMON_CNTOFF_INT_EN {
PERFMON_CNTOFF_INT_DISABLE               = 0x00000000,
PERFMON_CNTOFF_INT_ENABLE                = 0x00000001,
} PERFMON_CNTOFF_INT_EN;

/*
 * PERFMON_CNTOFF_INT_TYPE enum
 */

typedef enum PERFMON_CNTOFF_INT_TYPE {
PERFMON_CNTOFF_INT_TYPE_LEVEL            = 0x00000000,
PERFMON_CNTOFF_INT_TYPE_PULSE            = 0x00000001,
} PERFMON_CNTOFF_INT_TYPE;

/*
 * PERFMON_STATE enum
 */

typedef enum PERFMON_STATE {
PERFMON_STATE_RESET                      = 0x00000000,
PERFMON_STATE_START                      = 0x00000001,
PERFMON_STATE_FREEZE                     = 0x00000002,
PERFMON_STATE_HW                         = 0x00000003,
} PERFMON_STATE;

/*******************************************************
 * HUBP Enums
 *******************************************************/

/*
 * BIGK_FRAGMENT_SIZE enum
 */

typedef enum BIGK_FRAGMENT_SIZE {
VM_PG_SIZE_4KB                           = 0x00000000,
VM_PG_SIZE_8KB                           = 0x00000001,
VM_PG_SIZE_16KB                          = 0x00000002,
VM_PG_SIZE_32KB                          = 0x00000003,
VM_PG_SIZE_64KB                          = 0x00000004,
VM_PG_SIZE_128KB                         = 0x00000005,
VM_PG_SIZE_256KB                         = 0x00000006,
VM_PG_SIZE_512KB                         = 0x00000007,
VM_PG_SIZE_1024KB                        = 0x00000008,
VM_PG_SIZE_2048KB                        = 0x00000009,
} BIGK_FRAGMENT_SIZE;

/*
 * CHUNK_SIZE enum
 */

typedef enum CHUNK_SIZE {
CHUNK_SIZE_1KB                           = 0x00000000,
CHUNK_SIZE_2KB                           = 0x00000001,
CHUNK_SIZE_4KB                           = 0x00000002,
CHUNK_SIZE_8KB                           = 0x00000003,
CHUNK_SIZE_16KB                          = 0x00000004,
CHUNK_SIZE_32KB                          = 0x00000005,
CHUNK_SIZE_64KB                          = 0x00000006,
} CHUNK_SIZE;

/*
 * COMPAT_LEVEL enum
 */

typedef enum COMPAT_LEVEL {
ADDR_GEN_ZERO                            = 0x00000000,
ADDR_GEN_ONE                             = 0x00000001,
ADDR_GEN_TWO                             = 0x00000002,
ADDR_RESERVED                            = 0x00000003,
} COMPAT_LEVEL;

/*
 * DPTE_GROUP_SIZE enum
 */

typedef enum DPTE_GROUP_SIZE {
DPTE_GROUP_SIZE_64B                      = 0x00000000,
DPTE_GROUP_SIZE_128B                     = 0x00000001,
DPTE_GROUP_SIZE_256B                     = 0x00000002,
DPTE_GROUP_SIZE_512B                     = 0x00000003,
DPTE_GROUP_SIZE_1024B                    = 0x00000004,
DPTE_GROUP_SIZE_2048B                    = 0x00000005,
} DPTE_GROUP_SIZE;

/*
 * FORCE_ONE_ROW_FOR_FRAME enum
 */

typedef enum FORCE_ONE_ROW_FOR_FRAME {
FORCE_ONE_ROW_FOR_FRAME_0                = 0x00000000,
FORCE_ONE_ROW_FOR_FRAME_1                = 0x00000001,
} FORCE_ONE_ROW_FOR_FRAME;

/*
 * HUBP_BLANK_EN enum
 */

typedef enum HUBP_BLANK_EN {
HUBP_BLANK_SW_DEASSERT                   = 0x00000000,
HUBP_BLANK_SW_ASSERT                     = 0x00000001,
} HUBP_BLANK_EN;

/*
 * HUBP_IN_BLANK enum
 */

typedef enum HUBP_IN_BLANK {
HUBP_IN_ACTIVE                           = 0x00000000,
HUBP_IN_VBLANK                           = 0x00000001,
} HUBP_IN_BLANK;

/*
 * HUBP_MEASURE_WIN_MODE_DCFCLK enum
 */

typedef enum HUBP_MEASURE_WIN_MODE_DCFCLK {
HUBP_MEASURE_WIN_MODE_DCFCLK_0           = 0x00000000,
HUBP_MEASURE_WIN_MODE_DCFCLK_1           = 0x00000001,
HUBP_MEASURE_WIN_MODE_DCFCLK_2           = 0x00000002,
HUBP_MEASURE_WIN_MODE_DCFCLK_3           = 0x00000003,
} HUBP_MEASURE_WIN_MODE_DCFCLK;

/*
 * HUBP_NO_OUTSTANDING_REQ enum
 */

typedef enum HUBP_NO_OUTSTANDING_REQ {
OUTSTANDING_REQ                          = 0x00000000,
NO_OUTSTANDING_REQ                       = 0x00000001,
} HUBP_NO_OUTSTANDING_REQ;

/*
 * HUBP_SOFT_RESET enum
 */

typedef enum HUBP_SOFT_RESET {
HUBP_SOFT_RESET_ON                       = 0x00000000,
HUBP_SOFT_RESET_OFF                      = 0x00000001,
} HUBP_SOFT_RESET;

/*
 * HUBP_TTU_DISABLE enum
 */

typedef enum HUBP_TTU_DISABLE {
HUBP_TTU_ENABLED                         = 0x00000000,
HUBP_TTU_DISABLED                        = 0x00000001,
} HUBP_TTU_DISABLE;

/*
 * HUBP_VREADY_AT_OR_AFTER_VSYNC enum
 */

typedef enum HUBP_VREADY_AT_OR_AFTER_VSYNC {
VREADY_BEFORE_VSYNC                      = 0x00000000,
VREADY_AT_OR_AFTER_VSYNC                 = 0x00000001,
} HUBP_VREADY_AT_OR_AFTER_VSYNC;

/*
 * HUBP_VTG_SEL enum
 */

typedef enum HUBP_VTG_SEL {
VTG_SEL_0                                = 0x00000000,
VTG_SEL_1                                = 0x00000001,
VTG_SEL_2                                = 0x00000002,
VTG_SEL_3                                = 0x00000003,
VTG_SEL_4                                = 0x00000004,
VTG_SEL_5                                = 0x00000005,
} HUBP_VTG_SEL;

/*
 * H_MIRROR_EN enum
 */

typedef enum H_MIRROR_EN {
HW_MIRRORING_DISABLE                     = 0x00000000,
HW_MIRRORING_ENABLE                      = 0x00000001,
} H_MIRROR_EN;

/*
 * LEGACY_PIPE_INTERLEAVE enum
 */

typedef enum LEGACY_PIPE_INTERLEAVE {
LEGACY_PIPE_INTERLEAVE_256B              = 0x00000000,
LEGACY_PIPE_INTERLEAVE_512B              = 0x00000001,
} LEGACY_PIPE_INTERLEAVE;

/*
 * META_CHUNK_SIZE enum
 */

typedef enum META_CHUNK_SIZE {
META_CHUNK_SIZE_1KB                      = 0x00000000,
META_CHUNK_SIZE_2KB                      = 0x00000001,
META_CHUNK_SIZE_4KB                      = 0x00000002,
META_CHUNK_SIZE_8KB                      = 0x00000003,
} META_CHUNK_SIZE;

/*
 * META_LINEAR enum
 */

typedef enum META_LINEAR {
META_SURF_TILED                          = 0x00000000,
META_SURF_LINEAR                         = 0x00000001,
} META_LINEAR;

/*
 * MIN_CHUNK_SIZE enum
 */

typedef enum MIN_CHUNK_SIZE {
NO_MIN_CHUNK_SIZE                        = 0x00000000,
MIN_CHUNK_SIZE_256B                      = 0x00000001,
MIN_CHUNK_SIZE_512B                      = 0x00000002,
MIN_CHUNK_SIZE_1024B                     = 0x00000003,
} MIN_CHUNK_SIZE;

/*
 * MIN_META_CHUNK_SIZE enum
 */

typedef enum MIN_META_CHUNK_SIZE {
NO_MIN_META_CHUNK_SIZE                   = 0x00000000,
MIN_META_CHUNK_SIZE_64B                  = 0x00000001,
MIN_META_CHUNK_SIZE_128B                 = 0x00000002,
MIN_META_CHUNK_SIZE_256B                 = 0x00000003,
} MIN_META_CHUNK_SIZE;

/*
 * PIPE_ALIGNED enum
 */

typedef enum PIPE_ALIGNED {
PIPE_UNALIGNED_SURF                      = 0x00000000,
PIPE_ALIGNED_SURF                        = 0x00000001,
} PIPE_ALIGNED;

/*
 * PTE_BUFFER_MODE enum
 */

typedef enum PTE_BUFFER_MODE {
PTE_BUFFER_MODE_0                        = 0x00000000,
PTE_BUFFER_MODE_1                        = 0x00000001,
} PTE_BUFFER_MODE;

/*
 * PTE_ROW_HEIGHT_LINEAR enum
 */

typedef enum PTE_ROW_HEIGHT_LINEAR {
PTE_ROW_HEIGHT_LINEAR_8L                 = 0x00000000,
PTE_ROW_HEIGHT_LINEAR_16L                = 0x00000001,
PTE_ROW_HEIGHT_LINEAR_32L                = 0x00000002,
PTE_ROW_HEIGHT_LINEAR_64L                = 0x00000003,
PTE_ROW_HEIGHT_LINEAR_128L               = 0x00000004,
PTE_ROW_HEIGHT_LINEAR_256L               = 0x00000005,
PTE_ROW_HEIGHT_LINEAR_512L               = 0x00000006,
PTE_ROW_HEIGHT_LINEAR_1024L              = 0x00000007,
} PTE_ROW_HEIGHT_LINEAR;

/*
 * ROTATION_ANGLE enum
 */

typedef enum ROTATION_ANGLE {
ROTATE_0_DEGREES                         = 0x00000000,
ROTATE_90_DEGREES                        = 0x00000001,
ROTATE_180_DEGREES                       = 0x00000002,
ROTATE_270_DEGREES                       = 0x00000003,
} ROTATION_ANGLE;

/*
 * SWATH_HEIGHT enum
 */

typedef enum SWATH_HEIGHT {
SWATH_HEIGHT_1L                          = 0x00000000,
SWATH_HEIGHT_2L                          = 0x00000001,
SWATH_HEIGHT_4L                          = 0x00000002,
SWATH_HEIGHT_8L                          = 0x00000003,
SWATH_HEIGHT_16L                         = 0x00000004,
} SWATH_HEIGHT;

/*
 * USE_MALL_FOR_CURSOR enum
 */

typedef enum USE_MALL_FOR_CURSOR {
USE_MALL_FOR_CURSOR_0                    = 0x00000000,
USE_MALL_FOR_CURSOR_1                    = 0x00000001,
} USE_MALL_FOR_CURSOR;

/*
 * USE_MALL_FOR_PSTATE_CHANGE enum
 */

typedef enum USE_MALL_FOR_PSTATE_CHANGE {
USE_MALL_FOR_PSTATE_CHANGE_0             = 0x00000000,
USE_MALL_FOR_PSTATE_CHANGE_1             = 0x00000001,
} USE_MALL_FOR_PSTATE_CHANGE;

/*
 * USE_MALL_FOR_STATIC_SCREEN enum
 */

typedef enum USE_MALL_FOR_STATIC_SCREEN {
USE_MALL_FOR_STATIC_SCREEN_0             = 0x00000000,
USE_MALL_FOR_STATIC_SCREEN_1             = 0x00000001,
} USE_MALL_FOR_STATIC_SCREEN;

/*
 * VMPG_SIZE enum
 */

typedef enum VMPG_SIZE {
VMPG_SIZE_4KB                            = 0x00000000,
VMPG_SIZE_64KB                           = 0x00000001,
} VMPG_SIZE;

/*
 * VM_GROUP_SIZE enum
 */

typedef enum VM_GROUP_SIZE {
VM_GROUP_SIZE_64B                        = 0x00000000,
VM_GROUP_SIZE_128B                       = 0x00000001,
VM_GROUP_SIZE_256B                       = 0x00000002,
VM_GROUP_SIZE_512B                       = 0x00000003,
VM_GROUP_SIZE_1024B                      = 0x00000004,
VM_GROUP_SIZE_2048B                      = 0x00000005,
} VM_GROUP_SIZE;

/*******************************************************
 * HUBPREQ Enums
 *******************************************************/

/*
 * DFQ_MIN_FREE_ENTRIES enum
 */

typedef enum DFQ_MIN_FREE_ENTRIES {
DFQ_MIN_FREE_ENTRIES_0                   = 0x00000000,
DFQ_MIN_FREE_ENTRIES_1                   = 0x00000001,
DFQ_MIN_FREE_ENTRIES_2                   = 0x00000002,
DFQ_MIN_FREE_ENTRIES_3                   = 0x00000003,
DFQ_MIN_FREE_ENTRIES_4                   = 0x00000004,
DFQ_MIN_FREE_ENTRIES_5                   = 0x00000005,
DFQ_MIN_FREE_ENTRIES_6                   = 0x00000006,
DFQ_MIN_FREE_ENTRIES_7                   = 0x00000007,
} DFQ_MIN_FREE_ENTRIES;

/*
 * DFQ_NUM_ENTRIES enum
 */

typedef enum DFQ_NUM_ENTRIES {
DFQ_NUM_ENTRIES_0                        = 0x00000000,
DFQ_NUM_ENTRIES_1                        = 0x00000001,
DFQ_NUM_ENTRIES_2                        = 0x00000002,
DFQ_NUM_ENTRIES_3                        = 0x00000003,
DFQ_NUM_ENTRIES_4                        = 0x00000004,
DFQ_NUM_ENTRIES_5                        = 0x00000005,
DFQ_NUM_ENTRIES_6                        = 0x00000006,
DFQ_NUM_ENTRIES_7                        = 0x00000007,
DFQ_NUM_ENTRIES_8                        = 0x00000008,
} DFQ_NUM_ENTRIES;

/*
 * DFQ_SIZE enum
 */

typedef enum DFQ_SIZE {
DFQ_SIZE_0                               = 0x00000000,
DFQ_SIZE_1                               = 0x00000001,
DFQ_SIZE_2                               = 0x00000002,
DFQ_SIZE_3                               = 0x00000003,
DFQ_SIZE_4                               = 0x00000004,
DFQ_SIZE_5                               = 0x00000005,
DFQ_SIZE_6                               = 0x00000006,
DFQ_SIZE_7                               = 0x00000007,
} DFQ_SIZE;

/*
 * DMDATA_VM_DONE enum
 */

typedef enum DMDATA_VM_DONE {
DMDATA_VM_IS_NOT_DONE                    = 0x00000000,
DMDATA_VM_IS_DONE                        = 0x00000001,
} DMDATA_VM_DONE;

/*
 * EXPANSION_MODE enum
 */

typedef enum EXPANSION_MODE {
EXPANSION_MODE_ZERO                      = 0x00000000,
EXPANSION_MODE_CONSERVATIVE              = 0x00000001,
EXPANSION_MODE_OPTIMAL                   = 0x00000002,
} EXPANSION_MODE;

/*
 * FLIP_RATE enum
 */

typedef enum FLIP_RATE {
FLIP_RATE_0                              = 0x00000000,
FLIP_RATE_1                              = 0x00000001,
FLIP_RATE_2                              = 0x00000002,
FLIP_RATE_3                              = 0x00000003,
FLIP_RATE_4                              = 0x00000004,
FLIP_RATE_5                              = 0x00000005,
FLIP_RATE_6                              = 0x00000006,
FLIP_RATE_7                              = 0x00000007,
} FLIP_RATE;

/*
 * INT_MASK enum
 */

typedef enum INT_MASK {
INT_DISABLED                             = 0x00000000,
INT_ENABLED                              = 0x00000001,
} INT_MASK;

/*
 * PIPE_IN_FLUSH_URGENT enum
 */

typedef enum PIPE_IN_FLUSH_URGENT {
PIPE_IN_FLUSH_URGENT_ENABLE              = 0x00000000,
PIPE_IN_FLUSH_URGENT_DISABLE             = 0x00000001,
} PIPE_IN_FLUSH_URGENT;

/*
 * PRQ_MRQ_FLUSH_URGENT enum
 */

typedef enum PRQ_MRQ_FLUSH_URGENT {
PRQ_MRQ_FLUSH_URGENT_ENABLE              = 0x00000000,
PRQ_MRQ_FLUSH_URGENT_DISABLE             = 0x00000001,
} PRQ_MRQ_FLUSH_URGENT;

/*
 * ROW_TTU_MODE enum
 */

typedef enum ROW_TTU_MODE {
END_OF_ROW_MODE                          = 0x00000000,
WATERMARK_MODE                           = 0x00000001,
} ROW_TTU_MODE;

/*
 * SURFACE_DCC enum
 */

typedef enum SURFACE_DCC {
SURFACE_IS_NOT_DCC                       = 0x00000000,
SURFACE_IS_DCC                           = 0x00000001,
} SURFACE_DCC;

/*
 * SURFACE_DCC_IND_128B enum
 */

typedef enum SURFACE_DCC_IND_128B {
SURFACE_DCC_IS_NOT_IND_128B              = 0x00000000,
SURFACE_DCC_IS_IND_128B                  = 0x00000001,
} SURFACE_DCC_IND_128B;

/*
 * SURFACE_DCC_IND_64B enum
 */

typedef enum SURFACE_DCC_IND_64B {
SURFACE_DCC_IS_NOT_IND_64B               = 0x00000000,
SURFACE_DCC_IS_IND_64B                   = 0x00000001,
} SURFACE_DCC_IND_64B;

/*
 * SURFACE_DCC_IND_BLK enum
 */

typedef enum SURFACE_DCC_IND_BLK {
SURFACE_DCC_BLOCK_IS_UNCONSTRAINED       = 0x00000000,
SURFACE_DCC_BLOCK_IS_IND_64B             = 0x00000001,
SURFACE_DCC_BLOCK_IS_IND_128B            = 0x00000002,
SURFACE_DCC_BLOCK_IS_IND_64B_NO_128BCL   = 0x00000003,
} SURFACE_DCC_IND_BLK;

/*
 * SURFACE_FLIP_AWAY_INT_TYPE enum
 */

typedef enum SURFACE_FLIP_AWAY_INT_TYPE {
SURFACE_FLIP_AWAY_INT_LEVEL              = 0x00000000,
SURFACE_FLIP_AWAY_INT_PULSE              = 0x00000001,
} SURFACE_FLIP_AWAY_INT_TYPE;

/*
 * SURFACE_FLIP_EXEC_DEBUG_MODE enum
 */

typedef enum SURFACE_FLIP_EXEC_DEBUG_MODE {
SURFACE_FLIP_EXEC_NORMAL_MODE            = 0x00000000,
SURFACE_FLIP_EXEC_DEBUG_MODE_ENABLE      = 0x00000001,
} SURFACE_FLIP_EXEC_DEBUG_MODE;

/*
 * SURFACE_FLIP_INT_TYPE enum
 */

typedef enum SURFACE_FLIP_INT_TYPE {
SURFACE_FLIP_INT_LEVEL                   = 0x00000000,
SURFACE_FLIP_INT_PULSE                   = 0x00000001,
} SURFACE_FLIP_INT_TYPE;

/*
 * SURFACE_FLIP_IN_STEREOSYNC enum
 */

typedef enum SURFACE_FLIP_IN_STEREOSYNC {
SURFACE_FLIP_NOT_IN_STEREOSYNC_MODE      = 0x00000000,
SURFACE_FLIP_IN_STEREOSYNC_MODE          = 0x00000001,
} SURFACE_FLIP_IN_STEREOSYNC;

/*
 * SURFACE_FLIP_MODE_FOR_STEREOSYNC enum
 */

typedef enum SURFACE_FLIP_MODE_FOR_STEREOSYNC {
FLIP_ANY_FRAME                           = 0x00000000,
FLIP_LEFT_EYE                            = 0x00000001,
FLIP_RIGHT_EYE                           = 0x00000002,
SURFACE_FLIP_MODE_FOR_STEREOSYNC_RESERVED = 0x00000003,
} SURFACE_FLIP_MODE_FOR_STEREOSYNC;

/*
 * SURFACE_FLIP_STEREO_SELECT_DISABLE enum
 */

typedef enum SURFACE_FLIP_STEREO_SELECT_DISABLE {
SURFACE_FLIP_STEREO_SELECT_ENABLED       = 0x00000000,
SURFACE_FLIP_STEREO_SELECT_DISABLED      = 0x00000001,
} SURFACE_FLIP_STEREO_SELECT_DISABLE;

/*
 * SURFACE_FLIP_STEREO_SELECT_POLARITY enum
 */

typedef enum SURFACE_FLIP_STEREO_SELECT_POLARITY {
SURFACE_FLIP_STEREO_SELECT_POLARITY_NOT_INVERT = 0x00000000,
SURFACE_FLIP_STEREO_SELECT_POLARITY_INVERT = 0x00000001,
} SURFACE_FLIP_STEREO_SELECT_POLARITY;

/*
 * SURFACE_FLIP_TYPE enum
 */

typedef enum SURFACE_FLIP_TYPE {
SURFACE_V_FLIP                           = 0x00000000,
SURFACE_I_FLIP                           = 0x00000001,
} SURFACE_FLIP_TYPE;

/*
 * SURFACE_FLIP_VUPDATE_SKIP_NUM enum
 */

typedef enum SURFACE_FLIP_VUPDATE_SKIP_NUM {
SURFACE_FLIP_VUPDATE_SKIP_NUM_0          = 0x00000000,
SURFACE_FLIP_VUPDATE_SKIP_NUM_1          = 0x00000001,
SURFACE_FLIP_VUPDATE_SKIP_NUM_2          = 0x00000002,
SURFACE_FLIP_VUPDATE_SKIP_NUM_3          = 0x00000003,
SURFACE_FLIP_VUPDATE_SKIP_NUM_4          = 0x00000004,
SURFACE_FLIP_VUPDATE_SKIP_NUM_5          = 0x00000005,
SURFACE_FLIP_VUPDATE_SKIP_NUM_6          = 0x00000006,
SURFACE_FLIP_VUPDATE_SKIP_NUM_7          = 0x00000007,
SURFACE_FLIP_VUPDATE_SKIP_NUM_8          = 0x00000008,
SURFACE_FLIP_VUPDATE_SKIP_NUM_9          = 0x00000009,
SURFACE_FLIP_VUPDATE_SKIP_NUM_10         = 0x0000000a,
SURFACE_FLIP_VUPDATE_SKIP_NUM_11         = 0x0000000b,
SURFACE_FLIP_VUPDATE_SKIP_NUM_12         = 0x0000000c,
SURFACE_FLIP_VUPDATE_SKIP_NUM_13         = 0x0000000d,
SURFACE_FLIP_VUPDATE_SKIP_NUM_14         = 0x0000000e,
SURFACE_FLIP_VUPDATE_SKIP_NUM_15         = 0x0000000f,
} SURFACE_FLIP_VUPDATE_SKIP_NUM;

/*
 * SURFACE_INUSE_RAED_NO_LATCH enum
 */

typedef enum SURFACE_INUSE_RAED_NO_LATCH {
SURFACE_INUSE_IS_LATCHED                 = 0x00000000,
SURFACE_INUSE_IS_NOT_LATCHED             = 0x00000001,
} SURFACE_INUSE_RAED_NO_LATCH;

/*
 * SURFACE_TMZ enum
 */

typedef enum SURFACE_TMZ {
SURFACE_IS_NOT_TMZ                       = 0x00000000,
SURFACE_IS_TMZ                           = 0x00000001,
} SURFACE_TMZ;

/*
 * SURFACE_UPDATE_LOCK enum
 */

typedef enum SURFACE_UPDATE_LOCK {
SURFACE_UPDATE_IS_UNLOCKED               = 0x00000000,
SURFACE_UPDATE_IS_LOCKED                 = 0x00000001,
} SURFACE_UPDATE_LOCK;

/*******************************************************
 * HUBPRET Enums
 *******************************************************/

/*
 * CROSSBAR_FOR_ALPHA enum
 */

typedef enum CROSSBAR_FOR_ALPHA {
ALPHA_DATA_ONTO_ALPHA_PORT               = 0x00000000,
Y_G_DATA_ONTO_ALPHA_PORT                 = 0x00000001,
CB_B_DATA_ONTO_ALPHA_PORT                = 0x00000002,
CR_R_DATA_ONTO_ALPHA_PORT                = 0x00000003,
} CROSSBAR_FOR_ALPHA;

/*
 * CROSSBAR_FOR_CB_B enum
 */

typedef enum CROSSBAR_FOR_CB_B {
ALPHA_DATA_ONTO_CB_B_PORT                = 0x00000000,
Y_G_DATA_ONTO_CB_B_PORT                  = 0x00000001,
CB_B_DATA_ONTO_CB_B_PORT                 = 0x00000002,
CR_R_DATA_ONTO_CB_B_PORT                 = 0x00000003,
} CROSSBAR_FOR_CB_B;

/*
 * CROSSBAR_FOR_CR_R enum
 */

typedef enum CROSSBAR_FOR_CR_R {
ALPHA_DATA_ONTO_CR_R_PORT                = 0x00000000,
Y_G_DATA_ONTO_CR_R_PORT                  = 0x00000001,
CB_B_DATA_ONTO_CR_R_PORT                 = 0x00000002,
CR_R_DATA_ONTO_CR_R_PORT                 = 0x00000003,
} CROSSBAR_FOR_CR_R;

/*
 * CROSSBAR_FOR_Y_G enum
 */

typedef enum CROSSBAR_FOR_Y_G {
ALPHA_DATA_ONTO_Y_G_PORT                 = 0x00000000,
Y_G_DATA_ONTO_Y_G_PORT                   = 0x00000001,
CB_B_DATA_ONTO_Y_G_PORT                  = 0x00000002,
CR_R_DATA_ONTO_Y_G_PORT                  = 0x00000003,
} CROSSBAR_FOR_Y_G;

/*
 * DETILE_BUFFER_PACKER_ENABLE enum
 */

typedef enum DETILE_BUFFER_PACKER_ENABLE {
DETILE_BUFFER_PACKER_IS_DISABLE          = 0x00000000,
DETILE_BUFFER_PACKER_IS_ENABLE           = 0x00000001,
} DETILE_BUFFER_PACKER_ENABLE;

/*
 * MEM_PWR_DIS_MODE enum
 */

typedef enum MEM_PWR_DIS_MODE {
MEM_POWER_DIS_MODE_ENABLE                = 0x00000000,
MEM_POWER_DIS_MODE_DISABLE               = 0x00000001,
} MEM_PWR_DIS_MODE;

/*
 * MEM_PWR_FORCE_MODE enum
 */

typedef enum MEM_PWR_FORCE_MODE {
MEM_POWER_FORCE_MODE_OFF                 = 0x00000000,
MEM_POWER_FORCE_MODE_LIGHT_SLEEP         = 0x00000001,
MEM_POWER_FORCE_MODE_DEEP_SLEEP          = 0x00000002,
MEM_POWER_FORCE_MODE_SHUT_DOWN           = 0x00000003,
} MEM_PWR_FORCE_MODE;

/*
 * MEM_PWR_STATUS enum
 */

typedef enum MEM_PWR_STATUS {
MEM_POWER_STATUS_ON                      = 0x00000000,
MEM_POWER_STATUS_LIGHT_SLEEP             = 0x00000001,
MEM_POWER_STATUS_DEEP_SLEEP              = 0x00000002,
MEM_POWER_STATUS_SHUT_DOWN               = 0x00000003,
} MEM_PWR_STATUS;

/*
 * PIPE_INT_MASK_MODE enum
 */

typedef enum PIPE_INT_MASK_MODE {
PIPE_INT_MASK_MODE_DISABLE               = 0x00000000,
PIPE_INT_MASK_MODE_ENABLE                = 0x00000001,
} PIPE_INT_MASK_MODE;

/*
 * PIPE_INT_TYPE_MODE enum
 */

typedef enum PIPE_INT_TYPE_MODE {
PIPE_INT_TYPE_MODE_DISABLE               = 0x00000000,
PIPE_INT_TYPE_MODE_ENABLE                = 0x00000001,
} PIPE_INT_TYPE_MODE;

/*
 * PIXCDC_MEM_PWR_LIGHT_SLEEP_MODE enum
 */

typedef enum PIXCDC_MEM_PWR_LIGHT_SLEEP_MODE {
PIXCDC_MEM_POWER_LIGHT_SLEEP_MODE_OFF    = 0x00000000,
PIXCDC_MEM_POWER_LIGHT_SLEEP_MODE_1      = 0x00000001,
} PIXCDC_MEM_PWR_LIGHT_SLEEP_MODE;

/*******************************************************
 * CURSOR Enums
 *******************************************************/

/*
 * CROB_MEM_PWR_LIGHT_SLEEP_MODE enum
 */

typedef enum CROB_MEM_PWR_LIGHT_SLEEP_MODE {
CROB_MEM_POWER_LIGHT_SLEEP_MODE_OFF      = 0x00000000,
CROB_MEM_POWER_LIGHT_SLEEP_MODE_1        = 0x00000001,
CROB_MEM_POWER_LIGHT_SLEEP_MODE_2        = 0x00000002,
} CROB_MEM_PWR_LIGHT_SLEEP_MODE;

/*
 * CURSOR_2X_MAGNIFY enum
 */

typedef enum CURSOR_2X_MAGNIFY {
CURSOR_2X_MAGNIFY_IS_DISABLE             = 0x00000000,
CURSOR_2X_MAGNIFY_IS_ENABLE              = 0x00000001,
} CURSOR_2X_MAGNIFY;

/*
 * CURSOR_ENABLE enum
 */

typedef enum CURSOR_ENABLE {
CURSOR_IS_DISABLE                        = 0x00000000,
CURSOR_IS_ENABLE                         = 0x00000001,
} CURSOR_ENABLE;

/*
 * CURSOR_LINES_PER_CHUNK enum
 */

typedef enum CURSOR_LINES_PER_CHUNK {
CURSOR_LINE_PER_CHUNK_1                  = 0x00000000,
CURSOR_LINE_PER_CHUNK_2                  = 0x00000001,
CURSOR_LINE_PER_CHUNK_4                  = 0x00000002,
CURSOR_LINE_PER_CHUNK_8                  = 0x00000003,
CURSOR_LINE_PER_CHUNK_16                 = 0x00000004,
} CURSOR_LINES_PER_CHUNK;

/*
 * CURSOR_MODE enum
 */

typedef enum CURSOR_MODE {
CURSOR_MONO_2BIT                         = 0x00000000,
CURSOR_COLOR_24BIT_1BIT_AND              = 0x00000001,
CURSOR_COLOR_24BIT_8BIT_ALPHA_PREMULT    = 0x00000002,
CURSOR_COLOR_24BIT_8BIT_ALPHA_UNPREMULT  = 0x00000003,
CURSOR_COLOR_64BIT_FP_PREMULT            = 0x00000004,
CURSOR_COLOR_64BIT_FP_UNPREMULT          = 0x00000005,
} CURSOR_MODE;

/*
 * CURSOR_PERFMON_LATENCY_MEASURE_EN enum
 */

typedef enum CURSOR_PERFMON_LATENCY_MEASURE_EN {
CURSOR_PERFMON_LATENCY_MEASURE_IS_DISABLED = 0x00000000,
CURSOR_PERFMON_LATENCY_MEASURE_IS_ENABLED = 0x00000001,
} CURSOR_PERFMON_LATENCY_MEASURE_EN;

/*
 * CURSOR_PERFMON_LATENCY_MEASURE_SEL enum
 */

typedef enum CURSOR_PERFMON_LATENCY_MEASURE_SEL {
CURSOR_PERFMON_LATENCY_MEASURE_MC_LATENCY = 0x00000000,
CURSOR_PERFMON_LATENCY_MEASURE_CROB_LATENCY = 0x00000001,
} CURSOR_PERFMON_LATENCY_MEASURE_SEL;

/*
 * CURSOR_PITCH enum
 */

typedef enum CURSOR_PITCH {
CURSOR_PITCH_64_PIXELS                   = 0x00000000,
CURSOR_PITCH_128_PIXELS                  = 0x00000001,
CURSOR_PITCH_256_PIXELS                  = 0x00000002,
} CURSOR_PITCH;

/*
 * CURSOR_REQ_MODE enum
 */

typedef enum CURSOR_REQ_MODE {
CURSOR_REQUEST_NORMALLY                  = 0x00000000,
CURSOR_REQUEST_EARLY                     = 0x00000001,
} CURSOR_REQ_MODE;

/*
 * CURSOR_SNOOP enum
 */

typedef enum CURSOR_SNOOP {
CURSOR_IS_NOT_SNOOP                      = 0x00000000,
CURSOR_IS_SNOOP                          = 0x00000001,
} CURSOR_SNOOP;

/*
 * CURSOR_STEREO_EN enum
 */

typedef enum CURSOR_STEREO_EN {
CURSOR_STEREO_IS_DISABLED                = 0x00000000,
CURSOR_STEREO_IS_ENABLED                 = 0x00000001,
} CURSOR_STEREO_EN;

/*
 * CURSOR_SURFACE_TMZ enum
 */

typedef enum CURSOR_SURFACE_TMZ {
CURSOR_SURFACE_IS_NOT_TMZ                = 0x00000000,
CURSOR_SURFACE_IS_TMZ                    = 0x00000001,
} CURSOR_SURFACE_TMZ;

/*
 * CURSOR_SYSTEM enum
 */

typedef enum CURSOR_SYSTEM {
CURSOR_IN_SYSTEM_PHYSICAL_ADDRESS        = 0x00000000,
CURSOR_IN_GUEST_PHYSICAL_ADDRESS         = 0x00000001,
} CURSOR_SYSTEM;

/*
 * CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS enum
 */

typedef enum CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS {
CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS_0 = 0x00000000,
CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS_1 = 0x00000001,
} CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS;

/*
 * DMDATA_DONE enum
 */

typedef enum DMDATA_DONE {
DMDATA_NOT_SENT_TO_DIG                   = 0x00000000,
DMDATA_SENT_TO_DIG                       = 0x00000001,
} DMDATA_DONE;

/*
 * DMDATA_MODE enum
 */

typedef enum DMDATA_MODE {
DMDATA_SOFTWARE_UPDATE_MODE              = 0x00000000,
DMDATA_HARDWARE_UPDATE_MODE              = 0x00000001,
} DMDATA_MODE;

/*
 * DMDATA_QOS_MODE enum
 */

typedef enum DMDATA_QOS_MODE {
DMDATA_QOS_LEVEL_FROM_TTU                = 0x00000000,
DMDATA_QOS_LEVEL_FROM_SOFTWARE           = 0x00000001,
} DMDATA_QOS_MODE;

/*
 * DMDATA_REPEAT enum
 */

typedef enum DMDATA_REPEAT {
DMDATA_USE_FOR_CURRENT_FRAME_ONLY        = 0x00000000,
DMDATA_USE_FOR_CURRENT_AND_FUTURE_FRAMES = 0x00000001,
} DMDATA_REPEAT;

/*
 * DMDATA_UNDERFLOW enum
 */

typedef enum DMDATA_UNDERFLOW {
DMDATA_NOT_UNDERFLOW                     = 0x00000000,
DMDATA_UNDERFLOWED                       = 0x00000001,
} DMDATA_UNDERFLOW;

/*
 * DMDATA_UNDERFLOW_CLEAR enum
 */

typedef enum DMDATA_UNDERFLOW_CLEAR {
DMDATA_DONT_CLEAR                        = 0x00000000,
DMDATA_CLEAR_UNDERFLOW_STATUS            = 0x00000001,
} DMDATA_UNDERFLOW_CLEAR;

/*
 * DMDATA_UPDATED enum
 */

typedef enum DMDATA_UPDATED {
DMDATA_NOT_UPDATED                       = 0x00000000,
DMDATA_WAS_UPDATED                       = 0x00000001,
} DMDATA_UPDATED;

/*******************************************************
 * HUBBUB_SDPIF Enums
 *******************************************************/

/*
 * RESPONSE_STATUS enum
 */

typedef enum RESPONSE_STATUS {
OKAY                                     = 0x00000000,
EXOKAY                                   = 0x00000001,
SLVERR                                   = 0x00000002,
DECERR                                   = 0x00000003,
EARLY                                    = 0x00000004,
OKAY_NODATA                              = 0x00000005,
PROTVIOL                                 = 0x00000006,
TRANSERR                                 = 0x00000007,
CMPTO                                    = 0x00000008,
CRS                                      = 0x0000000c,
} RESPONSE_STATUS;

/*******************************************************
 * HUBBUB_RET_PATH Enums
 *******************************************************/

/*
 * DCHUBBUB_DET_MEM_PWR_LIGHT_SLEEP_MODE enum
 */

typedef enum DCHUBBUB_DET_MEM_PWR_LIGHT_SLEEP_MODE {
DCHUBBUB_DET_MEM_POWER_LIGHT_SLEEP_MODE_OFF = 0x00000000,
DCHUBBUB_DET_MEM_POWER_LIGHT_SLEEP_MODE_1 = 0x00000001,
DCHUBBUB_DET_MEM_POWER_LIGHT_SLEEP_MODE_2 = 0x00000002,
} DCHUBBUB_DET_MEM_PWR_LIGHT_SLEEP_MODE;

/*
 * DCHUBBUB_MEM_PWR_DIS_MODE enum
 */

typedef enum DCHUBBUB_MEM_PWR_DIS_MODE {
DCHUBBUB_MEM_POWER_DIS_MODE_ENABLE       = 0x00000000,
DCHUBBUB_MEM_POWER_DIS_MODE_DISABLE      = 0x00000001,
} DCHUBBUB_MEM_PWR_DIS_MODE;

/*
 * DCHUBBUB_MEM_PWR_MODE enum
 */

typedef enum DCHUBBUB_MEM_PWR_MODE {
DCHUBBUB_MEM_POWER_MODE_OFF              = 0x00000000,
DCHUBBUB_MEM_POWER_MODE_LIGHT_SLEEP      = 0x00000001,
DCHUBBUB_MEM_POWER_MODE_DEEP_SLEEP       = 0x00000002,
DCHUBBUB_MEM_POWER_MODE_SHUT_DOWN        = 0x00000003,
} DCHUBBUB_MEM_PWR_MODE;

/*******************************************************
 * MPC_CFG Enums
 *******************************************************/

/*
 * MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET {
MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET_FALSE = 0x00000000,
MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET_TRUE = 0x00000001,
} MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET {
MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET_FALSE   = 0x00000000,
MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET_TRUE    = 0x00000001,
} MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_ADR_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_ADR_VUPDATE_LOCK_SET {
MPC_CFG_ADR_VUPDATE_LOCK_SET_FALSE       = 0x00000000,
MPC_CFG_ADR_VUPDATE_LOCK_SET_TRUE        = 0x00000001,
} MPC_CFG_ADR_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_CFG_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_CFG_VUPDATE_LOCK_SET {
MPC_CFG_CFG_VUPDATE_LOCK_SET_FALSE       = 0x00000000,
MPC_CFG_CFG_VUPDATE_LOCK_SET_TRUE        = 0x00000001,
} MPC_CFG_CFG_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_CUR_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_CUR_VUPDATE_LOCK_SET {
MPC_CFG_CUR_VUPDATE_LOCK_SET_FALSE       = 0x00000000,
MPC_CFG_CUR_VUPDATE_LOCK_SET_TRUE        = 0x00000001,
} MPC_CFG_CUR_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_MPC_TEST_CLK_SEL enum
 */

typedef enum MPC_CFG_MPC_TEST_CLK_SEL {
MPC_CFG_MPC_TEST_CLK_SEL_0               = 0x00000000,
MPC_CFG_MPC_TEST_CLK_SEL_1               = 0x00000001,
MPC_CFG_MPC_TEST_CLK_SEL_2               = 0x00000002,
MPC_CFG_MPC_TEST_CLK_SEL_3               = 0x00000003,
} MPC_CFG_MPC_TEST_CLK_SEL;

/*
 * MPC_CFG_TEST_DEBUG_INDEX_MPC_CFG_TEST_DEBUG_WRITE_EN enum
 */

typedef enum MPC_CFG_TEST_DEBUG_INDEX_MPC_CFG_TEST_DEBUG_WRITE_EN {
MPC_CFG_TEST_DEBUG_INDEX_MPC_CFG_TEST_DEBUG_WRITE_EN_FALSE = 0x00000000,
MPC_CFG_TEST_DEBUG_INDEX_MPC_CFG_TEST_DEBUG_WRITE_EN_TRUE = 0x00000001,
} MPC_CFG_TEST_DEBUG_INDEX_MPC_CFG_TEST_DEBUG_WRITE_EN;

/*
 * MPC_CRC_CALC_INTERLACE_MODE enum
 */

typedef enum MPC_CRC_CALC_INTERLACE_MODE {
MPC_CRC_INTERLACE_MODE_TOP               = 0x00000000,
MPC_CRC_INTERLACE_MODE_BOTTOM            = 0x00000001,
MPC_CRC_INTERLACE_MODE_BOTH_RESET_BOTTOM = 0x00000002,
MPC_CRC_INTERLACE_MODE_BOTH_RESET_EACH   = 0x00000003,
} MPC_CRC_CALC_INTERLACE_MODE;

/*
 * MPC_CRC_CALC_MODE enum
 */

typedef enum MPC_CRC_CALC_MODE {
MPC_CRC_ONE_SHOT_MODE                    = 0x00000000,
MPC_CRC_CONTINUOUS_MODE                  = 0x00000001,
} MPC_CRC_CALC_MODE;

/*
 * MPC_CRC_CALC_STEREO_MODE enum
 */

typedef enum MPC_CRC_CALC_STEREO_MODE {
MPC_CRC_STEREO_MODE_LEFT                 = 0x00000000,
MPC_CRC_STEREO_MODE_RIGHT                = 0x00000001,
MPC_CRC_STEREO_MODE_BOTH_RESET_RIGHT     = 0x00000002,
MPC_CRC_STEREO_MODE_BOTH_RESET_EACH      = 0x00000003,
} MPC_CRC_CALC_STEREO_MODE;

/*
 * MPC_CRC_SOURCE_SELECT enum
 */

typedef enum MPC_CRC_SOURCE_SELECT {
MPC_CRC_SOURCE_SEL_DPP                   = 0x00000000,
MPC_CRC_SOURCE_SEL_OPP                   = 0x00000001,
MPC_CRC_SOURCE_SEL_DWB                   = 0x00000002,
MPC_CRC_SOURCE_SEL_OTHER                 = 0x00000003,
} MPC_CRC_SOURCE_SELECT;

/*
 * MPC_DEBUG_BUS1_DATA_SELECT enum
 */

typedef enum MPC_DEBUG_BUS1_DATA_SELECT {
MPC_DEBUG_BUS1_DATA_SELECT_MPC_CFG       = 0x00000000,
MPC_DEBUG_BUS1_DATA_SELECT_MPC_CONT      = 0x00000001,
MPC_DEBUG_BUS1_DATA_SELECT_MPC_RSV1      = 0x00000002,
MPC_DEBUG_BUS1_DATA_SELECT_MPC_RSV       = 0x00000003,
} MPC_DEBUG_BUS1_DATA_SELECT;

/*
 * MPC_DEBUG_BUS2_DATA_SELECT enum
 */

typedef enum MPC_DEBUG_BUS2_DATA_SELECT {
MPC_DEBUG_BUS2_DATA_SELECT_MPCC          = 0x00000000,
MPC_DEBUG_BUS2_DATA_SELECT_MPCC_CONT     = 0x00000001,
MPC_DEBUG_BUS2_DATA_SELECT_MPCC_MCM      = 0x00000002,
MPC_DEBUG_BUS2_DATA_SELECT_RES           = 0x00000003,
} MPC_DEBUG_BUS2_DATA_SELECT;

/*
 * MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT enum
 */

typedef enum MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT {
MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT_MPC_DEBUG_ID = 0x00000000,
MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT_MPCC_DEBUG_ID = 0x00000001,
MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT_MPCC_OGAM_DEBUG_ID = 0x00000002,
MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT_MPC_OCSC_DEBUG_ID = 0x00000003,
MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT_SFR_DEBUG_DATA = 0x00000004,
MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT_SFT_DEBUG_DATA = 0x00000005,
MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT_RSV1 = 0x00000006,
MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT_MPCC_MCM_DEBUG_ID = 0x00000007,
} MPC_DEBUG_BUS_DIRECT_OUT_DATA_SELECT;

/*
 * MPC_DEBUG_BUS_MPCC_BYTE_SELECT enum
 */

typedef enum MPC_DEBUG_BUS_MPCC_BYTE_SELECT {
MPC_DEBUG_BUS_MPCC_BYTE0                 = 0x00000000,
MPC_DEBUG_BUS_MPCC_BYTE1                 = 0x00000001,
MPC_DEBUG_BUS_MPCC_BYTE2                 = 0x00000002,
MPC_DEBUG_BUS_MPCC_BYTE3                 = 0x00000003,
} MPC_DEBUG_BUS_MPCC_BYTE_SELECT;

/*******************************************************
 * MPC_OCSC Enums
 *******************************************************/

/*
 * MPC_OCSC_COEF_FORMAT enum
 */

typedef enum MPC_OCSC_COEF_FORMAT {
MPC_OCSC_COEF_FORMAT_S2_13               = 0x00000000,
MPC_OCSC_COEF_FORMAT_S3_12               = 0x00000001,
} MPC_OCSC_COEF_FORMAT;

/*
 * MPC_OCSC_TEST_DEBUG_INDEX_MPC_OCSC_TEST_DEBUG_WRITE_EN enum
 */

typedef enum MPC_OCSC_TEST_DEBUG_INDEX_MPC_OCSC_TEST_DEBUG_WRITE_EN {
MPC_OCSC_TEST_DEBUG_INDEX_MPC_OCSC_TEST_DEBUG_WRITE_EN_FALSE = 0x00000000,
MPC_OCSC_TEST_DEBUG_INDEX_MPC_OCSC_TEST_DEBUG_WRITE_EN_TRUE = 0x00000001,
} MPC_OCSC_TEST_DEBUG_INDEX_MPC_OCSC_TEST_DEBUG_WRITE_EN;

/*
 * MPC_OUT_CSC_MODE enum
 */

typedef enum MPC_OUT_CSC_MODE {
MPC_OUT_CSC_MODE_0                       = 0x00000000,
MPC_OUT_CSC_MODE_1                       = 0x00000001,
MPC_OUT_CSC_MODE_2                       = 0x00000002,
MPC_OUT_CSC_MODE_RSV                     = 0x00000003,
} MPC_OUT_CSC_MODE;

/*
 * MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_MODE enum
 */

typedef enum MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_MODE {
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_BYPASS = 0x00000000,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_6BITS = 0x00000001,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_8BITS = 0x00000002,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_9BITS = 0x00000003,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_10BITS = 0x00000004,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_11BITS = 0x00000005,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_12BITS = 0x00000006,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_PASSTHROUGH = 0x00000007,
} MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_MODE;

/*
 * MPC_OUT_RATE_CONTROL_DISABLE_SET enum
 */

typedef enum MPC_OUT_RATE_CONTROL_DISABLE_SET {
MPC_OUT_RATE_CONTROL_SET_ENABLE          = 0x00000000,
MPC_OUT_RATE_CONTROL_SET_DISABLE         = 0x00000001,
} MPC_OUT_RATE_CONTROL_DISABLE_SET;

/*******************************************************
 * MPCC Enums
 *******************************************************/

/*
 * MPCC_BG_COLOR_BPC enum
 */

typedef enum MPCC_BG_COLOR_BPC {
MPCC_BG_COLOR_BPC_8bit                   = 0x00000000,
MPCC_BG_COLOR_BPC_9bit                   = 0x00000001,
MPCC_BG_COLOR_BPC_10bit                  = 0x00000002,
MPCC_BG_COLOR_BPC_11bit                  = 0x00000003,
MPCC_BG_COLOR_BPC_12bit                  = 0x00000004,
} MPCC_BG_COLOR_BPC;

/*
 * MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY enum
 */

typedef enum MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY {
MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY_FALSE = 0x00000000,
MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY_TRUE = 0x00000001,
} MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY;

/*
 * MPCC_CONTROL_MPCC_ALPHA_BLND_MODE enum
 */

typedef enum MPCC_CONTROL_MPCC_ALPHA_BLND_MODE {
MPCC_CONTROL_MPCC_ALPHA_BLND_MODE_PER_PIXEL_ALPHA = 0x00000000,
MPCC_CONTROL_MPCC_ALPHA_BLND_MODE_PER_PIXEL_ALPHA_COMBINED_GLOBAL_GAIN = 0x00000001,
MPCC_CONTROL_MPCC_ALPHA_BLND_MODE_GLOBAL_ALPHA = 0x00000002,
MPCC_CONTROL_MPCC_ALPHA_BLND_MODE_UNUSED = 0x00000003,
} MPCC_CONTROL_MPCC_ALPHA_BLND_MODE;

/*
 * MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE enum
 */

typedef enum MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE {
MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE_FALSE = 0x00000000,
MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE_TRUE = 0x00000001,
} MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE;

/*
 * MPCC_CONTROL_MPCC_BOT_GAIN_MODE enum
 */

typedef enum MPCC_CONTROL_MPCC_BOT_GAIN_MODE {
MPCC_CONTROL_MPCC_BOT_GAIN_MODE_0        = 0x00000000,
MPCC_CONTROL_MPCC_BOT_GAIN_MODE_1        = 0x00000001,
} MPCC_CONTROL_MPCC_BOT_GAIN_MODE;

/*
 * MPCC_CONTROL_MPCC_MODE enum
 */

typedef enum MPCC_CONTROL_MPCC_MODE {
MPCC_CONTROL_MPCC_MODE_BYPASS            = 0x00000000,
MPCC_CONTROL_MPCC_MODE_TOP_LAYER_PASSTHROUGH = 0x00000001,
MPCC_CONTROL_MPCC_MODE_TOP_LAYER_ONLY    = 0x00000002,
MPCC_CONTROL_MPCC_MODE_TOP_BOT_BLENDING  = 0x00000003,
} MPCC_CONTROL_MPCC_MODE;

/*
 * MPCC_SM_CONTROL_MPCC_SM_EN enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_EN {
MPCC_SM_CONTROL_MPCC_SM_EN_FALSE         = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_EN_TRUE          = 0x00000001,
} MPCC_SM_CONTROL_MPCC_SM_EN;

/*
 * MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT {
MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT_FALSE  = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT_TRUE   = 0x00000001,
} MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT;

/*
 * MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL {
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL_NO_FORCE = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL_RESERVED = 0x00000001,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL_FORCE_LOW = 0x00000002,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL_FORCE_HIGH = 0x00000003,
} MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL;

/*
 * MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL {
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL_NO_FORCE = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL_RESERVED = 0x00000001,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL_FORCE_LOW = 0x00000002,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL_FORCE_HIGH = 0x00000003,
} MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL;

/*
 * MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT {
MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT_FALSE  = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT_TRUE   = 0x00000001,
} MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT;

/*
 * MPCC_SM_CONTROL_MPCC_SM_MODE enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_MODE {
MPCC_SM_CONTROL_MPCC_SM_MODE_SINGLE_PLANE = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_MODE_ROW_SUBSAMPLING = 0x00000002,
MPCC_SM_CONTROL_MPCC_SM_MODE_COLUMN_SUBSAMPLING = 0x00000004,
MPCC_SM_CONTROL_MPCC_SM_MODE_CHECKERBOARD_SUBSAMPLING = 0x00000006,
} MPCC_SM_CONTROL_MPCC_SM_MODE;

/*
 * MPCC_TEST_DEBUG_INDEX_MPCC_TEST_DEBUG_WRITE_EN enum
 */

typedef enum MPCC_TEST_DEBUG_INDEX_MPCC_TEST_DEBUG_WRITE_EN {
MPCC_TEST_DEBUG_INDEX_MPCC_TEST_DEBUG_WRITE_EN_FALSE = 0x00000000,
MPCC_TEST_DEBUG_INDEX_MPCC_TEST_DEBUG_WRITE_EN_TRUE = 0x00000001,
} MPCC_TEST_DEBUG_INDEX_MPCC_TEST_DEBUG_WRITE_EN;

/*******************************************************
 * MPCC_OGAM Enums
 *******************************************************/

/*
 * MPCC_GAMUT_REMAP_COEF_FORMAT_ENUM enum
 */

typedef enum MPCC_GAMUT_REMAP_COEF_FORMAT_ENUM {
MPCC_GAMUT_REMAP_COEF_FORMAT_S2_13       = 0x00000000,
MPCC_GAMUT_REMAP_COEF_FORMAT_S3_12       = 0x00000001,
} MPCC_GAMUT_REMAP_COEF_FORMAT_ENUM;

/*
 * MPCC_GAMUT_REMAP_MODE_ENUM enum
 */

typedef enum MPCC_GAMUT_REMAP_MODE_ENUM {
MPCC_GAMUT_REMAP_MODE_0                  = 0x00000000,
MPCC_GAMUT_REMAP_MODE_1                  = 0x00000001,
MPCC_GAMUT_REMAP_MODE_2                  = 0x00000002,
MPCC_GAMUT_REMAP_MODE_RSV                = 0x00000003,
} MPCC_GAMUT_REMAP_MODE_ENUM;

/*
 * MPCC_OGAM_LUT_2_CONFIG_ENUM enum
 */

typedef enum MPCC_OGAM_LUT_2_CONFIG_ENUM {
MPCC_OGAM_LUT_2CFG_NO_MEMORY             = 0x00000000,
MPCC_OGAM_LUT_2CFG_MEMORY_A              = 0x00000001,
MPCC_OGAM_LUT_2CFG_MEMORY_B              = 0x00000002,
} MPCC_OGAM_LUT_2_CONFIG_ENUM;

/*
 * MPCC_OGAM_LUT_CONFIG_MODE enum
 */

typedef enum MPCC_OGAM_LUT_CONFIG_MODE {
MPCC_OGAM_DIFFERENT_RGB                  = 0x00000000,
MPCC_OGAM_ALL_USE_R                      = 0x00000001,
} MPCC_OGAM_LUT_CONFIG_MODE;

/*
 * MPCC_OGAM_LUT_PWL_DISABLE_ENUM enum
 */

typedef enum MPCC_OGAM_LUT_PWL_DISABLE_ENUM {
MPCC_OGAM_ENABLE_PWL                     = 0x00000000,
MPCC_OGAM_DISABLE_PWL                    = 0x00000001,
} MPCC_OGAM_LUT_PWL_DISABLE_ENUM;

/*
 * MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL enum
 */

typedef enum MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL {
MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL_RAMA = 0x00000000,
MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL_RAMB = 0x00000001,
} MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL;

/*
 * MPCC_OGAM_LUT_RAM_SEL enum
 */

typedef enum MPCC_OGAM_LUT_RAM_SEL {
MPCC_OGAM_RAMA_ACCESS                    = 0x00000000,
MPCC_OGAM_RAMB_ACCESS                    = 0x00000001,
} MPCC_OGAM_LUT_RAM_SEL;

/*
 * MPCC_OGAM_LUT_READ_COLOR_SEL enum
 */

typedef enum MPCC_OGAM_LUT_READ_COLOR_SEL {
MPCC_OGAM_BLUE_LUT                       = 0x00000000,
MPCC_OGAM_GREEN_LUT                      = 0x00000001,
MPCC_OGAM_RED_LUT                        = 0x00000002,
} MPCC_OGAM_LUT_READ_COLOR_SEL;

/*
 * MPCC_OGAM_LUT_READ_DBG enum
 */

typedef enum MPCC_OGAM_LUT_READ_DBG {
MPCC_OGAM_DISABLE_DEBUG                  = 0x00000000,
MPCC_OGAM_ENABLE_DEBUG                   = 0x00000001,
} MPCC_OGAM_LUT_READ_DBG;

/*
 * MPCC_OGAM_LUT_SEL_ENUM enum
 */

typedef enum MPCC_OGAM_LUT_SEL_ENUM {
MPCC_OGAM_RAMA                           = 0x00000000,
MPCC_OGAM_RAMB                           = 0x00000001,
} MPCC_OGAM_LUT_SEL_ENUM;

/*
 * MPCC_OGAM_MODE_MPCC_OGAM_MODE_ENUM enum
 */

typedef enum MPCC_OGAM_MODE_MPCC_OGAM_MODE_ENUM {
MPCC_OGAM_MODE_0                         = 0x00000000,
MPCC_OGAM_MODE_RSV1                      = 0x00000001,
MPCC_OGAM_MODE_2                         = 0x00000002,
MPCC_OGAM_MODE_RSV                       = 0x00000003,
} MPCC_OGAM_MODE_MPCC_OGAM_MODE_ENUM;

/*
 * MPCC_OGAM_NUM_SEG enum
 */

typedef enum MPCC_OGAM_NUM_SEG {
MPCC_OGAM_SEGMENTS_1                     = 0x00000000,
MPCC_OGAM_SEGMENTS_2                     = 0x00000001,
MPCC_OGAM_SEGMENTS_4                     = 0x00000002,
MPCC_OGAM_SEGMENTS_8                     = 0x00000003,
MPCC_OGAM_SEGMENTS_16                    = 0x00000004,
MPCC_OGAM_SEGMENTS_32                    = 0x00000005,
MPCC_OGAM_SEGMENTS_64                    = 0x00000006,
MPCC_OGAM_SEGMENTS_128                   = 0x00000007,
} MPCC_OGAM_NUM_SEG;

/*
 * MPCC_OGAM_TEST_DEBUG_INDEX_MPCC_OGAM_TEST_DEBUG_WRITE_EN enum
 */

typedef enum MPCC_OGAM_TEST_DEBUG_INDEX_MPCC_OGAM_TEST_DEBUG_WRITE_EN {
MPCC_OGAM_TEST_DEBUG_INDEX_MPCC_OGAM_TEST_DEBUG_WRITE_EN_FALSE = 0x00000000,
MPCC_OGAM_TEST_DEBUG_INDEX_MPCC_OGAM_TEST_DEBUG_WRITE_EN_TRUE = 0x00000001,
} MPCC_OGAM_TEST_DEBUG_INDEX_MPCC_OGAM_TEST_DEBUG_WRITE_EN;

/*******************************************************
 * MPCC_MCM Enums
 *******************************************************/

/*
 * MPCC_MCM_3DLUT_30BIT_ENUM enum
 */

typedef enum MPCC_MCM_3DLUT_30BIT_ENUM {
MPCC_MCM_3DLUT_36BIT                     = 0x00000000,
MPCC_MCM_3DLUT_30BIT                     = 0x00000001,
} MPCC_MCM_3DLUT_30BIT_ENUM;

/*
 * MPCC_MCM_3DLUT_RAM_SEL enum
 */

typedef enum MPCC_MCM_3DLUT_RAM_SEL {
MPCC_MCM_RAM0_ACCESS                     = 0x00000000,
MPCC_MCM_RAM1_ACCESS                     = 0x00000001,
MPCC_MCM_RAM2_ACCESS                     = 0x00000002,
MPCC_MCM_RAM3_ACCESS                     = 0x00000003,
} MPCC_MCM_3DLUT_RAM_SEL;

/*
 * MPCC_MCM_3DLUT_SIZE_ENUM enum
 */

typedef enum MPCC_MCM_3DLUT_SIZE_ENUM {
MPCC_MCM_3DLUT_17CUBE                    = 0x00000000,
MPCC_MCM_3DLUT_9CUBE                     = 0x00000001,
} MPCC_MCM_3DLUT_SIZE_ENUM;

/*
 * MPCC_MCM_GAMMA_LUT_MODE_ENUM enum
 */

typedef enum MPCC_MCM_GAMMA_LUT_MODE_ENUM {
MPCC_MCM_GAMMA_LUT_BYPASS                = 0x00000000,
MPCC_MCM_GAMMA_LUT_RESERVED_1            = 0x00000001,
MPCC_MCM_GAMMA_LUT_RAM_LUT               = 0x00000002,
MPCC_MCM_GAMMA_LUT_RESERVED_3            = 0x00000003,
} MPCC_MCM_GAMMA_LUT_MODE_ENUM;

/*
 * MPCC_MCM_GAMMA_LUT_PWL_DISABLE_ENUM enum
 */

typedef enum MPCC_MCM_GAMMA_LUT_PWL_DISABLE_ENUM {
MPCC_MCM_GAMMA_LUT_ENABLE_PWL            = 0x00000000,
MPCC_MCM_GAMMA_LUT_DISABLE_PWL           = 0x00000001,
} MPCC_MCM_GAMMA_LUT_PWL_DISABLE_ENUM;

/*
 * MPCC_MCM_GAMMA_LUT_SEL_ENUM enum
 */

typedef enum MPCC_MCM_GAMMA_LUT_SEL_ENUM {
MPCC_MCM_GAMMA_LUT_RAMA                  = 0x00000000,
MPCC_MCM_GAMMA_LUT_RAMB                  = 0x00000001,
} MPCC_MCM_GAMMA_LUT_SEL_ENUM;

/*
 * MPCC_MCM_LUT_2_MODE_ENUM enum
 */

typedef enum MPCC_MCM_LUT_2_MODE_ENUM {
MPCC_MCM_LUT_2_MODE_BYPASS               = 0x00000000,
MPCC_MCM_LUT_2_MODE_RAMA_LUT             = 0x00000001,
MPCC_MCM_LUT_2_MODE_RAMB_LUT             = 0x00000002,
} MPCC_MCM_LUT_2_MODE_ENUM;

/*
 * MPCC_MCM_LUT_CONFIG_MODE enum
 */

typedef enum MPCC_MCM_LUT_CONFIG_MODE {
MPCC_MCM_LUT_DIFFERENT_RGB               = 0x00000000,
MPCC_MCM_LUT_ALL_USE_R                   = 0x00000001,
} MPCC_MCM_LUT_CONFIG_MODE;

/*
 * MPCC_MCM_LUT_NUM_SEG enum
 */

typedef enum MPCC_MCM_LUT_NUM_SEG {
MPCC_MCM_LUT_SEGMENTS_1                  = 0x00000000,
MPCC_MCM_LUT_SEGMENTS_2                  = 0x00000001,
MPCC_MCM_LUT_SEGMENTS_4                  = 0x00000002,
MPCC_MCM_LUT_SEGMENTS_8                  = 0x00000003,
MPCC_MCM_LUT_SEGMENTS_16                 = 0x00000004,
MPCC_MCM_LUT_SEGMENTS_32                 = 0x00000005,
MPCC_MCM_LUT_SEGMENTS_64                 = 0x00000006,
MPCC_MCM_LUT_SEGMENTS_128                = 0x00000007,
} MPCC_MCM_LUT_NUM_SEG;

/*
 * MPCC_MCM_LUT_RAM_SEL enum
 */

typedef enum MPCC_MCM_LUT_RAM_SEL {
MPCC_MCM_LUT_RAMA_ACCESS                 = 0x00000000,
MPCC_MCM_LUT_RAMB_ACCESS                 = 0x00000001,
} MPCC_MCM_LUT_RAM_SEL;

/*
 * MPCC_MCM_LUT_READ_COLOR_SEL enum
 */

typedef enum MPCC_MCM_LUT_READ_COLOR_SEL {
MPCC_MCM_LUT_BLUE_LUT                    = 0x00000000,
MPCC_MCM_LUT_GREEN_LUT                   = 0x00000001,
MPCC_MCM_LUT_RED_LUT                     = 0x00000002,
} MPCC_MCM_LUT_READ_COLOR_SEL;

/*
 * MPCC_MCM_LUT_READ_DBG enum
 */

typedef enum MPCC_MCM_LUT_READ_DBG {
MPCC_MCM_LUT_DISABLE_DEBUG               = 0x00000000,
MPCC_MCM_LUT_ENABLE_DEBUG                = 0x00000001,
} MPCC_MCM_LUT_READ_DBG;

/*
 * MPCC_MCM_MEM_PWR_FORCE_ENUM enum
 */

typedef enum MPCC_MCM_MEM_PWR_FORCE_ENUM {
MPCC_MCM_MEM_PWR_FORCE_DIS               = 0x00000000,
MPCC_MCM_MEM_PWR_FORCE_LS                = 0x00000001,
MPCC_MCM_MEM_PWR_FORCE_DS                = 0x00000002,
MPCC_MCM_MEM_PWR_FORCE_SD                = 0x00000003,
} MPCC_MCM_MEM_PWR_FORCE_ENUM;

/*
 * MPCC_MCM_MEM_PWR_STATE_ENUM enum
 */

typedef enum MPCC_MCM_MEM_PWR_STATE_ENUM {
MPCC_MCM_MEM_PWR_STATE_ON                = 0x00000000,
MPCC_MCM_MEM_PWR_STATE_LS                = 0x00000001,
MPCC_MCM_MEM_PWR_STATE_DS                = 0x00000002,
MPCC_MCM_MEM_PWR_STATE_SD                = 0x00000003,
} MPCC_MCM_MEM_PWR_STATE_ENUM;

/*******************************************************
 * ABM Enums
 *******************************************************/

/*******************************************************
 * DPG Enums
 *******************************************************/

/*
 * ENUM_DPG_BIT_DEPTH enum
 */

typedef enum ENUM_DPG_BIT_DEPTH {
ENUM_DPG_BIT_DEPTH_6BPC                  = 0x00000000,
ENUM_DPG_BIT_DEPTH_8BPC                  = 0x00000001,
ENUM_DPG_BIT_DEPTH_10BPC                 = 0x00000002,
ENUM_DPG_BIT_DEPTH_12BPC                 = 0x00000003,
} ENUM_DPG_BIT_DEPTH;

/*
 * ENUM_DPG_DYNAMIC_RANGE enum
 */

typedef enum ENUM_DPG_DYNAMIC_RANGE {
ENUM_DPG_DYNAMIC_RANGE_VESA              = 0x00000000,
ENUM_DPG_DYNAMIC_RANGE_CEA               = 0x00000001,
} ENUM_DPG_DYNAMIC_RANGE;

/*
 * ENUM_DPG_EN enum
 */

typedef enum ENUM_DPG_EN {
ENUM_DPG_DISABLE                         = 0x00000000,
ENUM_DPG_ENABLE                          = 0x00000001,
} ENUM_DPG_EN;

/*
 * ENUM_DPG_FIELD_POLARITY enum
 */

typedef enum ENUM_DPG_FIELD_POLARITY {
ENUM_DPG_FIELD_POLARITY_TOP_EVEN_BOTTOM_ODD = 0x00000000,
ENUM_DPG_FIELD_POLARITY_TOP_ODD_BOTTOM_EVEN = 0x00000001,
} ENUM_DPG_FIELD_POLARITY;

/*
 * ENUM_DPG_MODE enum
 */

typedef enum ENUM_DPG_MODE {
ENUM_DPG_MODE_RGB_COLOUR_BLOCK           = 0x00000000,
ENUM_DPG_MODE_YCBCR_601_COLOUR_BLOCK     = 0x00000001,
ENUM_DPG_MODE_YCBCR_709_COLOUR_BLOCK     = 0x00000002,
ENUM_DPG_MODE_VERTICAL_BAR               = 0x00000003,
ENUM_DPG_MODE_HORIZONTAL_BAR             = 0x00000004,
ENUM_DPG_MODE_RGB_SINGLE_RAMP            = 0x00000005,
ENUM_DPG_MODE_RGB_DUAL_RAMP              = 0x00000006,
ENUM_DPG_MODE_RGB_XR_BIAS                = 0x00000007,
} ENUM_DPG_MODE;

/*******************************************************
 * FMT Enums
 *******************************************************/

/*
 * FMTMEM_PWR_DIS_CTRL enum
 */

typedef enum FMTMEM_PWR_DIS_CTRL {
FMTMEM_ENABLE_MEM_PWR_CTRL               = 0x00000000,
FMTMEM_DISABLE_MEM_PWR_CTRL              = 0x00000001,
} FMTMEM_PWR_DIS_CTRL;

/*
 * FMTMEM_PWR_FORCE_CTRL enum
 */

typedef enum FMTMEM_PWR_FORCE_CTRL {
FMTMEM_NO_FORCE_REQUEST                  = 0x00000000,
FMTMEM_FORCE_LIGHT_SLEEP_REQUEST         = 0x00000001,
FMTMEM_FORCE_DEEP_SLEEP_REQUEST          = 0x00000002,
FMTMEM_FORCE_SHUT_DOWN_REQUEST           = 0x00000003,
} FMTMEM_PWR_FORCE_CTRL;

/*
 * FMT_BIT_DEPTH_CONTROL_25FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_25FRC_SEL {
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Ei       = 0x00000000,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Fi       = 0x00000001,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Gi       = 0x00000002,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_RESERVED = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_25FRC_SEL;

/*
 * FMT_BIT_DEPTH_CONTROL_50FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_50FRC_SEL {
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_A        = 0x00000000,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_B        = 0x00000001,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_C        = 0x00000002,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_D        = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_50FRC_SEL;

/*
 * FMT_BIT_DEPTH_CONTROL_75FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_75FRC_SEL {
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_E        = 0x00000000,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_F        = 0x00000001,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_G        = 0x00000002,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_RESERVED = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_75FRC_SEL;

/*
 * FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH {
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_18BPP = 0x00000000,
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_24BPP = 0x00000001,
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_30BPP = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH {
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_18BPP = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_24BPP = 0x00000001,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_30BPP = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL {
FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL_GREY_LEVEL2 = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL_GREY_LEVEL4 = 0x00000001,
} FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL;

/*
 * FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH {
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_18BPP = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_24BPP = 0x00000001,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_30BPP = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE {
FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE_TRUNCATION = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE_ROUNDING = 0x00000001,
} FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE;

/*
 * FMT_CLAMP_CNTL_COLOR_FORMAT enum
 */

typedef enum FMT_CLAMP_CNTL_COLOR_FORMAT {
FMT_CLAMP_CNTL_COLOR_FORMAT_6BPC         = 0x00000000,
FMT_CLAMP_CNTL_COLOR_FORMAT_8BPC         = 0x00000001,
FMT_CLAMP_CNTL_COLOR_FORMAT_10BPC        = 0x00000002,
FMT_CLAMP_CNTL_COLOR_FORMAT_12BPC        = 0x00000003,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED1    = 0x00000004,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED2    = 0x00000005,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED3    = 0x00000006,
FMT_CLAMP_CNTL_COLOR_FORMAT_PROGRAMMABLE = 0x00000007,
} FMT_CLAMP_CNTL_COLOR_FORMAT;

/*
 * FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS enum
 */

typedef enum FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS {
FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS_DISABLE = 0x00000000,
FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS_ENABLE = 0x00000001,
} FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS;

/*
 * FMT_CONTROL_PIXEL_ENCODING enum
 */

typedef enum FMT_CONTROL_PIXEL_ENCODING {
FMT_CONTROL_PIXEL_ENCODING_RGB444_OR_YCBCR444 = 0x00000000,
FMT_CONTROL_PIXEL_ENCODING_YCBCR422      = 0x00000001,
FMT_CONTROL_PIXEL_ENCODING_YCBCR420      = 0x00000002,
FMT_CONTROL_PIXEL_ENCODING_RESERVED      = 0x00000003,
} FMT_CONTROL_PIXEL_ENCODING;

/*
 * FMT_CONTROL_SUBSAMPLING_MODE enum
 */

typedef enum FMT_CONTROL_SUBSAMPLING_MODE {
FMT_CONTROL_SUBSAMPLING_MODE_DROP        = 0x00000000,
FMT_CONTROL_SUBSAMPLING_MODE_AVERAGE     = 0x00000001,
FMT_CONTROL_SUBSAMPLING_MOME_3_TAP       = 0x00000002,
FMT_CONTROL_SUBSAMPLING_MOME_RESERVED    = 0x00000003,
} FMT_CONTROL_SUBSAMPLING_MODE;

/*
 * FMT_CONTROL_SUBSAMPLING_ORDER enum
 */

typedef enum FMT_CONTROL_SUBSAMPLING_ORDER {
FMT_CONTROL_SUBSAMPLING_ORDER_CB_BEFORE_CR = 0x00000000,
FMT_CONTROL_SUBSAMPLING_ORDER_CR_BEFORE_CB = 0x00000001,
} FMT_CONTROL_SUBSAMPLING_ORDER;

/*
 * FMT_DEBUG_CNTL_COLOR_SELECT enum
 */

typedef enum FMT_DEBUG_CNTL_COLOR_SELECT {
FMT_DEBUG_CNTL_COLOR_SELECT_BLUE         = 0x00000000,
FMT_DEBUG_CNTL_COLOR_SELECT_GREEN        = 0x00000001,
FMT_DEBUG_CNTL_COLOR_SELECT_RED1         = 0x00000002,
FMT_DEBUG_CNTL_COLOR_SELECT_RED2         = 0x00000003,
} FMT_DEBUG_CNTL_COLOR_SELECT;

/*
 * FMT_DYNAMIC_EXP_MODE enum
 */

typedef enum FMT_DYNAMIC_EXP_MODE {
FMT_DYNAMIC_EXP_MODE_10to12              = 0x00000000,
FMT_DYNAMIC_EXP_MODE_8to12               = 0x00000001,
} FMT_DYNAMIC_EXP_MODE;

/*
 * FMT_FRAME_RANDOM_ENABLE_CONTROL enum
 */

typedef enum FMT_FRAME_RANDOM_ENABLE_CONTROL {
FMT_FRAME_RANDOM_ENABLE_RESET_EACH_FRAME = 0x00000000,
FMT_FRAME_RANDOM_ENABLE_RESET_ONCE       = 0x00000001,
} FMT_FRAME_RANDOM_ENABLE_CONTROL;

/*
 * FMT_POWER_STATE_ENUM enum
 */

typedef enum FMT_POWER_STATE_ENUM {
FMT_POWER_STATE_ENUM_ON                  = 0x00000000,
FMT_POWER_STATE_ENUM_LS                  = 0x00000001,
FMT_POWER_STATE_ENUM_DS                  = 0x00000002,
FMT_POWER_STATE_ENUM_SD                  = 0x00000003,
} FMT_POWER_STATE_ENUM;

/*
 * FMT_RGB_RANDOM_ENABLE_CONTROL enum
 */

typedef enum FMT_RGB_RANDOM_ENABLE_CONTROL {
FMT_RGB_RANDOM_ENABLE_CONTROL_DISABLE    = 0x00000000,
FMT_RGB_RANDOM_ENABLE_CONTROL_ENABLE     = 0x00000001,
} FMT_RGB_RANDOM_ENABLE_CONTROL;

/*
 * FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_CONTROL enum
 */

typedef enum FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_CONTROL {
FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_NO_SWAP = 0x00000000,
FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_1 = 0x00000001,
FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_2 = 0x00000002,
FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_RESERVED = 0x00000003,
} FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_CONTROL;

/*
 * FMT_SPATIAL_DITHER_MODE enum
 */

typedef enum FMT_SPATIAL_DITHER_MODE {
FMT_SPATIAL_DITHER_MODE_0                = 0x00000000,
FMT_SPATIAL_DITHER_MODE_1                = 0x00000001,
FMT_SPATIAL_DITHER_MODE_2                = 0x00000002,
FMT_SPATIAL_DITHER_MODE_3                = 0x00000003,
} FMT_SPATIAL_DITHER_MODE;

/*
 * FMT_STEREOSYNC_OVERRIDE_CONTROL enum
 */

typedef enum FMT_STEREOSYNC_OVERRIDE_CONTROL {
FMT_STEREOSYNC_OVERRIDE_CONTROL_0        = 0x00000000,
FMT_STEREOSYNC_OVERRIDE_CONTROL_1        = 0x00000001,
} FMT_STEREOSYNC_OVERRIDE_CONTROL;

/*
 * FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0 enum
 */

typedef enum FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0 {
FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0_BGR = 0x00000000,
FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0_RGB = 0x00000001,
} FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0;

/*******************************************************
 * OPPBUF Enums
 *******************************************************/

/*
 * OPPBUF_DISPLAY_SEGMENTATION enum
 */

typedef enum OPPBUF_DISPLAY_SEGMENTATION {
OPPBUF_DISPLAY_SEGMENTATION_1_SEGMENT    = 0x00000000,
OPPBUF_DISPLAY_SEGMENTATION_2_SEGMENT    = 0x00000001,
OPPBUF_DISPLAY_SEGMENTATION_4_SEGMENT    = 0x00000002,
OPPBUF_DISPLAY_SEGMENTATION_4_SEGMENT_SPLIT_LEFT = 0x00000003,
OPPBUF_DISPLAY_SEGMENTATION_4_SEGMENT_SPLIT_RIGHT = 0x00000004,
} OPPBUF_DISPLAY_SEGMENTATION;

/*******************************************************
 * OPP_PIPE Enums
 *******************************************************/

/*
 * OPP_PIPE_CLOCK_ENABLE_CONTROL enum
 */

typedef enum OPP_PIPE_CLOCK_ENABLE_CONTROL {
OPP_PIPE_CLOCK_DISABLE                   = 0x00000000,
OPP_PIPE_CLOCK_ENABLE                    = 0x00000001,
} OPP_PIPE_CLOCK_ENABLE_CONTROL;

/*
 * OPP_PIPE_DIGTIAL_BYPASS_CONTROL enum
 */

typedef enum OPP_PIPE_DIGTIAL_BYPASS_CONTROL {
OPP_PIPE_DIGTIAL_BYPASS_DISABLE          = 0x00000000,
OPP_PIPE_DIGTIAL_BYPASS_ENABLE           = 0x00000001,
} OPP_PIPE_DIGTIAL_BYPASS_CONTROL;

/*******************************************************
 * OPP_PIPE_CRC Enums
 *******************************************************/

/*
 * OPP_PIPE_CRC_CONT_EN enum
 */

typedef enum OPP_PIPE_CRC_CONT_EN {
OPP_PIPE_CRC_MODE_ONE_SHOT               = 0x00000000,
OPP_PIPE_CRC_MODE_CONTINUOUS             = 0x00000001,
} OPP_PIPE_CRC_CONT_EN;

/*
 * OPP_PIPE_CRC_EN enum
 */

typedef enum OPP_PIPE_CRC_EN {
OPP_PIPE_CRC_DISABLE                     = 0x00000000,
OPP_PIPE_CRC_ENABLE                      = 0x00000001,
} OPP_PIPE_CRC_EN;

/*
 * OPP_PIPE_CRC_INTERLACE_EN enum
 */

typedef enum OPP_PIPE_CRC_INTERLACE_EN {
OPP_PIPE_CRC_INTERLACE_EN_INTERPRET_AS_PROGRESSIVE = 0x00000000,
OPP_PIPE_CRC_INTERLACE_EN_INTERPRET_AS_INTERLACED = 0x00000001,
} OPP_PIPE_CRC_INTERLACE_EN;

/*
 * OPP_PIPE_CRC_INTERLACE_MODE enum
 */

typedef enum OPP_PIPE_CRC_INTERLACE_MODE {
OPP_PIPE_CRC_INTERLACE_MODE_TOP          = 0x00000000,
OPP_PIPE_CRC_INTERLACE_MODE_BOTTOM       = 0x00000001,
OPP_PIPE_CRC_INTERLACE_MODE_BOTH_RESET_AFTER_BOTTOM_FIELD = 0x00000002,
OPP_PIPE_CRC_INTERLACE_MODE_BOTH_RESET_AFTER_EACH_FIELD = 0x00000003,
} OPP_PIPE_CRC_INTERLACE_MODE;

/*
 * OPP_PIPE_CRC_ONE_SHOT_PENDING enum
 */

typedef enum OPP_PIPE_CRC_ONE_SHOT_PENDING {
OPP_PIPE_CRC_ONE_SHOT_PENDING_NOT_PENDING = 0x00000000,
OPP_PIPE_CRC_ONE_SHOT_PENDING_PENDING    = 0x00000001,
} OPP_PIPE_CRC_ONE_SHOT_PENDING;

/*
 * OPP_PIPE_CRC_PIXEL_SELECT enum
 */

typedef enum OPP_PIPE_CRC_PIXEL_SELECT {
OPP_PIPE_CRC_PIXEL_SELECT_ALL_PIXELS     = 0x00000000,
OPP_PIPE_CRC_PIXEL_SELECT_RESERVED       = 0x00000001,
OPP_PIPE_CRC_PIXEL_SELECT_EVEN_PIXELS    = 0x00000002,
OPP_PIPE_CRC_PIXEL_SELECT_ODD_PIXELS     = 0x00000003,
} OPP_PIPE_CRC_PIXEL_SELECT;

/*
 * OPP_PIPE_CRC_SOURCE_SELECT enum
 */

typedef enum OPP_PIPE_CRC_SOURCE_SELECT {
OPP_PIPE_CRC_SOURCE_SELECT_FMT           = 0x00000000,
OPP_PIPE_CRC_SOURCE_SELECT_SFT           = 0x00000001,
} OPP_PIPE_CRC_SOURCE_SELECT;

/*
 * OPP_PIPE_CRC_STEREO_EN enum
 */

typedef enum OPP_PIPE_CRC_STEREO_EN {
OPP_PIPE_CRC_STEREO_EN_INTERPRET_AS_NON_STEREO = 0x00000000,
OPP_PIPE_CRC_STEREO_EN_INTERPRET_AS_STEREO = 0x00000001,
} OPP_PIPE_CRC_STEREO_EN;

/*
 * OPP_PIPE_CRC_STEREO_MODE enum
 */

typedef enum OPP_PIPE_CRC_STEREO_MODE {
OPP_PIPE_CRC_STEREO_MODE_LEFT            = 0x00000000,
OPP_PIPE_CRC_STEREO_MODE_RIGHT           = 0x00000001,
OPP_PIPE_CRC_STEREO_MODE_BOTH_RESET_AFTER_RIGHT_EYE = 0x00000002,
OPP_PIPE_CRC_STEREO_MODE_BOTH_RESET_AFTER_EACH_EYE = 0x00000003,
} OPP_PIPE_CRC_STEREO_MODE;

/*******************************************************
 * OPP_TOP Enums
 *******************************************************/

/*
 * OPP_ABM_DEBUG_BUS_SELECT_CONTROL enum
 */

typedef enum OPP_ABM_DEBUG_BUS_SELECT_CONTROL {
DEBUG_BUS_SELECT_ABM0                    = 0x00000000,
DEBUG_BUS_SELECT_ABM1                    = 0x00000001,
DEBUG_BUS_SELECT_ABM2                    = 0x00000002,
DEBUG_BUS_SELECT_ABM3                    = 0x00000003,
DEBUG_BUS_SELECT_ABM_RESERVED0           = 0x00000004,
DEBUG_BUS_SELECT_ABM_RESERVED1           = 0x00000005,
} OPP_ABM_DEBUG_BUS_SELECT_CONTROL;

/*
 * OPP_DPG_DEBUG_BUS_SELECT_CONTROL enum
 */

typedef enum OPP_DPG_DEBUG_BUS_SELECT_CONTROL {
DEBUG_BUS_SELECT_DPG0                    = 0x00000000,
DEBUG_BUS_SELECT_DPG1                    = 0x00000001,
DEBUG_BUS_SELECT_DPG2                    = 0x00000002,
DEBUG_BUS_SELECT_DPG3                    = 0x00000003,
DEBUG_BUS_SELECT_DPG_RESERVED0           = 0x00000004,
DEBUG_BUS_SELECT_DPG_RESERVED1           = 0x00000005,
} OPP_DPG_DEBUG_BUS_SELECT_CONTROL;

/*
 * OPP_FMT_DEBUG_BUS_SELECT_CONTROL enum
 */

typedef enum OPP_FMT_DEBUG_BUS_SELECT_CONTROL {
DEBUG_BUS_SELECT_FMT0                    = 0x00000000,
DEBUG_BUS_SELECT_FMT1                    = 0x00000001,
DEBUG_BUS_SELECT_FMT2                    = 0x00000002,
DEBUG_BUS_SELECT_FMT3                    = 0x00000003,
DEBUG_BUS_SELECT_FMT_RESERVED0           = 0x00000004,
DEBUG_BUS_SELECT_FMT_RESERVED1           = 0x00000005,
} OPP_FMT_DEBUG_BUS_SELECT_CONTROL;

/*
 * OPP_OPPBUF_DEBUG_BUS_SELECT_CONTROL enum
 */

typedef enum OPP_OPPBUF_DEBUG_BUS_SELECT_CONTROL {
DEBUG_BUS_SELECT_OPPBUF0                 = 0x00000000,
DEBUG_BUS_SELECT_OPPBUF1                 = 0x00000001,
DEBUG_BUS_SELECT_OPPBUF2                 = 0x00000002,
DEBUG_BUS_SELECT_OPPBUF3                 = 0x00000003,
DEBUG_BUS_SELECT_OPPBUF_RESERVED0        = 0x00000004,
DEBUG_BUS_SELECT_OPPBUF_RESERVED1        = 0x00000005,
} OPP_OPPBUF_DEBUG_BUS_SELECT_CONTROL;

/*
 * OPP_OPP_PIPE_DEBUG_BUS_SELECT_CONTROL enum
 */

typedef enum OPP_OPP_PIPE_DEBUG_BUS_SELECT_CONTROL {
DEBUG_BUS_SELECT_OPP_PIPE0               = 0x00000000,
DEBUG_BUS_SELECT_OPP_PIPE1               = 0x00000001,
DEBUG_BUS_SELECT_OPP_PIPE2               = 0x00000002,
DEBUG_BUS_SELECT_OPP_PIPE3               = 0x00000003,
DEBUG_BUS_SELECT_OPP_PIPE_RESERVED0      = 0x00000004,
DEBUG_BUS_SELECT_OPP_PIPE_RESERVED1      = 0x00000005,
} OPP_OPP_PIPE_DEBUG_BUS_SELECT_CONTROL;

/*
 * OPP_TEST_CLK_SEL_CONTROL enum
 */

typedef enum OPP_TEST_CLK_SEL_CONTROL {
OPP_TEST_CLK_SEL_DISPCLK_P               = 0x00000000,
OPP_TEST_CLK_SEL_DISPCLK_R               = 0x00000001,
OPP_TEST_CLK_SEL_DISPCLK_ABM0            = 0x00000002,
OPP_TEST_CLK_SEL_DISPCLK_ABM1            = 0x00000003,
OPP_TEST_CLK_SEL_DISPCLK_ABM2            = 0x00000004,
OPP_TEST_CLK_SEL_DISPCLK_ABM3            = 0x00000005,
OPP_TEST_CLK_SEL_RESERVED0               = 0x00000006,
OPP_TEST_CLK_SEL_RESERVED1               = 0x00000007,
OPP_TEST_CLK_SEL_DISPCLK_OPP0            = 0x00000008,
OPP_TEST_CLK_SEL_DISPCLK_OPP1            = 0x00000009,
OPP_TEST_CLK_SEL_DISPCLK_OPP2            = 0x0000000a,
OPP_TEST_CLK_SEL_DISPCLK_OPP3            = 0x0000000b,
OPP_TEST_CLK_SEL_RESERVED2               = 0x0000000c,
OPP_TEST_CLK_SEL_RESERVED3               = 0x0000000d,
} OPP_TEST_CLK_SEL_CONTROL;

/*
 * OPP_TOP_CLOCK_ENABLE_STATUS enum
 */

typedef enum OPP_TOP_CLOCK_ENABLE_STATUS {
OPP_TOP_CLOCK_DISABLED_STATUS            = 0x00000000,
OPP_TOP_CLOCK_ENABLED_STATUS             = 0x00000001,
} OPP_TOP_CLOCK_ENABLE_STATUS;

/*
 * OPP_TOP_CLOCK_GATING_CONTROL enum
 */

typedef enum OPP_TOP_CLOCK_GATING_CONTROL {
OPP_TOP_CLOCK_GATING_ENABLED             = 0x00000000,
OPP_TOP_CLOCK_GATING_DISABLED            = 0x00000001,
} OPP_TOP_CLOCK_GATING_CONTROL;

/*******************************************************
 * DSCRM Enums
 *******************************************************/

/*
 * ENUM_DSCRM_EN enum
 */

typedef enum ENUM_DSCRM_EN {
ENUM_DSCRM_DISABLE                       = 0x00000000,
ENUM_DSCRM_ENABLE                        = 0x00000001,
} ENUM_DSCRM_EN;

/*******************************************************
 * OTG Enums
 *******************************************************/

/*
 * MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK enum
 */

typedef enum MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK {
MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK_FALSE = 0x00000000,
MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK_TRUE = 0x00000001,
} MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK;

/*
 * MASTER_UPDATE_LOCK_SEL enum
 */

typedef enum MASTER_UPDATE_LOCK_SEL {
MASTER_UPDATE_LOCK_SEL_0                 = 0x00000000,
MASTER_UPDATE_LOCK_SEL_1                 = 0x00000001,
MASTER_UPDATE_LOCK_SEL_2                 = 0x00000002,
MASTER_UPDATE_LOCK_SEL_3                 = 0x00000003,
MASTER_UPDATE_LOCK_SEL_RESERVED4         = 0x00000004,
MASTER_UPDATE_LOCK_SEL_RESERVED5         = 0x00000005,
} MASTER_UPDATE_LOCK_SEL;

/*
 * MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE enum
 */

typedef enum MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE {
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_BOTH = 0x00000000,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_TOP = 0x00000001,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_BOTTOM = 0x00000002,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_RESERVED = 0x00000003,
} MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE;

/*
 * OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN enum
 */

typedef enum OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN {
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_FALSE = 0x00000000,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_TRUE = 0x00000001,
} OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN;

/*
 * OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB enum
 */

typedef enum OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB {
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB_FALSE = 0x00000000,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB_TRUE = 0x00000001,
} OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB;

/*
 * OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR enum
 */

typedef enum OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR {
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR_FALSE = 0x00000000,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR_TRUE = 0x00000001,
} OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR;

/*
 * OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE enum
 */

typedef enum OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE {
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_BOTH = 0x00000000,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_INTERLACE = 0x00000001,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_PROGRASSIVE = 0x00000002,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE_RESERVED = 0x00000003,
} OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE;

/*
 * OTG_CONTROL_OTG_DISABLE_POINT_CNTL enum
 */

typedef enum OTG_CONTROL_OTG_DISABLE_POINT_CNTL {
OTG_CONTROL_OTG_DISABLE_POINT_CNTL_DISABLE = 0x00000000,
OTG_CONTROL_OTG_DISABLE_POINT_CNTL_DISABLE_CURRENT = 0x00000001,
OTG_CONTROL_OTG_DISABLE_POINT_CNTL_DISABLE_VUPDATE = 0x00000002,
OTG_CONTROL_OTG_DISABLE_POINT_CNTL_DISABLE_FIRST = 0x00000003,
} OTG_CONTROL_OTG_DISABLE_POINT_CNTL;

/*
 * OTG_CONTROL_OTG_FIELD_NUMBER_CNTL enum
 */

typedef enum OTG_CONTROL_OTG_FIELD_NUMBER_CNTL {
OTG_CONTROL_OTG_FIELD_NUMBER_CNTL_NORMAL = 0x00000000,
OTG_CONTROL_OTG_FIELD_NUMBER_CNTL_DP     = 0x00000001,
} OTG_CONTROL_OTG_FIELD_NUMBER_CNTL;

/*
 * OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY enum
 */

typedef enum OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY {
OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY_FALSE = 0x00000000,
OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY_TRUE = 0x00000001,
} OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY;

/*
 * OTG_CONTROL_OTG_MASTER_EN enum
 */

typedef enum OTG_CONTROL_OTG_MASTER_EN {
OTG_CONTROL_OTG_MASTER_EN_FALSE          = 0x00000000,
OTG_CONTROL_OTG_MASTER_EN_TRUE           = 0x00000001,
} OTG_CONTROL_OTG_MASTER_EN;

/*
 * OTG_CONTROL_OTG_OUT_MUX enum
 */

typedef enum OTG_CONTROL_OTG_OUT_MUX {
OTG_CONTROL_OTG_OUT_MUX_0                = 0x00000000,
OTG_CONTROL_OTG_OUT_MUX_1                = 0x00000001,
OTG_CONTROL_OTG_OUT_MUX_2                = 0x00000002,
} OTG_CONTROL_OTG_OUT_MUX;

/*
 * OTG_CONTROL_OTG_START_POINT_CNTL enum
 */

typedef enum OTG_CONTROL_OTG_START_POINT_CNTL {
OTG_CONTROL_OTG_START_POINT_CNTL_NORMAL  = 0x00000000,
OTG_CONTROL_OTG_START_POINT_CNTL_DP      = 0x00000001,
} OTG_CONTROL_OTG_START_POINT_CNTL;

/*
 * OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN enum
 */

typedef enum OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN {
OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN_FALSE = 0x00000000,
OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN_TRUE = 0x00000001,
} OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN;

/*
 * OTG_CRC_CNTL_OTG_CRC1_EN enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC1_EN {
OTG_CRC_CNTL_OTG_CRC1_EN_FALSE           = 0x00000000,
OTG_CRC_CNTL_OTG_CRC1_EN_TRUE            = 0x00000001,
} OTG_CRC_CNTL_OTG_CRC1_EN;

/*
 * OTG_CRC_CNTL_OTG_CRC_CONT_EN enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_CONT_EN {
OTG_CRC_CNTL_OTG_CRC_CONT_EN_FALSE       = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_CONT_EN_TRUE        = 0x00000001,
} OTG_CRC_CNTL_OTG_CRC_CONT_EN;

/*
 * OTG_CRC_CNTL_OTG_CRC_CONT_MODE enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_CONT_MODE {
OTG_CRC_CNTL_OTG_CRC_CONT_MODE_RESET     = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_CONT_MODE_NORESET   = 0x00000001,
} OTG_CRC_CNTL_OTG_CRC_CONT_MODE;

/*
 * OTG_CRC_CNTL_OTG_CRC_EN enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_EN {
OTG_CRC_CNTL_OTG_CRC_EN_FALSE            = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_EN_TRUE             = 0x00000001,
} OTG_CRC_CNTL_OTG_CRC_EN;

/*
 * OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE {
OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE_TOP  = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE_BOTTOM = 0x00000001,
OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE_BOTH_BOTTOM = 0x00000002,
OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE_BOTH_FIELD = 0x00000003,
} OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE;

/*
 * OTG_CRC_CNTL_OTG_CRC_STEREO_MODE enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_STEREO_MODE {
OTG_CRC_CNTL_OTG_CRC_STEREO_MODE_LEFT    = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_STEREO_MODE_RIGHT   = 0x00000001,
OTG_CRC_CNTL_OTG_CRC_STEREO_MODE_BOTH_EYES = 0x00000002,
OTG_CRC_CNTL_OTG_CRC_STEREO_MODE_BOTH_FIELDS = 0x00000003,
} OTG_CRC_CNTL_OTG_CRC_STEREO_MODE;

/*
 * OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS {
OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS_FALSE = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS_TRUE = 0x00000001,
} OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS;

/*
 * OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT enum
 */

typedef enum OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT {
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_UAB     = 0x00000000,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_UA_B    = 0x00000001,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_U_AB    = 0x00000002,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_U_A_B   = 0x00000003,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_IAB     = 0x00000004,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_IA_B    = 0x00000005,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_I_AB    = 0x00000006,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_I_A_B   = 0x00000007,
} OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT;

/*
 * OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT enum
 */

typedef enum OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT {
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_UAB     = 0x00000000,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_UA_B    = 0x00000001,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_U_AB    = 0x00000002,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_U_A_B   = 0x00000003,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_IAB     = 0x00000004,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_IA_B    = 0x00000005,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_I_AB    = 0x00000006,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_I_A_B   = 0x00000007,
} OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT;

/*
 * OTG_DIG_UPDATE_VCOUNT_MODE enum
 */

typedef enum OTG_DIG_UPDATE_VCOUNT_MODE {
OTG_DIG_UPDATE_VCOUNT_0                  = 0x00000000,
OTG_DIG_UPDATE_VCOUNT_1                  = 0x00000001,
} OTG_DIG_UPDATE_VCOUNT_MODE;

/*
 * OTG_DOUBLE_BUFFER_CONTROL_OTG_DRR_TIMING_DBUF_UPDATE_MODE enum
 */

typedef enum OTG_DOUBLE_BUFFER_CONTROL_OTG_DRR_TIMING_DBUF_UPDATE_MODE {
OTG_DOUBLE_BUFFER_CONTROL_OTG_DRR_TIMING_DBUF_UPDATE_MODE_0 = 0x00000000,
OTG_DOUBLE_BUFFER_CONTROL_OTG_DRR_TIMING_DBUF_UPDATE_MODE_1 = 0x00000001,
OTG_DOUBLE_BUFFER_CONTROL_OTG_DRR_TIMING_DBUF_UPDATE_MODE_2 = 0x00000002,
OTG_DOUBLE_BUFFER_CONTROL_OTG_DRR_TIMING_DBUF_UPDATE_MODE_3 = 0x00000003,
} OTG_DOUBLE_BUFFER_CONTROL_OTG_DRR_TIMING_DBUF_UPDATE_MODE;

/*
 * OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY enum
 */

typedef enum OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY {
OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY_FALSE = 0x00000000,
OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY_TRUE = 0x00000001,
} OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY;

/*
 * OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME enum
 */

typedef enum OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME {
OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME_1FRAME = 0x00000000,
OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME_2FRAME = 0x00000001,
OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME_4FRAME = 0x00000002,
OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME_8FRAME = 0x00000003,
} OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME;

/*
 * OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN enum
 */

typedef enum OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN {
OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN_FALSE = 0x00000000,
OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN_TRUE = 0x00000001,
} OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN;

/*
 * OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY enum
 */

typedef enum OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY {
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY_FALSE = 0x00000000,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY_TRUE = 0x00000001,
} OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY;

/*
 * OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY enum
 */

typedef enum OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY {
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY_FALSE = 0x00000000,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY_TRUE = 0x00000001,
} OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY;

/*
 * OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT enum
 */

typedef enum OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT {
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_LOGIC0 = 0x00000000,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_LOGIC1 = 0x00000001,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICA = 0x00000002,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICB = 0x00000003,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICC = 0x00000004,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICD = 0x00000005,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICE = 0x00000006,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICF = 0x00000007,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_HPD1 = 0x00000008,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_HPD2 = 0x00000009,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DDC1DATA = 0x0000000a,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DDC1CLK = 0x0000000b,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DDC2DATA = 0x0000000c,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DDC2CLK = 0x0000000d,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_MANUAL_FLOW_CONTROL = 0x0000000e,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_RESERVED = 0x0000000f,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENLK_CLK = 0x00000010,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENLK_VSYNC = 0x00000011,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_SWAPLOCKA = 0x00000012,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_SWAPLOCKB = 0x00000013,
} OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT;

/*
 * OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK enum
 */

typedef enum OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK {
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK_FALSE = 0x00000000,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK_TRUE = 0x00000001,
} OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK;

/*
 * OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR enum
 */

typedef enum OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR {
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR_FALSE = 0x00000000,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR_TRUE = 0x00000001,
} OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR;

/*
 * OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE enum
 */

typedef enum OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE {
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE_DISABLE = 0x00000000,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE_HCOUNT = 0x00000001,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE_HCOUNT_VCOUNT = 0x00000002,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE_RESERVED = 0x00000003,
} OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE;

/*
 * OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL enum
 */

typedef enum OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL {
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL_FALSE = 0x00000000,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL_TRUE = 0x00000001,
} OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL;

/*
 * OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL enum
 */

typedef enum OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL {
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG0 = 0x00000000,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG1 = 0x00000001,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG2 = 0x00000002,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG3 = 0x00000003,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_RESERVED4 = 0x00000004,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_RESERVED5 = 0x00000005,
} OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL;

/*
 * OTG_GLOBAL_CONTROL3_DIG_UPDATE_EYE_SEL enum
 */

typedef enum OTG_GLOBAL_CONTROL3_DIG_UPDATE_EYE_SEL {
DIG_UPDATE_EYE_SEL_BOTH                  = 0x00000000,
DIG_UPDATE_EYE_SEL_LEFT                  = 0x00000001,
DIG_UPDATE_EYE_SEL_RIGHT                 = 0x00000002,
} OTG_GLOBAL_CONTROL3_DIG_UPDATE_EYE_SEL;

/*
 * OTG_GLOBAL_CONTROL3_DIG_UPDATE_FIELD_SEL enum
 */

typedef enum OTG_GLOBAL_CONTROL3_DIG_UPDATE_FIELD_SEL {
DIG_UPDATE_FIELD_SEL_BOTH                = 0x00000000,
DIG_UPDATE_FIELD_SEL_TOP                 = 0x00000001,
DIG_UPDATE_FIELD_SEL_BOTTOM              = 0x00000002,
DIG_UPDATE_FIELD_SEL_RESERVED            = 0x00000003,
} OTG_GLOBAL_CONTROL3_DIG_UPDATE_FIELD_SEL;

/*
 * OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_FIELD enum
 */

typedef enum OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_FIELD {
MASTER_UPDATE_LOCK_DB_FIELD_BOTH         = 0x00000000,
MASTER_UPDATE_LOCK_DB_FIELD_TOP          = 0x00000001,
MASTER_UPDATE_LOCK_DB_FIELD_BOTTOM       = 0x00000002,
MASTER_UPDATE_LOCK_DB_FIELD_RESERVED     = 0x00000003,
} OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_FIELD;

/*
 * OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_STEREO_SEL enum
 */

typedef enum OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_STEREO_SEL {
MASTER_UPDATE_LOCK_DB_STEREO_SEL_BOTH    = 0x00000000,
MASTER_UPDATE_LOCK_DB_STEREO_SEL_LEFT    = 0x00000001,
MASTER_UPDATE_LOCK_DB_STEREO_SEL_RIGHT   = 0x00000002,
MASTER_UPDATE_LOCK_DB_STEREO_SEL_RESERVED = 0x00000003,
} OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_STEREO_SEL;

/*
 * OTG_GLOBAL_UPDATE_LOCK_EN enum
 */

typedef enum OTG_GLOBAL_UPDATE_LOCK_EN {
OTG_GLOBAL_UPDATE_LOCK_DISABLE           = 0x00000000,
OTG_GLOBAL_UPDATE_LOCK_ENABLE            = 0x00000001,
} OTG_GLOBAL_UPDATE_LOCK_EN;

/*
 * OTG_GSL_MASTER_MODE enum
 */

typedef enum OTG_GSL_MASTER_MODE {
OTG_GSL_MASTER_MODE_0                    = 0x00000000,
OTG_GSL_MASTER_MODE_1                    = 0x00000001,
OTG_GSL_MASTER_MODE_2                    = 0x00000002,
OTG_GSL_MASTER_MODE_3                    = 0x00000003,
} OTG_GSL_MASTER_MODE;

/*
 * OTG_HORZ_REPETITION_COUNT enum
 */

typedef enum OTG_HORZ_REPETITION_COUNT {
OTG_HORZ_REPETITION_COUNT_0              = 0x00000000,
OTG_HORZ_REPETITION_COUNT_1              = 0x00000001,
OTG_HORZ_REPETITION_COUNT_2              = 0x00000002,
OTG_HORZ_REPETITION_COUNT_3              = 0x00000003,
OTG_HORZ_REPETITION_COUNT_4              = 0x00000004,
OTG_HORZ_REPETITION_COUNT_5              = 0x00000005,
OTG_HORZ_REPETITION_COUNT_6              = 0x00000006,
OTG_HORZ_REPETITION_COUNT_7              = 0x00000007,
OTG_HORZ_REPETITION_COUNT_8              = 0x00000008,
OTG_HORZ_REPETITION_COUNT_9              = 0x00000009,
OTG_HORZ_REPETITION_COUNT_10             = 0x0000000a,
OTG_HORZ_REPETITION_COUNT_11             = 0x0000000b,
OTG_HORZ_REPETITION_COUNT_12             = 0x0000000c,
OTG_HORZ_REPETITION_COUNT_13             = 0x0000000d,
OTG_HORZ_REPETITION_COUNT_14             = 0x0000000e,
OTG_HORZ_REPETITION_COUNT_15             = 0x0000000f,
} OTG_HORZ_REPETITION_COUNT;

/*
 * OTG_H_SYNC_A_POL enum
 */

typedef enum OTG_H_SYNC_A_POL {
OTG_H_SYNC_A_POL_HIGH                    = 0x00000000,
OTG_H_SYNC_A_POL_LOW                     = 0x00000001,
} OTG_H_SYNC_A_POL;

/*
 * OTG_H_TIMING_DIV_MODE enum
 */

typedef enum OTG_H_TIMING_DIV_MODE {
OTG_H_TIMING_DIV_MODE_NO_DIV             = 0x00000000,
OTG_H_TIMING_DIV_MODE_DIV_BY2            = 0x00000001,
OTG_H_TIMING_DIV_MODE_RESERVED           = 0x00000002,
OTG_H_TIMING_DIV_MODE_DIV_BY4            = 0x00000003,
} OTG_H_TIMING_DIV_MODE;

/*
 * OTG_H_TIMING_DIV_MODE_MANUAL enum
 */

typedef enum OTG_H_TIMING_DIV_MODE_MANUAL {
OTG_H_TIMING_DIV_MODE_AUTO               = 0x00000000,
OTG_H_TIMING_DIV_MODE_NOAUTO             = 0x00000001,
} OTG_H_TIMING_DIV_MODE_MANUAL;

/*
 * OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE enum
 */

typedef enum OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE {
OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE_FALSE = 0x00000000,
OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE_TRUE = 0x00000001,
} OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE;

/*
 * OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD enum
 */

typedef enum OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD {
OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD_NOT = 0x00000000,
OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD_BOTTOM = 0x00000001,
OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD_TOP = 0x00000002,
OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD_NOT2 = 0x00000003,
} OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD;

/*
 * OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE_FALSE = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE_TRUE = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE;

/*
 * OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE enum
 */

typedef enum OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE {
OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_FALSE = 0x00000000,
OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_TRUE = 0x00000001,
} OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE;

/*
 * OTG_MASTER_UPDATE_LOCK_DB_EN enum
 */

typedef enum OTG_MASTER_UPDATE_LOCK_DB_EN {
OTG_MASTER_UPDATE_LOCK_DISABLE           = 0x00000000,
OTG_MASTER_UPDATE_LOCK_ENABLE            = 0x00000001,
} OTG_MASTER_UPDATE_LOCK_DB_EN;

/*
 * OTG_MASTER_UPDATE_LOCK_GSL_EN enum
 */

typedef enum OTG_MASTER_UPDATE_LOCK_GSL_EN {
OTG_MASTER_UPDATE_LOCK_GSL_EN_FALSE      = 0x00000000,
OTG_MASTER_UPDATE_LOCK_GSL_EN_TRUE       = 0x00000001,
} OTG_MASTER_UPDATE_LOCK_GSL_EN;

/*
 * OTG_MASTER_UPDATE_LOCK_VCOUNT_MODE enum
 */

typedef enum OTG_MASTER_UPDATE_LOCK_VCOUNT_MODE {
OTG_MASTER_UPDATE_LOCK_VCOUNT_0          = 0x00000000,
OTG_MASTER_UPDATE_LOCK_VCOUNT_1          = 0x00000001,
} OTG_MASTER_UPDATE_LOCK_VCOUNT_MODE;

/*
 * OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL enum
 */

typedef enum OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL {
OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL_DISABLE = 0x00000000,
OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL_TRIGGERA = 0x00000001,
OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL_TRIGGERB = 0x00000002,
OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL_RESERVED = 0x00000003,
} OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL;

/*
 * OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR enum
 */

typedef enum OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR {
OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR_FALSE = 0x00000000,
OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR_TRUE = 0x00000001,
} OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR {
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR_FALSE = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR_TRUE = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE {
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE_FALSE = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE_TRUE = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE {
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE_FALSE = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE_TRUE = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE {
OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_FALSE = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_TRUE = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE {
OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE_OFF = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE_ON = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE;

/*
 * OTG_STEREO_CONTROL_OTG_FIELD_NUM_SEL enum
 */

typedef enum OTG_STEREO_CONTROL_OTG_FIELD_NUM_SEL {
OTG_STEREO_CONTROL_OTG_FIELD_NUM_SEL_FALSE = 0x00000000,
OTG_STEREO_CONTROL_OTG_FIELD_NUM_SEL_TRUE = 0x00000001,
} OTG_STEREO_CONTROL_OTG_FIELD_NUM_SEL;

/*
 * OTG_STEREO_CONTROL_OTG_STEREO_EN enum
 */

typedef enum OTG_STEREO_CONTROL_OTG_STEREO_EN {
OTG_STEREO_CONTROL_OTG_STEREO_EN_FALSE   = 0x00000000,
OTG_STEREO_CONTROL_OTG_STEREO_EN_TRUE    = 0x00000001,
} OTG_STEREO_CONTROL_OTG_STEREO_EN;

/*
 * OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY enum
 */

typedef enum OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY {
OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY_FALSE = 0x00000000,
OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY_TRUE = 0x00000001,
} OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY;

/*
 * OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY enum
 */

typedef enum OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY {
OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY_FALSE = 0x00000000,
OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY_TRUE = 0x00000001,
} OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY;

/*
 * OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE enum
 */

typedef enum OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE {
OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE_NO = 0x00000000,
OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE_RIGHT = 0x00000001,
OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE_LEFT = 0x00000002,
OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE_RESERVED = 0x00000003,
} OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR {
OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR_FALSE     = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR_TRUE      = 0x00000001,
} OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT {
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_LOGIC0 = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_INTERLACE = 0x00000001,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_GENERICA = 0x00000002,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_GENERICB = 0x00000003,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_HSYNCA = 0x00000004,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_LOGIC1 = 0x00000005,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_GENERICC = 0x00000006,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_GENERICD = 0x00000007,
} OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN {
OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN_FALSE = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN_TRUE = 0x00000001,
} OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT {
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG0 = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG1 = 0x00000001,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG2 = 0x00000002,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG3 = 0x00000003,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_RESERVED4 = 0x00000004,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_RESERVED5 = 0x00000005,
} OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT {
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_LOGIC0 = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICA_PIN = 0x00000001,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICB_PIN = 0x00000002,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICC_PIN = 0x00000003,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICD_PIN = 0x00000004,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICE_PIN = 0x00000005,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICF_PIN = 0x00000006,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_SWAPLOCKA_PIN = 0x00000007,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_SWAPLOCKB_PIN = 0x00000008,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENLK_CLK_PIN = 0x00000009,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENLK_VSYNC_PIN = 0x0000000a,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_HPD1 = 0x0000000b,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_HPD2 = 0x0000000c,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_BLON_Y_PIN = 0x0000000d,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_RESERVED14 = 0x0000000e,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_UPDATE_LOCK = 0x0000000f,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GSL_ALLOW_FLIP = 0x00000010,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_UPDATE_PENDING = 0x00000011,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_OTG_SOF = 0x00000012,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_HSYNC = 0x00000013,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_VSYNC = 0x00000014,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_OTG_TRIG_MANUAL_CONTROL = 0x00000015,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_MANUAL_FLOW_CONTROL = 0x00000016,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_LOGIC1 = 0x00000017,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_FLIP_PENDING = 0x00000018,
} OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT;

/*
 * OTG_TRIGA_FALLING_EDGE_DETECT_CNTL enum
 */

typedef enum OTG_TRIGA_FALLING_EDGE_DETECT_CNTL {
OTG_TRIGA_FALLING_EDGE_DETECT_CNTL_0     = 0x00000000,
OTG_TRIGA_FALLING_EDGE_DETECT_CNTL_1     = 0x00000001,
OTG_TRIGA_FALLING_EDGE_DETECT_CNTL_2     = 0x00000002,
OTG_TRIGA_FALLING_EDGE_DETECT_CNTL_3     = 0x00000003,
} OTG_TRIGA_FALLING_EDGE_DETECT_CNTL;

/*
 * OTG_TRIGA_FREQUENCY_SELECT enum
 */

typedef enum OTG_TRIGA_FREQUENCY_SELECT {
OTG_TRIGA_FREQUENCY_SELECT_0             = 0x00000000,
OTG_TRIGA_FREQUENCY_SELECT_1             = 0x00000001,
OTG_TRIGA_FREQUENCY_SELECT_2             = 0x00000002,
OTG_TRIGA_FREQUENCY_SELECT_3             = 0x00000003,
} OTG_TRIGA_FREQUENCY_SELECT;

/*
 * OTG_TRIGA_RISING_EDGE_DETECT_CNTL enum
 */

typedef enum OTG_TRIGA_RISING_EDGE_DETECT_CNTL {
OTG_TRIGA_RISING_EDGE_DETECT_CNTL_0      = 0x00000000,
OTG_TRIGA_RISING_EDGE_DETECT_CNTL_1      = 0x00000001,
OTG_TRIGA_RISING_EDGE_DETECT_CNTL_2      = 0x00000002,
OTG_TRIGA_RISING_EDGE_DETECT_CNTL_3      = 0x00000003,
} OTG_TRIGA_RISING_EDGE_DETECT_CNTL;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR {
OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR_FALSE     = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR_TRUE      = 0x00000001,
} OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT {
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_LOGIC0 = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_INTERLACE = 0x00000001,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_GENERICA = 0x00000002,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_GENERICB = 0x00000003,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_HSYNCA = 0x00000004,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_LOGIC1 = 0x00000005,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_GENERICC = 0x00000006,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_GENERICD = 0x00000007,
} OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN {
OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN_FALSE = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN_TRUE = 0x00000001,
} OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT {
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG0 = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG1 = 0x00000001,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG2 = 0x00000002,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG3 = 0x00000003,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_RESERVED4 = 0x00000004,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_RESERVED5 = 0x00000005,
} OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT {
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_LOGIC0 = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICA_PIN = 0x00000001,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICB_PIN = 0x00000002,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICC_PIN = 0x00000003,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICD_PIN = 0x00000004,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICE_PIN = 0x00000005,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICF_PIN = 0x00000006,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_SWAPLOCKA_PIN = 0x00000007,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_SWAPLOCKB_PIN = 0x00000008,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENLK_CLK_PIN = 0x00000009,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENLK_VSYNC_PIN = 0x0000000a,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_HPD1 = 0x0000000b,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_HPD2 = 0x0000000c,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_BLON_Y_PIN = 0x0000000d,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_RESERVED14 = 0x0000000e,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_UPDATE_LOCK = 0x0000000f,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GSL_ALLOW_FLIP = 0x00000010,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_UPDATE_PENDING = 0x00000011,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_OTG_SOF = 0x00000012,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_HSYNC = 0x00000013,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_VSYNC = 0x00000014,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_OTG_TRIG_MANUAL_CONTROL = 0x00000015,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_MANUAL_FLOW_CONTROL = 0x00000016,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_LOGIC1 = 0x00000017,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_FLIP_PENDING = 0x00000018,
} OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT;

/*
 * OTG_TRIGB_FALLING_EDGE_DETECT_CNTL enum
 */

typedef enum OTG_TRIGB_FALLING_EDGE_DETECT_CNTL {
OTG_TRIGB_FALLING_EDGE_DETECT_CNTL_0     = 0x00000000,
OTG_TRIGB_FALLING_EDGE_DETECT_CNTL_1     = 0x00000001,
OTG_TRIGB_FALLING_EDGE_DETECT_CNTL_2     = 0x00000002,
OTG_TRIGB_FALLING_EDGE_DETECT_CNTL_3     = 0x00000003,
} OTG_TRIGB_FALLING_EDGE_DETECT_CNTL;

/*
 * OTG_TRIGB_FREQUENCY_SELECT enum
 */

typedef enum OTG_TRIGB_FREQUENCY_SELECT {
OTG_TRIGB_FREQUENCY_SELECT_0             = 0x00000000,
OTG_TRIGB_FREQUENCY_SELECT_1             = 0x00000001,
OTG_TRIGB_FREQUENCY_SELECT_2             = 0x00000002,
OTG_TRIGB_FREQUENCY_SELECT_3             = 0x00000003,
} OTG_TRIGB_FREQUENCY_SELECT;

/*
 * OTG_TRIGB_RISING_EDGE_DETECT_CNTL enum
 */

typedef enum OTG_TRIGB_RISING_EDGE_DETECT_CNTL {
OTG_TRIGB_RISING_EDGE_DETECT_CNTL_0      = 0x00000000,
OTG_TRIGB_RISING_EDGE_DETECT_CNTL_1      = 0x00000001,
OTG_TRIGB_RISING_EDGE_DETECT_CNTL_2      = 0x00000002,
OTG_TRIGB_RISING_EDGE_DETECT_CNTL_3      = 0x00000003,
} OTG_TRIGB_RISING_EDGE_DETECT_CNTL;

/*
 * OTG_UPDATE_LOCK_OTG_UPDATE_LOCK enum
 */

typedef enum OTG_UPDATE_LOCK_OTG_UPDATE_LOCK {
OTG_UPDATE_LOCK_OTG_UPDATE_LOCK_FALSE    = 0x00000000,
OTG_UPDATE_LOCK_OTG_UPDATE_LOCK_TRUE     = 0x00000001,
} OTG_UPDATE_LOCK_OTG_UPDATE_LOCK;

/*
 * OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR enum
 */

typedef enum OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR {
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR;

/*
 * OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE {
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE;

/*
 * OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE {
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE;

/*
 * OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY enum
 */

typedef enum OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY {
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY;

/*
 * OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR enum
 */

typedef enum OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR {
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR_CLEAR_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR;

/*
 * OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE {
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE;

/*
 * OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE {
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE;

/*
 * OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR enum
 */

typedef enum OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR {
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR_CLEAR_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR;

/*
 * OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE {
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE;

/*
 * OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE {
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE_TRUE = 0x00000001,
} OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE;

/*
 * OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE enum
 */

typedef enum OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE {
OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE_DISABLE = 0x00000000,
OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE_TRIGGERA = 0x00000001,
OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE_TRIGGERB = 0x00000002,
OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE_RESERVED = 0x00000003,
} OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE;

/*
 * OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR enum
 */

typedef enum OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR {
OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR_FALSE = 0x00000000,
OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR_TRUE = 0x00000001,
} OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR;

/*
 * OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR enum
 */

typedef enum OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR {
OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR_FALSE = 0x00000000,
OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR_TRUE = 0x00000001,
} OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR;

/*
 * OTG_VUPDATE_BLOCK_DISABLE enum
 */

typedef enum OTG_VUPDATE_BLOCK_DISABLE {
OTG_VUPDATE_BLOCK_DISABLE_OFF            = 0x00000000,
OTG_VUPDATE_BLOCK_DISABLE_ON             = 0x00000001,
} OTG_VUPDATE_BLOCK_DISABLE;

/*
 * OTG_V_SYNC_A_POL enum
 */

typedef enum OTG_V_SYNC_A_POL {
OTG_V_SYNC_A_POL_HIGH                    = 0x00000000,
OTG_V_SYNC_A_POL_LOW                     = 0x00000001,
} OTG_V_SYNC_A_POL;

/*
 * OTG_V_SYNC_MODE enum
 */

typedef enum OTG_V_SYNC_MODE {
OTG_V_SYNC_MODE_HSYNC                    = 0x00000000,
OTG_V_SYNC_MODE_HBLANK                   = 0x00000001,
} OTG_V_SYNC_MODE;

/*
 * OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD {
OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD_0 = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD_1 = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD;

/*
 * OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT {
OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT_DISABLE = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT_ENABLE = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT;

/*
 * OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC {
OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC_DISABLE = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC_ENABLE = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC;

/*
 * OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL {
OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL_FALSE = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL_TRUE = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL;

/*
 * OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL {
OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL_FALSE = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL_TRUE = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL;

/*
 * OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURRED_ACK enum
 */

typedef enum OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURRED_ACK {
OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURRED_ACK_FALSE = 0x00000000,
OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURRED_ACK_TRUE = 0x00000001,
} OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURRED_ACK;

/*******************************************************
 * OPTC_MISC Enums
 *******************************************************/

/*
 * OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL enum
 */

typedef enum OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL {
OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL_OTG0 = 0x00000000,
OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL_OTG1 = 0x00000001,
OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL_OTG2 = 0x00000002,
OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL_OTG3 = 0x00000003,
OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL_RESERVED4 = 0x00000004,
OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL_RESERVED5 = 0x00000005,
} OPTC_GSL_SOURCE_SELECT_GSL_TIMING_SYNC_SEL;

/*******************************************************
 * DMCUB Enums
 *******************************************************/

/*
 * DC_DMCUB_INT_TYPE enum
 */

typedef enum DC_DMCUB_INT_TYPE {
INT_LEVEL                                = 0x00000000,
INT_PULSE                                = 0x00000001,
} DC_DMCUB_INT_TYPE;

/*
 * DC_DMCUB_TIMER_WINDOW enum
 */

typedef enum DC_DMCUB_TIMER_WINDOW {
BITS_31_0                                = 0x00000000,
BITS_32_1                                = 0x00000001,
BITS_33_2                                = 0x00000002,
BITS_34_3                                = 0x00000003,
BITS_35_4                                = 0x00000004,
BITS_36_5                                = 0x00000005,
BITS_37_6                                = 0x00000006,
BITS_38_7                                = 0x00000007,
} DC_DMCUB_TIMER_WINDOW;

/*******************************************************
 * RBBMIF Enums
 *******************************************************/

/*
 * INVALID_REG_ACCESS_TYPE enum
 */

typedef enum INVALID_REG_ACCESS_TYPE {
REG_UNALLOCATED_ADDR_WRITE               = 0x00000000,
REG_UNALLOCATED_ADDR_READ                = 0x00000001,
REG_VIRTUAL_WRITE                        = 0x00000002,
REG_VIRTUAL_READ                         = 0x00000003,
REG_SECURE_VIOLATE_WRITE                 = 0x00000004,
REG_SECURE_VIOLATE_READ                  = 0x00000005,
} INVALID_REG_ACCESS_TYPE;

/*******************************************************
 * IHC Enums
 *******************************************************/

/*
 * DMU_DC_GPU_TIMER_READ_SELECT enum
 */

typedef enum DMU_DC_GPU_TIMER_READ_SELECT {
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_V_UPDATE_0 = 0x00000000,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_V_UPDATE_1 = 0x00000001,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_V_UPDATE_2 = 0x00000002,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_V_UPDATE_3 = 0x00000003,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_V_UPDATE_4 = 0x00000004,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_V_UPDATE_5 = 0x00000005,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_V_UPDATE_6 = 0x00000006,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_V_UPDATE_7 = 0x00000007,
RESERVED_8                               = 0x00000008,
RESERVED_9                               = 0x00000009,
RESERVED_10                              = 0x0000000a,
RESERVED_11                              = 0x0000000b,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_V_STARTUP_12 = 0x0000000c,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_V_STARTUP_13 = 0x0000000d,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_V_STARTUP_14 = 0x0000000e,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_V_STARTUP_15 = 0x0000000f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_V_STARTUP_16 = 0x00000010,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_V_STARTUP_17 = 0x00000011,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_V_STARTUP_18 = 0x00000012,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_V_STARTUP_19 = 0x00000013,
RESERVED_20                              = 0x00000014,
RESERVED_21                              = 0x00000015,
RESERVED_22                              = 0x00000016,
RESERVED_23                              = 0x00000017,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_VSYNC_NOM_24 = 0x00000018,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_VSYNC_NOM_25 = 0x00000019,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_VSYNC_NOM_26 = 0x0000001a,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_VSYNC_NOM_27 = 0x0000001b,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_VSYNC_NOM_28 = 0x0000001c,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_VSYNC_NOM_29 = 0x0000001d,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_VSYNC_NOM_30 = 0x0000001e,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_VSYNC_NOM_31 = 0x0000001f,
RESERVED_32                              = 0x00000020,
RESERVED_33                              = 0x00000021,
RESERVED_34                              = 0x00000022,
RESERVED_35                              = 0x00000023,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_VREADY_36 = 0x00000024,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_VREADY_37 = 0x00000025,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_VREADY_38 = 0x00000026,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_VREADY_39 = 0x00000027,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_VREADY_40 = 0x00000028,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_VREADY_41 = 0x00000029,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_VREADY_42 = 0x0000002a,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_VREADY_43 = 0x0000002b,
RESERVED_44                              = 0x0000002c,
RESERVED_45                              = 0x0000002d,
RESERVED_46                              = 0x0000002e,
RESERVED_47                              = 0x0000002f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_FLIP_48 = 0x00000030,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_FLIP_49 = 0x00000031,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_FLIP_50 = 0x00000032,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_FLIP_51 = 0x00000033,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_FLIP_52 = 0x00000034,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_FLIP_53 = 0x00000035,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_FLIP_54 = 0x00000036,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_FLIP_55 = 0x00000037,
RESERVED_56                              = 0x00000038,
RESERVED_57                              = 0x00000039,
RESERVED_58                              = 0x0000003a,
RESERVED_59                              = 0x0000003b,
RESERVED_60                              = 0x0000003c,
RESERVED_61                              = 0x0000003d,
RESERVED_62                              = 0x0000003e,
RESERVED_63                              = 0x0000003f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_V_UPDATE_NO_LOCK_64 = 0x00000040,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_V_UPDATE_NO_LOCK_65 = 0x00000041,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_V_UPDATE_NO_LOCK_66 = 0x00000042,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_V_UPDATE_NO_LOCK_67 = 0x00000043,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_V_UPDATE_NO_LOCK_68 = 0x00000044,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_V_UPDATE_NO_LOCK_69 = 0x00000045,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_V_UPDATE_NO_LOCK_70 = 0x00000046,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_V_UPDATE_NO_LOCK_71 = 0x00000047,
RESERVED_72                              = 0x00000048,
RESERVED_73                              = 0x00000049,
RESERVED_74                              = 0x0000004a,
RESERVED_75                              = 0x0000004b,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_FLIP_AWAY_76 = 0x0000004c,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_FLIP_AWAY_77 = 0x0000004d,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_FLIP_AWAY_78 = 0x0000004e,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_FLIP_AWAY_79 = 0x0000004f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_FLIP_AWAY_80 = 0x00000050,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_FLIP_AWAY_81 = 0x00000051,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_FLIP_AWAY_82 = 0x00000052,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_FLIP_AWAY_83 = 0x00000053,
RESERVED_84                              = 0x00000054,
RESERVED_85                              = 0x00000055,
RESERVED_86                              = 0x00000056,
RESERVED_87                              = 0x00000057,
RESERVED_88                              = 0x00000058,
RESERVED_89                              = 0x00000059,
RESERVED_90                              = 0x0000005a,
RESERVED_91                              = 0x0000005b,
} DMU_DC_GPU_TIMER_READ_SELECT;

/*
 * DMU_DC_GPU_TIMER_START_POSITION enum
 */

typedef enum DMU_DC_GPU_TIMER_START_POSITION {
DMU_GPU_TIMER_START_0_END_27             = 0x00000000,
DMU_GPU_TIMER_START_1_END_28             = 0x00000001,
DMU_GPU_TIMER_START_2_END_29             = 0x00000002,
DMU_GPU_TIMER_START_3_END_30             = 0x00000003,
DMU_GPU_TIMER_START_4_END_31             = 0x00000004,
DMU_GPU_TIMER_START_6_END_33             = 0x00000005,
DMU_GPU_TIMER_START_8_END_35             = 0x00000006,
DMU_GPU_TIMER_START_10_END_37            = 0x00000007,
} DMU_DC_GPU_TIMER_START_POSITION;

/*
 * IHC_INTERRUPT_DEST enum
 */

typedef enum IHC_INTERRUPT_DEST {
INTERRUPT_SENT_TO_IH                     = 0x00000000,
INTERRUPT_SENT_TO_DMCUB                  = 0x00000001,
} IHC_INTERRUPT_DEST;

/*
 * IHC_INTERRUPT_LINE_STATUS enum
 */

typedef enum IHC_INTERRUPT_LINE_STATUS {
INTERRUPT_LINE_NOT_ASSERTED              = 0x00000000,
INTERRUPT_LINE_ASSERTED                  = 0x00000001,
} IHC_INTERRUPT_LINE_STATUS;

/*******************************************************
 * DMU_MISC Enums
 *******************************************************/

/*
 * DC_SMU_INTERRUPT_ENABLE enum
 */

typedef enum DC_SMU_INTERRUPT_ENABLE {
DISABLE_THE_INTERRUPT                    = 0x00000000,
ENABLE_THE_INTERRUPT                     = 0x00000001,
} DC_SMU_INTERRUPT_ENABLE;

/*
 * DMU_CLOCK_ON enum
 */

typedef enum DMU_CLOCK_ON {
DMU_CLOCK_STATUS_ON                      = 0x00000000,
DMU_CLOCK_STATUS_OFF                     = 0x00000001,
} DMU_CLOCK_ON;

/*
 * SMU_INTR enum
 */

typedef enum SMU_INTR {
SMU_MSG_INTR_NOOP                        = 0x00000000,
SET_SMU_MSG_INTR                         = 0x00000001,
} SMU_INTR;

/*******************************************************
 * DCCG Enums
 *******************************************************/

/*
 * ALLOW_SR_ON_TRANS_REQ enum
 */

typedef enum ALLOW_SR_ON_TRANS_REQ {
ALLOW_SR_ON_TRANS_REQ_ENABLE             = 0x00000000,
ALLOW_SR_ON_TRANS_REQ_DISABLE            = 0x00000001,
} ALLOW_SR_ON_TRANS_REQ;

/*
 * AMCLOCK_ENABLE enum
 */

typedef enum AMCLOCK_ENABLE {
ENABLE_AMCLK0                            = 0x00000000,
ENABLE_AMCLK1                            = 0x00000001,
} AMCLOCK_ENABLE;

/*
 * CLEAR_SMU_INTR enum
 */

typedef enum CLEAR_SMU_INTR {
SMU_INTR_STATUS_NOOP                     = 0x00000000,
SMU_INTR_STATUS_CLEAR                    = 0x00000001,
} CLEAR_SMU_INTR;

/*
 * CLOCK_BRANCH_SOFT_RESET enum
 */

typedef enum CLOCK_BRANCH_SOFT_RESET {
CLOCK_BRANCH_SOFT_RESET_NOOP             = 0x00000000,
CLOCK_BRANCH_SOFT_RESET_FORCE            = 0x00000001,
} CLOCK_BRANCH_SOFT_RESET;

/*
 * DCCG_AUDIO_DTO0_SOURCE_SEL enum
 */

typedef enum DCCG_AUDIO_DTO0_SOURCE_SEL {
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG0          = 0x00000000,
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG1          = 0x00000001,
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG2          = 0x00000002,
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG3          = 0x00000003,
DCCG_AUDIO_DTO0_SOURCE_SEL_RESERVED      = 0x00000004,
} DCCG_AUDIO_DTO0_SOURCE_SEL;

/*
 * DCCG_AUDIO_DTO2_SOURCE_SEL enum
 */

typedef enum DCCG_AUDIO_DTO2_SOURCE_SEL {
DCCG_AUDIO_DTO2_SOURCE_SEL_AMCLK0        = 0x00000000,
DCCG_AUDIO_DTO2_SOURCE_SEL_AMCLK0_DIV2   = 0x00000001,
} DCCG_AUDIO_DTO2_SOURCE_SEL;

/*
 * DCCG_AUDIO_DTO_SEL enum
 */

typedef enum DCCG_AUDIO_DTO_SEL {
DCCG_AUDIO_DTO_SEL_AUDIO_DTO0            = 0x00000000,
DCCG_AUDIO_DTO_SEL_AUDIO_DTO1            = 0x00000001,
DCCG_AUDIO_DTO_SEL_NO_AUDIO_DTO          = 0x00000002,
DCCG_AUDIO_DTO_SEL_AUDIO_DTO_DTBCLK      = 0x00000003,
} DCCG_AUDIO_DTO_SEL;

/*
 * DCCG_AUDIO_DTO_USE_512FBR_DTO enum
 */

typedef enum DCCG_AUDIO_DTO_USE_512FBR_DTO {
DCCG_AUDIO_DTO_USE_128FBR_FOR_DP         = 0x00000000,
DCCG_AUDIO_DTO_USE_512FBR_FOR_DP         = 0x00000001,
} DCCG_AUDIO_DTO_USE_512FBR_DTO;

/*
 * DCCG_DBG_BLOCK_SEL enum
 */

typedef enum DCCG_DBG_BLOCK_SEL {
DCCG_DBG_BLOCK_SEL_DCCG                  = 0x00000000,
DCCG_DBG_BLOCK_SEL_PMON                  = 0x00000001,
DCCG_DBG_BLOCK_SEL_PMON2                 = 0x00000002,
} DCCG_DBG_BLOCK_SEL;

/*
 * DCCG_DBG_EN enum
 */

typedef enum DCCG_DBG_EN {
DCCG_DBG_EN_DISABLE                      = 0x00000000,
DCCG_DBG_EN_ENABLE                       = 0x00000001,
} DCCG_DBG_EN;

/*
 * DCCG_DEEP_COLOR_CNTL enum
 */

typedef enum DCCG_DEEP_COLOR_CNTL {
DCCG_DEEP_COLOR_DTO_DISABLE              = 0x00000000,
DCCG_DEEP_COLOR_DTO_5_4_RATIO            = 0x00000001,
DCCG_DEEP_COLOR_DTO_3_2_RATIO            = 0x00000002,
DCCG_DEEP_COLOR_DTO_2_1_RATIO            = 0x00000003,
} DCCG_DEEP_COLOR_CNTL;

/*
 * DCCG_FIFO_ERRDET_OVR_EN enum
 */

typedef enum DCCG_FIFO_ERRDET_OVR_EN {
DCCG_FIFO_ERRDET_OVR_DISABLE             = 0x00000000,
DCCG_FIFO_ERRDET_OVR_ENABLE              = 0x00000001,
} DCCG_FIFO_ERRDET_OVR_EN;

/*
 * DCCG_FIFO_ERRDET_RESET enum
 */

typedef enum DCCG_FIFO_ERRDET_RESET {
DCCG_FIFO_ERRDET_RESET_NOOP              = 0x00000000,
DCCG_FIFO_ERRDET_RESET_FORCE             = 0x00000001,
} DCCG_FIFO_ERRDET_RESET;

/*
 * DCCG_FIFO_ERRDET_STATE enum
 */

typedef enum DCCG_FIFO_ERRDET_STATE {
DCCG_FIFO_ERRDET_STATE_CALIBRATION       = 0x00000000,
DCCG_FIFO_ERRDET_STATE_DETECTION         = 0x00000001,
} DCCG_FIFO_ERRDET_STATE;

/*
 * DCCG_PERF_MODE_HSYNC enum
 */

typedef enum DCCG_PERF_MODE_HSYNC {
DCCG_PERF_MODE_HSYNC_NOOP                = 0x00000000,
DCCG_PERF_MODE_HSYNC_START               = 0x00000001,
} DCCG_PERF_MODE_HSYNC;

/*
 * DCCG_PERF_MODE_VSYNC enum
 */

typedef enum DCCG_PERF_MODE_VSYNC {
DCCG_PERF_MODE_VSYNC_NOOP                = 0x00000000,
DCCG_PERF_MODE_VSYNC_START               = 0x00000001,
} DCCG_PERF_MODE_VSYNC;

/*
 * DCCG_PERF_OTG_SELECT enum
 */

typedef enum DCCG_PERF_OTG_SELECT {
DCCG_PERF_SEL_OTG0                       = 0x00000000,
DCCG_PERF_SEL_OTG1                       = 0x00000001,
DCCG_PERF_SEL_OTG2                       = 0x00000002,
DCCG_PERF_SEL_OTG3                       = 0x00000003,
DCCG_PERF_SEL_RESERVED                   = 0x00000004,
} DCCG_PERF_OTG_SELECT;

/*
 * DCCG_PERF_RUN enum
 */

typedef enum DCCG_PERF_RUN {
DCCG_PERF_RUN_NOOP                       = 0x00000000,
DCCG_PERF_RUN_START                      = 0x00000001,
} DCCG_PERF_RUN;

/*
 * DC_MEM_GLOBAL_PWR_REQ_DIS enum
 */

typedef enum DC_MEM_GLOBAL_PWR_REQ_DIS {
DC_MEM_GLOBAL_PWR_REQ_ENABLE             = 0x00000000,
DC_MEM_GLOBAL_PWR_REQ_DISABLE            = 0x00000001,
} DC_MEM_GLOBAL_PWR_REQ_DIS;

/*
 * DIO_FIFO_ERROR enum
 */

typedef enum DIO_FIFO_ERROR {
DIO_FIFO_ERROR_00                        = 0x00000000,
DIO_FIFO_ERROR_01                        = 0x00000001,
DIO_FIFO_ERROR_10                        = 0x00000002,
DIO_FIFO_ERROR_11                        = 0x00000003,
} DIO_FIFO_ERROR;

/*
 * DISABLE_CLOCK_GATING enum
 */

typedef enum DISABLE_CLOCK_GATING {
CLOCK_GATING_ENABLED                     = 0x00000000,
CLOCK_GATING_DISABLED                    = 0x00000001,
} DISABLE_CLOCK_GATING;

/*
 * DISABLE_CLOCK_GATING_IN_DCO enum
 */

typedef enum DISABLE_CLOCK_GATING_IN_DCO {
CLOCK_GATING_ENABLED_IN_DCO              = 0x00000000,
CLOCK_GATING_DISABLED_IN_DCO             = 0x00000001,
} DISABLE_CLOCK_GATING_IN_DCO;

/*
 * DISPCLK_CHG_FWD_CORR_DISABLE enum
 */

typedef enum DISPCLK_CHG_FWD_CORR_DISABLE {
DISPCLK_CHG_FWD_CORR_ENABLE_AT_BEGINNING = 0x00000000,
DISPCLK_CHG_FWD_CORR_DISABLE_AT_BEGINNING = 0x00000001,
} DISPCLK_CHG_FWD_CORR_DISABLE;

/*
 * DISPCLK_FREQ_RAMP_DONE enum
 */

typedef enum DISPCLK_FREQ_RAMP_DONE {
DISPCLK_FREQ_RAMP_IN_PROGRESS            = 0x00000000,
DISPCLK_FREQ_RAMP_COMPLETED              = 0x00000001,
} DISPCLK_FREQ_RAMP_DONE;

/*
 * DPREFCLK_SRC_SEL enum
 */

typedef enum DPREFCLK_SRC_SEL {
DPREFCLK_SRC_SEL_CK                      = 0x00000000,
DPREFCLK_SRC_SEL_P0PLL                   = 0x00000001,
DPREFCLK_SRC_SEL_P1PLL                   = 0x00000002,
DPREFCLK_SRC_SEL_P2PLL                   = 0x00000003,
} DPREFCLK_SRC_SEL;

/*
 * DP_DTO_DS_DISABLE enum
 */

typedef enum DP_DTO_DS_DISABLE {
DP_DTO_DESPREAD_DISABLE                  = 0x00000000,
DP_DTO_DESPREAD_ENABLE                   = 0x00000001,
} DP_DTO_DS_DISABLE;

/*
 * DS_HW_CAL_ENABLE enum
 */

typedef enum DS_HW_CAL_ENABLE {
DS_HW_CAL_DIS                            = 0x00000000,
DS_HW_CAL_EN                             = 0x00000001,
} DS_HW_CAL_ENABLE;

/*
 * DS_JITTER_COUNT_SRC_SEL enum
 */

typedef enum DS_JITTER_COUNT_SRC_SEL {
DS_JITTER_COUNT_SRC_SEL0                 = 0x00000000,
DS_JITTER_COUNT_SRC_SEL1                 = 0x00000001,
} DS_JITTER_COUNT_SRC_SEL;

/*
 * DS_REF_SRC enum
 */

typedef enum DS_REF_SRC {
DS_REF_IS_XTALIN                         = 0x00000000,
DS_REF_IS_EXT_GENLOCK                    = 0x00000001,
DS_REF_IS_PCIE                           = 0x00000002,
} DS_REF_SRC;

/*
 * DVOACLKC_IN_PHASE enum
 */

typedef enum DVOACLKC_IN_PHASE {
DVOACLKC_IN_OPPOSITE_PHASE_WITH_PCLK_DVO = 0x00000000,
DVOACLKC_IN_PHASE_WITH_PCLK_DVO          = 0x00000001,
} DVOACLKC_IN_PHASE;

/*
 * DVOACLKC_MVP_IN_PHASE enum
 */

typedef enum DVOACLKC_MVP_IN_PHASE {
DVOACLKC_MVP_IN_OPPOSITE_PHASE_WITH_PCLK_DVO = 0x00000000,
DVOACLKC_MVP_IN_PHASE_WITH_PCLK_DVO      = 0x00000001,
} DVOACLKC_MVP_IN_PHASE;

/*
 * DVOACLKC_MVP_SKEW_PHASE_OVERRIDE enum
 */

typedef enum DVOACLKC_MVP_SKEW_PHASE_OVERRIDE {
DVOACLKC_MVP_SKEW_PHASE_OVERRIDE_DISABLE = 0x00000000,
DVOACLKC_MVP_SKEW_PHASE_OVERRIDE_ENABLE  = 0x00000001,
} DVOACLKC_MVP_SKEW_PHASE_OVERRIDE;

/*
 * DVOACLKD_IN_PHASE enum
 */

typedef enum DVOACLKD_IN_PHASE {
DVOACLKD_IN_OPPOSITE_PHASE_WITH_PCLK_DVO = 0x00000000,
DVOACLKD_IN_PHASE_WITH_PCLK_DVO          = 0x00000001,
} DVOACLKD_IN_PHASE;

/*
 * DVOACLK_COARSE_SKEW_CNTL enum
 */

typedef enum DVOACLK_COARSE_SKEW_CNTL {
DVOACLK_COARSE_SKEW_CNTL_NO_ADJUSTMENT   = 0x00000000,
DVOACLK_COARSE_SKEW_CNTL_DELAY_1_STEP    = 0x00000001,
DVOACLK_COARSE_SKEW_CNTL_DELAY_2_STEPS   = 0x00000002,
DVOACLK_COARSE_SKEW_CNTL_DELAY_3_STEPS   = 0x00000003,
DVOACLK_COARSE_SKEW_CNTL_DELAY_4_STEPS   = 0x00000004,
DVOACLK_COARSE_SKEW_CNTL_DELAY_5_STEPS   = 0x00000005,
DVOACLK_COARSE_SKEW_CNTL_DELAY_6_STEPS   = 0x00000006,
DVOACLK_COARSE_SKEW_CNTL_DELAY_7_STEPS   = 0x00000007,
DVOACLK_COARSE_SKEW_CNTL_DELAY_8_STEPS   = 0x00000008,
DVOACLK_COARSE_SKEW_CNTL_DELAY_9_STEPS   = 0x00000009,
DVOACLK_COARSE_SKEW_CNTL_DELAY_10_STEPS  = 0x0000000a,
DVOACLK_COARSE_SKEW_CNTL_DELAY_11_STEPS  = 0x0000000b,
DVOACLK_COARSE_SKEW_CNTL_DELAY_12_STEPS  = 0x0000000c,
DVOACLK_COARSE_SKEW_CNTL_DELAY_13_STEPS  = 0x0000000d,
DVOACLK_COARSE_SKEW_CNTL_DELAY_14_STEPS  = 0x0000000e,
DVOACLK_COARSE_SKEW_CNTL_DELAY_15_STEPS  = 0x0000000f,
DVOACLK_COARSE_SKEW_CNTL_EARLY_1_STEP    = 0x00000010,
DVOACLK_COARSE_SKEW_CNTL_EARLY_2_STEPS   = 0x00000011,
DVOACLK_COARSE_SKEW_CNTL_EARLY_3_STEPS   = 0x00000012,
DVOACLK_COARSE_SKEW_CNTL_EARLY_4_STEPS   = 0x00000013,
DVOACLK_COARSE_SKEW_CNTL_EARLY_5_STEPS   = 0x00000014,
DVOACLK_COARSE_SKEW_CNTL_EARLY_6_STEPS   = 0x00000015,
DVOACLK_COARSE_SKEW_CNTL_EARLY_7_STEPS   = 0x00000016,
DVOACLK_COARSE_SKEW_CNTL_EARLY_8_STEPS   = 0x00000017,
DVOACLK_COARSE_SKEW_CNTL_EARLY_9_STEPS   = 0x00000018,
DVOACLK_COARSE_SKEW_CNTL_EARLY_10_STEPS  = 0x00000019,
DVOACLK_COARSE_SKEW_CNTL_EARLY_11_STEPS  = 0x0000001a,
DVOACLK_COARSE_SKEW_CNTL_EARLY_12_STEPS  = 0x0000001b,
DVOACLK_COARSE_SKEW_CNTL_EARLY_13_STEPS  = 0x0000001c,
DVOACLK_COARSE_SKEW_CNTL_EARLY_14_STEPS  = 0x0000001d,
DVOACLK_COARSE_SKEW_CNTL_EARLY_15_STEPS  = 0x0000001e,
} DVOACLK_COARSE_SKEW_CNTL;

/*
 * DVOACLK_FINE_SKEW_CNTL enum
 */

typedef enum DVOACLK_FINE_SKEW_CNTL {
DVOACLK_FINE_SKEW_CNTL_NO_ADJUSTMENT     = 0x00000000,
DVOACLK_FINE_SKEW_CNTL_DELAY_1_STEP      = 0x00000001,
DVOACLK_FINE_SKEW_CNTL_DELAY_2_STEPS     = 0x00000002,
DVOACLK_FINE_SKEW_CNTL_DELAY_3_STEPS     = 0x00000003,
DVOACLK_FINE_SKEW_CNTL_EARLY_1_STEP      = 0x00000004,
DVOACLK_FINE_SKEW_CNTL_EARLY_2_STEPS     = 0x00000005,
DVOACLK_FINE_SKEW_CNTL_EARLY_3_STEPS     = 0x00000006,
DVOACLK_FINE_SKEW_CNTL_EARLY_4_STEPS     = 0x00000007,
} DVOACLK_FINE_SKEW_CNTL;

/*
 * DVO_ENABLE_RST enum
 */

typedef enum DVO_ENABLE_RST {
DVO_ENABLE_RST_DISABLE                   = 0x00000000,
DVO_ENABLE_RST_ENABLE                    = 0x00000001,
} DVO_ENABLE_RST;

/*
 * ENABLE enum
 */

typedef enum ENABLE {
DISABLE_THE_FEATURE                      = 0x00000000,
ENABLE_THE_FEATURE                       = 0x00000001,
} ENABLE;

/*
 * ENABLE_CLOCK enum
 */

typedef enum ENABLE_CLOCK {
ENABLE_THE_REFCLK                        = 0x00000000,
ENABLE_THE_FUNC_CLOCK                    = 0x00000001,
} ENABLE_CLOCK;

/*
 * FORCE_DISABLE_CLOCK enum
 */

typedef enum FORCE_DISABLE_CLOCK {
NOT_FORCE_THE_CLOCK_DISABLED             = 0x00000000,
FORCE_THE_CLOCK_DISABLED                 = 0x00000001,
} FORCE_DISABLE_CLOCK;

/*
 * HDMICHARCLK_SRC_SEL enum
 */

typedef enum HDMICHARCLK_SRC_SEL {
HDMICHARCLK_SRC_SEL_UNIPHYA              = 0x00000000,
HDMICHARCLK_SRC_SEL_UNIPHYB              = 0x00000001,
HDMICHARCLK_SRC_SEL_UNIPHYC              = 0x00000002,
HDMICHARCLK_SRC_SEL_UNIPHYD              = 0x00000003,
HDMICHARCLK_SRC_SEL_UNIPHYE              = 0x00000004,
HDMICHARCLK_SRC_SEL_SRC_RESERVED         = 0x00000005,
} HDMICHARCLK_SRC_SEL;

/*
 * HDMISTREAMCLK_DTO_FORCE_DIS enum
 */

typedef enum HDMISTREAMCLK_DTO_FORCE_DIS {
DTO_FORCE_NO_BYPASS                      = 0x00000000,
DTO_FORCE_BYPASS                         = 0x00000001,
} HDMISTREAMCLK_DTO_FORCE_DIS;

/*
 * HDMISTREAMCLK_SRC_SEL enum
 */

typedef enum HDMISTREAMCLK_SRC_SEL {
SEL_REFCLK0                              = 0x00000000,
SEL_DTBCLK0                              = 0x00000001,
SEL_DTBCLK1                              = 0x00000002,
} HDMISTREAMCLK_SRC_SEL;

/*
 * JITTER_REMOVE_DISABLE enum
 */

typedef enum JITTER_REMOVE_DISABLE {
ENABLE_JITTER_REMOVAL                    = 0x00000000,
DISABLE_JITTER_REMOVAL                   = 0x00000001,
} JITTER_REMOVE_DISABLE;

/*
 * MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL enum
 */

typedef enum MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL {
MICROSECOND_TIME_BASE_CLOCK_IS_XTALIN    = 0x00000000,
MICROSECOND_TIME_BASE_CLOCK_IS_DCCGREFCLK = 0x00000001,
} MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL;

/*
 * MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL enum
 */

typedef enum MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL {
MILLISECOND_TIME_BASE_CLOCK_IS_XTALIN    = 0x00000000,
MILLISECOND_TIME_BASE_CLOCK_IS_DCCGREFCLK = 0x00000001,
} MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL;

/*
 * OTG_ADD_PIXEL enum
 */

typedef enum OTG_ADD_PIXEL {
OTG_ADD_PIXEL_NOOP                       = 0x00000000,
OTG_ADD_PIXEL_FORCE                      = 0x00000001,
} OTG_ADD_PIXEL;

/*
 * OTG_DROP_PIXEL enum
 */

typedef enum OTG_DROP_PIXEL {
OTG_DROP_PIXEL_NOOP                      = 0x00000000,
OTG_DROP_PIXEL_FORCE                     = 0x00000001,
} OTG_DROP_PIXEL;

/*
 * PHYSYMCLK_FORCE_EN enum
 */

typedef enum PHYSYMCLK_FORCE_EN {
PHYSYMCLK_FORCE_EN_DISABLE               = 0x00000000,
PHYSYMCLK_FORCE_EN_ENABLE                = 0x00000001,
} PHYSYMCLK_FORCE_EN;

/*
 * PHYSYMCLK_FORCE_SRC_SEL enum
 */

typedef enum PHYSYMCLK_FORCE_SRC_SEL {
PHYSYMCLK_FORCE_SRC_SYMCLK               = 0x00000000,
PHYSYMCLK_FORCE_SRC_PHYD18CLK            = 0x00000001,
PHYSYMCLK_FORCE_SRC_PHYD32CLK            = 0x00000002,
} PHYSYMCLK_FORCE_SRC_SEL;

/*
 * PIPE_PHYPLL_PIXEL_RATE_SOURCE enum
 */

typedef enum PIPE_PHYPLL_PIXEL_RATE_SOURCE {
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYA    = 0x00000000,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYB    = 0x00000001,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYC    = 0x00000002,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYD    = 0x00000003,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_RESERVED   = 0x00000004,
} PIPE_PHYPLL_PIXEL_RATE_SOURCE;

/*
 * PIPE_PIXEL_RATE_PLL_SOURCE enum
 */

typedef enum PIPE_PIXEL_RATE_PLL_SOURCE {
PIPE_PIXEL_RATE_PLL_SOURCE_PHYPLL        = 0x00000000,
PIPE_PIXEL_RATE_PLL_SOURCE_DISPPLL       = 0x00000001,
} PIPE_PIXEL_RATE_PLL_SOURCE;

/*
 * PIPE_PIXEL_RATE_SOURCE enum
 */

typedef enum PIPE_PIXEL_RATE_SOURCE {
PIPE_PIXEL_RATE_SOURCE_P0PLL             = 0x00000000,
PIPE_PIXEL_RATE_SOURCE_P1PLL             = 0x00000001,
PIPE_PIXEL_RATE_SOURCE_P2PLL             = 0x00000002,
} PIPE_PIXEL_RATE_SOURCE;

/*
 * PLL_CFG_IF_SOFT_RESET enum
 */

typedef enum PLL_CFG_IF_SOFT_RESET {
PLL_CFG_IF_SOFT_RESET_NOOP               = 0x00000000,
PLL_CFG_IF_SOFT_RESET_FORCE              = 0x00000001,
} PLL_CFG_IF_SOFT_RESET;

/*
 * SYMCLK_FE_FORCE_EN enum
 */

typedef enum SYMCLK_FE_FORCE_EN {
SYMCLK_FE_FORCE_EN_DISABLE               = 0x00000000,
SYMCLK_FE_FORCE_EN_ENABLE                = 0x00000001,
} SYMCLK_FE_FORCE_EN;

/*
 * SYMCLK_FE_FORCE_SRC enum
 */

typedef enum SYMCLK_FE_FORCE_SRC {
SYMCLK_FE_FORCE_SRC_UNIPHYA              = 0x00000000,
SYMCLK_FE_FORCE_SRC_UNIPHYB              = 0x00000001,
SYMCLK_FE_FORCE_SRC_UNIPHYC              = 0x00000002,
SYMCLK_FE_FORCE_SRC_UNIPHYD              = 0x00000003,
SYMCLK_FE_FORCE_SRC_RESERVED             = 0x00000004,
} SYMCLK_FE_FORCE_SRC;

/*
 * TEST_CLK_DIV_SEL enum
 */

typedef enum TEST_CLK_DIV_SEL {
NO_DIV                                   = 0x00000000,
DIV_2                                    = 0x00000001,
DIV_4                                    = 0x00000002,
DIV_8                                    = 0x00000003,
} TEST_CLK_DIV_SEL;

/*
 * VSYNC_CNT_LATCH_MASK enum
 */

typedef enum VSYNC_CNT_LATCH_MASK {
VSYNC_CNT_LATCH_MASK_0                   = 0x00000000,
VSYNC_CNT_LATCH_MASK_1                   = 0x00000001,
} VSYNC_CNT_LATCH_MASK;

/*
 * VSYNC_CNT_RESET_SEL enum
 */

typedef enum VSYNC_CNT_RESET_SEL {
VSYNC_CNT_RESET_SEL_0                    = 0x00000000,
VSYNC_CNT_RESET_SEL_1                    = 0x00000001,
} VSYNC_CNT_RESET_SEL;

/*
 * XTAL_REF_CLOCK_SOURCE_SEL enum
 */

typedef enum XTAL_REF_CLOCK_SOURCE_SEL {
XTAL_REF_CLOCK_SOURCE_SEL_XTALIN         = 0x00000000,
XTAL_REF_CLOCK_SOURCE_SEL_DCCGREFCLK     = 0x00000001,
} XTAL_REF_CLOCK_SOURCE_SEL;

/*
 * XTAL_REF_SEL enum
 */

typedef enum XTAL_REF_SEL {
XTAL_REF_SEL_1X                          = 0x00000000,
XTAL_REF_SEL_2X                          = 0x00000001,
} XTAL_REF_SEL;

/*******************************************************
 * HPD Enums
 *******************************************************/

/*
 * HPD_INT_CONTROL_ACK enum
 */

typedef enum HPD_INT_CONTROL_ACK {
HPD_INT_CONTROL_ACK_0                    = 0x00000000,
HPD_INT_CONTROL_ACK_1                    = 0x00000001,
} HPD_INT_CONTROL_ACK;

/*
 * HPD_INT_CONTROL_POLARITY enum
 */

typedef enum HPD_INT_CONTROL_POLARITY {
HPD_INT_CONTROL_GEN_INT_ON_DISCON        = 0x00000000,
HPD_INT_CONTROL_GEN_INT_ON_CON           = 0x00000001,
} HPD_INT_CONTROL_POLARITY;

/*
 * HPD_INT_CONTROL_RX_INT_ACK enum
 */

typedef enum HPD_INT_CONTROL_RX_INT_ACK {
HPD_INT_CONTROL_RX_INT_ACK_0             = 0x00000000,
HPD_INT_CONTROL_RX_INT_ACK_1             = 0x00000001,
} HPD_INT_CONTROL_RX_INT_ACK;

/*******************************************************
 * DP Enums
 *******************************************************/

/*
 * DPHY_8B10B_CUR_DISP enum
 */

typedef enum DPHY_8B10B_CUR_DISP {
DPHY_8B10B_CUR_DISP_ZERO                 = 0x00000000,
DPHY_8B10B_CUR_DISP_ONE                  = 0x00000001,
} DPHY_8B10B_CUR_DISP;

/*
 * DPHY_8B10B_RESET enum
 */

typedef enum DPHY_8B10B_RESET {
DPHY_8B10B_NOT_RESET                     = 0x00000000,
DPHY_8B10B_RESETET                       = 0x00000001,
} DPHY_8B10B_RESET;

/*
 * DPHY_ALT_SCRAMBLER_RESET_EN enum
 */

typedef enum DPHY_ALT_SCRAMBLER_RESET_EN {
DPHY_ALT_SCRAMBLER_REGULAR_RESET_VALUE   = 0x00000000,
DPHY_ALT_SCRAMBLER_INTERNAL_RESET_SOLUTION = 0x00000001,
} DPHY_ALT_SCRAMBLER_RESET_EN;

/*
 * DPHY_ALT_SCRAMBLER_RESET_SEL enum
 */

typedef enum DPHY_ALT_SCRAMBLER_RESET_SEL {
DPHY_ALT_SCRAMBLER_RESET_SEL_EDP_RESET_VALUE = 0x00000000,
DPHY_ALT_SCRAMBLER_RESET_SEL_CUSTOM_RESET_VALUE = 0x00000001,
} DPHY_ALT_SCRAMBLER_RESET_SEL;

/*
 * DPHY_ATEST_SEL_LANE0 enum
 */

typedef enum DPHY_ATEST_SEL_LANE0 {
DPHY_ATEST_LANE0_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE0_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE0;

/*
 * DPHY_ATEST_SEL_LANE1 enum
 */

typedef enum DPHY_ATEST_SEL_LANE1 {
DPHY_ATEST_LANE1_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE1_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE1;

/*
 * DPHY_ATEST_SEL_LANE2 enum
 */

typedef enum DPHY_ATEST_SEL_LANE2 {
DPHY_ATEST_LANE2_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE2_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE2;

/*
 * DPHY_ATEST_SEL_LANE3 enum
 */

typedef enum DPHY_ATEST_SEL_LANE3 {
DPHY_ATEST_LANE3_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE3_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE3;

/*
 * DPHY_BYPASS enum
 */

typedef enum DPHY_BYPASS {
DPHY_8B10B_OUTPUT                        = 0x00000000,
DPHY_DBG_OUTPUT                          = 0x00000001,
} DPHY_BYPASS;

/*
 * DPHY_CRC_CONT_EN enum
 */

typedef enum DPHY_CRC_CONT_EN {
DPHY_CRC_ONE_SHOT                        = 0x00000000,
DPHY_CRC_CONTINUOUS                      = 0x00000001,
} DPHY_CRC_CONT_EN;

/*
 * DPHY_CRC_EN enum
 */

typedef enum DPHY_CRC_EN {
DPHY_CRC_DISABLED                        = 0x00000000,
DPHY_CRC_ENABLED                         = 0x00000001,
} DPHY_CRC_EN;

/*
 * DPHY_CRC_FIELD enum
 */

typedef enum DPHY_CRC_FIELD {
DPHY_CRC_START_FROM_TOP_FIELD            = 0x00000000,
DPHY_CRC_START_FROM_BOTTOM_FIELD         = 0x00000001,
} DPHY_CRC_FIELD;

/*
 * DPHY_CRC_MST_PHASE_ERROR_ACK enum
 */

typedef enum DPHY_CRC_MST_PHASE_ERROR_ACK {
DPHY_CRC_MST_PHASE_ERROR_NO_ACK          = 0x00000000,
DPHY_CRC_MST_PHASE_ERROR_ACKED           = 0x00000001,
} DPHY_CRC_MST_PHASE_ERROR_ACK;

/*
 * DPHY_CRC_SEL enum
 */

typedef enum DPHY_CRC_SEL {
DPHY_CRC_LANE0_SELECTED                  = 0x00000000,
DPHY_CRC_LANE1_SELECTED                  = 0x00000001,
DPHY_CRC_LANE2_SELECTED                  = 0x00000002,
DPHY_CRC_LANE3_SELECTED                  = 0x00000003,
} DPHY_CRC_SEL;

/*
 * DPHY_FEC_ENABLE enum
 */

typedef enum DPHY_FEC_ENABLE {
DPHY_FEC_DISABLED                        = 0x00000000,
DPHY_FEC_ENABLED                         = 0x00000001,
} DPHY_FEC_ENABLE;

/*
 * DPHY_FEC_READY enum
 */

typedef enum DPHY_FEC_READY {
DPHY_FEC_READY_EN                        = 0x00000000,
DPHY_FEC_READY_DIS                       = 0x00000001,
} DPHY_FEC_READY;

/*
 * DPHY_LOAD_BS_COUNT_START enum
 */

typedef enum DPHY_LOAD_BS_COUNT_START {
DPHY_LOAD_BS_COUNT_STARTED               = 0x00000000,
DPHY_LOAD_BS_COUNT_NOT_STARTED           = 0x00000001,
} DPHY_LOAD_BS_COUNT_START;

/*
 * DPHY_PRBS_EN enum
 */

typedef enum DPHY_PRBS_EN {
DPHY_PRBS_DISABLE                        = 0x00000000,
DPHY_PRBS_ENABLE                         = 0x00000001,
} DPHY_PRBS_EN;

/*
 * DPHY_PRBS_SEL enum
 */

typedef enum DPHY_PRBS_SEL {
DPHY_PRBS7_SELECTED                      = 0x00000000,
DPHY_PRBS23_SELECTED                     = 0x00000001,
DPHY_PRBS11_SELECTED                     = 0x00000002,
} DPHY_PRBS_SEL;

/*
 * DPHY_RX_FAST_TRAINING_CAPABLE enum
 */

typedef enum DPHY_RX_FAST_TRAINING_CAPABLE {
DPHY_FAST_TRAINING_NOT_CAPABLE_0         = 0x00000000,
DPHY_FAST_TRAINING_CAPABLE               = 0x00000001,
} DPHY_RX_FAST_TRAINING_CAPABLE;

/*
 * DPHY_SCRAMBLER_ADVANCE enum
 */

typedef enum DPHY_SCRAMBLER_ADVANCE {
DPHY_DPHY_SCRAMBLER_ADVANCE_ON_DATA_SYMBOL_ONLY = 0x00000000,
DPHY_SCRAMBLER_ADVANCE_ON_BOTH_DATA_AND_CTRL = 0x00000001,
} DPHY_SCRAMBLER_ADVANCE;

/*
 * DPHY_SCRAMBLER_DIS enum
 */

typedef enum DPHY_SCRAMBLER_DIS {
DPHY_SCR_ENABLED                         = 0x00000000,
DPHY_SCR_DISABLED                        = 0x00000001,
} DPHY_SCRAMBLER_DIS;

/*
 * DPHY_SCRAMBLER_KCODE enum
 */

typedef enum DPHY_SCRAMBLER_KCODE {
DPHY_SCRAMBLER_KCODE_DISABLED            = 0x00000000,
DPHY_SCRAMBLER_KCODE_ENABLED             = 0x00000001,
} DPHY_SCRAMBLER_KCODE;

/*
 * DPHY_SCRAMBLER_SEL enum
 */

typedef enum DPHY_SCRAMBLER_SEL {
DPHY_SCRAMBLER_SEL_LANE_DATA             = 0x00000000,
DPHY_SCRAMBLER_SEL_DBG_DATA              = 0x00000001,
} DPHY_SCRAMBLER_SEL;

/*
 * DPHY_SKEW_BYPASS enum
 */

typedef enum DPHY_SKEW_BYPASS {
DPHY_WITH_SKEW                           = 0x00000000,
DPHY_NO_SKEW                             = 0x00000001,
} DPHY_SKEW_BYPASS;

/*
 * DPHY_STREAM_RESET_DURING_FAST_TRAINING_ENUM enum
 */

typedef enum DPHY_STREAM_RESET_DURING_FAST_TRAINING_ENUM {
DPHY_STREAM_RESET_DURING_FAST_TRAINING_RESET = 0x00000000,
DPHY_STREAM_RESET_DURING_FAST_TRAINING_NOT_RESET = 0x00000001,
} DPHY_STREAM_RESET_DURING_FAST_TRAINING_ENUM;

/*
 * DPHY_SW_FAST_TRAINING_START enum
 */

typedef enum DPHY_SW_FAST_TRAINING_START {
DPHY_SW_FAST_TRAINING_NOT_STARTED        = 0x00000000,
DPHY_SW_FAST_TRAINING_STARTED            = 0x00000001,
} DPHY_SW_FAST_TRAINING_START;

/*
 * DPHY_TRAINING_PATTERN_SEL enum
 */

typedef enum DPHY_TRAINING_PATTERN_SEL {
DPHY_TRAINING_PATTERN_1                  = 0x00000000,
DPHY_TRAINING_PATTERN_2                  = 0x00000001,
DPHY_TRAINING_PATTERN_3                  = 0x00000002,
DPHY_TRAINING_PATTERN_4                  = 0x00000003,
} DPHY_TRAINING_PATTERN_SEL;

/*
 * DP_COMPONENT_DEPTH enum
 */

typedef enum DP_COMPONENT_DEPTH {
DP_COMPONENT_DEPTH_6BPC                  = 0x00000000,
DP_COMPONENT_DEPTH_8BPC                  = 0x00000001,
DP_COMPONENT_DEPTH_10BPC                 = 0x00000002,
DP_COMPONENT_DEPTH_12BPC                 = 0x00000003,
DP_COMPONENT_DEPTH_16BPC                 = 0x00000004,
} DP_COMPONENT_DEPTH;

/*
 * DP_CP_ENCRYPTION_TYPE enum
 */

typedef enum DP_CP_ENCRYPTION_TYPE {
DP_CP_ENCRYPTION_TYPE_0                  = 0x00000000,
DP_CP_ENCRYPTION_TYPE_1                  = 0x00000001,
} DP_CP_ENCRYPTION_TYPE;

/*
 * DP_DPHY_8B10B_EXT_DISP enum
 */

typedef enum DP_DPHY_8B10B_EXT_DISP {
DP_DPHY_8B10B_EXT_DISP_ZERO              = 0x00000000,
DP_DPHY_8B10B_EXT_DISP_ONE               = 0x00000001,
} DP_DPHY_8B10B_EXT_DISP;

/*
 * DP_DPHY_FAST_TRAINING_COMPLETE_ACK enum
 */

typedef enum DP_DPHY_FAST_TRAINING_COMPLETE_ACK {
DP_DPHY_FAST_TRAINING_COMPLETE_NOT_ACKED = 0x00000000,
DP_DPHY_FAST_TRAINING_COMPLETE_ACKED     = 0x00000001,
} DP_DPHY_FAST_TRAINING_COMPLETE_ACK;

/*
 * DP_DPHY_FAST_TRAINING_COMPLETE_MASK enum
 */

typedef enum DP_DPHY_FAST_TRAINING_COMPLETE_MASK {
DP_DPHY_FAST_TRAINING_COMPLETE_MASKED    = 0x00000000,
DP_DPHY_FAST_TRAINING_COMPLETE_NOT_MASKED = 0x00000001,
} DP_DPHY_FAST_TRAINING_COMPLETE_MASK;

/*
 * DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN enum
 */

typedef enum DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN {
DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_DISABLED = 0x00000000,
DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_ENABLED = 0x00000001,
} DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN;

/*
 * DP_DPHY_HBR2_PATTERN_CONTROL_MODE enum
 */

typedef enum DP_DPHY_HBR2_PATTERN_CONTROL_MODE {
DP_DPHY_HBR2_PASS_THROUGH                = 0x00000000,
DP_DPHY_HBR2_PATTERN_1                   = 0x00000001,
DP_DPHY_HBR2_PATTERN_2_NEG               = 0x00000002,
DP_DPHY_HBR2_PATTERN_3                   = 0x00000003,
DP_DPHY_HBR2_PATTERN_2_POS               = 0x00000006,
} DP_DPHY_HBR2_PATTERN_CONTROL_MODE;

/*
 * DP_DSC_MODE enum
 */

typedef enum DP_DSC_MODE {
DP_DSC_DISABLE                           = 0x00000000,
DP_DSC_444_SIMPLE_422                    = 0x00000001,
DP_DSC_NATIVE_422_420                    = 0x00000002,
} DP_DSC_MODE;

/*
 * DP_EMBEDDED_PANEL_MODE enum
 */

typedef enum DP_EMBEDDED_PANEL_MODE {
DP_EXTERNAL_PANEL                        = 0x00000000,
DP_EMBEDDED_PANEL                        = 0x00000001,
} DP_EMBEDDED_PANEL_MODE;

/*
 * DP_LINK_TRAINING_COMPLETE enum
 */

typedef enum DP_LINK_TRAINING_COMPLETE {
DP_LINK_TRAINING_NOT_COMPLETE            = 0x00000000,
DP_LINK_TRAINING_ALREADY_COMPLETE        = 0x00000001,
} DP_LINK_TRAINING_COMPLETE;

/*
 * DP_LINK_TRAINING_SWITCH_MODE enum
 */

typedef enum DP_LINK_TRAINING_SWITCH_MODE {
DP_LINK_TRAINING_SWITCH_TO_IDLE          = 0x00000000,
DP_LINK_TRAINING_SWITCH_TO_VIDEO         = 0x00000001,
} DP_LINK_TRAINING_SWITCH_MODE;

/*
 * DP_ML_PHY_SEQ_MODE enum
 */

typedef enum DP_ML_PHY_SEQ_MODE {
DP_ML_PHY_SEQ_LINE_NUM                   = 0x00000000,
DP_ML_PHY_SEQ_IMMEDIATE                  = 0x00000001,
} DP_ML_PHY_SEQ_MODE;

/*
 * DP_MSA_V_TIMING_OVERRIDE_EN enum
 */

typedef enum DP_MSA_V_TIMING_OVERRIDE_EN {
MSA_V_TIMING_OVERRIDE_DISABLED           = 0x00000000,
MSA_V_TIMING_OVERRIDE_ENABLED            = 0x00000001,
} DP_MSA_V_TIMING_OVERRIDE_EN;

/*
 * DP_MSE_BLANK_CODE enum
 */

typedef enum DP_MSE_BLANK_CODE {
DP_MSE_BLANK_CODE_SF_FILLED              = 0x00000000,
DP_MSE_BLANK_CODE_ZERO_FILLED            = 0x00000001,
} DP_MSE_BLANK_CODE;

/*
 * DP_MSE_LINK_LINE enum
 */

typedef enum DP_MSE_LINK_LINE {
DP_MSE_LINK_LINE_32_MTP_LONG             = 0x00000000,
DP_MSE_LINK_LINE_64_MTP_LONG             = 0x00000001,
DP_MSE_LINK_LINE_128_MTP_LONG            = 0x00000002,
DP_MSE_LINK_LINE_256_MTP_LONG            = 0x00000003,
} DP_MSE_LINK_LINE;

/*
 * DP_MSE_SAT_ENCRYPT0 enum
 */

typedef enum DP_MSE_SAT_ENCRYPT0 {
DP_MSE_SAT_ENCRYPT0_DISABLED             = 0x00000000,
DP_MSE_SAT_ENCRYPT0_ENABLED              = 0x00000001,
} DP_MSE_SAT_ENCRYPT0;

/*
 * DP_MSE_SAT_ENCRYPT1 enum
 */

typedef enum DP_MSE_SAT_ENCRYPT1 {
DP_MSE_SAT_ENCRYPT1_DISABLED             = 0x00000000,
DP_MSE_SAT_ENCRYPT1_ENABLED              = 0x00000001,
} DP_MSE_SAT_ENCRYPT1;

/*
 * DP_MSE_SAT_ENCRYPT2 enum
 */

typedef enum DP_MSE_SAT_ENCRYPT2 {
DP_MSE_SAT_ENCRYPT2_DISABLED             = 0x00000000,
DP_MSE_SAT_ENCRYPT2_ENABLED              = 0x00000001,
} DP_MSE_SAT_ENCRYPT2;

/*
 * DP_MSE_SAT_ENCRYPT3 enum
 */

typedef enum DP_MSE_SAT_ENCRYPT3 {
DP_MSE_SAT_ENCRYPT3_DISABLED             = 0x00000000,
DP_MSE_SAT_ENCRYPT3_ENABLED              = 0x00000001,
} DP_MSE_SAT_ENCRYPT3;

/*
 * DP_MSE_SAT_ENCRYPT4 enum
 */

typedef enum DP_MSE_SAT_ENCRYPT4 {
DP_MSE_SAT_ENCRYPT4_DISABLED             = 0x00000000,
DP_MSE_SAT_ENCRYPT4_ENABLED              = 0x00000001,
} DP_MSE_SAT_ENCRYPT4;

/*
 * DP_MSE_SAT_ENCRYPT5 enum
 */

typedef enum DP_MSE_SAT_ENCRYPT5 {
DP_MSE_SAT_ENCRYPT5_DISABLED             = 0x00000000,
DP_MSE_SAT_ENCRYPT5_ENABLED              = 0x00000001,
} DP_MSE_SAT_ENCRYPT5;

/*
 * DP_MSE_SAT_UPDATE_ACT enum
 */

typedef enum DP_MSE_SAT_UPDATE_ACT {
DP_MSE_SAT_UPDATE_NO_ACTION              = 0x00000000,
DP_MSE_SAT_UPDATE_WITH_TRIGGER           = 0x00000001,
DP_MSE_SAT_UPDATE_WITHOUT_TRIGGER        = 0x00000002,
} DP_MSE_SAT_UPDATE_ACT;

/*
 * DP_MSE_TIMESTAMP_MODE enum
 */

typedef enum DP_MSE_TIMESTAMP_MODE {
DP_MSE_TIMESTAMP_CALC_BASED_ON_LINK_RATE = 0x00000000,
DP_MSE_TIMESTAMP_CALC_BASED_ON_VC_RATE   = 0x00000001,
} DP_MSE_TIMESTAMP_MODE;

/*
 * DP_MSE_ZERO_ENCODER enum
 */

typedef enum DP_MSE_ZERO_ENCODER {
DP_MSE_NOT_ZERO_FE_ENCODER               = 0x00000000,
DP_MSE_ZERO_FE_ENCODER                   = 0x00000001,
} DP_MSE_ZERO_ENCODER;

/*
 * DP_MSO_NUM_OF_SST_LINKS enum
 */

typedef enum DP_MSO_NUM_OF_SST_LINKS {
DP_MSO_ONE_SSTLINK                       = 0x00000000,
DP_MSO_TWO_SSTLINK                       = 0x00000001,
DP_MSO_FOUR_SSTLINK                      = 0x00000002,
} DP_MSO_NUM_OF_SST_LINKS;

/*
 * DP_PIXEL_ENCODING enum
 */

typedef enum DP_PIXEL_ENCODING {
DP_PIXEL_ENCODING_RGB444                 = 0x00000000,
DP_PIXEL_ENCODING_YCBCR422               = 0x00000001,
DP_PIXEL_ENCODING_YCBCR444               = 0x00000002,
DP_PIXEL_ENCODING_RGB_WIDE_GAMUT         = 0x00000003,
DP_PIXEL_ENCODING_Y_ONLY                 = 0x00000004,
DP_PIXEL_ENCODING_YCBCR420               = 0x00000005,
} DP_PIXEL_ENCODING;

/*
 * DP_PIXEL_PER_CYCLE_PROCESSING_NUM enum
 */

typedef enum DP_PIXEL_PER_CYCLE_PROCESSING_NUM {
DP_ONE_PIXEL_PER_CYCLE                   = 0x00000000,
DP_TWO_PIXEL_PER_CYCLE                   = 0x00000001,
} DP_PIXEL_PER_CYCLE_PROCESSING_NUM;

/*
 * DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE enum
 */

typedef enum DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE {
DP_SEC_ASP_CHANNEL_COUNT_FROM_AZ         = 0x00000000,
DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE_ENABLED = 0x00000001,
} DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE;

/*
 * DP_SEC_ASP_PRIORITY enum
 */

typedef enum DP_SEC_ASP_PRIORITY {
DP_SEC_ASP_LOW_PRIORITY                  = 0x00000000,
DP_SEC_ASP_HIGH_PRIORITY                 = 0x00000001,
} DP_SEC_ASP_PRIORITY;

/*
 * DP_SEC_AUDIO_MUTE enum
 */

typedef enum DP_SEC_AUDIO_MUTE {
DP_SEC_AUDIO_MUTE_HW_CTRL                = 0x00000000,
DP_SEC_AUDIO_MUTE_SW_CTRL                = 0x00000001,
} DP_SEC_AUDIO_MUTE;

/*
 * DP_SEC_COLLISION_ACK enum
 */

typedef enum DP_SEC_COLLISION_ACK {
DP_SEC_COLLISION_ACK_NO_EFFECT           = 0x00000000,
DP_SEC_COLLISION_ACK_CLR_FLAG            = 0x00000001,
} DP_SEC_COLLISION_ACK;

/*
 * DP_SEC_GSP0_PRIORITY enum
 */

typedef enum DP_SEC_GSP0_PRIORITY {
SEC_GSP0_PRIORITY_LOW                    = 0x00000000,
SEC_GSP0_PRIORITY_HIGH                   = 0x00000001,
} DP_SEC_GSP0_PRIORITY;

/*
 * DP_SEC_GSP_SEND enum
 */

typedef enum DP_SEC_GSP_SEND {
NOT_SENT                                 = 0x00000000,
FORCE_SENT                               = 0x00000001,
} DP_SEC_GSP_SEND;

/*
 * DP_SEC_GSP_SEND_ANY_LINE enum
 */

typedef enum DP_SEC_GSP_SEND_ANY_LINE {
SEND_AT_LINK_NUMBER                      = 0x00000000,
SEND_AT_EARLIEST_TIME                    = 0x00000001,
} DP_SEC_GSP_SEND_ANY_LINE;

/*
 * DP_SEC_GSP_SEND_PPS enum
 */

typedef enum DP_SEC_GSP_SEND_PPS {
SEND_NORMAL_PACKET                       = 0x00000000,
SEND_PPS_PACKET                          = 0x00000001,
} DP_SEC_GSP_SEND_PPS;

/*
 * DP_SEC_LINE_REFERENCE enum
 */

typedef enum DP_SEC_LINE_REFERENCE {
REFER_TO_DP_SOF                          = 0x00000000,
REFER_TO_OTG_SOF                         = 0x00000001,
} DP_SEC_LINE_REFERENCE;

/*
 * DP_SEC_TIMESTAMP_MODE enum
 */

typedef enum DP_SEC_TIMESTAMP_MODE {
DP_SEC_TIMESTAMP_PROGRAMMABLE_MODE       = 0x00000000,
DP_SEC_TIMESTAMP_AUTO_CALC_MODE          = 0x00000001,
} DP_SEC_TIMESTAMP_MODE;

/*
 * DP_STEER_OVERFLOW_ACK enum
 */

typedef enum DP_STEER_OVERFLOW_ACK {
DP_STEER_OVERFLOW_ACK_NO_EFFECT          = 0x00000000,
DP_STEER_OVERFLOW_ACK_CLR_INTERRUPT      = 0x00000001,
} DP_STEER_OVERFLOW_ACK;

/*
 * DP_STEER_OVERFLOW_MASK enum
 */

typedef enum DP_STEER_OVERFLOW_MASK {
DP_STEER_OVERFLOW_MASKED                 = 0x00000000,
DP_STEER_OVERFLOW_UNMASK                 = 0x00000001,
} DP_STEER_OVERFLOW_MASK;

/*
 * DP_SYNC_POLARITY enum
 */

typedef enum DP_SYNC_POLARITY {
DP_SYNC_POLARITY_ACTIVE_HIGH             = 0x00000000,
DP_SYNC_POLARITY_ACTIVE_LOW              = 0x00000001,
} DP_SYNC_POLARITY;

/*
 * DP_TU_OVERFLOW_ACK enum
 */

typedef enum DP_TU_OVERFLOW_ACK {
DP_TU_OVERFLOW_ACK_NO_EFFECT             = 0x00000000,
DP_TU_OVERFLOW_ACK_CLR_INTERRUPT         = 0x00000001,
} DP_TU_OVERFLOW_ACK;

/*
 * DP_UDI_LANES enum
 */

typedef enum DP_UDI_LANES {
DP_UDI_1_LANE                            = 0x00000000,
DP_UDI_2_LANES                           = 0x00000001,
DP_UDI_LANES_RESERVED                    = 0x00000002,
DP_UDI_4_LANES                           = 0x00000003,
} DP_UDI_LANES;

/*
 * DP_VID_ENHANCED_FRAME_MODE enum
 */

typedef enum DP_VID_ENHANCED_FRAME_MODE {
VID_NORMAL_FRAME_MODE                    = 0x00000000,
VID_ENHANCED_MODE                        = 0x00000001,
} DP_VID_ENHANCED_FRAME_MODE;

/*
 * DP_VID_M_N_DOUBLE_BUFFER_MODE enum
 */

typedef enum DP_VID_M_N_DOUBLE_BUFFER_MODE {
DP_VID_M_N_DOUBLE_BUFFER_AFTER_VID_M_UPDATE = 0x00000000,
DP_VID_M_N_DOUBLE_BUFFER_AT_FRAME_START  = 0x00000001,
} DP_VID_M_N_DOUBLE_BUFFER_MODE;

/*
 * DP_VID_M_N_GEN_EN enum
 */

typedef enum DP_VID_M_N_GEN_EN {
DP_VID_M_N_PROGRAMMED_VIA_REG            = 0x00000000,
DP_VID_M_N_CALC_AUTO                     = 0x00000001,
} DP_VID_M_N_GEN_EN;

/*
 * DP_VID_N_MUL enum
 */

typedef enum DP_VID_N_MUL {
DP_VID_M_1X_INPUT_PIXEL_RATE             = 0x00000000,
DP_VID_M_2X_INPUT_PIXEL_RATE             = 0x00000001,
DP_VID_M_4X_INPUT_PIXEL_RATE             = 0x00000002,
DP_VID_M_8X_INPUT_PIXEL_RATE             = 0x00000003,
} DP_VID_N_MUL;

/*
 * DP_VID_STREAM_DISABLE_ACK enum
 */

typedef enum DP_VID_STREAM_DISABLE_ACK {
ID_STREAM_DISABLE_NO_ACK                 = 0x00000000,
ID_STREAM_DISABLE_ACKED                  = 0x00000001,
} DP_VID_STREAM_DISABLE_ACK;

/*
 * DP_VID_STREAM_DISABLE_MASK enum
 */

typedef enum DP_VID_STREAM_DISABLE_MASK {
VID_STREAM_DISABLE_MASKED                = 0x00000000,
VID_STREAM_DISABLE_UNMASK                = 0x00000001,
} DP_VID_STREAM_DISABLE_MASK;

/*
 * DP_VID_STREAM_DIS_DEFER enum
 */

typedef enum DP_VID_STREAM_DIS_DEFER {
DP_VID_STREAM_DIS_NO_DEFER               = 0x00000000,
DP_VID_STREAM_DIS_DEFER_TO_HBLANK        = 0x00000001,
DP_VID_STREAM_DIS_DEFER_TO_VBLANK        = 0x00000002,
} DP_VID_STREAM_DIS_DEFER;

/*
 * DP_VID_VBID_FIELD_POL enum
 */

typedef enum DP_VID_VBID_FIELD_POL {
DP_VID_VBID_FIELD_POL_NORMAL             = 0x00000000,
DP_VID_VBID_FIELD_POL_INV                = 0x00000001,
} DP_VID_VBID_FIELD_POL;

/*
 * FEC_ACTIVE_STATUS enum
 */

typedef enum FEC_ACTIVE_STATUS {
DPHY_FEC_NOT_ACTIVE                      = 0x00000000,
DPHY_FEC_ACTIVE                          = 0x00000001,
} FEC_ACTIVE_STATUS;

/*******************************************************
 * DIG Enums
 *******************************************************/

/*
 * DIG_BE_CNTL_HPD_SELECT enum
 */

typedef enum DIG_BE_CNTL_HPD_SELECT {
DIG_BE_CNTL_HPD1                         = 0x00000000,
DIG_BE_CNTL_HPD2                         = 0x00000001,
DIG_BE_CNTL_HPD3                         = 0x00000002,
DIG_BE_CNTL_HPD4                         = 0x00000003,
DIG_BE_CNTL_HPD5                         = 0x00000004,
DIG_BE_CNTL_NO_HPD                       = 0x00000005,
} DIG_BE_CNTL_HPD_SELECT;

/*
 * DIG_BE_CNTL_MODE enum
 */

typedef enum DIG_BE_CNTL_MODE {
DIG_BE_DP_SST_MODE                       = 0x00000000,
DIG_BE_RESERVED1                         = 0x00000001,
DIG_BE_TMDS_DVI_MODE                     = 0x00000002,
DIG_BE_TMDS_HDMI_MODE                    = 0x00000003,
DIG_BE_RESERVED4                         = 0x00000004,
DIG_BE_DP_MST_MODE                       = 0x00000005,
DIG_BE_RESERVED2                         = 0x00000006,
DIG_BE_RESERVED3                         = 0x00000007,
} DIG_BE_CNTL_MODE;

/*
 * DIG_DIGITAL_BYPASS_ENABLE enum
 */

typedef enum DIG_DIGITAL_BYPASS_ENABLE {
DIG_DIGITAL_BYPASS_OFF                   = 0x00000000,
DIG_DIGITAL_BYPASS_ON                    = 0x00000001,
} DIG_DIGITAL_BYPASS_ENABLE;

/*
 * DIG_DIGITAL_BYPASS_SEL enum
 */

typedef enum DIG_DIGITAL_BYPASS_SEL {
DIG_DIGITAL_BYPASS_SEL_BYPASS            = 0x00000000,
DIG_DIGITAL_BYPASS_SEL_36BPP             = 0x00000001,
DIG_DIGITAL_BYPASS_SEL_48BPP_LSB         = 0x00000002,
DIG_DIGITAL_BYPASS_SEL_48BPP_MSB         = 0x00000003,
DIG_DIGITAL_BYPASS_SEL_10BPP_LSB         = 0x00000004,
DIG_DIGITAL_BYPASS_SEL_12BPC_LSB         = 0x00000005,
DIG_DIGITAL_BYPASS_SEL_ALPHA             = 0x00000006,
} DIG_DIGITAL_BYPASS_SEL;

/*
 * DIG_FE_CNTL_SOURCE_SELECT enum
 */

typedef enum DIG_FE_CNTL_SOURCE_SELECT {
DIG_FE_SOURCE_FROM_OTG0                  = 0x00000000,
DIG_FE_SOURCE_FROM_OTG1                  = 0x00000001,
DIG_FE_SOURCE_FROM_OTG2                  = 0x00000002,
DIG_FE_SOURCE_FROM_OTG3                  = 0x00000003,
DIG_FE_SOURCE_RESERVED                   = 0x00000004,
} DIG_FE_CNTL_SOURCE_SELECT;

/*
 * DIG_FE_CNTL_STEREOSYNC_SELECT enum
 */

typedef enum DIG_FE_CNTL_STEREOSYNC_SELECT {
DIG_FE_STEREOSYNC_FROM_OTG0              = 0x00000000,
DIG_FE_STEREOSYNC_FROM_OTG1              = 0x00000001,
DIG_FE_STEREOSYNC_FROM_OTG2              = 0x00000002,
DIG_FE_STEREOSYNC_FROM_OTG3              = 0x00000003,
DIG_FE_STEREOSYNC_RESERVED               = 0x00000004,
} DIG_FE_CNTL_STEREOSYNC_SELECT;

/*
 * DIG_FIFO_CTRL_FORCE_RECOMP_MINMAX enum
 */

typedef enum DIG_FIFO_CTRL_FORCE_RECOMP_MINMAX {
DIG_FIFO_NOT_FORCE_RECOMP_MINMAX         = 0x00000000,
DIG_FIFO_FORCE_RECOMP_MINMAX             = 0x00000001,
} DIG_FIFO_CTRL_FORCE_RECOMP_MINMAX;

/*
 * DIG_FIFO_CTRL_USE_OVERWRITE_LEVEL enum
 */

typedef enum DIG_FIFO_CTRL_USE_OVERWRITE_LEVEL {
DIG_FIFO_USE_OVERWRITE_LEVEL             = 0x00000000,
DIG_FIFO_USE_CAL_AVERAGE_LEVEL           = 0x00000001,
} DIG_FIFO_CTRL_USE_OVERWRITE_LEVEL;

/*
 * DIG_FIFO_FORCE_RECAL_AVERAGE enum
 */

typedef enum DIG_FIFO_FORCE_RECAL_AVERAGE {
DIG_FIFO_NOT_FORCE_RECAL_AVERAGE         = 0x00000000,
DIG_FIFO_FORCE_RECAL_AVERAGE_LEVEL       = 0x00000001,
} DIG_FIFO_FORCE_RECAL_AVERAGE;

/*
 * DIG_FIFO_OUTPUT_PROCESSING_MODE enum
 */

typedef enum DIG_FIFO_OUTPUT_PROCESSING_MODE {
DIG_FIFO_1_PIX_PER_CYCLE                 = 0x00000000,
DIG_FIFO_2_PIX_PER_CYCLE                 = 0x00000001,
} DIG_FIFO_OUTPUT_PROCESSING_MODE;

/*
 * DIG_FIFO_OVERFLOW_UNDERFLOW_ERROR enum
 */

typedef enum DIG_FIFO_OVERFLOW_UNDERFLOW_ERROR {
DIG_FIFO_NO_ERROR_OCCURRED               = 0x00000000,
DIG_FIFO_UNDERFLOW_OCCURRED              = 0x00000001,
DIG_FIFO_OVERFLOW_OCCURRED               = 0x00000002,
} DIG_FIFO_OVERFLOW_UNDERFLOW_ERROR;

/*
 * DIG_FIFO_READ_CLOCK_SRC enum
 */

typedef enum DIG_FIFO_READ_CLOCK_SRC {
DIG_FIFO_READ_CLOCK_SRC_FROM_DCCG        = 0x00000000,
DIG_FIFO_READ_CLOCK_SRC_FROM_DISPLAY_PIPE = 0x00000001,
} DIG_FIFO_READ_CLOCK_SRC;

/*
 * DIG_INPUT_PIXEL_SEL enum
 */

typedef enum DIG_INPUT_PIXEL_SEL {
DIG_ALL_PIXEL                            = 0x00000000,
DIG_EVEN_PIXEL_ONLY                      = 0x00000001,
DIG_ODD_PIXEL_ONLY                       = 0x00000002,
} DIG_INPUT_PIXEL_SEL;

/*
 * DIG_OUTPUT_CRC_CNTL_LINK_SEL enum
 */

typedef enum DIG_OUTPUT_CRC_CNTL_LINK_SEL {
DIG_OUTPUT_CRC_ON_LINK0                  = 0x00000000,
DIG_OUTPUT_CRC_ON_LINK1                  = 0x00000001,
} DIG_OUTPUT_CRC_CNTL_LINK_SEL;

/*
 * DIG_OUTPUT_CRC_DATA_SEL enum
 */

typedef enum DIG_OUTPUT_CRC_DATA_SEL {
DIG_OUTPUT_CRC_FOR_FULLFRAME             = 0x00000000,
DIG_OUTPUT_CRC_FOR_ACTIVEONLY            = 0x00000001,
DIG_OUTPUT_CRC_FOR_VBI                   = 0x00000002,
DIG_OUTPUT_CRC_FOR_AUDIO                 = 0x00000003,
} DIG_OUTPUT_CRC_DATA_SEL;

/*
 * DIG_RANDOM_PATTERN_SEED_RAN_PAT enum
 */

typedef enum DIG_RANDOM_PATTERN_SEED_RAN_PAT {
DIG_RANDOM_PATTERN_SEED_RAN_PAT_ALL_PIXELS = 0x00000000,
DIG_RANDOM_PATTERN_SEED_RAN_PAT_DE_HIGH  = 0x00000001,
} DIG_RANDOM_PATTERN_SEED_RAN_PAT;

/*
 * DIG_SL_PIXEL_GROUPING enum
 */

typedef enum DIG_SL_PIXEL_GROUPING {
DIG_SINGLETON_PIXELS                     = 0x00000000,
DIG_PAIR_PIXELS                          = 0x00000001,
} DIG_SL_PIXEL_GROUPING;

/*
 * DIG_TEST_PATTERN_EXTERNAL_RESET_EN enum
 */

typedef enum DIG_TEST_PATTERN_EXTERNAL_RESET_EN {
DIG_TEST_PATTERN_EXTERNAL_RESET_ENABLE   = 0x00000000,
DIG_TEST_PATTERN_EXTERNAL_RESET_BY_EXT_SIG = 0x00000001,
} DIG_TEST_PATTERN_EXTERNAL_RESET_EN;

/*
 * DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL enum
 */

typedef enum DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL {
DIG_10BIT_TEST_PATTERN                   = 0x00000000,
DIG_ALTERNATING_TEST_PATTERN             = 0x00000001,
} DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL;

/*
 * DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN enum
 */

typedef enum DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN {
DIG_TEST_PATTERN_NORMAL                  = 0x00000000,
DIG_TEST_PATTERN_RANDOM                  = 0x00000001,
} DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN;

/*
 * DIG_TEST_PATTERN_RANDOM_PATTERN_RESET enum
 */

typedef enum DIG_TEST_PATTERN_RANDOM_PATTERN_RESET {
DIG_RANDOM_PATTERN_ENABLED               = 0x00000000,
DIG_RANDOM_PATTERN_RESETED               = 0x00000001,
} DIG_TEST_PATTERN_RANDOM_PATTERN_RESET;

/*
 * DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN enum
 */

typedef enum DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN {
DIG_IN_NORMAL_OPERATION                  = 0x00000000,
DIG_IN_DEBUG_MODE                        = 0x00000001,
} DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN;

/*
 * DOLBY_VISION_ENABLE enum
 */

typedef enum DOLBY_VISION_ENABLE {
DOLBY_VISION_DISABLED                    = 0x00000000,
DOLBY_VISION_ENABLED                     = 0x00000001,
} DOLBY_VISION_ENABLE;

/*
 * HDMI_ACP_SEND enum
 */

typedef enum HDMI_ACP_SEND {
HDMI_ACP_NOT_SEND                        = 0x00000000,
HDMI_ACP_PKT_SEND                        = 0x00000001,
} HDMI_ACP_SEND;

/*
 * HDMI_ACR_AUDIO_PRIORITY enum
 */

typedef enum HDMI_ACR_AUDIO_PRIORITY {
HDMI_ACR_PKT_HIGH_PRIORITY_THAN_AUDIO_SAMPLE = 0x00000000,
HDMI_AUDIO_SAMPLE_HIGH_PRIORITY_THAN_ACR_PKT = 0x00000001,
} HDMI_ACR_AUDIO_PRIORITY;

/*
 * HDMI_ACR_CONT enum
 */

typedef enum HDMI_ACR_CONT {
HDMI_ACR_CONT_DISABLE                    = 0x00000000,
HDMI_ACR_CONT_ENABLE                     = 0x00000001,
} HDMI_ACR_CONT;

/*
 * HDMI_ACR_N_MULTIPLE enum
 */

typedef enum HDMI_ACR_N_MULTIPLE {
HDMI_ACR_0_MULTIPLE_RESERVED             = 0x00000000,
HDMI_ACR_1_MULTIPLE                      = 0x00000001,
HDMI_ACR_2_MULTIPLE                      = 0x00000002,
HDMI_ACR_3_MULTIPLE_RESERVED             = 0x00000003,
HDMI_ACR_4_MULTIPLE                      = 0x00000004,
HDMI_ACR_5_MULTIPLE_RESERVED             = 0x00000005,
HDMI_ACR_6_MULTIPLE_RESERVED             = 0x00000006,
HDMI_ACR_7_MULTIPLE_RESERVED             = 0x00000007,
} HDMI_ACR_N_MULTIPLE;

/*
 * HDMI_ACR_SELECT enum
 */

typedef enum HDMI_ACR_SELECT {
HDMI_ACR_SELECT_HW                       = 0x00000000,
HDMI_ACR_SELECT_32K                      = 0x00000001,
HDMI_ACR_SELECT_44K                      = 0x00000002,
HDMI_ACR_SELECT_48K                      = 0x00000003,
} HDMI_ACR_SELECT;

/*
 * HDMI_ACR_SEND enum
 */

typedef enum HDMI_ACR_SEND {
HDMI_ACR_NOT_SEND                        = 0x00000000,
HDMI_ACR_PKT_SEND                        = 0x00000001,
} HDMI_ACR_SEND;

/*
 * HDMI_ACR_SOURCE enum
 */

typedef enum HDMI_ACR_SOURCE {
HDMI_ACR_SOURCE_HW                       = 0x00000000,
HDMI_ACR_SOURCE_SW                       = 0x00000001,
} HDMI_ACR_SOURCE;

/*
 * HDMI_AUDIO_DELAY_EN enum
 */

typedef enum HDMI_AUDIO_DELAY_EN {
HDMI_AUDIO_DELAY_DISABLE                 = 0x00000000,
HDMI_AUDIO_DELAY_58CLK                   = 0x00000001,
HDMI_AUDIO_DELAY_56CLK                   = 0x00000002,
HDMI_AUDIO_DELAY_RESERVED                = 0x00000003,
} HDMI_AUDIO_DELAY_EN;

/*
 * HDMI_AUDIO_INFO_CONT enum
 */

typedef enum HDMI_AUDIO_INFO_CONT {
HDMI_AUDIO_INFO_CONT_DISABLE             = 0x00000000,
HDMI_AUDIO_INFO_CONT_ENABLE              = 0x00000001,
} HDMI_AUDIO_INFO_CONT;

/*
 * HDMI_AUDIO_INFO_SEND enum
 */

typedef enum HDMI_AUDIO_INFO_SEND {
HDMI_AUDIO_INFO_NOT_SEND                 = 0x00000000,
HDMI_AUDIO_INFO_PKT_SEND                 = 0x00000001,
} HDMI_AUDIO_INFO_SEND;

/*
 * HDMI_CLOCK_CHANNEL_RATE enum
 */

typedef enum HDMI_CLOCK_CHANNEL_RATE {
HDMI_CLOCK_CHANNEL_FREQ_EQUAL_TO_CHAR_RATE = 0x00000000,
HDMI_CLOCK_CHANNEL_FREQ_QUARTER_TO_CHAR_RATE = 0x00000001,
} HDMI_CLOCK_CHANNEL_RATE;

/*
 * HDMI_DATA_SCRAMBLE_EN enum
 */

typedef enum HDMI_DATA_SCRAMBLE_EN {
HDMI_DATA_SCRAMBLE_DISABLE               = 0x00000000,
HDMI_DATA_SCRAMBLE_ENABLE                = 0x00000001,
} HDMI_DATA_SCRAMBLE_EN;

/*
 * HDMI_DEEP_COLOR_DEPTH enum
 */

typedef enum HDMI_DEEP_COLOR_DEPTH {
HDMI_DEEP_COLOR_DEPTH_24BPP              = 0x00000000,
HDMI_DEEP_COLOR_DEPTH_30BPP              = 0x00000001,
HDMI_DEEP_COLOR_DEPTH_36BPP              = 0x00000002,
HDMI_DEEP_COLOR_DEPTH_48BPP              = 0x00000003,
} HDMI_DEEP_COLOR_DEPTH;

/*
 * HDMI_DEFAULT_PAHSE enum
 */

typedef enum HDMI_DEFAULT_PAHSE {
HDMI_DEFAULT_PHASE_IS_0                  = 0x00000000,
HDMI_DEFAULT_PHASE_IS_1                  = 0x00000001,
} HDMI_DEFAULT_PAHSE;

/*
 * HDMI_ERROR_ACK enum
 */

typedef enum HDMI_ERROR_ACK {
HDMI_ERROR_ACK_INT                       = 0x00000000,
HDMI_ERROR_NOT_ACK                       = 0x00000001,
} HDMI_ERROR_ACK;

/*
 * HDMI_ERROR_MASK enum
 */

typedef enum HDMI_ERROR_MASK {
HDMI_ERROR_MASK_INT                      = 0x00000000,
HDMI_ERROR_NOT_MASK                      = 0x00000001,
} HDMI_ERROR_MASK;

/*
 * HDMI_GC_AVMUTE enum
 */

typedef enum HDMI_GC_AVMUTE {
HDMI_GC_AVMUTE_SET                       = 0x00000000,
HDMI_GC_AVMUTE_UNSET                     = 0x00000001,
} HDMI_GC_AVMUTE;

/*
 * HDMI_GC_AVMUTE_CONT enum
 */

typedef enum HDMI_GC_AVMUTE_CONT {
HDMI_GC_AVMUTE_CONT_DISABLE              = 0x00000000,
HDMI_GC_AVMUTE_CONT_ENABLE               = 0x00000001,
} HDMI_GC_AVMUTE_CONT;

/*
 * HDMI_GC_CONT enum
 */

typedef enum HDMI_GC_CONT {
HDMI_GC_CONT_DISABLE                     = 0x00000000,
HDMI_GC_CONT_ENABLE                      = 0x00000001,
} HDMI_GC_CONT;

/*
 * HDMI_GC_SEND enum
 */

typedef enum HDMI_GC_SEND {
HDMI_GC_NOT_SEND                         = 0x00000000,
HDMI_GC_PKT_SEND                         = 0x00000001,
} HDMI_GC_SEND;

/*
 * HDMI_GENERIC_CONT enum
 */

typedef enum HDMI_GENERIC_CONT {
HDMI_GENERIC_CONT_DISABLE                = 0x00000000,
HDMI_GENERIC_CONT_ENABLE                 = 0x00000001,
} HDMI_GENERIC_CONT;

/*
 * HDMI_GENERIC_SEND enum
 */

typedef enum HDMI_GENERIC_SEND {
HDMI_GENERIC_NOT_SEND                    = 0x00000000,
HDMI_GENERIC_PKT_SEND                    = 0x00000001,
} HDMI_GENERIC_SEND;

/*
 * HDMI_ISRC_CONT enum
 */

typedef enum HDMI_ISRC_CONT {
HDMI_ISRC_CONT_DISABLE                   = 0x00000000,
HDMI_ISRC_CONT_ENABLE                    = 0x00000001,
} HDMI_ISRC_CONT;

/*
 * HDMI_ISRC_SEND enum
 */

typedef enum HDMI_ISRC_SEND {
HDMI_ISRC_NOT_SEND                       = 0x00000000,
HDMI_ISRC_PKT_SEND                       = 0x00000001,
} HDMI_ISRC_SEND;

/*
 * HDMI_KEEPOUT_MODE enum
 */

typedef enum HDMI_KEEPOUT_MODE {
HDMI_KEEPOUT_0_650PIX_AFTER_VSYNC        = 0x00000000,
HDMI_KEEPOUT_509_650PIX_AFTER_VSYNC      = 0x00000001,
} HDMI_KEEPOUT_MODE;

/*
 * HDMI_METADATA_ENABLE enum
 */

typedef enum HDMI_METADATA_ENABLE {
HDMI_METADATA_NOT_SEND                   = 0x00000000,
HDMI_METADATA_PKT_SEND                   = 0x00000001,
} HDMI_METADATA_ENABLE;

/*
 * HDMI_MPEG_INFO_CONT enum
 */

typedef enum HDMI_MPEG_INFO_CONT {
HDMI_MPEG_INFO_CONT_DISABLE              = 0x00000000,
HDMI_MPEG_INFO_CONT_ENABLE               = 0x00000001,
} HDMI_MPEG_INFO_CONT;

/*
 * HDMI_MPEG_INFO_SEND enum
 */

typedef enum HDMI_MPEG_INFO_SEND {
HDMI_MPEG_INFO_NOT_SEND                  = 0x00000000,
HDMI_MPEG_INFO_PKT_SEND                  = 0x00000001,
} HDMI_MPEG_INFO_SEND;

/*
 * HDMI_NO_EXTRA_NULL_PACKET_FILLED enum
 */

typedef enum HDMI_NO_EXTRA_NULL_PACKET_FILLED {
HDMI_EXTRA_NULL_PACKET_FILLED_ENABLE     = 0x00000000,
HDMI_EXTRA_NULL_PACKET_FILLED_DISABLE    = 0x00000001,
} HDMI_NO_EXTRA_NULL_PACKET_FILLED;

/*
 * HDMI_NULL_SEND enum
 */

typedef enum HDMI_NULL_SEND {
HDMI_NULL_NOT_SEND                       = 0x00000000,
HDMI_NULL_PKT_SEND                       = 0x00000001,
} HDMI_NULL_SEND;

/*
 * HDMI_PACKET_GEN_VERSION enum
 */

typedef enum HDMI_PACKET_GEN_VERSION {
HDMI_PACKET_GEN_VERSION_OLD              = 0x00000000,
HDMI_PACKET_GEN_VERSION_NEW              = 0x00000001,
} HDMI_PACKET_GEN_VERSION;

/*
 * HDMI_PACKET_LINE_REFERENCE enum
 */

typedef enum HDMI_PACKET_LINE_REFERENCE {
HDMI_PKT_LINE_REF_VSYNC                  = 0x00000000,
HDMI_PKT_LINE_REF_OTGSOF                 = 0x00000001,
} HDMI_PACKET_LINE_REFERENCE;

/*
 * HDMI_PACKING_PHASE_OVERRIDE enum
 */

typedef enum HDMI_PACKING_PHASE_OVERRIDE {
HDMI_PACKING_PHASE_SET_BY_HW             = 0x00000000,
HDMI_PACKING_PHASE_SET_BY_SW             = 0x00000001,
} HDMI_PACKING_PHASE_OVERRIDE;

/*
 * LVTMA_RANDOM_PATTERN_SEED_RAN_PAT enum
 */

typedef enum LVTMA_RANDOM_PATTERN_SEED_RAN_PAT {
LVTMA_RANDOM_PATTERN_SEED_ALL_PIXELS     = 0x00000000,
LVTMA_RANDOM_PATTERN_SEED_ONLY_DE_HIGH   = 0x00000001,
} LVTMA_RANDOM_PATTERN_SEED_RAN_PAT;

/*
 * TMDS_COLOR_FORMAT enum
 */

typedef enum TMDS_COLOR_FORMAT {
TMDS_COLOR_FORMAT__24BPP__TWIN30BPP_MSB__DUAL48BPP = 0x00000000,
TMDS_COLOR_FORMAT_TWIN30BPP_LSB          = 0x00000001,
TMDS_COLOR_FORMAT_DUAL30BPP              = 0x00000002,
TMDS_COLOR_FORMAT_RESERVED               = 0x00000003,
} TMDS_COLOR_FORMAT;

/*
 * TMDS_CTL0_DATA_INVERT enum
 */

typedef enum TMDS_CTL0_DATA_INVERT {
TMDS_CTL0_DATA_NORMAL                    = 0x00000000,
TMDS_CTL0_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL0_DATA_INVERT;

/*
 * TMDS_CTL0_DATA_MODULATION enum
 */

typedef enum TMDS_CTL0_DATA_MODULATION {
TMDS_CTL0_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL0_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL0_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL0_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL0_DATA_MODULATION;

/*
 * TMDS_CTL0_DATA_SEL enum
 */

typedef enum TMDS_CTL0_DATA_SEL {
TMDS_CTL0_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL0_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL0_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL0_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL0_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL0_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL0_DATA_SEL8_RANDOM_DATA          = 0x00000006,
TMDS_CTL0_DATA_SEL9_SEL15_RANDOM_DATA    = 0x00000007,
} TMDS_CTL0_DATA_SEL;

/*
 * TMDS_CTL0_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL0_PATTERN_OUT_EN {
TMDS_CTL0_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL0_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL0_PATTERN_OUT_EN;

/*
 * TMDS_CTL1_DATA_INVERT enum
 */

typedef enum TMDS_CTL1_DATA_INVERT {
TMDS_CTL1_DATA_NORMAL                    = 0x00000000,
TMDS_CTL1_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL1_DATA_INVERT;

/*
 * TMDS_CTL1_DATA_MODULATION enum
 */

typedef enum TMDS_CTL1_DATA_MODULATION {
TMDS_CTL1_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL1_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL1_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL1_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL1_DATA_MODULATION;

/*
 * TMDS_CTL1_DATA_SEL enum
 */

typedef enum TMDS_CTL1_DATA_SEL {
TMDS_CTL1_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL1_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL1_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL1_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL1_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL1_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL1_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL1_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL1_DATA_SEL;

/*
 * TMDS_CTL1_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL1_PATTERN_OUT_EN {
TMDS_CTL1_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL1_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL1_PATTERN_OUT_EN;

/*
 * TMDS_CTL2_DATA_INVERT enum
 */

typedef enum TMDS_CTL2_DATA_INVERT {
TMDS_CTL2_DATA_NORMAL                    = 0x00000000,
TMDS_CTL2_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL2_DATA_INVERT;

/*
 * TMDS_CTL2_DATA_MODULATION enum
 */

typedef enum TMDS_CTL2_DATA_MODULATION {
TMDS_CTL2_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL2_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL2_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL2_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL2_DATA_MODULATION;

/*
 * TMDS_CTL2_DATA_SEL enum
 */

typedef enum TMDS_CTL2_DATA_SEL {
TMDS_CTL2_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL2_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL2_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL2_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL2_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL2_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL2_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL2_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL2_DATA_SEL;

/*
 * TMDS_CTL2_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL2_PATTERN_OUT_EN {
TMDS_CTL2_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL2_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL2_PATTERN_OUT_EN;

/*
 * TMDS_CTL3_DATA_INVERT enum
 */

typedef enum TMDS_CTL3_DATA_INVERT {
TMDS_CTL3_DATA_NORMAL                    = 0x00000000,
TMDS_CTL3_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL3_DATA_INVERT;

/*
 * TMDS_CTL3_DATA_MODULATION enum
 */

typedef enum TMDS_CTL3_DATA_MODULATION {
TMDS_CTL3_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL3_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL3_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL3_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL3_DATA_MODULATION;

/*
 * TMDS_CTL3_DATA_SEL enum
 */

typedef enum TMDS_CTL3_DATA_SEL {
TMDS_CTL3_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL3_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL3_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL3_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL3_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL3_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL3_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL3_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL3_DATA_SEL;

/*
 * TMDS_CTL3_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL3_PATTERN_OUT_EN {
TMDS_CTL3_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL3_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL3_PATTERN_OUT_EN;

/*
 * TMDS_DATA_SYNCHRONIZATION_DSINTSEL enum
 */

typedef enum TMDS_DATA_SYNCHRONIZATION_DSINTSEL {
TMDS_DATA_SYNCHRONIZATION_DSINTSEL_PCLK_TMDS = 0x00000000,
TMDS_DATA_SYNCHRONIZATION_DSINTSEL_TMDS_PLL = 0x00000001,
} TMDS_DATA_SYNCHRONIZATION_DSINTSEL;

/*
 * TMDS_PIXEL_ENCODING enum
 */

typedef enum TMDS_PIXEL_ENCODING {
TMDS_PIXEL_ENCODING_444_OR_420           = 0x00000000,
TMDS_PIXEL_ENCODING_422                  = 0x00000001,
} TMDS_PIXEL_ENCODING;

/*
 * TMDS_REG_TEST_OUTPUTA_CNTLA enum
 */

typedef enum TMDS_REG_TEST_OUTPUTA_CNTLA {
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA0      = 0x00000000,
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA1      = 0x00000001,
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA2      = 0x00000002,
TMDS_REG_TEST_OUTPUTA_CNTLA_NA           = 0x00000003,
} TMDS_REG_TEST_OUTPUTA_CNTLA;

/*
 * TMDS_REG_TEST_OUTPUTB_CNTLB enum
 */

typedef enum TMDS_REG_TEST_OUTPUTB_CNTLB {
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB0      = 0x00000000,
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB1      = 0x00000001,
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB2      = 0x00000002,
TMDS_REG_TEST_OUTPUTB_CNTLB_NA           = 0x00000003,
} TMDS_REG_TEST_OUTPUTB_CNTLB;

/*
 * TMDS_STEREOSYNC_CTL_SEL_REG enum
 */

typedef enum TMDS_STEREOSYNC_CTL_SEL_REG {
TMDS_STEREOSYNC_CTL0                     = 0x00000000,
TMDS_STEREOSYNC_CTL1                     = 0x00000001,
TMDS_STEREOSYNC_CTL2                     = 0x00000002,
TMDS_STEREOSYNC_CTL3                     = 0x00000003,
} TMDS_STEREOSYNC_CTL_SEL_REG;

/*
 * TMDS_SYNC_PHASE enum
 */

typedef enum TMDS_SYNC_PHASE {
TMDS_NOT_SYNC_PHASE_ON_FRAME_START       = 0x00000000,
TMDS_SYNC_PHASE_ON_FRAME_START           = 0x00000001,
} TMDS_SYNC_PHASE;

/*
 * TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA {
TMDS_TRANSMITTER_BYPASS_PLLA_COHERENT    = 0x00000000,
TMDS_TRANSMITTER_BYPASS_PLLA_INCOHERENT  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA;

/*
 * TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB {
TMDS_TRANSMITTER_BYPASS_PLLB_COHERENT    = 0x00000000,
TMDS_TRANSMITTER_BYPASS_PLLB_INCOHERENT  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB;

/*
 * TMDS_TRANSMITTER_CONTROL_IDSCKSELA enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_IDSCKSELA {
TMDS_TRANSMITTER_IDSCKSELA_USE_IPIXCLK   = 0x00000000,
TMDS_TRANSMITTER_IDSCKSELA_USE_IDCLK     = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_IDSCKSELA;

/*
 * TMDS_TRANSMITTER_CONTROL_IDSCKSELB enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_IDSCKSELB {
TMDS_TRANSMITTER_IDSCKSELB_USE_IPIXCLK   = 0x00000000,
TMDS_TRANSMITTER_IDSCKSELB_USE_IDCLK     = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_IDSCKSELB;

/*
 * TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN {
TMDS_TRANSMITTER_PLLSEL_BY_HW            = 0x00000000,
TMDS_TRANSMITTER_PLLSEL_OVERWRITE_BY_SW  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK {
TMDS_TRANSMITTER_HPD_NOT_OVERRIDE_PLL_ENABLE = 0x00000000,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE_ON_DISCON = 0x00000001,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE_ON_CON = 0x00000002,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE = 0x00000003,
} TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN {
TMDS_TRANSMITTER_PLL_PWRUP_SEQ_DISABLE   = 0x00000000,
TMDS_TRANSMITTER_PLL_PWRUP_SEQ_ENABLE    = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK {
TMDS_TRANSMITTER_PLL_NOT_RST_ON_HPD      = 0x00000000,
TMDS_TRANSMITTER_PLL_RST_ON_HPD          = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK;

/*
 * TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS {
TMDS_TRANSMITTER_TDCLK_FROM_TMDS_TDCLK   = 0x00000000,
TMDS_TRANSMITTER_TDCLK_FROM_PADS         = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS;

/*
 * TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS {
TMDS_TRANSMITTER_TMCLK_FROM_TMDS_TMCLK   = 0x00000000,
TMDS_TRANSMITTER_TMCLK_FROM_PADS         = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS;

/*
 * TMDS_TRANSMITTER_ENABLE_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_HPD_MASK {
TMDS_TRANSMITTER_HPD_MASK_NOT_OVERRIDE   = 0x00000000,
TMDS_TRANSMITTER_HPD_MASK_OVERRIDE       = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_HPD_MASK;

/*
 * TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK {
TMDS_TRANSMITTER_LNKCEN_HPD_MASK_NOT_OVERRIDE = 0x00000000,
TMDS_TRANSMITTER_LNKCEN_HPD_MASK_OVERRIDE = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK;

/*
 * TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK {
TMDS_TRANSMITTER_LNKDEN_HPD_MASK_NOT_OVERRIDE = 0x00000000,
TMDS_TRANSMITTER_LNKDEN_HPD_MASK_OVERRIDE = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK;

/*******************************************************
 * DP_AUX Enums
 *******************************************************/

/*
 * DP_AUX_ARB_CONTROL_ARB_PRIORITY enum
 */

typedef enum DP_AUX_ARB_CONTROL_ARB_PRIORITY {
DP_AUX_ARB_CONTROL_ARB_PRIORITY__GTC_LS_SW = 0x00000000,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__LS_GTC_SW = 0x00000001,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__SW_LS_GTC = 0x00000002,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__SW_GTC_LS = 0x00000003,
} DP_AUX_ARB_CONTROL_ARB_PRIORITY;

/*
 * DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG enum
 */

typedef enum DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG {
DP_AUX_ARB_CONTROL__DONE_NOT_USING_AUX_REG = 0x00000000,
DP_AUX_ARB_CONTROL__DONE_USING_AUX_REG   = 0x00000001,
} DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG;

/*
 * DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ enum
 */

typedef enum DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ {
DP_AUX_ARB_CONTROL__NOT_USE_AUX_REG_REQ  = 0x00000000,
DP_AUX_ARB_CONTROL__USE_AUX_REG_REQ      = 0x00000001,
} DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ;

/*
 * DP_AUX_ARB_STATUS enum
 */

typedef enum DP_AUX_ARB_STATUS {
DP_AUX_IDLE                              = 0x00000000,
DP_AUX_IN_USE_LS                         = 0x00000001,
DP_AUX_IN_USE_GTC                        = 0x00000002,
DP_AUX_IN_USE_SW                         = 0x00000003,
DP_AUX_IN_USE_PHYWAKE                    = 0x00000004,
} DP_AUX_ARB_STATUS;

/*
 * DP_AUX_CONTROL_HPD_SEL enum
 */

typedef enum DP_AUX_CONTROL_HPD_SEL {
DP_AUX_CONTROL_HPD1_SELECTED             = 0x00000000,
DP_AUX_CONTROL_HPD2_SELECTED             = 0x00000001,
DP_AUX_CONTROL_HPD3_SELECTED             = 0x00000002,
DP_AUX_CONTROL_HPD4_SELECTED             = 0x00000003,
DP_AUX_CONTROL_HPD5_SELECTED             = 0x00000004,
DP_AUX_CONTROL_NO_HPD_SELECTED           = 0x00000005,
} DP_AUX_CONTROL_HPD_SEL;

/*
 * DP_AUX_CONTROL_TEST_MODE enum
 */

typedef enum DP_AUX_CONTROL_TEST_MODE {
DP_AUX_CONTROL_TEST_MODE_DISABLE         = 0x00000000,
DP_AUX_CONTROL_TEST_MODE_ENABLE          = 0x00000001,
} DP_AUX_CONTROL_TEST_MODE;

/*
 * DP_AUX_DEFINITE_ERR_REACHED_ACK enum
 */

typedef enum DP_AUX_DEFINITE_ERR_REACHED_ACK {
ALPHA_DP_AUX_DEFINITE_ERR_REACHED_NOT_ACK = 0x00000000,
ALPHA_DP_AUX_DEFINITE_ERR_REACHED_ACK    = 0x00000001,
} DP_AUX_DEFINITE_ERR_REACHED_ACK;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_PHASE_DETECT = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_PHASE_DETECT = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_START = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_START = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_STOP = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_STOP = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP;

/*
 * DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN {
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__6_EDGES = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__10_EDGES = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__18_EDGES = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__RESERVED = 0x00000003,
} DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN;

/*
 * DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN {
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__2_HALF_SYMBOLS = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__4_HALF_SYMBOLS = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__6_HALF_SYMBOLS = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__8_HALF_SYMBOLS = 0x00000003,
} DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN;

/*
 * DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW {
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO2_PERIOD = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO4_PERIOD = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO8_PERIOD = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO16_PERIOD = 0x00000003,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO32_PERIOD = 0x00000004,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO64_PERIOD = 0x00000005,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO128_PERIOD = 0x00000006,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO256_PERIOD = 0x00000007,
} DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW;

/*
 * DP_AUX_DPHY_RX_CONTROL_START_WINDOW enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_START_WINDOW {
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO2_PERIOD = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO4_PERIOD = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO8_PERIOD = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO16_PERIOD = 0x00000003,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO32_PERIOD = 0x00000004,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO64_PERIOD = 0x00000005,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO128_PERIOD = 0x00000006,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO256_PERIOD = 0x00000007,
} DP_AUX_DPHY_RX_CONTROL_START_WINDOW;

/*
 * DP_AUX_DPHY_RX_DETECTION_THRESHOLD enum
 */

typedef enum DP_AUX_DPHY_RX_DETECTION_THRESHOLD {
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__1to2 = 0x00000000,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__3to4 = 0x00000001,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__7to8 = 0x00000002,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__15to16 = 0x00000003,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__31to32 = 0x00000004,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__63to64 = 0x00000005,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__127to128 = 0x00000006,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__255to256 = 0x00000007,
} DP_AUX_DPHY_RX_DETECTION_THRESHOLD;

/*
 * DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY enum
 */

typedef enum DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY {
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__0 = 0x00000000,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__16US = 0x00000001,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__32US = 0x00000002,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__64US = 0x00000003,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__128US = 0x00000004,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__256US = 0x00000005,
} DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY;

/*
 * DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE enum
 */

typedef enum DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE {
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__1MHZ = 0x00000000,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__2MHZ = 0x00000001,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__4MHZ = 0x00000002,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__8MHZ = 0x00000003,
} DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE;

/*
 * DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL enum
 */

typedef enum DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL {
DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL__DIVIDED_SYM_CLK = 0x00000000,
DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL__FROM_DCCG_MICROSECOND_REF = 0x00000001,
} DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL;

/*
 * DP_AUX_ERR_OCCURRED_ACK enum
 */

typedef enum DP_AUX_ERR_OCCURRED_ACK {
DP_AUX_ERR_OCCURRED__NOT_ACK             = 0x00000000,
DP_AUX_ERR_OCCURRED__ACK                 = 0x00000001,
} DP_AUX_ERR_OCCURRED_ACK;

/*
 * DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ {
DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_ALLOW_REQ_FROM_OTHER_AUX = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ_FROM_OTHER_AUX = 0x00000001,
} DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ;

/*
 * DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW {
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__300US = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__400US = 0x00000001,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__500US = 0x00000002,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__600US = 0x00000003,
} DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW;

/*
 * DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT {
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__4_ATTAMPS = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__8_ATTAMPS = 0x00000001,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__16_ATTAMPS = 0x00000002,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__RESERVED = 0x00000003,
} DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT;

/*
 * DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN enum
 */

typedef enum DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN {
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__0 = 0x00000000,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__64 = 0x00000001,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__128 = 0x00000002,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__256 = 0x00000003,
} DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN;

/*
 * DP_AUX_INT_ACK enum
 */

typedef enum DP_AUX_INT_ACK {
DP_AUX_INT__NOT_ACK                      = 0x00000000,
DP_AUX_INT__ACK                          = 0x00000001,
} DP_AUX_INT_ACK;

/*
 * DP_AUX_LS_UPDATE_ACK enum
 */

typedef enum DP_AUX_LS_UPDATE_ACK {
DP_AUX_INT_LS_UPDATE_NOT_ACK             = 0x00000000,
DP_AUX_INT_LS_UPDATE_ACK                 = 0x00000001,
} DP_AUX_LS_UPDATE_ACK;

/*
 * DP_AUX_PHY_WAKE_PRIORITY enum
 */

typedef enum DP_AUX_PHY_WAKE_PRIORITY {
DP_AUX_PHY_WAKE_HIGH_PRIORITY            = 0x00000000,
DP_AUX_PHY_WAKE_LOW_PRIORITY             = 0x00000001,
} DP_AUX_PHY_WAKE_PRIORITY;

/*
 * DP_AUX_POTENTIAL_ERR_REACHED_ACK enum
 */

typedef enum DP_AUX_POTENTIAL_ERR_REACHED_ACK {
DP_AUX_POTENTIAL_ERR_REACHED__NOT_ACK    = 0x00000000,
DP_AUX_POTENTIAL_ERR_REACHED__ACK        = 0x00000001,
} DP_AUX_POTENTIAL_ERR_REACHED_ACK;

/*
 * DP_AUX_RESET enum
 */

typedef enum DP_AUX_RESET {
DP_AUX_RESET_DEASSERTED                  = 0x00000000,
DP_AUX_RESET_ASSERTED                    = 0x00000001,
} DP_AUX_RESET;

/*
 * DP_AUX_RESET_DONE enum
 */

typedef enum DP_AUX_RESET_DONE {
DP_AUX_RESET_SEQUENCE_NOT_DONE           = 0x00000000,
DP_AUX_RESET_SEQUENCE_DONE               = 0x00000001,
} DP_AUX_RESET_DONE;

/*
 * DP_AUX_RX_TIMEOUT_LEN_MUL enum
 */

typedef enum DP_AUX_RX_TIMEOUT_LEN_MUL {
DP_AUX_RX_TIMEOUT_LEN_NO_MUL             = 0x00000000,
DP_AUX_RX_TIMEOUT_LEN_MUL_2              = 0x00000001,
DP_AUX_RX_TIMEOUT_LEN_MUL_4              = 0x00000002,
DP_AUX_RX_TIMEOUT_LEN_MUL_8              = 0x00000003,
} DP_AUX_RX_TIMEOUT_LEN_MUL;

/*
 * DP_AUX_SW_CONTROL_LS_READ_TRIG enum
 */

typedef enum DP_AUX_SW_CONTROL_LS_READ_TRIG {
DP_AUX_SW_CONTROL_LS_READ__NOT_TRIG      = 0x00000000,
DP_AUX_SW_CONTROL_LS_READ__TRIG          = 0x00000001,
} DP_AUX_SW_CONTROL_LS_READ_TRIG;

/*
 * DP_AUX_SW_CONTROL_SW_GO enum
 */

typedef enum DP_AUX_SW_CONTROL_SW_GO {
DP_AUX_SW_CONTROL_SW__NOT_GO             = 0x00000000,
DP_AUX_SW_CONTROL_SW__GO                 = 0x00000001,
} DP_AUX_SW_CONTROL_SW_GO;

/*
 * DP_AUX_TX_PRECHARGE_LEN_MUL enum
 */

typedef enum DP_AUX_TX_PRECHARGE_LEN_MUL {
DP_AUX_TX_PRECHARGE_LEN_NO_MUL           = 0x00000000,
DP_AUX_TX_PRECHARGE_LEN_MUL_2            = 0x00000001,
DP_AUX_TX_PRECHARGE_LEN_MUL_4            = 0x00000002,
DP_AUX_TX_PRECHARGE_LEN_MUL_8            = 0x00000003,
} DP_AUX_TX_PRECHARGE_LEN_MUL;

/*******************************************************
 * DOUT_I2C Enums
 *******************************************************/

/*
 * DOUT_I2C_ACK enum
 */

typedef enum DOUT_I2C_ACK {
DOUT_I2C_NO_ACK                          = 0x00000000,
DOUT_I2C_ACK_TO_CLEAN                    = 0x00000001,
} DOUT_I2C_ACK;

/*
 * DOUT_I2C_ARBITRATION_ABORT_XFER enum
 */

typedef enum DOUT_I2C_ARBITRATION_ABORT_XFER {
DOUT_I2C_ARBITRATION_NOT_ABORT_CURRENT_TRANSFER = 0x00000000,
DOUT_I2C_ARBITRATION_ABORT_CURRENT_TRANSFER = 0x00000001,
} DOUT_I2C_ARBITRATION_ABORT_XFER;

/*
 * DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG enum
 */

typedef enum DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG {
DOUT_I2C_ARBITRATION_DONE__NOT_USING_I2C_REG = 0x00000000,
DOUT_I2C_ARBITRATION_DONE__USING_I2C_REG = 0x00000001,
} DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG;

/*
 * DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO enum
 */

typedef enum DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO {
DOUT_I2C_ARBITRATION_SW_QUEUE_ENABLED    = 0x00000000,
DOUT_I2C_ARBITRATION_SW_QUEUE_DISABLED   = 0x00000001,
} DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO;

/*
 * DOUT_I2C_ARBITRATION_SW_PRIORITY enum
 */

typedef enum DOUT_I2C_ARBITRATION_SW_PRIORITY {
DOUT_I2C_ARBITRATION_SW_PRIORITY_NORMAL  = 0x00000000,
DOUT_I2C_ARBITRATION_SW_PRIORITY_HIGH    = 0x00000001,
DOUT_I2C_ARBITRATION_SW_PRIORITY_0_RESERVED = 0x00000002,
DOUT_I2C_ARBITRATION_SW_PRIORITY_1_RESERVED = 0x00000003,
} DOUT_I2C_ARBITRATION_SW_PRIORITY;

/*
 * DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ enum
 */

typedef enum DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ {
DOUT_I2C_ARBITRATION__NOT_USE_I2C_REG_REQ = 0x00000000,
DOUT_I2C_ARBITRATION__USE_I2C_REG_REQ    = 0x00000001,
} DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ;

/*
 * DOUT_I2C_CONTROL_DBG_REF_SEL enum
 */

typedef enum DOUT_I2C_CONTROL_DBG_REF_SEL {
DOUT_I2C_CONTROL_NORMAL_DEBUG            = 0x00000000,
DOUT_I2C_CONTROL_FAST_REFERENCE_DEBUG    = 0x00000001,
} DOUT_I2C_CONTROL_DBG_REF_SEL;

/*
 * DOUT_I2C_CONTROL_DDC_SELECT enum
 */

typedef enum DOUT_I2C_CONTROL_DDC_SELECT {
DOUT_I2C_CONTROL_SELECT_DDC1             = 0x00000000,
DOUT_I2C_CONTROL_SELECT_DDC2             = 0x00000001,
DOUT_I2C_CONTROL_SELECT_DDC3             = 0x00000002,
DOUT_I2C_CONTROL_SELECT_DDC4             = 0x00000003,
DOUT_I2C_CONTROL_SELECT_DDC5             = 0x00000004,
DOUT_I2C_CONTROL_SELECT_DDCVGA           = 0x00000005,
} DOUT_I2C_CONTROL_DDC_SELECT;

/*
 * DOUT_I2C_CONTROL_GO enum
 */

typedef enum DOUT_I2C_CONTROL_GO {
DOUT_I2C_CONTROL_STOP_TRANSFER           = 0x00000000,
DOUT_I2C_CONTROL_START_TRANSFER          = 0x00000001,
} DOUT_I2C_CONTROL_GO;

/*
 * DOUT_I2C_CONTROL_SEND_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SEND_RESET {
DOUT_I2C_CONTROL__NOT_SEND_RESET         = 0x00000000,
DOUT_I2C_CONTROL__SEND_RESET             = 0x00000001,
} DOUT_I2C_CONTROL_SEND_RESET;

/*
 * DOUT_I2C_CONTROL_SEND_RESET_LENGTH enum
 */

typedef enum DOUT_I2C_CONTROL_SEND_RESET_LENGTH {
DOUT_I2C_CONTROL__SEND_RESET_LENGTH_9    = 0x00000000,
DOUT_I2C_CONTROL__SEND_RESET_LENGTH_10   = 0x00000001,
} DOUT_I2C_CONTROL_SEND_RESET_LENGTH;

/*
 * DOUT_I2C_CONTROL_SOFT_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SOFT_RESET {
DOUT_I2C_CONTROL_NOT_RESET_I2C_CONTROLLER = 0x00000000,
DOUT_I2C_CONTROL_RESET_I2C_CONTROLLER    = 0x00000001,
} DOUT_I2C_CONTROL_SOFT_RESET;

/*
 * DOUT_I2C_CONTROL_SW_STATUS_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SW_STATUS_RESET {
DOUT_I2C_CONTROL_NOT_RESET_SW_STATUS     = 0x00000000,
DOUT_I2C_CONTROL_RESET_SW_STATUS         = 0x00000001,
} DOUT_I2C_CONTROL_SW_STATUS_RESET;

/*
 * DOUT_I2C_CONTROL_TRANSACTION_COUNT enum
 */

typedef enum DOUT_I2C_CONTROL_TRANSACTION_COUNT {
DOUT_I2C_CONTROL_TRANS0                  = 0x00000000,
DOUT_I2C_CONTROL_TRANS0_TRANS1           = 0x00000001,
DOUT_I2C_CONTROL_TRANS0_TRANS1_TRANS2    = 0x00000002,
DOUT_I2C_CONTROL_TRANS0_TRANS1_TRANS2_TRANS3 = 0x00000003,
} DOUT_I2C_CONTROL_TRANSACTION_COUNT;

/*
 * DOUT_I2C_DATA_INDEX_WRITE enum
 */

typedef enum DOUT_I2C_DATA_INDEX_WRITE {
DOUT_I2C_DATA__NOT_INDEX_WRITE           = 0x00000000,
DOUT_I2C_DATA__INDEX_WRITE               = 0x00000001,
} DOUT_I2C_DATA_INDEX_WRITE;

/*
 * DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN enum
 */

typedef enum DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN {
DOUT_I2C_DDC_SETUP_CLK_DRIVE_BY_EXTERNAL_RESISTOR = 0x00000000,
DOUT_I2C_DDC_SETUP_I2C_PAD_DRIVE_SCL     = 0x00000001,
} DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN;

/*
 * DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN enum
 */

typedef enum DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN {
DOUT_I2C_DDC_SETUP_DATA_DRIVE_BY_EXTERNAL_RESISTOR = 0x00000000,
DOUT_I2C_DDC_SETUP_I2C_PAD_DRIVE_SDA     = 0x00000001,
} DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN;

/*
 * DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL enum
 */

typedef enum DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL {
DOUT_I2C_DDC_SETUP_DATA_DRIVE_FOR_10MCLKS = 0x00000000,
DOUT_I2C_DDC_SETUP_DATA_DRIVE_FOR_20MCLKS = 0x00000001,
} DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL;

/*
 * DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE enum
 */

typedef enum DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE {
DOUT_I2C_DDC_SETUP_EDID_DETECT_CONNECT   = 0x00000000,
DOUT_I2C_DDC_SETUP_EDID_DETECT_DISCONNECT = 0x00000001,
} DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE;

/*
 * DOUT_I2C_DDC_SPEED_THRESHOLD enum
 */

typedef enum DOUT_I2C_DDC_SPEED_THRESHOLD {
DOUT_I2C_DDC_SPEED_THRESHOLD_BIG_THAN_ZERO = 0x00000000,
DOUT_I2C_DDC_SPEED_THRESHOLD_QUATER_OF_TOTAL_SAMPLE = 0x00000001,
DOUT_I2C_DDC_SPEED_THRESHOLD_HALF_OF_TOTAL_SAMPLE = 0x00000002,
DOUT_I2C_DDC_SPEED_THRESHOLD_THREE_QUATERS_OF_TOTAL_SAMPLE = 0x00000003,
} DOUT_I2C_DDC_SPEED_THRESHOLD;

/*
 * DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET enum
 */

typedef enum DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET {
DOUT_I2C_EDID_NOT_SEND_RESET_BEFORE_EDID_READ_TRACTION = 0x00000000,
DOUT_I2C_EDID_SEND_RESET_BEFORE_EDID_READ_TRACTION = 0x00000001,
} DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET;

/*
 * DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE enum
 */

typedef enum DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE {
DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE__LEVEL = 0x00000000,
DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE__PULSE = 0x00000001,
} DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE;

/*
 * DOUT_I2C_TRANSACTION_STOP_ON_NACK enum
 */

typedef enum DOUT_I2C_TRANSACTION_STOP_ON_NACK {
DOUT_I2C_TRANSACTION_STOP_CURRENT_TRANS  = 0x00000000,
DOUT_I2C_TRANSACTION_STOP_ALL_TRANS      = 0x00000001,
} DOUT_I2C_TRANSACTION_STOP_ON_NACK;

/*******************************************************
 * DIO_MISC Enums
 *******************************************************/

/*
 * CLOCK_GATING_EN enum
 */

typedef enum CLOCK_GATING_EN {
CLOCK_GATING_ENABLE                      = 0x00000000,
CLOCK_GATING_DISABLE                     = 0x00000001,
} CLOCK_GATING_EN;

/*
 * DAC_MUX_SELECT enum
 */

typedef enum DAC_MUX_SELECT {
DAC_MUX_SELECT_DACA                      = 0x00000000,
DAC_MUX_SELECT_DACB                      = 0x00000001,
} DAC_MUX_SELECT;

/*
 * DIOMEM_PWR_DIS_CTRL enum
 */

typedef enum DIOMEM_PWR_DIS_CTRL {
DIOMEM_ENABLE_MEM_PWR_CTRL               = 0x00000000,
DIOMEM_DISABLE_MEM_PWR_CTRL              = 0x00000001,
} DIOMEM_PWR_DIS_CTRL;

/*
 * DIOMEM_PWR_FORCE_CTRL enum
 */

typedef enum DIOMEM_PWR_FORCE_CTRL {
DIOMEM_NO_FORCE_REQUEST                  = 0x00000000,
DIOMEM_FORCE_LIGHT_SLEEP_REQUEST         = 0x00000001,
DIOMEM_FORCE_DEEP_SLEEP_REQUEST          = 0x00000002,
DIOMEM_FORCE_SHUT_DOWN_REQUEST           = 0x00000003,
} DIOMEM_PWR_FORCE_CTRL;

/*
 * DIOMEM_PWR_FORCE_CTRL2 enum
 */

typedef enum DIOMEM_PWR_FORCE_CTRL2 {
DIOMEM_NO_FORCE_REQ                      = 0x00000000,
DIOMEM_FORCE_LIGHT_SLEEP_REQ             = 0x00000001,
} DIOMEM_PWR_FORCE_CTRL2;

/*
 * DIOMEM_PWR_SEL_CTRL enum
 */

typedef enum DIOMEM_PWR_SEL_CTRL {
DIOMEM_DYNAMIC_SHUT_DOWN_ENABLE          = 0x00000000,
DIOMEM_DYNAMIC_DEEP_SLEEP_ENABLE         = 0x00000001,
DIOMEM_DYNAMIC_LIGHT_SLEEP_ENABLE        = 0x00000002,
} DIOMEM_PWR_SEL_CTRL;

/*
 * DIOMEM_PWR_SEL_CTRL2 enum
 */

typedef enum DIOMEM_PWR_SEL_CTRL2 {
DIOMEM_DYNAMIC_DEEP_SLEEP_EN             = 0x00000000,
DIOMEM_DYNAMIC_LIGHT_SLEEP_EN            = 0x00000001,
} DIOMEM_PWR_SEL_CTRL2;

/*
 * DIO_DBG_BLOCK_SEL enum
 */

typedef enum DIO_DBG_BLOCK_SEL {
DIO_DBG_BLOCK_SEL_DIO                    = 0x00000000,
DIO_DBG_BLOCK_SEL_DIGFE_A                = 0x0000000b,
DIO_DBG_BLOCK_SEL_DIGFE_B                = 0x0000000c,
DIO_DBG_BLOCK_SEL_DIGFE_C                = 0x0000000d,
DIO_DBG_BLOCK_SEL_DIGFE_D                = 0x0000000e,
DIO_DBG_BLOCK_SEL_DIGFE_E                = 0x0000000f,
DIO_DBG_BLOCK_SEL_DIGA                   = 0x00000012,
DIO_DBG_BLOCK_SEL_DIGB                   = 0x00000013,
DIO_DBG_BLOCK_SEL_DIGC                   = 0x00000014,
DIO_DBG_BLOCK_SEL_DIGD                   = 0x00000015,
DIO_DBG_BLOCK_SEL_DIGE                   = 0x00000016,
DIO_DBG_BLOCK_SEL_DPFE_A                 = 0x00000019,
DIO_DBG_BLOCK_SEL_DPFE_B                 = 0x0000001a,
DIO_DBG_BLOCK_SEL_DPFE_C                 = 0x0000001b,
DIO_DBG_BLOCK_SEL_DPFE_D                 = 0x0000001c,
DIO_DBG_BLOCK_SEL_DPFE_E                 = 0x0000001d,
DIO_DBG_BLOCK_SEL_DPA                    = 0x00000020,
DIO_DBG_BLOCK_SEL_DPB                    = 0x00000021,
DIO_DBG_BLOCK_SEL_DPC                    = 0x00000022,
DIO_DBG_BLOCK_SEL_DPD                    = 0x00000023,
DIO_DBG_BLOCK_SEL_DPE                    = 0x00000024,
DIO_DBG_BLOCK_SEL_AUX0                   = 0x00000027,
DIO_DBG_BLOCK_SEL_AUX1                   = 0x00000028,
DIO_DBG_BLOCK_SEL_AUX2                   = 0x00000029,
DIO_DBG_BLOCK_SEL_AUX3                   = 0x0000002a,
DIO_DBG_BLOCK_SEL_AUX4                   = 0x0000002b,
DIO_DBG_BLOCK_SEL_PERFMON_DIO            = 0x0000002d,
DIO_DBG_BLOCK_SEL_RESERVED               = 0x0000002e,
} DIO_DBG_BLOCK_SEL;

/*
 * DIO_HDMI_RXSTATUS_TIMER_CONTROL_DIO_HDMI_RXSTATUS_TIMER_TYPE enum
 */

typedef enum DIO_HDMI_RXSTATUS_TIMER_CONTROL_DIO_HDMI_RXSTATUS_TIMER_TYPE {
DIO_HDMI_RXSTATUS_TIMER_TYPE_LEVEL       = 0x00000000,
DIO_HDMI_RXSTATUS_TIMER_TYPE_PULSE       = 0x00000001,
} DIO_HDMI_RXSTATUS_TIMER_CONTROL_DIO_HDMI_RXSTATUS_TIMER_TYPE;

/*
 * DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE enum
 */

typedef enum DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE {
DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE_0 = 0x00000000,
DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE_1 = 0x00000001,
} DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE;

/*
 * ENUM_DIO_DCN_ACTIVE_STATUS enum
 */

typedef enum ENUM_DIO_DCN_ACTIVE_STATUS {
ENUM_DCN_NOT_ACTIVE                      = 0x00000000,
ENUM_DCN_ACTIVE                          = 0x00000001,
} ENUM_DIO_DCN_ACTIVE_STATUS;

/*
 * GENERIC_STEREOSYNC_SEL enum
 */

typedef enum GENERIC_STEREOSYNC_SEL {
GENERIC_STEREOSYNC_SEL_D1                = 0x00000000,
GENERIC_STEREOSYNC_SEL_D2                = 0x00000001,
GENERIC_STEREOSYNC_SEL_D3                = 0x00000002,
GENERIC_STEREOSYNC_SEL_D4                = 0x00000003,
GENERIC_STEREOSYNC_SEL_RESERVED          = 0x00000004,
} GENERIC_STEREOSYNC_SEL;

/*
 * PM_ASSERT_RESET enum
 */

typedef enum PM_ASSERT_RESET {
PM_ASSERT_RESET_0                        = 0x00000000,
PM_ASSERT_RESET_1                        = 0x00000001,
} PM_ASSERT_RESET;

/*
 * SOFT_RESET enum
 */

typedef enum SOFT_RESET {
SOFT_RESET_0                             = 0x00000000,
SOFT_RESET_1                             = 0x00000001,
} SOFT_RESET;

/*
 * TMDS_MUX_SELECT enum
 */

typedef enum TMDS_MUX_SELECT {
TMDS_MUX_SELECT_B                        = 0x00000000,
TMDS_MUX_SELECT_G                        = 0x00000001,
TMDS_MUX_SELECT_R                        = 0x00000002,
TMDS_MUX_SELECT_RESERVED                 = 0x00000003,
} TMDS_MUX_SELECT;

/*******************************************************
 * DME Enums
 *******************************************************/

/*
 * DME_MEM_POWER_STATE_ENUM enum
 */

typedef enum DME_MEM_POWER_STATE_ENUM {
DME_MEM_POWER_STATE_ENUM_ON              = 0x00000000,
DME_MEM_POWER_STATE_ENUM_LS              = 0x00000001,
DME_MEM_POWER_STATE_ENUM_DS              = 0x00000002,
DME_MEM_POWER_STATE_ENUM_SD              = 0x00000003,
} DME_MEM_POWER_STATE_ENUM;

/*
 * DME_MEM_PWR_DIS_CTRL enum
 */

typedef enum DME_MEM_PWR_DIS_CTRL {
DME_MEM_ENABLE_MEM_PWR_CTRL              = 0x00000000,
DME_MEM_DISABLE_MEM_PWR_CTRL             = 0x00000001,
} DME_MEM_PWR_DIS_CTRL;

/*
 * DME_MEM_PWR_FORCE_CTRL enum
 */

typedef enum DME_MEM_PWR_FORCE_CTRL {
DME_MEM_NO_FORCE_REQUEST                 = 0x00000000,
DME_MEM_FORCE_LIGHT_SLEEP_REQUEST        = 0x00000001,
DME_MEM_FORCE_DEEP_SLEEP_REQUEST         = 0x00000002,
DME_MEM_FORCE_SHUT_DOWN_REQUEST          = 0x00000003,
} DME_MEM_PWR_FORCE_CTRL;

/*
 * METADATA_HUBP_SEL enum
 */

typedef enum METADATA_HUBP_SEL {
METADATA_HUBP_SEL_0                      = 0x00000000,
METADATA_HUBP_SEL_1                      = 0x00000001,
METADATA_HUBP_SEL_2                      = 0x00000002,
METADATA_HUBP_SEL_3                      = 0x00000003,
METADATA_HUBP_SEL_RESERVED               = 0x00000004,
} METADATA_HUBP_SEL;

/*
 * METADATA_STREAM_TYPE_SEL enum
 */

typedef enum METADATA_STREAM_TYPE_SEL {
METADATA_STREAM_DP                       = 0x00000000,
METADATA_STREAM_DVE                      = 0x00000001,
} METADATA_STREAM_TYPE_SEL;

/*******************************************************
 * VPG Enums
 *******************************************************/

/*
 * VPG_MEM_PWR_DIS_CTRL enum
 */

typedef enum VPG_MEM_PWR_DIS_CTRL {
VPG_MEM_ENABLE_MEM_PWR_CTRL              = 0x00000000,
VPG_MEM_DISABLE_MEM_PWR_CTRL             = 0x00000001,
} VPG_MEM_PWR_DIS_CTRL;

/*
 * VPG_MEM_PWR_FORCE_CTRL enum
 */

typedef enum VPG_MEM_PWR_FORCE_CTRL {
VPG_MEM_NO_FORCE_REQ                     = 0x00000000,
VPG_MEM_FORCE_LIGHT_SLEEP_REQ            = 0x00000001,
} VPG_MEM_PWR_FORCE_CTRL;

/*******************************************************
 * AFMT Enums
 *******************************************************/

/*
 * AFMT_ACP_TYPE enum
 */

typedef enum AFMT_ACP_TYPE {
ACP_TYPE_GENERIC_AUDIO                   = 0x00000000,
ACP_TYPE_ICE60958_AUDIO                  = 0x00000001,
ACP_TYPE_DVD_AUDIO                       = 0x00000002,
ACP_TYPE_SUPER_AUDIO_CD                  = 0x00000003,
} AFMT_ACP_TYPE;

/*
 * AFMT_AUDIO_CRC_CONTROL_CH_SEL enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_CH_SEL {
AFMT_AUDIO_CRC_CH0_SIG                   = 0x00000000,
AFMT_AUDIO_CRC_CH1_SIG                   = 0x00000001,
AFMT_AUDIO_CRC_CH2_SIG                   = 0x00000002,
AFMT_AUDIO_CRC_CH3_SIG                   = 0x00000003,
AFMT_AUDIO_CRC_CH4_SIG                   = 0x00000004,
AFMT_AUDIO_CRC_CH5_SIG                   = 0x00000005,
AFMT_AUDIO_CRC_CH6_SIG                   = 0x00000006,
AFMT_AUDIO_CRC_CH7_SIG                   = 0x00000007,
AFMT_AUDIO_CRC_RESERVED_8                = 0x00000008,
AFMT_AUDIO_CRC_RESERVED_9                = 0x00000009,
AFMT_AUDIO_CRC_RESERVED_10               = 0x0000000a,
AFMT_AUDIO_CRC_RESERVED_11               = 0x0000000b,
AFMT_AUDIO_CRC_RESERVED_12               = 0x0000000c,
AFMT_AUDIO_CRC_RESERVED_13               = 0x0000000d,
AFMT_AUDIO_CRC_RESERVED_14               = 0x0000000e,
AFMT_AUDIO_CRC_AUDIO_SAMPLE_COUNT        = 0x0000000f,
} AFMT_AUDIO_CRC_CONTROL_CH_SEL;

/*
 * AFMT_AUDIO_CRC_CONTROL_CONT enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_CONT {
AFMT_AUDIO_CRC_ONESHOT                   = 0x00000000,
AFMT_AUDIO_CRC_AUTO_RESTART              = 0x00000001,
} AFMT_AUDIO_CRC_CONTROL_CONT;

/*
 * AFMT_AUDIO_CRC_CONTROL_SOURCE enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_SOURCE {
AFMT_AUDIO_CRC_SOURCE_FROM_FIFO_INPUT    = 0x00000000,
AFMT_AUDIO_CRC_SOURCE_FROM_FIFO_OUTPUT   = 0x00000001,
} AFMT_AUDIO_CRC_CONTROL_SOURCE;

/*
 * AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD {
AFMT_AUDIO_LAYOUT_DETERMINED_BY_AZ_AUDIO_CHANNEL_STATUS = 0x00000000,
AFMT_AUDIO_LAYOUT_OVRD_BY_REGISTER       = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD;

/*
 * AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND {
AFMT_AUDIO_PACKET_SENT_DISABLED          = 0x00000000,
AFMT_AUDIO_PACKET_SENT_ENABLED           = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND;

/*
 * AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS {
AFMT_NOT_RESET_AUDIO_FIFO_WHEN_AUDIO_DISABLED_RESERVED = 0x00000000,
AFMT_RESET_AUDIO_FIFO_WHEN_AUDIO_DISABLED = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS;

/*
 * AFMT_AUDIO_SRC_CONTROL_SELECT enum
 */

typedef enum AFMT_AUDIO_SRC_CONTROL_SELECT {
AFMT_AUDIO_SRC_FROM_AZ_STREAM0           = 0x00000000,
AFMT_AUDIO_SRC_FROM_AZ_STREAM1           = 0x00000001,
AFMT_AUDIO_SRC_FROM_AZ_STREAM2           = 0x00000002,
AFMT_AUDIO_SRC_FROM_AZ_STREAM3           = 0x00000003,
AFMT_AUDIO_SRC_FROM_AZ_STREAM4           = 0x00000004,
AFMT_AUDIO_SRC_FROM_AZ_STREAM5           = 0x00000005,
} AFMT_AUDIO_SRC_CONTROL_SELECT;

/*
 * AFMT_HDMI_AUDIO_SEND_MAX_PACKETS enum
 */

typedef enum AFMT_HDMI_AUDIO_SEND_MAX_PACKETS {
HDMI_NOT_SEND_MAX_AUDIO_PACKETS          = 0x00000000,
HDMI_SEND_MAX_AUDIO_PACKETS              = 0x00000001,
} AFMT_HDMI_AUDIO_SEND_MAX_PACKETS;

/*
 * AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE enum
 */

typedef enum AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE {
AFMT_INFOFRAME_SOURCE_FROM_AZALIA_BLOCK  = 0x00000000,
AFMT_INFOFRAME_SOURCE_FROM_AFMT_REGISTERS = 0x00000001,
} AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE;

/*
 * AFMT_INTERRUPT_STATUS_CHG_MASK enum
 */

typedef enum AFMT_INTERRUPT_STATUS_CHG_MASK {
AFMT_INTERRUPT_DISABLE                   = 0x00000000,
AFMT_INTERRUPT_ENABLE                    = 0x00000001,
} AFMT_INTERRUPT_STATUS_CHG_MASK;

/*
 * AFMT_MEM_PWR_DIS_CTRL enum
 */

typedef enum AFMT_MEM_PWR_DIS_CTRL {
AFMT_MEM_ENABLE_MEM_PWR_CTRL             = 0x00000000,
AFMT_MEM_DISABLE_MEM_PWR_CTRL            = 0x00000001,
} AFMT_MEM_PWR_DIS_CTRL;

/*
 * AFMT_MEM_PWR_FORCE_CTRL enum
 */

typedef enum AFMT_MEM_PWR_FORCE_CTRL {
AFMT_MEM_NO_FORCE_REQUEST                = 0x00000000,
AFMT_MEM_FORCE_LIGHT_SLEEP_REQUEST       = 0x00000001,
AFMT_MEM_FORCE_DEEP_SLEEP_REQUEST        = 0x00000002,
AFMT_MEM_FORCE_SHUT_DOWN_REQUEST         = 0x00000003,
} AFMT_MEM_PWR_FORCE_CTRL;

/*
 * AFMT_RAMP_CONTROL0_SIGN enum
 */

typedef enum AFMT_RAMP_CONTROL0_SIGN {
AFMT_RAMP_SIGNED                         = 0x00000000,
AFMT_RAMP_UNSIGNED                       = 0x00000001,
} AFMT_RAMP_CONTROL0_SIGN;

/*
 * AFMT_VBI_PACKET_CONTROL_ACP_SOURCE enum
 */

typedef enum AFMT_VBI_PACKET_CONTROL_ACP_SOURCE {
AFMT_ACP_SOURCE_FROM_AZALIA              = 0x00000000,
AFMT_ACP_SOURCE_FROM_AFMT_REGISTERS      = 0x00000001,
} AFMT_VBI_PACKET_CONTROL_ACP_SOURCE;

/*
 * AUDIO_LAYOUT_SELECT enum
 */

typedef enum AUDIO_LAYOUT_SELECT {
AUDIO_LAYOUT_0                           = 0x00000000,
AUDIO_LAYOUT_1                           = 0x00000001,
} AUDIO_LAYOUT_SELECT;

/*******************************************************
 * HPO_TOP Enums
 *******************************************************/

/*
 * HPO_TOP_CLOCK_GATING_DISABLE enum
 */

typedef enum HPO_TOP_CLOCK_GATING_DISABLE {
HPO_TOP_CLOCK_GATING_EN                  = 0x00000000,
HPO_TOP_CLOCK_GATING_DIS                 = 0x00000001,
} HPO_TOP_CLOCK_GATING_DISABLE;

/*
 * HPO_TOP_TEST_CLK_SEL enum
 */

typedef enum HPO_TOP_TEST_CLK_SEL {
HPO_TOP_PERMANENT_DISPCLK                = 0x00000000,
HPO_TOP_REGISTER_GATED_DISPCLK           = 0x00000001,
HPO_TOP_PERMANENT_SOCCLK                 = 0x00000002,
HPO_TOP_TEST_CLOCK_RESERVED              = 0x00000003,
HPO_TOP_PERMANENT_HDMISTREAMCLK0         = 0x00000004,
HPO_TOP_FEATURE_GATED_HDMISTREAMCLK0     = 0x00000005,
HPO_TOP_REGISTER_GATED_HDMISTREAMCLK0    = 0x00000006,
HPO_TOP_FEATURE_GATED_DISPCLK_IN_HDMISTREAMENC0 = 0x00000007,
HPO_TOP_FEATURE_GATED_SOCCLK_IN_HDMISTREAMENC0 = 0x00000008,
HPO_TOP_PERMANENT_HDMICHARCLK0           = 0x00000009,
HPO_TOP_FEATURE_GATED_HDMICHARCLK0       = 0x0000000a,
HPO_TOP_REGISTER_GATED_HDMICHARCLK0      = 0x0000000b,
} HPO_TOP_TEST_CLK_SEL;

/*******************************************************
 * DP_STREAM_MAPPER Enums
 *******************************************************/

/*
 * DP_STREAM_MAPPER_DP_STREAM_LINK_TARGET enum
 */

typedef enum DP_STREAM_MAPPER_DP_STREAM_LINK_TARGET {
DP_STREAM_MAPPER_LINK0                   = 0x00000000,
DP_STREAM_MAPPER_LINK1                   = 0x00000001,
DP_STREAM_MAPPER_RESERVED                = 0x00000002,
} DP_STREAM_MAPPER_DP_STREAM_LINK_TARGET;

/*******************************************************
 * HDMI_STREAM_ENC Enums
 *******************************************************/

/*
 * HDMI_STREAM_ENC_DB_DISABLE_CONTROL enum
 */

typedef enum HDMI_STREAM_ENC_DB_DISABLE_CONTROL {
HDMI_STREAM_ENC_DB_ENABLE                = 0x00000000,
HDMI_STREAM_ENC_DB_DISABLE               = 0x00000001,
} HDMI_STREAM_ENC_DB_DISABLE_CONTROL;

/*
 * HDMI_STREAM_ENC_DSC_MODE enum
 */

typedef enum HDMI_STREAM_ENC_DSC_MODE {
STREAM_DSC_DISABLE                       = 0x00000000,
STREAM_DSC_444_RGB                       = 0x00000001,
STREAM_DSC_NATIVE_422_420                = 0x00000002,
} HDMI_STREAM_ENC_DSC_MODE;

/*
 * HDMI_STREAM_ENC_ENABLE_CONTROL enum
 */

typedef enum HDMI_STREAM_ENC_ENABLE_CONTROL {
HDMI_STREAM_ENC_DISABLE                  = 0x00000000,
HDMI_STREAM_ENC_ENABLE                   = 0x00000001,
} HDMI_STREAM_ENC_ENABLE_CONTROL;

/*
 * HDMI_STREAM_ENC_ODM_COMBINE_MODE enum
 */

typedef enum HDMI_STREAM_ENC_ODM_COMBINE_MODE {
STREAM_ODM_COMBINE_1_SEGMENT             = 0x00000000,
STREAM_ODM_COMBINE_2_SEGMENT             = 0x00000001,
STREAM_ODM_COMBINE_RESERVED              = 0x00000002,
STREAM_ODM_COMBINE_4_SEGMENT             = 0x00000003,
} HDMI_STREAM_ENC_ODM_COMBINE_MODE;

/*
 * HDMI_STREAM_ENC_OVERFLOW_UNDERFLOW_ERROR enum
 */

typedef enum HDMI_STREAM_ENC_OVERFLOW_UNDERFLOW_ERROR {
HDMI_STREAM_ENC_NO_ERROR_OCCURRED        = 0x00000000,
HDMI_STREAM_ENC_UNDERFLOW_OCCURRED       = 0x00000001,
HDMI_STREAM_ENC_OVERFLOW_OCCURRED        = 0x00000002,
} HDMI_STREAM_ENC_OVERFLOW_UNDERFLOW_ERROR;

/*
 * HDMI_STREAM_ENC_OVERWRITE_LEVEL_SELECT enum
 */

typedef enum HDMI_STREAM_ENC_OVERWRITE_LEVEL_SELECT {
HDMI_STREAM_ENC_HARDWARE                 = 0x00000000,
HDMI_STREAM_ENC_PROGRAMMABLE             = 0x00000001,
} HDMI_STREAM_ENC_OVERWRITE_LEVEL_SELECT;

/*
 * HDMI_STREAM_ENC_PIXEL_ENCODING enum
 */

typedef enum HDMI_STREAM_ENC_PIXEL_ENCODING {
STREAM_PIXEL_ENCODING_444_RGB            = 0x00000000,
STREAM_PIXEL_ENCODING_422                = 0x00000001,
STREAM_PIXEL_ENCODING_420                = 0x00000002,
} HDMI_STREAM_ENC_PIXEL_ENCODING;

/*
 * HDMI_STREAM_ENC_READ_CLOCK_CONTROL enum
 */

typedef enum HDMI_STREAM_ENC_READ_CLOCK_CONTROL {
HDMI_STREAM_ENC_DCCG                     = 0x00000000,
HDMI_STREAM_ENC_DISPLAY_PIPE             = 0x00000001,
} HDMI_STREAM_ENC_READ_CLOCK_CONTROL;

/*
 * HDMI_STREAM_ENC_RESET_CONTROL enum
 */

typedef enum HDMI_STREAM_ENC_RESET_CONTROL {
HDMI_STREAM_ENC_NOT_RESET                = 0x00000000,
HDMI_STREAM_ENC_RESET                    = 0x00000001,
} HDMI_STREAM_ENC_RESET_CONTROL;

/*
 * HDMI_STREAM_ENC_STREAM_ACTIVE enum
 */

typedef enum HDMI_STREAM_ENC_STREAM_ACTIVE {
HDMI_STREAM_ENC_VIDEO_STREAM_NOT_ACTIVE  = 0x00000000,
HDMI_STREAM_ENC_VIDEO_STREAM_ACTIVE      = 0x00000001,
} HDMI_STREAM_ENC_STREAM_ACTIVE;

/*******************************************************
 * HDMI_TB_ENC Enums
 *******************************************************/

/*
 * BORROWBUFFER_MEM_POWER_STATE_ENUM enum
 */

typedef enum BORROWBUFFER_MEM_POWER_STATE_ENUM {
BORROWBUFFER_MEM_POWER_STATE_ENUM_ON     = 0x00000000,
BORROWBUFFER_MEM_POWER_STATE_ENUM_LS     = 0x00000001,
BORROWBUFFER_MEM_POWER_STATE_ENUM_DS     = 0x00000002,
BORROWBUFFER_MEM_POWER_STATE_ENUM_SD     = 0x00000003,
} BORROWBUFFER_MEM_POWER_STATE_ENUM;

/*
 * HDMI_BORROW_MODE enum
 */

typedef enum HDMI_BORROW_MODE {
TB_BORROW_MODE_NONE                      = 0x00000000,
TB_BORROW_MODE_ACTIVE                    = 0x00000001,
TB_BORROW_MODE_BLANK                     = 0x00000002,
TB_BORROW_MODE_RESERVED                  = 0x00000003,
} HDMI_BORROW_MODE;

/*
 * HDMI_TB_ENC_ACP_SEND enum
 */

typedef enum HDMI_TB_ENC_ACP_SEND {
TB_ACP_NOT_SEND                          = 0x00000000,
TB_ACP_PKT_SEND                          = 0x00000001,
} HDMI_TB_ENC_ACP_SEND;

/*
 * HDMI_TB_ENC_ACR_AUDIO_PRIORITY enum
 */

typedef enum HDMI_TB_ENC_ACR_AUDIO_PRIORITY {
TB_ACR_PKT_HIGH_PRIORITY_THAN_AUDIO_SAMPLE = 0x00000000,
TB_AUDIO_SAMPLE_HIGH_PRIORITY_THAN_ACR_PKT = 0x00000001,
} HDMI_TB_ENC_ACR_AUDIO_PRIORITY;

/*
 * HDMI_TB_ENC_ACR_CONT enum
 */

typedef enum HDMI_TB_ENC_ACR_CONT {
TB_ACR_CONT_DISABLE                      = 0x00000000,
TB_ACR_CONT_ENABLE                       = 0x00000001,
} HDMI_TB_ENC_ACR_CONT;

/*
 * HDMI_TB_ENC_ACR_N_MULTIPLE enum
 */

typedef enum HDMI_TB_ENC_ACR_N_MULTIPLE {
TB_ACR_0_MULTIPLE_RESERVED               = 0x00000000,
TB_ACR_1_MULTIPLE                        = 0x00000001,
TB_ACR_2_MULTIPLE                        = 0x00000002,
TB_ACR_3_MULTIPLE_RESERVED               = 0x00000003,
TB_ACR_4_MULTIPLE                        = 0x00000004,
TB_ACR_5_MULTIPLE_RESERVED               = 0x00000005,
TB_ACR_6_MULTIPLE_RESERVED               = 0x00000006,
TB_ACR_7_MULTIPLE_RESERVED               = 0x00000007,
} HDMI_TB_ENC_ACR_N_MULTIPLE;

/*
 * HDMI_TB_ENC_ACR_SELECT enum
 */

typedef enum HDMI_TB_ENC_ACR_SELECT {
TB_ACR_SELECT_HW                         = 0x00000000,
TB_ACR_SELECT_32K                        = 0x00000001,
TB_ACR_SELECT_44K                        = 0x00000002,
TB_ACR_SELECT_48K                        = 0x00000003,
} HDMI_TB_ENC_ACR_SELECT;

/*
 * HDMI_TB_ENC_ACR_SEND enum
 */

typedef enum HDMI_TB_ENC_ACR_SEND {
TB_ACR_NOT_SEND                          = 0x00000000,
TB_ACR_PKT_SEND                          = 0x00000001,
} HDMI_TB_ENC_ACR_SEND;

/*
 * HDMI_TB_ENC_ACR_SOURCE enum
 */

typedef enum HDMI_TB_ENC_ACR_SOURCE {
TB_ACR_SOURCE_HW                         = 0x00000000,
TB_ACR_SOURCE_SW                         = 0x00000001,
} HDMI_TB_ENC_ACR_SOURCE;

/*
 * HDMI_TB_ENC_AUDIO_INFO_CONT enum
 */

typedef enum HDMI_TB_ENC_AUDIO_INFO_CONT {
TB_AUDIO_INFO_CONT_DISABLE               = 0x00000000,
TB_AUDIO_INFO_CONT_ENABLE                = 0x00000001,
} HDMI_TB_ENC_AUDIO_INFO_CONT;

/*
 * HDMI_TB_ENC_AUDIO_INFO_SEND enum
 */

typedef enum HDMI_TB_ENC_AUDIO_INFO_SEND {
TB_AUDIO_INFO_NOT_SEND                   = 0x00000000,
TB_AUDIO_INFO_PKT_SEND                   = 0x00000001,
} HDMI_TB_ENC_AUDIO_INFO_SEND;

/*
 * HDMI_TB_ENC_CRC_SRC_SEL enum
 */

typedef enum HDMI_TB_ENC_CRC_SRC_SEL {
TB_CRC_TB_ENC_INPUT                      = 0x00000000,
TB_CRC_DSC_PACKER                        = 0x00000001,
TB_CRC_DEEP_COLOR_PACKER                 = 0x00000002,
TB_CRC_ENCRYPTOR_INPUT                   = 0x00000003,
} HDMI_TB_ENC_CRC_SRC_SEL;

/*
 * HDMI_TB_ENC_CRC_TYPE enum
 */

typedef enum HDMI_TB_ENC_CRC_TYPE {
TB_CRC_ALL_TRIBYTES                      = 0x00000000,
TB_CRC_ACTIVE_TRIBYTES                   = 0x00000001,
TB_CRC_DATAISLAND_TRIBYTES               = 0x00000002,
TB_CRC_ACTIVE_AND_DATAISLAND_TRIBYTES    = 0x00000003,
} HDMI_TB_ENC_CRC_TYPE;

/*
 * HDMI_TB_ENC_DEEP_COLOR_DEPTH enum
 */

typedef enum HDMI_TB_ENC_DEEP_COLOR_DEPTH {
TB_DEEP_COLOR_DEPTH_24BPP                = 0x00000000,
TB_DEEP_COLOR_DEPTH_30BPP                = 0x00000001,
TB_DEEP_COLOR_DEPTH_36BPP                = 0x00000002,
TB_DEEP_COLOR_DEPTH_RESERVED             = 0x00000003,
} HDMI_TB_ENC_DEEP_COLOR_DEPTH;

/*
 * HDMI_TB_ENC_DEFAULT_PAHSE enum
 */

typedef enum HDMI_TB_ENC_DEFAULT_PAHSE {
TB_DEFAULT_PHASE_IS_0                    = 0x00000000,
TB_DEFAULT_PHASE_IS_1                    = 0x00000001,
} HDMI_TB_ENC_DEFAULT_PAHSE;

/*
 * HDMI_TB_ENC_DSC_MODE enum
 */

typedef enum HDMI_TB_ENC_DSC_MODE {
TB_DSC_DISABLE                           = 0x00000000,
TB_DSC_444_RGB                           = 0x00000001,
TB_DSC_NATIVE_422_420                    = 0x00000002,
} HDMI_TB_ENC_DSC_MODE;

/*
 * HDMI_TB_ENC_ENABLE enum
 */

typedef enum HDMI_TB_ENC_ENABLE {
TB_DISABLE                               = 0x00000000,
TB_ENABLE                                = 0x00000001,
} HDMI_TB_ENC_ENABLE;

/*
 * HDMI_TB_ENC_GC_AVMUTE enum
 */

typedef enum HDMI_TB_ENC_GC_AVMUTE {
TB_GC_AVMUTE_SET                         = 0x00000000,
TB_GC_AVMUTE_UNSET                       = 0x00000001,
} HDMI_TB_ENC_GC_AVMUTE;

/*
 * HDMI_TB_ENC_GC_AVMUTE_CONT enum
 */

typedef enum HDMI_TB_ENC_GC_AVMUTE_CONT {
TB_GC_AVMUTE_CONT_DISABLE                = 0x00000000,
TB_GC_AVMUTE_CONT_ENABLE                 = 0x00000001,
} HDMI_TB_ENC_GC_AVMUTE_CONT;

/*
 * HDMI_TB_ENC_GC_CONT enum
 */

typedef enum HDMI_TB_ENC_GC_CONT {
TB_GC_CONT_DISABLE                       = 0x00000000,
TB_GC_CONT_ENABLE                        = 0x00000001,
} HDMI_TB_ENC_GC_CONT;

/*
 * HDMI_TB_ENC_GC_SEND enum
 */

typedef enum HDMI_TB_ENC_GC_SEND {
TB_GC_NOT_SEND                           = 0x00000000,
TB_GC_PKT_SEND                           = 0x00000001,
} HDMI_TB_ENC_GC_SEND;

/*
 * HDMI_TB_ENC_GENERIC_CONT enum
 */

typedef enum HDMI_TB_ENC_GENERIC_CONT {
TB_GENERIC_CONT_DISABLE                  = 0x00000000,
TB_GENERIC_CONT_ENABLE                   = 0x00000001,
} HDMI_TB_ENC_GENERIC_CONT;

/*
 * HDMI_TB_ENC_GENERIC_LOCK_EN enum
 */

typedef enum HDMI_TB_ENC_GENERIC_LOCK_EN {
HDMI_TB_ENC_GENERIC_LOCK_DISABLE         = 0x00000000,
HDMI_TB_ENC_GENERIC_LOCK_ENABLE          = 0x00000001,
} HDMI_TB_ENC_GENERIC_LOCK_EN;

/*
 * HDMI_TB_ENC_GENERIC_SEND enum
 */

typedef enum HDMI_TB_ENC_GENERIC_SEND {
TB_GENERIC_NOT_SEND                      = 0x00000000,
TB_GENERIC_PKT_SEND                      = 0x00000001,
} HDMI_TB_ENC_GENERIC_SEND;

/*
 * HDMI_TB_ENC_ISRC_CONT enum
 */

typedef enum HDMI_TB_ENC_ISRC_CONT {
TB_ISRC_CONT_DISABLE                     = 0x00000000,
TB_ISRC_CONT_ENABLE                      = 0x00000001,
} HDMI_TB_ENC_ISRC_CONT;

/*
 * HDMI_TB_ENC_ISRC_SEND enum
 */

typedef enum HDMI_TB_ENC_ISRC_SEND {
TB_ISRC_NOT_SEND                         = 0x00000000,
TB_ISRC_PKT_SEND                         = 0x00000001,
} HDMI_TB_ENC_ISRC_SEND;

/*
 * HDMI_TB_ENC_METADATA_ENABLE enum
 */

typedef enum HDMI_TB_ENC_METADATA_ENABLE {
TB_METADATA_NOT_SEND                     = 0x00000000,
TB_METADATA_PKT_SEND                     = 0x00000001,
} HDMI_TB_ENC_METADATA_ENABLE;

/*
 * HDMI_TB_ENC_PACKET_LINE_REFERENCE enum
 */

typedef enum HDMI_TB_ENC_PACKET_LINE_REFERENCE {
TB_PKT_LINE_REF_END_OF_ACTIVE            = 0x00000000,
TB_PKT_LINE_REF_OTGSOF                   = 0x00000001,
} HDMI_TB_ENC_PACKET_LINE_REFERENCE;

/*
 * HDMI_TB_ENC_PIXEL_ENCODING enum
 */

typedef enum HDMI_TB_ENC_PIXEL_ENCODING {
TB_PIXEL_ENCODING_444_RGB                = 0x00000000,
TB_PIXEL_ENCODING_422                    = 0x00000001,
TB_PIXEL_ENCODING_420                    = 0x00000002,
} HDMI_TB_ENC_PIXEL_ENCODING;

/*
 * HDMI_TB_ENC_RESET enum
 */

typedef enum HDMI_TB_ENC_RESET {
TB_NOT_RESET                             = 0x00000000,
TB_RESET                                 = 0x00000001,
} HDMI_TB_ENC_RESET;

/*
 * HDMI_TB_ENC_SYNC_PHASE enum
 */

typedef enum HDMI_TB_ENC_SYNC_PHASE {
TB_NOT_SYNC_PHASE_ON_FRAME_START         = 0x00000000,
TB_SYNC_PHASE_ON_FRAME_START             = 0x00000001,
} HDMI_TB_ENC_SYNC_PHASE;

/*
 * INPUT_FIFO_ERROR_TYPE enum
 */

typedef enum INPUT_FIFO_ERROR_TYPE {
TB_NO_ERROR_OCCURRED                     = 0x00000000,
TB_OVERFLOW_OCCURRED                     = 0x00000001,
} INPUT_FIFO_ERROR_TYPE;

/*******************************************************
 * DP_STREAM_ENC Enums
 *******************************************************/

/*
 * DP_STREAM_ENC_OVERFLOW_UNDERFLOW_ERROR enum
 */

typedef enum DP_STREAM_ENC_OVERFLOW_UNDERFLOW_ERROR {
DP_STREAM_ENC_NO_ERROR_OCCURRED          = 0x00000000,
DP_STREAM_ENC_UNDERFLOW_OCCURRED         = 0x00000001,
DP_STREAM_ENC_OVERFLOW_OCCURRED          = 0x00000002,
} DP_STREAM_ENC_OVERFLOW_UNDERFLOW_ERROR;

/*
 * DP_STREAM_ENC_OVERWRITE_LEVEL_SELECT enum
 */

typedef enum DP_STREAM_ENC_OVERWRITE_LEVEL_SELECT {
DP_STREAM_ENC_HARDWARE                   = 0x00000000,
DP_STREAM_ENC_PROGRAMMABLE               = 0x00000001,
} DP_STREAM_ENC_OVERWRITE_LEVEL_SELECT;

/*
 * DP_STREAM_ENC_READ_CLOCK_CONTROL enum
 */

typedef enum DP_STREAM_ENC_READ_CLOCK_CONTROL {
DP_STREAM_ENC_DCCG                       = 0x00000000,
DP_STREAM_ENC_DISPLAY_PIPE               = 0x00000001,
} DP_STREAM_ENC_READ_CLOCK_CONTROL;

/*
 * DP_STREAM_ENC_RESET_CONTROL enum
 */

typedef enum DP_STREAM_ENC_RESET_CONTROL {
DP_STREAM_ENC_NOT_RESET                  = 0x00000000,
DP_STREAM_ENC_RESET                      = 0x00000001,
} DP_STREAM_ENC_RESET_CONTROL;

/*
 * DP_STREAM_ENC_STREAM_ACTIVE enum
 */

typedef enum DP_STREAM_ENC_STREAM_ACTIVE {
DP_STREAM_ENC_VIDEO_STREAM_NOT_ACTIVE    = 0x00000000,
DP_STREAM_ENC_VIDEO_STREAM_ACTIVE        = 0x00000001,
} DP_STREAM_ENC_STREAM_ACTIVE;

/*******************************************************
 * DP_SYM32_ENC Enums
 *******************************************************/

/*
 * ENUM_DP_SYM32_ENC_AUDIO_MUTE enum
 */

typedef enum ENUM_DP_SYM32_ENC_AUDIO_MUTE {
DP_SYM32_ENC_SDP_AUDIO_MUTE_NOT_FORCED   = 0x00000000,
DP_SYM32_ENC_SDP_AUDIO_MUTE_FORCED       = 0x00000001,
} ENUM_DP_SYM32_ENC_AUDIO_MUTE;

/*
 * ENUM_DP_SYM32_ENC_CONTINUOUS_MODE enum
 */

typedef enum ENUM_DP_SYM32_ENC_CONTINUOUS_MODE {
DP_SYM32_ENC_ONE_SHOT_MODE               = 0x00000000,
DP_SYM32_ENC_CONTINUOUS_MODE             = 0x00000001,
} ENUM_DP_SYM32_ENC_CONTINUOUS_MODE;

/*
 * ENUM_DP_SYM32_ENC_CRC_VALID enum
 */

typedef enum ENUM_DP_SYM32_ENC_CRC_VALID {
DP_SYM32_ENC_CRC_NOT_VALID               = 0x00000000,
DP_SYM32_ENC_CRC_VALID                   = 0x00000001,
} ENUM_DP_SYM32_ENC_CRC_VALID;

/*
 * ENUM_DP_SYM32_ENC_DP_COMPONENT_DEPTH enum
 */

typedef enum ENUM_DP_SYM32_ENC_DP_COMPONENT_DEPTH {
DP_SYM32_ENC_COMPONENT_DEPTH_6BPC        = 0x00000000,
DP_SYM32_ENC_COMPONENT_DEPTH_8BPC        = 0x00000001,
DP_SYM32_ENC_COMPONENT_DEPTH_10BPC       = 0x00000002,
DP_SYM32_ENC_COMPONENT_DEPTH_12BPC       = 0x00000003,
} ENUM_DP_SYM32_ENC_DP_COMPONENT_DEPTH;

/*
 * ENUM_DP_SYM32_ENC_ENABLE enum
 */

typedef enum ENUM_DP_SYM32_ENC_ENABLE {
DP_SYM32_ENC_DISABLE                     = 0x00000000,
DP_SYM32_ENC_ENABLE                      = 0x00000001,
} ENUM_DP_SYM32_ENC_ENABLE;

/*
 * ENUM_DP_SYM32_ENC_GSP_DEADLINE_MISSED enum
 */

typedef enum ENUM_DP_SYM32_ENC_GSP_DEADLINE_MISSED {
DP_SYM32_ENC_GSP_DEADLINE_NOT_MISSED     = 0x00000000,
DP_SYM32_ENC_GSP_DEADLINE_MISSED         = 0x00000001,
} ENUM_DP_SYM32_ENC_GSP_DEADLINE_MISSED;

/*
 * ENUM_DP_SYM32_ENC_GSP_ONE_SHOT_TRIGGER_POSITION enum
 */

typedef enum ENUM_DP_SYM32_ENC_GSP_ONE_SHOT_TRIGGER_POSITION {
DP_SYM32_ENC_GSP_SEND_AT_LINE_NUMBER     = 0x00000000,
DP_SYM32_ENC_GSP_SEND_AT_EARLIEST_TIME   = 0x00000001,
} ENUM_DP_SYM32_ENC_GSP_ONE_SHOT_TRIGGER_POSITION;

/*
 * ENUM_DP_SYM32_ENC_GSP_PAYLOAD_SIZE enum
 */

typedef enum ENUM_DP_SYM32_ENC_GSP_PAYLOAD_SIZE {
DP_SYM32_ENC_GSP_PAYLOAD_SIZE_32         = 0x00000000,
DP_SYM32_ENC_GSP_PAYLOAD_SIZE_RESERVED0  = 0x00000001,
DP_SYM32_ENC_GSP_PAYLOAD_SIZE_RESERVED1  = 0x00000002,
DP_SYM32_ENC_GSP_PAYLOAD_SIZE_128        = 0x00000003,
} ENUM_DP_SYM32_ENC_GSP_PAYLOAD_SIZE;

/*
 * ENUM_DP_SYM32_ENC_GSP_TRIGGER_PENDING enum
 */

typedef enum ENUM_DP_SYM32_ENC_GSP_TRIGGER_PENDING {
DP_SYM32_ENC_GSP_TRIGGER_NOT_PENDING     = 0x00000000,
DP_SYM32_ENC_GSP_TRIGGER_PENDING         = 0x00000001,
} ENUM_DP_SYM32_ENC_GSP_TRIGGER_PENDING;

/*
 * ENUM_DP_SYM32_ENC_MEM_PWR_FORCE_ENUM enum
 */

typedef enum ENUM_DP_SYM32_ENC_MEM_PWR_FORCE_ENUM {
DP_SYM32_ENC_MEM_PWR_NO_FORCE_REQUEST    = 0x00000000,
DP_SYM32_ENC_MEM_PWR_FORCE_LIGHT_SLEEP_REQUEST = 0x00000001,
DP_SYM32_ENC_MEM_PWR_FORCE_DEEP_SLEEP_REQUEST = 0x00000002,
DP_SYM32_ENC_MEM_PWR_FORCE_SHUT_DOWN_REQUEST = 0x00000003,
} ENUM_DP_SYM32_ENC_MEM_PWR_FORCE_ENUM;

/*
 * ENUM_DP_SYM32_ENC_OVERFLOW_STATUS enum
 */

typedef enum ENUM_DP_SYM32_ENC_OVERFLOW_STATUS {
DP_SYM32_ENC_NO_OVERFLOW_OCCURRED        = 0x00000000,
DP_SYM32_ENC_OVERFLOW_OCCURRED           = 0x00000001,
} ENUM_DP_SYM32_ENC_OVERFLOW_STATUS;

/*
 * ENUM_DP_SYM32_ENC_PENDING enum
 */

typedef enum ENUM_DP_SYM32_ENC_PENDING {
DP_SYM32_ENC_NOT_PENDING                 = 0x00000000,
DP_SYM32_ENC_PENDING                     = 0x00000001,
} ENUM_DP_SYM32_ENC_PENDING;

/*
 * ENUM_DP_SYM32_ENC_PIXEL_ENCODING enum
 */

typedef enum ENUM_DP_SYM32_ENC_PIXEL_ENCODING {
DP_SYM32_ENC_PIXEL_ENCODING_RGB_YCBCR444 = 0x00000000,
DP_SYM32_ENC_PIXEL_ENCODING_YCBCR422     = 0x00000001,
DP_SYM32_ENC_PIXEL_ENCODING_YCBCR420     = 0x00000002,
DP_SYM32_ENC_PIXEL_ENCODING_Y_ONLY       = 0x00000003,
} ENUM_DP_SYM32_ENC_PIXEL_ENCODING;

/*
 * ENUM_DP_SYM32_ENC_PIXEL_ENCODING_TYPE enum
 */

typedef enum ENUM_DP_SYM32_ENC_PIXEL_ENCODING_TYPE {
DP_SYM32_ENC_UNCOMPRESSED_FORMAT         = 0x00000000,
DP_SYM32_ENC_COMPRESSED_FORMAT           = 0x00000001,
} ENUM_DP_SYM32_ENC_PIXEL_ENCODING_TYPE;

/*
 * ENUM_DP_SYM32_ENC_POWER_STATE_ENUM enum
 */

typedef enum ENUM_DP_SYM32_ENC_POWER_STATE_ENUM {
DP_SYM32_ENC_POWER_STATE_ENUM_ON         = 0x00000000,
DP_SYM32_ENC_POWER_STATE_ENUM_LS         = 0x00000001,
DP_SYM32_ENC_POWER_STATE_ENUM_DS         = 0x00000002,
DP_SYM32_ENC_POWER_STATE_ENUM_SD         = 0x00000003,
} ENUM_DP_SYM32_ENC_POWER_STATE_ENUM;

/*
 * ENUM_DP_SYM32_ENC_RESET enum
 */

typedef enum ENUM_DP_SYM32_ENC_RESET {
DP_SYM32_ENC_NOT_RESET                   = 0x00000000,
DP_SYM32_ENC_RESET                       = 0x00000001,
} ENUM_DP_SYM32_ENC_RESET;

/*
 * ENUM_DP_SYM32_ENC_SDP_PRIORITY enum
 */

typedef enum ENUM_DP_SYM32_ENC_SDP_PRIORITY {
DP_SYM32_ENC_SDP_LOW_PRIORITY            = 0x00000000,
DP_SYM32_ENC_SDP_HIGH_PRIORITY           = 0x00000001,
} ENUM_DP_SYM32_ENC_SDP_PRIORITY;

/*
 * ENUM_DP_SYM32_ENC_SOF_REFERENCE enum
 */

typedef enum ENUM_DP_SYM32_ENC_SOF_REFERENCE {
DP_SYM32_ENC_DP_SOF                      = 0x00000000,
DP_SYM32_ENC_OTG_SOF                     = 0x00000001,
} ENUM_DP_SYM32_ENC_SOF_REFERENCE;

/*
 * ENUM_DP_SYM32_ENC_VID_STREAM_DEFER enum
 */

typedef enum ENUM_DP_SYM32_ENC_VID_STREAM_DEFER {
DP_SYM32_ENC_VID_STREAM_NO_DEFER         = 0x00000000,
DP_SYM32_ENC_VID_STREAM_DEFER_TO_HBLANK  = 0x00000001,
DP_SYM32_ENC_VID_STREAM_DEFER_TO_VBLANK  = 0x00000002,
} ENUM_DP_SYM32_ENC_VID_STREAM_DEFER;

/*******************************************************
 * DP_DPHY_SYM32 Enums
 *******************************************************/

/*
 * ENUM_DP_DPHY_SYM32_CRC_END_EVENT enum
 */

typedef enum ENUM_DP_DPHY_SYM32_CRC_END_EVENT {
DP_DPHY_SYM32_CRC_END_LLCP               = 0x00000000,
DP_DPHY_SYM32_CRC_END_PS_ONLY            = 0x00000001,
DP_DPHY_SYM32_CRC_END_PS_LT_SR           = 0x00000002,
DP_DPHY_SYM32_CRC_END_PS_ANY             = 0x00000003,
} ENUM_DP_DPHY_SYM32_CRC_END_EVENT;

/*
 * ENUM_DP_DPHY_SYM32_CRC_START_EVENT enum
 */

typedef enum ENUM_DP_DPHY_SYM32_CRC_START_EVENT {
DP_DPHY_SYM32_CRC_START_LLCP             = 0x00000000,
DP_DPHY_SYM32_CRC_START_PS_ONLY          = 0x00000001,
DP_DPHY_SYM32_CRC_START_PS_LT_SR         = 0x00000002,
DP_DPHY_SYM32_CRC_START_PS_POST_LT_SR    = 0x00000003,
DP_DPHY_SYM32_CRC_START_TP_START         = 0x00000004,
} ENUM_DP_DPHY_SYM32_CRC_START_EVENT;

/*
 * ENUM_DP_DPHY_SYM32_CRC_TAP_SOURCE enum
 */

typedef enum ENUM_DP_DPHY_SYM32_CRC_TAP_SOURCE {
DP_DPHY_SYM32_CRC_TAP_SOURCE_SCHEDULER   = 0x00000000,
DP_DPHY_SYM32_CRC_TAP_SOURCE_SYMBOL_HANDLER = 0x00000001,
DP_DPHY_SYM32_CRC_TAP_SOURCE_TP_GEN_MUX  = 0x00000002,
} ENUM_DP_DPHY_SYM32_CRC_TAP_SOURCE;

/*
 * ENUM_DP_DPHY_SYM32_CRC_USE_NUM_SYMBOLS enum
 */

typedef enum ENUM_DP_DPHY_SYM32_CRC_USE_NUM_SYMBOLS {
DP_DPHY_SYM32_CRC_USE_END_EVENT          = 0x00000000,
DP_DPHY_SYM32_CRC_USE_NUM_SYMBOLS        = 0x00000001,
} ENUM_DP_DPHY_SYM32_CRC_USE_NUM_SYMBOLS;

/*
 * ENUM_DP_DPHY_SYM32_ENABLE enum
 */

typedef enum ENUM_DP_DPHY_SYM32_ENABLE {
DP_DPHY_SYM32_DISABLE                    = 0x00000000,
DP_DPHY_SYM32_ENABLE                     = 0x00000001,
} ENUM_DP_DPHY_SYM32_ENABLE;

/*
 * ENUM_DP_DPHY_SYM32_ENCRYPT_TYPE enum
 */

typedef enum ENUM_DP_DPHY_SYM32_ENCRYPT_TYPE {
DP_DPHY_SYM32_ENCRYPT_TYPE0              = 0x00000000,
DP_DPHY_SYM32_ENCRYPT_TYPE1              = 0x00000001,
} ENUM_DP_DPHY_SYM32_ENCRYPT_TYPE;

/*
 * ENUM_DP_DPHY_SYM32_MODE enum
 */

typedef enum ENUM_DP_DPHY_SYM32_MODE {
DP_DPHY_SYM32_LT_TPS1                    = 0x00000000,
DP_DPHY_SYM32_LT_TPS2                    = 0x00000001,
DP_DPHY_SYM32_ACTIVE                     = 0x00000002,
DP_DPHY_SYM32_TEST                       = 0x00000003,
} ENUM_DP_DPHY_SYM32_MODE;

/*
 * ENUM_DP_DPHY_SYM32_NUM_LANES enum
 */

typedef enum ENUM_DP_DPHY_SYM32_NUM_LANES {
DP_DPHY_SYM32_1LANE                      = 0x00000000,
DP_DPHY_SYM32_2LANE                      = 0x00000001,
DP_DPHY_SYM32_RESERVED                   = 0x00000002,
DP_DPHY_SYM32_4LANE                      = 0x00000003,
} ENUM_DP_DPHY_SYM32_NUM_LANES;

/*
 * ENUM_DP_DPHY_SYM32_RATE_UPDATE_PENDING enum
 */

typedef enum ENUM_DP_DPHY_SYM32_RATE_UPDATE_PENDING {
DP_DPHY_SYM32_NO_RATE_UPDATE_PENDING     = 0x00000000,
DP_DPHY_SYM32_RATE_UPDATE_PENDING        = 0x00000001,
} ENUM_DP_DPHY_SYM32_RATE_UPDATE_PENDING;

/*
 * ENUM_DP_DPHY_SYM32_RESET enum
 */

typedef enum ENUM_DP_DPHY_SYM32_RESET {
DP_DPHY_SYM32_NOT_RESET                  = 0x00000000,
DP_DPHY_SYM32_RESET                      = 0x00000001,
} ENUM_DP_DPHY_SYM32_RESET;

/*
 * ENUM_DP_DPHY_SYM32_RESET_STATUS enum
 */

typedef enum ENUM_DP_DPHY_SYM32_RESET_STATUS {
DP_DPHY_SYM32_RESET_STATUS_DEASSERTED    = 0x00000000,
DP_DPHY_SYM32_RESET_STATUS_ASSERTED      = 0x00000001,
} ENUM_DP_DPHY_SYM32_RESET_STATUS;

/*
 * ENUM_DP_DPHY_SYM32_SAT_UPDATE enum
 */

typedef enum ENUM_DP_DPHY_SYM32_SAT_UPDATE {
DP_DPHY_SYM32_SAT_NO_UPDATE              = 0x00000000,
DP_DPHY_SYM32_SAT_TRIGGER_UPDATE         = 0x00000001,
DP_DPHY_SYM32_SAT_NOTRIGGER_UPDATE       = 0x00000002,
} ENUM_DP_DPHY_SYM32_SAT_UPDATE;

/*
 * ENUM_DP_DPHY_SYM32_SAT_UPDATE_PENDING enum
 */

typedef enum ENUM_DP_DPHY_SYM32_SAT_UPDATE_PENDING {
DP_DPHY_SYM32_SAT_NO_UPDATE_PENDING      = 0x00000000,
DP_DPHY_SYM32_SAT_TRIGGER_UPDATE_PENDING = 0x00000001,
DP_DPHY_SYM32_SAT_NOTRIGGER_UPDATE_PENDING = 0x00000002,
} ENUM_DP_DPHY_SYM32_SAT_UPDATE_PENDING;

/*
 * ENUM_DP_DPHY_SYM32_STATUS enum
 */

typedef enum ENUM_DP_DPHY_SYM32_STATUS {
DP_DPHY_SYM32_STATUS_IDLE                = 0x00000000,
DP_DPHY_SYM32_STATUS_ENABLED             = 0x00000001,
} ENUM_DP_DPHY_SYM32_STATUS;

/*
 * ENUM_DP_DPHY_SYM32_STREAM_OVR_ENABLE enum
 */

typedef enum ENUM_DP_DPHY_SYM32_STREAM_OVR_ENABLE {
DP_DPHY_SYM32_STREAM_OVR_NONE            = 0x00000000,
DP_DPHY_SYM32_STREAM_OVR_REPLACE         = 0x00000001,
DP_DPHY_SYM32_STREAM_OVR_ALWAYS          = 0x00000002,
} ENUM_DP_DPHY_SYM32_STREAM_OVR_ENABLE;

/*
 * ENUM_DP_DPHY_SYM32_STREAM_OVR_TYPE enum
 */

typedef enum ENUM_DP_DPHY_SYM32_STREAM_OVR_TYPE {
DP_DPHY_SYM32_STREAM_OVR_TYPE_DATA       = 0x00000000,
DP_DPHY_SYM32_STREAM_OVR_TYPE_CONTROL    = 0x00000001,
} ENUM_DP_DPHY_SYM32_STREAM_OVR_TYPE;

/*
 * ENUM_DP_DPHY_SYM32_TP_PRBS_SEL enum
 */

typedef enum ENUM_DP_DPHY_SYM32_TP_PRBS_SEL {
DP_DPHY_SYM32_TP_PRBS_SEL_PRBS7          = 0x00000000,
DP_DPHY_SYM32_TP_PRBS_SEL_PRBS9          = 0x00000001,
DP_DPHY_SYM32_TP_PRBS_SEL_PRBS11         = 0x00000002,
DP_DPHY_SYM32_TP_PRBS_SEL_PRBS15         = 0x00000003,
DP_DPHY_SYM32_TP_PRBS_SEL_PRBS23         = 0x00000004,
DP_DPHY_SYM32_TP_PRBS_SEL_PRBS31         = 0x00000005,
} ENUM_DP_DPHY_SYM32_TP_PRBS_SEL;

/*
 * ENUM_DP_DPHY_SYM32_TP_SELECT enum
 */

typedef enum ENUM_DP_DPHY_SYM32_TP_SELECT {
DP_DPHY_SYM32_TP_SELECT_TPS1             = 0x00000000,
DP_DPHY_SYM32_TP_SELECT_TPS2             = 0x00000001,
DP_DPHY_SYM32_TP_SELECT_PRBS             = 0x00000002,
DP_DPHY_SYM32_TP_SELECT_CUSTOM           = 0x00000003,
DP_DPHY_SYM32_TP_SELECT_SQUARE           = 0x00000004,
} ENUM_DP_DPHY_SYM32_TP_SELECT;

/*******************************************************
 * APG Enums
 *******************************************************/

/*
 * APG_AUDIO_CRC_CONTROL_CH_SEL enum
 */

typedef enum APG_AUDIO_CRC_CONTROL_CH_SEL {
APG_AUDIO_CRC_CH0_SIG                    = 0x00000000,
APG_AUDIO_CRC_CH1_SIG                    = 0x00000001,
APG_AUDIO_CRC_CH2_SIG                    = 0x00000002,
APG_AUDIO_CRC_CH3_SIG                    = 0x00000003,
APG_AUDIO_CRC_CH4_SIG                    = 0x00000004,
APG_AUDIO_CRC_CH5_SIG                    = 0x00000005,
APG_AUDIO_CRC_CH6_SIG                    = 0x00000006,
APG_AUDIO_CRC_CH7_SIG                    = 0x00000007,
APG_AUDIO_CRC_RESERVED_8                 = 0x00000008,
APG_AUDIO_CRC_RESERVED_9                 = 0x00000009,
APG_AUDIO_CRC_RESERVED_10                = 0x0000000a,
APG_AUDIO_CRC_RESERVED_11                = 0x0000000b,
APG_AUDIO_CRC_RESERVED_12                = 0x0000000c,
APG_AUDIO_CRC_RESERVED_13                = 0x0000000d,
APG_AUDIO_CRC_RESERVED_14                = 0x0000000e,
APG_AUDIO_CRC_RESERVED_15                = 0x0000000f,
} APG_AUDIO_CRC_CONTROL_CH_SEL;

/*
 * APG_AUDIO_CRC_CONTROL_CONT enum
 */

typedef enum APG_AUDIO_CRC_CONTROL_CONT {
APG_AUDIO_CRC_ONESHOT                    = 0x00000000,
APG_AUDIO_CRC_CONTINUOUS                 = 0x00000001,
} APG_AUDIO_CRC_CONTROL_CONT;

/*
 * APG_DBG_ACP_TYPE enum
 */

typedef enum APG_DBG_ACP_TYPE {
APG_ACP_TYPE_GENERIC_AUDIO               = 0x00000000,
APG_ACP_TYPE_ICE60958_AUDIO              = 0x00000001,
APG_ACP_TYPE_DVD_AUDIO                   = 0x00000002,
APG_ACP_TYPE_SUPER_AUDIO_CD              = 0x00000003,
} APG_DBG_ACP_TYPE;

/*
 * APG_DBG_AUDIO_DTO_BASE enum
 */

typedef enum APG_DBG_AUDIO_DTO_BASE {
BASE_RATE_48KHZ                          = 0x00000000,
BASE_RATE_44P1KHZ                        = 0x00000001,
} APG_DBG_AUDIO_DTO_BASE;

/*
 * APG_DBG_AUDIO_DTO_DIV enum
 */

typedef enum APG_DBG_AUDIO_DTO_DIV {
DIVISOR_BY1                              = 0x00000000,
DIVISOR_BY2_RESERVED                     = 0x00000001,
DIVISOR_BY3                              = 0x00000002,
DIVISOR_BY4_RESERVED                     = 0x00000003,
DIVISOR_BY5_RESERVED                     = 0x00000004,
DIVISOR_BY6_RESERVED                     = 0x00000005,
DIVISOR_BY7_RESERVED                     = 0x00000006,
DIVISOR_BY8_RESERVED                     = 0x00000007,
} APG_DBG_AUDIO_DTO_DIV;

/*
 * APG_DBG_AUDIO_DTO_MULTI enum
 */

typedef enum APG_DBG_AUDIO_DTO_MULTI {
MULTIPLE_BY1                             = 0x00000000,
MULTIPLE_BY2                             = 0x00000001,
MULTIPLE_BY3_RESERVED                    = 0x00000002,
MULTIPLE_BY4                             = 0x00000003,
MULTIPLE_RESERVED                        = 0x00000004,
} APG_DBG_AUDIO_DTO_MULTI;

/*
 * APG_DBG_MUX_SEL enum
 */

typedef enum APG_DBG_MUX_SEL {
APG_FUNCTIONAL_MODE                      = 0x00000000,
APG_DEBUG_AUDIO_MODE                     = 0x00000001,
} APG_DBG_MUX_SEL;

/*
 * APG_DP_ASP_CHANNEL_COUNT_OVERRIDE enum
 */

typedef enum APG_DP_ASP_CHANNEL_COUNT_OVERRIDE {
APG_DP_ASP_CHANNEL_COUNT_FROM_AZ         = 0x00000000,
APG_DP_ASP_CHANNEL_COUNT_OVERRIDE_ENABLED = 0x00000001,
} APG_DP_ASP_CHANNEL_COUNT_OVERRIDE;

/*
 * APG_MEM_POWER_STATE enum
 */

typedef enum APG_MEM_POWER_STATE {
APG_MEM_POWER_STATE_ON                   = 0x00000000,
APG_MEM_POWER_STATE_LS                   = 0x00000001,
APG_MEM_POWER_STATE_DS                   = 0x00000002,
APG_MEM_POWER_STATE_SD                   = 0x00000003,
} APG_MEM_POWER_STATE;

/*
 * APG_MEM_PWR_DIS_CTRL enum
 */

typedef enum APG_MEM_PWR_DIS_CTRL {
APG_MEM_ENABLE_MEM_PWR_CTRL              = 0x00000000,
APG_MEM_DISABLE_MEM_PWR_CTRL             = 0x00000001,
} APG_MEM_PWR_DIS_CTRL;

/*
 * APG_MEM_PWR_FORCE_CTRL enum
 */

typedef enum APG_MEM_PWR_FORCE_CTRL {
APG_MEM_NO_FORCE_REQUEST                 = 0x00000000,
APG_MEM_FORCE_LIGHT_SLEEP_REQUEST        = 0x00000001,
APG_MEM_FORCE_DEEP_SLEEP_REQUEST         = 0x00000002,
APG_MEM_FORCE_SHUT_DOWN_REQUEST          = 0x00000003,
} APG_MEM_PWR_FORCE_CTRL;

/*
 * APG_PACKET_CONTROL_ACP_SOURCE enum
 */

typedef enum APG_PACKET_CONTROL_ACP_SOURCE {
APG_ACP_SOURCE_NO_OVERRIDE               = 0x00000000,
APG_ACP_OVERRIDE                         = 0x00000001,
} APG_PACKET_CONTROL_ACP_SOURCE;

/*
 * APG_PACKET_CONTROL_AUDIO_INFO_SOURCE enum
 */

typedef enum APG_PACKET_CONTROL_AUDIO_INFO_SOURCE {
APG_INFOFRAME_SOURCE_NO_OVERRIDE         = 0x00000000,
APG_INFOFRAME_SOURCE_FROM_APG_REGISTERS  = 0x00000001,
} APG_PACKET_CONTROL_AUDIO_INFO_SOURCE;

/*
 * APG_RAMP_CONTROL_SIGN enum
 */

typedef enum APG_RAMP_CONTROL_SIGN {
APG_RAMP_SIGNED                          = 0x00000000,
APG_RAMP_UNSIGNED                        = 0x00000001,
} APG_RAMP_CONTROL_SIGN;

/*******************************************************
 * DCIO Enums
 *******************************************************/

/*
 * DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL enum
 */

typedef enum DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL {
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER1 = 0x00000000,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER2 = 0x00000001,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER3 = 0x00000002,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER4 = 0x00000003,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER5 = 0x00000004,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER6 = 0x00000005,
} DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL;

/*
 * DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL enum
 */

typedef enum DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL {
DCIO_TEST_CLK_SEL_DISPCLK                = 0x00000000,
DCIO_TEST_CLK_SEL_GATED_DISPCLK          = 0x00000001,
DCIO_TEST_CLK_SEL_SOCCLK                 = 0x00000002,
} DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL;

/*
 * DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS enum
 */

typedef enum DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS {
DCIO_DISPCLK_R_DCIO_GATE_DISABLE         = 0x00000000,
DCIO_DISPCLK_R_DCIO_GATE_ENABLE          = 0x00000001,
} DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS;

/*
 * DCIO_DBG_ASYNC_4BIT_SEL enum
 */

typedef enum DCIO_DBG_ASYNC_4BIT_SEL {
DCIO_DBG_ASYNC_4BIT_SEL_3TO0             = 0x00000000,
DCIO_DBG_ASYNC_4BIT_SEL_7TO4             = 0x00000001,
DCIO_DBG_ASYNC_4BIT_SEL_11TO8            = 0x00000002,
DCIO_DBG_ASYNC_4BIT_SEL_15TO12           = 0x00000003,
DCIO_DBG_ASYNC_4BIT_SEL_19TO16           = 0x00000004,
DCIO_DBG_ASYNC_4BIT_SEL_23TO20           = 0x00000005,
DCIO_DBG_ASYNC_4BIT_SEL_27TO24           = 0x00000006,
DCIO_DBG_ASYNC_4BIT_SEL_31TO28           = 0x00000007,
} DCIO_DBG_ASYNC_4BIT_SEL;

/*
 * DCIO_DBG_ASYNC_BLOCK_SEL enum
 */

typedef enum DCIO_DBG_ASYNC_BLOCK_SEL {
DCIO_DBG_ASYNC_BLOCK_SEL_OVERRIDE        = 0x00000000,
DCIO_DBG_ASYNC_BLOCK_SEL_DCCG            = 0x00000001,
DCIO_DBG_ASYNC_BLOCK_SEL_DCIO            = 0x00000002,
DCIO_DBG_ASYNC_BLOCK_SEL_DIO             = 0x00000003,
} DCIO_DBG_ASYNC_BLOCK_SEL;

/*
 * DCIO_DCRXPHY_SOFT_RESET enum
 */

typedef enum DCIO_DCRXPHY_SOFT_RESET {
DCIO_DCRXPHY_SOFT_RESET_DEASSERT         = 0x00000000,
DCIO_DCRXPHY_SOFT_RESET_ASSERT           = 0x00000001,
} DCIO_DCRXPHY_SOFT_RESET;

/*
 * DCIO_DC_GENERICA_SEL enum
 */

typedef enum DCIO_DC_GENERICA_SEL {
DCIO_GENERICA_SEL_STEREOSYNC             = 0x00000001,
DCIO_GENERICA_SEL_GENERICA_DCCG          = 0x0000000a,
DCIO_GENERICA_SEL_SYNCEN                 = 0x0000000b,
} DCIO_DC_GENERICA_SEL;

/*
 * DCIO_DC_GENERICB_SEL enum
 */

typedef enum DCIO_DC_GENERICB_SEL {
DCIO_GENERICB_SEL_STEREOSYNC             = 0x00000001,
DCIO_GENERICB_SEL_GENERICB_DCCG          = 0x0000000a,
DCIO_GENERICB_SEL_SYNCEN                 = 0x0000000b,
} DCIO_DC_GENERICB_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL {
DCIO_UNIPHYA_TEST_FBDIV_CLK_DIV2         = 0x00000000,
DCIO_UNIPHYB_TEST_FBDIV_CLK_DIV2         = 0x00000001,
DCIO_UNIPHYC_TEST_FBDIV_CLK_DIV2         = 0x00000002,
DCIO_UNIPHYD_TEST_FBDIV_CLK_DIV2         = 0x00000003,
DCIO_UNIPHYE_TEST_FBDIV_CLK_DIV2         = 0x00000004,
DCIO_UNIPHYF_TEST_FBDIV_CLK_DIV2         = 0x00000005,
DCIO_UNIPHYG_TEST_FBDIV_CLK_DIV2         = 0x00000006,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL {
DCIO_UNIPHYA_FBDIV_CLK                   = 0x00000000,
DCIO_UNIPHYB_FBDIV_CLK                   = 0x00000001,
DCIO_UNIPHYC_FBDIV_CLK                   = 0x00000002,
DCIO_UNIPHYD_FBDIV_CLK                   = 0x00000003,
DCIO_UNIPHYE_FBDIV_CLK                   = 0x00000004,
DCIO_UNIPHYF_FBDIV_CLK                   = 0x00000005,
DCIO_UNIPHYG_FBDIV_CLK                   = 0x00000006,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL {
DCIO_UNIPHYA_FBDIV_SSC_CLK               = 0x00000000,
DCIO_UNIPHYB_FBDIV_SSC_CLK               = 0x00000001,
DCIO_UNIPHYC_FBDIV_SSC_CLK               = 0x00000002,
DCIO_UNIPHYD_FBDIV_SSC_CLK               = 0x00000003,
DCIO_UNIPHYE_FBDIV_SSC_CLK               = 0x00000004,
DCIO_UNIPHYF_FBDIV_SSC_CLK               = 0x00000005,
DCIO_UNIPHYG_FBDIV_SSC_CLK               = 0x00000006,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL {
DCIO_UNIPHYA_TEST_REFDIV_CLK             = 0x00000000,
DCIO_UNIPHYB_TEST_REFDIV_CLK             = 0x00000001,
DCIO_UNIPHYC_TEST_REFDIV_CLK             = 0x00000002,
DCIO_UNIPHYD_TEST_REFDIV_CLK             = 0x00000003,
DCIO_UNIPHYE_TEST_REFDIV_CLK             = 0x00000004,
DCIO_UNIPHYF_TEST_REFDIV_CLK             = 0x00000005,
DCIO_UNIPHYG_TEST_REFDIV_CLK             = 0x00000006,
} DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL;

/*
 * DCIO_DC_GPIO_DEBUG_DPRX_LOOPBACK_ENABLE enum
 */

typedef enum DCIO_DC_GPIO_DEBUG_DPRX_LOOPBACK_ENABLE {
DCIO_DPRX_LOOPBACK_ENABLE_NORMAL         = 0x00000000,
DCIO_DPRX_LOOPBACK_ENABLE_LOOP           = 0x00000001,
} DCIO_DC_GPIO_DEBUG_DPRX_LOOPBACK_ENABLE;

/*
 * DCIO_DC_GPU_TIMER_READ_SELECT enum
 */

typedef enum DCIO_DC_GPU_TIMER_READ_SELECT {
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_V_UPDATE = 0x00000000,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_V_UPDATE = 0x00000001,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_P_FLIP = 0x00000002,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_P_FLIP = 0x00000003,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_VSYNC_NOM = 0x00000004,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_VSYNC_NOM = 0x00000005,
} DCIO_DC_GPU_TIMER_READ_SELECT;

/*
 * DCIO_DC_GPU_TIMER_START_POSITION enum
 */

typedef enum DCIO_DC_GPU_TIMER_START_POSITION {
DCIO_GPU_TIMER_START_0_END_27            = 0x00000000,
DCIO_GPU_TIMER_START_1_END_28            = 0x00000001,
DCIO_GPU_TIMER_START_2_END_29            = 0x00000002,
DCIO_GPU_TIMER_START_3_END_30            = 0x00000003,
DCIO_GPU_TIMER_START_4_END_31            = 0x00000004,
DCIO_GPU_TIMER_START_6_END_33            = 0x00000005,
DCIO_GPU_TIMER_START_8_END_35            = 0x00000006,
DCIO_GPU_TIMER_START_10_END_37           = 0x00000007,
} DCIO_DC_GPU_TIMER_START_POSITION;

/*
 * DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL enum
 */

typedef enum DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL {
DCIO_GENLK_CLK_OUTPUT_SEL_DISABLE        = 0x00000000,
DCIO_GENLK_CLK_OUTPUT_SEL_PPLL1          = 0x00000001,
DCIO_GENLK_CLK_OUTPUT_SEL_PPLL2          = 0x00000002,
DCIO_GENLK_CLK_OUTPUT_SEL_RESERVED_VALUE3 = 0x00000003,
} DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL;

/*
 * DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL enum
 */

typedef enum DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL {
DCIO_HSYNCA_OUTPUT_SEL_DISABLE           = 0x00000000,
DCIO_HSYNCA_OUTPUT_SEL_PPLL1             = 0x00000001,
DCIO_HSYNCA_OUTPUT_SEL_PPLL2             = 0x00000002,
DCIO_HSYNCA_OUTPUT_SEL_RESERVED          = 0x00000003,
} DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL;

/*
 * DCIO_DIO_EXT_VSYNC_MASK enum
 */

typedef enum DCIO_DIO_EXT_VSYNC_MASK {
DCIO_EXT_VSYNC_MASK_NONE                 = 0x00000000,
DCIO_EXT_VSYNC_MASK_PIPE0                = 0x00000001,
DCIO_EXT_VSYNC_MASK_PIPE1                = 0x00000002,
DCIO_EXT_VSYNC_MASK_PIPE2                = 0x00000003,
DCIO_EXT_VSYNC_MASK_PIPE3                = 0x00000004,
DCIO_EXT_VSYNC_MASK_PIPE4                = 0x00000005,
DCIO_EXT_VSYNC_MASK_PIPE5                = 0x00000006,
DCIO_EXT_VSYNC_MASK_NONE_DUPLICATE       = 0x00000007,
} DCIO_DIO_EXT_VSYNC_MASK;

/*
 * DCIO_DIO_OTG_EXT_VSYNC_MUX enum
 */

typedef enum DCIO_DIO_OTG_EXT_VSYNC_MUX {
DCIO_EXT_VSYNC_MUX_SWAPLOCKB             = 0x00000000,
DCIO_EXT_VSYNC_MUX_OTG0                  = 0x00000001,
DCIO_EXT_VSYNC_MUX_OTG1                  = 0x00000002,
DCIO_EXT_VSYNC_MUX_OTG2                  = 0x00000003,
DCIO_EXT_VSYNC_MUX_OTG3                  = 0x00000004,
DCIO_EXT_VSYNC_MUX_OTG4                  = 0x00000005,
DCIO_EXT_VSYNC_MUX_OTG5                  = 0x00000006,
DCIO_EXT_VSYNC_MUX_GENERICB              = 0x00000007,
} DCIO_DIO_OTG_EXT_VSYNC_MUX;

/*
 * DCIO_DPCS_INTERRUPT_MASK enum
 */

typedef enum DCIO_DPCS_INTERRUPT_MASK {
DCIO_DPCS_INTERRUPT_DISABLE              = 0x00000000,
DCIO_DPCS_INTERRUPT_ENABLE               = 0x00000001,
} DCIO_DPCS_INTERRUPT_MASK;

/*
 * DCIO_DPCS_INTERRUPT_TYPE enum
 */

typedef enum DCIO_DPCS_INTERRUPT_TYPE {
DCIO_DPCS_INTERRUPT_TYPE_LEVEL_BASED     = 0x00000000,
DCIO_DPCS_INTERRUPT_TYPE_PULSE_BASED     = 0x00000001,
} DCIO_DPCS_INTERRUPT_TYPE;

/*
 * DCIO_DSYNC_SOFT_RESET enum
 */

typedef enum DCIO_DSYNC_SOFT_RESET {
DCIO_DSYNC_SOFT_RESET_DEASSERT           = 0x00000000,
DCIO_DSYNC_SOFT_RESET_ASSERT             = 0x00000001,
} DCIO_DSYNC_SOFT_RESET;

/*
 * DCIO_GENLK_CLK_GSL_MASK enum
 */

typedef enum DCIO_GENLK_CLK_GSL_MASK {
DCIO_GENLK_CLK_GSL_MASK_NO               = 0x00000000,
DCIO_GENLK_CLK_GSL_MASK_TIMING           = 0x00000001,
DCIO_GENLK_CLK_GSL_MASK_STEREO           = 0x00000002,
} DCIO_GENLK_CLK_GSL_MASK;

/*
 * DCIO_GENLK_VSYNC_GSL_MASK enum
 */

typedef enum DCIO_GENLK_VSYNC_GSL_MASK {
DCIO_GENLK_VSYNC_GSL_MASK_NO             = 0x00000000,
DCIO_GENLK_VSYNC_GSL_MASK_TIMING         = 0x00000001,
DCIO_GENLK_VSYNC_GSL_MASK_STEREO         = 0x00000002,
} DCIO_GENLK_VSYNC_GSL_MASK;

/*
 * DCIO_GSL_SEL enum
 */

typedef enum DCIO_GSL_SEL {
DCIO_GSL_SEL_GROUP_0                     = 0x00000000,
DCIO_GSL_SEL_GROUP_1                     = 0x00000001,
DCIO_GSL_SEL_GROUP_2                     = 0x00000002,
} DCIO_GSL_SEL;

/*
 * DCIO_PHY_HPO_ENC_SRC_SEL enum
 */

typedef enum DCIO_PHY_HPO_ENC_SRC_SEL {
HPO_SRC0                                 = 0x00000000,
HPO_SRC_RESERVED                         = 0x00000001,
} DCIO_PHY_HPO_ENC_SRC_SEL;

/*
 * DCIO_SWAPLOCK_A_GSL_MASK enum
 */

typedef enum DCIO_SWAPLOCK_A_GSL_MASK {
DCIO_SWAPLOCK_A_GSL_MASK_NO              = 0x00000000,
DCIO_SWAPLOCK_A_GSL_MASK_TIMING          = 0x00000001,
DCIO_SWAPLOCK_A_GSL_MASK_STEREO          = 0x00000002,
} DCIO_SWAPLOCK_A_GSL_MASK;

/*
 * DCIO_SWAPLOCK_B_GSL_MASK enum
 */

typedef enum DCIO_SWAPLOCK_B_GSL_MASK {
DCIO_SWAPLOCK_B_GSL_MASK_NO              = 0x00000000,
DCIO_SWAPLOCK_B_GSL_MASK_TIMING          = 0x00000001,
DCIO_SWAPLOCK_B_GSL_MASK_STEREO          = 0x00000002,
} DCIO_SWAPLOCK_B_GSL_MASK;

/*
 * DCIO_UNIPHY_CHANNEL_XBAR_SOURCE enum
 */

typedef enum DCIO_UNIPHY_CHANNEL_XBAR_SOURCE {
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH0      = 0x00000000,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH1      = 0x00000001,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH2      = 0x00000002,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH3      = 0x00000003,
} DCIO_UNIPHY_CHANNEL_XBAR_SOURCE;

/*
 * DCIO_UNIPHY_IMPCAL_SEL enum
 */

typedef enum DCIO_UNIPHY_IMPCAL_SEL {
DCIO_UNIPHY_IMPCAL_SEL_TEMPERATURE       = 0x00000000,
DCIO_UNIPHY_IMPCAL_SEL_BINARY            = 0x00000001,
} DCIO_UNIPHY_IMPCAL_SEL;

/*
 * DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT enum
 */

typedef enum DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT {
DCIO_UNIPHY_CHANNEL_NO_INVERSION         = 0x00000000,
DCIO_UNIPHY_CHANNEL_INVERTED             = 0x00000001,
} DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT;

/*
 * DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK enum
 */

typedef enum DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK {
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_DISALLOW = 0x00000000,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW   = 0x00000001,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW_DEBOUNCED = 0x00000002,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW_TOGGLE_FILTERED = 0x00000003,
} DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK;

/*******************************************************
 * DCIO_CHIP Enums
 *******************************************************/

/*
 * DCIOCHIP_AUX_ALL_PWR_OK enum
 */

typedef enum DCIOCHIP_AUX_ALL_PWR_OK {
DCIOCHIP_AUX_ALL_PWR_OK_0                = 0x00000000,
DCIOCHIP_AUX_ALL_PWR_OK_1                = 0x00000001,
} DCIOCHIP_AUX_ALL_PWR_OK;

/*
 * DCIOCHIP_AUX_CSEL0P9 enum
 */

typedef enum DCIOCHIP_AUX_CSEL0P9 {
DCIOCHIP_AUX_CSEL_DEC1P0                 = 0x00000000,
DCIOCHIP_AUX_CSEL_DEC0P9                 = 0x00000001,
} DCIOCHIP_AUX_CSEL0P9;

/*
 * DCIOCHIP_AUX_CSEL1P1 enum
 */

typedef enum DCIOCHIP_AUX_CSEL1P1 {
DCIOCHIP_AUX_CSEL_INC1P0                 = 0x00000000,
DCIOCHIP_AUX_CSEL_INC1P1                 = 0x00000001,
} DCIOCHIP_AUX_CSEL1P1;

/*
 * DCIOCHIP_AUX_FALLSLEWSEL enum
 */

typedef enum DCIOCHIP_AUX_FALLSLEWSEL {
DCIOCHIP_AUX_FALLSLEWSEL_LOW             = 0x00000000,
DCIOCHIP_AUX_FALLSLEWSEL_HIGH0           = 0x00000001,
DCIOCHIP_AUX_FALLSLEWSEL_HIGH1           = 0x00000002,
DCIOCHIP_AUX_FALLSLEWSEL_ULTRAHIGH       = 0x00000003,
} DCIOCHIP_AUX_FALLSLEWSEL;

/*
 * DCIOCHIP_AUX_HYS_TUNE enum
 */

typedef enum DCIOCHIP_AUX_HYS_TUNE {
DCIOCHIP_AUX_HYS_TUNE_0                  = 0x00000000,
DCIOCHIP_AUX_HYS_TUNE_1                  = 0x00000001,
DCIOCHIP_AUX_HYS_TUNE_2                  = 0x00000002,
DCIOCHIP_AUX_HYS_TUNE_3                  = 0x00000003,
} DCIOCHIP_AUX_HYS_TUNE;

/*
 * DCIOCHIP_AUX_RECEIVER_SEL enum
 */

typedef enum DCIOCHIP_AUX_RECEIVER_SEL {
DCIOCHIP_AUX_RECEIVER_SEL_0              = 0x00000000,
DCIOCHIP_AUX_RECEIVER_SEL_1              = 0x00000001,
DCIOCHIP_AUX_RECEIVER_SEL_2              = 0x00000002,
DCIOCHIP_AUX_RECEIVER_SEL_3              = 0x00000003,
} DCIOCHIP_AUX_RECEIVER_SEL;

/*
 * DCIOCHIP_AUX_RSEL0P9 enum
 */

typedef enum DCIOCHIP_AUX_RSEL0P9 {
DCIOCHIP_AUX_RSEL_DEC1P0                 = 0x00000000,
DCIOCHIP_AUX_RSEL_DEC0P9                 = 0x00000001,
} DCIOCHIP_AUX_RSEL0P9;

/*
 * DCIOCHIP_AUX_RSEL1P1 enum
 */

typedef enum DCIOCHIP_AUX_RSEL1P1 {
DCIOCHIP_AUX_RSEL_INC1P0                 = 0x00000000,
DCIOCHIP_AUX_RSEL_INC1P1                 = 0x00000001,
} DCIOCHIP_AUX_RSEL1P1;

/*
 * DCIOCHIP_AUX_SPIKESEL enum
 */

typedef enum DCIOCHIP_AUX_SPIKESEL {
DCIOCHIP_AUX_SPIKESEL_50NS               = 0x00000000,
DCIOCHIP_AUX_SPIKESEL_10NS               = 0x00000001,
} DCIOCHIP_AUX_SPIKESEL;

/*
 * DCIOCHIP_AUX_VOD_TUNE enum
 */

typedef enum DCIOCHIP_AUX_VOD_TUNE {
DCIOCHIP_AUX_VOD_TUNE_0                  = 0x00000000,
DCIOCHIP_AUX_VOD_TUNE_1                  = 0x00000001,
DCIOCHIP_AUX_VOD_TUNE_2                  = 0x00000002,
DCIOCHIP_AUX_VOD_TUNE_3                  = 0x00000003,
} DCIOCHIP_AUX_VOD_TUNE;

/*
 * DCIOCHIP_GPIO_MASK_EN enum
 */

typedef enum DCIOCHIP_GPIO_MASK_EN {
DCIOCHIP_GPIO_MASK_EN_HARDWARE           = 0x00000000,
DCIOCHIP_GPIO_MASK_EN_SOFTWARE           = 0x00000001,
} DCIOCHIP_GPIO_MASK_EN;

/*
 * DCIOCHIP_HPD_SEL enum
 */

typedef enum DCIOCHIP_HPD_SEL {
DCIOCHIP_HPD_SEL_ASYNC                   = 0x00000000,
DCIOCHIP_HPD_SEL_CLOCKED                 = 0x00000001,
} DCIOCHIP_HPD_SEL;

/*
 * DCIOCHIP_I2C_COMPSEL enum
 */

typedef enum DCIOCHIP_I2C_COMPSEL {
DCIOCHIP_I2C_REC_SCHMIT                  = 0x00000000,
DCIOCHIP_I2C_REC_COMPARATOR              = 0x00000001,
} DCIOCHIP_I2C_COMPSEL;

/*
 * DCIOCHIP_I2C_FALLSLEWSEL enum
 */

typedef enum DCIOCHIP_I2C_FALLSLEWSEL {
DCIOCHIP_I2C_FALLSLEWSEL_00              = 0x00000000,
DCIOCHIP_I2C_FALLSLEWSEL_01              = 0x00000001,
DCIOCHIP_I2C_FALLSLEWSEL_10              = 0x00000002,
DCIOCHIP_I2C_FALLSLEWSEL_11              = 0x00000003,
} DCIOCHIP_I2C_FALLSLEWSEL;

/*
 * DCIOCHIP_I2C_RECEIVER_SEL enum
 */

typedef enum DCIOCHIP_I2C_RECEIVER_SEL {
DCIOCHIP_I2C_RECEIVER_SEL_0              = 0x00000000,
DCIOCHIP_I2C_RECEIVER_SEL_1              = 0x00000001,
DCIOCHIP_I2C_RECEIVER_SEL_2              = 0x00000002,
DCIOCHIP_I2C_RECEIVER_SEL_3              = 0x00000003,
} DCIOCHIP_I2C_RECEIVER_SEL;

/*
 * DCIOCHIP_I2C_VPH_1V2_EN enum
 */

typedef enum DCIOCHIP_I2C_VPH_1V2_EN {
DCIOCHIP_I2C_VPH_1V2_EN_0                = 0x00000000,
DCIOCHIP_I2C_VPH_1V2_EN_1                = 0x00000001,
} DCIOCHIP_I2C_VPH_1V2_EN;

/*
 * DCIOCHIP_INVERT enum
 */

typedef enum DCIOCHIP_INVERT {
DCIOCHIP_POL_NON_INVERT                  = 0x00000000,
DCIOCHIP_POL_INVERT                      = 0x00000001,
} DCIOCHIP_INVERT;

/*
 * DCIOCHIP_MASK enum
 */

typedef enum DCIOCHIP_MASK {
DCIOCHIP_MASK_DISABLE                    = 0x00000000,
DCIOCHIP_MASK_ENABLE                     = 0x00000001,
} DCIOCHIP_MASK;

/*
 * DCIOCHIP_PAD_MODE enum
 */

typedef enum DCIOCHIP_PAD_MODE {
DCIOCHIP_PAD_MODE_DDC                    = 0x00000000,
DCIOCHIP_PAD_MODE_DP                     = 0x00000001,
} DCIOCHIP_PAD_MODE;

/*
 * DCIOCHIP_PD_EN enum
 */

typedef enum DCIOCHIP_PD_EN {
DCIOCHIP_PD_EN_NOTALLOW                  = 0x00000000,
DCIOCHIP_PD_EN_ALLOW                     = 0x00000001,
} DCIOCHIP_PD_EN;

/*
 * DCIOCHIP_REF_27_SRC_SEL enum
 */

typedef enum DCIOCHIP_REF_27_SRC_SEL {
DCIOCHIP_REF_27_SRC_SEL_XTAL_DIVIDER     = 0x00000000,
DCIOCHIP_REF_27_SRC_SEL_DISP_CLKIN2_DIVIDER = 0x00000001,
DCIOCHIP_REF_27_SRC_SEL_XTAL_BYPASS      = 0x00000002,
DCIOCHIP_REF_27_SRC_SEL_DISP_CLKIN2_BYPASS = 0x00000003,
} DCIOCHIP_REF_27_SRC_SEL;

/*******************************************************
 * PWRSEQ Enums
 *******************************************************/

/*
 * PWRSEQ_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE enum
 */

typedef enum PWRSEQ_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE {
PWRSEQ_BL_PWM_OVERRIDE_BL_OUT_DISABLE    = 0x00000000,
PWRSEQ_BL_PWM_OVERRIDE_BL_OUT_ENABLE     = 0x00000001,
} PWRSEQ_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE;

/*
 * PWRSEQ_BL_PWM_CNTL2_BL_PWM_OVERRIDE_PANEL_PWRSEQ_EN enum
 */

typedef enum PWRSEQ_BL_PWM_CNTL2_BL_PWM_OVERRIDE_PANEL_PWRSEQ_EN {
PWRSEQ_BL_PWM_OVERRIDE_PANEL_PWRSEQ_EN_NORMAL = 0x00000000,
PWRSEQ_BL_PWM_OVERRIDE_PANEL_PWRSEQ_EN_PWM = 0x00000001,
} PWRSEQ_BL_PWM_CNTL2_BL_PWM_OVERRIDE_PANEL_PWRSEQ_EN;

/*
 * PWRSEQ_BL_PWM_CNTL2_DBG_BL_PWM_INPUT_REFCLK_SELECT enum
 */

typedef enum PWRSEQ_BL_PWM_CNTL2_DBG_BL_PWM_INPUT_REFCLK_SELECT {
PWRSEQ_DBG_BL_PWM_INPUT_REFCLK_SELECT_NORMAL = 0x00000000,
PWRSEQ_DBG_BL_PWM_INPUT_REFCLK_SELECT_DEBUG1 = 0x00000001,
PWRSEQ_DBG_BL_PWM_INPUT_REFCLK_SELECT_DEBUG2 = 0x00000002,
PWRSEQ_DBG_BL_PWM_INPUT_REFCLK_SELECT_DEBUG3 = 0x00000003,
} PWRSEQ_BL_PWM_CNTL2_DBG_BL_PWM_INPUT_REFCLK_SELECT;

/*
 * PWRSEQ_BL_PWM_CNTL_BL_PWM_EN enum
 */

typedef enum PWRSEQ_BL_PWM_CNTL_BL_PWM_EN {
PWRSEQ_BL_PWM_DISABLE                    = 0x00000000,
PWRSEQ_BL_PWM_ENABLE                     = 0x00000001,
} PWRSEQ_BL_PWM_CNTL_BL_PWM_EN;

/*
 * PWRSEQ_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN enum
 */

typedef enum PWRSEQ_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN {
PWRSEQ_BL_PWM_FRACTIONAL_DISABLE         = 0x00000000,
PWRSEQ_BL_PWM_FRACTIONAL_ENABLE          = 0x00000001,
} PWRSEQ_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN;

/*
 * PWRSEQ_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN enum
 */

typedef enum PWRSEQ_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN {
PWRSEQ_BL_PWM_GRP1_IGNORE_MASTER_LOCK_ENABLE = 0x00000000,
PWRSEQ_BL_PWM_GRP1_IGNORE_MASTER_LOCK_DISABLE = 0x00000001,
} PWRSEQ_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN;

/*
 * PWRSEQ_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN enum
 */

typedef enum PWRSEQ_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN {
PWRSEQ_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN_BL_PWM = 0x00000000,
PWRSEQ_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN_BL1_PWM = 0x00000001,
} PWRSEQ_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN;

/*
 * PWRSEQ_BL_PWM_GRP1_REG_LOCK enum
 */

typedef enum PWRSEQ_BL_PWM_GRP1_REG_LOCK {
PWRSEQ_BL_PWM_GRP1_REG_LOCK_DISABLE      = 0x00000000,
PWRSEQ_BL_PWM_GRP1_REG_LOCK_ENABLE       = 0x00000001,
} PWRSEQ_BL_PWM_GRP1_REG_LOCK;

/*
 * PWRSEQ_BL_PWM_GRP1_UPDATE_AT_FRAME_START enum
 */

typedef enum PWRSEQ_BL_PWM_GRP1_UPDATE_AT_FRAME_START {
PWRSEQ_BL_PWM_GRP1_UPDATE_AT_FRAME_START_DISABLE = 0x00000000,
PWRSEQ_BL_PWM_GRP1_UPDATE_AT_FRAME_START_ENABLE = 0x00000001,
} PWRSEQ_BL_PWM_GRP1_UPDATE_AT_FRAME_START;

/*
 * PWRSEQ_GPIO_MASK_EN enum
 */

typedef enum PWRSEQ_GPIO_MASK_EN {
PWRSEQ_GPIO_MASK_EN_HARDWARE             = 0x00000000,
PWRSEQ_GPIO_MASK_EN_SOFTWARE             = 0x00000001,
} PWRSEQ_GPIO_MASK_EN;

/*
 * PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_BLON enum
 */

typedef enum PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_BLON {
PWRSEQ_PANEL_BLON_OFF                    = 0x00000000,
PWRSEQ_PANEL_BLON_ON                     = 0x00000001,
} PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_BLON;

/*
 * PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_BLON_POL enum
 */

typedef enum PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_BLON_POL {
PWRSEQ_PANEL_BLON_POL_NON_INVERT         = 0x00000000,
PWRSEQ_PANEL_BLON_POL_INVERT             = 0x00000001,
} PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_BLON_POL;

/*
 * PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_DIGON enum
 */

typedef enum PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_DIGON {
PWRSEQ_PANEL_DIGON_OFF                   = 0x00000000,
PWRSEQ_PANEL_DIGON_ON                    = 0x00000001,
} PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_DIGON;

/*
 * PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_DIGON_POL enum
 */

typedef enum PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_DIGON_POL {
PWRSEQ_PANEL_DIGON_POL_NON_INVERT        = 0x00000000,
PWRSEQ_PANEL_DIGON_POL_INVERT            = 0x00000001,
} PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_DIGON_POL;

/*
 * PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_SYNCEN_POL enum
 */

typedef enum PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_SYNCEN_POL {
PWRSEQ_PANEL_SYNCEN_POL_NON_INVERT       = 0x00000000,
PWRSEQ_PANEL_SYNCEN_POL_INVERT           = 0x00000001,
} PWRSEQ_PANEL_PWRSEQ_CNTL_PANEL_SYNCEN_POL;

/*
 * PWRSEQ_PANEL_PWRSEQ_CNTL_TARGET_STATE enum
 */

typedef enum PWRSEQ_PANEL_PWRSEQ_CNTL_TARGET_STATE {
PWRSEQ_PANEL_PWRSEQ_TARGET_STATE_LCD_OFF = 0x00000000,
PWRSEQ_PANEL_PWRSEQ_TARGET_STATE_LCD_ON  = 0x00000001,
} PWRSEQ_PANEL_PWRSEQ_CNTL_TARGET_STATE;

/*
 * PWRSEQ_PANEL_PWRSEQ_DELAY2_PANEL_VARY_BL_OVERRIDE_EN enum
 */

typedef enum PWRSEQ_PANEL_PWRSEQ_DELAY2_PANEL_VARY_BL_OVERRIDE_EN {
PWRSEQ_PANEL_VARY_BL_OVERRIDE_EN_BLON    = 0x00000000,
PWRSEQ_PANEL_VARY_BL_OVERRIDE_EN_SEPARATE = 0x00000001,
} PWRSEQ_PANEL_PWRSEQ_DELAY2_PANEL_VARY_BL_OVERRIDE_EN;

/*******************************************************
 * AZCONTROLLER Enums
 *******************************************************/

/*
 * AZ_CORB_SIZE enum
 */

typedef enum AZ_CORB_SIZE {
AZ_CORB_SIZE_2ENTRIES_RESERVED           = 0x00000000,
AZ_CORB_SIZE_16ENTRIES_RESERVED          = 0x00000001,
AZ_CORB_SIZE_256ENTRIES                  = 0x00000002,
AZ_CORB_SIZE_RESERVED                    = 0x00000003,
} AZ_CORB_SIZE;

/*
 * AZ_GLOBAL_CAPABILITIES enum
 */

typedef enum AZ_GLOBAL_CAPABILITIES {
AZ_GLOBAL_CAPABILITIES_SIXTY_FOUR_BIT_ADDRESS_NOT_SUPPORTED = 0x00000000,
AZ_GLOBAL_CAPABILITIES_SIXTY_FOUR_BIT_ADDRESS_SUPPORTED = 0x00000001,
} AZ_GLOBAL_CAPABILITIES;

/*
 * AZ_RIRB_SIZE enum
 */

typedef enum AZ_RIRB_SIZE {
AZ_RIRB_SIZE_2ENTRIES_RESERVED           = 0x00000000,
AZ_RIRB_SIZE_16ENTRIES_RESERVED          = 0x00000001,
AZ_RIRB_SIZE_256ENTRIES                  = 0x00000002,
AZ_RIRB_SIZE_UNDEFINED                   = 0x00000003,
} AZ_RIRB_SIZE;

/*
 * AZ_RIRB_WRITE_POINTER_RESET enum
 */

typedef enum AZ_RIRB_WRITE_POINTER_RESET {
AZ_RIRB_WRITE_POINTER_NOT_RESET          = 0x00000000,
AZ_RIRB_WRITE_POINTER_DO_RESET           = 0x00000001,
} AZ_RIRB_WRITE_POINTER_RESET;

/*
 * AZ_STATE_CHANGE_STATUS enum
 */

typedef enum AZ_STATE_CHANGE_STATUS {
AZ_STATE_CHANGE_STATUS_CODEC_NOT_PRESENT = 0x00000000,
AZ_STATE_CHANGE_STATUS_CODEC_PRESENT     = 0x00000001,
} AZ_STATE_CHANGE_STATUS;

/*
 * CORB_READ_POINTER_RESET enum
 */

typedef enum CORB_READ_POINTER_RESET {
CORB_READ_POINTER_RESET_CORB_DMA_IS_NOT_RESET = 0x00000000,
CORB_READ_POINTER_RESET_CORB_DMA_IS_RESET = 0x00000001,
} CORB_READ_POINTER_RESET;

/*
 * DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE enum
 */

typedef enum DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE {
DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE_DMA_DISABLE = 0x00000000,
DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE_DMA_ENABLE = 0x00000001,
} DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL {
GENERIC_AZ_CONTROLLER_REGISTER_DISABLE   = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_ENABLE    = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED {
GENERIC_AZ_CONTROLLER_REGISTER_DISABLE_RESERVED = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_RESERVED = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_STATUS enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_STATUS {
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_NOT_SET = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_SET = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_STATUS;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED {
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_NOT_SET_RESERVED = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_SET_RESERVED = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED;

/*
 * GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE enum
 */

typedef enum GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE {
ACCEPT_UNSOLICITED_RESPONSE_NOT_ENABLE   = 0x00000000,
ACCEPT_UNSOLICITED_RESPONSE_ENABLE       = 0x00000001,
} GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE;

/*
 * GLOBAL_CONTROL_CONTROLLER_RESET enum
 */

typedef enum GLOBAL_CONTROL_CONTROLLER_RESET {
CONTROLLER_RESET_AZ_CONTROLLER_IN_RESET  = 0x00000000,
CONTROLLER_RESET_AZ_CONTROLLER_NOT_IN_RESET = 0x00000001,
} GLOBAL_CONTROL_CONTROLLER_RESET;

/*
 * GLOBAL_CONTROL_FLUSH_CONTROL enum
 */

typedef enum GLOBAL_CONTROL_FLUSH_CONTROL {
FLUSH_CONTROL_FLUSH_NOT_STARTED          = 0x00000000,
FLUSH_CONTROL_FLUSH_STARTED              = 0x00000001,
} GLOBAL_CONTROL_FLUSH_CONTROL;

/*
 * GLOBAL_STATUS_FLUSH_STATUS enum
 */

typedef enum GLOBAL_STATUS_FLUSH_STATUS {
GLOBAL_STATUS_FLUSH_STATUS_FLUSH_NOT_ENDED = 0x00000000,
GLOBAL_STATUS_FLUSH_STATUS_FLUSH_ENDED   = 0x00000001,
} GLOBAL_STATUS_FLUSH_STATUS;

/*
 * IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY enum
 */

typedef enum IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY {
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_NOT_BUSY = 0x00000000,
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_IS_BUSY = 0x00000001,
} IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY;

/*
 * IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID enum
 */

typedef enum IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID {
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID_NO_IMMEDIATE_RESPONSE_VALID = 0x00000000,
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID_IMMEDIATE_RESPONSE_VALID = 0x00000001,
} IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID;

/*
 * RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL enum
 */

typedef enum RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL {
RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL_INTERRUPT_DISABLED = 0x00000000,
RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL_INTERRUPT_ENABLED = 0x00000001,
} RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL;

/*
 * RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL enum
 */

typedef enum RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL {
RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL_INTERRUPT_DISABLED = 0x00000000,
RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL_INTERRUPT_ENABLED = 0x00000001,
} RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL;

/*
 * STREAM_0_SYNCHRONIZATION enum
 */

typedef enum STREAM_0_SYNCHRONIZATION {
STREAM_0_SYNCHRONIZATION_STEAM_NOT_STOPPED = 0x00000000,
STREAM_0_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_0_SYNCHRONIZATION;

/*
 * STREAM_10_SYNCHRONIZATION enum
 */

typedef enum STREAM_10_SYNCHRONIZATION {
STREAM_10_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_10_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_10_SYNCHRONIZATION;

/*
 * STREAM_11_SYNCHRONIZATION enum
 */

typedef enum STREAM_11_SYNCHRONIZATION {
STREAM_11_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_11_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_11_SYNCHRONIZATION;

/*
 * STREAM_12_SYNCHRONIZATION enum
 */

typedef enum STREAM_12_SYNCHRONIZATION {
STREAM_12_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_12_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_12_SYNCHRONIZATION;

/*
 * STREAM_13_SYNCHRONIZATION enum
 */

typedef enum STREAM_13_SYNCHRONIZATION {
STREAM_13_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_13_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_13_SYNCHRONIZATION;

/*
 * STREAM_14_SYNCHRONIZATION enum
 */

typedef enum STREAM_14_SYNCHRONIZATION {
STREAM_14_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_14_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_14_SYNCHRONIZATION;

/*
 * STREAM_15_SYNCHRONIZATION enum
 */

typedef enum STREAM_15_SYNCHRONIZATION {
STREAM_15_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_15_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_15_SYNCHRONIZATION;

/*
 * STREAM_1_SYNCHRONIZATION enum
 */

typedef enum STREAM_1_SYNCHRONIZATION {
STREAM_1_SYNCHRONIZATION_STEAM_NOT_STOPPED = 0x00000000,
STREAM_1_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_1_SYNCHRONIZATION;

/*
 * STREAM_2_SYNCHRONIZATION enum
 */

typedef enum STREAM_2_SYNCHRONIZATION {
STREAM_2_SYNCHRONIZATION_STEAM_NOT_STOPPED = 0x00000000,
STREAM_2_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_2_SYNCHRONIZATION;

/*
 * STREAM_3_SYNCHRONIZATION enum
 */

typedef enum STREAM_3_SYNCHRONIZATION {
STREAM_3_SYNCHRONIZATION_STEAM_NOT_STOPPED = 0x00000000,
STREAM_3_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_3_SYNCHRONIZATION;

/*
 * STREAM_4_SYNCHRONIZATION enum
 */

typedef enum STREAM_4_SYNCHRONIZATION {
STREAM_4_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_4_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_4_SYNCHRONIZATION;

/*
 * STREAM_5_SYNCHRONIZATION enum
 */

typedef enum STREAM_5_SYNCHRONIZATION {
STREAM_5_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_5_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_5_SYNCHRONIZATION;

/*
 * STREAM_6_SYNCHRONIZATION enum
 */

typedef enum STREAM_6_SYNCHRONIZATION {
STREAM_6_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_6_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_6_SYNCHRONIZATION;

/*
 * STREAM_7_SYNCHRONIZATION enum
 */

typedef enum STREAM_7_SYNCHRONIZATION {
STREAM_7_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_7_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_7_SYNCHRONIZATION;

/*
 * STREAM_8_SYNCHRONIZATION enum
 */

typedef enum STREAM_8_SYNCHRONIZATION {
STREAM_8_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_8_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_8_SYNCHRONIZATION;

/*
 * STREAM_9_SYNCHRONIZATION enum
 */

typedef enum STREAM_9_SYNCHRONIZATION {
STREAM_9_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED = 0x00000000,
STREAM_9_SYNCHRONIZATION_STEAM_STOPPED_RESERVED = 0x00000001,
} STREAM_9_SYNCHRONIZATION;

/*******************************************************
 * AZENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_8_RESERVED = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_16 = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_20 = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_24 = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_32_RESERVED = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_RESERVED = 0x00000005,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_1 = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_2 = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_3 = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_4 = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_5 = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_6 = 0x00000005,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_7 = 0x00000006,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_8 = 0x00000007,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_RESERVED = 0x00000008,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY1 = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY3 = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED = 0x00000005,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED = 0x00000006,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED = 0x00000007,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY1 = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY2 = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY4 = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED = 0x00000004,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_48KHZ = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_44P1KHZ = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_PCM = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_NOT_PCM = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE_SILENT_STREAM_NOT_ENABLE = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE_SILENT_STREAM_ENABLE = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY_BIT_C_IS_SET = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY_BIT_C_NOT_SET = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_DISABLED = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_ENABLED = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L_BIT7_NOT_SET = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L_BIT7_IS_SET = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO_BIT_B_NOT_SET = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO_BIT_B_IS_SET = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE_LSB_OF_D_NOT_SET = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE_LSB_OF_D_IS_SET = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO_BIT_A_NOT_SET = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO_BIT_A_IS_SET = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V_BIT28_IS_ZERO = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V_BIT28_IS_ONE = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VALIDITY_CFG_NOT_ON = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VALIDITY_CFG_ON = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE {
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_0 = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_1 = 0x00000001,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_2 = 0x00000002,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_3 = 0x00000003,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_4 = 0x00000004,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_5 = 0x00000005,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_6 = 0x00000006,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_7 = 0x00000007,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_8 = 0x00000008,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_9 = 0x00000009,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_10 = 0x0000000a,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_11 = 0x0000000b,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_12 = 0x0000000c,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_13 = 0x0000000d,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_14 = 0x0000000e,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_15 = 0x0000000f,
} AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT {
AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_NO_INFO_OR_PERMITTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_FORBIDDEN = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_PAIR_MODE = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_SINGLE_MODE = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE {
AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_DISABLED = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLED = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE {
AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE_PIN_SHUT_OFF = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE_PIN_DRIVEN = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE;

/*******************************************************
 * AZF0CONTROLLER Enums
 *******************************************************/

/*
 * AZALIA_SOFT_RESET_REFCLK_SOFT_RESET enum
 */

typedef enum AZALIA_SOFT_RESET_REFCLK_SOFT_RESET {
AZALIA_SOFT_RESET_REFCLK_SOFT_RESET_NOT_RESET = 0x00000000,
AZALIA_SOFT_RESET_REFCLK_SOFT_RESET_RESET_REFCLK_LOGIC = 0x00000001,
} AZALIA_SOFT_RESET_REFCLK_SOFT_RESET;

/*
 * MEM_PWR_DIS_CTRL enum
 */

typedef enum MEM_PWR_DIS_CTRL {
ENABLE_MEM_PWR_CTRL                      = 0x00000000,
DISABLE_MEM_PWR_CTRL                     = 0x00000001,
} MEM_PWR_DIS_CTRL;

/*
 * MEM_PWR_FORCE_CTRL enum
 */

typedef enum MEM_PWR_FORCE_CTRL {
NO_FORCE_REQUEST                         = 0x00000000,
FORCE_LIGHT_SLEEP_REQUEST                = 0x00000001,
FORCE_DEEP_SLEEP_REQUEST                 = 0x00000002,
FORCE_SHUT_DOWN_REQUEST                  = 0x00000003,
} MEM_PWR_FORCE_CTRL;

/*
 * MEM_PWR_FORCE_CTRL2 enum
 */

typedef enum MEM_PWR_FORCE_CTRL2 {
NO_FORCE_REQ                             = 0x00000000,
FORCE_LIGHT_SLEEP_REQ                    = 0x00000001,
} MEM_PWR_FORCE_CTRL2;

/*
 * MEM_PWR_SEL_CTRL enum
 */

typedef enum MEM_PWR_SEL_CTRL {
DYNAMIC_SHUT_DOWN_ENABLE                 = 0x00000000,
DYNAMIC_DEEP_SLEEP_ENABLE                = 0x00000001,
DYNAMIC_LIGHT_SLEEP_ENABLE               = 0x00000002,
} MEM_PWR_SEL_CTRL;

/*
 * MEM_PWR_SEL_CTRL2 enum
 */

typedef enum MEM_PWR_SEL_CTRL2 {
DYNAMIC_DEEP_SLEEP_EN                    = 0x00000000,
DYNAMIC_LIGHT_SLEEP_EN                   = 0x00000001,
} MEM_PWR_SEL_CTRL2;

/*******************************************************
 * AZF0ROOT Enums
 *******************************************************/

/*
 * CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY enum
 */

typedef enum CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY {
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_ALL = 0x00000000,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_6 = 0x00000001,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_5 = 0x00000002,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_4 = 0x00000003,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_3 = 0x00000004,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_2 = 0x00000005,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_1 = 0x00000006,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_0 = 0x00000007,
} CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY;

/*
 * CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY enum
 */

typedef enum CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY {
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_ALL = 0x00000000,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_6 = 0x00000001,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_5 = 0x00000002,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_4 = 0x00000003,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_3 = 0x00000004,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_2 = 0x00000005,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_1 = 0x00000006,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_0 = 0x00000007,
} CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY;

/*******************************************************
 * AZINPUTENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_8_RESERVED = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_16 = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_20 = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_24 = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_32_RESERVED = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_RESERVED = 0x00000005,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_1 = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_2 = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_3 = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_4 = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_5 = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_6 = 0x00000005,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_7 = 0x00000006,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_8 = 0x00000007,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_RESERVED = 0x00000008,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY1 = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY3 = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED = 0x00000005,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED = 0x00000006,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED = 0x00000007,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY1 = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY2 = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY4 = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED = 0x00000004,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_48KHZ = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_44P1KHZ = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_PCM = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_NOT_PCM = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_DISABLED = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_ENABLED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_NOT_MUTED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_DISABLED = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLED = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE_PIN_SHUT_OFF = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE_PIN_DRIVEN = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE;

/*******************************************************
 * AZROOT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET enum
 */

typedef enum AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET {
AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_NOT_RESET = 0x00000000,
AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_DO_RESET = 0x00000001,
} AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET;

/*******************************************************
 * AZF0STREAM Enums
 *******************************************************/

/*
 * AZ_LATENCY_COUNTER_CONTROL enum
 */

typedef enum AZ_LATENCY_COUNTER_CONTROL {
AZ_LATENCY_COUNTER_NO_RESET              = 0x00000000,
AZ_LATENCY_COUNTER_RESET_DONE            = 0x00000001,
} AZ_LATENCY_COUNTER_CONTROL;

/*******************************************************
 * AZSTREAM Enums
 *******************************************************/

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS_NOT_SET = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS_SET = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_STATUS_NOT_SET = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_STATUS_SET = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_DISABLED = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLED = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_STATUS_NOT_SET = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_STATUS_SET = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_DISABLED = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLED = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE_INTERRUPT_DISABLED = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE_INTERRUPT_ENABLED = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_NOT_RESET = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_IS_RESET = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_NOT_RUN = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_DO_RUN = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_NO_TRAFFIC_PRIORITY = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_YES_TRAFFIC_PRIORITY = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_8_RESERVED = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_16 = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_20 = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_24 = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_32_RESERVED = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_RESERVED = 0x00000005,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_1 = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_2 = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_3 = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_4 = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_5 = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_6 = 0x00000005,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_7 = 0x00000006,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_8 = 0x00000007,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_9_RESERVED = 0x00000008,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_10_RESERVED = 0x00000009,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_11_RESERVED = 0x0000000a,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_12_RESERVED = 0x0000000b,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_13_RESERVED = 0x0000000c,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_14_RESERVED = 0x0000000d,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_15_RESERVED = 0x0000000e,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_16_RESERVED = 0x0000000f,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY1 = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY3 = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED = 0x00000005,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED = 0x00000006,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED = 0x00000007,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY1 = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY2 = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY4 = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED = 0x00000004,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE_48KHZ = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE_44P1KHZ = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE;

/*******************************************************
 * AZF0ENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_MONOPHONIC = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_STEREO = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_FORMAT_OVERRIDE = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_FORMAT_OVERRIDE = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESSING_CAPABILITIES = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESSING_CAPABILITIES = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED = 0x00000001,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED = 0x00000002,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED = 0x00000003,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED = 0x00000004,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED = 0x00000005,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED = 0x00000006,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED = 0x00000007,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED_RESERVED = 0x00000008,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED = 0x00000009,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE {
AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_PAIR_MODE = 0x00000000,
AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_SINGLE_MODE = 0x00000001,
} AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE;

/*
 * AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE {
AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_NO_HBR_CAPABLILITY = 0x00000000,
AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HAVE_HBR_CAPABLILITY = 0x00000001,
} AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER_PRESENT = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESSING_CAPABILITIES = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESSING_CAPABILITIES = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED = 0x00000001,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED = 0x00000002,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED = 0x00000003,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED = 0x00000004,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED = 0x00000005,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED = 0x00000006,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED = 0x00000007,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED_RESERVED = 0x00000008,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED = 0x00000009,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_NOT_BALANCED = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_BALANCED = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_EAPD_PIN = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_EAPD_PIN = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_HEADPHONE_DRIVE_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_HEADPHONE_DRIVE_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_IMPEDANCE_SENSE_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_IMPEDANCE_SENSE_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_INPUT_PIN = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_INPUT_PIN = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_JACK_DETECTION_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_JACK_DETECTION_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_OUTPUT_PIN = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_OUTPUT_PIN = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED;

/*******************************************************
 * AZF0INPUTENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_MONOPHONIC = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_STEREO = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CODEC_CONVERTER0_IS_ANALOG = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CODEC_CONVERTER0_IS_DIGITAL = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_FORMAT_OVERRIDE = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_FORMAT_OVERRIDE = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_CODEC_CONVERTER0_HAVE_NO_PROCESSING_CAPABILITIES = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_CODEC_CONVERTER0_HAVE_PROCESSING_CAPABILITIES = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NOT_SUPPORT_STRIPING = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED = 0x00000001,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED = 0x00000002,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED = 0x00000003,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED = 0x00000004,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED = 0x00000005,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED = 0x00000006,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED = 0x00000007,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED = 0x00000008,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED = 0x00000009,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_NO_HBR_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HAVE_HBR_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESING_CAPABILITIES = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESING_CAPABILITIES = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED = 0x00000001,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED = 0x00000002,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED = 0x00000003,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED = 0x00000004,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED = 0x00000005,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED = 0x00000006,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED = 0x00000007,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED = 0x00000008,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED = 0x00000009,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_I_O_PINS_NOT_BALANCED = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_BALANCED = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP_NOT_ENABLED = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP_ENABLED = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE_NO_EAPD_PIN = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE_HAVE_EAPD_PIN = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI_NOT_ENABLED = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI_ENABLED = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_HEADPHONE_DRIVE_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_HEADPHONE_DRIVE_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_IMPEDANCE_SENSE_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_IMPEDANCE_SENSE_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_INPUT_PIN = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_INPUT_PIN = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_JACK_PRESENCE_DETECTION_CAPABILITY = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_JACK_PRESENCE_DETECTION_CAPABILITY = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_OUTPUT_PIN = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_OUTPUT_PIN = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED;

/*******************************************************
 * DSCC Enums
 *******************************************************/

/*
 * DSCC_BITS_PER_COMPONENT_ENUM enum
 */

typedef enum DSCC_BITS_PER_COMPONENT_ENUM {
DSCC_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_8_BIT = 0x00000008,
DSCC_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_10_BIT = 0x0000000a,
DSCC_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_12_BIT = 0x0000000c,
} DSCC_BITS_PER_COMPONENT_ENUM;

/*
 * DSCC_DSC_VERSION_MAJOR_ENUM enum
 */

typedef enum DSCC_DSC_VERSION_MAJOR_ENUM {
DSCC_DSC_VERSION_MAJOR_ENUM_DSC_1_X_MAJOR_VERSION = 0x00000001,
} DSCC_DSC_VERSION_MAJOR_ENUM;

/*
 * DSCC_DSC_VERSION_MINOR_ENUM enum
 */

typedef enum DSCC_DSC_VERSION_MINOR_ENUM {
DSCC_DSC_VERSION_MINOR_ENUM_DSC_X_1_MINOR_VERSION = 0x00000001,
DSCC_DSC_VERSION_MINOR_ENUM_DSC_X_2_MINOR_VERSION = 0x00000002,
} DSCC_DSC_VERSION_MINOR_ENUM;

/*
 * DSCC_ENABLE_ENUM enum
 */

typedef enum DSCC_ENABLE_ENUM {
DSCC_ENABLE_ENUM_DISABLED                = 0x00000000,
DSCC_ENABLE_ENUM_ENABLED                 = 0x00000001,
} DSCC_ENABLE_ENUM;

/*
 * DSCC_ICH_RESET_ENUM enum
 */

typedef enum DSCC_ICH_RESET_ENUM {
DSCC_ICH_RESET_ENUM_SLICE0_ICH_RESET     = 0x00000001,
DSCC_ICH_RESET_ENUM_SLICE1_ICH_RESET     = 0x00000002,
DSCC_ICH_RESET_ENUM_SLICE2_ICH_RESET     = 0x00000004,
DSCC_ICH_RESET_ENUM_SLICE3_ICH_RESET     = 0x00000008,
} DSCC_ICH_RESET_ENUM;

/*
 * DSCC_LINEBUF_DEPTH_ENUM enum
 */

typedef enum DSCC_LINEBUF_DEPTH_ENUM {
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_8_BIT = 0x00000008,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_9_BIT = 0x00000009,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_10_BIT = 0x0000000a,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_11_BIT = 0x0000000b,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_12_BIT = 0x0000000c,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_13_BIT = 0x0000000d,
} DSCC_LINEBUF_DEPTH_ENUM;

/*
 * DSCC_MEM_PWR_DIS_ENUM enum
 */

typedef enum DSCC_MEM_PWR_DIS_ENUM {
DSCC_MEM_PWR_DIS_ENUM_REQUEST_EN         = 0x00000000,
DSCC_MEM_PWR_DIS_ENUM_REQUEST_DIS        = 0x00000001,
} DSCC_MEM_PWR_DIS_ENUM;

/*
 * DSCC_MEM_PWR_FORCE_ENUM enum
 */

typedef enum DSCC_MEM_PWR_FORCE_ENUM {
DSCC_MEM_PWR_FORCE_ENUM_NO_FORCE_REQUEST = 0x00000000,
DSCC_MEM_PWR_FORCE_ENUM_FORCE_LIGHT_SLEEP_REQUEST = 0x00000001,
DSCC_MEM_PWR_FORCE_ENUM_FORCE_DEEP_SLEEP_REQUEST = 0x00000002,
DSCC_MEM_PWR_FORCE_ENUM_FORCE_SHUT_DOWN_REQUEST = 0x00000003,
} DSCC_MEM_PWR_FORCE_ENUM;

/*
 * POWER_STATE_ENUM enum
 */

typedef enum POWER_STATE_ENUM {
POWER_STATE_ENUM_ON                      = 0x00000000,
POWER_STATE_ENUM_LS                      = 0x00000001,
POWER_STATE_ENUM_DS                      = 0x00000002,
POWER_STATE_ENUM_SD                      = 0x00000003,
} POWER_STATE_ENUM;

/*******************************************************
 * DSCCIF Enums
 *******************************************************/

/*
 * DSCCIF_BITS_PER_COMPONENT_ENUM enum
 */

typedef enum DSCCIF_BITS_PER_COMPONENT_ENUM {
DSCCIF_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_8_BIT = 0x00000008,
DSCCIF_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_10_BIT = 0x0000000a,
DSCCIF_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_12_BIT = 0x0000000c,
} DSCCIF_BITS_PER_COMPONENT_ENUM;

/*
 * DSCCIF_ENABLE_ENUM enum
 */

typedef enum DSCCIF_ENABLE_ENUM {
DSCCIF_ENABLE_ENUM_DISABLED              = 0x00000000,
DSCCIF_ENABLE_ENUM_ENABLED               = 0x00000001,
} DSCCIF_ENABLE_ENUM;

/*
 * DSCCIF_INPUT_PIXEL_FORMAT_ENUM enum
 */

typedef enum DSCCIF_INPUT_PIXEL_FORMAT_ENUM {
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_RGB       = 0x00000000,
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_YCBCR_444 = 0x00000001,
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_SIMPLE_YCBCR_422 = 0x00000002,
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_NATIVE_YCBCR_422 = 0x00000003,
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_NATIVE_YCBCR_420 = 0x00000004,
} DSCCIF_INPUT_PIXEL_FORMAT_ENUM;

/*******************************************************
 * DSC_TOP Enums
 *******************************************************/

/*
 * CLOCK_GATING_DISABLE_ENUM enum
 */

typedef enum CLOCK_GATING_DISABLE_ENUM {
CLOCK_GATING_DISABLE_ENUM_ENABLED        = 0x00000000,
CLOCK_GATING_DISABLE_ENUM_DISABLED       = 0x00000001,
} CLOCK_GATING_DISABLE_ENUM;

/*
 * ENABLE_ENUM enum
 */

typedef enum ENABLE_ENUM {
ENABLE_ENUM_DISABLED                     = 0x00000000,
ENABLE_ENUM_ENABLED                      = 0x00000001,
} ENABLE_ENUM;

/*
 * TEST_CLOCK_MUX_SELECT_ENUM enum
 */

typedef enum TEST_CLOCK_MUX_SELECT_ENUM {
TEST_CLOCK_MUX_SELECT_DISPCLK_P          = 0x00000000,
TEST_CLOCK_MUX_SELECT_DISPCLK_G          = 0x00000001,
TEST_CLOCK_MUX_SELECT_DISPCLK_R          = 0x00000002,
TEST_CLOCK_MUX_SELECT_DSCCLK_P           = 0x00000003,
TEST_CLOCK_MUX_SELECT_DSCCLK_G           = 0x00000004,
TEST_CLOCK_MUX_SELECT_DSCCLK_R           = 0x00000005,
} TEST_CLOCK_MUX_SELECT_ENUM;

/*******************************************************
 * DWB_TOP Enums
 *******************************************************/

/*
 * DWB_CRC_CONT_EN_ENUM enum
 */

typedef enum DWB_CRC_CONT_EN_ENUM {
DWB_CRC_CONT_EN_ONE_SHOT                 = 0x00000000,
DWB_CRC_CONT_EN_CONT                     = 0x00000001,
} DWB_CRC_CONT_EN_ENUM;

/*
 * DWB_CRC_SRC_SEL_ENUM enum
 */

typedef enum DWB_CRC_SRC_SEL_ENUM {
DWB_CRC_SRC_SEL_DWB_IN                   = 0x00000000,
DWB_CRC_SRC_SEL_OGAM_OUT                 = 0x00000001,
DWB_CRC_SRC_SEL_DWB_OUT                  = 0x00000002,
} DWB_CRC_SRC_SEL_ENUM;

/*
 * DWB_DATA_OVERFLOW_INT_TYPE_ENUM enum
 */

typedef enum DWB_DATA_OVERFLOW_INT_TYPE_ENUM {
DWB_DATA_OVERFLOW_INT_TYPE_0             = 0x00000000,
DWB_DATA_OVERFLOW_INT_TYPE_1             = 0x00000001,
} DWB_DATA_OVERFLOW_INT_TYPE_ENUM;

/*
 * DWB_DATA_OVERFLOW_TYPE_ENUM enum
 */

typedef enum DWB_DATA_OVERFLOW_TYPE_ENUM {
DWB_DATA_OVERFLOW_TYPE_NO_OVERFLOW       = 0x00000000,
DWB_DATA_OVERFLOW_TYPE_BUFFER            = 0x00000001,
DWB_DATA_OVERFLOW_TYPE_VUPDATE           = 0x00000002,
DWB_DATA_OVERFLOW_TYPE_VREADY            = 0x00000003,
} DWB_DATA_OVERFLOW_TYPE_ENUM;

/*
 * DWB_DEBUG_SEL_ENUM enum
 */

typedef enum DWB_DEBUG_SEL_ENUM {
DWB_DEBUG_SEL_FC                         = 0x00000000,
DWB_DEBUG_SEL_RESERVED                   = 0x00000001,
DWB_DEBUG_SEL_DWBCP                      = 0x00000002,
DWB_DEBUG_SEL_PERFMON                    = 0x00000003,
} DWB_DEBUG_SEL_ENUM;

/*
 * DWB_MEM_PWR_FORCE_ENUM enum
 */

typedef enum DWB_MEM_PWR_FORCE_ENUM {
DWB_MEM_PWR_FORCE_DIS                    = 0x00000000,
DWB_MEM_PWR_FORCE_LS                     = 0x00000001,
DWB_MEM_PWR_FORCE_DS                     = 0x00000002,
DWB_MEM_PWR_FORCE_SD                     = 0x00000003,
} DWB_MEM_PWR_FORCE_ENUM;

/*
 * DWB_MEM_PWR_STATE_ENUM enum
 */

typedef enum DWB_MEM_PWR_STATE_ENUM {
DWB_MEM_PWR_STATE_ON                     = 0x00000000,
DWB_MEM_PWR_STATE_LS                     = 0x00000001,
DWB_MEM_PWR_STATE_DS                     = 0x00000002,
DWB_MEM_PWR_STATE_SD                     = 0x00000003,
} DWB_MEM_PWR_STATE_ENUM;

/*
 * DWB_TEST_CLK_SEL_ENUM enum
 */

typedef enum DWB_TEST_CLK_SEL_ENUM {
DWB_TEST_CLK_SEL_R                       = 0x00000000,
DWB_TEST_CLK_SEL_G                       = 0x00000001,
DWB_TEST_CLK_SEL_P                       = 0x00000002,
} DWB_TEST_CLK_SEL_ENUM;

/*
 * FC_EYE_SELECTION_ENUM enum
 */

typedef enum FC_EYE_SELECTION_ENUM {
FC_EYE_SELECTION_STEREO_DIS              = 0x00000000,
FC_EYE_SELECTION_LEFT_EYE                = 0x00000001,
FC_EYE_SELECTION_RIGHT_EYE               = 0x00000002,
} FC_EYE_SELECTION_ENUM;

/*
 * FC_FRAME_CAPTURE_RATE_ENUM enum
 */

typedef enum FC_FRAME_CAPTURE_RATE_ENUM {
FC_FRAME_CAPTURE_RATE_FULL               = 0x00000000,
FC_FRAME_CAPTURE_RATE_HALF               = 0x00000001,
FC_FRAME_CAPTURE_RATE_THIRD              = 0x00000002,
FC_FRAME_CAPTURE_RATE_QUARTER            = 0x00000003,
} FC_FRAME_CAPTURE_RATE_ENUM;

/*
 * FC_STEREO_EYE_POLARITY_ENUM enum
 */

typedef enum FC_STEREO_EYE_POLARITY_ENUM {
FC_STEREO_EYE_POLARITY_LEFT              = 0x00000000,
FC_STEREO_EYE_POLARITY_RIGHT             = 0x00000001,
} FC_STEREO_EYE_POLARITY_ENUM;

/*******************************************************
 * DWBCP Enums
 *******************************************************/

/*
 * DWB_GAMUT_REMAP_COEF_FORMAT_ENUM enum
 */

typedef enum DWB_GAMUT_REMAP_COEF_FORMAT_ENUM {
DWB_GAMUT_REMAP_COEF_FORMAT_S2_13        = 0x00000000,
DWB_GAMUT_REMAP_COEF_FORMAT_S3_12        = 0x00000001,
} DWB_GAMUT_REMAP_COEF_FORMAT_ENUM;

/*
 * DWB_GAMUT_REMAP_MODE_ENUM enum
 */

typedef enum DWB_GAMUT_REMAP_MODE_ENUM {
DWB_GAMUT_REMAP_MODE_BYPASS              = 0x00000000,
DWB_GAMUT_REMAP_MODE_COEF_A              = 0x00000001,
DWB_GAMUT_REMAP_MODE_COEF_B              = 0x00000002,
DWB_GAMUT_REMAP_MODE_RESERVED            = 0x00000003,
} DWB_GAMUT_REMAP_MODE_ENUM;

/*
 * DWB_LUT_NUM_SEG enum
 */

typedef enum DWB_LUT_NUM_SEG {
DWB_SEGMENTS_1                           = 0x00000000,
DWB_SEGMENTS_2                           = 0x00000001,
DWB_SEGMENTS_4                           = 0x00000002,
DWB_SEGMENTS_8                           = 0x00000003,
DWB_SEGMENTS_16                          = 0x00000004,
DWB_SEGMENTS_32                          = 0x00000005,
DWB_SEGMENTS_64                          = 0x00000006,
DWB_SEGMENTS_128                         = 0x00000007,
} DWB_LUT_NUM_SEG;

/*
 * DWB_OGAM_LUT_CONFIG_MODE_ENUM enum
 */

typedef enum DWB_OGAM_LUT_CONFIG_MODE_ENUM {
DWB_OGAM_LUT_CONFIG_MODE_DIFF            = 0x00000000,
DWB_OGAM_LUT_CONFIG_MODE_SAME            = 0x00000001,
} DWB_OGAM_LUT_CONFIG_MODE_ENUM;

/*
 * DWB_OGAM_LUT_HOST_SEL_ENUM enum
 */

typedef enum DWB_OGAM_LUT_HOST_SEL_ENUM {
DWB_OGAM_LUT_HOST_SEL_RAMA               = 0x00000000,
DWB_OGAM_LUT_HOST_SEL_RAMB               = 0x00000001,
} DWB_OGAM_LUT_HOST_SEL_ENUM;

/*
 * DWB_OGAM_LUT_READ_COLOR_SEL_ENUM enum
 */

typedef enum DWB_OGAM_LUT_READ_COLOR_SEL_ENUM {
DWB_OGAM_LUT_READ_COLOR_SEL_B            = 0x00000000,
DWB_OGAM_LUT_READ_COLOR_SEL_G            = 0x00000001,
DWB_OGAM_LUT_READ_COLOR_SEL_R            = 0x00000002,
DWB_OGAM_LUT_READ_COLOR_SEL_RESERVED     = 0x00000003,
} DWB_OGAM_LUT_READ_COLOR_SEL_ENUM;

/*
 * DWB_OGAM_LUT_READ_DBG_ENUM enum
 */

typedef enum DWB_OGAM_LUT_READ_DBG_ENUM {
DWB_OGAM_LUT_READ_DBG_DISABLE            = 0x00000000,
DWB_OGAM_LUT_READ_DBG_ENABLE             = 0x00000001,
} DWB_OGAM_LUT_READ_DBG_ENUM;

/*
 * DWB_OGAM_MODE_ENUM enum
 */

typedef enum DWB_OGAM_MODE_ENUM {
DWB_OGAM_MODE_BYPASS                     = 0x00000000,
DWB_OGAM_MODE_RESERVED                   = 0x00000001,
DWB_OGAM_MODE_RAM_LUT_ENABLED            = 0x00000002,
} DWB_OGAM_MODE_ENUM;

/*
 * DWB_OGAM_PWL_DISABLE_ENUM enum
 */

typedef enum DWB_OGAM_PWL_DISABLE_ENUM {
DWB_OGAM_PWL_DISABLE_FALSE               = 0x00000000,
DWB_OGAM_PWL_DISABLE_TRUE                = 0x00000001,
} DWB_OGAM_PWL_DISABLE_ENUM;

/*
 * DWB_OGAM_SELECT_ENUM enum
 */

typedef enum DWB_OGAM_SELECT_ENUM {
DWB_OGAM_SELECT_A                        = 0x00000000,
DWB_OGAM_SELECT_B                        = 0x00000001,
} DWB_OGAM_SELECT_ENUM;

/*******************************************************
 * RDPCSPIPE Enums
 *******************************************************/

/*
 * RDPCSPIPE_CLOCK_CNTL_LANE_CLK_EN enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_LANE_CLK_EN {
RDPCSPIPE_EXT_PCLK_EN_DISABLE            = 0x00000000,
RDPCSPIPE_EXT_PCLK_EN_ENABLE             = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_LANE_CLK_EN;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_APBCLK_EN enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_APBCLK_EN {
RDPCSPIPE_APBCLK_DISABLE                 = 0x00000000,
RDPCSPIPE_APBCLK_ENABLE                  = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_APBCLK_EN;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_CLOCK_ON enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_CLOCK_ON {
RDPCS_PIPE_CLK_CLOCK_OFF                 = 0x00000000,
RDPCS_PIPE_CLK_CLOCK_ON                  = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_CLOCK_ON;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_EN enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_EN {
RDPCS_PIPE_CLK_DISABLE                   = 0x00000000,
RDPCS_PIPE_CLK_ENABLE                    = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_EN;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_GATE_DIS enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_GATE_DIS {
RDPCS_PIPE_CLK_GATE_ENABLE               = 0x00000000,
RDPCS_PIPE_CLK_GATE_DISABLE              = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_CLK_GATE_DIS;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_PHYD32CLK_CLOCK_ON enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_PHYD32CLK_CLOCK_ON {
RDPCS_PIPE_PHYD32CLK_CLOCK_OFF           = 0x00000000,
RDPCS_PIPE_PHYD32CLK_CLOCK_ON            = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_PIPE_PHYD32CLK_CLOCK_ON;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_CLOCK_ON enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_CLOCK_ON {
RDPCSPIPE_SYMCLK_SRAMCLK_CLOCK_OFF       = 0x00000000,
RDPCSPIPE_SYMCLK_SRAMCLK_CLOCK_ON        = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_CLOCK_ON;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_EN enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_EN {
RDPCSPIPE_SRAMCLK_DISABLE                = 0x00000000,
RDPCSPIPE_SRAMCLK_ENABLE                 = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_EN;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_GATE_DIS enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_GATE_DIS {
RDPCSPIPE_SRAMCLK_GATE_ENABLE            = 0x00000000,
RDPCSPIPE_SRAMCLK_GATE_DISABLE           = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_GATE_DIS;

/*
 * RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_PASS enum
 */

typedef enum RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_PASS {
RDPCSPIPE_SRAMCLK_NOT_PASS               = 0x00000000,
RDPCSPIPE_SRAMCLK_PASS                   = 0x00000001,
} RDPCSPIPE_CLOCK_CNTL_RDPCS_SRAMCLK_PASS;

/*
 * RDPCSPIPE_CNTL_RDPCS_PIPE_FIFO_EN enum
 */

typedef enum RDPCSPIPE_CNTL_RDPCS_PIPE_FIFO_EN {
RDPCS_PIPE_FIFO_DISABLE                  = 0x00000000,
RDPCS_PIPE_FIFO_ENABLE                   = 0x00000001,
} RDPCSPIPE_CNTL_RDPCS_PIPE_FIFO_EN;

/*
 * RDPCSPIPE_CNTL_RDPCS_PIPE_FIFO_LANE_EN enum
 */

typedef enum RDPCSPIPE_CNTL_RDPCS_PIPE_FIFO_LANE_EN {
RDPCS_PIPE_FIFO_LANE_DISABLE             = 0x00000000,
RDPCS_PIPE_FIFO_LANE_ENABLE              = 0x00000001,
} RDPCSPIPE_CNTL_RDPCS_PIPE_FIFO_LANE_EN;

/*
 * RDPCSPIPE_CNTL_RDPCS_PIPE_SOFT_RESET enum
 */

typedef enum RDPCSPIPE_CNTL_RDPCS_PIPE_SOFT_RESET {
RDPCS_PIPE_SOFT_RESET_DISABLE            = 0x00000000,
RDPCS_PIPE_SOFT_RESET_ENABLE             = 0x00000001,
} RDPCSPIPE_CNTL_RDPCS_PIPE_SOFT_RESET;

/*
 * RDPCSPIPE_CNTL_RDPCS_SRAM_SOFT_RESET enum
 */

typedef enum RDPCSPIPE_CNTL_RDPCS_SRAM_SOFT_RESET {
RDPCSPIPE_SRAM_SRAM_RESET_DISABLE        = 0x00000000,
RDPCSPIPE_SRAM_SRAM_RESET_ENABLE         = 0x00000001,
} RDPCSPIPE_CNTL_RDPCS_SRAM_SOFT_RESET;

/*
 * RDPCSPIPE_DBG_APB_COUNT_EXPIRE_MASK enum
 */

typedef enum RDPCSPIPE_DBG_APB_COUNT_EXPIRE_MASK {
RDPCSPIPE_DBG_APB_COUNT_EXPIRE_MASK_DISABLE = 0x00000000,
RDPCSPIPE_DBG_APB_COUNT_EXPIRE_MASK_ENABLE = 0x00000001,
} RDPCSPIPE_DBG_APB_COUNT_EXPIRE_MASK;

/*
 * RDPCSPIPE_DBG_OCLA_SEL enum
 */

typedef enum RDPCSPIPE_DBG_OCLA_SEL {
RDPCSPIPE_DBG_OCLA_SEL_MON_OUT_7_0       = 0x00000000,
RDPCSPIPE_DBG_OCLA_SEL_MON_OUT_15_8      = 0x00000001,
RDPCSPIPE_DBG_OCLA_SEL_MON_OUT_23_16     = 0x00000002,
RDPCSPIPE_DBG_OCLA_SEL_MON_OUT_31_24     = 0x00000003,
RDPCSPIPE_DBG_OCLA_SEL_MON_OUT_39_32     = 0x00000004,
RDPCSPIPE_DBG_OCLA_SEL_MON_OUT_47_40     = 0x00000005,
RDPCSPIPE_DBG_OCLA_SEL_MON_OUT_55_48     = 0x00000006,
RDPCSPIPE_DBG_OCLA_SEL_MON_OUT_63_56     = 0x00000007,
} RDPCSPIPE_DBG_OCLA_SEL;

/*
 * RDPCSPIPE_ENC_TYPE enum
 */

typedef enum RDPCSPIPE_ENC_TYPE {
HDMI_TMDS_OR_DP_8B10B                    = 0x00000000,
HDMI_FRL                                 = 0x00000001,
DP_128B132B                              = 0x00000002,
} RDPCSPIPE_ENC_TYPE;

/*
 * RDPCSPIPE_FIFO_EMPTY enum
 */

typedef enum RDPCSPIPE_FIFO_EMPTY {
RDPCSPIPE_FIFO_NOT_EMPTY                 = 0x00000000,
RDPCSPIPE_FIFO_IS_EMPTY                  = 0x00000001,
} RDPCSPIPE_FIFO_EMPTY;

/*
 * RDPCSPIPE_FIFO_FULL enum
 */

typedef enum RDPCSPIPE_FIFO_FULL {
RDPCSPIPE_FIFO_NOT_FULL                  = 0x00000000,
RDPCSPIPE_FIFO_IS_FULL                   = 0x00000001,
} RDPCSPIPE_FIFO_FULL;

/*
 * RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_APB_PSLVERR_MASK enum
 */

typedef enum RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_APB_PSLVERR_MASK {
RDPCSPIPE_APB_PSLVERR_MASK_DISABLE       = 0x00000000,
RDPCSPIPE_APB_PSLVERR_MASK_ENABLE        = 0x00000001,
} RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_APB_PSLVERR_MASK;

/*
 * RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE enum
 */

typedef enum RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE {
RDPCSPIPE_DPALT_4LANE_TOGGLE_2LANE       = 0x00000000,
RDPCSPIPE_DPALT_4LANE_TOGGLE_4LANE       = 0x00000001,
} RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE;

/*
 * RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE_MASK enum
 */

typedef enum RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE_MASK {
RDPCSPIPE_DPALT_4LANE_TOGGLE_MASK_DISABLE = 0x00000000,
RDPCSPIPE_DPALT_4LANE_TOGGLE_MASK_ENABLE = 0x00000001,
} RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE_MASK;

/*
 * RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE enum
 */

typedef enum RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE {
RDPCSPIPE_DPALT_DISABLE_TOGGLE_ENABLE    = 0x00000000,
RDPCSPIPE_DPALT_DISABLE_TOGGLE_DISABLE   = 0x00000001,
} RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE;

/*
 * RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE_MASK enum
 */

typedef enum RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE_MASK {
RDPCSPIPE_DPALT_DISABLE_TOGGLE_MASK_DISABLE = 0x00000000,
RDPCSPIPE_DPALT_DISABLE_TOGGLE_MASK_ENABLE = 0x00000001,
} RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE_MASK;

/*
 * RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_PIPE_FIFO_ERROR_MASK enum
 */

typedef enum RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_PIPE_FIFO_ERROR_MASK {
RDPCSPIPE_PIPE_FIFO_ERROR_MASK_DISABLE   = 0x00000000,
RDPCSPIPE_PIPE_FIFO_ERROR_MASK_ENABLE    = 0x00000001,
} RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_PIPE_FIFO_ERROR_MASK;

/*
 * RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_REG_FIFO_ERROR_MASK enum
 */

typedef enum RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_REG_FIFO_ERROR_MASK {
RDPCSPIPE_REG_FIFO_ERROR_MASK_DISABLE    = 0x00000000,
RDPCSPIPE_REG_FIFO_ERROR_MASK_ENABLE     = 0x00000001,
} RDPCSPIPE_INTERRUPT_CONTROL_RDPCS_REG_FIFO_ERROR_MASK;

/*
 * RDPCSPIPE_MSG_BUS_COUNT_EXPIRE_MASK enum
 */

typedef enum RDPCSPIPE_MSG_BUS_COUNT_EXPIRE_MASK {
RDPCSPIPE_MSG_BUS_COUNT_EXPIRE_MASK_DISABLE = 0x00000000,
RDPCSPIPE_MSG_BUS_COUNT_EXPIRE_MASK_ENABLE = 0x00000001,
} RDPCSPIPE_MSG_BUS_COUNT_EXPIRE_MASK;

/*
 * RDPCSPIPE_PACK_MODE enum
 */

typedef enum RDPCSPIPE_PACK_MODE {
TIGHT_PACK                               = 0x00000000,
LOOSE_PACK                               = 0x00000001,
} RDPCSPIPE_PACK_MODE;

/*
 * RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_CR_MUX_SEL enum
 */

typedef enum RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_CR_MUX_SEL {
RDPCSPIPE_PHY_CR_MUX_SEL_FOR_USB         = 0x00000000,
RDPCSPIPE_PHY_CR_MUX_SEL_FOR_DC          = 0x00000001,
} RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_CR_MUX_SEL;

/*
 * RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_CR_PARA_SEL enum
 */

typedef enum RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_CR_PARA_SEL {
RDPCSPIPE_PHY_CR_PARA_SEL_JTAG           = 0x00000000,
RDPCSPIPE_PHY_CR_PARA_SEL_CR             = 0x00000001,
} RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_CR_PARA_SEL;

/*
 * RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_REF_RANGE enum
 */

typedef enum RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_REF_RANGE {
RDPCSPIPE_PHY_REF_RANGE_0                = 0x00000000,
RDPCSPIPE_PHY_REF_RANGE_1                = 0x00000001,
RDPCSPIPE_PHY_REF_RANGE_2                = 0x00000002,
RDPCSPIPE_PHY_REF_RANGE_3                = 0x00000003,
RDPCSPIPE_PHY_REF_RANGE_4                = 0x00000004,
RDPCSPIPE_PHY_REF_RANGE_5                = 0x00000005,
RDPCSPIPE_PHY_REF_RANGE_6                = 0x00000006,
RDPCSPIPE_PHY_REF_RANGE_7                = 0x00000007,
} RDPCSPIPE_PHY_CNTL0_RDPCS_PHY_REF_RANGE;

/*
 * RDPCSPIPE_PHY_CNTL0_RDPCS_SRAM_EXT_LD_DONE enum
 */

typedef enum RDPCSPIPE_PHY_CNTL0_RDPCS_SRAM_EXT_LD_DONE {
RDPCSPIPE_SRAM_EXT_LD_NOT_DONE           = 0x00000000,
RDPCSPIPE_SRAM_EXT_LD_DONE               = 0x00000001,
} RDPCSPIPE_PHY_CNTL0_RDPCS_SRAM_EXT_LD_DONE;

/*
 * RDPCSPIPE_PHY_CNTL0_RDPCS_SRAM_INIT_DONE enum
 */

typedef enum RDPCSPIPE_PHY_CNTL0_RDPCS_SRAM_INIT_DONE {
RDPCSPIPE_SRAM_INIT_NOT_DONE             = 0x00000000,
RDPCSPIPE_SRAM_INIT_DONE                 = 0x00000001,
} RDPCSPIPE_PHY_CNTL0_RDPCS_SRAM_INIT_DONE;

/*
 * RDPCSPIPE_PHY_CNTL11_RDPCS_PHY_DP_REF_CLK_MPLLB_DIV enum
 */

typedef enum RDPCSPIPE_PHY_CNTL11_RDPCS_PHY_DP_REF_CLK_MPLLB_DIV {
RDPCSPIPE_PHY_DP_REF_CLK_MPLLB_DIV1      = 0x00000000,
RDPCSPIPE_PHY_DP_REF_CLK_MPLLB_DIV2      = 0x00000001,
RDPCSPIPE_PHY_DP_REF_CLK_MPLLB_DIV3      = 0x00000002,
RDPCSPIPE_PHY_DP_REF_CLK_MPLLB_DIV8      = 0x00000003,
RDPCSPIPE_PHY_DP_REF_CLK_MPLLB_DIV16     = 0x00000004,
} RDPCSPIPE_PHY_CNTL11_RDPCS_PHY_DP_REF_CLK_MPLLB_DIV;

/*
 * RDPCSPIPE_PHY_CNTL11_RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV enum
 */

typedef enum RDPCSPIPE_PHY_CNTL11_RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV {
RDPCSPIPE_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV_0 = 0x00000000,
RDPCSPIPE_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV_1 = 0x00000001,
RDPCSPIPE_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV_2 = 0x00000002,
RDPCSPIPE_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV_3 = 0x00000003,
} RDPCSPIPE_PHY_CNTL11_RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV;

/*
 * RDPCSPIPE_PHY_CNTL12_RDPCS_PHY_DP_MPLLB_TX_CLK_DIV enum
 */

typedef enum RDPCSPIPE_PHY_CNTL12_RDPCS_PHY_DP_MPLLB_TX_CLK_DIV {
RDPCSPIPE_PHY_DP_MPLLB_TX_CLK_DIV        = 0x00000000,
RDPCSPIPE_PHY_DP_MPLLB_TX_CLK_DIV2       = 0x00000001,
RDPCSPIPE_PHY_DP_MPLLB_TX_CLK_DIV4       = 0x00000002,
RDPCSPIPE_PHY_DP_MPLLB_TX_CLK_DIV8       = 0x00000003,
RDPCSPIPE_PHY_DP_MPLLB_TX_CLK_DIV3       = 0x00000004,
RDPCSPIPE_PHY_DP_MPLLB_TX_CLK_DIV5       = 0x00000005,
RDPCSPIPE_PHY_DP_MPLLB_TX_CLK_DIV6       = 0x00000006,
RDPCSPIPE_PHY_DP_MPLLB_TX_CLK_DIV10      = 0x00000007,
} RDPCSPIPE_PHY_CNTL12_RDPCS_PHY_DP_MPLLB_TX_CLK_DIV;

/*
 * RDPCSPIPE_PHY_CNTL4_RDPCS_PHY_DP_TX_TERM_CTRL enum
 */

typedef enum RDPCSPIPE_PHY_CNTL4_RDPCS_PHY_DP_TX_TERM_CTRL {
RDPCSPIPE_PHY_DP_TX_TERM_CTRL_54         = 0x00000000,
RDPCSPIPE_PHY_DP_TX_TERM_CTRL_52         = 0x00000001,
RDPCSPIPE_PHY_DP_TX_TERM_CTRL_50         = 0x00000002,
RDPCSPIPE_PHY_DP_TX_TERM_CTRL_48         = 0x00000003,
RDPCSPIPE_PHY_DP_TX_TERM_CTRL_46         = 0x00000004,
RDPCSPIPE_PHY_DP_TX_TERM_CTRL_44         = 0x00000005,
RDPCSPIPE_PHY_DP_TX_TERM_CTRL_42         = 0x00000006,
RDPCSPIPE_PHY_DP_TX_TERM_CTRL_40         = 0x00000007,
} RDPCSPIPE_PHY_CNTL4_RDPCS_PHY_DP_TX_TERM_CTRL;

/*
 * RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_DETRX_RESULT enum
 */

typedef enum RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_DETRX_RESULT {
RDPCSPIPE_PHY_DP_TX_DETRX_RESULT_NO_DETECT = 0x00000000,
RDPCSPIPE_PHY_DP_TX_DETRX_RESULT_DETECT  = 0x00000001,
} RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_DETRX_RESULT;

/*
 * RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_RATE enum
 */

typedef enum RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_RATE {
RDPCSPIPE_PHY_DP_TX_RATE                 = 0x00000000,
RDPCSPIPE_PHY_DP_TX_RATE_DIV2            = 0x00000001,
RDPCSPIPE_PHY_DP_TX_RATE_DIV4            = 0x00000002,
} RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_RATE;

/*
 * RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_WIDTH enum
 */

typedef enum RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_WIDTH {
RDPCSPIPE_PHY_DP_TX_WIDTH_8              = 0x00000000,
RDPCSPIPE_PHY_DP_TX_WIDTH_10             = 0x00000001,
RDPCSPIPE_PHY_DP_TX_WIDTH_16             = 0x00000002,
RDPCSPIPE_PHY_DP_TX_WIDTH_20             = 0x00000003,
} RDPCSPIPE_PHY_CNTL_RDPCS_PHY_DP_TX_WIDTH;

/*
 * RDPCSPIPE_PHY_CNTL_RRDPCS_PHY_DP_TX_PSTATE enum
 */

typedef enum RDPCSPIPE_PHY_CNTL_RRDPCS_PHY_DP_TX_PSTATE {
RRDPCSPIPE_PHY_DP_TX_PSTATE_POWER_UP     = 0x00000000,
RRDPCSPIPE_PHY_DP_TX_PSTATE_HOLD         = 0x00000001,
RRDPCSPIPE_PHY_DP_TX_PSTATE_HOLD_OFF     = 0x00000002,
RRDPCSPIPE_PHY_DP_TX_PSTATE_POWER_DOWN   = 0x00000003,
} RDPCSPIPE_PHY_CNTL_RRDPCS_PHY_DP_TX_PSTATE;

/*
 * RDPCSPIPE_PHY_IF_WIDTH enum
 */

typedef enum RDPCSPIPE_PHY_IF_WIDTH {
PHY_IF_WIDTH_10BIT                       = 0x00000000,
PHY_IF_WIDTH_20BIT                       = 0x00000001,
PHY_IF_WIDTH_40BIT                       = 0x00000002,
PHY_IF_WIDTH_80BIT                       = 0x00000003,
} RDPCSPIPE_PHY_IF_WIDTH;

/*
 * RDPCSPIPE_PHY_RATE enum
 */

typedef enum RDPCSPIPE_PHY_RATE {
PHY_DP_RATE_1P62                         = 0x00000000,
PHY_DP_RATE_2P7                          = 0x00000001,
PHY_DP_RATE_5P4                          = 0x00000002,
PHY_DP_RATE_8P1                          = 0x00000003,
PHY_DP_RATE_2P16                         = 0x00000004,
PHY_DP_RATE_2P43                         = 0x00000005,
PHY_DP_RATE_3P24                         = 0x00000006,
PHY_DP_RATE_4P32                         = 0x00000007,
PHY_DP_RATE_10P                          = 0x00000008,
PHY_DP_RATE_13P5                         = 0x00000009,
PHY_DP_RATE_20P                          = 0x0000000a,
PHY_CUSTOM_RATE                          = 0x0000000f,
} RDPCSPIPE_PHY_RATE;

/*
 * RDPCSPIPE_PHY_REF_ALT_CLK_EN enum
 */

typedef enum RDPCSPIPE_PHY_REF_ALT_CLK_EN {
RDPCSPIPE_PHY_REF_ALT_CLK_DISABLE        = 0x00000000,
RDPCSPIPE_PHY_REF_ALT_CLK_ENABLE         = 0x00000001,
} RDPCSPIPE_PHY_REF_ALT_CLK_EN;

/*
 * RDPCSPIPE_TEST_CLK_SEL enum
 */

typedef enum RDPCSPIPE_TEST_CLK_SEL {
RDPCSPIPE_TEST_CLK_SEL_NONE              = 0x00000000,
RDPCSPIPE_TEST_CLK_SEL_CFGCLK            = 0x00000001,
RDPCSPIPE_TEST_CLK_SEL_SYMCLK_DIV2_LDPCS = 0x00000002,
RDPCSPIPE_TEST_CLK_SEL_SYMCLK_DIV2_RDPCS = 0x00000003,
RDPCSPIPE_TEST_CLK_SEL_SYMCLK_DIV2_LDPCS_DIV4 = 0x00000004,
RDPCSPIPE_TEST_CLK_SEL_SYMCLK_DIV2_RDPCS_DIV4 = 0x00000005,
RDPCSPIPE_TEST_CLK_SEL_SRAMCLK           = 0x00000006,
RDPCSPIPE_TEST_CLK_SEL_EXT_CR_CLK        = 0x00000007,
RDPCSPIPE_TEST_CLK_SEL_DP_TX0_WORD_CLK   = 0x00000008,
RDPCSPIPE_TEST_CLK_SEL_DP_TX1_WORD_CLK   = 0x00000009,
RDPCSPIPE_TEST_CLK_SEL_DP_TX2_WORD_CLK   = 0x0000000a,
RDPCSPIPE_TEST_CLK_SEL_DP_TX3_WORD_CLK   = 0x0000000b,
RDPCSPIPE_TEST_CLK_SEL_DP_MPLLB_DIV_CLK  = 0x0000000c,
RDPCSPIPE_TEST_CLK_SEL_HDMI_MPLLB_HDMI_PIXEL_CLK = 0x0000000d,
RDPCSPIPE_TEST_CLK_SEL_PHY_REF_DIG_CLK   = 0x0000000e,
RDPCSPIPE_TEST_CLK_SEL_REF_DIG_FR_clk    = 0x0000000f,
RDPCSPIPE_TEST_CLK_SEL_dtb_out0          = 0x00000010,
RDPCSPIPE_TEST_CLK_SEL_dtb_out1          = 0x00000011,
} RDPCSPIPE_TEST_CLK_SEL;

/*
 * RDPCS_PIPE_CNTL_TX_LANE_PACK_FROM_MSB enum
 */

typedef enum RDPCS_PIPE_CNTL_TX_LANE_PACK_FROM_MSB {
RDPCSPIPE_LANE_PACK_FROM_MSB_DISABLE     = 0x00000000,
RDPCSPIPE_LANE_PACK_FROM_MSB_ENABLE      = 0x00000001,
} RDPCS_PIPE_CNTL_TX_LANE_PACK_FROM_MSB;

/*
 * RDPCS_PIPE_SRAM_CNTL_RDPCS_MEM_PWR_FORCE enum
 */

typedef enum RDPCS_PIPE_SRAM_CNTL_RDPCS_MEM_PWR_FORCE {
RDPCSPIPE_MEM_PWR_NO_FORCE               = 0x00000000,
RDPCSPIPE_MEM_PWR_LIGHT_SLEEP            = 0x00000001,
RDPCSPIPE_MEM_PWR_DEEP_SLEEP             = 0x00000002,
RDPCSPIPE_MEM_PWR_SHUT_DOWN              = 0x00000003,
} RDPCS_PIPE_SRAM_CNTL_RDPCS_MEM_PWR_FORCE;

/*
 * RDPCS_PIPE_SRAM_CNTL_RDPCS_MEM_PWR_PWR_STATE enum
 */

typedef enum RDPCS_PIPE_SRAM_CNTL_RDPCS_MEM_PWR_PWR_STATE {
RDPCSPIPE_MEM_PWR_PWR_STATE_ON           = 0x00000000,
RDPCSPIPE_MEM_PWR_PWR_STATE_LIGHT_SLEEP  = 0x00000001,
RDPCSPIPE_MEM_PWR_PWR_STATE_DEEP_SLEEP   = 0x00000002,
RDPCSPIPE_MEM_PWR_PWR_STATE_SHUT_DOWN    = 0x00000003,
} RDPCS_PIPE_SRAM_CNTL_RDPCS_MEM_PWR_PWR_STATE;

/*
 * RPDCSPIPE_CNTL_TX_LANE_BIT_ORDER_REVERSE_BEFORE_PACK enum
 */

typedef enum RPDCSPIPE_CNTL_TX_LANE_BIT_ORDER_REVERSE_BEFORE_PACK {
RDPCSPIPE_LANE_BIT_ORDER_REVERSE_DISABLE = 0x00000000,
RDPCSPIPE_LANE_BIT_ORDER_REVERSE_ENABLE  = 0x00000001,
} RPDCSPIPE_CNTL_TX_LANE_BIT_ORDER_REVERSE_BEFORE_PACK;

/*******************************************************
 * GDS Enums
 *******************************************************/

/*
 * GDS_PERFCOUNT_SELECT enum
 */

typedef enum GDS_PERFCOUNT_SELECT {
GDS_PERF_SEL_WR_COMP                     = 0x00000000,
GDS_PERF_SEL_WBUF_WR                     = 0x00000001,
GDS_PERF_SEL_SE0_NORET                   = 0x00000002,
GDS_PERF_SEL_SE0_RET                     = 0x00000003,
GDS_PERF_SEL_SE0_ORD_CNT                 = 0x00000004,
GDS_PERF_SEL_SE0_2COMP_REQ               = 0x00000005,
GDS_PERF_SEL_SE0_ORD_WAVE_VALID          = 0x00000006,
GDS_PERF_SEL_SE0_GDS_STALL_BY_ORD        = 0x00000007,
GDS_PERF_SEL_SE0_GDS_WR_OP               = 0x00000008,
GDS_PERF_SEL_SE0_GDS_RD_OP               = 0x00000009,
GDS_PERF_SEL_SE0_GDS_ATOM_OP             = 0x0000000a,
GDS_PERF_SEL_SE0_GDS_REL_OP              = 0x0000000b,
GDS_PERF_SEL_SE0_GDS_CMPXCH_OP           = 0x0000000c,
GDS_PERF_SEL_SE0_GDS_BYTE_OP             = 0x0000000d,
GDS_PERF_SEL_SE0_GDS_SHORT_OP            = 0x0000000e,
GDS_PERF_SEL_SE1_NORET                   = 0x0000000f,
GDS_PERF_SEL_SE1_RET                     = 0x00000010,
GDS_PERF_SEL_SE1_ORD_CNT                 = 0x00000011,
GDS_PERF_SEL_SE1_2COMP_REQ               = 0x00000012,
GDS_PERF_SEL_SE1_ORD_WAVE_VALID          = 0x00000013,
GDS_PERF_SEL_SE1_GDS_STALL_BY_ORD        = 0x00000014,
GDS_PERF_SEL_SE1_GDS_WR_OP               = 0x00000015,
GDS_PERF_SEL_SE1_GDS_RD_OP               = 0x00000016,
GDS_PERF_SEL_SE1_GDS_ATOM_OP             = 0x00000017,
GDS_PERF_SEL_SE1_GDS_REL_OP              = 0x00000018,
GDS_PERF_SEL_SE1_GDS_CMPXCH_OP           = 0x00000019,
GDS_PERF_SEL_SE1_GDS_BYTE_OP             = 0x0000001a,
GDS_PERF_SEL_SE1_GDS_SHORT_OP            = 0x0000001b,
GDS_PERF_SEL_SE2_NORET                   = 0x0000001c,
GDS_PERF_SEL_SE2_RET                     = 0x0000001d,
GDS_PERF_SEL_SE2_ORD_CNT                 = 0x0000001e,
GDS_PERF_SEL_SE2_2COMP_REQ               = 0x0000001f,
GDS_PERF_SEL_SE2_ORD_WAVE_VALID          = 0x00000020,
GDS_PERF_SEL_SE2_GDS_STALL_BY_ORD        = 0x00000021,
GDS_PERF_SEL_SE2_GDS_WR_OP               = 0x00000022,
GDS_PERF_SEL_SE2_GDS_RD_OP               = 0x00000023,
GDS_PERF_SEL_SE2_GDS_ATOM_OP             = 0x00000024,
GDS_PERF_SEL_SE2_GDS_REL_OP              = 0x00000025,
GDS_PERF_SEL_SE2_GDS_CMPXCH_OP           = 0x00000026,
GDS_PERF_SEL_SE2_GDS_BYTE_OP             = 0x00000027,
GDS_PERF_SEL_SE2_GDS_SHORT_OP            = 0x00000028,
GDS_PERF_SEL_SE3_NORET                   = 0x00000029,
GDS_PERF_SEL_SE3_RET                     = 0x0000002a,
GDS_PERF_SEL_SE3_ORD_CNT                 = 0x0000002b,
GDS_PERF_SEL_SE3_2COMP_REQ               = 0x0000002c,
GDS_PERF_SEL_SE3_ORD_WAVE_VALID          = 0x0000002d,
GDS_PERF_SEL_SE3_GDS_STALL_BY_ORD        = 0x0000002e,
GDS_PERF_SEL_SE3_GDS_WR_OP               = 0x0000002f,
GDS_PERF_SEL_SE3_GDS_RD_OP               = 0x00000030,
GDS_PERF_SEL_SE3_GDS_ATOM_OP             = 0x00000031,
GDS_PERF_SEL_SE3_GDS_REL_OP              = 0x00000032,
GDS_PERF_SEL_SE3_GDS_CMPXCH_OP           = 0x00000033,
GDS_PERF_SEL_SE3_GDS_BYTE_OP             = 0x00000034,
GDS_PERF_SEL_SE3_GDS_SHORT_OP            = 0x00000035,
GDS_PERF_SEL_SE4_NORET                   = 0x00000036,
GDS_PERF_SEL_SE4_RET                     = 0x00000037,
GDS_PERF_SEL_SE4_ORD_CNT                 = 0x00000038,
GDS_PERF_SEL_SE4_2COMP_REQ               = 0x00000039,
GDS_PERF_SEL_SE4_ORD_WAVE_VALID          = 0x0000003a,
GDS_PERF_SEL_SE4_GDS_STALL_BY_ORD        = 0x0000003b,
GDS_PERF_SEL_SE4_GDS_WR_OP               = 0x0000003c,
GDS_PERF_SEL_SE4_GDS_RD_OP               = 0x0000003d,
GDS_PERF_SEL_SE4_GDS_ATOM_OP             = 0x0000003e,
GDS_PERF_SEL_SE4_GDS_REL_OP              = 0x0000003f,
GDS_PERF_SEL_SE4_GDS_CMPXCH_OP           = 0x00000040,
GDS_PERF_SEL_SE4_GDS_BYTE_OP             = 0x00000041,
GDS_PERF_SEL_SE4_GDS_SHORT_OP            = 0x00000042,
GDS_PERF_SEL_SE5_NORET                   = 0x00000043,
GDS_PERF_SEL_SE5_RET                     = 0x00000044,
GDS_PERF_SEL_SE5_ORD_CNT                 = 0x00000045,
GDS_PERF_SEL_SE5_2COMP_REQ               = 0x00000046,
GDS_PERF_SEL_SE5_ORD_WAVE_VALID          = 0x00000047,
GDS_PERF_SEL_SE5_GDS_STALL_BY_ORD        = 0x00000048,
GDS_PERF_SEL_SE5_GDS_WR_OP               = 0x00000049,
GDS_PERF_SEL_SE5_GDS_RD_OP               = 0x0000004a,
GDS_PERF_SEL_SE5_GDS_ATOM_OP             = 0x0000004b,
GDS_PERF_SEL_SE5_GDS_REL_OP              = 0x0000004c,
GDS_PERF_SEL_SE5_GDS_CMPXCH_OP           = 0x0000004d,
GDS_PERF_SEL_SE5_GDS_BYTE_OP             = 0x0000004e,
GDS_PERF_SEL_SE5_GDS_SHORT_OP            = 0x0000004f,
GDS_PERF_SEL_SE6_NORET                   = 0x00000050,
GDS_PERF_SEL_SE6_RET                     = 0x00000051,
GDS_PERF_SEL_SE6_ORD_CNT                 = 0x00000052,
GDS_PERF_SEL_SE6_2COMP_REQ               = 0x00000053,
GDS_PERF_SEL_SE6_ORD_WAVE_VALID          = 0x00000054,
GDS_PERF_SEL_SE6_GDS_STALL_BY_ORD        = 0x00000055,
GDS_PERF_SEL_SE6_GDS_WR_OP               = 0x00000056,
GDS_PERF_SEL_SE6_GDS_RD_OP               = 0x00000057,
GDS_PERF_SEL_SE6_GDS_ATOM_OP             = 0x00000058,
GDS_PERF_SEL_SE6_GDS_REL_OP              = 0x00000059,
GDS_PERF_SEL_SE6_GDS_CMPXCH_OP           = 0x0000005a,
GDS_PERF_SEL_SE6_GDS_BYTE_OP             = 0x0000005b,
GDS_PERF_SEL_SE6_GDS_SHORT_OP            = 0x0000005c,
GDS_PERF_SEL_SE7_NORET                   = 0x0000005d,
GDS_PERF_SEL_SE7_RET                     = 0x0000005e,
GDS_PERF_SEL_SE7_ORD_CNT                 = 0x0000005f,
GDS_PERF_SEL_SE7_2COMP_REQ               = 0x00000060,
GDS_PERF_SEL_SE7_ORD_WAVE_VALID          = 0x00000061,
GDS_PERF_SEL_SE7_GDS_STALL_BY_ORD        = 0x00000062,
GDS_PERF_SEL_SE7_GDS_WR_OP               = 0x00000063,
GDS_PERF_SEL_SE7_GDS_RD_OP               = 0x00000064,
GDS_PERF_SEL_SE7_GDS_ATOM_OP             = 0x00000065,
GDS_PERF_SEL_SE7_GDS_REL_OP              = 0x00000066,
GDS_PERF_SEL_SE7_GDS_CMPXCH_OP           = 0x00000067,
GDS_PERF_SEL_SE7_GDS_BYTE_OP             = 0x00000068,
GDS_PERF_SEL_SE7_GDS_SHORT_OP            = 0x00000069,
GDS_PERF_SEL_GWS_RELEASED                = 0x0000006a,
GDS_PERF_SEL_GWS_BYPASS                  = 0x0000006b,
} GDS_PERFCOUNT_SELECT;

/*******************************************************
 * CB Enums
 *******************************************************/

/*
 * BlendOp enum
 */

typedef enum BlendOp {
BLEND_ZERO                               = 0x00000000,
BLEND_ONE                                = 0x00000001,
BLEND_SRC_COLOR                          = 0x00000002,
BLEND_ONE_MINUS_SRC_COLOR                = 0x00000003,
BLEND_SRC_ALPHA                          = 0x00000004,
BLEND_ONE_MINUS_SRC_ALPHA                = 0x00000005,
BLEND_DST_ALPHA                          = 0x00000006,
BLEND_ONE_MINUS_DST_ALPHA                = 0x00000007,
BLEND_DST_COLOR                          = 0x00000008,
BLEND_ONE_MINUS_DST_COLOR                = 0x00000009,
BLEND_SRC_ALPHA_SATURATE                 = 0x0000000a,
BLEND_CONSTANT_COLOR                     = 0x0000000b,
BLEND_ONE_MINUS_CONSTANT_COLOR           = 0x0000000c,
BLEND_SRC1_COLOR                         = 0x0000000d,
BLEND_INV_SRC1_COLOR                     = 0x0000000e,
BLEND_SRC1_ALPHA                         = 0x0000000f,
BLEND_INV_SRC1_ALPHA                     = 0x00000010,
BLEND_CONSTANT_ALPHA                     = 0x00000011,
BLEND_ONE_MINUS_CONSTANT_ALPHA           = 0x00000012,
} BlendOp;

/*
 * BlendOpt enum
 */

typedef enum BlendOpt {
FORCE_OPT_AUTO                           = 0x00000000,
FORCE_OPT_DISABLE                        = 0x00000001,
FORCE_OPT_ENABLE_IF_SRC_A_0              = 0x00000002,
FORCE_OPT_ENABLE_IF_SRC_RGB_0            = 0x00000003,
FORCE_OPT_ENABLE_IF_SRC_ARGB_0           = 0x00000004,
FORCE_OPT_ENABLE_IF_SRC_A_1              = 0x00000005,
FORCE_OPT_ENABLE_IF_SRC_RGB_1            = 0x00000006,
FORCE_OPT_ENABLE_IF_SRC_ARGB_1           = 0x00000007,
} BlendOpt;

/*
 * CBMode enum
 */

typedef enum CBMode {
CB_DISABLE                               = 0x00000000,
CB_NORMAL                                = 0x00000001,
CB_ELIMINATE_FAST_CLEAR                  = 0x00000002,
CB_DCC_DECOMPRESS                        = 0x00000003,
CB_RESERVED                              = 0x00000004,
} CBMode;

/*
 * CBPerfClearFilterSel enum
 */

typedef enum CBPerfClearFilterSel {
CB_PERF_CLEAR_FILTER_SEL_NONCLEAR        = 0x00000000,
CB_PERF_CLEAR_FILTER_SEL_CLEAR           = 0x00000001,
} CBPerfClearFilterSel;

/*
 * CBPerfOpFilterSel enum
 */

typedef enum CBPerfOpFilterSel {
CB_PERF_OP_FILTER_SEL_WRITE_ONLY         = 0x00000000,
CB_PERF_OP_FILTER_SEL_NEEDS_DESTINATION  = 0x00000001,
CB_PERF_OP_FILTER_SEL_RESOLVE            = 0x00000002,
CB_PERF_OP_FILTER_SEL_DECOMPRESS         = 0x00000003,
CB_PERF_OP_FILTER_SEL_FMASK_DECOMPRESS   = 0x00000004,
CB_PERF_OP_FILTER_SEL_ELIMINATE_FAST_CLEAR = 0x00000005,
} CBPerfOpFilterSel;

/*
 * CBPerfSel enum
 */

typedef enum CBPerfSel {
CB_PERF_SEL_NONE                         = 0x00000000,
CB_PERF_SEL_DRAWN_PIXEL                  = 0x00000001,
CB_PERF_SEL_DRAWN_QUAD                   = 0x00000002,
CB_PERF_SEL_DRAWN_QUAD_FRAGMENT          = 0x00000003,
CB_PERF_SEL_DRAWN_TILE                   = 0x00000004,
CB_PERF_SEL_FILTER_DRAWN_PIXEL           = 0x00000005,
CB_PERF_SEL_FILTER_DRAWN_QUAD            = 0x00000006,
CB_PERF_SEL_FILTER_DRAWN_QUAD_FRAGMENT   = 0x00000007,
CB_PERF_SEL_FILTER_DRAWN_TILE            = 0x00000008,
CB_PERF_SEL_CC_DCC_DECOMPRESS_TID_IN     = 0x00000009,
CB_PERF_SEL_CC_DCC_DECOMPRESS_TID_OUT    = 0x0000000a,
CB_PERF_SEL_CC_DCC_COMPRESS_TID_IN       = 0x0000000b,
CB_PERF_SEL_CC_DCC_COMPRESS_TID_OUT      = 0x0000000c,
CB_PERF_SEL_CC_MC_WRITE_REQUEST          = 0x0000000d,
CB_PERF_SEL_CC_MC_WRITE_REQUESTS_IN_FLIGHT = 0x0000000e,
CB_PERF_SEL_CC_MC_READ_REQUEST           = 0x0000000f,
CB_PERF_SEL_CC_MC_READ_REQUESTS_IN_FLIGHT = 0x00000010,
CB_PERF_SEL_DB_CB_EXPORT_VALID_READY     = 0x00000011,
CB_PERF_SEL_DB_CB_EXPORT_VALID_READYB    = 0x00000012,
CB_PERF_SEL_DB_CB_EXPORT_VALIDB_READY    = 0x00000013,
CB_PERF_SEL_DB_CB_EXPORT_VALIDB_READYB   = 0x00000014,
CB_PERF_SEL_RESERVED_21                  = 0x00000015,
CB_PERF_SEL_RESERVED_22                  = 0x00000016,
CB_PERF_SEL_RESERVED_23                  = 0x00000017,
CB_PERF_SEL_RESERVED_24                  = 0x00000018,
CB_PERF_SEL_RESERVED_25                  = 0x00000019,
CB_PERF_SEL_RESERVED_26                  = 0x0000001a,
CB_PERF_SEL_RESERVED_27                  = 0x0000001b,
CB_PERF_SEL_RESERVED_28                  = 0x0000001c,
CB_PERF_SEL_RESERVED_29                  = 0x0000001d,
CB_PERF_SEL_CB_RMI_WRREQ_VALID_READY     = 0x0000001e,
CB_PERF_SEL_CB_RMI_WRREQ_VALID_READYB    = 0x0000001f,
CB_PERF_SEL_CB_RMI_WRREQ_VALIDB_READY    = 0x00000020,
CB_PERF_SEL_CB_RMI_WRREQ_VALIDB_READYB   = 0x00000021,
CB_PERF_SEL_CB_RMI_RDREQ_VALID_READY     = 0x00000022,
CB_PERF_SEL_CB_RMI_RDREQ_VALID_READYB    = 0x00000023,
CB_PERF_SEL_CB_RMI_RDREQ_VALIDB_READY    = 0x00000024,
CB_PERF_SEL_CB_RMI_RDREQ_VALIDB_READYB   = 0x00000025,
CB_PERF_SEL_RESERVED_38                  = 0x00000026,
CB_PERF_SEL_RESERVED_39                  = 0x00000027,
CB_PERF_SEL_RESERVED_40                  = 0x00000028,
CB_PERF_SEL_RESERVED_41                  = 0x00000029,
CB_PERF_SEL_RESERVED_42                  = 0x0000002a,
CB_PERF_SEL_RESERVED_43                  = 0x0000002b,
CB_PERF_SEL_RESERVED_44                  = 0x0000002c,
CB_PERF_SEL_RESERVED_45                  = 0x0000002d,
CB_PERF_SEL_RESERVED_46                  = 0x0000002e,
CB_PERF_SEL_RESERVED_47                  = 0x0000002f,
CB_PERF_SEL_RESERVED_48                  = 0x00000030,
CB_PERF_SEL_RESERVED_49                  = 0x00000031,
CB_PERF_SEL_STATIC_CLOCK_EN              = 0x00000032,
CB_PERF_SEL_PERFMON_CLOCK_EN             = 0x00000033,
CB_PERF_SEL_BLEND_CLOCK_EN               = 0x00000034,
CB_PERF_SEL_COLOR_STORE_CLOCK_EN         = 0x00000035,
CB_PERF_SEL_BACKEND_READ_CLOCK_EN        = 0x00000036,
CB_PERF_SEL_GRBM_CLOCK_EN                = 0x00000037,
CB_PERF_SEL_MEMARB_CLOCK_EN              = 0x00000038,
CB_PERF_SEL_BACKEND_EVICT_PIPE_CLOCK_EN  = 0x00000039,
CB_PERF_SEL_BACKEND_FRAGOP_CLOCK_EN      = 0x0000003a,
CB_PERF_SEL_BACKEND_SRC_FIFO_CLOCK_EN    = 0x0000003b,
CB_PERF_SEL_BACKEND_CACHE_CTL_CLOCK_EN   = 0x0000003c,
CB_PERF_SEL_FRONTEND_INPUT_CLOCK_EN      = 0x0000003d,
CB_PERF_SEL_FRONTEND_ADDR_CLOCK_EN       = 0x0000003e,
CB_PERF_SEL_FRONTEND_FDCC_CLOCK_EN       = 0x0000003f,
CB_PERF_SEL_FRONTEND_SAMPLE_MASK_TRACKER_CLOCK_EN = 0x00000040,
CB_PERF_SEL_RESERVED_65                  = 0x00000041,
CB_PERF_SEL_RESERVED_66                  = 0x00000042,
CB_PERF_SEL_RESERVED_67                  = 0x00000043,
CB_PERF_SEL_RESERVED_68                  = 0x00000044,
CB_PERF_SEL_RESERVED_69                  = 0x00000045,
CB_PERF_SEL_RESERVED_70                  = 0x00000046,
CB_PERF_SEL_RESERVED_71                  = 0x00000047,
CB_PERF_SEL_RESERVED_72                  = 0x00000048,
CB_PERF_SEL_RESERVED_73                  = 0x00000049,
CB_PERF_SEL_RESERVED_74                  = 0x0000004a,
CB_PERF_SEL_RESERVED_75                  = 0x0000004b,
CB_PERF_SEL_RESERVED_76                  = 0x0000004c,
CB_PERF_SEL_RESERVED_77                  = 0x0000004d,
CB_PERF_SEL_RESERVED_78                  = 0x0000004e,
CB_PERF_SEL_RESERVED_79                  = 0x0000004f,
CB_PERF_SEL_RESERVED_80                  = 0x00000050,
CB_PERF_SEL_RESERVED_81                  = 0x00000051,
CB_PERF_SEL_RESERVED_82                  = 0x00000052,
CB_PERF_SEL_RESERVED_83                  = 0x00000053,
CB_PERF_SEL_RESERVED_84                  = 0x00000054,
CB_PERF_SEL_RESERVED_85                  = 0x00000055,
CB_PERF_SEL_RESERVED_86                  = 0x00000056,
CB_PERF_SEL_RESERVED_87                  = 0x00000057,
CB_PERF_SEL_RESERVED_88                  = 0x00000058,
CB_PERF_SEL_RESERVED_89                  = 0x00000059,
CB_PERF_SEL_RESERVED_90                  = 0x0000005a,
CB_PERF_SEL_RESERVED_91                  = 0x0000005b,
CB_PERF_SEL_RESERVED_92                  = 0x0000005c,
CB_PERF_SEL_RESERVED_93                  = 0x0000005d,
CB_PERF_SEL_RESERVED_94                  = 0x0000005e,
CB_PERF_SEL_RESERVED_95                  = 0x0000005f,
CB_PERF_SEL_RESERVED_96                  = 0x00000060,
CB_PERF_SEL_RESERVED_97                  = 0x00000061,
CB_PERF_SEL_RESERVED_98                  = 0x00000062,
CB_PERF_SEL_RESERVED_99                  = 0x00000063,
CB_PERF_SEL_CC_TAG_HIT                   = 0x00000064,
CB_PERF_SEL_CC_CACHE_TAG_MISS            = 0x00000065,
CB_PERF_SEL_CC_CACHE_SECTOR_MISS         = 0x00000066,
CB_PERF_SEL_CC_CACHE_SECTOR_HIT          = 0x00000067,
CB_PERF_SEL_CC_CACHE_REEVICTION_STALL    = 0x00000068,
CB_PERF_SEL_CC_CACHE_EVICT_NONZERO_INFLIGHT_STALL = 0x00000069,
CB_PERF_SEL_CC_CACHE_REPLACE_PENDING_EVICT_STALL = 0x0000006a,
CB_PERF_SEL_CC_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL = 0x0000006b,
CB_PERF_SEL_CC_CACHE_READ_OUTPUT_STALL   = 0x0000006c,
CB_PERF_SEL_CC_CACHE_WRITE_OUTPUT_STALL  = 0x0000006d,
CB_PERF_SEL_CC_CACHE_ACK_OUTPUT_STALL    = 0x0000006e,
CB_PERF_SEL_CC_CACHE_STALL               = 0x0000006f,
CB_PERF_SEL_CC_CACHE_FLUSH               = 0x00000070,
CB_PERF_SEL_CC_CACHE_TAGS_FLUSHED        = 0x00000071,
CB_PERF_SEL_CC_CACHE_WA_TO_RMW_CONVERSION = 0x00000072,
CB_PERF_SEL_CC_CACHE_SECTORS_FLUSHED     = 0x00000073,
CB_PERF_SEL_CC_CACHE_DIRTY_SECTORS_FLUSHED = 0x00000074,
CB_PERF_SEL_CC_CACHE_READS_SAVED_DUE_TO_DCC = 0x00000075,
CB_PERF_SEL_RESERVED_118                 = 0x00000076,
CB_PERF_SEL_RESERVED_119                 = 0x00000077,
CB_PERF_SEL_RESERVED_120                 = 0x00000078,
CB_PERF_SEL_RESERVED_121                 = 0x00000079,
CB_PERF_SEL_RESERVED_122                 = 0x0000007a,
CB_PERF_SEL_RESERVED_123                 = 0x0000007b,
CB_PERF_SEL_RESERVED_124                 = 0x0000007c,
CB_PERF_SEL_RESERVED_125                 = 0x0000007d,
CB_PERF_SEL_RESERVED_126                 = 0x0000007e,
CB_PERF_SEL_RESERVED_127                 = 0x0000007f,
CB_PERF_SEL_RESERVED_128                 = 0x00000080,
CB_PERF_SEL_RESERVED_129                 = 0x00000081,
CB_PERF_SEL_RESERVED_130                 = 0x00000082,
CB_PERF_SEL_RESERVED_131                 = 0x00000083,
CB_PERF_SEL_RESERVED_132                 = 0x00000084,
CB_PERF_SEL_RESERVED_133                 = 0x00000085,
CB_PERF_SEL_RESERVED_134                 = 0x00000086,
CB_PERF_SEL_RESERVED_135                 = 0x00000087,
CB_PERF_SEL_RESERVED_136                 = 0x00000088,
CB_PERF_SEL_RESERVED_137                 = 0x00000089,
CB_PERF_SEL_RESERVED_138                 = 0x0000008a,
CB_PERF_SEL_RESERVED_139                 = 0x0000008b,
CB_PERF_SEL_RESERVED_140                 = 0x0000008c,
CB_PERF_SEL_RESERVED_141                 = 0x0000008d,
CB_PERF_SEL_RESERVED_142                 = 0x0000008e,
CB_PERF_SEL_RESERVED_143                 = 0x0000008f,
CB_PERF_SEL_RESERVED_144                 = 0x00000090,
CB_PERF_SEL_RESERVED_145                 = 0x00000091,
CB_PERF_SEL_RESERVED_146                 = 0x00000092,
CB_PERF_SEL_RESERVED_147                 = 0x00000093,
CB_PERF_SEL_RESERVED_148                 = 0x00000094,
CB_PERF_SEL_RESERVED_149                 = 0x00000095,
CB_PERF_SEL_DCC_CACHE_PERF_HIT           = 0x00000096,
CB_PERF_SEL_DCC_CACHE_TAG_MISS           = 0x00000097,
CB_PERF_SEL_DCC_CACHE_SECTOR_MISS        = 0x00000098,
CB_PERF_SEL_DCC_CACHE_REEVICTION_STALL   = 0x00000099,
CB_PERF_SEL_DCC_CACHE_EVICT_NONZERO_INFLIGHT_STALL = 0x0000009a,
CB_PERF_SEL_DCC_CACHE_REPLACE_PENDING_EVICT_STALL = 0x0000009b,
CB_PERF_SEL_DCC_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL = 0x0000009c,
CB_PERF_SEL_DCC_CACHE_READ_OUTPUT_STALL  = 0x0000009d,
CB_PERF_SEL_DCC_CACHE_WRITE_OUTPUT_STALL = 0x0000009e,
CB_PERF_SEL_DCC_CACHE_ACK_OUTPUT_STALL   = 0x0000009f,
CB_PERF_SEL_DCC_CACHE_STALL              = 0x000000a0,
CB_PERF_SEL_DCC_CACHE_FLUSH              = 0x000000a1,
CB_PERF_SEL_DCC_CACHE_SECTORS_FLUSHED    = 0x000000a2,
CB_PERF_SEL_DCC_CACHE_DIRTY_SECTORS_FLUSHED = 0x000000a3,
CB_PERF_SEL_DCC_CACHE_TAGS_FLUSHED       = 0x000000a4,
CB_PERF_SEL_RESERVED_165                 = 0x000000a5,
CB_PERF_SEL_RESERVED_166                 = 0x000000a6,
CB_PERF_SEL_RESERVED_167                 = 0x000000a7,
CB_PERF_SEL_RESERVED_168                 = 0x000000a8,
CB_PERF_SEL_RESERVED_169                 = 0x000000a9,
CB_PERF_SEL_RESERVED_170                 = 0x000000aa,
CB_PERF_SEL_RESERVED_171                 = 0x000000ab,
CB_PERF_SEL_RESERVED_172                 = 0x000000ac,
CB_PERF_SEL_RESERVED_173                 = 0x000000ad,
CB_PERF_SEL_RESERVED_174                 = 0x000000ae,
CB_PERF_SEL_RESERVED_175                 = 0x000000af,
CB_PERF_SEL_RESERVED_176                 = 0x000000b0,
CB_PERF_SEL_RESERVED_177                 = 0x000000b1,
CB_PERF_SEL_RESERVED_178                 = 0x000000b2,
CB_PERF_SEL_RESERVED_179                 = 0x000000b3,
CB_PERF_SEL_RESERVED_180                 = 0x000000b4,
CB_PERF_SEL_RESERVED_181                 = 0x000000b5,
CB_PERF_SEL_RESERVED_182                 = 0x000000b6,
CB_PERF_SEL_RESERVED_183                 = 0x000000b7,
CB_PERF_SEL_RESERVED_184                 = 0x000000b8,
CB_PERF_SEL_RESERVED_185                 = 0x000000b9,
CB_PERF_SEL_RESERVED_186                 = 0x000000ba,
CB_PERF_SEL_RESERVED_187                 = 0x000000bb,
CB_PERF_SEL_RESERVED_188                 = 0x000000bc,
CB_PERF_SEL_RESERVED_189                 = 0x000000bd,
CB_PERF_SEL_RESERVED_190                 = 0x000000be,
CB_PERF_SEL_RESERVED_191                 = 0x000000bf,
CB_PERF_SEL_RESERVED_192                 = 0x000000c0,
CB_PERF_SEL_RESERVED_193                 = 0x000000c1,
CB_PERF_SEL_RESERVED_194                 = 0x000000c2,
CB_PERF_SEL_RESERVED_195                 = 0x000000c3,
CB_PERF_SEL_RESERVED_196                 = 0x000000c4,
CB_PERF_SEL_RESERVED_197                 = 0x000000c5,
CB_PERF_SEL_RESERVED_198                 = 0x000000c6,
CB_PERF_SEL_RESERVED_199                 = 0x000000c7,
CB_PERF_SEL_BLEND_QUAD_DST_READ_COULD_HAVE_BEEN_OPTIMIZED = 0x000000c8,
CB_PERF_SEL_BLEND_QUAD_BLENDING_COULD_HAVE_BEEN_BYPASSED = 0x000000c9,
CB_PERF_SEL_BLEND_QUAD_COULD_HAVE_BEEN_DISCARDED = 0x000000ca,
CB_PERF_SEL_BLEND_OPT_PIXELS_RESULT_EQ_DEST = 0x000000cb,
CB_PERF_SEL_BLEND_STALL_AT_OUTPUT        = 0x000000cc,
CB_PERF_SEL_RESERVED_205                 = 0x000000cd,
CB_PERF_SEL_RESERVED_206                 = 0x000000ce,
CB_PERF_SEL_RESERVED_207                 = 0x000000cf,
CB_PERF_SEL_RESERVED_208                 = 0x000000d0,
CB_PERF_SEL_RESERVED_209                 = 0x000000d1,
CB_PERF_SEL_RESERVED_210                 = 0x000000d2,
CB_PERF_SEL_RESERVED_211                 = 0x000000d3,
CB_PERF_SEL_RESERVED_212                 = 0x000000d4,
CB_PERF_SEL_RESERVED_213                 = 0x000000d5,
CB_PERF_SEL_RESERVED_214                 = 0x000000d6,
CB_PERF_SEL_RESERVED_215                 = 0x000000d7,
CB_PERF_SEL_RESERVED_216                 = 0x000000d8,
CB_PERF_SEL_RESERVED_217                 = 0x000000d9,
CB_PERF_SEL_RESERVED_218                 = 0x000000da,
CB_PERF_SEL_RESERVED_219                 = 0x000000db,
CB_PERF_SEL_RESERVED_220                 = 0x000000dc,
CB_PERF_SEL_RESERVED_221                 = 0x000000dd,
CB_PERF_SEL_RESERVED_222                 = 0x000000de,
CB_PERF_SEL_RESERVED_223                 = 0x000000df,
CB_PERF_SEL_RESERVED_224                 = 0x000000e0,
CB_PERF_SEL_RESERVED_225                 = 0x000000e1,
CB_PERF_SEL_RESERVED_226                 = 0x000000e2,
CB_PERF_SEL_RESERVED_227                 = 0x000000e3,
CB_PERF_SEL_RESERVED_228                 = 0x000000e4,
CB_PERF_SEL_RESERVED_229                 = 0x000000e5,
CB_PERF_SEL_RESERVED_230                 = 0x000000e6,
CB_PERF_SEL_RESERVED_231                 = 0x000000e7,
CB_PERF_SEL_RESERVED_232                 = 0x000000e8,
CB_PERF_SEL_RESERVED_233                 = 0x000000e9,
CB_PERF_SEL_RESERVED_234                 = 0x000000ea,
CB_PERF_SEL_RESERVED_235                 = 0x000000eb,
CB_PERF_SEL_RESERVED_236                 = 0x000000ec,
CB_PERF_SEL_RESERVED_237                 = 0x000000ed,
CB_PERF_SEL_RESERVED_238                 = 0x000000ee,
CB_PERF_SEL_RESERVED_239                 = 0x000000ef,
CB_PERF_SEL_RESERVED_240                 = 0x000000f0,
CB_PERF_SEL_RESERVED_241                 = 0x000000f1,
CB_PERF_SEL_RESERVED_242                 = 0x000000f2,
CB_PERF_SEL_RESERVED_243                 = 0x000000f3,
CB_PERF_SEL_RESERVED_244                 = 0x000000f4,
CB_PERF_SEL_RESERVED_245                 = 0x000000f5,
CB_PERF_SEL_RESERVED_246                 = 0x000000f6,
CB_PERF_SEL_RESERVED_247                 = 0x000000f7,
CB_PERF_SEL_RESERVED_248                 = 0x000000f8,
CB_PERF_SEL_RESERVED_249                 = 0x000000f9,
CB_PERF_SEL_EVENT                        = 0x000000fa,
CB_PERF_SEL_EVENT_CACHE_FLUSH_TS         = 0x000000fb,
CB_PERF_SEL_EVENT_CONTEXT_DONE           = 0x000000fc,
CB_PERF_SEL_EVENT_CACHE_FLUSH            = 0x000000fd,
CB_PERF_SEL_EVENT_CACHE_FLUSH_AND_INV_TS_EVENT = 0x000000fe,
CB_PERF_SEL_EVENT_CACHE_FLUSH_AND_INV_EVENT = 0x000000ff,
CB_PERF_SEL_EVENT_FLUSH_AND_INV_CB_DATA_TS = 0x00000100,
CB_PERF_SEL_EVENT_FLUSH_AND_INV_CB_META  = 0x00000101,
CB_PERF_SEL_CC_SURFACE_SYNC              = 0x00000102,
CB_PERF_SEL_RESERVED_259                 = 0x00000103,
CB_PERF_SEL_RESERVED_260                 = 0x00000104,
CB_PERF_SEL_RESERVED_261                 = 0x00000105,
CB_PERF_SEL_RESERVED_262                 = 0x00000106,
CB_PERF_SEL_RESERVED_263                 = 0x00000107,
CB_PERF_SEL_RESERVED_264                 = 0x00000108,
CB_PERF_SEL_RESERVED_265                 = 0x00000109,
CB_PERF_SEL_RESERVED_266                 = 0x0000010a,
CB_PERF_SEL_RESERVED_267                 = 0x0000010b,
CB_PERF_SEL_RESERVED_268                 = 0x0000010c,
CB_PERF_SEL_RESERVED_269                 = 0x0000010d,
CB_PERF_SEL_RESERVED_270                 = 0x0000010e,
CB_PERF_SEL_RESERVED_271                 = 0x0000010f,
CB_PERF_SEL_RESERVED_272                 = 0x00000110,
CB_PERF_SEL_RESERVED_273                 = 0x00000111,
CB_PERF_SEL_RESERVED_274                 = 0x00000112,
CB_PERF_SEL_RESERVED_275                 = 0x00000113,
CB_PERF_SEL_RESERVED_276                 = 0x00000114,
CB_PERF_SEL_RESERVED_277                 = 0x00000115,
CB_PERF_SEL_RESERVED_278                 = 0x00000116,
CB_PERF_SEL_RESERVED_279                 = 0x00000117,
CB_PERF_SEL_RESERVED_280                 = 0x00000118,
CB_PERF_SEL_RESERVED_281                 = 0x00000119,
CB_PERF_SEL_RESERVED_282                 = 0x0000011a,
CB_PERF_SEL_RESERVED_283                 = 0x0000011b,
CB_PERF_SEL_RESERVED_284                 = 0x0000011c,
CB_PERF_SEL_RESERVED_285                 = 0x0000011d,
CB_PERF_SEL_RESERVED_286                 = 0x0000011e,
CB_PERF_SEL_RESERVED_287                 = 0x0000011f,
CB_PERF_SEL_RESERVED_288                 = 0x00000120,
CB_PERF_SEL_RESERVED_289                 = 0x00000121,
CB_PERF_SEL_RESERVED_290                 = 0x00000122,
CB_PERF_SEL_RESERVED_291                 = 0x00000123,
CB_PERF_SEL_RESERVED_292                 = 0x00000124,
CB_PERF_SEL_RESERVED_293                 = 0x00000125,
CB_PERF_SEL_RESERVED_294                 = 0x00000126,
CB_PERF_SEL_RESERVED_295                 = 0x00000127,
CB_PERF_SEL_RESERVED_296                 = 0x00000128,
CB_PERF_SEL_RESERVED_297                 = 0x00000129,
CB_PERF_SEL_RESERVED_298                 = 0x0000012a,
CB_PERF_SEL_RESERVED_299                 = 0x0000012b,
CB_PERF_SEL_NACK_CC_READ                 = 0x0000012c,
CB_PERF_SEL_NACK_CC_WRITE                = 0x0000012d,
CB_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT = 0x0000012e,
CB_PERF_SEL_RESERVED_303                 = 0x0000012f,
CB_PERF_SEL_RESERVED_304                 = 0x00000130,
CB_PERF_SEL_RESERVED_305                 = 0x00000131,
CB_PERF_SEL_RESERVED_306                 = 0x00000132,
CB_PERF_SEL_RESERVED_307                 = 0x00000133,
CB_PERF_SEL_RESERVED_308                 = 0x00000134,
CB_PERF_SEL_RESERVED_309                 = 0x00000135,
CB_PERF_SEL_RESERVED_310                 = 0x00000136,
CB_PERF_SEL_RESERVED_311                 = 0x00000137,
CB_PERF_SEL_RESERVED_312                 = 0x00000138,
CB_PERF_SEL_RESERVED_313                 = 0x00000139,
CB_PERF_SEL_RESERVED_314                 = 0x0000013a,
CB_PERF_SEL_RESERVED_315                 = 0x0000013b,
CB_PERF_SEL_RESERVED_316                 = 0x0000013c,
CB_PERF_SEL_RESERVED_317                 = 0x0000013d,
CB_PERF_SEL_RESERVED_318                 = 0x0000013e,
CB_PERF_SEL_RESERVED_319                 = 0x0000013f,
CB_PERF_SEL_RESERVED_320                 = 0x00000140,
CB_PERF_SEL_RESERVED_321                 = 0x00000141,
CB_PERF_SEL_RESERVED_322                 = 0x00000142,
CB_PERF_SEL_RESERVED_323                 = 0x00000143,
CB_PERF_SEL_RESERVED_324                 = 0x00000144,
CB_PERF_SEL_RESERVED_325                 = 0x00000145,
CB_PERF_SEL_RESERVED_326                 = 0x00000146,
CB_PERF_SEL_RESERVED_327                 = 0x00000147,
CB_PERF_SEL_RESERVED_328                 = 0x00000148,
CB_PERF_SEL_RESERVED_329                 = 0x00000149,
CB_PERF_SEL_RESERVED_330                 = 0x0000014a,
CB_PERF_SEL_RESERVED_331                 = 0x0000014b,
CB_PERF_SEL_RESERVED_332                 = 0x0000014c,
CB_PERF_SEL_RESERVED_333                 = 0x0000014d,
CB_PERF_SEL_RESERVED_334                 = 0x0000014e,
CB_PERF_SEL_RESERVED_335                 = 0x0000014f,
CB_PERF_SEL_RESERVED_336                 = 0x00000150,
CB_PERF_SEL_RESERVED_337                 = 0x00000151,
CB_PERF_SEL_RESERVED_338                 = 0x00000152,
CB_PERF_SEL_RESERVED_339                 = 0x00000153,
CB_PERF_SEL_RESERVED_340                 = 0x00000154,
CB_PERF_SEL_RESERVED_341                 = 0x00000155,
CB_PERF_SEL_RESERVED_342                 = 0x00000156,
CB_PERF_SEL_RESERVED_343                 = 0x00000157,
CB_PERF_SEL_RESERVED_344                 = 0x00000158,
CB_PERF_SEL_RESERVED_345                 = 0x00000159,
CB_PERF_SEL_RESERVED_346                 = 0x0000015a,
CB_PERF_SEL_RESERVED_347                 = 0x0000015b,
CB_PERF_SEL_RESERVED_348                 = 0x0000015c,
CB_PERF_SEL_RESERVED_349                 = 0x0000015d,
CB_PERF_SEL_RESERVED_350                 = 0x0000015e,
CB_PERF_SEL_RESERVED_351                 = 0x0000015f,
CB_PERF_SEL_RESERVED_352                 = 0x00000160,
CB_PERF_SEL_RESERVED_353                 = 0x00000161,
CB_PERF_SEL_RESERVED_354                 = 0x00000162,
CB_PERF_SEL_RESERVED_355                 = 0x00000163,
CB_PERF_SEL_RESERVED_356                 = 0x00000164,
CB_PERF_SEL_RESERVED_357                 = 0x00000165,
CB_PERF_SEL_RESERVED_358                 = 0x00000166,
CB_PERF_SEL_RESERVED_359                 = 0x00000167,
CB_PERF_SEL_RESERVED_360                 = 0x00000168,
CB_PERF_SEL_RESERVED_361                 = 0x00000169,
CB_PERF_SEL_RESERVED_362                 = 0x0000016a,
CB_PERF_SEL_RESERVED_363                 = 0x0000016b,
CB_PERF_SEL_RESERVED_364                 = 0x0000016c,
CB_PERF_SEL_RESERVED_365                 = 0x0000016d,
CB_PERF_SEL_RESERVED_366                 = 0x0000016e,
CB_PERF_SEL_RESERVED_367                 = 0x0000016f,
CB_PERF_SEL_RESERVED_368                 = 0x00000170,
CB_PERF_SEL_RESERVED_369                 = 0x00000171,
CB_PERF_SEL_RESERVED_370                 = 0x00000172,
CB_PERF_SEL_RESERVED_371                 = 0x00000173,
CB_PERF_SEL_RESERVED_372                 = 0x00000174,
CB_PERF_SEL_RESERVED_373                 = 0x00000175,
CB_PERF_SEL_RESERVED_374                 = 0x00000176,
CB_PERF_SEL_RESERVED_375                 = 0x00000177,
CB_PERF_SEL_RESERVED_376                 = 0x00000178,
CB_PERF_SEL_RESERVED_377                 = 0x00000179,
CB_PERF_SEL_RESERVED_378                 = 0x0000017a,
CB_PERF_SEL_RESERVED_379                 = 0x0000017b,
CB_PERF_SEL_RESERVED_380                 = 0x0000017c,
CB_PERF_SEL_RESERVED_381                 = 0x0000017d,
CB_PERF_SEL_RESERVED_382                 = 0x0000017e,
CB_PERF_SEL_RESERVED_383                 = 0x0000017f,
CB_PERF_SEL_RESERVED_384                 = 0x00000180,
CB_PERF_SEL_RESERVED_385                 = 0x00000181,
CB_PERF_SEL_RESERVED_386                 = 0x00000182,
CB_PERF_SEL_RESERVED_387                 = 0x00000183,
CB_PERF_SEL_RESERVED_388                 = 0x00000184,
CB_PERF_SEL_RESERVED_389                 = 0x00000185,
CB_PERF_SEL_RESERVED_390                 = 0x00000186,
CB_PERF_SEL_RESERVED_391                 = 0x00000187,
CB_PERF_SEL_RESERVED_392                 = 0x00000188,
CB_PERF_SEL_RESERVED_393                 = 0x00000189,
CB_PERF_SEL_RESERVED_394                 = 0x0000018a,
CB_PERF_SEL_RESERVED_395                 = 0x0000018b,
CB_PERF_SEL_RESERVED_396                 = 0x0000018c,
CB_PERF_SEL_RESERVED_397                 = 0x0000018d,
CB_PERF_SEL_RESERVED_398                 = 0x0000018e,
CB_PERF_SEL_RESERVED_399                 = 0x0000018f,
CB_PERF_SEL_RESERVED_400                 = 0x00000190,
CB_PERF_SEL_RESERVED_401                 = 0x00000191,
CB_PERF_SEL_RESERVED_402                 = 0x00000192,
CB_PERF_SEL_RESERVED_403                 = 0x00000193,
CB_PERF_SEL_RESERVED_404                 = 0x00000194,
CB_PERF_SEL_RESERVED_405                 = 0x00000195,
CB_PERF_SEL_RESERVED_406                 = 0x00000196,
CB_PERF_SEL_RESERVED_407                 = 0x00000197,
CB_PERF_SEL_RESERVED_408                 = 0x00000198,
CB_PERF_SEL_RESERVED_409                 = 0x00000199,
CB_PERF_SEL_RESERVED_410                 = 0x0000019a,
CB_PERF_SEL_RESERVED_411                 = 0x0000019b,
CB_PERF_SEL_RESERVED_412                 = 0x0000019c,
CB_PERF_SEL_RESERVED_413                 = 0x0000019d,
CB_PERF_SEL_RESERVED_414                 = 0x0000019e,
CB_PERF_SEL_RESERVED_415                 = 0x0000019f,
CB_PERF_SEL_RESERVED_416                 = 0x000001a0,
CB_PERF_SEL_RESERVED_417                 = 0x000001a1,
CB_PERF_SEL_RESERVED_418                 = 0x000001a2,
CB_PERF_SEL_RESERVED_419                 = 0x000001a3,
CB_PERF_SEL_RESERVED_420                 = 0x000001a4,
CB_PERF_SEL_RESERVED_421                 = 0x000001a5,
CB_PERF_SEL_RESERVED_422                 = 0x000001a6,
CB_PERF_SEL_RESERVED_423                 = 0x000001a7,
CB_PERF_SEL_RESERVED_424                 = 0x000001a8,
CB_PERF_SEL_RESERVED_425                 = 0x000001a9,
CB_PERF_SEL_RESERVED_426                 = 0x000001aa,
CB_PERF_SEL_RESERVED_427                 = 0x000001ab,
CB_PERF_SEL_RESERVED_428                 = 0x000001ac,
CB_PERF_SEL_RESERVED_429                 = 0x000001ad,
CB_PERF_SEL_RESERVED_430                 = 0x000001ae,
CB_PERF_SEL_RESERVED_431                 = 0x000001af,
CB_PERF_SEL_RESERVED_432                 = 0x000001b0,
CB_PERF_SEL_RESERVED_433                 = 0x000001b1,
CB_PERF_SEL_RESERVED_434                 = 0x000001b2,
CB_PERF_SEL_RESERVED_435                 = 0x000001b3,
CB_PERF_SEL_RESERVED_436                 = 0x000001b4,
CB_PERF_SEL_RESERVED_437                 = 0x000001b5,
CB_PERF_SEL_RESERVED_438                 = 0x000001b6,
CB_PERF_SEL_RESERVED_439                 = 0x000001b7,
CB_PERF_SEL_RESERVED_440                 = 0x000001b8,
CB_PERF_SEL_RESERVED_441                 = 0x000001b9,
CB_PERF_SEL_RESERVED_442                 = 0x000001ba,
CB_PERF_SEL_RESERVED_443                 = 0x000001bb,
CB_PERF_SEL_RESERVED_444                 = 0x000001bc,
CB_PERF_SEL_RESERVED_445                 = 0x000001bd,
CB_PERF_SEL_RESERVED_446                 = 0x000001be,
CB_PERF_SEL_RESERVED_447                 = 0x000001bf,
CB_PERF_SEL_RESERVED_448                 = 0x000001c0,
CB_PERF_SEL_RESERVED_449                 = 0x000001c1,
CB_PERF_SEL_RESERVED_450                 = 0x000001c2,
CB_PERF_SEL_RESERVED_451                 = 0x000001c3,
CB_PERF_SEL_RESERVED_452                 = 0x000001c4,
CB_PERF_SEL_RESERVED_453                 = 0x000001c5,
CB_PERF_SEL_RESERVED_454                 = 0x000001c6,
CB_PERF_SEL_RESERVED_455                 = 0x000001c7,
CB_PERF_SEL_RESERVED_456                 = 0x000001c8,
CB_PERF_SEL_RESERVED_457                 = 0x000001c9,
CB_PERF_SEL_RESERVED_458                 = 0x000001ca,
CB_PERF_SEL_RESERVED_459                 = 0x000001cb,
CB_PERF_SEL_RESERVED_460                 = 0x000001cc,
CB_PERF_SEL_RESERVED_461                 = 0x000001cd,
CB_PERF_SEL_RESERVED_462                 = 0x000001ce,
CB_PERF_SEL_RESERVED_463                 = 0x000001cf,
CB_PERF_SEL_RESERVED_464                 = 0x000001d0,
CB_PERF_SEL_RESERVED_465                 = 0x000001d1,
} CBPerfSel;

/*
 * CBRamList enum
 */

typedef enum CBRamList {
CB_DCG_CCC_CAS_TAG_ARRAY                 = 0x00000000,
CB_DCG_CCC_CAS_FRAG_PTR                  = 0x00000001,
CB_DCG_CCC_CAS_COLOR_PTR                 = 0x00000002,
CB_DCG_CCC_CAS_SURF_PARAM                = 0x00000003,
CB_DCG_CCC_CAS_KEYID                     = 0x00000004,
CB_DCG_BACKEND_RDLAT_FIFO                = 0x00000005,
CB_DCG_FRONTEND_RDLAT_FIFO               = 0x00000006,
CB_DCG_SRC_FIFO                          = 0x00000007,
CB_DCG_COLOR_STORE                       = 0x00000008,
CB_DCG_COLOR_STORE_DIRTY_BYTE            = 0x00000009,
CB_DCG_FMASK_CACHE_STORE                 = 0x0000000a,
CB_DCG_READ_SKID_FIFO                    = 0x0000000b,
CB_DCG_QUAD_PTR_FIFO                     = 0x0000000c,
CB_DCG_OUTPUT_FIFO                       = 0x0000000d,
CB_DCG_DCC_CACHE                         = 0x0000000e,
CB_DCG_DCC_DIRTY_BITS                    = 0x0000000f,
CB_DCG_QBLOCK_ALLOC                      = 0x00000010,
} CBRamList;

/*
 * CmaskCode enum
 */

typedef enum CmaskCode {
CMASK_CLR00_F0                           = 0x00000000,
CMASK_CLR00_F1                           = 0x00000001,
CMASK_CLR00_F2                           = 0x00000002,
CMASK_CLR00_FX                           = 0x00000003,
CMASK_CLR01_F0                           = 0x00000004,
CMASK_CLR01_F1                           = 0x00000005,
CMASK_CLR01_F2                           = 0x00000006,
CMASK_CLR01_FX                           = 0x00000007,
CMASK_CLR10_F0                           = 0x00000008,
CMASK_CLR10_F1                           = 0x00000009,
CMASK_CLR10_F2                           = 0x0000000a,
CMASK_CLR10_FX                           = 0x0000000b,
CMASK_CLR11_F0                           = 0x0000000c,
CMASK_CLR11_F1                           = 0x0000000d,
CMASK_CLR11_F2                           = 0x0000000e,
CMASK_CLR11_FX                           = 0x0000000f,
} CmaskCode;

/*
 * CombFunc enum
 */

typedef enum CombFunc {
COMB_DST_PLUS_SRC                        = 0x00000000,
COMB_SRC_MINUS_DST                       = 0x00000001,
COMB_MIN_DST_SRC                         = 0x00000002,
COMB_MAX_DST_SRC                         = 0x00000003,
COMB_DST_MINUS_SRC                       = 0x00000004,
} CombFunc;

/*
 * MemArbMode enum
 */

typedef enum MemArbMode {
MEM_ARB_MODE_FIXED                       = 0x00000000,
MEM_ARB_MODE_AGE                         = 0x00000001,
MEM_ARB_MODE_WEIGHT                      = 0x00000002,
MEM_ARB_MODE_BOTH                        = 0x00000003,
} MemArbMode;

/*
 * SourceFormat enum
 */

typedef enum SourceFormat {
EXPORT_4C_32BPC                          = 0x00000000,
EXPORT_4C_16BPC                          = 0x00000001,
EXPORT_2C_32BPC_GR                       = 0x00000002,
EXPORT_2C_32BPC_AR                       = 0x00000003,
} SourceFormat;

/*******************************************************
 * SC Enums
 *******************************************************/

/*
 * BinEventCntl enum
 */

typedef enum BinEventCntl {
BINNER_BREAK_BATCH                       = 0x00000000,
BINNER_PIPELINE                          = 0x00000001,
BINNER_DROP                              = 0x00000002,
BINNER_PIPELINE_BREAK                    = 0x00000003,
} BinEventCntl;

/*
 * BinMapMode enum
 */

typedef enum BinMapMode {
BIN_MAP_MODE_NONE                        = 0x00000000,
BIN_MAP_MODE_RTA_INDEX                   = 0x00000001,
BIN_MAP_MODE_POPS                        = 0x00000002,
} BinMapMode;

/*
 * BinSizeExtend enum
 */

typedef enum BinSizeExtend {
BIN_SIZE_32_PIXELS                       = 0x00000000,
BIN_SIZE_64_PIXELS                       = 0x00000001,
BIN_SIZE_128_PIXELS                      = 0x00000002,
BIN_SIZE_256_PIXELS                      = 0x00000003,
BIN_SIZE_512_PIXELS                      = 0x00000004,
} BinSizeExtend;

/*
 * BinningMode enum
 */

typedef enum BinningMode {
BINNING_ALLOWED                          = 0x00000000,
FORCE_BINNING_ON                         = 0x00000001,
DISABLE_BINNING_USE_NEW_SC               = 0x00000002,
DISABLE_BINNING_USE_LEGACY_SC            = 0x00000003,
} BinningMode;

/*
 * CovToShaderSel enum
 */

typedef enum CovToShaderSel {
INPUT_COVERAGE                           = 0x00000000,
INPUT_INNER_COVERAGE                     = 0x00000001,
INPUT_DEPTH_COVERAGE                     = 0x00000002,
RAW                                      = 0x00000003,
} CovToShaderSel;

/*
 * PkrMap enum
 */

typedef enum PkrMap {
RASTER_CONFIG_PKR_MAP_0                  = 0x00000000,
RASTER_CONFIG_PKR_MAP_1                  = 0x00000001,
RASTER_CONFIG_PKR_MAP_2                  = 0x00000002,
RASTER_CONFIG_PKR_MAP_3                  = 0x00000003,
} PkrMap;

/*
 * PkrXsel enum
 */

typedef enum PkrXsel {
RASTER_CONFIG_PKR_XSEL_0                 = 0x00000000,
RASTER_CONFIG_PKR_XSEL_1                 = 0x00000001,
RASTER_CONFIG_PKR_XSEL_2                 = 0x00000002,
RASTER_CONFIG_PKR_XSEL_3                 = 0x00000003,
} PkrXsel;

/*
 * PkrXsel2 enum
 */

typedef enum PkrXsel2 {
RASTER_CONFIG_PKR_XSEL2_0                = 0x00000000,
RASTER_CONFIG_PKR_XSEL2_1                = 0x00000001,
RASTER_CONFIG_PKR_XSEL2_2                = 0x00000002,
RASTER_CONFIG_PKR_XSEL2_3                = 0x00000003,
} PkrXsel2;

/*
 * PkrYsel enum
 */

typedef enum PkrYsel {
RASTER_CONFIG_PKR_YSEL_0                 = 0x00000000,
RASTER_CONFIG_PKR_YSEL_1                 = 0x00000001,
RASTER_CONFIG_PKR_YSEL_2                 = 0x00000002,
RASTER_CONFIG_PKR_YSEL_3                 = 0x00000003,
} PkrYsel;

/*
 * RbMap enum
 */

typedef enum RbMap {
RASTER_CONFIG_RB_MAP_0                   = 0x00000000,
RASTER_CONFIG_RB_MAP_1                   = 0x00000001,
RASTER_CONFIG_RB_MAP_2                   = 0x00000002,
RASTER_CONFIG_RB_MAP_3                   = 0x00000003,
} RbMap;

/*
 * RbXsel enum
 */

typedef enum RbXsel {
RASTER_CONFIG_RB_XSEL_0                  = 0x00000000,
RASTER_CONFIG_RB_XSEL_1                  = 0x00000001,
} RbXsel;

/*
 * RbXsel2 enum
 */

typedef enum RbXsel2 {
RASTER_CONFIG_RB_XSEL2_0                 = 0x00000000,
RASTER_CONFIG_RB_XSEL2_1                 = 0x00000001,
RASTER_CONFIG_RB_XSEL2_2                 = 0x00000002,
RASTER_CONFIG_RB_XSEL2_3                 = 0x00000003,
} RbXsel2;

/*
 * RbYsel enum
 */

typedef enum RbYsel {
RASTER_CONFIG_RB_YSEL_0                  = 0x00000000,
RASTER_CONFIG_RB_YSEL_1                  = 0x00000001,
} RbYsel;

/*
 * SC_PERFCNT_SEL enum
 */

typedef enum SC_PERFCNT_SEL {
SC_SRPS_WINDOW_VALID                     = 0x00000000,
SC_PSSW_WINDOW_VALID                     = 0x00000001,
SC_TPQZ_WINDOW_VALID                     = 0x00000002,
SC_QZQP_WINDOW_VALID                     = 0x00000003,
SC_TRPK_WINDOW_VALID                     = 0x00000004,
SC_SRPS_WINDOW_VALID_BUSY                = 0x00000005,
SC_PSSW_WINDOW_VALID_BUSY                = 0x00000006,
SC_TPQZ_WINDOW_VALID_BUSY                = 0x00000007,
SC_QZQP_WINDOW_VALID_BUSY                = 0x00000008,
SC_TRPK_WINDOW_VALID_BUSY                = 0x00000009,
SC_STARVED_BY_PA                         = 0x0000000a,
SC_STALLED_BY_PRIMFIFO                   = 0x0000000b,
SC_STALLED_BY_DB_TILE                    = 0x0000000c,
SC_STARVED_BY_DB_TILE                    = 0x0000000d,
SC_STALLED_BY_TILEORDERFIFO              = 0x0000000e,
SC_STALLED_BY_TILEFIFO                   = 0x0000000f,
SC_STALLED_BY_DB_QUAD                    = 0x00000010,
SC_STARVED_BY_DB_QUAD                    = 0x00000011,
SC_STALLED_BY_QUADFIFO                   = 0x00000012,
SC_STALLED_BY_BCI                        = 0x00000013,
SC_STALLED_BY_SPI                        = 0x00000014,
SC_SCISSOR_DISCARD                       = 0x00000015,
SC_BB_DISCARD                            = 0x00000016,
SC_SUPERTILE_COUNT                       = 0x00000017,
SC_SUPERTILE_PER_PRIM_H0                 = 0x00000018,
SC_SUPERTILE_PER_PRIM_H1                 = 0x00000019,
SC_SUPERTILE_PER_PRIM_H2                 = 0x0000001a,
SC_SUPERTILE_PER_PRIM_H3                 = 0x0000001b,
SC_SUPERTILE_PER_PRIM_H4                 = 0x0000001c,
SC_SUPERTILE_PER_PRIM_H5                 = 0x0000001d,
SC_SUPERTILE_PER_PRIM_H6                 = 0x0000001e,
SC_SUPERTILE_PER_PRIM_H7                 = 0x0000001f,
SC_SUPERTILE_PER_PRIM_H8                 = 0x00000020,
SC_SUPERTILE_PER_PRIM_H9                 = 0x00000021,
SC_SUPERTILE_PER_PRIM_H10                = 0x00000022,
SC_SUPERTILE_PER_PRIM_H11                = 0x00000023,
SC_SUPERTILE_PER_PRIM_H12                = 0x00000024,
SC_SUPERTILE_PER_PRIM_H13                = 0x00000025,
SC_SUPERTILE_PER_PRIM_H14                = 0x00000026,
SC_SUPERTILE_PER_PRIM_H15                = 0x00000027,
SC_SUPERTILE_PER_PRIM_H16                = 0x00000028,
SC_TILE_PER_PRIM_H0                      = 0x00000029,
SC_TILE_PER_PRIM_H1                      = 0x0000002a,
SC_TILE_PER_PRIM_H2                      = 0x0000002b,
SC_TILE_PER_PRIM_H3                      = 0x0000002c,
SC_TILE_PER_PRIM_H4                      = 0x0000002d,
SC_TILE_PER_PRIM_H5                      = 0x0000002e,
SC_TILE_PER_PRIM_H6                      = 0x0000002f,
SC_TILE_PER_PRIM_H7                      = 0x00000030,
SC_TILE_PER_PRIM_H8                      = 0x00000031,
SC_TILE_PER_PRIM_H9                      = 0x00000032,
SC_TILE_PER_PRIM_H10                     = 0x00000033,
SC_TILE_PER_PRIM_H11                     = 0x00000034,
SC_TILE_PER_PRIM_H12                     = 0x00000035,
SC_TILE_PER_PRIM_H13                     = 0x00000036,
SC_TILE_PER_PRIM_H14                     = 0x00000037,
SC_TILE_PER_PRIM_H15                     = 0x00000038,
SC_TILE_PER_PRIM_H16                     = 0x00000039,
SC_TILE_PER_SUPERTILE_H0                 = 0x0000003a,
SC_TILE_PER_SUPERTILE_H1                 = 0x0000003b,
SC_TILE_PER_SUPERTILE_H2                 = 0x0000003c,
SC_TILE_PER_SUPERTILE_H3                 = 0x0000003d,
SC_TILE_PER_SUPERTILE_H4                 = 0x0000003e,
SC_TILE_PER_SUPERTILE_H5                 = 0x0000003f,
SC_TILE_PER_SUPERTILE_H6                 = 0x00000040,
SC_TILE_PER_SUPERTILE_H7                 = 0x00000041,
SC_TILE_PER_SUPERTILE_H8                 = 0x00000042,
SC_TILE_PER_SUPERTILE_H9                 = 0x00000043,
SC_TILE_PER_SUPERTILE_H10                = 0x00000044,
SC_TILE_PER_SUPERTILE_H11                = 0x00000045,
SC_TILE_PER_SUPERTILE_H12                = 0x00000046,
SC_TILE_PER_SUPERTILE_H13                = 0x00000047,
SC_TILE_PER_SUPERTILE_H14                = 0x00000048,
SC_TILE_PER_SUPERTILE_H15                = 0x00000049,
SC_TILE_PER_SUPERTILE_H16                = 0x0000004a,
SC_TILE_PICKED_H1                        = 0x0000004b,
SC_TILE_PICKED_H2                        = 0x0000004c,
SC_TILE_PICKED_H3                        = 0x0000004d,
SC_TILE_PICKED_H4                        = 0x0000004e,
SC_QZ0_TILE_COUNT                        = 0x0000004f,
SC_QZ1_TILE_COUNT                        = 0x00000050,
SC_QZ2_TILE_COUNT                        = 0x00000051,
SC_QZ3_TILE_COUNT                        = 0x00000052,
SC_QZ0_TILE_COVERED_COUNT                = 0x00000053,
SC_QZ1_TILE_COVERED_COUNT                = 0x00000054,
SC_QZ2_TILE_COVERED_COUNT                = 0x00000055,
SC_QZ3_TILE_COVERED_COUNT                = 0x00000056,
SC_QZ0_TILE_NOT_COVERED_COUNT            = 0x00000057,
SC_QZ1_TILE_NOT_COVERED_COUNT            = 0x00000058,
SC_QZ2_TILE_NOT_COVERED_COUNT            = 0x00000059,
SC_QZ3_TILE_NOT_COVERED_COUNT            = 0x0000005a,
SC_QZ0_QUAD_PER_TILE_H0                  = 0x0000005b,
SC_QZ0_QUAD_PER_TILE_H1                  = 0x0000005c,
SC_QZ0_QUAD_PER_TILE_H2                  = 0x0000005d,
SC_QZ0_QUAD_PER_TILE_H3                  = 0x0000005e,
SC_QZ0_QUAD_PER_TILE_H4                  = 0x0000005f,
SC_QZ0_QUAD_PER_TILE_H5                  = 0x00000060,
SC_QZ0_QUAD_PER_TILE_H6                  = 0x00000061,
SC_QZ0_QUAD_PER_TILE_H7                  = 0x00000062,
SC_QZ0_QUAD_PER_TILE_H8                  = 0x00000063,
SC_QZ0_QUAD_PER_TILE_H9                  = 0x00000064,
SC_QZ0_QUAD_PER_TILE_H10                 = 0x00000065,
SC_QZ0_QUAD_PER_TILE_H11                 = 0x00000066,
SC_QZ0_QUAD_PER_TILE_H12                 = 0x00000067,
SC_QZ0_QUAD_PER_TILE_H13                 = 0x00000068,
SC_QZ0_QUAD_PER_TILE_H14                 = 0x00000069,
SC_QZ0_QUAD_PER_TILE_H15                 = 0x0000006a,
SC_QZ0_QUAD_PER_TILE_H16                 = 0x0000006b,
SC_QZ1_QUAD_PER_TILE_H0                  = 0x0000006c,
SC_QZ1_QUAD_PER_TILE_H1                  = 0x0000006d,
SC_QZ1_QUAD_PER_TILE_H2                  = 0x0000006e,
SC_QZ1_QUAD_PER_TILE_H3                  = 0x0000006f,
SC_QZ1_QUAD_PER_TILE_H4                  = 0x00000070,
SC_QZ1_QUAD_PER_TILE_H5                  = 0x00000071,
SC_QZ1_QUAD_PER_TILE_H6                  = 0x00000072,
SC_QZ1_QUAD_PER_TILE_H7                  = 0x00000073,
SC_QZ1_QUAD_PER_TILE_H8                  = 0x00000074,
SC_QZ1_QUAD_PER_TILE_H9                  = 0x00000075,
SC_QZ1_QUAD_PER_TILE_H10                 = 0x00000076,
SC_QZ1_QUAD_PER_TILE_H11                 = 0x00000077,
SC_QZ1_QUAD_PER_TILE_H12                 = 0x00000078,
SC_QZ1_QUAD_PER_TILE_H13                 = 0x00000079,
SC_QZ1_QUAD_PER_TILE_H14                 = 0x0000007a,
SC_QZ1_QUAD_PER_TILE_H15                 = 0x0000007b,
SC_QZ1_QUAD_PER_TILE_H16                 = 0x0000007c,
SC_QZ2_QUAD_PER_TILE_H0                  = 0x0000007d,
SC_QZ2_QUAD_PER_TILE_H1                  = 0x0000007e,
SC_QZ2_QUAD_PER_TILE_H2                  = 0x0000007f,
SC_QZ2_QUAD_PER_TILE_H3                  = 0x00000080,
SC_QZ2_QUAD_PER_TILE_H4                  = 0x00000081,
SC_QZ2_QUAD_PER_TILE_H5                  = 0x00000082,
SC_QZ2_QUAD_PER_TILE_H6                  = 0x00000083,
SC_QZ2_QUAD_PER_TILE_H7                  = 0x00000084,
SC_QZ2_QUAD_PER_TILE_H8                  = 0x00000085,
SC_QZ2_QUAD_PER_TILE_H9                  = 0x00000086,
SC_QZ2_QUAD_PER_TILE_H10                 = 0x00000087,
SC_QZ2_QUAD_PER_TILE_H11                 = 0x00000088,
SC_QZ2_QUAD_PER_TILE_H12                 = 0x00000089,
SC_QZ2_QUAD_PER_TILE_H13                 = 0x0000008a,
SC_QZ2_QUAD_PER_TILE_H14                 = 0x0000008b,
SC_QZ2_QUAD_PER_TILE_H15                 = 0x0000008c,
SC_QZ2_QUAD_PER_TILE_H16                 = 0x0000008d,
SC_QZ3_QUAD_PER_TILE_H0                  = 0x0000008e,
SC_QZ3_QUAD_PER_TILE_H1                  = 0x0000008f,
SC_QZ3_QUAD_PER_TILE_H2                  = 0x00000090,
SC_QZ3_QUAD_PER_TILE_H3                  = 0x00000091,
SC_QZ3_QUAD_PER_TILE_H4                  = 0x00000092,
SC_QZ3_QUAD_PER_TILE_H5                  = 0x00000093,
SC_QZ3_QUAD_PER_TILE_H6                  = 0x00000094,
SC_QZ3_QUAD_PER_TILE_H7                  = 0x00000095,
SC_QZ3_QUAD_PER_TILE_H8                  = 0x00000096,
SC_QZ3_QUAD_PER_TILE_H9                  = 0x00000097,
SC_QZ3_QUAD_PER_TILE_H10                 = 0x00000098,
SC_QZ3_QUAD_PER_TILE_H11                 = 0x00000099,
SC_QZ3_QUAD_PER_TILE_H12                 = 0x0000009a,
SC_QZ3_QUAD_PER_TILE_H13                 = 0x0000009b,
SC_QZ3_QUAD_PER_TILE_H14                 = 0x0000009c,
SC_QZ3_QUAD_PER_TILE_H15                 = 0x0000009d,
SC_QZ3_QUAD_PER_TILE_H16                 = 0x0000009e,
SC_QZ0_QUAD_COUNT                        = 0x0000009f,
SC_QZ1_QUAD_COUNT                        = 0x000000a0,
SC_QZ2_QUAD_COUNT                        = 0x000000a1,
SC_QZ3_QUAD_COUNT                        = 0x000000a2,
SC_P0_HIZ_TILE_COUNT                     = 0x000000a3,
SC_P1_HIZ_TILE_COUNT                     = 0x000000a4,
SC_P2_HIZ_TILE_COUNT                     = 0x000000a5,
SC_P3_HIZ_TILE_COUNT                     = 0x000000a6,
SC_P0_HIZ_QUAD_PER_TILE_H0               = 0x000000a7,
SC_P0_HIZ_QUAD_PER_TILE_H1               = 0x000000a8,
SC_P0_HIZ_QUAD_PER_TILE_H2               = 0x000000a9,
SC_P0_HIZ_QUAD_PER_TILE_H3               = 0x000000aa,
SC_P0_HIZ_QUAD_PER_TILE_H4               = 0x000000ab,
SC_P0_HIZ_QUAD_PER_TILE_H5               = 0x000000ac,
SC_P0_HIZ_QUAD_PER_TILE_H6               = 0x000000ad,
SC_P0_HIZ_QUAD_PER_TILE_H7               = 0x000000ae,
SC_P0_HIZ_QUAD_PER_TILE_H8               = 0x000000af,
SC_P0_HIZ_QUAD_PER_TILE_H9               = 0x000000b0,
SC_P0_HIZ_QUAD_PER_TILE_H10              = 0x000000b1,
SC_P0_HIZ_QUAD_PER_TILE_H11              = 0x000000b2,
SC_P0_HIZ_QUAD_PER_TILE_H12              = 0x000000b3,
SC_P0_HIZ_QUAD_PER_TILE_H13              = 0x000000b4,
SC_P0_HIZ_QUAD_PER_TILE_H14              = 0x000000b5,
SC_P0_HIZ_QUAD_PER_TILE_H15              = 0x000000b6,
SC_P0_HIZ_QUAD_PER_TILE_H16              = 0x000000b7,
SC_P1_HIZ_QUAD_PER_TILE_H0               = 0x000000b8,
SC_P1_HIZ_QUAD_PER_TILE_H1               = 0x000000b9,
SC_P1_HIZ_QUAD_PER_TILE_H2               = 0x000000ba,
SC_P1_HIZ_QUAD_PER_TILE_H3               = 0x000000bb,
SC_P1_HIZ_QUAD_PER_TILE_H4               = 0x000000bc,
SC_P1_HIZ_QUAD_PER_TILE_H5               = 0x000000bd,
SC_P1_HIZ_QUAD_PER_TILE_H6               = 0x000000be,
SC_P1_HIZ_QUAD_PER_TILE_H7               = 0x000000bf,
SC_P1_HIZ_QUAD_PER_TILE_H8               = 0x000000c0,
SC_P1_HIZ_QUAD_PER_TILE_H9               = 0x000000c1,
SC_P1_HIZ_QUAD_PER_TILE_H10              = 0x000000c2,
SC_P1_HIZ_QUAD_PER_TILE_H11              = 0x000000c3,
SC_P1_HIZ_QUAD_PER_TILE_H12              = 0x000000c4,
SC_P1_HIZ_QUAD_PER_TILE_H13              = 0x000000c5,
SC_P1_HIZ_QUAD_PER_TILE_H14              = 0x000000c6,
SC_P1_HIZ_QUAD_PER_TILE_H15              = 0x000000c7,
SC_P1_HIZ_QUAD_PER_TILE_H16              = 0x000000c8,
SC_P2_HIZ_QUAD_PER_TILE_H0               = 0x000000c9,
SC_P2_HIZ_QUAD_PER_TILE_H1               = 0x000000ca,
SC_P2_HIZ_QUAD_PER_TILE_H2               = 0x000000cb,
SC_P2_HIZ_QUAD_PER_TILE_H3               = 0x000000cc,
SC_P2_HIZ_QUAD_PER_TILE_H4               = 0x000000cd,
SC_P2_HIZ_QUAD_PER_TILE_H5               = 0x000000ce,
SC_P2_HIZ_QUAD_PER_TILE_H6               = 0x000000cf,
SC_P2_HIZ_QUAD_PER_TILE_H7               = 0x000000d0,
SC_P2_HIZ_QUAD_PER_TILE_H8               = 0x000000d1,
SC_P2_HIZ_QUAD_PER_TILE_H9               = 0x000000d2,
SC_P2_HIZ_QUAD_PER_TILE_H10              = 0x000000d3,
SC_P2_HIZ_QUAD_PER_TILE_H11              = 0x000000d4,
SC_P2_HIZ_QUAD_PER_TILE_H12              = 0x000000d5,
SC_P2_HIZ_QUAD_PER_TILE_H13              = 0x000000d6,
SC_P2_HIZ_QUAD_PER_TILE_H14              = 0x000000d7,
SC_P2_HIZ_QUAD_PER_TILE_H15              = 0x000000d8,
SC_P2_HIZ_QUAD_PER_TILE_H16              = 0x000000d9,
SC_P3_HIZ_QUAD_PER_TILE_H0               = 0x000000da,
SC_P3_HIZ_QUAD_PER_TILE_H1               = 0x000000db,
SC_P3_HIZ_QUAD_PER_TILE_H2               = 0x000000dc,
SC_P3_HIZ_QUAD_PER_TILE_H3               = 0x000000dd,
SC_P3_HIZ_QUAD_PER_TILE_H4               = 0x000000de,
SC_P3_HIZ_QUAD_PER_TILE_H5               = 0x000000df,
SC_P3_HIZ_QUAD_PER_TILE_H6               = 0x000000e0,
SC_P3_HIZ_QUAD_PER_TILE_H7               = 0x000000e1,
SC_P3_HIZ_QUAD_PER_TILE_H8               = 0x000000e2,
SC_P3_HIZ_QUAD_PER_TILE_H9               = 0x000000e3,
SC_P3_HIZ_QUAD_PER_TILE_H10              = 0x000000e4,
SC_P3_HIZ_QUAD_PER_TILE_H11              = 0x000000e5,
SC_P3_HIZ_QUAD_PER_TILE_H12              = 0x000000e6,
SC_P3_HIZ_QUAD_PER_TILE_H13              = 0x000000e7,
SC_P3_HIZ_QUAD_PER_TILE_H14              = 0x000000e8,
SC_P3_HIZ_QUAD_PER_TILE_H15              = 0x000000e9,
SC_P3_HIZ_QUAD_PER_TILE_H16              = 0x000000ea,
SC_P0_HIZ_QUAD_COUNT                     = 0x000000eb,
SC_P1_HIZ_QUAD_COUNT                     = 0x000000ec,
SC_P2_HIZ_QUAD_COUNT                     = 0x000000ed,
SC_P3_HIZ_QUAD_COUNT                     = 0x000000ee,
SC_P0_DETAIL_QUAD_COUNT                  = 0x000000ef,
SC_P1_DETAIL_QUAD_COUNT                  = 0x000000f0,
SC_P2_DETAIL_QUAD_COUNT                  = 0x000000f1,
SC_P3_DETAIL_QUAD_COUNT                  = 0x000000f2,
SC_P0_DETAIL_QUAD_WITH_1_PIX             = 0x000000f3,
SC_P0_DETAIL_QUAD_WITH_2_PIX             = 0x000000f4,
SC_P0_DETAIL_QUAD_WITH_3_PIX             = 0x000000f5,
SC_P0_DETAIL_QUAD_WITH_4_PIX             = 0x000000f6,
SC_P1_DETAIL_QUAD_WITH_1_PIX             = 0x000000f7,
SC_P1_DETAIL_QUAD_WITH_2_PIX             = 0x000000f8,
SC_P1_DETAIL_QUAD_WITH_3_PIX             = 0x000000f9,
SC_P1_DETAIL_QUAD_WITH_4_PIX             = 0x000000fa,
SC_P2_DETAIL_QUAD_WITH_1_PIX             = 0x000000fb,
SC_P2_DETAIL_QUAD_WITH_2_PIX             = 0x000000fc,
SC_P2_DETAIL_QUAD_WITH_3_PIX             = 0x000000fd,
SC_P2_DETAIL_QUAD_WITH_4_PIX             = 0x000000fe,
SC_P3_DETAIL_QUAD_WITH_1_PIX             = 0x000000ff,
SC_P3_DETAIL_QUAD_WITH_2_PIX             = 0x00000100,
SC_P3_DETAIL_QUAD_WITH_3_PIX             = 0x00000101,
SC_P3_DETAIL_QUAD_WITH_4_PIX             = 0x00000102,
SC_EARLYZ_QUAD_COUNT                     = 0x00000103,
SC_EARLYZ_QUAD_WITH_1_PIX                = 0x00000104,
SC_EARLYZ_QUAD_WITH_2_PIX                = 0x00000105,
SC_EARLYZ_QUAD_WITH_3_PIX                = 0x00000106,
SC_EARLYZ_QUAD_WITH_4_PIX                = 0x00000107,
SC_PKR_QUAD_PER_ROW_H1                   = 0x00000108,
SC_PKR_QUAD_PER_ROW_H2                   = 0x00000109,
SC_PKR_4X2_QUAD_SPLIT                    = 0x0000010a,
SC_PKR_4X2_FILL_QUAD                     = 0x0000010b,
SC_PKR_END_OF_VECTOR                     = 0x0000010c,
SC_PKR_CONTROL_XFER                      = 0x0000010d,
SC_PKR_DBHANG_FORCE_EOV                  = 0x0000010e,
SC_REG_SCLK_BUSY                         = 0x0000010f,
SC_GRP0_DYN_SCLK_BUSY                    = 0x00000110,
SC_GRP1_DYN_SCLK_BUSY                    = 0x00000111,
SC_GRP2_DYN_SCLK_BUSY                    = 0x00000112,
SC_GRP3_DYN_SCLK_BUSY                    = 0x00000113,
SC_GRP4_DYN_SCLK_BUSY                    = 0x00000114,
SC_PA0_SC_DATA_FIFO_RD                   = 0x00000115,
SC_PA0_SC_DATA_FIFO_WE                   = 0x00000116,
SC_PA1_SC_DATA_FIFO_RD                   = 0x00000117,
SC_PA1_SC_DATA_FIFO_WE                   = 0x00000118,
SC_PS_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES   = 0x00000119,
SC_PS_ARB_XFC_ONLY_PRIM_CYCLES           = 0x0000011a,
SC_PS_ARB_XFC_ONLY_ONE_INC_PER_PRIM      = 0x0000011b,
SC_PS_ARB_STALLED_FROM_BELOW             = 0x0000011c,
SC_PS_ARB_STARVED_FROM_ABOVE             = 0x0000011d,
SC_PS_ARB_SC_BUSY                        = 0x0000011e,
SC_PS_ARB_PA_SC_BUSY                     = 0x0000011f,
SC_PA2_SC_DATA_FIFO_RD                   = 0x00000120,
SC_PA2_SC_DATA_FIFO_WE                   = 0x00000121,
SC_PA3_SC_DATA_FIFO_RD                   = 0x00000122,
SC_PA3_SC_DATA_FIFO_WE                   = 0x00000123,
SC_PA_SC_DEALLOC_0_0_WE                  = 0x00000124,
SC_PA_SC_DEALLOC_0_1_WE                  = 0x00000125,
SC_PA_SC_DEALLOC_1_0_WE                  = 0x00000126,
SC_PA_SC_DEALLOC_1_1_WE                  = 0x00000127,
SC_PA_SC_DEALLOC_2_0_WE                  = 0x00000128,
SC_PA_SC_DEALLOC_2_1_WE                  = 0x00000129,
SC_PA_SC_DEALLOC_3_0_WE                  = 0x0000012a,
SC_PA_SC_DEALLOC_3_1_WE                  = 0x0000012b,
SC_PA0_SC_EOP_WE                         = 0x0000012c,
SC_PA0_SC_EOPG_WE                        = 0x0000012d,
SC_PA0_SC_EVENT_WE                       = 0x0000012e,
SC_PA1_SC_EOP_WE                         = 0x0000012f,
SC_PA1_SC_EOPG_WE                        = 0x00000130,
SC_PA1_SC_EVENT_WE                       = 0x00000131,
SC_PA2_SC_EOP_WE                         = 0x00000132,
SC_PA2_SC_EOPG_WE                        = 0x00000133,
SC_PA2_SC_EVENT_WE                       = 0x00000134,
SC_PA3_SC_EOP_WE                         = 0x00000135,
SC_PA3_SC_EOPG_WE                        = 0x00000136,
SC_PA3_SC_EVENT_WE                       = 0x00000137,
SC_PS_ARB_OOO_THRESHOLD_SWITCH_TO_DESIRED_FIFO = 0x00000138,
SC_PS_ARB_OOO_FIFO_EMPTY_SWITCH          = 0x00000139,
SC_PS_ARB_NULL_PRIM_BUBBLE_POP           = 0x0000013a,
SC_PS_ARB_EOP_POP_SYNC_POP               = 0x0000013b,
SC_PS_ARB_EVENT_SYNC_POP                 = 0x0000013c,
SC_PS_ENG_MULTICYCLE_BUBBLE              = 0x0000013d,
SC_PA0_SC_FPOV_WE                        = 0x0000013e,
SC_PA1_SC_FPOV_WE                        = 0x0000013f,
SC_PA2_SC_FPOV_WE                        = 0x00000140,
SC_PA3_SC_FPOV_WE                        = 0x00000141,
SC_PA0_SC_LPOV_WE                        = 0x00000142,
SC_PA1_SC_LPOV_WE                        = 0x00000143,
SC_PA2_SC_LPOV_WE                        = 0x00000144,
SC_PA3_SC_LPOV_WE                        = 0x00000145,
SC_SPI_DEALLOC_0_0                       = 0x00000146,
SC_SPI_DEALLOC_0_1                       = 0x00000147,
SC_SPI_DEALLOC_0_2                       = 0x00000148,
SC_SPI_DEALLOC_1_0                       = 0x00000149,
SC_SPI_DEALLOC_1_1                       = 0x0000014a,
SC_SPI_DEALLOC_1_2                       = 0x0000014b,
SC_SPI_DEALLOC_2_0                       = 0x0000014c,
SC_SPI_DEALLOC_2_1                       = 0x0000014d,
SC_SPI_DEALLOC_2_2                       = 0x0000014e,
SC_SPI_DEALLOC_3_0                       = 0x0000014f,
SC_SPI_DEALLOC_3_1                       = 0x00000150,
SC_SPI_DEALLOC_3_2                       = 0x00000151,
SC_SPI_FPOV_0                            = 0x00000152,
SC_SPI_FPOV_1                            = 0x00000153,
SC_SPI_FPOV_2                            = 0x00000154,
SC_SPI_FPOV_3                            = 0x00000155,
SC_SPI_EVENT                             = 0x00000156,
SC_PS_TS_EVENT_FIFO_PUSH                 = 0x00000157,
SC_PS_TS_EVENT_FIFO_POP                  = 0x00000158,
SC_PS_CTX_DONE_FIFO_PUSH                 = 0x00000159,
SC_PS_CTX_DONE_FIFO_POP                  = 0x0000015a,
SC_MULTICYCLE_BUBBLE_FREEZE              = 0x0000015b,
SC_EOP_SYNC_WINDOW                       = 0x0000015c,
SC_PA0_SC_NULL_WE                        = 0x0000015d,
SC_PA0_SC_NULL_DEALLOC_WE                = 0x0000015e,
SC_PA0_SC_DATA_FIFO_EOPG_RD              = 0x0000015f,
SC_PA0_SC_DATA_FIFO_EOP_RD               = 0x00000160,
SC_PA0_SC_DEALLOC_0_RD                   = 0x00000161,
SC_PA0_SC_DEALLOC_1_RD                   = 0x00000162,
SC_PA1_SC_DATA_FIFO_EOPG_RD              = 0x00000163,
SC_PA1_SC_DATA_FIFO_EOP_RD               = 0x00000164,
SC_PA1_SC_DEALLOC_0_RD                   = 0x00000165,
SC_PA1_SC_DEALLOC_1_RD                   = 0x00000166,
SC_PA1_SC_NULL_WE                        = 0x00000167,
SC_PA1_SC_NULL_DEALLOC_WE                = 0x00000168,
SC_PA2_SC_DATA_FIFO_EOPG_RD              = 0x00000169,
SC_PA2_SC_DATA_FIFO_EOP_RD               = 0x0000016a,
SC_PA2_SC_DEALLOC_0_RD                   = 0x0000016b,
SC_PA2_SC_DEALLOC_1_RD                   = 0x0000016c,
SC_PA2_SC_NULL_WE                        = 0x0000016d,
SC_PA2_SC_NULL_DEALLOC_WE                = 0x0000016e,
SC_PA3_SC_DATA_FIFO_EOPG_RD              = 0x0000016f,
SC_PA3_SC_DATA_FIFO_EOP_RD               = 0x00000170,
SC_PA3_SC_DEALLOC_0_RD                   = 0x00000171,
SC_PA3_SC_DEALLOC_1_RD                   = 0x00000172,
SC_PA3_SC_NULL_WE                        = 0x00000173,
SC_PA3_SC_NULL_DEALLOC_WE                = 0x00000174,
SC_PS_PA0_SC_FIFO_EMPTY                  = 0x00000175,
SC_PS_PA0_SC_FIFO_FULL                   = 0x00000176,
SC_RESERVED_0                            = 0x00000177,
SC_PS_PA1_SC_FIFO_EMPTY                  = 0x00000178,
SC_PS_PA1_SC_FIFO_FULL                   = 0x00000179,
SC_RESERVED_1                            = 0x0000017a,
SC_PS_PA2_SC_FIFO_EMPTY                  = 0x0000017b,
SC_PS_PA2_SC_FIFO_FULL                   = 0x0000017c,
SC_RESERVED_2                            = 0x0000017d,
SC_PS_PA3_SC_FIFO_EMPTY                  = 0x0000017e,
SC_PS_PA3_SC_FIFO_FULL                   = 0x0000017f,
SC_RESERVED_3                            = 0x00000180,
SC_BUSY_PROCESSING_MULTICYCLE_PRIM       = 0x00000181,
SC_BUSY_CNT_NOT_ZERO                     = 0x00000182,
SC_BM_BUSY                               = 0x00000183,
SC_BACKEND_BUSY                          = 0x00000184,
SC_SCF_SCB_INTERFACE_BUSY                = 0x00000185,
SC_SCB_BUSY                              = 0x00000186,
SC_STARVED_BY_PA_WITH_UNSELECTED_PA_NOT_EMPTY = 0x00000187,
SC_STARVED_BY_PA_WITH_UNSELECTED_PA_FULL = 0x00000188,
SC_PBB_BIN_HIST_NUM_PRIMS                = 0x00000189,
SC_PBB_BATCH_HIST_NUM_PRIMS              = 0x0000018a,
SC_PBB_BIN_HIST_NUM_CONTEXTS             = 0x0000018b,
SC_PBB_BATCH_HIST_NUM_CONTEXTS           = 0x0000018c,
SC_PBB_BIN_HIST_NUM_PERSISTENT_STATES    = 0x0000018d,
SC_PBB_BATCH_HIST_NUM_PERSISTENT_STATES  = 0x0000018e,
SC_PBB_BATCH_HIST_NUM_PS_WAVE_BREAKS     = 0x0000018f,
SC_PBB_BATCH_HIST_NUM_TRIV_REJECTED_PRIMS = 0x00000190,
SC_PBB_BATCH_HIST_NUM_ROWS_PER_PRIM      = 0x00000191,
SC_PBB_BATCH_HIST_NUM_COLUMNS_PER_ROW    = 0x00000192,
SC_PBB_BUSY                              = 0x00000193,
SC_PBB_BUSY_AND_NO_SENDS                 = 0x00000194,
SC_PBB_STALLS_PA_DUE_TO_NO_TILES         = 0x00000195,
SC_PBB_NUM_BINS                          = 0x00000196,
SC_PBB_END_OF_BIN                        = 0x00000197,
SC_PBB_END_OF_BATCH                      = 0x00000198,
SC_PBB_PRIMBIN_PROCESSED                 = 0x00000199,
SC_PBB_PRIM_ADDED_TO_BATCH               = 0x0000019a,
SC_PBB_NONBINNED_PRIM                    = 0x0000019b,
SC_PBB_TOTAL_REAL_PRIMS_OUT_OF_PBB       = 0x0000019c,
SC_PBB_TOTAL_NULL_PRIMS_OUT_OF_PBB       = 0x0000019d,
SC_PBB_IDLE_CLK_DUE_TO_ROW_TO_COLUMN_TRANSITION = 0x0000019e,
SC_PBB_IDLE_CLK_DUE_TO_FALSE_POSITIVE_ON_ROW = 0x0000019f,
SC_PBB_IDLE_CLK_DUE_TO_FALSE_POSITIVE_ON_COLUMN = 0x000001a0,
SC_PBB_BATCH_BREAK_DUE_TO_PERSISTENT_STATE = 0x000001a1,
SC_PBB_BATCH_BREAK_DUE_TO_CONTEXT_STATE  = 0x000001a2,
SC_PBB_BATCH_BREAK_DUE_TO_PRIM           = 0x000001a3,
SC_PBB_BATCH_BREAK_DUE_TO_PC_STORAGE     = 0x000001a4,
SC_PBB_BATCH_BREAK_DUE_TO_EVENT          = 0x000001a5,
SC_PBB_BATCH_BREAK_DUE_TO_FPOV_LIMIT     = 0x000001a6,
SC_POPS_INTRA_WAVE_OVERLAPS              = 0x000001a7,
SC_POPS_FORCE_EOV                        = 0x000001a8,
SC_PKR_QUAD_OVLP_NOT_FOUND_IN_WAVE_TABLE_AND_WAVES_SINCE_OVLP_SET_TO_MAX = 0x000001a9,
SC_PKR_QUAD_OVLP_NOT_FOUND_IN_WAVE_TABLE_AND_NO_CHANGE_TO_WAVES_SINCE_OVLP = 0x000001aa,
SC_PKR_QUAD_OVLP_FOUND_IN_WAVE_TABLE     = 0x000001ab,
SC_FULL_FULL_QUAD                        = 0x000001ac,
SC_FULL_HALF_QUAD                        = 0x000001ad,
SC_FULL_QTR_QUAD                         = 0x000001ae,
SC_HALF_FULL_QUAD                        = 0x000001af,
SC_HALF_HALF_QUAD                        = 0x000001b0,
SC_HALF_QTR_QUAD                         = 0x000001b1,
SC_QTR_FULL_QUAD                         = 0x000001b2,
SC_QTR_HALF_QUAD                         = 0x000001b3,
SC_QTR_QTR_QUAD                          = 0x000001b4,
SC_GRP5_DYN_SCLK_BUSY                    = 0x000001b5,
SC_GRP6_DYN_SCLK_BUSY                    = 0x000001b6,
SC_GRP7_DYN_SCLK_BUSY                    = 0x000001b7,
SC_GRP8_DYN_SCLK_BUSY                    = 0x000001b8,
SC_GRP9_DYN_SCLK_BUSY                    = 0x000001b9,
SC_PS_TO_BE_SCLK_GATE_STALL              = 0x000001ba,
SC_PA_TO_PBB_SCLK_GATE_STALL_STALL       = 0x000001bb,
SC_PK_BUSY                               = 0x000001bc,
SC_PK_MAX_DEALLOC_FORCE_EOV              = 0x000001bd,
SC_PK_DEALLOC_WAVE_BREAK                 = 0x000001be,
SC_SPI_SEND                              = 0x000001bf,
SC_SPI_CREDIT_AT_ZERO_WITH_PENDING_SEND  = 0x000001c0,
SC_SPI_CREDIT_AT_MAX                     = 0x000001c1,
SC_SPI_CREDIT_AT_MAX_NO_PENDING_SEND     = 0x000001c2,
SC_BCI_SEND                              = 0x000001c3,
SC_BCI_CREDIT_AT_ZERO_WITH_PENDING_SEND  = 0x000001c4,
SC_BCI_CREDIT_AT_MAX                     = 0x000001c5,
SC_BCI_CREDIT_AT_MAX_NO_PENDING_SEND     = 0x000001c6,
SC_SPIBC_FULL_FREEZE                     = 0x000001c7,
SC_PW_BM_PASS_EMPTY_PRIM                 = 0x000001c8,
SC_SUPERTILE_COUNT_EXCLUDE_PASS_EMPTY_PRIM = 0x000001c9,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H0 = 0x000001ca,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H1 = 0x000001cb,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H2 = 0x000001cc,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H3 = 0x000001cd,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H4 = 0x000001ce,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H5 = 0x000001cf,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H6 = 0x000001d0,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H7 = 0x000001d1,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H8 = 0x000001d2,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H9 = 0x000001d3,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H10 = 0x000001d4,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H11 = 0x000001d5,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H12 = 0x000001d6,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H13 = 0x000001d7,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H14 = 0x000001d8,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H15 = 0x000001d9,
SC_SUPERTILE_PER_PRIM_EXCLUDE_PASS_EMPTY_PRIM_H16 = 0x000001da,
SC_DB0_TILE_INTERFACE_BUSY               = 0x000001db,
SC_DB0_TILE_INTERFACE_SEND               = 0x000001dc,
SC_DB0_TILE_INTERFACE_SEND_EVENT         = 0x000001dd,
SC_DB0_TILE_INTERFACE_SEND_SOP_ONLY_EVENT = 0x000001de,
SC_DB0_TILE_INTERFACE_SEND_SOP           = 0x000001df,
SC_DB0_TILE_INTERFACE_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x000001e0,
SC_DB0_TILE_INTERFACE_CREDIT_AT_MAX      = 0x000001e1,
SC_DB0_TILE_INTERFACE_CREDIT_AT_MAX_WITH_NO_PENDING_SEND = 0x000001e2,
SC_DB1_TILE_INTERFACE_BUSY               = 0x000001e3,
SC_DB1_TILE_INTERFACE_SEND               = 0x000001e4,
SC_DB1_TILE_INTERFACE_SEND_EVENT         = 0x000001e5,
SC_DB1_TILE_INTERFACE_SEND_SOP_ONLY_EVENT = 0x000001e6,
SC_DB1_TILE_INTERFACE_SEND_SOP           = 0x000001e7,
SC_DB1_TILE_INTERFACE_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x000001e8,
SC_DB1_TILE_INTERFACE_CREDIT_AT_MAX      = 0x000001e9,
SC_DB1_TILE_INTERFACE_CREDIT_AT_MAX_WITH_NO_PENDING_SEND = 0x000001ea,
SC_BACKEND_PRIM_FIFO_FULL                = 0x000001eb,
SC_PBB_BATCH_BREAK_DUE_TO_TIMEOUT_COUNTER = 0x000001ec,
SC_PBB_BATCH_BREAK_DUE_TO_NONBINNED_BATCH = 0x000001ed,
SC_PBB_BATCH_BREAK_DUE_TO_DEBUG_DATA_PER_DRAW_DISPATCH = 0x000001ee,
SC_PBB_BATCH_BREAK_DUE_TO_OVERRIDE_REGISTER_PERSISTENT = 0x000001ef,
SC_PBB_BATCH_BREAK_DUE_TO_OVERRIDE_REGISTER_CONTEXT = 0x000001f0,
SC_PBB_BATCH_BREAK_DUE_TO_OVERRIDE_REGISTER_FPOV = 0x000001f1,
SC_PBB_BATCH_BREAK_DUE_TO_NEW_SC_MODE    = 0x000001f2,
SC_PBB_BATCH_BREAK_DUE_TO_BINNING_MODE_CHANGE = 0x000001f3,
SC_PBB_BATCH_BREAK_DUE_TO_PIPELINE_EVENT_COUNT = 0x000001f4,
SC_PBB_BATCH_BREAK_DUE_TO_PIPE_RESET     = 0x000001f5,
SC_PBB_BATCH_BREAK_DUE_TO_GFX_PIPE_CHANGE = 0x000001f6,
SC_STALLED_BY_DB0_TILEFIFO               = 0x000001f7,
SC_DB0_QUAD_INTF_SEND                    = 0x000001f8,
SC_DB0_QUAD_INTF_BUSY                    = 0x000001f9,
SC_DB0_QUAD_INTF_STALLED_BY_DB           = 0x000001fa,
SC_DB0_QUAD_INTF_CREDIT_AT_MAX           = 0x000001fb,
SC_DB0_QUAD_INTF_IDLE                    = 0x000001fc,
SC_DB1_QUAD_INTF_SEND                    = 0x000001fd,
SC_STALLED_BY_DB1_TILEFIFO               = 0x000001fe,
SC_DB1_QUAD_INTF_BUSY                    = 0x000001ff,
SC_DB1_QUAD_INTF_STALLED_BY_DB           = 0x00000200,
SC_DB1_QUAD_INTF_CREDIT_AT_MAX           = 0x00000201,
SC_DB1_QUAD_INTF_IDLE                    = 0x00000202,
SC_PKR_WAVE_BREAK_OUTSIDE_REGION         = 0x00000203,
SC_PKR_WAVE_BREAK_FULL_TILE              = 0x00000204,
SC_FSR_WALKED                            = 0x00000205,
SC_PBB_EMPTY_INPUT_CYCLE_WHEN_BATCH_OPEN = 0x00000206,
SC_PBB_BATCH_BREAK_DUE_TO_NULL_PRIM_BREAK_BATCH_LIMIT = 0x00000207,
SC_DB0_WE_STALLED_BY_RSLT_FIFO_FULL      = 0x00000208,
SC_DB0_WE_TILE_MASK_RETURN_FIFO_FULL_WITH_WE_RSLT_FIFO_STALL = 0x00000209,
SC_DB0_TILE_MASK_FIFO_FULL               = 0x0000020a,
SC_DB1_WE_STALLED_BY_RSLT_FIFO_FULL      = 0x0000020b,
SC_DB1_WE_TILE_MASK_RETURN_FIFO_FULL_WITH_WE_RSLT_FIFO_STALL = 0x0000020c,
SC_DB1_TILE_MASK_FIFO_FULL               = 0x0000020d,
SC_PS_PM_PBB_TO_PSE_FIFO_WE_STALL_BY_PFF_PW_FULL = 0x0000020e,
SC_PS_PM_PBB_TO_PSE_FIFO_WE_STALL_BY_ZFF_PW_FULL = 0x0000020f,
SC_PS_PM_PBB_TO_PSE_FIFO_WE_STALL_BY_PBB_TO_PSE_FIFO_FULL = 0x00000210,
SC_PS_PM_PFF_PW_FULL                     = 0x00000211,
SC_PS_PM_ZFF_PW_FULL                     = 0x00000212,
SC_PS_PM_PBB_TO_PSE_FIFO_FULL            = 0x00000213,
SC_PK_PM_QD1_FD_CONFLICT_WAVE_BRK_1H     = 0x00000214,
SC_PK_PM_QD1_FORCE_PARTIAL_FOR_DEALLOC_WAVE_BRK_1H = 0x00000215,
SC_PK_PM_QD1_AVOID_DEALLOC_ADD_WAVE_BRK_1H = 0x00000216,
SC_PK_PM_4X2_SPLIT_WAVE_BRK_1H           = 0x00000217,
SC_PK_PM_PKR_FILL_4X2_WAVE_BRK_1H        = 0x00000218,
SC_PK_PM_SPLIT_OR_FILL_4X2_WAVE_BRK_1H   = 0x00000219,
SC_PK_PM_END_OF_VECTOR_WAVE_BRK_1H       = 0x0000021a,
SC_PK_PM_LAST_AND_DEALLOC_WAVE_BRK_1H    = 0x0000021b,
SC_PK_PM_CTL_ONLY_CMD_WAVE_BRK_1H        = 0x0000021c,
SC_PK_PM_AVOID_DEALLOC_ADD_WAVE_BRK_1H   = 0x0000021d,
SC_PK_PM_FD_CONFLICT_WAVE_BRK_1H         = 0x0000021e,
SC_PK_PM_FORCE_PARTIAL_FOR_DEALLOC_WAVE_BRK_1H = 0x0000021f,
SC_PK_PM_AE_CONFLICT_WAVE_BRK_1H         = 0x00000220,
SC_PK_PM_EOP_OR_LAD_WAVE_BRK_1H          = 0x00000221,
SC_PK_PM_FULL_TILE_WAVE_BRK_1H           = 0x00000222,
SC_PK_PM_POPS_FORCE_EOV_WAVE_BRK_1H      = 0x00000223,
SC_PK_PM_MAX_DEALLOC_FORCE_EOV_WAVE_BRK_1H = 0x00000224,
SC_PK_PM_WAVE_BREAK_OUTSIDE_REGION_WAVE_BRK_1H = 0x00000225,
SC_PK_PM_MAX_CLK_CNT_FORCE_EOV_WAVE_BRK_1H = 0x00000226,
SC_PK_PM_MAX_REZ_CNT_FORCE_EOV_WAVE_BRK_1H = 0x00000227,
SC_PK_PM_VRS_RATE_X_00_Y_00_QUAD         = 0x00000228,
SC_PK_PM_VRS_RATE_X_00_Y_01_QUAD         = 0x00000229,
SC_PK_PM_VRS_RATE_X_00_Y_10_QUAD         = 0x0000022a,
SC_PK_PM_VRS_RATE_X_00_Y_11_QUAD         = 0x0000022b,
SC_PK_PM_VRS_RATE_X_01_Y_00_QUAD         = 0x0000022c,
SC_PK_PM_VRS_RATE_X_01_Y_01_QUAD         = 0x0000022d,
SC_PK_PM_VRS_RATE_X_01_Y_10_QUAD         = 0x0000022e,
SC_PK_PM_VRS_RATE_X_01_Y_11_QUAD         = 0x0000022f,
SC_PK_PM_VRS_RATE_X_10_Y_00_QUAD         = 0x00000230,
SC_PK_PM_VRS_RATE_X_10_Y_01_QUAD         = 0x00000231,
SC_PK_PM_VRS_RATE_X_10_Y_10_QUAD         = 0x00000232,
SC_PK_PM_VRS_RATE_X_10_Y_11_QUAD         = 0x00000233,
SC_PK_PM_VRS_RATE_X_11_Y_00_QUAD         = 0x00000234,
SC_PK_PM_VRS_RATE_X_11_Y_01_QUAD         = 0x00000235,
SC_PK_PM_VRS_RATE_X_11_Y_10_QUAD         = 0x00000236,
SC_PK_PM_VRS_RATE_X_11_Y_11_QUAD         = 0x00000237,
SC_PBB_BATCH_BREAK_DUE_TO_PIPELINE_MODE_CHANGE = 0x00000238,
SC_PBB_RESERVED                          = 0x00000239,
SC_BM_BE0_STALLED                        = 0x0000023a,
SC_BM_BE1_STALLED                        = 0x0000023b,
SC_BM_BE2_STALLED                        = 0x0000023c,
SC_BM_BE3_STALLED                        = 0x0000023d,
SC_BM_MULTI_ACCUM_1_BE_STALLED           = 0x0000023e,
SC_BM_MULTI_ACCUM_2_BE_STALLED           = 0x0000023f,
SC_BM_MULTI_ACCUM_3_BE_STALLED           = 0x00000240,
SC_BM_MULTI_ACCUM_4_BE_STALLED           = 0x00000241,
} SC_PERFCNT_SEL;

/*
 * ScMap enum
 */

typedef enum ScMap {
RASTER_CONFIG_SC_MAP_0                   = 0x00000000,
RASTER_CONFIG_SC_MAP_1                   = 0x00000001,
RASTER_CONFIG_SC_MAP_2                   = 0x00000002,
RASTER_CONFIG_SC_MAP_3                   = 0x00000003,
} ScMap;

/*
 * ScUncertaintyRegionMode enum
 */

typedef enum ScUncertaintyRegionMode {
SC_HALF_LSB                              = 0x00000000,
SC_LSB_ONE_SIDED                         = 0x00000001,
SC_LSB_TWO_SIDED                         = 0x00000002,
} ScUncertaintyRegionMode;

/*
 * ScUncertaintyRegionMult enum
 */

typedef enum ScUncertaintyRegionMult {
SC_UR_1X                                 = 0x00000000,
SC_UR_2X                                 = 0x00000001,
SC_UR_4X                                 = 0x00000002,
SC_UR_8X                                 = 0x00000003,
} ScUncertaintyRegionMult;

/*
 * ScXsel enum
 */

typedef enum ScXsel {
RASTER_CONFIG_SC_XSEL_8_WIDE_TILE        = 0x00000000,
RASTER_CONFIG_SC_XSEL_16_WIDE_TILE       = 0x00000001,
RASTER_CONFIG_SC_XSEL_32_WIDE_TILE       = 0x00000002,
RASTER_CONFIG_SC_XSEL_64_WIDE_TILE       = 0x00000003,
} ScXsel;

/*
 * ScYsel enum
 */

typedef enum ScYsel {
RASTER_CONFIG_SC_YSEL_8_WIDE_TILE        = 0x00000000,
RASTER_CONFIG_SC_YSEL_16_WIDE_TILE       = 0x00000001,
RASTER_CONFIG_SC_YSEL_32_WIDE_TILE       = 0x00000002,
RASTER_CONFIG_SC_YSEL_64_WIDE_TILE       = 0x00000003,
} ScYsel;

/*
 * SeMap enum
 */

typedef enum SeMap {
RASTER_CONFIG_SE_MAP_0                   = 0x00000000,
RASTER_CONFIG_SE_MAP_1                   = 0x00000001,
RASTER_CONFIG_SE_MAP_2                   = 0x00000002,
RASTER_CONFIG_SE_MAP_3                   = 0x00000003,
} SeMap;

/*
 * SePairMap enum
 */

typedef enum SePairMap {
RASTER_CONFIG_SE_PAIR_MAP_0              = 0x00000000,
RASTER_CONFIG_SE_PAIR_MAP_1              = 0x00000001,
RASTER_CONFIG_SE_PAIR_MAP_2              = 0x00000002,
RASTER_CONFIG_SE_PAIR_MAP_3              = 0x00000003,
} SePairMap;

/*
 * SePairXsel enum
 */

typedef enum SePairXsel {
RASTER_CONFIG_SE_PAIR_XSEL_8_WIDE_TILE   = 0x00000000,
RASTER_CONFIG_SE_PAIR_XSEL_16_WIDE_TILE  = 0x00000001,
RASTER_CONFIG_SE_PAIR_XSEL_32_WIDE_TILE  = 0x00000002,
RASTER_CONFIG_SE_PAIR_XSEL_64_WIDE_TILE  = 0x00000003,
} SePairXsel;

/*
 * SePairYsel enum
 */

typedef enum SePairYsel {
RASTER_CONFIG_SE_PAIR_YSEL_8_WIDE_TILE   = 0x00000000,
RASTER_CONFIG_SE_PAIR_YSEL_16_WIDE_TILE  = 0x00000001,
RASTER_CONFIG_SE_PAIR_YSEL_32_WIDE_TILE  = 0x00000002,
RASTER_CONFIG_SE_PAIR_YSEL_64_WIDE_TILE  = 0x00000003,
} SePairYsel;

/*
 * SeXsel enum
 */

typedef enum SeXsel {
RASTER_CONFIG_SE_XSEL_8_WIDE_TILE        = 0x00000000,
RASTER_CONFIG_SE_XSEL_16_WIDE_TILE       = 0x00000001,
RASTER_CONFIG_SE_XSEL_32_WIDE_TILE       = 0x00000002,
RASTER_CONFIG_SE_XSEL_64_WIDE_TILE       = 0x00000003,
} SeXsel;

/*
 * SeYsel enum
 */

typedef enum SeYsel {
RASTER_CONFIG_SE_YSEL_8_WIDE_TILE        = 0x00000000,
RASTER_CONFIG_SE_YSEL_16_WIDE_TILE       = 0x00000001,
RASTER_CONFIG_SE_YSEL_32_WIDE_TILE       = 0x00000002,
RASTER_CONFIG_SE_YSEL_64_WIDE_TILE       = 0x00000003,
} SeYsel;

/*
 * VRSCombinerModeSC enum
 */

typedef enum VRSCombinerModeSC {
SC_VRS_COMB_MODE_PASSTHRU                = 0x00000000,
SC_VRS_COMB_MODE_OVERRIDE                = 0x00000001,
SC_VRS_COMB_MODE_MIN                     = 0x00000002,
SC_VRS_COMB_MODE_MAX                     = 0x00000003,
SC_VRS_COMB_MODE_SATURATE                = 0x00000004,
} VRSCombinerModeSC;

/*
 * VRSrate enum
 */

typedef enum VRSrate {
VRS_SHADING_RATE_1X1                     = 0x00000000,
VRS_SHADING_RATE_1X2                     = 0x00000001,
VRS_SHADING_RATE_UNDEFINED0              = 0x00000002,
VRS_SHADING_RATE_UNDEFINED1              = 0x00000003,
VRS_SHADING_RATE_2X1                     = 0x00000004,
VRS_SHADING_RATE_2X2                     = 0x00000005,
VRS_SHADING_RATE_2X4                     = 0x00000006,
VRS_SHADING_RATE_UNDEFINED2              = 0x00000007,
VRS_SHADING_RATE_UNDEFINED3              = 0x00000008,
VRS_SHADING_RATE_4X2                     = 0x00000009,
VRS_SHADING_RATE_4X4                     = 0x0000000a,
VRS_SHADING_RATE_UNDEFINED4              = 0x0000000b,
VRS_SHADING_RATE_16X_SSAA                = 0x0000000c,
VRS_SHADING_RATE_8X_SSAA                 = 0x0000000d,
VRS_SHADING_RATE_4X_SSAA                 = 0x0000000e,
VRS_SHADING_RATE_2X_SSAA                 = 0x0000000f,
} VRSrate;

/*******************************************************
 * TC Enums
 *******************************************************/

/*
 * TC_EA_CID enum
 */

typedef enum TC_EA_CID {
TC_EA_CID_RT                             = 0x00000000,
TC_EA_CID_FMASK                          = 0x00000001,
TC_EA_CID_DCC                            = 0x00000002,
TC_EA_CID_TCPMETA                        = 0x00000003,
TC_EA_CID_Z                              = 0x00000004,
TC_EA_CID_STENCIL                        = 0x00000005,
TC_EA_CID_HTILE                          = 0x00000006,
TC_EA_CID_MISC                           = 0x00000007,
TC_EA_CID_TCP                            = 0x00000008,
TC_EA_CID_SQC                            = 0x00000009,
TC_EA_CID_CPF                            = 0x0000000a,
TC_EA_CID_CPG                            = 0x0000000b,
TC_EA_CID_IA                             = 0x0000000c,
TC_EA_CID_WD                             = 0x0000000d,
TC_EA_CID_PA                             = 0x0000000e,
TC_EA_CID_UTCL2_TPI                      = 0x0000000f,
} TC_EA_CID;

/*
 * TC_NACKS enum
 */

typedef enum TC_NACKS {
TC_NACK_NO_FAULT                         = 0x00000000,
TC_NACK_PAGE_FAULT                       = 0x00000001,
TC_NACK_PROTECTION_FAULT                 = 0x00000002,
TC_NACK_DATA_ERROR                       = 0x00000003,
} TC_NACKS;

/*
 * TC_OP enum
 */

typedef enum TC_OP {
TC_OP_READ                               = 0x00000000,
TC_OP_ATOMIC_FCMPSWAP_RTN_32             = 0x00000001,
TC_OP_ATOMIC_FMIN_RTN_32                 = 0x00000002,
TC_OP_ATOMIC_FMAX_RTN_32                 = 0x00000003,
TC_OP_RESERVED_FOP_RTN_32_0              = 0x00000004,
TC_OP_RESERVED_FADD_RTN_32               = 0x00000005,
TC_OP_RESERVED_FOP_RTN_32_2              = 0x00000006,
TC_OP_ATOMIC_SWAP_RTN_32                 = 0x00000007,
TC_OP_ATOMIC_CMPSWAP_RTN_32              = 0x00000008,
TC_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_RTN_32 = 0x00000009,
TC_OP_ATOMIC_FMIN_FLUSH_DENORM_RTN_32    = 0x0000000a,
TC_OP_ATOMIC_FMAX_FLUSH_DENORM_RTN_32    = 0x0000000b,
TC_OP_PROBE_FILTER                       = 0x0000000c,
TC_OP_ATOMIC_FADD_FLUSH_DENORM_RTN_32    = 0x0000000d,
TC_OP_RESERVED_FOP_FLUSH_DENORM_RTN_32_2 = 0x0000000e,
TC_OP_ATOMIC_ADD_RTN_32                  = 0x0000000f,
TC_OP_ATOMIC_SUB_RTN_32                  = 0x00000010,
TC_OP_ATOMIC_SMIN_RTN_32                 = 0x00000011,
TC_OP_ATOMIC_UMIN_RTN_32                 = 0x00000012,
TC_OP_ATOMIC_SMAX_RTN_32                 = 0x00000013,
TC_OP_ATOMIC_UMAX_RTN_32                 = 0x00000014,
TC_OP_ATOMIC_AND_RTN_32                  = 0x00000015,
TC_OP_ATOMIC_OR_RTN_32                   = 0x00000016,
TC_OP_ATOMIC_XOR_RTN_32                  = 0x00000017,
TC_OP_ATOMIC_INC_RTN_32                  = 0x00000018,
TC_OP_ATOMIC_DEC_RTN_32                  = 0x00000019,
TC_OP_WBINVL1_VOL                        = 0x0000001a,
TC_OP_WBINVL1_SD                         = 0x0000001b,
TC_OP_RESERVED_NON_FLOAT_RTN_32_0        = 0x0000001c,
TC_OP_RESERVED_NON_FLOAT_RTN_32_1        = 0x0000001d,
TC_OP_RESERVED_NON_FLOAT_RTN_32_2        = 0x0000001e,
TC_OP_RESERVED_NON_FLOAT_RTN_32_3        = 0x0000001f,
TC_OP_WRITE                              = 0x00000020,
TC_OP_ATOMIC_FCMPSWAP_RTN_64             = 0x00000021,
TC_OP_ATOMIC_FMIN_RTN_64                 = 0x00000022,
TC_OP_ATOMIC_FMAX_RTN_64                 = 0x00000023,
TC_OP_RESERVED_FOP_RTN_64_0              = 0x00000024,
TC_OP_RESERVED_FOP_RTN_64_1              = 0x00000025,
TC_OP_RESERVED_FOP_RTN_64_2              = 0x00000026,
TC_OP_ATOMIC_SWAP_RTN_64                 = 0x00000027,
TC_OP_ATOMIC_CMPSWAP_RTN_64              = 0x00000028,
TC_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_RTN_64 = 0x00000029,
TC_OP_ATOMIC_FMIN_FLUSH_DENORM_RTN_64    = 0x0000002a,
TC_OP_ATOMIC_FMAX_FLUSH_DENORM_RTN_64    = 0x0000002b,
TC_OP_WBINVL2_SD                         = 0x0000002c,
TC_OP_RESERVED_FOP_FLUSH_DENORM_RTN_64_0 = 0x0000002d,
TC_OP_RESERVED_FOP_FLUSH_DENORM_RTN_64_1 = 0x0000002e,
TC_OP_ATOMIC_ADD_RTN_64                  = 0x0000002f,
TC_OP_ATOMIC_SUB_RTN_64                  = 0x00000030,
TC_OP_ATOMIC_SMIN_RTN_64                 = 0x00000031,
TC_OP_ATOMIC_UMIN_RTN_64                 = 0x00000032,
TC_OP_ATOMIC_SMAX_RTN_64                 = 0x00000033,
TC_OP_ATOMIC_UMAX_RTN_64                 = 0x00000034,
TC_OP_ATOMIC_AND_RTN_64                  = 0x00000035,
TC_OP_ATOMIC_OR_RTN_64                   = 0x00000036,
TC_OP_ATOMIC_XOR_RTN_64                  = 0x00000037,
TC_OP_ATOMIC_INC_RTN_64                  = 0x00000038,
TC_OP_ATOMIC_DEC_RTN_64                  = 0x00000039,
TC_OP_WBL2_NC                            = 0x0000003a,
TC_OP_WBL2_WC                            = 0x0000003b,
TC_OP_RESERVED_NON_FLOAT_RTN_64_1        = 0x0000003c,
TC_OP_RESERVED_NON_FLOAT_RTN_64_2        = 0x0000003d,
TC_OP_RESERVED_NON_FLOAT_RTN_64_3        = 0x0000003e,
TC_OP_RESERVED_NON_FLOAT_RTN_64_4        = 0x0000003f,
TC_OP_WBINVL1                            = 0x00000040,
TC_OP_ATOMIC_FCMPSWAP_32                 = 0x00000041,
TC_OP_ATOMIC_FMIN_32                     = 0x00000042,
TC_OP_ATOMIC_FMAX_32                     = 0x00000043,
TC_OP_RESERVED_FOP_32_0                  = 0x00000044,
TC_OP_RESERVED_FADD_32                   = 0x00000045,
TC_OP_RESERVED_FOP_32_2                  = 0x00000046,
TC_OP_ATOMIC_SWAP_32                     = 0x00000047,
TC_OP_ATOMIC_CMPSWAP_32                  = 0x00000048,
TC_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_32    = 0x00000049,
TC_OP_ATOMIC_FMIN_FLUSH_DENORM_32        = 0x0000004a,
TC_OP_ATOMIC_FMAX_FLUSH_DENORM_32        = 0x0000004b,
TC_OP_INV_METADATA                       = 0x0000004c,
TC_OP_ATOMIC_FADD_FLUSH_DENORM_32        = 0x0000004d,
TC_OP_RESERVED_FOP_FLUSH_DENORM_32_2     = 0x0000004e,
TC_OP_ATOMIC_ADD_32                      = 0x0000004f,
TC_OP_ATOMIC_SUB_32                      = 0x00000050,
TC_OP_ATOMIC_SMIN_32                     = 0x00000051,
TC_OP_ATOMIC_UMIN_32                     = 0x00000052,
TC_OP_ATOMIC_SMAX_32                     = 0x00000053,
TC_OP_ATOMIC_UMAX_32                     = 0x00000054,
TC_OP_ATOMIC_AND_32                      = 0x00000055,
TC_OP_ATOMIC_OR_32                       = 0x00000056,
TC_OP_ATOMIC_XOR_32                      = 0x00000057,
TC_OP_ATOMIC_INC_32                      = 0x00000058,
TC_OP_ATOMIC_DEC_32                      = 0x00000059,
TC_OP_INVL2_NC                           = 0x0000005a,
TC_OP_NOP_RTN0                           = 0x0000005b,
TC_OP_RESERVED_NON_FLOAT_32_1            = 0x0000005c,
TC_OP_RESERVED_NON_FLOAT_32_2            = 0x0000005d,
TC_OP_RESERVED_NON_FLOAT_32_3            = 0x0000005e,
TC_OP_RESERVED_NON_FLOAT_32_4            = 0x0000005f,
TC_OP_WBINVL2                            = 0x00000060,
TC_OP_ATOMIC_FCMPSWAP_64                 = 0x00000061,
TC_OP_ATOMIC_FMIN_64                     = 0x00000062,
TC_OP_ATOMIC_FMAX_64                     = 0x00000063,
TC_OP_RESERVED_FOP_64_0                  = 0x00000064,
TC_OP_RESERVED_FOP_64_1                  = 0x00000065,
TC_OP_RESERVED_FOP_64_2                  = 0x00000066,
TC_OP_ATOMIC_SWAP_64                     = 0x00000067,
TC_OP_ATOMIC_CMPSWAP_64                  = 0x00000068,
TC_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_64    = 0x00000069,
TC_OP_ATOMIC_FMIN_FLUSH_DENORM_64        = 0x0000006a,
TC_OP_ATOMIC_FMAX_FLUSH_DENORM_64        = 0x0000006b,
TC_OP_RESERVED_FOP_FLUSH_DENORM_64_0     = 0x0000006c,
TC_OP_RESERVED_FOP_FLUSH_DENORM_64_1     = 0x0000006d,
TC_OP_RESERVED_FOP_FLUSH_DENORM_64_2     = 0x0000006e,
TC_OP_ATOMIC_ADD_64                      = 0x0000006f,
TC_OP_ATOMIC_SUB_64                      = 0x00000070,
TC_OP_ATOMIC_SMIN_64                     = 0x00000071,
TC_OP_ATOMIC_UMIN_64                     = 0x00000072,
TC_OP_ATOMIC_SMAX_64                     = 0x00000073,
TC_OP_ATOMIC_UMAX_64                     = 0x00000074,
TC_OP_ATOMIC_AND_64                      = 0x00000075,
TC_OP_ATOMIC_OR_64                       = 0x00000076,
TC_OP_ATOMIC_XOR_64                      = 0x00000077,
TC_OP_ATOMIC_INC_64                      = 0x00000078,
TC_OP_ATOMIC_DEC_64                      = 0x00000079,
TC_OP_WBINVL2_NC                         = 0x0000007a,
TC_OP_NOP_ACK                            = 0x0000007b,
TC_OP_RESERVED_NON_FLOAT_64_1            = 0x0000007c,
TC_OP_RESERVED_NON_FLOAT_64_2            = 0x0000007d,
TC_OP_RESERVED_NON_FLOAT_64_3            = 0x0000007e,
TC_OP_RESERVED_NON_FLOAT_64_4            = 0x0000007f,
} TC_OP;

/*
 * TC_OP_MASKS enum
 */

typedef enum TC_OP_MASKS {
TC_OP_MASK_FLUSH_DENROM                  = 0x00000008,
TC_OP_MASK_64                            = 0x00000020,
TC_OP_MASK_NO_RTN                        = 0x00000040,
} TC_OP_MASKS;

/*******************************************************
 * GL2 Enums
 *******************************************************/

/*
 * GL2_EA_CID enum
 */

typedef enum GL2_EA_CID {
GL2_EA_CID_CLIENT                        = 0x00000000,
GL2_EA_CID_SDMA                          = 0x00000001,
GL2_EA_CID_RLC                           = 0x00000002,
GL2_EA_CID_SQC                           = 0x00000003,
GL2_EA_CID_CP                            = 0x00000004,
GL2_EA_CID_CPDMA                         = 0x00000005,
GL2_EA_CID_UTCL2                         = 0x00000006,
GL2_EA_CID_RT                            = 0x00000007,
GL2_EA_CID_FMASK                         = 0x00000008,
GL2_EA_CID_DCC                           = 0x00000009,
GL2_EA_CID_Z_STENCIL                     = 0x0000000a,
GL2_EA_CID_ZPCPSD                        = 0x0000000b,
GL2_EA_CID_HTILE                         = 0x0000000c,
GL2_EA_CID_MES                           = 0x0000000d,
GL2_EA_CID_TCPMETA                       = 0x0000000f,
} GL2_EA_CID;

/*
 * GL2_NACKS enum
 */

typedef enum GL2_NACKS {
GL2_NACK_NO_FAULT                        = 0x00000000,
GL2_NACK_PAGE_FAULT                      = 0x00000001,
GL2_NACK_PROTECTION_FAULT                = 0x00000002,
GL2_NACK_DATA_ERROR                      = 0x00000003,
} GL2_NACKS;

/*
 * GL2_OP enum
 */

typedef enum GL2_OP {
GL2_OP_READ                              = 0x00000000,
GL2_OP_ATOMIC_FCMPSWAP_RTN_32            = 0x00000001,
GL2_OP_ATOMIC_FMIN_RTN_32                = 0x00000002,
GL2_OP_ATOMIC_FMAX_RTN_32                = 0x00000003,
GL2_OP_ATOMIC_SWAP_RTN_32                = 0x00000007,
GL2_OP_ATOMIC_CMPSWAP_RTN_32             = 0x00000008,
GL2_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_RTN_32 = 0x00000009,
GL2_OP_ATOMIC_FMIN_FLUSH_DENORM_RTN_32   = 0x0000000a,
GL2_OP_ATOMIC_FMAX_FLUSH_DENORM_RTN_32   = 0x0000000b,
GL2_OP_PROBE_FILTER                      = 0x0000000c,
GL2_OP_ATOMIC_FADD_FLUSH_DENORM_RTN_32   = 0x0000000d,
GL2_OP_RESERVED_FOP_FLUSH_DENORM_RTN_32_2 = 0x0000000e,
GL2_OP_ATOMIC_ADD_RTN_32                 = 0x0000000f,
GL2_OP_ATOMIC_SUB_RTN_32                 = 0x00000010,
GL2_OP_ATOMIC_SMIN_RTN_32                = 0x00000011,
GL2_OP_ATOMIC_UMIN_RTN_32                = 0x00000012,
GL2_OP_ATOMIC_SMAX_RTN_32                = 0x00000013,
GL2_OP_ATOMIC_UMAX_RTN_32                = 0x00000014,
GL2_OP_ATOMIC_AND_RTN_32                 = 0x00000015,
GL2_OP_ATOMIC_OR_RTN_32                  = 0x00000016,
GL2_OP_ATOMIC_XOR_RTN_32                 = 0x00000017,
GL2_OP_ATOMIC_INC_RTN_32                 = 0x00000018,
GL2_OP_ATOMIC_DEC_RTN_32                 = 0x00000019,
GL2_OP_ATOMIC_CLAMP_SUB_RTN_32           = 0x0000001a,
GL2_OP_WRITE                             = 0x00000020,
GL2_OP_ATOMIC_FCMPSWAP_RTN_64            = 0x00000021,
GL2_OP_ATOMIC_FMIN_RTN_64                = 0x00000022,
GL2_OP_ATOMIC_FMAX_RTN_64                = 0x00000023,
GL2_OP_ATOMIC_SWAP_RTN_64                = 0x00000027,
GL2_OP_ATOMIC_CMPSWAP_RTN_64             = 0x00000028,
GL2_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_RTN_64 = 0x00000029,
GL2_OP_ATOMIC_FMIN_FLUSH_DENORM_RTN_64   = 0x0000002a,
GL2_OP_ATOMIC_FMAX_FLUSH_DENORM_RTN_64   = 0x0000002b,
GL2_OP_ATOMIC_ADD_RTN_64                 = 0x0000002f,
GL2_OP_ATOMIC_SUB_RTN_64                 = 0x00000030,
GL2_OP_ATOMIC_SMIN_RTN_64                = 0x00000031,
GL2_OP_ATOMIC_UMIN_RTN_64                = 0x00000032,
GL2_OP_ATOMIC_SMAX_RTN_64                = 0x00000033,
GL2_OP_ATOMIC_UMAX_RTN_64                = 0x00000034,
GL2_OP_ATOMIC_AND_RTN_64                 = 0x00000035,
GL2_OP_ATOMIC_OR_RTN_64                  = 0x00000036,
GL2_OP_ATOMIC_XOR_RTN_64                 = 0x00000037,
GL2_OP_ATOMIC_INC_RTN_64                 = 0x00000038,
GL2_OP_ATOMIC_DEC_RTN_64                 = 0x00000039,
GL2_OP_GL1_INV                           = 0x00000040,
GL2_OP_ATOMIC_FCMPSWAP_32                = 0x00000041,
GL2_OP_ATOMIC_FMIN_32                    = 0x00000042,
GL2_OP_ATOMIC_FMAX_32                    = 0x00000043,
GL2_OP_ATOMIC_SWAP_32                    = 0x00000047,
GL2_OP_ATOMIC_CMPSWAP_32                 = 0x00000048,
GL2_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_32   = 0x00000049,
GL2_OP_ATOMIC_FMIN_FLUSH_DENORM_32       = 0x0000004a,
GL2_OP_ATOMIC_FMAX_FLUSH_DENORM_32       = 0x0000004b,
GL2_OP_ATOMIC_UMIN_8                     = 0x0000004c,
GL2_OP_ATOMIC_FADD_FLUSH_DENORM_32       = 0x0000004d,
GL2_OP_ATOMIC_ADD_32                     = 0x0000004f,
GL2_OP_ATOMIC_SUB_32                     = 0x00000050,
GL2_OP_ATOMIC_SMIN_32                    = 0x00000051,
GL2_OP_ATOMIC_UMIN_32                    = 0x00000052,
GL2_OP_ATOMIC_SMAX_32                    = 0x00000053,
GL2_OP_ATOMIC_UMAX_32                    = 0x00000054,
GL2_OP_ATOMIC_AND_32                     = 0x00000055,
GL2_OP_ATOMIC_OR_32                      = 0x00000056,
GL2_OP_ATOMIC_XOR_32                     = 0x00000057,
GL2_OP_ATOMIC_INC_32                     = 0x00000058,
GL2_OP_ATOMIC_DEC_32                     = 0x00000059,
GL2_OP_NOP_RTN0                          = 0x0000005b,
GL2_OP_ATOMIC_FCMPSWAP_64                = 0x00000061,
GL2_OP_ATOMIC_FMIN_64                    = 0x00000062,
GL2_OP_ATOMIC_FMAX_64                    = 0x00000063,
GL2_OP_ATOMIC_SWAP_64                    = 0x00000067,
GL2_OP_ATOMIC_CMPSWAP_64                 = 0x00000068,
GL2_OP_ATOMIC_FCMPSWAP_FLUSH_DENORM_64   = 0x00000069,
GL2_OP_ATOMIC_FMIN_FLUSH_DENORM_64       = 0x0000006a,
GL2_OP_ATOMIC_FMAX_FLUSH_DENORM_64       = 0x0000006b,
GL2_OP_ATOMIC_ADD_64                     = 0x0000006f,
GL2_OP_ATOMIC_SUB_64                     = 0x00000070,
GL2_OP_ATOMIC_SMIN_64                    = 0x00000071,
GL2_OP_ATOMIC_UMIN_64                    = 0x00000072,
GL2_OP_ATOMIC_SMAX_64                    = 0x00000073,
GL2_OP_ATOMIC_UMAX_64                    = 0x00000074,
GL2_OP_ATOMIC_AND_64                     = 0x00000075,
GL2_OP_ATOMIC_OR_64                      = 0x00000076,
GL2_OP_ATOMIC_XOR_64                     = 0x00000077,
GL2_OP_ATOMIC_INC_64                     = 0x00000078,
GL2_OP_ATOMIC_DEC_64                     = 0x00000079,
GL2_OP_ATOMIC_UMAX_8                     = 0x0000007a,
GL2_OP_NOP_ACK                           = 0x0000007b,
} GL2_OP;

/*
 * GL2_OP_MASKS enum
 */

typedef enum GL2_OP_MASKS {
GL2_OP_MASK_FLUSH_DENROM                 = 0x00000008,
GL2_OP_MASK_64                           = 0x00000020,
GL2_OP_MASK_NO_RTN                       = 0x00000040,
} GL2_OP_MASKS;

/*******************************************************
 * RLC Enums
 *******************************************************/

/*
 * RLC_DOORBELL_MODE enum
 */

typedef enum RLC_DOORBELL_MODE {
RLC_DOORBELL_MODE_DISABLE                = 0x00000000,
RLC_DOORBELL_MODE_ENABLE                 = 0x00000001,
RLC_DOORBELL_MODE_ENABLE_PF              = 0x00000002,
RLC_DOORBELL_MODE_ENABLE_PF_VF           = 0x00000003,
} RLC_DOORBELL_MODE;

/*
 * RLC_PERFCOUNTER_SEL enum
 */

typedef enum RLC_PERFCOUNTER_SEL {
RLC_PERF_SEL_POWER_FEATURE_0             = 0x00000000,
RLC_PERF_SEL_POWER_FEATURE_1             = 0x00000001,
RLC_PERF_SEL_CP_INTERRUPT                = 0x00000002,
RLC_PERF_SEL_GRBM_INTERRUPT              = 0x00000003,
RLC_PERF_SEL_SPM_INTERRUPT               = 0x00000004,
RLC_PERF_SEL_IH_INTERRUPT                = 0x00000005,
RLC_PERF_SEL_SERDES_COMMAND_WRITE        = 0x00000006,
} RLC_PERFCOUNTER_SEL;

/*
 * RLC_PERFMON_STATE enum
 */

typedef enum RLC_PERFMON_STATE {
RLC_PERFMON_STATE_RESET                  = 0x00000000,
RLC_PERFMON_STATE_ENABLE                 = 0x00000001,
RLC_PERFMON_STATE_DISABLE                = 0x00000002,
RLC_PERFMON_STATE_RESERVED_3             = 0x00000003,
RLC_PERFMON_STATE_RESERVED_4             = 0x00000004,
RLC_PERFMON_STATE_RESERVED_5             = 0x00000005,
RLC_PERFMON_STATE_RESERVED_6             = 0x00000006,
RLC_PERFMON_STATE_ROLLOVER               = 0x00000007,
} RLC_PERFMON_STATE;

/*
 * RSPM_CMD enum
 */

typedef enum RSPM_CMD {
RSPM_CMD_INVALID                         = 0x00000000,
RSPM_CMD_IDLE                            = 0x00000001,
RSPM_CMD_CALIBRATE                       = 0x00000002,
RSPM_CMD_SPM_RESET                       = 0x00000003,
RSPM_CMD_SPM_START                       = 0x00000004,
RSPM_CMD_SPM_STOP                        = 0x00000005,
RSPM_CMD_PERF_RESET                      = 0x00000006,
RSPM_CMD_PERF_SAMPLE                     = 0x00000007,
RSPM_CMD_PROF_START                      = 0x00000008,
RSPM_CMD_PROF_STOP                       = 0x00000009,
RSPM_CMD_FORCE_SAMPLE                    = 0x0000000a,
} RSPM_CMD;

/*******************************************************
 * SPI Enums
 *******************************************************/

/*
 * CLKGATE_BASE_MODE enum
 */

typedef enum CLKGATE_BASE_MODE {
MULT_8                                   = 0x00000000,
MULT_16                                  = 0x00000001,
} CLKGATE_BASE_MODE;

/*
 * CLKGATE_SM_MODE enum
 */

typedef enum CLKGATE_SM_MODE {
ON_SEQ                                   = 0x00000000,
OFF_SEQ                                  = 0x00000001,
PROG_SEQ                                 = 0x00000002,
READ_SEQ                                 = 0x00000003,
SM_MODE_RESERVED                         = 0x00000004,
} CLKGATE_SM_MODE;

/*
 * SPI_FOG_MODE enum
 */

typedef enum SPI_FOG_MODE {
SPI_FOG_NONE                             = 0x00000000,
SPI_FOG_EXP                              = 0x00000001,
SPI_FOG_EXP2                             = 0x00000002,
SPI_FOG_LINEAR                           = 0x00000003,
} SPI_FOG_MODE;

/*
 * SPI_LB_WAVES_SELECT enum
 */

typedef enum SPI_LB_WAVES_SELECT {
HS_GS                                    = 0x00000000,
PS                                       = 0x00000001,
CS_NA                                    = 0x00000002,
SPI_LB_WAVES_RSVD                        = 0x00000003,
} SPI_LB_WAVES_SELECT;

/*
 * SPI_PERFCNT_SEL enum
 */

typedef enum SPI_PERFCNT_SEL {
SPI_PERF_GS_WINDOW_VALID                 = 0x00000001,
SPI_PERF_GS_BUSY                         = 0x00000002,
SPI_PERF_GS_CRAWLER_STALL                = 0x00000003,
SPI_PERF_GS_EVENT_WAVE                   = 0x00000004,
SPI_PERF_GS_WAVE                         = 0x00000005,
SPI_PERF_GS_PERS_UPD_FULL0               = 0x00000006,
SPI_PERF_GS_PERS_UPD_FULL1               = 0x00000007,
SPI_PERF_GS_FIRST_SUBGRP                 = 0x00000008,
SPI_PERF_GS_HS_DEALLOC                   = 0x00000009,
SPI_PERF_GS_NGG_SE_LATE_ALLOC_LIMIT      = 0x0000000a,
SPI_PERF_GS_POS0_STALL                   = 0x0000000b,
SPI_PERF_GS_POS1_STALL                   = 0x0000000c,
SPI_PERF_GS_INDX0_STALL                  = 0x0000000d,
SPI_PERF_GS_INDX1_STALL                  = 0x0000000e,
SPI_PERF_GS_PWS_STALL                    = 0x0000000f,
SPI_PERF_HS_WINDOW_VALID                 = 0x00000015,
SPI_PERF_HS_BUSY                         = 0x00000016,
SPI_PERF_HS_CRAWLER_STALL                = 0x00000017,
SPI_PERF_HS_FIRST_WAVE                   = 0x00000018,
SPI_PERF_HS_OFFCHIP_LDS_STALL            = 0x00000019,
SPI_PERF_HS_EVENT_WAVE                   = 0x0000001a,
SPI_PERF_HS_WAVE                         = 0x0000001b,
SPI_PERF_HS_PERS_UPD_FULL0               = 0x0000001c,
SPI_PERF_HS_PERS_UPD_FULL1               = 0x0000001d,
SPI_PERF_HS_PWS_STALL                    = 0x0000001e,
SPI_PERF_CSGN_WINDOW_VALID               = 0x00000025,
SPI_PERF_CSGN_BUSY                       = 0x00000026,
SPI_PERF_CSGN_NUM_THREADGROUPS           = 0x00000027,
SPI_PERF_CSGN_CRAWLER_STALL              = 0x00000028,
SPI_PERF_CSGN_EVENT_WAVE                 = 0x00000029,
SPI_PERF_CSGN_WAVE                       = 0x0000002a,
SPI_PERF_CSGN_PWS_STALL                  = 0x0000002b,
SPI_PERF_CSN_WINDOW_VALID                = 0x0000002c,
SPI_PERF_CSN_BUSY                        = 0x0000002d,
SPI_PERF_CSN_NUM_THREADGROUPS            = 0x0000002e,
SPI_PERF_CSN_CRAWLER_STALL               = 0x0000002f,
SPI_PERF_CSN_EVENT_WAVE                  = 0x00000030,
SPI_PERF_CSN_WAVE                        = 0x00000031,
SPI_PERF_PS0_WINDOW_VALID                = 0x00000035,
SPI_PERF_PS1_WINDOW_VALID                = 0x00000036,
SPI_PERF_PS2_WINDOW_VALID                = 0x00000037,
SPI_PERF_PS3_WINDOW_VALID                = 0x00000038,
SPI_PERF_PS0_BUSY                        = 0x00000039,
SPI_PERF_PS1_BUSY                        = 0x0000003a,
SPI_PERF_PS2_BUSY                        = 0x0000003b,
SPI_PERF_PS3_BUSY                        = 0x0000003c,
SPI_PERF_PS0_ACTIVE                      = 0x0000003d,
SPI_PERF_PS1_ACTIVE                      = 0x0000003e,
SPI_PERF_PS2_ACTIVE                      = 0x0000003f,
SPI_PERF_PS3_ACTIVE                      = 0x00000040,
SPI_PERF_PS0_DEALLOC                     = 0x00000041,
SPI_PERF_PS1_DEALLOC                     = 0x00000042,
SPI_PERF_PS2_DEALLOC                     = 0x00000043,
SPI_PERF_PS3_DEALLOC                     = 0x00000044,
SPI_PERF_PS0_EVENT_WAVE                  = 0x00000045,
SPI_PERF_PS1_EVENT_WAVE                  = 0x00000046,
SPI_PERF_PS2_EVENT_WAVE                  = 0x00000047,
SPI_PERF_PS3_EVENT_WAVE                  = 0x00000048,
SPI_PERF_PS0_WAVE                        = 0x00000049,
SPI_PERF_PS1_WAVE                        = 0x0000004a,
SPI_PERF_PS2_WAVE                        = 0x0000004b,
SPI_PERF_PS3_WAVE                        = 0x0000004c,
SPI_PERF_PS0_OPT_WAVE                    = 0x0000004d,
SPI_PERF_PS1_OPT_WAVE                    = 0x0000004e,
SPI_PERF_PS2_OPT_WAVE                    = 0x0000004f,
SPI_PERF_PS3_OPT_WAVE                    = 0x00000050,
SPI_PERF_PS0_PRIM_BIN0                   = 0x00000051,
SPI_PERF_PS1_PRIM_BIN0                   = 0x00000052,
SPI_PERF_PS2_PRIM_BIN0                   = 0x00000053,
SPI_PERF_PS3_PRIM_BIN0                   = 0x00000054,
SPI_PERF_PS0_PRIM_BIN1                   = 0x00000055,
SPI_PERF_PS1_PRIM_BIN1                   = 0x00000056,
SPI_PERF_PS2_PRIM_BIN1                   = 0x00000057,
SPI_PERF_PS3_PRIM_BIN1                   = 0x00000058,
SPI_PERF_PS0_CRAWLER_STALL               = 0x00000059,
SPI_PERF_PS1_CRAWLER_STALL               = 0x0000005a,
SPI_PERF_PS2_CRAWLER_STALL               = 0x0000005b,
SPI_PERF_PS3_CRAWLER_STALL               = 0x0000005c,
SPI_PERF_PS_PERS_UPD_FULL0               = 0x0000005d,
SPI_PERF_PS_PERS_UPD_FULL1               = 0x0000005e,
SPI_PERF_PS0_2_WAVE_GROUPS               = 0x0000005f,
SPI_PERF_PS1_2_WAVE_GROUPS               = 0x00000060,
SPI_PERF_PS2_2_WAVE_GROUPS               = 0x00000061,
SPI_PERF_PS3_2_WAVE_GROUPS               = 0x00000062,
SPI_PERF_PS0_WAVE_GROUP_CLOCK_DELAY      = 0x00000063,
SPI_PERF_PS1_WAVE_GROUP_CLOCK_DELAY      = 0x00000064,
SPI_PERF_PS2_WAVE_GROUP_CLOCK_DELAY      = 0x00000065,
SPI_PERF_PS3_WAVE_GROUP_CLOCK_DELAY      = 0x00000066,
SPI_PERF_PS0_WAVE_GROUP_TIMEOUTS         = 0x00000067,
SPI_PERF_PS1_WAVE_GROUP_TIMEOUTS         = 0x00000068,
SPI_PERF_PS2_WAVE_GROUP_TIMEOUTS         = 0x00000069,
SPI_PERF_PS3_WAVE_GROUP_TIMEOUTS         = 0x0000006a,
SPI_PERF_PS_PWS_STALL                    = 0x0000006b,
SPI_PERF_RA_PIPE_REQ_BIN2                = 0x0000008d,
SPI_PERF_RA_TASK_REQ_BIN3                = 0x0000008e,
SPI_PERF_RA_WR_CTL_FULL                  = 0x0000008f,
SPI_PERF_RA_REQ_NO_ALLOC                 = 0x00000090,
SPI_PERF_RA_REQ_NO_ALLOC_PS              = 0x00000091,
SPI_PERF_RA_REQ_NO_ALLOC_GS              = 0x00000092,
SPI_PERF_RA_REQ_NO_ALLOC_HS              = 0x00000093,
SPI_PERF_RA_REQ_NO_ALLOC_CSG             = 0x00000094,
SPI_PERF_RA_REQ_NO_ALLOC_CSN             = 0x00000095,
SPI_PERF_RA_RES_STALL_PS                 = 0x00000096,
SPI_PERF_RA_RES_STALL_GS                 = 0x00000097,
SPI_PERF_RA_RES_STALL_HS                 = 0x00000098,
SPI_PERF_RA_RES_STALL_CSG                = 0x00000099,
SPI_PERF_RA_RES_STALL_CSN                = 0x0000009a,
SPI_PERF_RA_TMP_STALL_PS                 = 0x0000009b,
SPI_PERF_RA_TMP_STALL_GS                 = 0x0000009c,
SPI_PERF_RA_TMP_STALL_HS                 = 0x0000009d,
SPI_PERF_RA_TMP_STALL_CSG                = 0x0000009e,
SPI_PERF_RA_TMP_STALL_CSN                = 0x0000009f,
SPI_PERF_RA_WAVE_SIMD_FULL_PS            = 0x000000a0,
SPI_PERF_RA_WAVE_SIMD_FULL_GS            = 0x000000a1,
SPI_PERF_RA_WAVE_SIMD_FULL_HS            = 0x000000a2,
SPI_PERF_RA_WAVE_SIMD_FULL_CSG           = 0x000000a3,
SPI_PERF_RA_WAVE_SIMD_FULL_CSN           = 0x000000a4,
SPI_PERF_RA_VGPR_SIMD_FULL_PS            = 0x000000a5,
SPI_PERF_RA_VGPR_SIMD_FULL_GS            = 0x000000a6,
SPI_PERF_RA_VGPR_SIMD_FULL_HS            = 0x000000a7,
SPI_PERF_RA_VGPR_SIMD_FULL_CSG           = 0x000000a8,
SPI_PERF_RA_VGPR_SIMD_FULL_CSN           = 0x000000a9,
SPI_PERF_RA_LDS_CU_FULL_PS               = 0x000000aa,
SPI_PERF_RA_LDS_CU_FULL_HS               = 0x000000ab,
SPI_PERF_RA_LDS_CU_FULL_GS               = 0x000000ac,
SPI_PERF_RA_LDS_CU_FULL_CSG              = 0x000000ad,
SPI_PERF_RA_LDS_CU_FULL_CSN              = 0x000000ae,
SPI_PERF_RA_BAR_CU_FULL_HS               = 0x000000af,
SPI_PERF_RA_BAR_CU_FULL_CSG              = 0x000000b0,
SPI_PERF_RA_BAR_CU_FULL_CSN              = 0x000000b1,
SPI_PERF_RA_BULKY_CU_FULL_CSG            = 0x000000b2,
SPI_PERF_RA_BULKY_CU_FULL_CSN            = 0x000000b3,
SPI_PERF_RA_TGLIM_CU_FULL_CSG            = 0x000000b4,
SPI_PERF_RA_TGLIM_CU_FULL_CSN            = 0x000000b5,
SPI_PERF_RA_WVLIM_STALL_PS               = 0x000000b6,
SPI_PERF_RA_WVLIM_STALL_GS               = 0x000000b7,
SPI_PERF_RA_WVLIM_STALL_HS               = 0x000000b8,
SPI_PERF_RA_WVLIM_STALL_CSG              = 0x000000b9,
SPI_PERF_RA_WVLIM_STALL_CSN              = 0x000000ba,
SPI_PERF_RA_GS_LOCK                      = 0x000000bb,
SPI_PERF_RA_HS_LOCK                      = 0x000000bc,
SPI_PERF_RA_CSG_LOCK                     = 0x000000bd,
SPI_PERF_RA_CSN_LOCK                     = 0x000000be,
SPI_PERF_RA_RSV_UPD                      = 0x000000bf,
SPI_PERF_RA_PRE_ALLOC_STALL              = 0x000000c0,
SPI_PERF_RA_GFX_UNDER_TUNNEL             = 0x000000c1,
SPI_PERF_RA_CSC_UNDER_TUNNEL             = 0x000000c2,
SPI_PERF_RA_WVALLOC_STALL                = 0x000000c3,
SPI_PERF_RA_ACCUM0_SIMD_FULL_PS          = 0x000000c4,
SPI_PERF_RA_ACCUM1_SIMD_FULL_PS          = 0x000000c5,
SPI_PERF_RA_ACCUM2_SIMD_FULL_PS          = 0x000000c6,
SPI_PERF_RA_ACCUM3_SIMD_FULL_PS          = 0x000000c7,
SPI_PERF_RA_ACCUM0_SIMD_FULL_GS          = 0x000000c8,
SPI_PERF_RA_ACCUM1_SIMD_FULL_GS          = 0x000000c9,
SPI_PERF_RA_ACCUM2_SIMD_FULL_GS          = 0x000000ca,
SPI_PERF_RA_ACCUM3_SIMD_FULL_GS          = 0x000000cb,
SPI_PERF_RA_ACCUM0_SIMD_FULL_HS          = 0x000000cc,
SPI_PERF_RA_ACCUM1_SIMD_FULL_HS          = 0x000000cd,
SPI_PERF_RA_ACCUM2_SIMD_FULL_HS          = 0x000000ce,
SPI_PERF_RA_ACCUM3_SIMD_FULL_HS          = 0x000000cf,
SPI_PERF_RA_ACCUM0_SIMD_FULL_CSG         = 0x000000d0,
SPI_PERF_RA_ACCUM1_SIMD_FULL_CSG         = 0x000000d1,
SPI_PERF_RA_ACCUM2_SIMD_FULL_CSG         = 0x000000d2,
SPI_PERF_RA_ACCUM3_SIMD_FULL_CSG         = 0x000000d3,
SPI_PERF_RA_ACCUM0_SIMD_FULL_CSN         = 0x000000d4,
SPI_PERF_RA_ACCUM1_SIMD_FULL_CSN         = 0x000000d5,
SPI_PERF_RA_ACCUM2_SIMD_FULL_CSN         = 0x000000d6,
SPI_PERF_RA_ACCUM3_SIMD_FULL_CSN         = 0x000000d7,
SPI_PERF_EXP_ARB_COL_CNT                 = 0x000000d8,
SPI_PERF_EXP_ARB_POS_CNT                 = 0x000000d9,
SPI_PERF_EXP_ARB_GDS_CNT                 = 0x000000da,
SPI_PERF_EXP_ARB_IDX_CNT                 = 0x000000db,
SPI_PERF_EXP_WITH_CONFLICT               = 0x000000dc,
SPI_PERF_EXP_WITH_CONFLICT_CLEAR         = 0x000000dd,
SPI_PERF_GS_EXP_DONE                     = 0x000000de,
SPI_PERF_PS_EXP_DONE                     = 0x000000df,
SPI_PERF_PS_EXP_ARB_CONFLICT             = 0x000000e0,
SPI_PERF_PS_EXP_ALLOC                    = 0x000000e1,
SPI_PERF_PS0_WAVEID_STARVED              = 0x000000e2,
SPI_PERF_PS1_WAVEID_STARVED              = 0x000000e3,
SPI_PERF_PS2_WAVEID_STARVED              = 0x000000e4,
SPI_PERF_PS3_WAVEID_STARVED              = 0x000000e5,
SPI_PERF_PS0_EXP_ALLOC_WITH_CONFLICT     = 0x000000e6,
SPI_PERF_PS1_EXP_ALLOC_WITH_CONFLICT     = 0x000000e7,
SPI_PERF_PS2_EXP_ALLOC_WITH_CONFLICT     = 0x000000e8,
SPI_PERF_PS3_EXP_ALLOC_WITH_CONFLICT     = 0x000000e9,
SPI_PERF_NUM_PS_COL_SA0SQ0_EXPORTS       = 0x000000ea,
SPI_PERF_NUM_PS_COL_SA0SQ1_EXPORTS       = 0x000000eb,
SPI_PERF_NUM_PS_COL_SA1SQ0_EXPORTS       = 0x000000ec,
SPI_PERF_NUM_PS_COL_SA1SQ1_EXPORTS       = 0x000000ed,
SPI_PERF_NUM_POS_SA0SQ0_EXPORTS          = 0x000000ee,
SPI_PERF_NUM_POS_SA0SQ1_EXPORTS          = 0x000000ef,
SPI_PERF_NUM_POS_SA1SQ0_EXPORTS          = 0x000000f0,
SPI_PERF_NUM_POS_SA1SQ1_EXPORTS          = 0x000000f1,
SPI_PERF_NUM_GDS_SA0SQ0_EXPORTS          = 0x000000f2,
SPI_PERF_NUM_GDS_SA0SQ1_EXPORTS          = 0x000000f3,
SPI_PERF_NUM_GDS_SA1SQ0_EXPORTS          = 0x000000f4,
SPI_PERF_NUM_GDS_SA1SQ1_EXPORTS          = 0x000000f5,
SPI_PERF_NUM_EXPGRANT_EXPORTS            = 0x000000f6,
SPI_PERF_PIX_ALLOC_PEND_CNT              = 0x000000fd,
SPI_PERF_EXPORT_SCB0_STALL               = 0x000000fe,
SPI_PERF_EXPORT_SCB1_STALL               = 0x000000ff,
SPI_PERF_EXPORT_SCB2_STALL               = 0x00000100,
SPI_PERF_EXPORT_SCB3_STALL               = 0x00000101,
SPI_PERF_EXPORT_DB0_STALL                = 0x00000102,
SPI_PERF_EXPORT_DB1_STALL                = 0x00000103,
SPI_PERF_EXPORT_DB2_STALL                = 0x00000104,
SPI_PERF_EXPORT_DB3_STALL                = 0x00000105,
SPI_PERF_EXPORT_DB4_STALL                = 0x00000106,
SPI_PERF_EXPORT_DB5_STALL                = 0x00000107,
SPI_PERF_EXPORT_DB6_STALL                = 0x00000108,
SPI_PERF_EXPORT_DB7_STALL                = 0x00000109,
SPI_PERF_GS_NGG_SE_SEND_GS_ALLOC         = 0x0000010a,
SPI_PERF_GS_NGG_STALL_MSG_VAL            = 0x0000010b,
SPI_PERF_SWC_PS_WR                       = 0x0000010c,
SPI_PERF_SWC_GS_WR                       = 0x0000010d,
SPI_PERF_SWC_HS_WR                       = 0x0000010e,
SPI_PERF_SWC_CSGN_WR                     = 0x0000010f,
SPI_PERF_SWC_CSN_WR                      = 0x00000110,
SPI_PERF_VWC_PS_WR                       = 0x00000111,
SPI_PERF_VWC_ES_WR                       = 0x00000112,
SPI_PERF_VWC_GS_WR                       = 0x00000113,
SPI_PERF_VWC_LS_WR                       = 0x00000114,
SPI_PERF_VWC_HS_WR                       = 0x00000115,
SPI_PERF_VWC_CSGN_WR                     = 0x00000116,
SPI_PERF_VWC_CSN_WR                      = 0x00000117,
SPI_PERF_EXP_THROT_UPSTEP                = 0x00000118,
SPI_PERF_EXP_THROT_DOWNSTEP              = 0x00000119,
SPI_PERF_EXP_THROT_CAUSALITY_DETECTED    = 0x0000011a,
SPI_PERF_BUSY                            = 0x0000011b,
} SPI_PERFCNT_SEL;

/*
 * SPI_PNT_SPRITE_OVERRIDE enum
 */

typedef enum SPI_PNT_SPRITE_OVERRIDE {
SPI_PNT_SPRITE_SEL_0                     = 0x00000000,
SPI_PNT_SPRITE_SEL_1                     = 0x00000001,
SPI_PNT_SPRITE_SEL_S                     = 0x00000002,
SPI_PNT_SPRITE_SEL_T                     = 0x00000003,
SPI_PNT_SPRITE_SEL_NONE                  = 0x00000004,
} SPI_PNT_SPRITE_OVERRIDE;

/*
 * SPI_PS_LDS_GROUP_SIZE enum
 */

typedef enum SPI_PS_LDS_GROUP_SIZE {
SPI_PS_LDS_GROUP_1                       = 0x00000000,
SPI_PS_LDS_GROUP_2                       = 0x00000001,
SPI_PS_LDS_GROUP_4                       = 0x00000002,
} SPI_PS_LDS_GROUP_SIZE;

/*
 * SPI_SAMPLE_CNTL enum
 */

typedef enum SPI_SAMPLE_CNTL {
CENTROIDS_ONLY                           = 0x00000000,
CENTERS_ONLY                             = 0x00000001,
CENTROIDS_AND_CENTERS                    = 0x00000002,
UNDEF                                    = 0x00000003,
} SPI_SAMPLE_CNTL;

/*
 * SPI_SHADER_EX_FORMAT enum
 */

typedef enum SPI_SHADER_EX_FORMAT {
SPI_SHADER_ZERO                          = 0x00000000,
SPI_SHADER_32_R                          = 0x00000001,
SPI_SHADER_32_GR                         = 0x00000002,
SPI_SHADER_32_AR                         = 0x00000003,
SPI_SHADER_FP16_ABGR                     = 0x00000004,
SPI_SHADER_UNORM16_ABGR                  = 0x00000005,
SPI_SHADER_SNORM16_ABGR                  = 0x00000006,
SPI_SHADER_UINT16_ABGR                   = 0x00000007,
SPI_SHADER_SINT16_ABGR                   = 0x00000008,
SPI_SHADER_32_ABGR                       = 0x00000009,
} SPI_SHADER_EX_FORMAT;

/*
 * SPI_SHADER_FORMAT enum
 */

typedef enum SPI_SHADER_FORMAT {
SPI_SHADER_NONE                          = 0x00000000,
SPI_SHADER_1COMP                         = 0x00000001,
SPI_SHADER_2COMP                         = 0x00000002,
SPI_SHADER_4COMPRESS                     = 0x00000003,
SPI_SHADER_4COMP                         = 0x00000004,
} SPI_SHADER_FORMAT;

/*******************************************************
 * SQ Enums
 *******************************************************/

/*
 * SH_MEM_ADDRESS_MODE enum
 */

typedef enum SH_MEM_ADDRESS_MODE {
SH_MEM_ADDRESS_MODE_64                   = 0x00000000,
SH_MEM_ADDRESS_MODE_32                   = 0x00000001,
} SH_MEM_ADDRESS_MODE;

/*
 * SH_MEM_ALIGNMENT_MODE enum
 */

typedef enum SH_MEM_ALIGNMENT_MODE {
SH_MEM_ALIGNMENT_MODE_DWORD              = 0x00000000,
SH_MEM_ALIGNMENT_MODE_DWORD_STRICT       = 0x00000001,
SH_MEM_ALIGNMENT_MODE_STRICT             = 0x00000002,
SH_MEM_ALIGNMENT_MODE_UNALIGNED          = 0x00000003,
} SH_MEM_ALIGNMENT_MODE;

/*
 * SQG_PERF_SEL enum
 */

typedef enum SQG_PERF_SEL {
SQG_PERF_SEL_NONE                        = 0x00000000,
SQG_PERF_SEL_MSG_BUS_BUSY                = 0x00000001,
SQG_PERF_SEL_EXP_REQ0_BUS_BUSY           = 0x00000002,
SQG_PERF_SEL_EXP_REQ1_BUS_BUSY           = 0x00000003,
SQG_PERF_SEL_EXP_BUS0_BUSY               = 0x00000004,
SQG_PERF_SEL_EXP_BUS1_BUSY               = 0x00000005,
SQG_PERF_SEL_TTRACE_REQS                 = 0x00000006,
SQG_PERF_SEL_TTRACE_INFLIGHT_REQS        = 0x00000007,
SQG_PERF_SEL_TTRACE_STALL                = 0x00000008,
SQG_PERF_SEL_TTRACE_LOST_PACKETS         = 0x00000009,
SQG_PERF_SEL_WAVES_INITIAL_PREFETCH      = 0x0000000a,
SQG_PERF_SEL_EVENTS                      = 0x0000000b,
SQG_PERF_SEL_WAVES_RESTORED              = 0x0000000c,
SQG_PERF_SEL_WAVES_SAVED                 = 0x0000000d,
SQG_PERF_SEL_ACCUM_PREV                  = 0x0000000e,
SQG_PERF_SEL_CYCLES                      = 0x0000000f,
SQG_PERF_SEL_BUSY_CYCLES                 = 0x00000010,
SQG_PERF_SEL_WAVE_CYCLES                 = 0x00000011,
SQG_PERF_SEL_MSG                         = 0x00000012,
SQG_PERF_SEL_MSG_INTERRUPT               = 0x00000013,
SQG_PERF_SEL_WAVES                       = 0x00000014,
SQG_PERF_SEL_WAVES_32                    = 0x00000015,
SQG_PERF_SEL_WAVES_64                    = 0x00000016,
SQG_PERF_SEL_LEVEL_WAVES                 = 0x00000017,
SQG_PERF_SEL_ITEMS                       = 0x00000018,
SQG_PERF_SEL_WAVE32_ITEMS                = 0x00000019,
SQG_PERF_SEL_WAVE64_ITEMS                = 0x0000001a,
SQG_PERF_SEL_PS_QUADS                    = 0x0000001b,
SQG_PERF_SEL_WAVES_EQ_64                 = 0x0000001c,
SQG_PERF_SEL_WAVES_EQ_32                 = 0x0000001d,
SQG_PERF_SEL_WAVES_LT_64                 = 0x0000001e,
SQG_PERF_SEL_WAVES_LT_48                 = 0x0000001f,
SQG_PERF_SEL_WAVES_LT_32                 = 0x00000020,
SQG_PERF_SEL_WAVES_LT_16                 = 0x00000021,
SQG_PERF_SEL_DUMMY_LAST                  = 0x00000022,
} SQG_PERF_SEL;

/*
 * SQ_CAC_POWER_SEL enum
 */

typedef enum SQ_CAC_POWER_SEL {
SQ_CAC_POWER_VALU                        = 0x00000000,
SQ_CAC_POWER_VALU0                       = 0x00000001,
SQ_CAC_POWER_VALU1                       = 0x00000002,
SQ_CAC_POWER_VALU2                       = 0x00000003,
SQ_CAC_POWER_GPR_RD                      = 0x00000004,
SQ_CAC_POWER_GPR_WR                      = 0x00000005,
SQ_CAC_POWER_LDS_BUSY                    = 0x00000006,
SQ_CAC_POWER_ALU_BUSY                    = 0x00000007,
SQ_CAC_POWER_TEX_BUSY                    = 0x00000008,
} SQ_CAC_POWER_SEL;

/*
 * SQ_EDC_INFO_SOURCE enum
 */

typedef enum SQ_EDC_INFO_SOURCE {
SQ_EDC_INFO_SOURCE_INVALID               = 0x00000000,
SQ_EDC_INFO_SOURCE_INST                  = 0x00000001,
SQ_EDC_INFO_SOURCE_SGPR                  = 0x00000002,
SQ_EDC_INFO_SOURCE_VGPR                  = 0x00000003,
SQ_EDC_INFO_SOURCE_LDS                   = 0x00000004,
SQ_EDC_INFO_SOURCE_GDS                   = 0x00000005,
SQ_EDC_INFO_SOURCE_TA                    = 0x00000006,
} SQ_EDC_INFO_SOURCE;

/*
 * SQ_IBUF_ST enum
 */

typedef enum SQ_IBUF_ST {
SQ_IBUF_IB_IDLE                          = 0x00000000,
SQ_IBUF_IB_INI_WAIT_GNT                  = 0x00000001,
SQ_IBUF_IB_INI_WAIT_DRET                 = 0x00000002,
SQ_IBUF_IB_LE_4DW                        = 0x00000003,
SQ_IBUF_IB_WAIT_DRET                     = 0x00000004,
SQ_IBUF_IB_EMPTY_WAIT_DRET               = 0x00000005,
SQ_IBUF_IB_DRET                          = 0x00000006,
SQ_IBUF_IB_EMPTY_WAIT_GNT                = 0x00000007,
} SQ_IBUF_ST;

/*
 * SQ_IMG_FILTER_TYPE enum
 */

typedef enum SQ_IMG_FILTER_TYPE {
SQ_IMG_FILTER_MODE_BLEND                 = 0x00000000,
SQ_IMG_FILTER_MODE_MIN                   = 0x00000001,
SQ_IMG_FILTER_MODE_MAX                   = 0x00000002,
} SQ_IMG_FILTER_TYPE;

/*
 * SQ_IND_CMD_CMD enum
 */

typedef enum SQ_IND_CMD_CMD {
SQ_IND_CMD_CMD_NULL                      = 0x00000000,
SQ_IND_CMD_CMD_SETHALT                   = 0x00000001,
SQ_IND_CMD_CMD_SAVECTX                   = 0x00000002,
SQ_IND_CMD_CMD_KILL                      = 0x00000003,
SQ_IND_CMD_CMD_TRAP_AFTER_INST           = 0x00000004,
SQ_IND_CMD_CMD_TRAP                      = 0x00000005,
SQ_IND_CMD_CMD_SET_SPI_PRIO              = 0x00000006,
SQ_IND_CMD_CMD_SETFATALHALT              = 0x00000007,
SQ_IND_CMD_CMD_SINGLE_STEP               = 0x00000008,
} SQ_IND_CMD_CMD;

/*
 * SQ_IND_CMD_MODE enum
 */

typedef enum SQ_IND_CMD_MODE {
SQ_IND_CMD_MODE_SINGLE                   = 0x00000000,
SQ_IND_CMD_MODE_BROADCAST                = 0x00000001,
SQ_IND_CMD_MODE_BROADCAST_QUEUE          = 0x00000002,
SQ_IND_CMD_MODE_BROADCAST_PIPE           = 0x00000003,
SQ_IND_CMD_MODE_BROADCAST_ME             = 0x00000004,
} SQ_IND_CMD_MODE;

/*
 * SQ_INST_STR_ST enum
 */

typedef enum SQ_INST_STR_ST {
SQ_INST_STR_IB_WAVE_NORML                = 0x00000000,
SQ_INST_STR_IB_WAVE2ID_NORMAL_INST_AV    = 0x00000001,
SQ_INST_STR_IB_WAVE_INTERNAL_INST_AV     = 0x00000002,
SQ_INST_STR_IB_WAVE_INST_SKIP_AV         = 0x00000003,
SQ_INST_STR_IB_WAVE_NOP_SLEEP_WAIT       = 0x00000004,
SQ_INST_STR_IB_WAVE_PC_FROM_SGPR_MSG_WAIT = 0x00000005,
} SQ_INST_STR_ST;

/*
 * SQ_INST_TYPE enum
 */

typedef enum SQ_INST_TYPE {
SQ_INST_TYPE_VALU                        = 0x00000000,
SQ_INST_TYPE_SCALAR                      = 0x00000001,
SQ_INST_TYPE_TEX                         = 0x00000002,
SQ_INST_TYPE_LDS                         = 0x00000003,
SQ_INST_TYPE_LDS_DIRECT                  = 0x00000004,
SQ_INST_TYPE_EXP                         = 0x00000005,
SQ_INST_TYPE_MSG                         = 0x00000006,
SQ_INST_TYPE_BARRIER                     = 0x00000007,
SQ_INST_TYPE_BRANCH_NOT_TAKEN            = 0x00000008,
SQ_INST_TYPE_BRANCH_TAKEN                = 0x00000009,
SQ_INST_TYPE_JUMP                        = 0x0000000a,
SQ_INST_TYPE_OTHER                       = 0x0000000b,
SQ_INST_TYPE_NONE                        = 0x0000000c,
} SQ_INST_TYPE;

/*
 * SQ_LLC_CTL enum
 */

typedef enum SQ_LLC_CTL {
SQ_LLC_0                                 = 0x00000000,
SQ_LLC_1                                 = 0x00000001,
SQ_LLC_RSVD_2                            = 0x00000002,
SQ_LLC_BYPASS                            = 0x00000003,
} SQ_LLC_CTL;

/*
 * SQ_NO_INST_ISSUE enum
 */

typedef enum SQ_NO_INST_ISSUE {
SQ_NO_INST_ISSUE_NO_INSTS                = 0x00000000,
SQ_NO_INST_ISSUE_ALU_DEP                 = 0x00000001,
SQ_NO_INST_ISSUE_S_WAITCNT               = 0x00000002,
SQ_NO_INST_ISSUE_NO_ARB_WIN              = 0x00000003,
SQ_NO_INST_ISSUE_SLEEP_WAIT              = 0x00000004,
SQ_NO_INST_ISSUE_BARRIER_WAIT            = 0x00000005,
SQ_NO_INST_ISSUE_OTHER                   = 0x00000006,
} SQ_NO_INST_ISSUE;

/*
 * SQ_OOB_SELECT enum
 */

typedef enum SQ_OOB_SELECT {
SQ_OOB_INDEX_AND_OFFSET                  = 0x00000000,
SQ_OOB_INDEX_ONLY                        = 0x00000001,
SQ_OOB_NUM_RECORDS_0                     = 0x00000002,
SQ_OOB_COMPLETE                          = 0x00000003,
} SQ_OOB_SELECT;

/*
 * SQ_PERF_SEL enum
 */

typedef enum SQ_PERF_SEL {
SQ_PERF_SEL_NONE                         = 0x00000000,
SQ_PERF_SEL_ACCUM_PREV                   = 0x00000001,
SQ_PERF_SEL_CYCLES                       = 0x00000002,
SQ_PERF_SEL_BUSY_CYCLES                  = 0x00000003,
SQ_PERF_SEL_WAVES                        = 0x00000004,
SQ_PERF_SEL_WAVES_32                     = 0x00000005,
SQ_PERF_SEL_WAVES_64                     = 0x00000006,
SQ_PERF_SEL_LEVEL_WAVES                  = 0x00000007,
SQ_PERF_SEL_ITEMS                        = 0x00000008,
SQ_PERF_SEL_WAVE32_ITEMS                 = 0x00000009,
SQ_PERF_SEL_WAVE64_ITEMS                 = 0x0000000a,
SQ_PERF_SEL_PS_QUADS                     = 0x0000000b,
SQ_PERF_SEL_EVENTS                       = 0x0000000c,
SQ_PERF_SEL_WAVES_EQ_32                  = 0x0000000d,
SQ_PERF_SEL_WAVES_EQ_64                  = 0x0000000e,
SQ_PERF_SEL_WAVES_LT_64                  = 0x0000000f,
SQ_PERF_SEL_WAVES_LT_48                  = 0x00000010,
SQ_PERF_SEL_WAVES_LT_32                  = 0x00000011,
SQ_PERF_SEL_WAVES_LT_16                  = 0x00000012,
SQ_PERF_SEL_WAVES_RESTORED               = 0x00000013,
SQ_PERF_SEL_WAVES_SAVED                  = 0x00000014,
SQ_PERF_SEL_MSG                          = 0x00000015,
SQ_PERF_SEL_MSG_INTERRUPT                = 0x00000016,
SQ_PERF_SEL_WAVES_INITIAL_PREFETCH       = 0x00000017,
SQ_PERF_SEL_WAVE_CYCLES                  = 0x00000018,
SQ_PERF_SEL_WAVE_READY                   = 0x00000019,
SQ_PERF_SEL_WAIT_INST_ANY                = 0x0000001a,
SQ_PERF_SEL_WAIT_INST_VALU               = 0x0000001b,
SQ_PERF_SEL_WAIT_INST_SCA                = 0x0000001c,
SQ_PERF_SEL_WAIT_INST_LDS                = 0x0000001d,
SQ_PERF_SEL_WAIT_INST_TEX                = 0x0000001e,
SQ_PERF_SEL_WAIT_INST_FLAT               = 0x0000001f,
SQ_PERF_SEL_WAIT_INST_VMEM               = 0x00000020,
SQ_PERF_SEL_WAIT_INST_EXP_GDS            = 0x00000021,
SQ_PERF_SEL_WAIT_INST_BR_MSG             = 0x00000022,
SQ_PERF_SEL_WAIT_ANY                     = 0x00000023,
SQ_PERF_SEL_WAIT_CNT_ANY                 = 0x00000024,
SQ_PERF_SEL_WAIT_CNT_VMVS                = 0x00000025,
SQ_PERF_SEL_WAIT_CNT_LGKM                = 0x00000026,
SQ_PERF_SEL_WAIT_CNT_EXP                 = 0x00000027,
SQ_PERF_SEL_WAIT_TTRACE                  = 0x00000028,
SQ_PERF_SEL_WAIT_IFETCH                  = 0x00000029,
SQ_PERF_SEL_WAIT_BARRIER                 = 0x0000002a,
SQ_PERF_SEL_WAIT_EXP_ALLOC               = 0x0000002b,
SQ_PERF_SEL_WAIT_SLEEP                   = 0x0000002c,
SQ_PERF_SEL_WAIT_DELAY_ALU               = 0x0000002d,
SQ_PERF_SEL_WAIT_DEPCTR                  = 0x0000002e,
SQ_PERF_SEL_WAIT_OTHER                   = 0x0000002f,
SQ_PERF_SEL_INSTS_ALL                    = 0x00000030,
SQ_PERF_SEL_INSTS_BRANCH                 = 0x00000031,
SQ_PERF_SEL_INSTS_CBRANCH_NOT_TAKEN      = 0x00000032,
SQ_PERF_SEL_INSTS_CBRANCH_TAKEN          = 0x00000033,
SQ_PERF_SEL_INSTS_CBRANCH_TAKEN_HIT_IS   = 0x00000034,
SQ_PERF_SEL_INSTS_EXP_GDS                = 0x00000035,
SQ_PERF_SEL_INSTS_GDS                    = 0x00000036,
SQ_PERF_SEL_INSTS_EXP                    = 0x00000037,
SQ_PERF_SEL_INSTS_FLAT                   = 0x00000038,
SQ_PERF_SEL_INSTS_LDS                    = 0x00000039,
SQ_PERF_SEL_INSTS_SALU                   = 0x0000003a,
SQ_PERF_SEL_INSTS_SMEM                   = 0x0000003b,
SQ_PERF_SEL_INSTS_SMEM_NORM              = 0x0000003c,
SQ_PERF_SEL_INSTS_SENDMSG                = 0x0000003d,
SQ_PERF_SEL_INSTS_VALU                   = 0x0000003e,
SQ_PERF_SEL_INSTS_VALU_TRANS32           = 0x0000003f,
SQ_PERF_SEL_INSTS_VALU_NO_COEXEC         = 0x00000040,
SQ_PERF_SEL_INSTS_TEX                    = 0x00000041,
SQ_PERF_SEL_INSTS_TEX_LOAD               = 0x00000042,
SQ_PERF_SEL_INSTS_TEX_STORE              = 0x00000043,
SQ_PERF_SEL_INSTS_DELAY_ALU              = 0x00000044,
SQ_PERF_SEL_INSTS_INTERNAL               = 0x00000045,
SQ_PERF_SEL_INSTS_WAVE32                 = 0x00000046,
SQ_PERF_SEL_INSTS_WAVE32_FLAT            = 0x00000047,
SQ_PERF_SEL_INSTS_WAVE32_LDS             = 0x00000048,
SQ_PERF_SEL_INSTS_WAVE32_VALU            = 0x00000049,
SQ_PERF_SEL_WAVE32_INSTS_EXP_GDS         = 0x0000004a,
SQ_PERF_SEL_INSTS_WAVE32_VALU_TRANS32    = 0x0000004b,
SQ_PERF_SEL_INSTS_WAVE32_VALU_NO_COEXEC  = 0x0000004c,
SQ_PERF_SEL_INSTS_WAVE32_TEX             = 0x0000004d,
SQ_PERF_SEL_INSTS_WAVE32_TEX_LOAD        = 0x0000004e,
SQ_PERF_SEL_INSTS_WAVE32_TEX_STORE       = 0x0000004f,
SQ_PERF_SEL_ITEM_CYCLES_VALU             = 0x00000050,
SQ_PERF_SEL_VALU_READWRITELANE_CYCLES    = 0x00000051,
SQ_PERF_SEL_WAVE32_INSTS                 = 0x00000052,
SQ_PERF_SEL_WAVE64_INSTS                 = 0x00000053,
SQ_PERF_SEL_INSTS_VALU_EXEC_SKIPPED      = 0x00000054,
SQ_PERF_SEL_WAVE64_HALF_SKIP             = 0x00000055,
SQ_PERF_SEL_INST_LEVEL_EXP               = 0x00000056,
SQ_PERF_SEL_INST_LEVEL_GDS               = 0x00000057,
SQ_PERF_SEL_INST_LEVEL_LDS               = 0x00000058,
SQ_PERF_SEL_INST_LEVEL_SMEM              = 0x00000059,
SQ_PERF_SEL_INST_LEVEL_TEX_LOAD          = 0x0000005a,
SQ_PERF_SEL_INST_LEVEL_TEX_STORE         = 0x0000005b,
SQ_PERF_SEL_IFETCH_REQS                  = 0x0000005c,
SQ_PERF_SEL_IFETCH_LEVEL                 = 0x0000005d,
SQ_PERF_SEL_LDS_DIRECT_CMD_FIFO_FULL_STALL = 0x0000005e,
SQ_PERF_SEL_VALU_SGATHER_STALL           = 0x0000005f,
SQ_PERF_SEL_VALU_FWD_BUFFER_FULL_STALL   = 0x00000060,
SQ_PERF_SEL_VALU_SGPR_RD_FIFO_FULL_STALL = 0x00000061,
SQ_PERF_SEL_VALU_SGATHER_FULL_STALL      = 0x00000062,
SQ_PERF_SEL_SALU_SGATHER_STALL           = 0x00000063,
SQ_PERF_SEL_SALU_SGPR_RD_FIFO_FULL_STALL = 0x00000064,
SQ_PERF_SEL_SALU_GATHER_FULL_STALL       = 0x00000065,
SQ_PERF_SEL_SMEM_DCACHE_FIFO_FULL_STALL  = 0x00000066,
SQ_PERF_SEL_INST_CYCLES_VALU             = 0x00000067,
SQ_PERF_SEL_INST_CYCLES_VALU_TRANS32     = 0x00000068,
SQ_PERF_SEL_INST_CYCLES_VALU_NO_COEXEC   = 0x00000069,
SQ_PERF_SEL_INST_CYCLES_VMEM             = 0x0000006a,
SQ_PERF_SEL_INST_CYCLES_VMEM_LOAD        = 0x0000006b,
SQ_PERF_SEL_INST_CYCLES_VMEM_STORE       = 0x0000006c,
SQ_PERF_SEL_INST_CYCLES_LDS              = 0x0000006d,
SQ_PERF_SEL_INST_CYCLES_TEX              = 0x0000006e,
SQ_PERF_SEL_INST_CYCLES_FLAT             = 0x0000006f,
SQ_PERF_SEL_INST_CYCLES_EXP_GDS          = 0x00000070,
SQ_PERF_SEL_INST_CYCLES_EXP              = 0x00000071,
SQ_PERF_SEL_INST_CYCLES_GDS              = 0x00000072,
SQ_PERF_SEL_VALU_STARVE                  = 0x00000073,
SQ_PERF_SEL_VMEM_ARB_FIFO_FULL           = 0x00000074,
SQ_PERF_SEL_MSG_FIFO_FULL_STALL          = 0x00000075,
SQ_PERF_SEL_EXP_REQ_FIFO_FULL            = 0x00000076,
SQ_PERF_SEL_VMEM_BUS_ACTIVE              = 0x00000077,
SQ_PERF_SEL_VMEM_BUS_STALL               = 0x00000078,
SQ_PERF_SEL_VMEM_BUS_STALL_TA_ADDR_FIFO_FULL = 0x00000079,
SQ_PERF_SEL_VMEM_BUS_STALL_TA_CMD_FIFO_FULL = 0x0000007a,
SQ_PERF_SEL_VMEM_BUS_STALL_LDS_ADDR_FIFO_FULL = 0x0000007b,
SQ_PERF_SEL_VMEM_BUS_STALL_LDS_CMD_FIFO_FULL = 0x0000007c,
SQ_PERF_SEL_VMEM_STARVE_TA_ADDR_EMPTY    = 0x0000007d,
SQ_PERF_SEL_VMEM_STARVE_LDS_ADDR_EMPTY   = 0x0000007e,
SQ_PERF_SEL_SALU_PIPE_STALL              = 0x0000007f,
SQ_PERF_SEL_SMEM_DCACHE_RETURN_CYCLES    = 0x00000080,
SQ_PERF_SEL_MSG_BUS_BUSY                 = 0x00000081,
SQ_PERF_SEL_EXP_REQ_BUS_STALL            = 0x00000082,
SQ_PERF_SEL_EXP_REQ0_BUS_BUSY            = 0x00000083,
SQ_PERF_SEL_EXP_REQ1_BUS_BUSY            = 0x00000084,
SQ_PERF_SEL_EXP_BUS0_BUSY                = 0x00000085,
SQ_PERF_SEL_EXP_BUS1_BUSY                = 0x00000086,
SQ_PERF_SEL_INST_CACHE_REQ_STALL         = 0x00000087,
SQ_PERF_SEL_USER0                        = 0x00000088,
SQ_PERF_SEL_USER1                        = 0x00000089,
SQ_PERF_SEL_USER2                        = 0x0000008a,
SQ_PERF_SEL_USER3                        = 0x0000008b,
SQ_PERF_SEL_USER4                        = 0x0000008c,
SQ_PERF_SEL_USER5                        = 0x0000008d,
SQ_PERF_SEL_USER6                        = 0x0000008e,
SQ_PERF_SEL_USER7                        = 0x0000008f,
SQ_PERF_SEL_USER8                        = 0x00000090,
SQ_PERF_SEL_USER9                        = 0x00000091,
SQ_PERF_SEL_USER10                       = 0x00000092,
SQ_PERF_SEL_USER11                       = 0x00000093,
SQ_PERF_SEL_USER12                       = 0x00000094,
SQ_PERF_SEL_USER13                       = 0x00000095,
SQ_PERF_SEL_USER14                       = 0x00000096,
SQ_PERF_SEL_USER15                       = 0x00000097,
SQ_PERF_SEL_USER_LEVEL0                  = 0x00000098,
SQ_PERF_SEL_USER_LEVEL1                  = 0x00000099,
SQ_PERF_SEL_USER_LEVEL2                  = 0x0000009a,
SQ_PERF_SEL_USER_LEVEL3                  = 0x0000009b,
SQ_PERF_SEL_USER_LEVEL4                  = 0x0000009c,
SQ_PERF_SEL_USER_LEVEL5                  = 0x0000009d,
SQ_PERF_SEL_USER_LEVEL6                  = 0x0000009e,
SQ_PERF_SEL_USER_LEVEL7                  = 0x0000009f,
SQ_PERF_SEL_USER_LEVEL8                  = 0x000000a0,
SQ_PERF_SEL_USER_LEVEL9                  = 0x000000a1,
SQ_PERF_SEL_USER_LEVEL10                 = 0x000000a2,
SQ_PERF_SEL_USER_LEVEL11                 = 0x000000a3,
SQ_PERF_SEL_USER_LEVEL12                 = 0x000000a4,
SQ_PERF_SEL_USER_LEVEL13                 = 0x000000a5,
SQ_PERF_SEL_USER_LEVEL14                 = 0x000000a6,
SQ_PERF_SEL_USER_LEVEL15                 = 0x000000a7,
SQ_PERF_SEL_VALU_RETURN_SDST             = 0x000000a8,
SQ_PERF_SEL_VMEM_VGPR_READ_STALLED_BY_EXPORT = 0x000000a9,
SQ_PERF_SEL_INSTS_VALU_TRANS             = 0x000000aa,
SQ_PERF_SEL_INSTS_LDS_DIRECT_LOAD        = 0x000000ab,
SQ_PERF_SEL_INSTS_LDS_PARAM_LOAD         = 0x000000ac,
SQ_PERF_SEL_INSTS_WAVE32_LDS_PARAM_LOAD  = 0x000000ad,
SQ_PERF_SEL_INSTS_VALU_ONE_CYCLE_WAVE64  = 0x000000ae,
SQ_PERF_SEL_INSTS_VALU_VINTERP           = 0x000000af,
SQ_PERF_SEL_INSTS_VALU_WAVE32_VINTERP    = 0x000000b0,
SQ_PERF_SEL_OVERFLOW_PREV                = 0x000000b1,
SQ_PERF_SEL_INSTS_DUAL_VALU_WAVE32       = 0x000000b2,
SQ_PERF_SEL_INSTS_VALU_1_PASS            = 0x000000b3,
SQ_PERF_SEL_INSTS_VALU_2_PASS            = 0x000000b4,
SQ_PERF_SEL_INSTS_VALU_4_PASS            = 0x000000b5,
SQ_PERF_SEL_INSTS_VALU_DP                = 0x000000b6,
SQ_PERF_SEL_SP_CONST_CYCLES              = 0x000000b7,
SQ_PERF_SEL_SP_CONST_STALL_CYCLES        = 0x000000b8,
SQ_PERF_SEL_ITEMS_VALU                   = 0x000000b9,
SQ_PERF_SEL_ITEMS_MAX_VALU               = 0x000000ba,
SQ_PERF_SEL_ITEM_CYCLES_VMEM             = 0x000000bb,
SQ_PERF_SEL_DUMMY_END                    = 0x000000bc,
SQ_PERF_SEL_DUMMY_LAST                   = 0x000000ff,
SQC_PERF_SEL_LDS_BANK_CONFLICT           = 0x00000100,
SQC_PERF_SEL_LDS_ADDR_CONFLICT           = 0x00000101,
SQC_PERF_SEL_LDS_UNALIGNED_STALL         = 0x00000102,
SQC_PERF_SEL_LDS_MEM_VIOLATIONS          = 0x00000103,
SQC_PERF_SEL_LDS_ATOMIC_RETURN           = 0x00000104,
SQC_PERF_SEL_LDS_IDX_ACTIVE              = 0x00000105,
SQC_PERF_SEL_LDS_ADDR_STALL              = 0x00000106,
SQC_PERF_SEL_LDS_ADDR_ACTIVE             = 0x00000107,
SQC_PERF_SEL_LDS_PC_LDS_WRITE_STALL_TD   = 0x00000108,
SQC_PERF_SEL_LDS_SPI_VGPR_WRITE_STALL_TD = 0x00000109,
SQC_PERF_SEL_LDS_LDS_VGPR_WRITE_STALL    = 0x0000010a,
SQC_PERF_SEL_LDS_FP_ADD_CYCLES           = 0x0000010b,
SQC_PERF_SEL_ICACHE_BUSY_CYCLES          = 0x0000010c,
SQC_PERF_SEL_ICACHE_REQ                  = 0x0000010d,
SQC_PERF_SEL_ICACHE_HITS                 = 0x0000010e,
SQC_PERF_SEL_ICACHE_MISSES               = 0x0000010f,
SQC_PERF_SEL_ICACHE_MISSES_DUPLICATE     = 0x00000110,
SQC_PERF_SEL_ICACHE_INVAL_INST           = 0x00000111,
SQC_PERF_SEL_ICACHE_INVAL_ASYNC          = 0x00000112,
SQC_PERF_SEL_ICACHE_INFLIGHT_LEVEL       = 0x00000113,
SQC_PERF_SEL_DCACHE_INFLIGHT_LEVEL       = 0x00000114,
SQC_PERF_SEL_TC_INFLIGHT_LEVEL           = 0x00000115,
SQC_PERF_SEL_ICACHE_TC_INFLIGHT_LEVEL    = 0x00000116,
SQC_PERF_SEL_DCACHE_TC_INFLIGHT_LEVEL    = 0x00000117,
SQC_PERF_SEL_ICACHE_INPUT_VALID_READYB   = 0x00000118,
SQC_PERF_SEL_DCACHE_INPUT_VALID_READYB   = 0x00000119,
SQC_PERF_SEL_TC_REQ                      = 0x0000011a,
SQC_PERF_SEL_TC_INST_REQ                 = 0x0000011b,
SQC_PERF_SEL_TC_DATA_READ_REQ            = 0x0000011c,
SQC_PERF_SEL_TC_STALL                    = 0x0000011d,
SQC_PERF_SEL_TC_STARVE                   = 0x0000011e,
SQC_PERF_SEL_ICACHE_INPUT_STALL_ARB_NO_GRANT = 0x0000011f,
SQC_PERF_SEL_ICACHE_INPUT_STALL_BANK_READYB = 0x00000120,
SQC_PERF_SEL_ICACHE_CACHE_STALLED        = 0x00000121,
SQC_PERF_SEL_ICACHE_CACHE_STALL_INFLIGHT_MAX = 0x00000122,
SQC_PERF_SEL_ICACHE_STALL_OUTXBAR_ARB_NO_GRANT = 0x00000123,
SQC_PERF_SEL_DCACHE_BUSY_CYCLES          = 0x00000124,
SQC_PERF_SEL_DCACHE_REQ                  = 0x00000125,
SQC_PERF_SEL_DCACHE_HITS                 = 0x00000126,
SQC_PERF_SEL_DCACHE_MISSES               = 0x00000127,
SQC_PERF_SEL_DCACHE_MISSES_DUPLICATE     = 0x00000128,
SQC_PERF_SEL_DCACHE_INVAL_INST           = 0x00000129,
SQC_PERF_SEL_DCACHE_INVAL_ASYNC          = 0x0000012a,
SQC_PERF_SEL_DCACHE_HIT_LRU_READ         = 0x0000012b,
SQC_PERF_SEL_DCACHE_INPUT_STALL_ARB_NO_GRANT = 0x0000012c,
SQC_PERF_SEL_DCACHE_INPUT_STALL_BANK_READYB = 0x0000012d,
SQC_PERF_SEL_DCACHE_CACHE_STALLED        = 0x0000012e,
SQC_PERF_SEL_DCACHE_CACHE_STALL_INFLIGHT_MAX = 0x0000012f,
SQC_PERF_SEL_DCACHE_CACHE_STALL_OUTPUT   = 0x00000130,
SQC_PERF_SEL_DCACHE_STALL_OUTXBAR_ARB_NO_GRANT = 0x00000131,
SQC_PERF_SEL_DCACHE_REQ_READ_1           = 0x00000132,
SQC_PERF_SEL_DCACHE_REQ_READ_2           = 0x00000133,
SQC_PERF_SEL_DCACHE_REQ_READ_4           = 0x00000134,
SQC_PERF_SEL_DCACHE_REQ_READ_8           = 0x00000135,
SQC_PERF_SEL_DCACHE_REQ_READ_16          = 0x00000136,
SQC_PERF_SEL_DCACHE_REQ_ATC_PROBE        = 0x00000137,
SQC_PERF_SEL_SQ_DCACHE_REQS              = 0x00000138,
SQC_PERF_SEL_DCACHE_FLAT_REQ             = 0x00000139,
SQC_PERF_SEL_TD_VGPR_BUSY                = 0x0000013a,
SQC_PERF_SEL_LDS_VGPR_BUSY               = 0x0000013b,
SQC_PERF_SEL_LDS_TD_VGPR_CONF_STALL      = 0x0000013c,
SQC_PERF_SEL_ICACHE_GCR                  = 0x0000013d,
SQC_PERF_SEL_ICACHE_GCR_HITS             = 0x0000013e,
SQC_PERF_SEL_DCACHE_GCR                  = 0x0000013f,
SQC_PERF_SEL_DCACHE_GCR_HITS             = 0x00000140,
SQC_PERF_SEL_ICACHE_GCR_INVALIDATE       = 0x00000141,
SQC_PERF_SEL_DCACHE_GCR_INVALIDATE       = 0x00000142,
SQC_PERF_SEL_DCACHE_SPI_RETURN_STALL     = 0x00000143,
SQC_PERF_SEL_DUMMY_LAST                  = 0x00000144,
SP_PERF_SEL_DST_BUF_ALLOC_STALL          = 0x000001c0,
SP_PERF_SEL_DST_BUF_WB_CONF_W_TD_LDS     = 0x000001c1,
SP_PERF_SEL_DST_BUF_WB_CONF_W_SPI        = 0x000001c2,
SP_PERF_SEL_DST_BUF_EVEN_DIRTY           = 0x000001c3,
SP_PERF_SEL_DST_BUF_ODD_DIRTY            = 0x000001c4,
SP_PERF_SEL_SRC_CACHE_HIT_B0             = 0x000001c5,
SP_PERF_SEL_SRC_CACHE_HIT_B1             = 0x000001c6,
SP_PERF_SEL_SRC_CACHE_HIT_B2             = 0x000001c7,
SP_PERF_SEL_SRC_CACHE_HIT_B3             = 0x000001c8,
SP_PERF_SEL_SRC_CACHE_PROBE_B0           = 0x000001c9,
SP_PERF_SEL_SRC_CACHE_PROBE_B1           = 0x000001ca,
SP_PERF_SEL_SRC_CACHE_PROBE_B2           = 0x000001cb,
SP_PERF_SEL_SRC_CACHE_PROBE_B3           = 0x000001cc,
SP_PERF_SEL_SRC_CACHE_VGPR_RD_B0         = 0x000001cd,
SP_PERF_SEL_SRC_CACHE_VGPR_RD_B1         = 0x000001ce,
SP_PERF_SEL_SRC_CACHE_VGPR_RD_B2         = 0x000001cf,
SP_PERF_SEL_SRC_CACHE_VGPR_RD_B3         = 0x000001d0,
SP_PERF_SEL_SRC_CACHE_RECYCLE_HIT_B0     = 0x000001d1,
SP_PERF_SEL_SRC_CACHE_RECYCLE_HIT_B1     = 0x000001d2,
SP_PERF_SEL_SRC_CACHE_RECYCLE_HIT_B2     = 0x000001d3,
SP_PERF_SEL_SRC_CACHE_RECYCLE_HIT_B3     = 0x000001d4,
SP_PERF_SEL_SRC_CACHE_PROBE_SUCCESS_B0   = 0x000001d5,
SP_PERF_SEL_SRC_CACHE_PROBE_SUCCESS_B1   = 0x000001d6,
SP_PERF_SEL_SRC_CACHE_PROBE_SUCCESS_B2   = 0x000001d7,
SP_PERF_SEL_SRC_CACHE_PROBE_SUCCESS_B3   = 0x000001d8,
SP_PERF_SEL_VALU_PENDING_QUEUE_STALL     = 0x000001d9,
SP_PERF_SEL_VALU_OPERAND                 = 0x000001da,
SP_PERF_SEL_VALU_VGPR_OPERAND            = 0x000001db,
SP_PERF_SEL_VALU_OPERAND_FROM_DST_BUF    = 0x000001dc,
SP_PERF_SEL_VALU_EXEC_MASK_CHANGE        = 0x000001dd,
SP_PERF_SEL_VALU_COEXEC_WITH_TRANS       = 0x000001de,
SP_PERF_SEL_VALU_SGPR_FWD_BUF_FULL       = 0x000001df,
SP_PERF_SEL_VALU_STALL                   = 0x000001e0,
SP_PERF_SEL_VALU_STALL_VGPR_NOT_READY    = 0x000001e1,
SP_PERF_SEL_VALU_STALL_SGPR_NOT_READY    = 0x000001e2,
SP_PERF_SEL_VALU_STALL_VDST_FWD          = 0x000001e3,
SP_PERF_SEL_VALU_STALL_SDST_FWD          = 0x000001e4,
SP_PERF_SEL_VALU_STALL_DST_STALL         = 0x000001e5,
SP_PERF_SEL_VALU_FAST_OP_STALL_VGPR_NOT_READY = 0x000001e6,
SP_PERF_SEL_VGPR_VMEM_RD                 = 0x000001e7,
SP_PERF_SEL_VGPR_EXP_RD                  = 0x000001e8,
SP_PERF_SEL_VGPR_SPI_WR                  = 0x000001e9,
SP_PERF_SEL_VGPR_TDLDS_DATA_WR           = 0x000001ea,
SP_PERF_SEL_VGPR_WR                      = 0x000001eb,
SP_PERF_SEL_VGPR_RD                      = 0x000001ec,
SP_PERF_SEL_DUMMY_LAST                   = 0x000001ed,
SQ_PERF_SEL_NONE2                        = 0x000001ff,
} SQ_PERF_SEL;

/*
 * SQ_ROUND_MODE enum
 */

typedef enum SQ_ROUND_MODE {
SQ_ROUND_NEAREST_EVEN                    = 0x00000000,
SQ_ROUND_PLUS_INFINITY                   = 0x00000001,
SQ_ROUND_MINUS_INFINITY                  = 0x00000002,
SQ_ROUND_TO_ZERO                         = 0x00000003,
} SQ_ROUND_MODE;

/*
 * SQ_RSRC_BUF_TYPE enum
 */

typedef enum SQ_RSRC_BUF_TYPE {
SQ_RSRC_BUF                              = 0x00000000,
SQ_RSRC_BUF_RSVD_1                       = 0x00000001,
SQ_RSRC_BUF_RSVD_2                       = 0x00000002,
SQ_RSRC_BUF_RSVD_3                       = 0x00000003,
} SQ_RSRC_BUF_TYPE;

/*
 * SQ_RSRC_FLAT_TYPE enum
 */

typedef enum SQ_RSRC_FLAT_TYPE {
SQ_RSRC_FLAT_RSVD_0                      = 0x00000000,
SQ_RSRC_FLAT                             = 0x00000001,
SQ_RSRC_FLAT_RSVD_2                      = 0x00000002,
SQ_RSRC_FLAT_RSVD_3                      = 0x00000003,
} SQ_RSRC_FLAT_TYPE;

/*
 * SQ_RSRC_IMG_TYPE enum
 */

typedef enum SQ_RSRC_IMG_TYPE {
SQ_RSRC_IMG_RSVD_0                       = 0x00000000,
SQ_RSRC_IMG_RSVD_1                       = 0x00000001,
SQ_RSRC_IMG_RSVD_2                       = 0x00000002,
SQ_RSRC_IMG_RSVD_3                       = 0x00000003,
SQ_RSRC_IMG_RSVD_4                       = 0x00000004,
SQ_RSRC_IMG_RSVD_5                       = 0x00000005,
SQ_RSRC_IMG_RSVD_6                       = 0x00000006,
SQ_RSRC_IMG_RSVD_7                       = 0x00000007,
SQ_RSRC_IMG_1D                           = 0x00000008,
SQ_RSRC_IMG_2D                           = 0x00000009,
SQ_RSRC_IMG_3D                           = 0x0000000a,
SQ_RSRC_IMG_CUBE                         = 0x0000000b,
SQ_RSRC_IMG_1D_ARRAY                     = 0x0000000c,
SQ_RSRC_IMG_2D_ARRAY                     = 0x0000000d,
SQ_RSRC_IMG_2D_MSAA                      = 0x0000000e,
SQ_RSRC_IMG_2D_MSAA_ARRAY                = 0x0000000f,
} SQ_RSRC_IMG_TYPE;

/*
 * SQ_SEL_XYZW01 enum
 */

typedef enum SQ_SEL_XYZW01 {
SQ_SEL_0                                 = 0x00000000,
SQ_SEL_1                                 = 0x00000001,
SQ_SEL_N_BC_1                            = 0x00000002,
SQ_SEL_RESERVED_1                        = 0x00000003,
SQ_SEL_X                                 = 0x00000004,
SQ_SEL_Y                                 = 0x00000005,
SQ_SEL_Z                                 = 0x00000006,
SQ_SEL_W                                 = 0x00000007,
} SQ_SEL_XYZW01;

/*
 * SQ_TEX_ANISO_RATIO enum
 */

typedef enum SQ_TEX_ANISO_RATIO {
SQ_TEX_ANISO_RATIO_1                     = 0x00000000,
SQ_TEX_ANISO_RATIO_2                     = 0x00000001,
SQ_TEX_ANISO_RATIO_4                     = 0x00000002,
SQ_TEX_ANISO_RATIO_8                     = 0x00000003,
SQ_TEX_ANISO_RATIO_16                    = 0x00000004,
} SQ_TEX_ANISO_RATIO;

/*
 * SQ_TEX_BORDER_COLOR enum
 */

typedef enum SQ_TEX_BORDER_COLOR {
SQ_TEX_BORDER_COLOR_TRANS_BLACK          = 0x00000000,
SQ_TEX_BORDER_COLOR_OPAQUE_BLACK         = 0x00000001,
SQ_TEX_BORDER_COLOR_OPAQUE_WHITE         = 0x00000002,
SQ_TEX_BORDER_COLOR_REGISTER             = 0x00000003,
} SQ_TEX_BORDER_COLOR;

/*
 * SQ_TEX_CLAMP enum
 */

typedef enum SQ_TEX_CLAMP {
SQ_TEX_WRAP                              = 0x00000000,
SQ_TEX_MIRROR                            = 0x00000001,
SQ_TEX_CLAMP_LAST_TEXEL                  = 0x00000002,
SQ_TEX_MIRROR_ONCE_LAST_TEXEL            = 0x00000003,
SQ_TEX_CLAMP_HALF_BORDER                 = 0x00000004,
SQ_TEX_MIRROR_ONCE_HALF_BORDER           = 0x00000005,
SQ_TEX_CLAMP_BORDER                      = 0x00000006,
SQ_TEX_MIRROR_ONCE_BORDER                = 0x00000007,
} SQ_TEX_CLAMP;

/*
 * SQ_TEX_DEPTH_COMPARE enum
 */

typedef enum SQ_TEX_DEPTH_COMPARE {
SQ_TEX_DEPTH_COMPARE_NEVER               = 0x00000000,
SQ_TEX_DEPTH_COMPARE_LESS                = 0x00000001,
SQ_TEX_DEPTH_COMPARE_EQUAL               = 0x00000002,
SQ_TEX_DEPTH_COMPARE_LESSEQUAL           = 0x00000003,
SQ_TEX_DEPTH_COMPARE_GREATER             = 0x00000004,
SQ_TEX_DEPTH_COMPARE_NOTEQUAL            = 0x00000005,
SQ_TEX_DEPTH_COMPARE_GREATEREQUAL        = 0x00000006,
SQ_TEX_DEPTH_COMPARE_ALWAYS              = 0x00000007,
} SQ_TEX_DEPTH_COMPARE;

/*
 * SQ_TEX_MIP_FILTER enum
 */

typedef enum SQ_TEX_MIP_FILTER {
SQ_TEX_MIP_FILTER_NONE                   = 0x00000000,
SQ_TEX_MIP_FILTER_POINT                  = 0x00000001,
SQ_TEX_MIP_FILTER_LINEAR                 = 0x00000002,
SQ_TEX_MIP_FILTER_POINT_ANISO_ADJ        = 0x00000003,
} SQ_TEX_MIP_FILTER;

/*
 * SQ_TEX_XY_FILTER enum
 */

typedef enum SQ_TEX_XY_FILTER {
SQ_TEX_XY_FILTER_POINT                   = 0x00000000,
SQ_TEX_XY_FILTER_BILINEAR                = 0x00000001,
SQ_TEX_XY_FILTER_ANISO_POINT             = 0x00000002,
SQ_TEX_XY_FILTER_ANISO_BILINEAR          = 0x00000003,
} SQ_TEX_XY_FILTER;

/*
 * SQ_TEX_Z_FILTER enum
 */

typedef enum SQ_TEX_Z_FILTER {
SQ_TEX_Z_FILTER_NONE                     = 0x00000000,
SQ_TEX_Z_FILTER_POINT                    = 0x00000001,
SQ_TEX_Z_FILTER_LINEAR                   = 0x00000002,
} SQ_TEX_Z_FILTER;

/*
 * SQ_TT_MODE enum
 */

typedef enum SQ_TT_MODE {
SQ_TT_MODE_OFF                           = 0x00000000,
SQ_TT_MODE_ON                            = 0x00000001,
SQ_TT_MODE_GLOBAL                        = 0x00000002,
SQ_TT_MODE_DETAIL                        = 0x00000003,
} SQ_TT_MODE;

/*
 * SQ_TT_RT_FREQ enum
 */

typedef enum SQ_TT_RT_FREQ {
SQ_TT_RT_FREQ_NEVER                      = 0x00000000,
SQ_TT_RT_FREQ_1024_CLK                   = 0x00000001,
SQ_TT_RT_FREQ_4096_CLK                   = 0x00000002,
} SQ_TT_RT_FREQ;

/*
 * SQ_TT_TOKEN_MASK_INST_EXCLUDE enum
 */

typedef enum SQ_TT_TOKEN_MASK_INST_EXCLUDE {
SQ_TT_INST_EXCLUDE_VMEM_OTHER_SIMD_BIT   = 0x00000001,
SQ_TT_INST_EXCLUDE_EXPGNT234_BIT         = 0x00000002,
} SQ_TT_TOKEN_MASK_INST_EXCLUDE;

/*
 * SQ_TT_TOKEN_MASK_INST_EXCLUDE_SHIFT enum
 */

typedef enum SQ_TT_TOKEN_MASK_INST_EXCLUDE_SHIFT {
SQ_TT_INST_EXCLUDE_VMEM_OTHER_SIMD_SHIFT = 0x00000000,
SQ_TT_INST_EXCLUDE_EXPGNT234_SHIFT       = 0x00000001,
} SQ_TT_TOKEN_MASK_INST_EXCLUDE_SHIFT;

/*
 * SQ_TT_TOKEN_MASK_REG_EXCLUDE enum
 */

typedef enum SQ_TT_TOKEN_MASK_REG_EXCLUDE {
SQ_TT_REG_EXCLUDE_USER_DATA_BIT          = 0x00000001,
SQ_TT_REG_EXCLUDE_CP_ME_MC_RADDR_BIT     = 0x00000002,
SQ_TT_REG_EXCLUDE_GRBM_COMPUTE_EXCLUDE_BIT = 0x00000004,
} SQ_TT_TOKEN_MASK_REG_EXCLUDE;

/*
 * SQ_TT_TOKEN_MASK_REG_EXCLUDE_SHIFT enum
 */

typedef enum SQ_TT_TOKEN_MASK_REG_EXCLUDE_SHIFT {
SQ_TT_REG_EXCLUDE_USER_DATA_SHIFT        = 0x00000000,
SQ_TT_REG_EXCLUDE_CP_ME_MC_RADDR_SHIFT   = 0x00000001,
SQ_TT_REG_EXCLUDE_GRBM_COMPUTE_EXCLUDE_SHIFT = 0x00000002,
} SQ_TT_TOKEN_MASK_REG_EXCLUDE_SHIFT;

/*
 * SQ_TT_TOKEN_MASK_REG_INCLUDE enum
 */

typedef enum SQ_TT_TOKEN_MASK_REG_INCLUDE {
SQ_TT_TOKEN_MASK_SQDEC_BIT               = 0x00000001,
SQ_TT_TOKEN_MASK_SHDEC_BIT               = 0x00000002,
SQ_TT_TOKEN_MASK_GFXUDEC_BIT             = 0x00000004,
SQ_TT_TOKEN_MASK_COMP_BIT                = 0x00000008,
SQ_TT_TOKEN_MASK_CONTEXT_BIT             = 0x00000010,
SQ_TT_TOKEN_MASK_CONFIG_BIT              = 0x00000020,
SQ_TT_TOKEN_MASK_ALL_BIT                 = 0x00000040,
SQ_TT_TOKEN_MASK_RSVD_BIT                = 0x00000080,
} SQ_TT_TOKEN_MASK_REG_INCLUDE;

/*
 * SQ_TT_TOKEN_MASK_REG_INCLUDE_SHIFT enum
 */

typedef enum SQ_TT_TOKEN_MASK_REG_INCLUDE_SHIFT {
SQ_TT_TOKEN_MASK_SQDEC_SHIFT             = 0x00000000,
SQ_TT_TOKEN_MASK_SHDEC_SHIFT             = 0x00000001,
SQ_TT_TOKEN_MASK_GFXUDEC_SHIFT           = 0x00000002,
SQ_TT_TOKEN_MASK_COMP_SHIFT              = 0x00000003,
SQ_TT_TOKEN_MASK_CONTEXT_SHIFT           = 0x00000004,
SQ_TT_TOKEN_MASK_CONFIG_SHIFT            = 0x00000005,
SQ_TT_TOKEN_MASK_ALL_SHIFT               = 0x00000006,
SQ_TT_TOKEN_MASK_RSVD_SHIFT              = 0x00000007,
} SQ_TT_TOKEN_MASK_REG_INCLUDE_SHIFT;

/*
 * SQ_TT_TOKEN_MASK_TOKEN_EXCLUDE_SHIFT enum
 */

typedef enum SQ_TT_TOKEN_MASK_TOKEN_EXCLUDE_SHIFT {
SQ_TT_TOKEN_EXCLUDE_VMEMEXEC_SHIFT       = 0x00000000,
SQ_TT_TOKEN_EXCLUDE_ALUEXEC_SHIFT        = 0x00000001,
SQ_TT_TOKEN_EXCLUDE_VALUINST_SHIFT       = 0x00000002,
SQ_TT_TOKEN_EXCLUDE_WAVERDY_SHIFT        = 0x00000003,
SQ_TT_TOKEN_EXCLUDE_WAVESTARTEND_SHIFT   = 0x00000004,
SQ_TT_TOKEN_EXCLUDE_IMMEDIATE_SHIFT      = 0x00000005,
SQ_TT_TOKEN_EXCLUDE_REG_SHIFT            = 0x00000006,
SQ_TT_TOKEN_EXCLUDE_EVENT_SHIFT          = 0x00000007,
SQ_TT_TOKEN_EXCLUDE_INST_SHIFT           = 0x00000008,
SQ_TT_TOKEN_EXCLUDE_UTILCTR_SHIFT        = 0x00000009,
SQ_TT_TOKEN_EXCLUDE_WAVEALLOC_SHIFT      = 0x0000000a,
SQ_TT_TOKEN_EXCLUDE_PERF_SHIFT           = 0x0000000b,
} SQ_TT_TOKEN_MASK_TOKEN_EXCLUDE_SHIFT;

/*
 * SQ_TT_UTIL_TIMER enum
 */

typedef enum SQ_TT_UTIL_TIMER {
SQ_TT_UTIL_TIMER_100_CLK                 = 0x00000000,
SQ_TT_UTIL_TIMER_250_CLK                 = 0x00000001,
} SQ_TT_UTIL_TIMER;

/*
 * SQ_TT_WAVESTART_MODE enum
 */

typedef enum SQ_TT_WAVESTART_MODE {
SQ_TT_WAVESTART_MODE_SHORT               = 0x00000000,
SQ_TT_WAVESTART_MODE_ALLOC               = 0x00000001,
SQ_TT_WAVESTART_MODE_PBB_ID              = 0x00000002,
} SQ_TT_WAVESTART_MODE;

/*
 * SQ_TT_WTYPE_INCLUDE enum
 */

typedef enum SQ_TT_WTYPE_INCLUDE {
SQ_TT_WTYPE_INCLUDE_PS_BIT               = 0x00000001,
SQ_TT_WTYPE_INCLUDE_RSVD0_BIT            = 0x00000002,
SQ_TT_WTYPE_INCLUDE_GS_BIT               = 0x00000004,
SQ_TT_WTYPE_INCLUDE_RSVD1_BIT            = 0x00000008,
SQ_TT_WTYPE_INCLUDE_HS_BIT               = 0x00000010,
SQ_TT_WTYPE_INCLUDE_RSVD2_BIT            = 0x00000020,
SQ_TT_WTYPE_INCLUDE_CS_BIT               = 0x00000040,
} SQ_TT_WTYPE_INCLUDE;

/*
 * SQ_TT_WTYPE_INCLUDE_SHIFT enum
 */

typedef enum SQ_TT_WTYPE_INCLUDE_SHIFT {
SQ_TT_WTYPE_INCLUDE_PS_SHIFT             = 0x00000000,
SQ_TT_WTYPE_INCLUDE_RSVD0_SHIFT          = 0x00000001,
SQ_TT_WTYPE_INCLUDE_GS_SHIFT             = 0x00000002,
SQ_TT_WTYPE_INCLUDE_RSVD1_SHIFT          = 0x00000003,
SQ_TT_WTYPE_INCLUDE_HS_SHIFT             = 0x00000004,
SQ_TT_WTYPE_INCLUDE_RSVD2_SHIFT          = 0x00000005,
SQ_TT_WTYPE_INCLUDE_CS_SHIFT             = 0x00000006,
} SQ_TT_WTYPE_INCLUDE_SHIFT;

/*
 * SQ_WATCH_MODES enum
 */

typedef enum SQ_WATCH_MODES {
SQ_WATCH_MODE_READ                       = 0x00000000,
SQ_WATCH_MODE_NONREAD                    = 0x00000001,
SQ_WATCH_MODE_ATOMIC                     = 0x00000002,
SQ_WATCH_MODE_ALL                        = 0x00000003,
} SQ_WATCH_MODES;

/*
 * SQ_WAVE_FWD_PROG_INTERVAL enum
 */

typedef enum SQ_WAVE_FWD_PROG_INTERVAL {
SQ_WAVE_FWD_PROG_INTERVAL_NEVER          = 0x00000000,
SQ_WAVE_FWD_PROG_INTERVAL_256            = 0x00000001,
SQ_WAVE_FWD_PROG_INTERVAL_1024           = 0x00000002,
SQ_WAVE_FWD_PROG_INTERVAL_4096           = 0x00000003,
} SQ_WAVE_FWD_PROG_INTERVAL;

/*
 * SQ_WAVE_IB_ECC_ST enum
 */

typedef enum SQ_WAVE_IB_ECC_ST {
SQ_WAVE_IB_ECC_CLEAN                     = 0x00000000,
SQ_WAVE_IB_ECC_ERR_CONTINUE              = 0x00000001,
SQ_WAVE_IB_ECC_ERR_HALT                  = 0x00000002,
SQ_WAVE_IB_ECC_WITH_ERR_MSG              = 0x00000003,
} SQ_WAVE_IB_ECC_ST;

/*
 * SQ_WAVE_SCHED_MODES enum
 */

typedef enum SQ_WAVE_SCHED_MODES {
SQ_WAVE_SCHED_MODE_NORMAL                = 0x00000000,
SQ_WAVE_SCHED_MODE_EXPERT                = 0x00000001,
SQ_WAVE_SCHED_MODE_DISABLE_VA_VDST       = 0x00000002,
} SQ_WAVE_SCHED_MODES;

/*
 * SQ_WAVE_TYPE enum
 */

typedef enum SQ_WAVE_TYPE {
SQ_WAVE_TYPE_PS                          = 0x00000000,
SQ_WAVE_TYPE_RSVD0                       = 0x00000001,
SQ_WAVE_TYPE_GS                          = 0x00000002,
SQ_WAVE_TYPE_RSVD1                       = 0x00000003,
SQ_WAVE_TYPE_HS                          = 0x00000004,
SQ_WAVE_TYPE_RSVD2                       = 0x00000005,
SQ_WAVE_TYPE_CS                          = 0x00000006,
SQ_WAVE_TYPE_PS1                         = 0x00000007,
SQ_WAVE_TYPE_PS2                         = 0x00000008,
SQ_WAVE_TYPE_PS3                         = 0x00000009,
} SQ_WAVE_TYPE;

/*
 * SQ_WAVE_TYPE value
 */

#define SQ_WAVE_TYPE_PS0               0x00000000

/*
 * SQIND_PARTITIONS value
 */

#define SQIND_GLOBAL_REGS_OFFSET       0x00000000
#define SQIND_GLOBAL_REGS_SIZE         0x00000008
#define SQIND_LOCAL_REGS_OFFSET        0x00000008
#define SQIND_LOCAL_REGS_SIZE          0x00000008
#define SQIND_WAVE_HWREGS_OFFSET       0x00000100
#define SQIND_WAVE_HWREGS_SIZE         0x00000100
#define SQIND_WAVE_SGPRS_OFFSET        0x00000200
#define SQIND_WAVE_SGPRS_SIZE          0x00000200
#define SQIND_WAVE_VGPRS_OFFSET        0x00000400
#define SQIND_WAVE_VGPRS_SIZE          0x00000400

/*
 * SQ_GFXDEC value
 */

#define SQ_GFXDEC_BEGIN                0x0000a000
#define SQ_GFXDEC_END                  0x0000c000
#define SQ_GFXDEC_STATE_ID_SHIFT       0x0000000a

/*
 * SQDEC value
 */

#define SQDEC_BEGIN                    0x00002300
#define SQDEC_END                      0x000023ff

/*
 * SQPERFSDEC value
 */

#define SQPERFSDEC_BEGIN               0x0000d9c0
#define SQPERFSDEC_END                 0x0000da40

/*
 * SQPERFDDEC value
 */

#define SQPERFDDEC_BEGIN               0x0000d1c0
#define SQPERFDDEC_END                 0x0000d240

/*
 * SQGFXUDEC value
 */

#define SQGFXUDEC_BEGIN                0x0000c330
#define SQGFXUDEC_END                  0x0000c380

/*
 * SQPWRDEC value
 */

#define SQPWRDEC_BEGIN                 0x0000f08c
#define SQPWRDEC_END                   0x0000f094

/*
 * SQ_DISPATCHER value
 */

#define SQ_DISPATCHER_GFX_MIN          0x00000010
#define SQ_DISPATCHER_GFX_CNT_PER_RING 0x00000008

/*
 * SQ_MAX value
 */

#define SQ_MAX_PGM_SGPRS               0x00000068
#define SQ_MAX_PGM_VGPRS               0x00000100

/*
 * SQ_EXCP_BITS value
 */

#define SQ_EX_MODE_EXCP_VALU_BASE      0x00000000
#define SQ_EX_MODE_EXCP_VALU_SIZE      0x00000007
#define SQ_EX_MODE_EXCP_INVALID        0x00000000
#define SQ_EX_MODE_EXCP_INPUT_DENORM   0x00000001
#define SQ_EX_MODE_EXCP_DIV0           0x00000002
#define SQ_EX_MODE_EXCP_OVERFLOW       0x00000003
#define SQ_EX_MODE_EXCP_UNDERFLOW      0x00000004
#define SQ_EX_MODE_EXCP_INEXACT        0x00000005
#define SQ_EX_MODE_EXCP_INT_DIV0       0x00000006
#define SQ_EX_MODE_EXCP_ADDR_WATCH0    0x00000007
#define SQ_EX_MODE_EXCP_MEM_VIOL       0x00000008

/*
 * SQ_EXCP_HI_BITS value
 */

#define SQ_EX_MODE_EXCP_HI_ADDR_WATCH1 0x00000000
#define SQ_EX_MODE_EXCP_HI_ADDR_WATCH2 0x00000001
#define SQ_EX_MODE_EXCP_HI_ADDR_WATCH3 0x00000002

/*
 * HW_INSERTED_INST_ID value
 */

#define INST_ID_PRIV_START             0x80000000
#define INST_ID_ECC_INTERRUPT_MSG      0xfffffff0
#define INST_ID_TTRACE_NEW_PC_MSG      0xfffffff1
#define INST_ID_HW_TRAP                0xfffffff2
#define INST_ID_KILL_SEQ               0xfffffff3
#define INST_ID_SPI_WREXEC             0xfffffff4
#define INST_ID_HW_TRAP_GET_TBA        0xfffffff5
#define INST_ID_HOST_REG_TRAP_MSG      0xfffffffe

/*
 * SIMM16_WAITCNT_PARTITIONS value
 */

#define SIMM16_WAITCNT_EXP_CNT_START   0x00000000
#define SIMM16_WAITCNT_EXP_CNT_SIZE    0x00000003
#define SIMM16_WAITCNT_LGKM_CNT_START  0x00000004
#define SIMM16_WAITCNT_LGKM_CNT_SIZE   0x00000006
#define SIMM16_WAITCNT_VM_CNT_START    0x0000000a
#define SIMM16_WAITCNT_VM_CNT_SIZE     0x00000006
#define SIMM16_WAITCNT_DEPCTR_SA_SDST_START 0x00000000
#define SIMM16_WAITCNT_DEPCTR_SA_SDST_SIZE 0x00000001
#define SIMM16_WAITCNT_DEPCTR_VA_VCC_START 0x00000001
#define SIMM16_WAITCNT_DEPCTR_VA_VCC_SIZE 0x00000001
#define SIMM16_WAITCNT_DEPCTR_VM_VSRC_START 0x00000002
#define SIMM16_WAITCNT_DEPCTR_VM_VSRC_SIZE 0x00000003
#define SIMM16_WAITCNT_DEPCTR_HOLD_CNT_START 0x00000006
#define SIMM16_WAITCNT_DEPCTR_HOLD_CNT_SIZE 0x00000001
#define SIMM16_WAITCNT_DEPCTR_VA_SSRC_START 0x00000007
#define SIMM16_WAITCNT_DEPCTR_VA_SSRC_SIZE 0x00000001
#define SIMM16_WAITCNT_DEPCTR_VA_SDST_START 0x00000008
#define SIMM16_WAITCNT_DEPCTR_VA_SDST_SIZE 0x00000003
#define SIMM16_WAITCNT_DEPCTR_VA_VDST_START 0x0000000b
#define SIMM16_WAITCNT_DEPCTR_VA_VDST_SIZE 0x00000005

/*
 * SIMM16_WAIT_EVENT_PARTITIONS value
 */

#define SIMM16_WAIT_EVENT_EXP_RDY_START 0x00000000
#define SIMM16_WAIT_EVENT_EXP_RDY_SIZE 0x00000001

/*
 * SQ_WAVE_IB_DEP_COUNTER_SIZES value
 */

#define SQ_WAVE_IB_DEP_SA_SDST_SIZE    0x00000004
#define SQ_WAVE_IB_DEP_SA_EXEC_SIZE    0x00000002
#define SQ_WAVE_IB_DEP_SA_M0_SIZE      0x00000001
#define SQ_WAVE_IB_DEP_VM_VSRC_SIZE    0x00000004
#define SQ_WAVE_IB_DEP_HOLD_CNT_SIZE   0x00000001
#define SQ_WAVE_IB_DEP_VA_SSRC_SIZE    0x00000003
#define SQ_WAVE_IB_DEP_VA_SDST_SIZE    0x00000004
#define SQ_WAVE_IB_DEP_VA_VCC_SIZE     0x00000003
#define SQ_WAVE_IB_DEP_VA_EXEC_SIZE    0x00000002
#define SQ_WAVE_IB_DEP_VA_VDST_SIZE    0x00000005
#define SQ_WAVE_IB_DEP_LDS_DIR_SIZE    0x00000003

/*
 * SQ_EDC_FUE_CNTL_BITS value
 */

#define SQ_EDC_FUE_CNTL_SIMD0          0x00000000
#define SQ_EDC_FUE_CNTL_SIMD1          0x00000001
#define SQ_EDC_FUE_CNTL_SIMD2          0x00000002
#define SQ_EDC_FUE_CNTL_SIMD3          0x00000003
#define SQ_EDC_FUE_CNTL_SQ             0x00000004
#define SQ_EDC_FUE_CNTL_LDS            0x00000005
#define SQ_EDC_FUE_CNTL_TD             0x00000006
#define SQ_EDC_FUE_CNTL_TA             0x00000007
#define SQ_EDC_FUE_CNTL_TCP            0x00000008

/*******************************************************
 * COMP Enums
 *******************************************************/

/*
 * CSCNTL_TYPE enum
 */

typedef enum CSCNTL_TYPE {
CSCNTL_TYPE_TG                           = 0x00000000,
CSCNTL_TYPE_STATE                        = 0x00000001,
CSCNTL_TYPE_EVENT                        = 0x00000002,
CSCNTL_TYPE_PRIVATE                      = 0x00000003,
} CSCNTL_TYPE;

/*
 * CSDATA_TYPE enum
 */

typedef enum CSDATA_TYPE {
CSDATA_TYPE_TG                           = 0x00000000,
CSDATA_TYPE_STATE                        = 0x00000001,
CSDATA_TYPE_EVENT                        = 0x00000002,
CSDATA_TYPE_PRIVATE                      = 0x00000003,
} CSDATA_TYPE;

/*
 * CSDATA_TYPE_WIDTH value
 */

#define CSDATA_TYPE_WIDTH              0x00000002

/*
 * CSDATA_ADDR_WIDTH value
 */

#define CSDATA_ADDR_WIDTH              0x00000007

/*
 * CSDATA_DATA_WIDTH value
 */

#define CSDATA_DATA_WIDTH              0x00000020

/*
 * CSCNTL_TYPE_WIDTH value
 */

#define CSCNTL_TYPE_WIDTH              0x00000002

/*
 * CSCNTL_ADDR_WIDTH value
 */

#define CSCNTL_ADDR_WIDTH              0x00000007

/*
 * CSCNTL_DATA_WIDTH value
 */

#define CSCNTL_DATA_WIDTH              0x00000020

/*******************************************************
 * GE Enums
 *******************************************************/

/*
 * GE1_PERFCOUNT_SELECT enum
 */

typedef enum GE1_PERFCOUNT_SELECT {
ge1_assembler_busy                       = 0x00000000,
ge1_assembler_stalled                    = 0x00000001,
ge1_dma_busy                             = 0x00000002,
ge1_dma_lat_bin_0                        = 0x00000003,
ge1_dma_lat_bin_1                        = 0x00000004,
ge1_dma_lat_bin_2                        = 0x00000005,
ge1_dma_lat_bin_3                        = 0x00000006,
ge1_dma_lat_bin_4                        = 0x00000007,
ge1_dma_lat_bin_5                        = 0x00000008,
ge1_dma_lat_bin_6                        = 0x00000009,
ge1_dma_lat_bin_7                        = 0x0000000a,
ge1_dma_return_cl0                       = 0x0000000b,
ge1_dma_return_cl1                       = 0x0000000c,
ge1_dma_utcl1_consecutive_retry_event    = 0x0000000d,
ge1_dma_utcl1_request_event              = 0x0000000e,
ge1_dma_utcl1_retry_event                = 0x0000000f,
ge1_dma_utcl1_stall_event                = 0x00000010,
ge1_dma_utcl1_stall_utcl2_event          = 0x00000011,
ge1_dma_utcl1_translation_hit_event      = 0x00000012,
ge1_dma_utcl1_translation_miss_event     = 0x00000013,
ge1_assembler_dma_starved                = 0x00000014,
ge1_rbiu_di_fifo_stalled_p0              = 0x00000015,
ge1_rbiu_di_fifo_starved_p0              = 0x00000016,
ge1_rbiu_dr_fifo_stalled_p0              = 0x00000017,
ge1_rbiu_dr_fifo_starved_p0              = 0x00000018,
ge1_sclk_reg_vld                         = 0x00000019,
ge1_stat_busy                            = 0x0000001a,
ge1_stat_no_dma_busy                     = 0x0000001b,
ge1_pipe0_to_pipe1                       = 0x0000001c,
ge1_pipe1_to_pipe0                       = 0x0000001d,
ge1_dma_return_size_cl0                  = 0x0000001e,
ge1_dma_return_size_cl1                  = 0x0000001f,
ge1_small_draws_one_instance             = 0x00000020,
ge1_sclk_input_vld                       = 0x00000021,
ge1_prim_group_limit_hit                 = 0x00000022,
ge1_unopt_multi_instance_draws           = 0x00000023,
ge1_rbiu_di_fifo_stalled_p1              = 0x00000024,
ge1_rbiu_di_fifo_starved_p1              = 0x00000025,
ge1_rbiu_dr_fifo_stalled_p1              = 0x00000026,
ge1_rbiu_dr_fifo_starved_p1              = 0x00000027,
} GE1_PERFCOUNT_SELECT;

/*
 * GE2_DIST_PERFCOUNT_SELECT enum
 */

typedef enum GE2_DIST_PERFCOUNT_SELECT {
ge_dist_hs_done                          = 0x00000000,
ge_dist_hs_done_latency_se0              = 0x00000001,
ge_dist_hs_done_latency_se1              = 0x00000002,
ge_dist_hs_done_latency_se2              = 0x00000003,
ge_dist_hs_done_latency_se3              = 0x00000004,
ge_dist_hs_done_latency_se4              = 0x00000005,
ge_dist_hs_done_latency_se5              = 0x00000006,
ge_dist_hs_done_latency_se6              = 0x00000007,
ge_dist_hs_done_latency_se7              = 0x00000008,
ge_dist_inside_tf_bin_0                  = 0x00000009,
ge_dist_inside_tf_bin_1                  = 0x0000000a,
ge_dist_inside_tf_bin_2                  = 0x0000000b,
ge_dist_inside_tf_bin_3                  = 0x0000000c,
ge_dist_inside_tf_bin_4                  = 0x0000000d,
ge_dist_inside_tf_bin_5                  = 0x0000000e,
ge_dist_inside_tf_bin_6                  = 0x0000000f,
ge_dist_inside_tf_bin_7                  = 0x00000010,
ge_dist_inside_tf_bin_8                  = 0x00000011,
ge_dist_null_patch                       = 0x00000012,
ge_dist_sclk_core_vld                    = 0x00000013,
ge_dist_sclk_wd_te11_vld                 = 0x00000014,
ge_dist_tfreq_lat_bin_0                  = 0x00000015,
ge_dist_tfreq_lat_bin_1                  = 0x00000016,
ge_dist_tfreq_lat_bin_2                  = 0x00000017,
ge_dist_tfreq_lat_bin_3                  = 0x00000018,
ge_dist_tfreq_lat_bin_4                  = 0x00000019,
ge_dist_tfreq_lat_bin_5                  = 0x0000001a,
ge_dist_tfreq_lat_bin_6                  = 0x0000001b,
ge_dist_tfreq_lat_bin_7                  = 0x0000001c,
ge_dist_tfreq_utcl1_consecutive_retry_event = 0x0000001d,
ge_dist_tfreq_utcl1_request_event        = 0x0000001e,
ge_dist_tfreq_utcl1_retry_event          = 0x0000001f,
ge_dist_tfreq_utcl1_stall_event          = 0x00000020,
ge_dist_tfreq_utcl1_stall_utcl2_event    = 0x00000021,
ge_dist_tfreq_utcl1_translation_hit_event = 0x00000022,
ge_dist_tfreq_utcl1_translation_miss_event = 0x00000023,
ge_dist_vs_pc_stall                      = 0x00000024,
ge_dist_pc_feorder_fifo_full             = 0x00000025,
ge_dist_pc_ge_manager_busy               = 0x00000026,
ge_dist_pc_req_stall_se0                 = 0x00000027,
ge_dist_pc_req_stall_se1                 = 0x00000028,
ge_dist_pc_req_stall_se2                 = 0x00000029,
ge_dist_pc_req_stall_se3                 = 0x0000002a,
ge_dist_pc_req_stall_se4                 = 0x0000002b,
ge_dist_pc_req_stall_se5                 = 0x0000002c,
ge_dist_pc_req_stall_se6                 = 0x0000002d,
ge_dist_pc_req_stall_se7                 = 0x0000002e,
ge_dist_pc_space_zero                    = 0x0000002f,
ge_dist_sclk_input_vld                   = 0x00000030,
ge_dist_reserved                         = 0x00000031,
ge_dist_wd_te11_busy                     = 0x00000032,
ge_dist_te11_starved                     = 0x00000033,
ge_dist_switch_mode_stall                = 0x00000034,
ge_all_tf_eq                             = 0x00000035,
ge_all_tf2                               = 0x00000036,
ge_all_tf3                               = 0x00000037,
ge_all_tf4                               = 0x00000038,
ge_all_tf5                               = 0x00000039,
ge_all_tf6                               = 0x0000003a,
ge_se0_te11_starved_on_hs_done           = 0x0000003b,
ge_se1_te11_starved_on_hs_done           = 0x0000003c,
ge_se2_te11_starved_on_hs_done           = 0x0000003d,
ge_se3_te11_starved_on_hs_done           = 0x0000003e,
ge_se4_te11_starved_on_hs_done           = 0x0000003f,
ge_se5_te11_starved_on_hs_done           = 0x00000040,
ge_se6_te11_starved_on_hs_done           = 0x00000041,
ge_se7_te11_starved_on_hs_done           = 0x00000042,
ge_dist_op_fifo_full_starve              = 0x00000043,
ge_dist_hs_done_se0                      = 0x00000044,
ge_dist_hs_done_se1                      = 0x00000045,
ge_dist_hs_done_se2                      = 0x00000046,
ge_dist_hs_done_se3                      = 0x00000047,
ge_dist_hs_done_se4                      = 0x00000048,
ge_dist_hs_done_se5                      = 0x00000049,
ge_dist_hs_done_se6                      = 0x0000004a,
ge_dist_hs_done_se7                      = 0x0000004b,
ge_dist_hs_done_latency                  = 0x0000004c,
ge_dist_distributer_busy                 = 0x0000004d,
ge_tf_ret_data_stalling_hs_done          = 0x0000004e,
ge_num_of_no_dist_patches                = 0x0000004f,
ge_num_of_donut_dist_patches             = 0x00000050,
ge_num_of_patch_dist_patches             = 0x00000051,
ge_num_of_se_switches_due_to_patch_accum = 0x00000052,
ge_num_of_se_switches_due_to_donut       = 0x00000053,
ge_num_of_se_switches_due_to_trap        = 0x00000054,
ge_num_of_hs_alloc_events                = 0x00000055,
ge_agm_gcr_req                           = 0x00000056,
ge_agm_gcr_tag_stall                     = 0x00000057,
ge_agm_gcr_crd_stall                     = 0x00000058,
ge_agm_gcr_stall                         = 0x00000059,
ge_agm_gcr_latency                       = 0x0000005a,
ge_distclk_vld                           = 0x0000005b,
} GE2_DIST_PERFCOUNT_SELECT;

/*
 * GE2_SE_PERFCOUNT_SELECT enum
 */

typedef enum GE2_SE_PERFCOUNT_SELECT {
ge_se_ds_prims                           = 0x00000000,
ge_se_es_thread_groups                   = 0x00000001,
ge_se_esvert_stalled_gsprim              = 0x00000002,
ge_se_hs_tfm_stall                       = 0x00000003,
ge_se_hs_tgs_active_high_water_mark      = 0x00000004,
ge_se_hs_thread_groups                   = 0x00000005,
ge_se_reused_es_indices                  = 0x00000006,
ge_se_sclk_ngg_vld                       = 0x00000007,
ge_se_sclk_te11_vld                      = 0x00000008,
ge_se_spi_esvert_eov                     = 0x00000009,
ge_se_spi_esvert_stalled                 = 0x0000000a,
ge_se_spi_esvert_starved_busy            = 0x0000000b,
ge_se_spi_esvert_valid                   = 0x0000000c,
ge_se_spi_gsprim_cont                    = 0x0000000d,
ge_se_spi_gsprim_eov                     = 0x0000000e,
ge_se_spi_gsprim_stalled                 = 0x0000000f,
ge_se_spi_gsprim_starved_busy            = 0x00000010,
ge_se_spi_gsprim_valid                   = 0x00000011,
ge_se_spi_gssubgrp_is_event              = 0x00000012,
ge_se_spi_gssubgrp_send                  = 0x00000013,
ge_se_spi_hsvert_eov                     = 0x00000014,
ge_se_spi_hsvert_stalled                 = 0x00000015,
ge_se_spi_hsvert_starved_busy            = 0x00000016,
ge_se_spi_hsvert_valid                   = 0x00000017,
ge_se_spi_hswave_is_event                = 0x00000018,
ge_se_spi_hswave_send                    = 0x00000019,
ge_se_spi_lsvert_eov                     = 0x0000001a,
ge_se_spi_lsvert_stalled                 = 0x0000001b,
ge_se_spi_lsvert_starved_busy            = 0x0000001c,
ge_se_spi_lsvert_valid                   = 0x0000001d,
ge_se_spi_hsvert_fifo_full_stall         = 0x0000001e,
ge_se_spi_tgrp_fifo_stall                = 0x0000001f,
ge_spi_hsgrp_spi_stall                   = 0x00000020,
ge_se_spi_gssubgrp_event_window_active   = 0x00000021,
ge_se_hs_input_stall                     = 0x00000022,
ge_se_sending_vert_or_prim               = 0x00000023,
ge_se_sclk_input_vld                     = 0x00000024,
ge_spi_lswave_fifo_full_stall            = 0x00000025,
ge_spi_hswave_fifo_full_stall            = 0x00000026,
ge_hs_tif_stall                          = 0x00000027,
ge_csb_spi_bp                            = 0x00000028,
ge_ngg_starving_for_pc_grant             = 0x00000029,
ge_pa0_csb_eop                           = 0x0000002a,
ge_pa1_csb_eop                           = 0x0000002b,
ge_ngg_starved_idle                      = 0x0000002c,
ge_gsprim_send                           = 0x0000002d,
ge_esvert_send                           = 0x0000002e,
ge_ngg_starved_after_work                = 0x0000002f,
ge_ngg_subgrp_fifo_stall                 = 0x00000030,
ge_ngg_ord_id_req_stall                  = 0x00000031,
ge_ngg_indx_bus_stall                    = 0x00000032,
ge_hs_stall_tfmm_fifo_full               = 0x00000033,
ge_gs_issue_rtr_stalled                  = 0x00000034,
ge_gsprim_stalled_esvert                 = 0x00000035,
ge_gsthread_stalled                      = 0x00000036,
ge_te11_stall_prim_funnel                = 0x00000037,
ge_te11_stall_vert_funnel                = 0x00000038,
ge_ngg_attr_grp_alloc                    = 0x00000039,
ge_ngg_attr_discard_alloc                = 0x0000003a,
ge_ngg_pc_space_not_avail                = 0x0000003b,
ge_ngg_agm_req_stall                     = 0x0000003c,
ge_ngg_spi_esvert_partial_eov            = 0x0000003d,
ge_ngg_spi_gsprim_partial_eov            = 0x0000003e,
ge_spi_gsgrp_valid                       = 0x0000003f,
ge_ngg_attr_grp_latency                  = 0x00000040,
ge_ngg_reuse_prim_limit_hit              = 0x00000041,
ge_ngg_reuse_vert_limit_hit              = 0x00000042,
ge_te11_con_stall                        = 0x00000043,
ge_te11_compactor_starved                = 0x00000044,
ge_ngg_stall_tess_off_tess_on            = 0x00000045,
ge_ngg_stall_tess_on_tess_off            = 0x00000046,
} GE2_SE_PERFCOUNT_SELECT;

/*
 * VGT_DETECT_ONE enum
 */

typedef enum VGT_DETECT_ONE {
ENABLE_TF1_OPT                           = 0x00000000,
DISABLE_TF1_OPT                          = 0x00000001,
} VGT_DETECT_ONE;

/*
 * VGT_DETECT_ZERO enum
 */

typedef enum VGT_DETECT_ZERO {
ENABLE_TF0_OPT                           = 0x00000000,
DISABLE_TF0_OPT                          = 0x00000001,
} VGT_DETECT_ZERO;

/*
 * VGT_DIST_MODE enum
 */

typedef enum VGT_DIST_MODE {
NO_DIST                                  = 0x00000000,
PATCHES                                  = 0x00000001,
DONUTS                                   = 0x00000002,
TRAPEZOIDS                               = 0x00000003,
} VGT_DIST_MODE;

/*
 * VGT_DI_INDEX_SIZE enum
 */

typedef enum VGT_DI_INDEX_SIZE {
DI_INDEX_SIZE_16_BIT                     = 0x00000000,
DI_INDEX_SIZE_32_BIT                     = 0x00000001,
DI_INDEX_SIZE_8_BIT                      = 0x00000002,
} VGT_DI_INDEX_SIZE;

/*
 * VGT_DI_MAJOR_MODE_SELECT enum
 */

typedef enum VGT_DI_MAJOR_MODE_SELECT {
DI_MAJOR_MODE_0                          = 0x00000000,
DI_MAJOR_MODE_1                          = 0x00000001,
} VGT_DI_MAJOR_MODE_SELECT;

/*
 * VGT_DI_PRIM_TYPE enum
 */

typedef enum VGT_DI_PRIM_TYPE {
DI_PT_NONE                               = 0x00000000,
DI_PT_POINTLIST                          = 0x00000001,
DI_PT_LINELIST                           = 0x00000002,
DI_PT_LINESTRIP                          = 0x00000003,
DI_PT_TRILIST                            = 0x00000004,
DI_PT_TRIFAN                             = 0x00000005,
DI_PT_TRISTRIP                           = 0x00000006,
DI_PT_2D_RECTANGLE                       = 0x00000007,
DI_PT_UNUSED_1                           = 0x00000008,
DI_PT_PATCH                              = 0x00000009,
DI_PT_LINELIST_ADJ                       = 0x0000000a,
DI_PT_LINESTRIP_ADJ                      = 0x0000000b,
DI_PT_TRILIST_ADJ                        = 0x0000000c,
DI_PT_TRISTRIP_ADJ                       = 0x0000000d,
DI_PT_UNUSED_3                           = 0x0000000e,
DI_PT_UNUSED_4                           = 0x0000000f,
DI_PT_UNUSED_5                           = 0x00000010,
DI_PT_RECTLIST                           = 0x00000011,
DI_PT_LINELOOP                           = 0x00000012,
DI_PT_QUADLIST                           = 0x00000013,
DI_PT_QUADSTRIP                          = 0x00000014,
DI_PT_POLYGON                            = 0x00000015,
} VGT_DI_PRIM_TYPE;

/*
 * VGT_DI_SOURCE_SELECT enum
 */

typedef enum VGT_DI_SOURCE_SELECT {
DI_SRC_SEL_DMA                           = 0x00000000,
DI_SRC_SEL_IMMEDIATE                     = 0x00000001,
DI_SRC_SEL_AUTO_INDEX                    = 0x00000002,
DI_SRC_SEL_RESERVED                      = 0x00000003,
} VGT_DI_SOURCE_SELECT;

/*
 * VGT_DMA_BUF_TYPE enum
 */

typedef enum VGT_DMA_BUF_TYPE {
VGT_DMA_BUF_MEM                          = 0x00000000,
VGT_DMA_BUF_RING                         = 0x00000001,
VGT_DMA_BUF_SETUP                        = 0x00000002,
VGT_DMA_PTR_UPDATE                       = 0x00000003,
} VGT_DMA_BUF_TYPE;

/*
 * VGT_DMA_SWAP_MODE enum
 */

typedef enum VGT_DMA_SWAP_MODE {
VGT_DMA_SWAP_NONE                        = 0x00000000,
VGT_DMA_SWAP_16_BIT                      = 0x00000001,
VGT_DMA_SWAP_32_BIT                      = 0x00000002,
VGT_DMA_SWAP_WORD                        = 0x00000003,
} VGT_DMA_SWAP_MODE;

/*
 * VGT_EVENT_TYPE enum
 */

typedef enum VGT_EVENT_TYPE {
Reserved_0x00                            = 0x00000000,
SAMPLE_STREAMOUTSTATS1                   = 0x00000001,
SAMPLE_STREAMOUTSTATS2                   = 0x00000002,
SAMPLE_STREAMOUTSTATS3                   = 0x00000003,
CACHE_FLUSH_TS                           = 0x00000004,
CONTEXT_DONE                             = 0x00000005,
CACHE_FLUSH                              = 0x00000006,
CS_PARTIAL_FLUSH                         = 0x00000007,
VGT_STREAMOUT_SYNC                       = 0x00000008,
Reserved_0x09                            = 0x00000009,
VGT_STREAMOUT_RESET                      = 0x0000000a,
END_OF_PIPE_INCR_DE                      = 0x0000000b,
END_OF_PIPE_IB_END                       = 0x0000000c,
RST_PIX_CNT                              = 0x0000000d,
BREAK_BATCH                              = 0x0000000e,
VS_PARTIAL_FLUSH                         = 0x0000000f,
PS_PARTIAL_FLUSH                         = 0x00000010,
FLUSH_HS_OUTPUT                          = 0x00000011,
FLUSH_DFSM                               = 0x00000012,
RESET_TO_LOWEST_VGT                      = 0x00000013,
CACHE_FLUSH_AND_INV_TS_EVENT             = 0x00000014,
WAIT_SYNC                                = 0x00000015,
CACHE_FLUSH_AND_INV_EVENT                = 0x00000016,
PERFCOUNTER_START                        = 0x00000017,
PERFCOUNTER_STOP                         = 0x00000018,
PIPELINESTAT_START                       = 0x00000019,
PIPELINESTAT_STOP                        = 0x0000001a,
PERFCOUNTER_SAMPLE                       = 0x0000001b,
FLUSH_ES_OUTPUT                          = 0x0000001c,
BIN_CONF_OVERRIDE_CHECK                  = 0x0000001d,
SAMPLE_PIPELINESTAT                      = 0x0000001e,
SO_VGTSTREAMOUT_FLUSH                    = 0x0000001f,
SAMPLE_STREAMOUTSTATS                    = 0x00000020,
RESET_VTX_CNT                            = 0x00000021,
BLOCK_CONTEXT_DONE                       = 0x00000022,
CS_CONTEXT_DONE                          = 0x00000023,
VGT_FLUSH                                = 0x00000024,
TGID_ROLLOVER                            = 0x00000025,
SQ_NON_EVENT                             = 0x00000026,
SC_SEND_DB_VPZ                           = 0x00000027,
BOTTOM_OF_PIPE_TS                        = 0x00000028,
FLUSH_SX_TS                              = 0x00000029,
DB_CACHE_FLUSH_AND_INV                   = 0x0000002a,
FLUSH_AND_INV_DB_DATA_TS                 = 0x0000002b,
FLUSH_AND_INV_DB_META                    = 0x0000002c,
FLUSH_AND_INV_CB_DATA_TS                 = 0x0000002d,
FLUSH_AND_INV_CB_META                    = 0x0000002e,
CS_DONE                                  = 0x0000002f,
PS_DONE                                  = 0x00000030,
FLUSH_AND_INV_CB_PIXEL_DATA              = 0x00000031,
SX_CB_RAT_ACK_REQUEST                    = 0x00000032,
THREAD_TRACE_START                       = 0x00000033,
THREAD_TRACE_STOP                        = 0x00000034,
THREAD_TRACE_MARKER                      = 0x00000035,
THREAD_TRACE_DRAW                        = 0x00000036,
THREAD_TRACE_FINISH                      = 0x00000037,
PIXEL_PIPE_STAT_CONTROL                  = 0x00000038,
PIXEL_PIPE_STAT_DUMP                     = 0x00000039,
PIXEL_PIPE_STAT_RESET                    = 0x0000003a,
CONTEXT_SUSPEND                          = 0x0000003b,
OFFCHIP_HS_DEALLOC                       = 0x0000003c,
ENABLE_NGG_PIPELINE                      = 0x0000003d,
ENABLE_LEGACY_PIPELINE                   = 0x0000003e,
DRAW_DONE                                = 0x0000003f,
} VGT_EVENT_TYPE;

/*
 * VGT_GROUP_CONV_SEL enum
 */

typedef enum VGT_GROUP_CONV_SEL {
VGT_GRP_INDEX_16                         = 0x00000000,
VGT_GRP_INDEX_32                         = 0x00000001,
VGT_GRP_UINT_16                          = 0x00000002,
VGT_GRP_UINT_32                          = 0x00000003,
VGT_GRP_SINT_16                          = 0x00000004,
VGT_GRP_SINT_32                          = 0x00000005,
VGT_GRP_FLOAT_32                         = 0x00000006,
VGT_GRP_AUTO_PRIM                        = 0x00000007,
VGT_GRP_FIX_1_23_TO_FLOAT                = 0x00000008,
} VGT_GROUP_CONV_SEL;

/*
 * VGT_GS_MODE_TYPE enum
 */

typedef enum VGT_GS_MODE_TYPE {
GS_OFF                                   = 0x00000000,
GS_SCENARIO_A                            = 0x00000001,
GS_SCENARIO_B                            = 0x00000002,
GS_SCENARIO_G                            = 0x00000003,
GS_SCENARIO_C                            = 0x00000004,
SPRITE_EN                                = 0x00000005,
} VGT_GS_MODE_TYPE;

/*
 * VGT_GS_OUTPRIM_TYPE enum
 */

typedef enum VGT_GS_OUTPRIM_TYPE {
POINTLIST                                = 0x00000000,
LINESTRIP                                = 0x00000001,
TRISTRIP                                 = 0x00000002,
RECT_2D                                  = 0x00000003,
RECTLIST                                 = 0x00000004,
} VGT_GS_OUTPRIM_TYPE;

/*
 * VGT_INDEX_TYPE_MODE enum
 */

typedef enum VGT_INDEX_TYPE_MODE {
VGT_INDEX_16                             = 0x00000000,
VGT_INDEX_32                             = 0x00000001,
VGT_INDEX_8                              = 0x00000002,
} VGT_INDEX_TYPE_MODE;

/*
 * VGT_OUTPATH_SELECT enum
 */

typedef enum VGT_OUTPATH_SELECT {
VGT_OUTPATH_VTX_REUSE                    = 0x00000000,
VGT_OUTPATH_GS_BLOCK                     = 0x00000001,
VGT_OUTPATH_HS_BLOCK                     = 0x00000002,
VGT_OUTPATH_PRIM_GEN                     = 0x00000003,
VGT_OUTPATH_TE_PRIM_GEN                  = 0x00000004,
VGT_OUTPATH_TE_GS_BLOCK                  = 0x00000005,
VGT_OUTPATH_TE_OUTPUT                    = 0x00000006,
} VGT_OUTPATH_SELECT;

/*
 * VGT_OUT_PRIM_TYPE enum
 */

typedef enum VGT_OUT_PRIM_TYPE {
VGT_OUT_POINT                            = 0x00000000,
VGT_OUT_LINE                             = 0x00000001,
VGT_OUT_TRI                              = 0x00000002,
VGT_OUT_RECT_V0                          = 0x00000003,
VGT_OUT_RECT_V1                          = 0x00000004,
VGT_OUT_RECT_V2                          = 0x00000005,
VGT_OUT_RECT_V3                          = 0x00000006,
VGT_OUT_2D_RECT                          = 0x00000007,
VGT_TE_QUAD                              = 0x00000008,
VGT_TE_PRIM_INDEX_LINE                   = 0x00000009,
VGT_TE_PRIM_INDEX_TRI                    = 0x0000000a,
VGT_TE_PRIM_INDEX_QUAD                   = 0x0000000b,
VGT_OUT_LINE_ADJ                         = 0x0000000c,
VGT_OUT_TRI_ADJ                          = 0x0000000d,
VGT_OUT_PATCH                            = 0x0000000e,
} VGT_OUT_PRIM_TYPE;

/*
 * VGT_RDREQ_POLICY enum
 */

typedef enum VGT_RDREQ_POLICY {
VGT_POLICY_LRU                           = 0x00000000,
VGT_POLICY_STREAM                        = 0x00000001,
VGT_POLICY_BYPASS                        = 0x00000002,
} VGT_RDREQ_POLICY;

/*
 * VGT_STAGES_ES_EN enum
 */

typedef enum VGT_STAGES_ES_EN {
ES_STAGE_OFF                             = 0x00000000,
ES_STAGE_DS                              = 0x00000001,
ES_STAGE_REAL                            = 0x00000002,
RESERVED_ES                              = 0x00000003,
} VGT_STAGES_ES_EN;

/*
 * VGT_STAGES_GS_EN enum
 */

typedef enum VGT_STAGES_GS_EN {
GS_STAGE_OFF                             = 0x00000000,
GS_STAGE_ON                              = 0x00000001,
} VGT_STAGES_GS_EN;

/*
 * VGT_STAGES_HS_EN enum
 */

typedef enum VGT_STAGES_HS_EN {
HS_STAGE_OFF                             = 0x00000000,
HS_STAGE_ON                              = 0x00000001,
} VGT_STAGES_HS_EN;

/*
 * VGT_STAGES_LS_EN enum
 */

typedef enum VGT_STAGES_LS_EN {
LS_STAGE_OFF                             = 0x00000000,
LS_STAGE_ON                              = 0x00000001,
CS_STAGE_ON                              = 0x00000002,
RESERVED_LS                              = 0x00000003,
} VGT_STAGES_LS_EN;

/*
 * VGT_STAGES_VS_EN enum
 */

typedef enum VGT_STAGES_VS_EN {
VS_STAGE_REAL                            = 0x00000000,
VS_STAGE_DS                              = 0x00000001,
VS_STAGE_COPY_SHADER                     = 0x00000002,
RESERVED_VS                              = 0x00000003,
} VGT_STAGES_VS_EN;

/*
 * VGT_TESS_PARTITION enum
 */

typedef enum VGT_TESS_PARTITION {
PART_INTEGER                             = 0x00000000,
PART_POW2                                = 0x00000001,
PART_FRAC_ODD                            = 0x00000002,
PART_FRAC_EVEN                           = 0x00000003,
} VGT_TESS_PARTITION;

/*
 * VGT_TESS_TOPOLOGY enum
 */

typedef enum VGT_TESS_TOPOLOGY {
OUTPUT_POINT                             = 0x00000000,
OUTPUT_LINE                              = 0x00000001,
OUTPUT_TRIANGLE_CW                       = 0x00000002,
OUTPUT_TRIANGLE_CCW                      = 0x00000003,
} VGT_TESS_TOPOLOGY;

/*
 * VGT_TESS_TYPE enum
 */

typedef enum VGT_TESS_TYPE {
TESS_ISOLINE                             = 0x00000000,
TESS_TRIANGLE                            = 0x00000001,
TESS_QUAD                                = 0x00000002,
} VGT_TESS_TYPE;

/*
 * WD_IA_DRAW_REG_XFER enum
 */

typedef enum WD_IA_DRAW_REG_XFER {
WD_IA_DRAW_REG_XFER_IA_MULTI_VGT_PARAM   = 0x00000000,
WD_IA_DRAW_REG_XFER_VGT_MULTI_PRIM_IB_RESET_EN = 0x00000001,
WD_IA_DRAW_REG_XFER_VGT_INSTANCE_BASE_ID = 0x00000002,
WD_IA_DRAW_REG_XFER_GE_CNTL              = 0x00000003,
WD_IA_DRAW_REG_XFER_GE_USER_VGPR_EN      = 0x00000004,
WD_IA_DRAW_REG_XFER_FL_MS_WG_DIM         = 0x00000005,
WD_IA_DRAW_REG_XFER_FL_MS_WG_DIM_1       = 0x00000006,
WD_IA_DRAW_REG_XFER_FL_MS_TG_SIZE        = 0x00000007,
WD_IA_DRAW_REG_XFER_FL_MS_EXP_ALLOC      = 0x00000008,
} WD_IA_DRAW_REG_XFER;

/*
 * WD_IA_DRAW_SOURCE enum
 */

typedef enum WD_IA_DRAW_SOURCE {
WD_IA_DRAW_SOURCE_DMA                    = 0x00000000,
WD_IA_DRAW_SOURCE_IMMD                   = 0x00000001,
WD_IA_DRAW_SOURCE_AUTO                   = 0x00000002,
WD_IA_DRAW_SOURCE_OPAQ                   = 0x00000003,
} WD_IA_DRAW_SOURCE;

/*
 * WD_IA_DRAW_TYPE enum
 */

typedef enum WD_IA_DRAW_TYPE {
WD_IA_DRAW_TYPE_DI_MM0                   = 0x00000000,
WD_IA_DRAW_TYPE_REG_XFER                 = 0x00000001,
WD_IA_DRAW_TYPE_EVENT_INIT               = 0x00000002,
WD_IA_DRAW_TYPE_EVENT_ADDR               = 0x00000003,
WD_IA_DRAW_TYPE_MIN_INDX                 = 0x00000004,
WD_IA_DRAW_TYPE_MAX_INDX                 = 0x00000005,
WD_IA_DRAW_TYPE_INDX_OFF                 = 0x00000006,
WD_IA_DRAW_TYPE_IMM_DATA                 = 0x00000007,
} WD_IA_DRAW_TYPE;

/*
 * GS_THREADID_SIZE value
 */

#define GSTHREADID_SIZE                0x00000002

/*******************************************************
 * GB Enums
 *******************************************************/

/*
 * GB_EDC_DED_MODE enum
 */

typedef enum GB_EDC_DED_MODE {
GB_EDC_DED_MODE_LOG                      = 0x00000000,
GB_EDC_DED_MODE_HALT                     = 0x00000001,
GB_EDC_DED_MODE_INT_HALT                 = 0x00000002,
} GB_EDC_DED_MODE;

/*
 * VALUE_GB_TILING_CONFIG_TABLE_SIZE value
 */

#define GB_TILING_CONFIG_TABLE_SIZE    0x00000020

/*
 * VALUE_GB_TILING_CONFIG_MACROTABLE_SIZE value
 */

#define GB_TILING_CONFIG_MACROTABLE_SIZE 0x00000010

/*******************************************************
 * GLX Enums
 *******************************************************/

/*
 * CHA_PERF_SEL enum
 */

typedef enum CHA_PERF_SEL {
CHA_PERF_SEL_BUSY                        = 0x00000000,
CHA_PERF_SEL_STALL_CHC0                  = 0x00000001,
CHA_PERF_SEL_STALL_CHC1                  = 0x00000002,
CHA_PERF_SEL_STALL_CHC2                  = 0x00000003,
CHA_PERF_SEL_STALL_CHC3                  = 0x00000004,
CHA_PERF_SEL_STALL_CHC4                  = 0x00000005,
CHA_PERF_SEL_STALL_CHC5                  = 0x00000006,
CHA_PERF_SEL_REQUEST_CHC0                = 0x00000007,
CHA_PERF_SEL_REQUEST_CHC1                = 0x00000008,
CHA_PERF_SEL_REQUEST_CHC2                = 0x00000009,
CHA_PERF_SEL_REQUEST_CHC3                = 0x0000000a,
CHA_PERF_SEL_REQUEST_CHC4                = 0x0000000b,
CHA_PERF_SEL_MEM_32B_WDS_CHC0            = 0x0000000c,
CHA_PERF_SEL_MEM_32B_WDS_CHC1            = 0x0000000d,
CHA_PERF_SEL_MEM_32B_WDS_CHC2            = 0x0000000e,
CHA_PERF_SEL_MEM_32B_WDS_CHC3            = 0x0000000f,
CHA_PERF_SEL_MEM_32B_WDS_CHC4            = 0x00000010,
CHA_PERF_SEL_IO_32B_WDS_CHC0             = 0x00000011,
CHA_PERF_SEL_IO_32B_WDS_CHC1             = 0x00000012,
CHA_PERF_SEL_IO_32B_WDS_CHC2             = 0x00000013,
CHA_PERF_SEL_IO_32B_WDS_CHC3             = 0x00000014,
CHA_PERF_SEL_IO_32B_WDS_CHC4             = 0x00000015,
CHA_PERF_SEL_MEM_BURST_COUNT_CHC0        = 0x00000016,
CHA_PERF_SEL_MEM_BURST_COUNT_CHC1        = 0x00000017,
CHA_PERF_SEL_MEM_BURST_COUNT_CHC2        = 0x00000018,
CHA_PERF_SEL_MEM_BURST_COUNT_CHC3        = 0x00000019,
CHA_PERF_SEL_MEM_BURST_COUNT_CHC4        = 0x0000001a,
CHA_PERF_SEL_IO_BURST_COUNT_CHC0         = 0x0000001b,
CHA_PERF_SEL_IO_BURST_COUNT_CHC1         = 0x0000001c,
CHA_PERF_SEL_IO_BURST_COUNT_CHC2         = 0x0000001d,
CHA_PERF_SEL_IO_BURST_COUNT_CHC3         = 0x0000001e,
CHA_PERF_SEL_IO_BURST_COUNT_CHC4         = 0x0000001f,
CHA_PERF_SEL_ARB_REQUESTS                = 0x00000020,
CHA_PERF_SEL_REQ_INFLIGHT_LEVEL          = 0x00000021,
CHA_PERF_SEL_STALL_RET_CONFLICT_CHC0     = 0x00000022,
CHA_PERF_SEL_STALL_RET_CONFLICT_CHC1     = 0x00000023,
CHA_PERF_SEL_STALL_RET_CONFLICT_CHC2     = 0x00000024,
CHA_PERF_SEL_STALL_RET_CONFLICT_CHC3     = 0x00000025,
CHA_PERF_SEL_STALL_RET_CONFLICT_CHC4     = 0x00000026,
CHA_PERF_SEL_CYCLE                       = 0x00000027,
} CHA_PERF_SEL;

/*
 * CHCG_PERF_SEL enum
 */

typedef enum CHCG_PERF_SEL {
CHCG_PERF_SEL_CYCLE                      = 0x00000000,
CHCG_PERF_SEL_BUSY                       = 0x00000001,
CHCG_PERF_SEL_STARVE                     = 0x00000002,
CHCG_PERF_SEL_ARB_RET_LEVEL              = 0x00000003,
CHCG_PERF_SEL_GL2_REQ_READ_LATENCY       = 0x00000004,
CHCG_PERF_SEL_GL2_REQ_WRITE_LATENCY      = 0x00000005,
CHCG_PERF_SEL_REQ                        = 0x00000006,
CHCG_PERF_SEL_REQ_ATOMIC_WITH_RET        = 0x00000007,
CHCG_PERF_SEL_REQ_ATOMIC_WITHOUT_RET     = 0x00000008,
CHCG_PERF_SEL_REQ_NOP_ACK                = 0x00000009,
CHCG_PERF_SEL_REQ_NOP_RTN0               = 0x0000000a,
CHCG_PERF_SEL_REQ_READ                   = 0x0000000b,
CHCG_PERF_SEL_REQ_READ_128B              = 0x0000000c,
CHCG_PERF_SEL_REQ_READ_32B               = 0x0000000d,
CHCG_PERF_SEL_REQ_READ_64B               = 0x0000000e,
CHCG_PERF_SEL_REQ_WRITE                  = 0x0000000f,
CHCG_PERF_SEL_REQ_WRITE_32B              = 0x00000010,
CHCG_PERF_SEL_REQ_WRITE_64B              = 0x00000011,
CHCG_PERF_SEL_STALL_GUS_GL1              = 0x00000012,
CHCG_PERF_SEL_STALL_BUFFER_FULL          = 0x00000013,
CHCG_PERF_SEL_REQ_CLIENT0                = 0x00000014,
CHCG_PERF_SEL_REQ_CLIENT1                = 0x00000015,
CHCG_PERF_SEL_REQ_CLIENT2                = 0x00000016,
CHCG_PERF_SEL_REQ_CLIENT3                = 0x00000017,
CHCG_PERF_SEL_REQ_CLIENT4                = 0x00000018,
CHCG_PERF_SEL_REQ_CLIENT5                = 0x00000019,
CHCG_PERF_SEL_REQ_CLIENT6                = 0x0000001a,
CHCG_PERF_SEL_REQ_CLIENT7                = 0x0000001b,
CHCG_PERF_SEL_REQ_CLIENT8                = 0x0000001c,
CHCG_PERF_SEL_REQ_CLIENT9                = 0x0000001d,
CHCG_PERF_SEL_REQ_CLIENT10               = 0x0000001e,
CHCG_PERF_SEL_REQ_CLIENT11               = 0x0000001f,
CHCG_PERF_SEL_REQ_CLIENT12               = 0x00000020,
CHCG_PERF_SEL_REQ_CLIENT13               = 0x00000021,
CHCG_PERF_SEL_REQ_CLIENT14               = 0x00000022,
CHCG_PERF_SEL_REQ_CLIENT15               = 0x00000023,
CHCG_PERF_SEL_REQ_CLIENT16               = 0x00000024,
CHCG_PERF_SEL_REQ_CLIENT17               = 0x00000025,
CHCG_PERF_SEL_REQ_CLIENT18               = 0x00000026,
CHCG_PERF_SEL_REQ_CLIENT19               = 0x00000027,
CHCG_PERF_SEL_REQ_CLIENT20               = 0x00000028,
CHCG_PERF_SEL_REQ_CLIENT21               = 0x00000029,
CHCG_PERF_SEL_REQ_CLIENT22               = 0x0000002a,
CHCG_PERF_SEL_REQ_CLIENT23               = 0x0000002b,
} CHCG_PERF_SEL;

/*
 * CHC_PERF_SEL enum
 */

typedef enum CHC_PERF_SEL {
CHC_PERF_SEL_CYCLE                       = 0x00000000,
CHC_PERF_SEL_BUSY                        = 0x00000001,
CHC_PERF_SEL_STARVE                      = 0x00000002,
CHC_PERF_SEL_ARB_RET_LEVEL               = 0x00000003,
CHC_PERF_SEL_GL2_REQ_READ_LATENCY        = 0x00000004,
CHC_PERF_SEL_GL2_REQ_WRITE_LATENCY       = 0x00000005,
CHC_PERF_SEL_REQ                         = 0x00000006,
CHC_PERF_SEL_REQ_ATOMIC_WITH_RET         = 0x00000007,
CHC_PERF_SEL_REQ_ATOMIC_WITHOUT_RET      = 0x00000008,
CHC_PERF_SEL_REQ_NOP_ACK                 = 0x00000009,
CHC_PERF_SEL_REQ_NOP_RTN0                = 0x0000000a,
CHC_PERF_SEL_REQ_READ                    = 0x0000000b,
CHC_PERF_SEL_REQ_READ_128B               = 0x0000000c,
CHC_PERF_SEL_REQ_READ_32B                = 0x0000000d,
CHC_PERF_SEL_REQ_READ_64B                = 0x0000000e,
CHC_PERF_SEL_REQ_WRITE                   = 0x0000000f,
CHC_PERF_SEL_REQ_WRITE_32B               = 0x00000010,
CHC_PERF_SEL_REQ_WRITE_64B               = 0x00000011,
CHC_PERF_SEL_STALL_GL2_GL1               = 0x00000012,
CHC_PERF_SEL_STALL_BUFFER_FULL           = 0x00000013,
CHC_PERF_SEL_REQ_CLIENT0                 = 0x00000014,
CHC_PERF_SEL_REQ_CLIENT1                 = 0x00000015,
CHC_PERF_SEL_REQ_CLIENT2                 = 0x00000016,
CHC_PERF_SEL_REQ_CLIENT3                 = 0x00000017,
CHC_PERF_SEL_REQ_CLIENT4                 = 0x00000018,
CHC_PERF_SEL_REQ_CLIENT5                 = 0x00000019,
CHC_PERF_SEL_REQ_CLIENT6                 = 0x0000001a,
CHC_PERF_SEL_REQ_CLIENT7                 = 0x0000001b,
CHC_PERF_SEL_REQ_CLIENT8                 = 0x0000001c,
CHC_PERF_SEL_REQ_CLIENT9                 = 0x0000001d,
CHC_PERF_SEL_REQ_CLIENT10                = 0x0000001e,
CHC_PERF_SEL_REQ_CLIENT11                = 0x0000001f,
CHC_PERF_SEL_REQ_CLIENT12                = 0x00000020,
CHC_PERF_SEL_REQ_CLIENT13                = 0x00000021,
CHC_PERF_SEL_REQ_CLIENT14                = 0x00000022,
CHC_PERF_SEL_REQ_CLIENT15                = 0x00000023,
CHC_PERF_SEL_REQ_CLIENT16                = 0x00000024,
CHC_PERF_SEL_REQ_CLIENT17                = 0x00000025,
CHC_PERF_SEL_REQ_CLIENT18                = 0x00000026,
CHC_PERF_SEL_REQ_CLIENT19                = 0x00000027,
CHC_PERF_SEL_REQ_CLIENT20                = 0x00000028,
CHC_PERF_SEL_REQ_CLIENT21                = 0x00000029,
CHC_PERF_SEL_REQ_CLIENT22                = 0x0000002a,
CHC_PERF_SEL_REQ_CLIENT23                = 0x0000002b,
} CHC_PERF_SEL;

/*
 * GL1A_PERF_SEL enum
 */

typedef enum GL1A_PERF_SEL {
GL1A_PERF_SEL_BUSY                       = 0x00000000,
GL1A_PERF_SEL_STALL_GL1C0                = 0x00000001,
GL1A_PERF_SEL_STALL_GL1C1                = 0x00000002,
GL1A_PERF_SEL_STALL_GL1C2                = 0x00000003,
GL1A_PERF_SEL_STALL_GL1C3                = 0x00000004,
GL1A_PERF_SEL_REQUEST_GL1C0              = 0x00000005,
GL1A_PERF_SEL_REQUEST_GL1C1              = 0x00000006,
GL1A_PERF_SEL_REQUEST_GL1C2              = 0x00000007,
GL1A_PERF_SEL_REQUEST_GL1C3              = 0x00000008,
GL1A_PERF_SEL_WDS_32B_GL1C0              = 0x00000009,
GL1A_PERF_SEL_WDS_32B_GL1C1              = 0x0000000a,
GL1A_PERF_SEL_WDS_32B_GL1C2              = 0x0000000b,
GL1A_PERF_SEL_WDS_32B_GL1C3              = 0x0000000c,
GL1A_PERF_SEL_BURST_COUNT_GL1C0          = 0x0000000d,
GL1A_PERF_SEL_BURST_COUNT_GL1C1          = 0x0000000e,
GL1A_PERF_SEL_BURST_COUNT_GL1C2          = 0x0000000f,
GL1A_PERF_SEL_BURST_COUNT_GL1C3          = 0x00000010,
GL1A_PERF_SEL_ARB_REQUESTS               = 0x00000011,
GL1A_PERF_SEL_REQ_INFLIGHT_LEVEL         = 0x00000012,
GL1A_PERF_SEL_STALL_RET_CONFLICT_GL1C0   = 0x00000013,
GL1A_PERF_SEL_STALL_RET_CONFLICT_GL1C1   = 0x00000014,
GL1A_PERF_SEL_STALL_RET_CONFLICT_GL1C2   = 0x00000015,
GL1A_PERF_SEL_STALL_RET_CONFLICT_GL1C3   = 0x00000016,
GL1A_PERF_SEL_CYCLE                      = 0x00000017,
} GL1A_PERF_SEL;

/*
 * GL1C_PERF_SEL enum
 */

typedef enum GL1C_PERF_SEL {
GL1C_PERF_SEL_CYCLE                      = 0x00000000,
GL1C_PERF_SEL_BUSY                       = 0x00000001,
GL1C_PERF_SEL_STARVE                     = 0x00000002,
GL1C_PERF_SEL_ARB_RET_LEVEL              = 0x00000003,
GL1C_PERF_SEL_GL2_REQ_READ               = 0x00000004,
GL1C_PERF_SEL_GL2_REQ_READ_128B          = 0x00000005,
GL1C_PERF_SEL_GL2_REQ_READ_32B           = 0x00000006,
GL1C_PERF_SEL_GL2_REQ_READ_64B           = 0x00000007,
GL1C_PERF_SEL_GL2_REQ_READ_LATENCY       = 0x00000008,
GL1C_PERF_SEL_GL2_REQ_WRITE              = 0x00000009,
GL1C_PERF_SEL_GL2_REQ_WRITE_32B          = 0x0000000a,
GL1C_PERF_SEL_GL2_REQ_WRITE_64B          = 0x0000000b,
GL1C_PERF_SEL_GL2_REQ_WRITE_LATENCY      = 0x0000000c,
GL1C_PERF_SEL_GL2_REQ_PREFETCH           = 0x0000000d,
GL1C_PERF_SEL_REQ                        = 0x0000000e,
GL1C_PERF_SEL_REQ_ATOMIC_WITH_RET        = 0x0000000f,
GL1C_PERF_SEL_REQ_ATOMIC_WITHOUT_RET     = 0x00000010,
GL1C_PERF_SEL_REQ_SHADER_INV             = 0x00000011,
GL1C_PERF_SEL_REQ_MISS                   = 0x00000012,
GL1C_PERF_SEL_REQ_NOP_ACK                = 0x00000013,
GL1C_PERF_SEL_REQ_NOP_RTN0               = 0x00000014,
GL1C_PERF_SEL_REQ_READ                   = 0x00000015,
GL1C_PERF_SEL_REQ_READ_128B              = 0x00000016,
GL1C_PERF_SEL_REQ_READ_32B               = 0x00000017,
GL1C_PERF_SEL_REQ_READ_64B               = 0x00000018,
GL1C_PERF_SEL_REQ_READ_POLICY_HIT_EVICT  = 0x00000019,
GL1C_PERF_SEL_REQ_READ_POLICY_HIT_LRU    = 0x0000001a,
GL1C_PERF_SEL_REQ_READ_POLICY_MISS_EVICT = 0x0000001b,
GL1C_PERF_SEL_REQ_WRITE                  = 0x0000001c,
GL1C_PERF_SEL_REQ_WRITE_32B              = 0x0000001d,
GL1C_PERF_SEL_REQ_WRITE_64B              = 0x0000001e,
GL1C_PERF_SEL_STALL_GL2_GL1              = 0x0000001f,
GL1C_PERF_SEL_STALL_LFIFO_FULL           = 0x00000020,
GL1C_PERF_SEL_STALL_NO_AVAILABLE_ACK_ALLOC = 0x00000021,
GL1C_PERF_SEL_STALL_NOTHING_REPLACEABLE  = 0x00000022,
GL1C_PERF_SEL_STALL_GCR_INV              = 0x00000023,
GL1C_PERF_SEL_STALL_VM                   = 0x00000024,
GL1C_PERF_SEL_REQ_CLIENT0                = 0x00000025,
GL1C_PERF_SEL_REQ_CLIENT1                = 0x00000026,
GL1C_PERF_SEL_REQ_CLIENT2                = 0x00000027,
GL1C_PERF_SEL_REQ_CLIENT3                = 0x00000028,
GL1C_PERF_SEL_REQ_CLIENT4                = 0x00000029,
GL1C_PERF_SEL_REQ_CLIENT5                = 0x0000002a,
GL1C_PERF_SEL_REQ_CLIENT6                = 0x0000002b,
GL1C_PERF_SEL_REQ_CLIENT7                = 0x0000002c,
GL1C_PERF_SEL_REQ_CLIENT8                = 0x0000002d,
GL1C_PERF_SEL_REQ_CLIENT9                = 0x0000002e,
GL1C_PERF_SEL_REQ_CLIENT10               = 0x0000002f,
GL1C_PERF_SEL_REQ_CLIENT11               = 0x00000030,
GL1C_PERF_SEL_REQ_CLIENT12               = 0x00000031,
GL1C_PERF_SEL_REQ_CLIENT13               = 0x00000032,
GL1C_PERF_SEL_REQ_CLIENT14               = 0x00000033,
GL1C_PERF_SEL_REQ_CLIENT15               = 0x00000034,
GL1C_PERF_SEL_REQ_CLIENT16               = 0x00000035,
GL1C_PERF_SEL_REQ_CLIENT17               = 0x00000036,
GL1C_PERF_SEL_REQ_CLIENT18               = 0x00000037,
GL1C_PERF_SEL_REQ_CLIENT19               = 0x00000038,
GL1C_PERF_SEL_REQ_CLIENT20               = 0x00000039,
GL1C_PERF_SEL_REQ_CLIENT21               = 0x0000003a,
GL1C_PERF_SEL_REQ_CLIENT22               = 0x0000003b,
GL1C_PERF_SEL_REQ_CLIENT23               = 0x0000003c,
GL1C_PERF_SEL_REQ_CLIENT24               = 0x0000003d,
GL1C_PERF_SEL_REQ_CLIENT25               = 0x0000003e,
GL1C_PERF_SEL_REQ_CLIENT26               = 0x0000003f,
GL1C_PERF_SEL_REQ_CLIENT27               = 0x00000040,
GL1C_PERF_SEL_UTCL0_REQUEST              = 0x00000041,
GL1C_PERF_SEL_UTCL0_TRANSLATION_HIT      = 0x00000042,
GL1C_PERF_SEL_UTCL0_TRANSLATION_MISS     = 0x00000043,
GL1C_PERF_SEL_UTCL0_PERMISSION_MISS      = 0x00000044,
GL1C_PERF_SEL_UTCL0_MISS_UNDER_MISS      = 0x00000045,
GL1C_PERF_SEL_UTCL0_LFIFO_FULL           = 0x00000046,
GL1C_PERF_SEL_UTCL0_STALL_INFLIGHT_MAX   = 0x00000047,
GL1C_PERF_SEL_UTCL0_STALL_LFIFO_NOT_RES  = 0x00000048,
GL1C_PERF_SEL_UTCL0_STALL_LRU_INFLIGHT   = 0x00000049,
GL1C_PERF_SEL_UTCL0_STALL_MISSFIFO_FULL  = 0x0000004a,
GL1C_PERF_SEL_UTCL0_STALL_MULTI_MISS     = 0x0000004b,
GL1C_PERF_SEL_UTCL0_STALL_UTCL1_REQ_OUT_OF_CREDITS = 0x0000004c,
GL1C_PERF_SEL_UTCL0_UTCL1_PERM_FAULT     = 0x0000004d,
GL1C_PERF_SEL_CLIENT_UTCL0_INFLIGHT      = 0x0000004e,
GL1C_PERF_SEL_UTCL0_UTCL1_INFLIGHT       = 0x0000004f,
GL1C_PERF_SEL_UTCL0_INTERNAL_RETRY_REQ   = 0x00000050,
GL1C_PERF_SEL_UTCL0_UTCL1_XNACK_RETRY_FAULT = 0x00000051,
GL1C_PERF_SEL_UTCL0_UTCL1_XNACK_PRT_FAULT = 0x00000052,
GL1C_PERF_SEL_UTCL0_UTCL1_XNACK_NO_RETRY_FAULT = 0x00000053,
} GL1C_PERF_SEL;

/*******************************************************
 * GL1H Enums
 *******************************************************/

/*
 * GL1H_REQ_PERF_SEL enum
 */

typedef enum GL1H_REQ_PERF_SEL {
GL1H_REQ_PERF_SEL_BUSY                   = 0x00000000,
GL1H_REQ_PERF_SEL_STALL_GL1_0            = 0x00000001,
GL1H_REQ_PERF_SEL_STALL_GL1_1            = 0x00000002,
GL1H_REQ_PERF_SEL_REQUEST_GL1_0          = 0x00000003,
GL1H_REQ_PERF_SEL_REQUEST_GL1_1          = 0x00000004,
GL1H_REQ_PERF_SEL_WDS_32B_GL1_0          = 0x00000005,
GL1H_REQ_PERF_SEL_WDS_32B_GL1_1          = 0x00000006,
GL1H_REQ_PERF_SEL_BURST_COUNT_GL1_0      = 0x00000007,
GL1H_REQ_PERF_SEL_BURST_COUNT_GL1_1      = 0x00000008,
GL1H_REQ_PERF_SEL_ARB_REQUESTS           = 0x00000009,
GL1H_REQ_PERF_SEL_REQ_INFLIGHT_LEVEL     = 0x0000000a,
GL1H_REQ_PERF_SEL_CYCLE                  = 0x0000000b,
} GL1H_REQ_PERF_SEL;

/*******************************************************
 * TA Enums
 *******************************************************/

/*
 * TA_PERFCOUNT_SEL enum
 */

typedef enum TA_PERFCOUNT_SEL {
TA_PERF_SEL_NULL                         = 0x00000000,
TA_PERF_SEL_image_sampler_has_offset_instructions = 0x00000001,
TA_PERF_SEL_image_sampler_has_bias_instructions = 0x00000002,
TA_PERF_SEL_image_sampler_has_reference_instructions = 0x00000003,
TA_PERF_SEL_image_sampler_has_ds_instructions = 0x00000004,
TA_PERF_SEL_image_sampler_has_dt_instructions = 0x00000005,
TA_PERF_SEL_image_sampler_has_dr_instructions = 0x00000006,
TA_PERF_SEL_gradient_busy                = 0x00000007,
TA_PERF_SEL_gradient_fifo_busy           = 0x00000008,
TA_PERF_SEL_lod_busy                     = 0x00000009,
TA_PERF_SEL_lod_fifo_busy                = 0x0000000a,
TA_PERF_SEL_addresser_busy               = 0x0000000b,
TA_PERF_SEL_addresser_fifo_busy          = 0x0000000c,
TA_PERF_SEL_aligner_busy                 = 0x0000000d,
TA_PERF_SEL_write_path_busy              = 0x0000000e,
TA_PERF_SEL_ta_busy                      = 0x0000000f,
TA_PERF_SEL_image_sampler_1_input_vgpr_instructions = 0x00000010,
TA_PERF_SEL_image_sampler_2_input_vgpr_instructions = 0x00000011,
TA_PERF_SEL_image_sampler_3_input_vgpr_instructions = 0x00000012,
TA_PERF_SEL_image_sampler_4_input_vgpr_instructions = 0x00000013,
TA_PERF_SEL_image_sampler_5_input_vgpr_instructions = 0x00000014,
TA_PERF_SEL_image_sampler_6_input_vgpr_instructions = 0x00000015,
TA_PERF_SEL_image_sampler_7_input_vgpr_instructions = 0x00000016,
TA_PERF_SEL_image_sampler_8_input_vgpr_instructions = 0x00000017,
TA_PERF_SEL_image_sampler_9_input_vgpr_instructions = 0x00000018,
TA_PERF_SEL_image_sampler_10_input_vgpr_instructions = 0x00000019,
TA_PERF_SEL_image_sampler_11_input_vgpr_instructions = 0x0000001a,
TA_PERF_SEL_image_sampler_12_input_vgpr_instructions = 0x0000001b,
TA_PERF_SEL_image_sampler_has_t_instructions = 0x0000001c,
TA_PERF_SEL_image_sampler_has_r_instructions = 0x0000001d,
TA_PERF_SEL_image_sampler_has_q_instructions = 0x0000001e,
TA_PERF_SEL_total_wavefronts             = 0x00000020,
TA_PERF_SEL_gradient_cycles              = 0x00000021,
TA_PERF_SEL_walker_cycles                = 0x00000022,
TA_PERF_SEL_aligner_cycles               = 0x00000023,
TA_PERF_SEL_image_wavefronts             = 0x00000024,
TA_PERF_SEL_image_read_wavefronts        = 0x00000025,
TA_PERF_SEL_image_store_wavefronts       = 0x00000026,
TA_PERF_SEL_image_atomic_wavefronts      = 0x00000027,
TA_PERF_SEL_image_sampler_total_cycles   = 0x00000028,
TA_PERF_SEL_image_nosampler_total_cycles = 0x00000029,
TA_PERF_SEL_flat_total_cycles            = 0x0000002a,
TA_PERF_SEL_bvh_total_cycles             = 0x0000002b,
TA_PERF_SEL_buffer_wavefronts            = 0x0000002c,
TA_PERF_SEL_buffer_load_wavefronts       = 0x0000002d,
TA_PERF_SEL_buffer_store_wavefronts      = 0x0000002e,
TA_PERF_SEL_buffer_atomic_wavefronts     = 0x0000002f,
TA_PERF_SEL_buffer_total_cycles          = 0x00000031,
TA_PERF_SEL_buffer_1_address_input_vgpr_instructions = 0x00000032,
TA_PERF_SEL_buffer_2_address_input_vgpr_instructions = 0x00000033,
TA_PERF_SEL_buffer_has_index_instructions = 0x00000034,
TA_PERF_SEL_buffer_has_offset_instructions = 0x00000035,
TA_PERF_SEL_addr_stalled_by_tc_cycles    = 0x00000036,
TA_PERF_SEL_addr_stalled_by_td_cycles    = 0x00000037,
TA_PERF_SEL_image_sampler_wavefronts     = 0x00000038,
TA_PERF_SEL_addresser_stalled_by_aligner_only_cycles = 0x00000039,
TA_PERF_SEL_addresser_stalled_cycles     = 0x0000003a,
TA_PERF_SEL_aniso_stalled_by_addresser_only_cycles = 0x0000003b,
TA_PERF_SEL_aniso_stalled_cycles         = 0x0000003c,
TA_PERF_SEL_deriv_stalled_by_aniso_only_cycles = 0x0000003d,
TA_PERF_SEL_deriv_stalled_cycles         = 0x0000003e,
TA_PERF_SEL_aniso_gt1_cycle_quads        = 0x0000003f,
TA_PERF_SEL_color_1_cycle_quads          = 0x00000040,
TA_PERF_SEL_color_2_cycle_quads          = 0x00000041,
TA_PERF_SEL_color_3_cycle_quads          = 0x00000042,
TA_PERF_SEL_mip_1_cycle_quads            = 0x00000044,
TA_PERF_SEL_mip_2_cycle_quads            = 0x00000045,
TA_PERF_SEL_vol_1_cycle_quads            = 0x00000046,
TA_PERF_SEL_vol_2_cycle_quads            = 0x00000047,
TA_PERF_SEL_sampler_op_quads             = 0x00000048,
TA_PERF_SEL_mipmap_lod_0_samples         = 0x00000049,
TA_PERF_SEL_mipmap_lod_1_samples         = 0x0000004a,
TA_PERF_SEL_mipmap_lod_2_samples         = 0x0000004b,
TA_PERF_SEL_mipmap_lod_3_samples         = 0x0000004c,
TA_PERF_SEL_mipmap_lod_4_samples         = 0x0000004d,
TA_PERF_SEL_mipmap_lod_5_samples         = 0x0000004e,
TA_PERF_SEL_mipmap_lod_6_samples         = 0x0000004f,
TA_PERF_SEL_mipmap_lod_7_samples         = 0x00000050,
TA_PERF_SEL_mipmap_lod_8_samples         = 0x00000051,
TA_PERF_SEL_mipmap_lod_9_samples         = 0x00000052,
TA_PERF_SEL_mipmap_lod_10_samples        = 0x00000053,
TA_PERF_SEL_mipmap_lod_11_samples        = 0x00000054,
TA_PERF_SEL_mipmap_lod_12_samples        = 0x00000055,
TA_PERF_SEL_mipmap_lod_13_samples        = 0x00000056,
TA_PERF_SEL_mipmap_lod_14_samples        = 0x00000057,
TA_PERF_SEL_mipmap_invalid_samples       = 0x00000058,
TA_PERF_SEL_aniso_1_cycle_quads          = 0x00000059,
TA_PERF_SEL_aniso_2_cycle_quads          = 0x0000005a,
TA_PERF_SEL_aniso_4_cycle_quads          = 0x0000005b,
TA_PERF_SEL_aniso_6_cycle_quads          = 0x0000005c,
TA_PERF_SEL_aniso_8_cycle_quads          = 0x0000005d,
TA_PERF_SEL_aniso_10_cycle_quads         = 0x0000005e,
TA_PERF_SEL_aniso_12_cycle_quads         = 0x0000005f,
TA_PERF_SEL_aniso_14_cycle_quads         = 0x00000060,
TA_PERF_SEL_aniso_16_cycle_quads         = 0x00000061,
TA_PERF_SEL_store_write_data_input_cycles = 0x00000062,
TA_PERF_SEL_store_write_data_output_cycles = 0x00000063,
TA_PERF_SEL_flat_wavefronts              = 0x00000064,
TA_PERF_SEL_flat_load_wavefronts         = 0x00000065,
TA_PERF_SEL_flat_store_wavefronts        = 0x00000066,
TA_PERF_SEL_flat_atomic_wavefronts       = 0x00000067,
TA_PERF_SEL_flat_1_address_input_vgpr_instructions = 0x00000068,
TA_PERF_SEL_register_clk_valid_cycles    = 0x00000069,
TA_PERF_SEL_non_harvestable_clk_enabled_cycles = 0x0000006a,
TA_PERF_SEL_harvestable_clk_enabled_cycles = 0x0000006b,
TA_PERF_SEL_harvestable_register_clk_enabled_cycles = 0x0000006c,
TA_PERF_SEL_boundary_non_harvestable_clk_enabled_cycles = 0x0000006d,
TA_PERF_SEL_boundary_harvestable_clk_enabled_cycles = 0x0000006e,
TA_PERF_SEL_store_2_write_data_vgpr_instructions = 0x00000072,
TA_PERF_SEL_store_3_write_data_vgpr_instructions = 0x00000073,
TA_PERF_SEL_store_4_write_data_vgpr_instructions = 0x00000074,
TA_PERF_SEL_store_has_x_instructions     = 0x00000075,
TA_PERF_SEL_store_has_y_instructions     = 0x00000076,
TA_PERF_SEL_store_has_z_instructions     = 0x00000077,
TA_PERF_SEL_store_has_w_instructions     = 0x00000078,
TA_PERF_SEL_image_nosampler_has_t_instructions = 0x00000079,
TA_PERF_SEL_image_nosampler_has_r_instructions = 0x0000007a,
TA_PERF_SEL_image_nosampler_has_q_instructions = 0x0000007b,
TA_PERF_SEL_image_nosampler_1_address_input_vgpr_instructions = 0x0000007c,
TA_PERF_SEL_image_nosampler_2_address_input_vgpr_instructions = 0x0000007d,
TA_PERF_SEL_image_nosampler_3_address_input_vgpr_instructions = 0x0000007e,
TA_PERF_SEL_image_nosampler_4_address_input_vgpr_instructions = 0x0000007f,
TA_PERF_SEL_in_busy                      = 0x00000080,
TA_PERF_SEL_in_fifos_busy                = 0x00000081,
TA_PERF_SEL_in_cfifo_busy                = 0x00000082,
TA_PERF_SEL_in_qfifo_busy                = 0x00000083,
TA_PERF_SEL_in_wfifo_busy                = 0x00000084,
TA_PERF_SEL_in_rfifo_busy                = 0x00000085,
TA_PERF_SEL_bf_busy                      = 0x00000086,
TA_PERF_SEL_ns_busy                      = 0x00000087,
TA_PERF_SEL_smp_busy_ns_idle             = 0x00000088,
TA_PERF_SEL_smp_idle_ns_busy             = 0x00000089,
TA_PERF_SEL_vmemcmd_cycles               = 0x00000090,
TA_PERF_SEL_vmemreq_cycles               = 0x00000091,
TA_PERF_SEL_in_waiting_on_req_cycles     = 0x00000092,
TA_PERF_SEL_in_addr_cycles               = 0x00000096,
TA_PERF_SEL_in_data_cycles               = 0x00000097,
TA_PERF_SEL_latency_ram_weights_written_cycles = 0x0000009a,
TA_PERF_SEL_latency_ram_ws_required_quads = 0x0000009b,
TA_PERF_SEL_latency_ram_whv_required_quads = 0x0000009c,
TA_PERF_SEL_latency_ram_ws_required_instructions = 0x0000009d,
TA_PERF_SEL_latency_ram_whv_required_instructions = 0x0000009e,
TA_PERF_SEL_latency_ram_ref_required_instructions = 0x0000009f,
TA_PERF_SEL_point_sampled_quads          = 0x000000a0,
TA_PERF_SEL_atomic_2_write_data_vgpr_instructions = 0x000000a2,
TA_PERF_SEL_atomic_4_write_data_vgpr_instructions = 0x000000a3,
TA_PERF_SEL_atomic_write_data_input_cycles = 0x000000a4,
TA_PERF_SEL_atomic_write_data_output_cycles = 0x000000a5,
TA_PERF_SEL_num_unlit_nodes_ta_opt       = 0x000000ad,
TA_PERF_SEL_num_nodes_invalidated_due_to_bad_input = 0x000000ae,
TA_PERF_SEL_num_nodes_invalidated_due_to_oob = 0x000000af,
TA_PERF_SEL_num_of_bvh_valid_first_tri   = 0x000000b0,
TA_PERF_SEL_num_of_bvh_valid_second_tri  = 0x000000b1,
TA_PERF_SEL_num_of_bvh_valid_third_tri   = 0x000000b2,
TA_PERF_SEL_num_of_bvh_valid_fourth_tri  = 0x000000b3,
TA_PERF_SEL_num_of_bvh_valid_fp16_box    = 0x000000b4,
TA_PERF_SEL_num_of_bvh_valid_fp32_box    = 0x000000b5,
TA_PERF_SEL_num_of_bvh_invalidated_first_tri = 0x000000b6,
TA_PERF_SEL_num_of_bvh_invalidated_second_tri = 0x000000b7,
TA_PERF_SEL_num_of_bvh_invalidated_third_tri = 0x000000b8,
TA_PERF_SEL_num_of_bvh_invalidated_fourth_tri = 0x000000b9,
TA_PERF_SEL_num_of_bvh_invalidated_fp16_box = 0x000000ba,
TA_PERF_SEL_num_of_bvh_invalidated_fp32_box = 0x000000bb,
TA_PERF_SEL_image_bvh_8_input_vgpr_instructions = 0x000000bc,
TA_PERF_SEL_image_bvh_9_input_vgpr_instructions = 0x000000bd,
TA_PERF_SEL_image_bvh_11_input_vgpr_instructions = 0x000000be,
TA_PERF_SEL_image_bvh_12_input_vgpr_instructions = 0x000000bf,
TA_PERF_SEL_image_sampler_1_op_burst     = 0x000000c0,
TA_PERF_SEL_image_sampler_2to3_op_burst  = 0x000000c1,
TA_PERF_SEL_image_sampler_4to7_op_burst  = 0x000000c2,
TA_PERF_SEL_image_sampler_ge8_op_burst   = 0x000000c3,
TA_PERF_SEL_image_linked_1_op_burst      = 0x000000c4,
TA_PERF_SEL_image_linked_2to3_op_burst   = 0x000000c5,
TA_PERF_SEL_image_linked_4to7_op_burst   = 0x000000c6,
TA_PERF_SEL_image_linked_ge8_op_burst    = 0x000000c7,
TA_PERF_SEL_image_bvh_1_op_burst         = 0x000000c8,
TA_PERF_SEL_image_bvh_2to3_op_burst      = 0x000000c9,
TA_PERF_SEL_image_bvh_4to7_op_burst      = 0x000000ca,
TA_PERF_SEL_image_bvh_ge8_op_burst       = 0x000000cb,
TA_PERF_SEL_image_nosampler_1_op_burst   = 0x000000cc,
TA_PERF_SEL_image_nosampler_2to3_op_burst = 0x000000cd,
TA_PERF_SEL_image_nosampler_4to31_op_burst = 0x000000ce,
TA_PERF_SEL_image_nosampler_ge32_op_burst = 0x000000cf,
TA_PERF_SEL_buffer_flat_1_op_burst       = 0x000000d0,
TA_PERF_SEL_buffer_flat_2to3_op_burst    = 0x000000d1,
TA_PERF_SEL_buffer_flat_4to31_op_burst   = 0x000000d2,
TA_PERF_SEL_buffer_flat_ge32_op_burst    = 0x000000d3,
TA_PERF_SEL_write_1_op_burst             = 0x000000d4,
TA_PERF_SEL_write_2to3_op_burst          = 0x000000d5,
TA_PERF_SEL_write_4to31_op_burst         = 0x000000d6,
TA_PERF_SEL_write_ge32_op_burst          = 0x000000d7,
TA_PERF_SEL_ibubble_1_cycle_burst        = 0x000000d8,
TA_PERF_SEL_ibubble_2to3_cycle_burst     = 0x000000d9,
TA_PERF_SEL_ibubble_4to15_cycle_burst    = 0x000000da,
TA_PERF_SEL_ibubble_16to31_cycle_burst   = 0x000000db,
TA_PERF_SEL_ibubble_32to63_cycle_burst   = 0x000000dc,
TA_PERF_SEL_ibubble_ge64_cycle_burst     = 0x000000dd,
TA_PERF_SEL_sampler_clk_valid_cycles     = 0x000000e0,
TA_PERF_SEL_nonsampler_clk_valid_cycles  = 0x000000e1,
TA_PERF_SEL_buffer_flat_clk_valid_cycles = 0x000000e2,
TA_PERF_SEL_write_data_clk_valid_cycles  = 0x000000e3,
TA_PERF_SEL_gradient_clk_valid_cycles    = 0x000000e4,
TA_PERF_SEL_lod_aniso_clk_valid_cycles   = 0x000000e5,
TA_PERF_SEL_sampler_addressing_clk_valid_cycles = 0x000000e6,
TA_PERF_SEL_sync_sampler_sstate_fifo_clk_valid_cycles = 0x000000e7,
TA_PERF_SEL_sync_sampler_cstate_fifo_clk_valid_cycles = 0x000000e8,
TA_PERF_SEL_sync_nonsampler_fifo_clk_valid_cycles = 0x000000e9,
TA_PERF_SEL_aligner_clk_valid_cycles     = 0x000000ea,
TA_PERF_SEL_tcreq_clk_valid_cycles       = 0x000000eb,
} TA_PERFCOUNT_SEL;

/*
 * TEX_BC_SWIZZLE enum
 */

typedef enum TEX_BC_SWIZZLE {
TEX_BC_Swizzle_XYZW                      = 0x00000000,
TEX_BC_Swizzle_XWYZ                      = 0x00000001,
TEX_BC_Swizzle_WZYX                      = 0x00000002,
TEX_BC_Swizzle_WXYZ                      = 0x00000003,
TEX_BC_Swizzle_ZYXW                      = 0x00000004,
TEX_BC_Swizzle_YXWZ                      = 0x00000005,
} TEX_BC_SWIZZLE;

/*
 * TEX_BORDER_COLOR_TYPE enum
 */

typedef enum TEX_BORDER_COLOR_TYPE {
TEX_BorderColor_TransparentBlack         = 0x00000000,
TEX_BorderColor_OpaqueBlack              = 0x00000001,
TEX_BorderColor_OpaqueWhite              = 0x00000002,
TEX_BorderColor_Register                 = 0x00000003,
} TEX_BORDER_COLOR_TYPE;

/*
 * TEX_CHROMA_KEY enum
 */

typedef enum TEX_CHROMA_KEY {
TEX_ChromaKey_Disabled                   = 0x00000000,
TEX_ChromaKey_Kill                       = 0x00000001,
TEX_ChromaKey_Blend                      = 0x00000002,
TEX_ChromaKey_RESERVED_3                 = 0x00000003,
} TEX_CHROMA_KEY;

/*
 * TEX_CLAMP enum
 */

typedef enum TEX_CLAMP {
TEX_Clamp_Repeat                         = 0x00000000,
TEX_Clamp_Mirror                         = 0x00000001,
TEX_Clamp_ClampToLast                    = 0x00000002,
TEX_Clamp_MirrorOnceToLast               = 0x00000003,
TEX_Clamp_ClampHalfToBorder              = 0x00000004,
TEX_Clamp_MirrorOnceHalfToBorder         = 0x00000005,
TEX_Clamp_ClampToBorder                  = 0x00000006,
TEX_Clamp_MirrorOnceToBorder             = 0x00000007,
} TEX_CLAMP;

/*
 * TEX_COORD_TYPE enum
 */

typedef enum TEX_COORD_TYPE {
TEX_CoordType_Unnormalized               = 0x00000000,
TEX_CoordType_Normalized                 = 0x00000001,
} TEX_COORD_TYPE;

/*
 * TEX_DEPTH_COMPARE_FUNCTION enum
 */

typedef enum TEX_DEPTH_COMPARE_FUNCTION {
TEX_DepthCompareFunction_Never           = 0x00000000,
TEX_DepthCompareFunction_Less            = 0x00000001,
TEX_DepthCompareFunction_Equal           = 0x00000002,
TEX_DepthCompareFunction_LessEqual       = 0x00000003,
TEX_DepthCompareFunction_Greater         = 0x00000004,
TEX_DepthCompareFunction_NotEqual        = 0x00000005,
TEX_DepthCompareFunction_GreaterEqual    = 0x00000006,
TEX_DepthCompareFunction_Always          = 0x00000007,
} TEX_DEPTH_COMPARE_FUNCTION;

/*
 * TEX_FORMAT_COMP enum
 */

typedef enum TEX_FORMAT_COMP {
TEX_FormatComp_Unsigned                  = 0x00000000,
TEX_FormatComp_Signed                    = 0x00000001,
TEX_FormatComp_UnsignedBiased            = 0x00000002,
TEX_FormatComp_RESERVED_3                = 0x00000003,
} TEX_FORMAT_COMP;

/*
 * TEX_MAX_ANISO_RATIO enum
 */

typedef enum TEX_MAX_ANISO_RATIO {
TEX_MaxAnisoRatio_1to1                   = 0x00000000,
TEX_MaxAnisoRatio_2to1                   = 0x00000001,
TEX_MaxAnisoRatio_4to1                   = 0x00000002,
TEX_MaxAnisoRatio_8to1                   = 0x00000003,
TEX_MaxAnisoRatio_16to1                  = 0x00000004,
TEX_MaxAnisoRatio_RESERVED_5             = 0x00000005,
TEX_MaxAnisoRatio_RESERVED_6             = 0x00000006,
TEX_MaxAnisoRatio_RESERVED_7             = 0x00000007,
} TEX_MAX_ANISO_RATIO;

/*
 * TEX_MIP_FILTER enum
 */

typedef enum TEX_MIP_FILTER {
TEX_MipFilter_None                       = 0x00000000,
TEX_MipFilter_Point                      = 0x00000001,
TEX_MipFilter_Linear                     = 0x00000002,
TEX_MipFilter_Point_Aniso_Adj            = 0x00000003,
} TEX_MIP_FILTER;

/*
 * TEX_REQUEST_SIZE enum
 */

typedef enum TEX_REQUEST_SIZE {
TEX_RequestSize_32B                      = 0x00000000,
TEX_RequestSize_64B                      = 0x00000001,
TEX_RequestSize_128B                     = 0x00000002,
TEX_RequestSize_2X64B                    = 0x00000003,
} TEX_REQUEST_SIZE;

/*
 * TEX_SAMPLER_TYPE enum
 */

typedef enum TEX_SAMPLER_TYPE {
TEX_SamplerType_Invalid                  = 0x00000000,
TEX_SamplerType_Valid                    = 0x00000001,
} TEX_SAMPLER_TYPE;

/*
 * TEX_XY_FILTER enum
 */

typedef enum TEX_XY_FILTER {
TEX_XYFilter_Point                       = 0x00000000,
TEX_XYFilter_Linear                      = 0x00000001,
TEX_XYFilter_AnisoPoint                  = 0x00000002,
TEX_XYFilter_AnisoLinear                 = 0x00000003,
} TEX_XY_FILTER;

/*
 * TEX_Z_FILTER enum
 */

typedef enum TEX_Z_FILTER {
TEX_ZFilter_None                         = 0x00000000,
TEX_ZFilter_Point                        = 0x00000001,
TEX_ZFilter_Linear                       = 0x00000002,
TEX_ZFilter_RESERVED_3                   = 0x00000003,
} TEX_Z_FILTER;

/*
 * TVX_TYPE enum
 */

typedef enum TVX_TYPE {
TVX_Type_InvalidTextureResource          = 0x00000000,
TVX_Type_InvalidVertexBuffer             = 0x00000001,
TVX_Type_ValidTextureResource            = 0x00000002,
TVX_Type_ValidVertexBuffer               = 0x00000003,
} TVX_TYPE;

/*******************************************************
 * TCP Enums
 *******************************************************/

/*
 * TA_TC_ADDR_MODES enum
 */

typedef enum TA_TC_ADDR_MODES {
TA_TC_ADDR_MODE_DEFAULT                  = 0x00000000,
TA_TC_ADDR_MODE_COMP0                    = 0x00000001,
TA_TC_ADDR_MODE_COMP1                    = 0x00000002,
TA_TC_ADDR_MODE_COMP2                    = 0x00000003,
TA_TC_ADDR_MODE_COMP3                    = 0x00000004,
TA_TC_ADDR_MODE_UNALIGNED                = 0x00000005,
TA_TC_ADDR_MODE_BORDER_COLOR             = 0x00000006,
} TA_TC_ADDR_MODES;

/*
 * TA_TC_REQ_MODES enum
 */

typedef enum TA_TC_REQ_MODES {
TA_TC_REQ_MODE_BORDER                    = 0x00000000,
TA_TC_REQ_MODE_TEX2                      = 0x00000001,
TA_TC_REQ_MODE_TEX1                      = 0x00000002,
TA_TC_REQ_MODE_TEX0                      = 0x00000003,
TA_TC_REQ_MODE_NORMAL                    = 0x00000004,
TA_TC_REQ_MODE_DWORD                     = 0x00000005,
TA_TC_REQ_MODE_BYTE                      = 0x00000006,
TA_TC_REQ_MODE_BYTE_NV                   = 0x00000007,
} TA_TC_REQ_MODES;

/*
 * TCP_CACHE_POLICIES enum
 */

typedef enum TCP_CACHE_POLICIES {
TCP_CACHE_POLICY_MISS_LRU                = 0x00000000,
TCP_CACHE_POLICY_MISS_EVICT              = 0x00000001,
TCP_CACHE_POLICY_HIT_LRU                 = 0x00000002,
TCP_CACHE_POLICY_HIT_EVICT               = 0x00000003,
} TCP_CACHE_POLICIES;

/*
 * TCP_CACHE_STORE_POLICIES enum
 */

typedef enum TCP_CACHE_STORE_POLICIES {
TCP_CACHE_STORE_POLICY_WT_LRU            = 0x00000000,
TCP_CACHE_STORE_POLICY_WT_EVICT          = 0x00000001,
} TCP_CACHE_STORE_POLICIES;

/*
 * TCP_DSM_DATA_SEL enum
 */

typedef enum TCP_DSM_DATA_SEL {
TCP_DSM_DISABLE                          = 0x00000000,
TCP_DSM_SEL0                             = 0x00000001,
TCP_DSM_SEL1                             = 0x00000002,
TCP_DSM_SEL_BOTH                         = 0x00000003,
} TCP_DSM_DATA_SEL;

/*
 * TCP_DSM_INJECT_SEL enum
 */

typedef enum TCP_DSM_INJECT_SEL {
TCP_DSM_INJECT_SEL0                      = 0x00000000,
TCP_DSM_INJECT_SEL1                      = 0x00000001,
TCP_DSM_INJECT_SEL2                      = 0x00000002,
TCP_DSM_INJECT_SEL3                      = 0x00000003,
} TCP_DSM_INJECT_SEL;

/*
 * TCP_DSM_SINGLE_WRITE enum
 */

typedef enum TCP_DSM_SINGLE_WRITE {
TCP_DSM_SINGLE_WRITE_DIS                 = 0x00000000,
TCP_DSM_SINGLE_WRITE_EN                  = 0x00000001,
} TCP_DSM_SINGLE_WRITE;

/*
 * TCP_OPCODE_TYPE enum
 */

typedef enum TCP_OPCODE_TYPE {
TCP_OPCODE_READ                          = 0x00000000,
TCP_OPCODE_WRITE                         = 0x00000001,
TCP_OPCODE_ATOMIC                        = 0x00000002,
TCP_OPCODE_INV                           = 0x00000003,
TCP_OPCODE_ATOMIC_CMPSWAP                = 0x00000004,
TCP_OPCODE_SAMPLER                       = 0x00000005,
TCP_OPCODE_LOAD                          = 0x00000006,
TCP_OPCODE_GATHERH                       = 0x00000007,
} TCP_OPCODE_TYPE;

/*
 * TCP_PERFCOUNT_SELECT enum
 */

typedef enum TCP_PERFCOUNT_SELECT {
TCP_PERF_SEL_GATE_EN1                    = 0x00000000,
TCP_PERF_SEL_GATE_EN2                    = 0x00000001,
TCP_PERF_SEL_TA_REQ                      = 0x00000002,
TCP_PERF_SEL_TA_REQ_STATE_READ           = 0x00000003,
TCP_PERF_SEL_TA_REQ_READ                 = 0x00000004,
TCP_PERF_SEL_TA_REQ_WRITE                = 0x00000005,
TCP_PERF_SEL_TA_REQ_ATOMIC_WITH_RET      = 0x00000006,
TCP_PERF_SEL_TA_REQ_ATOMIC_WITHOUT_RET   = 0x00000007,
TCP_PERF_SEL_TA_REQ_GL0_INV              = 0x00000008,
TCP_PERF_SEL_REQ                         = 0x00000009,
TCP_PERF_SEL_REQ_READ                    = 0x0000000a,
TCP_PERF_SEL_REQ_READ_HIT_EVICT          = 0x0000000b,
TCP_PERF_SEL_REQ_READ_HIT_LRU            = 0x0000000c,
TCP_PERF_SEL_REQ_READ_MISS_EVICT         = 0x0000000d,
TCP_PERF_SEL_REQ_WRITE                   = 0x0000000e,
TCP_PERF_SEL_REQ_WRITE_MISS_EVICT        = 0x0000000f,
TCP_PERF_SEL_REQ_WRITE_MISS_LRU          = 0x00000010,
TCP_PERF_SEL_REQ_NON_READ                = 0x00000011,
TCP_PERF_SEL_REQ_MISS                    = 0x00000012,
TCP_PERF_SEL_REQ_TAGBANK0_SET0           = 0x00000013,
TCP_PERF_SEL_REQ_TAGBANK0_SET1           = 0x00000014,
TCP_PERF_SEL_REQ_TAGBANK1_SET0           = 0x00000015,
TCP_PERF_SEL_REQ_TAGBANK1_SET1           = 0x00000016,
TCP_PERF_SEL_REQ_TAGBANK2_SET0           = 0x00000017,
TCP_PERF_SEL_REQ_TAGBANK2_SET1           = 0x00000018,
TCP_PERF_SEL_REQ_TAGBANK3_SET0           = 0x00000019,
TCP_PERF_SEL_REQ_TAGBANK3_SET1           = 0x0000001a,
TCP_PERF_SEL_REQ_MISS_TAGBANK0           = 0x0000001b,
TCP_PERF_SEL_REQ_MISS_TAGBANK1           = 0x0000001c,
TCP_PERF_SEL_REQ_MISS_TAGBANK2           = 0x0000001d,
TCP_PERF_SEL_REQ_MISS_TAGBANK3           = 0x0000001e,
TCP_PERF_SEL_GL1_REQ_READ                = 0x0000001f,
TCP_PERF_SEL_GL1_REQ_READ_128B           = 0x00000020,
TCP_PERF_SEL_GL1_REQ_READ_64B            = 0x00000021,
TCP_PERF_SEL_GL1_REQ_WRITE               = 0x00000022,
TCP_PERF_SEL_GL1_REQ_ATOMIC_WITH_RET     = 0x00000023,
TCP_PERF_SEL_GL1_REQ_ATOMIC_WITHOUT_RET  = 0x00000024,
TCP_PERF_SEL_GL1_READ_LATENCY            = 0x00000025,
TCP_PERF_SEL_GL1_WRITE_LATENCY           = 0x00000026,
TCP_PERF_SEL_TCP_LATENCY                 = 0x00000027,
TCP_PERF_SEL_TCP_TA_REQ_STALL            = 0x00000028,
TCP_PERF_SEL_TA_TCP_REQ_STARVE           = 0x00000029,
TCP_PERF_SEL_DATA_FIFO_STALL             = 0x0000002a,
TCP_PERF_SEL_LOD_STALL                   = 0x0000002b,
TCP_PERF_SEL_POWER_STALL                 = 0x0000002c,
TCP_PERF_SEL_ALLOC_STALL                 = 0x0000002d,
TCP_PERF_SEL_UNORDERED_MTYPE_STALL       = 0x0000002e,
TCP_PERF_SEL_READ_TAGCONFLICT_STALL      = 0x0000002f,
TCP_PERF_SEL_WRITE_TAGCONFLICT_STALL     = 0x00000030,
TCP_PERF_SEL_ATOMIC_TAGCONFLICT_STALL    = 0x00000031,
TCP_PERF_SEL_LFIFO_STALL                 = 0x00000032,
TCP_PERF_SEL_MEM_REQ_FIFO_STALL          = 0x00000033,
TCP_PERF_SEL_GL1_TCP_BACK_PRESSURE       = 0x00000034,
TCP_PERF_SEL_GL1_TCP_RDRET_STALL         = 0x00000035,
TCP_PERF_SEL_GL1_GRANT_READ_STALL        = 0x00000036,
TCP_PERF_SEL_GL1_PENDING_STALL           = 0x00000037,
TCP_PERF_SEL_OFIFO_INCOMPLETE_STALL      = 0x00000038,
TCP_PERF_SEL_OFIFO_AGE_ORDER_STALL       = 0x00000039,
TCP_PERF_SEL_TD_DATA_CYCLE_STALL         = 0x0000003a,
TCP_PERF_SEL_COMP_TEX_LOAD_STALL         = 0x0000003b,
TCP_PERF_SEL_READ_DATACONFLICT_STALL     = 0x0000003c,
TCP_PERF_SEL_WRITE_DATACONFLICT_STALL    = 0x0000003d,
TCP_PERF_SEL_TD_TCP_STALL                = 0x0000003e,
} TCP_PERFCOUNT_SELECT;

/*
 * TCP_WATCH_MODES enum
 */

typedef enum TCP_WATCH_MODES {
TCP_WATCH_MODE_READ                      = 0x00000000,
TCP_WATCH_MODE_NONREAD                   = 0x00000001,
TCP_WATCH_MODE_ATOMIC                    = 0x00000002,
TCP_WATCH_MODE_ALL                       = 0x00000003,
} TCP_WATCH_MODES;

/*******************************************************
 * TD Enums
 *******************************************************/

/*
 * TD_PERFCOUNT_SEL enum
 */

typedef enum TD_PERFCOUNT_SEL {
TD_PERF_SEL_none                         = 0x00000000,
TD_PERF_SEL_td_busy                      = 0x00000001,
TD_PERF_SEL_input_busy                   = 0x00000002,
TD_PERF_SEL_sampler_lerp_busy            = 0x00000003,
TD_PERF_SEL_sampler_out_busy             = 0x00000004,
TD_PERF_SEL_nofilter_busy                = 0x00000005,
TD_PERF_SEL_ray_tracing_bvh4_busy        = 0x00000006,
TD_PERF_SEL_sampler_core_sclk_en         = 0x00000007,
TD_PERF_SEL_sampler_preformatter_sclk_en = 0x00000008,
TD_PERF_SEL_sampler_bilerp_sclk_en       = 0x00000009,
TD_PERF_SEL_sampler_bypass_sclk_en       = 0x0000000a,
TD_PERF_SEL_sampler_minmax_sclk_en       = 0x0000000b,
TD_PERF_SEL_sampler_accum_sclk_en        = 0x0000000c,
TD_PERF_SEL_sampler_format_flt_sclk_en   = 0x0000000d,
TD_PERF_SEL_sampler_format_fxdpt_sclk_en = 0x0000000e,
TD_PERF_SEL_sampler_out_sclk_en          = 0x0000000f,
TD_PERF_SEL_nofilter_sclk_en             = 0x00000010,
TD_PERF_SEL_nofilter_d32_sclk_en         = 0x00000011,
TD_PERF_SEL_nofilter_d16_sclk_en         = 0x00000012,
TD_PERF_SEL_ray_tracing_bvh4_sclk_en     = 0x00000016,
TD_PERF_SEL_ray_tracing_bvh4_ip_sclk_en  = 0x00000017,
TD_PERF_SEL_ray_tracing_bvh4_box_sclk_en = 0x00000018,
TD_PERF_SEL_ray_tracing_bvh4_tri_sclk_en = 0x00000019,
TD_PERF_SEL_sampler_sclk_on_nofilter_sclk_off = 0x0000001a,
TD_PERF_SEL_nofilter_sclk_on_sampler_sclk_off = 0x0000001b,
TD_PERF_SEL_all_pipes_sclk_on_at_same_time = 0x0000001c,
TD_PERF_SEL_sampler_and_nofilter_sclk_on_bvh4_sclk_off = 0x0000001d,
TD_PERF_SEL_sampler_and_bvh4_sclk_on_nofilter_sclk_off = 0x0000001e,
TD_PERF_SEL_nofilter_and_bvh4_sclk_on_sampler_sclk_off = 0x0000001f,
TD_PERF_SEL_core_state_ram_max_cnt       = 0x00000020,
TD_PERF_SEL_core_state_rams_read         = 0x00000021,
TD_PERF_SEL_weight_data_rams_read        = 0x00000022,
TD_PERF_SEL_reference_data_rams_read     = 0x00000023,
TD_PERF_SEL_tc_td_ram_fifo_full          = 0x00000024,
TD_PERF_SEL_tc_td_ram_fifo_max_cnt       = 0x00000025,
TD_PERF_SEL_tc_td_data_fifo_full         = 0x00000026,
TD_PERF_SEL_input_state_fifo_full        = 0x00000027,
TD_PERF_SEL_ta_data_stall                = 0x00000028,
TD_PERF_SEL_tc_data_stall                = 0x00000029,
TD_PERF_SEL_tc_ram_stall                 = 0x0000002a,
TD_PERF_SEL_lds_stall                    = 0x0000002b,
TD_PERF_SEL_sampler_pkr_full             = 0x0000002c,
TD_PERF_SEL_sampler_pkr_full_due_to_arb  = 0x0000002d,
TD_PERF_SEL_nofilter_pkr_full            = 0x0000002e,
TD_PERF_SEL_nofilter_pkr_full_due_to_arb = 0x0000002f,
TD_PERF_SEL_ray_tracing_bvh4_pkr_full    = 0x00000030,
TD_PERF_SEL_ray_tracing_bvh4_pkr_full_due_to_arb = 0x00000031,
TD_PERF_SEL_gather4_instr                = 0x00000032,
TD_PERF_SEL_gather4h_instr               = 0x00000033,
TD_PERF_SEL_sample_instr                 = 0x00000036,
TD_PERF_SEL_sample_c_instr               = 0x00000037,
TD_PERF_SEL_load_instr                   = 0x00000038,
TD_PERF_SEL_ldfptr_instr                 = 0x00000039,
TD_PERF_SEL_write_ack_instr              = 0x0000003a,
TD_PERF_SEL_d16_en_instr                 = 0x0000003b,
TD_PERF_SEL_bypassLerp_instr             = 0x0000003c,
TD_PERF_SEL_min_max_filter_instr         = 0x0000003d,
TD_PERF_SEL_one_comp_return_instr        = 0x0000003e,
TD_PERF_SEL_two_comp_return_instr        = 0x0000003f,
TD_PERF_SEL_three_comp_return_instr      = 0x00000040,
TD_PERF_SEL_four_comp_return_instr       = 0x00000041,
TD_PERF_SEL_user_defined_border          = 0x00000042,
TD_PERF_SEL_white_border                 = 0x00000043,
TD_PERF_SEL_opaque_black_border          = 0x00000044,
TD_PERF_SEL_lod_warn_from_ta             = 0x00000045,
TD_PERF_SEL_instruction_dest_is_lds      = 0x00000046,
TD_PERF_SEL_td_cycling_of_nofilter_instr_2cycles = 0x00000047,
TD_PERF_SEL_td_cycling_of_nofilter_instr_4cycles = 0x00000048,
TD_PERF_SEL_tc_cycling_of_nofilter_instr_2cycles = 0x00000049,
TD_PERF_SEL_tc_cycling_of_nofilter_instr_4cycles = 0x0000004a,
TD_PERF_SEL_out_of_order_instr           = 0x0000004b,
TD_PERF_SEL_total_num_instr              = 0x0000004c,
TD_PERF_SEL_total_num_instr_with_perf_wdw = 0x0000004d,
TD_PERF_SEL_total_num_sampler_instr      = 0x0000004e,
TD_PERF_SEL_total_num_sampler_instr_with_perf_wdw = 0x0000004f,
TD_PERF_SEL_total_num_nofilter_instr     = 0x00000050,
TD_PERF_SEL_total_num_nofilter_instr_with_perf_wdw = 0x00000051,
TD_PERF_SEL_total_num_ray_tracing_bvh4_instr = 0x00000052,
TD_PERF_SEL_total_num_ray_tracing_bvh4_instr_with_perf_wdw = 0x00000053,
TD_PERF_SEL_mixmode_instr                = 0x00000054,
TD_PERF_SEL_mixmode_resource             = 0x00000055,
TD_PERF_SEL_status_packet                = 0x00000056,
TD_PERF_SEL_address_cmd_poison           = 0x00000057,
TD_PERF_SEL_data_poison                  = 0x00000058,
TD_PERF_SEL_done_scoreboard_max_stored_cnt = 0x00000059,
TD_PERF_SEL_done_scoreboard_max_waiting_cnt = 0x0000005a,
TD_PERF_SEL_done_scoreboard_not_empty    = 0x0000005b,
TD_PERF_SEL_done_scoreboard_is_full      = 0x0000005c,
TD_PERF_SEL_done_scoreboard_bp_due_to_ooo = 0x0000005d,
TD_PERF_SEL_done_scoreboard_bp_due_to_lds = 0x0000005e,
TD_PERF_SEL_nofilter_formatters_turned_on = 0x0000005f,
TD_PERF_SEL_nofilter_insert_extra_comps  = 0x00000060,
TD_PERF_SEL_nofilter_popcount_dmask_gt_num_comp_of_fmt = 0x00000061,
TD_PERF_SEL_nofilter_popcount_dmask_lt_num_comp_of_fmt = 0x00000062,
TD_PERF_SEL_msaa_load_instr              = 0x00000063,
TD_PERF_SEL_blend_prt_with_prt_default_0 = 0x00000064,
TD_PERF_SEL_blend_prt_with_prt_default_1 = 0x00000065,
TD_PERF_SEL_resmap_instr                 = 0x00000066,
TD_PERF_SEL_prt_ack_instr                = 0x00000067,
TD_PERF_SEL_resmap_with_volume_filtering = 0x00000068,
TD_PERF_SEL_resmap_with_aniso_filtering  = 0x00000069,
TD_PERF_SEL_resmap_with_no_more_filtering = 0x0000006a,
TD_PERF_SEL_resmap_with_cubemap_corner   = 0x0000006b,
TD_PERF_SEL_ray_tracing_bvh4_threads_per_instruction_is_0 = 0x0000006c,
TD_PERF_SEL_ray_tracing_bvh4_threads_per_instruction_is_1 = 0x0000006d,
TD_PERF_SEL_ray_tracing_bvh4_threads_per_instruction_is_2 = 0x0000006e,
TD_PERF_SEL_ray_tracing_bvh4_threads_per_instruction_is_3to4 = 0x0000006f,
TD_PERF_SEL_ray_tracing_bvh4_threads_per_instruction_is_5to8 = 0x00000070,
TD_PERF_SEL_ray_tracing_bvh4_threads_per_instruction_is_9to16 = 0x00000071,
TD_PERF_SEL_ray_tracing_bvh4_threads_per_instruction_is_17to31 = 0x00000072,
TD_PERF_SEL_ray_tracing_bvh4_threads_per_instruction_is_32 = 0x00000073,
TD_PERF_SEL_ray_tracing_bvh4_fp16_box_node = 0x00000074,
TD_PERF_SEL_ray_tracing_bvh4_fp32_box_node = 0x00000075,
TD_PERF_SEL_ray_tracing_bvh4_tri_node    = 0x00000076,
TD_PERF_SEL_ray_tracing_bvh4_dropped_box_node = 0x00000077,
TD_PERF_SEL_ray_tracing_bvh4_dropped_tri_node = 0x00000078,
TD_PERF_SEL_ray_tracing_bvh4_invalid_box_node = 0x00000079,
TD_PERF_SEL_ray_tracing_bvh4_invalid_tri_node = 0x0000007a,
TD_PERF_SEL_ray_tracing_bvh4_box_sort_en = 0x0000007b,
TD_PERF_SEL_ray_tracing_bvh4_box_grow_val_nonzero = 0x0000007c,
TD_PERF_SEL_ray_tracing_bvh4_num_box_with_inf_or_nan_vtx = 0x0000007d,
TD_PERF_SEL_ray_tracing_bvh4_num_tri_with_inf_or_nan_vtx = 0x0000007e,
TD_PERF_SEL_ray_tracing_bvh4_num_box_that_squashed_a_nan = 0x0000007f,
TD_PERF_SEL_ray_tracing_bvh4_num_box_misses = 0x00000080,
TD_PERF_SEL_ray_tracing_bvh4_num_tri_misses = 0x00000081,
TD_PERF_SEL_ray_tracing_bvh4_num_tri_tie_breakers = 0x00000082,
TD_PERF_SEL_burst_bin_preempting_nofilter_1 = 0x00000083,
TD_PERF_SEL_burst_bin_preempting_nofilter_2to4 = 0x00000084,
TD_PERF_SEL_burst_bin_preempting_nofilter_5to7 = 0x00000085,
TD_PERF_SEL_burst_bin_preempting_nofilter_8to16 = 0x00000086,
TD_PERF_SEL_burst_bin_preempting_nofilter_gt16 = 0x00000087,
TD_PERF_SEL_burst_bin_sampler_1          = 0x00000088,
TD_PERF_SEL_burst_bin_sampler_2to8       = 0x00000089,
TD_PERF_SEL_burst_bin_sampler_9to16      = 0x0000008a,
TD_PERF_SEL_burst_bin_sampler_gt16       = 0x0000008b,
TD_PERF_SEL_burst_bin_gather_1           = 0x0000008c,
TD_PERF_SEL_burst_bin_gather_2to8        = 0x0000008d,
TD_PERF_SEL_burst_bin_gather_9to16       = 0x0000008e,
TD_PERF_SEL_burst_bin_gather_gt16        = 0x0000008f,
TD_PERF_SEL_burst_bin_nofilter_1         = 0x00000090,
TD_PERF_SEL_burst_bin_nofilter_2to4      = 0x00000091,
TD_PERF_SEL_burst_bin_nofilter_5to7      = 0x00000092,
TD_PERF_SEL_burst_bin_nofilter_8to16     = 0x00000093,
TD_PERF_SEL_burst_bin_nofilter_gt16      = 0x00000094,
TD_PERF_SEL_burst_bin_bvh4_1             = 0x00000095,
TD_PERF_SEL_burst_bin_bvh4_2to8          = 0x00000096,
TD_PERF_SEL_burst_bin_bvh4_9to16         = 0x00000097,
TD_PERF_SEL_burst_bin_bvh4_gt16          = 0x00000098,
TD_PERF_SEL_burst_bin_bvh4_box_nodes_1   = 0x00000099,
TD_PERF_SEL_burst_bin_bvh4_box_nodes_2to4 = 0x0000009a,
TD_PERF_SEL_burst_bin_bvh4_box_nodes_5to7 = 0x0000009b,
TD_PERF_SEL_burst_bin_bvh4_box_nodes_8to16 = 0x0000009c,
TD_PERF_SEL_burst_bin_bvh4_box_nodes_gt16 = 0x0000009d,
TD_PERF_SEL_burst_bin_bvh4_tri_nodes_1   = 0x0000009e,
TD_PERF_SEL_burst_bin_bvh4_tri_nodes_2to8 = 0x0000009f,
TD_PERF_SEL_burst_bin_bvh4_tri_nodes_9to16 = 0x000000a0,
TD_PERF_SEL_burst_bin_bvh4_tri_nodes_gt16 = 0x000000a1,
TD_PERF_SEL_burst_bin_bvh4_dropped_nodes_1 = 0x000000a2,
TD_PERF_SEL_burst_bin_bvh4_dropped_nodes_2to8 = 0x000000a3,
TD_PERF_SEL_burst_bin_bvh4_dropped_nodes_9to16 = 0x000000a4,
TD_PERF_SEL_burst_bin_bvh4_dropped_nodes_gt16 = 0x000000a5,
TD_PERF_SEL_burst_bin_bvh4_invalid_nodes_1 = 0x000000a6,
TD_PERF_SEL_burst_bin_bvh4_invalid_nodes_2to8 = 0x000000a7,
TD_PERF_SEL_burst_bin_bvh4_invalid_nodes_9to16 = 0x000000a8,
TD_PERF_SEL_burst_bin_bvh4_invalid_nodes_gt16 = 0x000000a9,
TD_PERF_SEL_bubble_bin_ta_waiting_for_tc_data_0 = 0x000000aa,
TD_PERF_SEL_bubble_bin_ta_waiting_for_tc_data_1 = 0x000000ab,
TD_PERF_SEL_bubble_bin_ta_waiting_for_tc_data_2to31 = 0x000000ac,
TD_PERF_SEL_bubble_bin_ta_waiting_for_tc_data_32to127 = 0x000000ad,
TD_PERF_SEL_bubble_bin_ta_waiting_for_tc_data_128to511 = 0x000000ae,
TD_PERF_SEL_bubble_bin_ta_waiting_for_tc_data_gt511 = 0x000000af,
TD_PERF_SEL_bubble_bin_lds_stall_1to3    = 0x000000b0,
TD_PERF_SEL_bubble_bin_lds_stall_4to7    = 0x000000b1,
TD_PERF_SEL_bubble_bin_lds_stall_8to15   = 0x000000b2,
TD_PERF_SEL_bubble_bin_lds_stall_gt15    = 0x000000b3,
TD_PERF_SEL_preempting_nofilter_max_cnt  = 0x000000b4,
TD_PERF_SEL_sampler_lerp0_active         = 0x000000b5,
TD_PERF_SEL_sampler_lerp1_active         = 0x000000b6,
TD_PERF_SEL_sampler_lerp2_active         = 0x000000b7,
TD_PERF_SEL_sampler_lerp3_active         = 0x000000b8,
TD_PERF_SEL_nofilter_total_num_comps_to_lds = 0x000000b9,
TD_PERF_SEL_nofilter_byte_cycling_4cycles = 0x000000ba,
TD_PERF_SEL_nofilter_byte_cycling_8cycles = 0x000000bb,
TD_PERF_SEL_nofilter_byte_cycling_16cycles = 0x000000bc,
TD_PERF_SEL_nofilter_dword_cycling_2cycles = 0x000000bd,
TD_PERF_SEL_nofilter_dword_cycling_4cycles = 0x000000be,
TD_PERF_SEL_input_bp_due_to_done_scoreboard_full = 0x000000bf,
TD_PERF_SEL_ray_tracing_bvh4_instr_invld_thread_cnt = 0x000000c0,
} TD_PERFCOUNT_SEL;

/*******************************************************
 * GL2C Enums
 *******************************************************/

/*
 * GL2A_PERF_SEL enum
 */

typedef enum GL2A_PERF_SEL {
GL2A_PERF_SEL_NONE                       = 0x00000000,
GL2A_PERF_SEL_CYCLE                      = 0x00000001,
GL2A_PERF_SEL_BUSY                       = 0x00000002,
GL2A_PERF_SEL_REQ_GL2C0                  = 0x00000003,
GL2A_PERF_SEL_REQ_GL2C1                  = 0x00000004,
GL2A_PERF_SEL_REQ_GL2C2                  = 0x00000005,
GL2A_PERF_SEL_REQ_GL2C3                  = 0x00000006,
GL2A_PERF_SEL_REQ_GL2C4                  = 0x00000007,
GL2A_PERF_SEL_REQ_GL2C5                  = 0x00000008,
GL2A_PERF_SEL_REQ_GL2C6                  = 0x00000009,
GL2A_PERF_SEL_REQ_GL2C7                  = 0x0000000a,
GL2A_PERF_SEL_REQ_HI_PRIO_GL2C0          = 0x0000000b,
GL2A_PERF_SEL_REQ_HI_PRIO_GL2C1          = 0x0000000c,
GL2A_PERF_SEL_REQ_HI_PRIO_GL2C2          = 0x0000000d,
GL2A_PERF_SEL_REQ_HI_PRIO_GL2C3          = 0x0000000e,
GL2A_PERF_SEL_REQ_HI_PRIO_GL2C4          = 0x0000000f,
GL2A_PERF_SEL_REQ_HI_PRIO_GL2C5          = 0x00000010,
GL2A_PERF_SEL_REQ_HI_PRIO_GL2C6          = 0x00000011,
GL2A_PERF_SEL_REQ_HI_PRIO_GL2C7          = 0x00000012,
GL2A_PERF_SEL_REQ_BURST_GL2C0            = 0x00000013,
GL2A_PERF_SEL_REQ_BURST_GL2C1            = 0x00000014,
GL2A_PERF_SEL_REQ_BURST_GL2C2            = 0x00000015,
GL2A_PERF_SEL_REQ_BURST_GL2C3            = 0x00000016,
GL2A_PERF_SEL_REQ_BURST_GL2C4            = 0x00000017,
GL2A_PERF_SEL_REQ_BURST_GL2C5            = 0x00000018,
GL2A_PERF_SEL_REQ_BURST_GL2C6            = 0x00000019,
GL2A_PERF_SEL_REQ_BURST_GL2C7            = 0x0000001a,
GL2A_PERF_SEL_REQ_STALL_GL2C0            = 0x0000001b,
GL2A_PERF_SEL_REQ_STALL_GL2C1            = 0x0000001c,
GL2A_PERF_SEL_REQ_STALL_GL2C2            = 0x0000001d,
GL2A_PERF_SEL_REQ_STALL_GL2C3            = 0x0000001e,
GL2A_PERF_SEL_REQ_STALL_GL2C4            = 0x0000001f,
GL2A_PERF_SEL_REQ_STALL_GL2C5            = 0x00000020,
GL2A_PERF_SEL_REQ_STALL_GL2C6            = 0x00000021,
GL2A_PERF_SEL_REQ_STALL_GL2C7            = 0x00000022,
GL2A_PERF_SEL_RTN_STALL_GL2C0            = 0x00000023,
GL2A_PERF_SEL_RTN_STALL_GL2C1            = 0x00000024,
GL2A_PERF_SEL_RTN_STALL_GL2C2            = 0x00000025,
GL2A_PERF_SEL_RTN_STALL_GL2C3            = 0x00000026,
GL2A_PERF_SEL_RTN_STALL_GL2C4            = 0x00000027,
GL2A_PERF_SEL_RTN_STALL_GL2C5            = 0x00000028,
GL2A_PERF_SEL_RTN_STALL_GL2C6            = 0x00000029,
GL2A_PERF_SEL_RTN_STALL_GL2C7            = 0x0000002a,
GL2A_PERF_SEL_RTN_CLIENT0                = 0x0000002b,
GL2A_PERF_SEL_RTN_CLIENT1                = 0x0000002c,
GL2A_PERF_SEL_RTN_CLIENT2                = 0x0000002d,
GL2A_PERF_SEL_RTN_CLIENT3                = 0x0000002e,
GL2A_PERF_SEL_RTN_CLIENT4                = 0x0000002f,
GL2A_PERF_SEL_RTN_CLIENT5                = 0x00000030,
GL2A_PERF_SEL_RTN_CLIENT6                = 0x00000031,
GL2A_PERF_SEL_RTN_CLIENT7                = 0x00000032,
GL2A_PERF_SEL_RTN_CLIENT8                = 0x00000033,
GL2A_PERF_SEL_RTN_CLIENT9                = 0x00000034,
GL2A_PERF_SEL_RTN_CLIENT10               = 0x00000035,
GL2A_PERF_SEL_RTN_CLIENT11               = 0x00000036,
GL2A_PERF_SEL_RTN_CLIENT12               = 0x00000037,
GL2A_PERF_SEL_RTN_CLIENT13               = 0x00000038,
GL2A_PERF_SEL_RTN_CLIENT14               = 0x00000039,
GL2A_PERF_SEL_RTN_CLIENT15               = 0x0000003a,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT0  = 0x0000003b,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT1  = 0x0000003c,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT2  = 0x0000003d,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT3  = 0x0000003e,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT4  = 0x0000003f,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT5  = 0x00000040,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT6  = 0x00000041,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT7  = 0x00000042,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT8  = 0x00000043,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT9  = 0x00000044,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT10 = 0x00000045,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT11 = 0x00000046,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT12 = 0x00000047,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT13 = 0x00000048,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT14 = 0x00000049,
GL2A_PERF_SEL_RTN_ARB_COLLISION_CLIENT15 = 0x0000004a,
GL2A_PERF_SEL_REQ_BURST_CLIENT0          = 0x0000004b,
GL2A_PERF_SEL_REQ_BURST_CLIENT1          = 0x0000004c,
GL2A_PERF_SEL_REQ_BURST_CLIENT2          = 0x0000004d,
GL2A_PERF_SEL_REQ_BURST_CLIENT3          = 0x0000004e,
GL2A_PERF_SEL_REQ_BURST_CLIENT4          = 0x0000004f,
GL2A_PERF_SEL_REQ_BURST_CLIENT5          = 0x00000050,
GL2A_PERF_SEL_REQ_BURST_CLIENT6          = 0x00000051,
GL2A_PERF_SEL_REQ_BURST_CLIENT7          = 0x00000052,
GL2A_PERF_SEL_REQ_BURST_CLIENT8          = 0x00000053,
GL2A_PERF_SEL_REQ_BURST_CLIENT9          = 0x00000054,
GL2A_PERF_SEL_REQ_BURST_CLIENT10         = 0x00000055,
GL2A_PERF_SEL_REQ_BURST_CLIENT11         = 0x00000056,
GL2A_PERF_SEL_REQ_BURST_CLIENT12         = 0x00000057,
GL2A_PERF_SEL_REQ_BURST_CLIENT13         = 0x00000058,
GL2A_PERF_SEL_REQ_BURST_CLIENT14         = 0x00000059,
GL2A_PERF_SEL_REQ_BURST_CLIENT15         = 0x0000005a,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT0   = 0x0000005b,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT1   = 0x0000005c,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT2   = 0x0000005d,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT3   = 0x0000005e,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT4   = 0x0000005f,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT5   = 0x00000060,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT6   = 0x00000061,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT7   = 0x00000062,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT8   = 0x00000063,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT9   = 0x00000064,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT10  = 0x00000065,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT11  = 0x00000067,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT12  = 0x00000068,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT13  = 0x00000069,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT14  = 0x0000006a,
GL2A_PERF_SEL_RTN_CREDIT_STALL_CLIENT15  = 0x0000006b,
} GL2A_PERF_SEL;

/*
 * GL2C_PERF_SEL enum
 */

typedef enum GL2C_PERF_SEL {
GL2C_PERF_SEL_NONE                       = 0x00000000,
GL2C_PERF_SEL_CYCLE                      = 0x00000001,
GL2C_PERF_SEL_BUSY                       = 0x00000002,
GL2C_PERF_SEL_REQ                        = 0x00000003,
GL2C_PERF_SEL_VOL_REQ                    = 0x00000004,
GL2C_PERF_SEL_HIGH_PRIORITY_REQ          = 0x00000005,
GL2C_PERF_SEL_READ                       = 0x00000006,
GL2C_PERF_SEL_WRITE                      = 0x00000007,
GL2C_PERF_SEL_ATOMIC                     = 0x00000008,
GL2C_PERF_SEL_NOP_ACK                    = 0x00000009,
GL2C_PERF_SEL_NOP_RTN0                   = 0x0000000a,
GL2C_PERF_SEL_PROBE                      = 0x0000000b,
GL2C_PERF_SEL_PROBE_ALL                  = 0x0000000c,
GL2C_PERF_SEL_INTERNAL_PROBE             = 0x0000000d,
GL2C_PERF_SEL_COMPRESSED_READ_REQ        = 0x0000000e,
GL2C_PERF_SEL_METADATA_READ_REQ          = 0x0000000f,
GL2C_PERF_SEL_CLIENT0_REQ                = 0x00000010,
GL2C_PERF_SEL_CLIENT1_REQ                = 0x00000011,
GL2C_PERF_SEL_CLIENT2_REQ                = 0x00000012,
GL2C_PERF_SEL_CLIENT3_REQ                = 0x00000013,
GL2C_PERF_SEL_CLIENT4_REQ                = 0x00000014,
GL2C_PERF_SEL_CLIENT5_REQ                = 0x00000015,
GL2C_PERF_SEL_CLIENT6_REQ                = 0x00000016,
GL2C_PERF_SEL_CLIENT7_REQ                = 0x00000017,
GL2C_PERF_SEL_CLIENT8_REQ                = 0x00000018,
GL2C_PERF_SEL_CLIENT9_REQ                = 0x00000019,
GL2C_PERF_SEL_CLIENT10_REQ               = 0x0000001a,
GL2C_PERF_SEL_CLIENT11_REQ               = 0x0000001b,
GL2C_PERF_SEL_CLIENT12_REQ               = 0x0000001c,
GL2C_PERF_SEL_CLIENT13_REQ               = 0x0000001d,
GL2C_PERF_SEL_CLIENT14_REQ               = 0x0000001e,
GL2C_PERF_SEL_CLIENT15_REQ               = 0x0000001f,
GL2C_PERF_SEL_C_RW_S_REQ                 = 0x00000020,
GL2C_PERF_SEL_C_RW_US_REQ                = 0x00000021,
GL2C_PERF_SEL_C_RO_S_REQ                 = 0x00000022,
GL2C_PERF_SEL_C_RO_US_REQ                = 0x00000023,
GL2C_PERF_SEL_UC_REQ                     = 0x00000024,
GL2C_PERF_SEL_LRU_REQ                    = 0x00000025,
GL2C_PERF_SEL_STREAM_REQ                 = 0x00000026,
GL2C_PERF_SEL_BYPASS_REQ                 = 0x00000027,
GL2C_PERF_SEL_NOA_REQ                    = 0x00000028,
GL2C_PERF_SEL_SHARED_REQ                 = 0x00000029,
GL2C_PERF_SEL_HIT                        = 0x0000002a,
GL2C_PERF_SEL_MISS                       = 0x0000002b,
GL2C_PERF_SEL_FULL_HIT                   = 0x0000002c,
GL2C_PERF_SEL_PARTIAL_32B_HIT            = 0x0000002d,
GL2C_PERF_SEL_PARTIAL_64B_HIT            = 0x0000002e,
GL2C_PERF_SEL_PARTIAL_96B_HIT            = 0x0000002f,
GL2C_PERF_SEL_DEWRITE_ALLOCATE_HIT       = 0x00000030,
GL2C_PERF_SEL_FULLY_WRITTEN_HIT          = 0x00000031,
GL2C_PERF_SEL_UNCACHED_WRITE             = 0x00000032,
GL2C_PERF_SEL_WRITEBACK                  = 0x00000033,
GL2C_PERF_SEL_NORMAL_WRITEBACK           = 0x00000034,
GL2C_PERF_SEL_EVICT                      = 0x00000035,
GL2C_PERF_SEL_NORMAL_EVICT               = 0x00000036,
GL2C_PERF_SEL_PROBE_EVICT                = 0x00000037,
GL2C_PERF_SEL_REQ_TO_MISS_QUEUE          = 0x00000038,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT0   = 0x00000039,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT1   = 0x0000003a,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT2   = 0x0000003b,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT3   = 0x0000003c,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT4   = 0x0000003d,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT5   = 0x0000003e,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT6   = 0x0000003f,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT7   = 0x00000040,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT8   = 0x00000041,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT9   = 0x00000042,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT10  = 0x00000043,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT11  = 0x00000044,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT12  = 0x00000045,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT13  = 0x00000046,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT14  = 0x00000047,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT15  = 0x00000048,
GL2C_PERF_SEL_READ_32_REQ                = 0x00000049,
GL2C_PERF_SEL_READ_64_REQ                = 0x0000004a,
GL2C_PERF_SEL_READ_128_REQ               = 0x0000004b,
GL2C_PERF_SEL_WRITE_32_REQ               = 0x0000004c,
GL2C_PERF_SEL_WRITE_64_REQ               = 0x0000004d,
GL2C_PERF_SEL_COMPRESSED_READ_0_REQ      = 0x0000004e,
GL2C_PERF_SEL_COMPRESSED_READ_32_REQ     = 0x0000004f,
GL2C_PERF_SEL_COMPRESSED_READ_64_REQ     = 0x00000050,
GL2C_PERF_SEL_COMPRESSED_READ_96_REQ     = 0x00000051,
GL2C_PERF_SEL_COMPRESSED_READ_128_REQ    = 0x00000052,
GL2C_PERF_SEL_MC_WRREQ                   = 0x00000053,
GL2C_PERF_SEL_EA_WRREQ_SNOOP             = 0x00000054,
GL2C_PERF_SEL_EA_WRREQ_64B               = 0x00000055,
GL2C_PERF_SEL_EA_WRREQ_PROBE_COMMAND     = 0x00000056,
GL2C_PERF_SEL_EA_WR_UNCACHED_32B         = 0x00000057,
GL2C_PERF_SEL_MC_WRREQ_STALL             = 0x00000058,
GL2C_PERF_SEL_EA_WRREQ_IO_CREDIT_STALL   = 0x00000059,
GL2C_PERF_SEL_EA_WRREQ_GMI_CREDIT_STALL  = 0x0000005a,
GL2C_PERF_SEL_EA_WRREQ_DRAM_CREDIT_STALL = 0x0000005b,
GL2C_PERF_SEL_TOO_MANY_EA_WRREQS_STALL   = 0x0000005c,
GL2C_PERF_SEL_MC_WRREQ_LEVEL             = 0x0000005d,
GL2C_PERF_SEL_EA_ATOMIC                  = 0x0000005e,
GL2C_PERF_SEL_EA_ATOMIC_LEVEL            = 0x0000005f,
GL2C_PERF_SEL_MC_RDREQ                   = 0x00000060,
GL2C_PERF_SEL_EA_RDREQ_SNOOP             = 0x00000061,
GL2C_PERF_SEL_EA_RDREQ_SPLIT             = 0x00000062,
GL2C_PERF_SEL_EA_RDREQ_32B               = 0x00000063,
GL2C_PERF_SEL_EA_RDREQ_64B               = 0x00000064,
GL2C_PERF_SEL_EA_RDREQ_96B               = 0x00000065,
GL2C_PERF_SEL_EA_RDREQ_128B              = 0x00000066,
GL2C_PERF_SEL_EA_RD_UNCACHED_32B         = 0x00000067,
GL2C_PERF_SEL_EA_RD_MDC_32B              = 0x00000068,
GL2C_PERF_SEL_EA_RD_COMPRESSED_32B       = 0x00000069,
GL2C_PERF_SEL_EA_RDREQ_IO_CREDIT_STALL   = 0x0000006a,
GL2C_PERF_SEL_EA_RDREQ_GMI_CREDIT_STALL  = 0x0000006b,
GL2C_PERF_SEL_EA_RDREQ_DRAM_CREDIT_STALL = 0x0000006c,
GL2C_PERF_SEL_MC_RDREQ_LEVEL             = 0x0000006d,
GL2C_PERF_SEL_EA_RDREQ_DRAM              = 0x0000006e,
GL2C_PERF_SEL_EA_WRREQ_DRAM              = 0x0000006f,
GL2C_PERF_SEL_EA_RDREQ_DRAM_32B          = 0x00000070,
GL2C_PERF_SEL_EA_WRREQ_DRAM_32B          = 0x00000071,
GL2C_PERF_SEL_ONION_READ                 = 0x00000072,
GL2C_PERF_SEL_ONION_WRITE                = 0x00000073,
GL2C_PERF_SEL_IO_READ                    = 0x00000074,
GL2C_PERF_SEL_IO_WRITE                   = 0x00000075,
GL2C_PERF_SEL_GARLIC_READ                = 0x00000076,
GL2C_PERF_SEL_GARLIC_WRITE               = 0x00000077,
GL2C_PERF_SEL_EA_OUTSTANDING             = 0x00000078,
GL2C_PERF_SEL_LATENCY_FIFO_FULL          = 0x00000079,
GL2C_PERF_SEL_SRC_FIFO_FULL              = 0x0000007a,
GL2C_PERF_SEL_TAG_STALL                  = 0x0000007b,
GL2C_PERF_SEL_TAG_WRITEBACK_FIFO_FULL_STALL = 0x0000007c,
GL2C_PERF_SEL_TAG_MISS_NOTHING_REPLACEABLE_STALL = 0x0000007d,
GL2C_PERF_SEL_TAG_UNCACHED_WRITE_ATOMIC_FIFO_FULL_STALL = 0x0000007e,
GL2C_PERF_SEL_TAG_NO_UNCACHED_WRITE_ATOMIC_ENTRIES_STALL = 0x0000007f,
GL2C_PERF_SEL_TAG_PROBE_STALL            = 0x00000080,
GL2C_PERF_SEL_TAG_PROBE_FILTER_STALL     = 0x00000081,
GL2C_PERF_SEL_TAG_PROBE_FIFO_FULL_STALL  = 0x00000082,
GL2C_PERF_SEL_TAG_READ_DST_STALL         = 0x00000083,
GL2C_PERF_SEL_READ_RETURN_TIMEOUT        = 0x00000084,
GL2C_PERF_SEL_WRITEBACK_READ_TIMEOUT     = 0x00000085,
GL2C_PERF_SEL_READ_RETURN_FULL_BUBBLE    = 0x00000086,
GL2C_PERF_SEL_BUBBLE                     = 0x00000087,
GL2C_PERF_SEL_IB_REQ                     = 0x00000088,
GL2C_PERF_SEL_IB_STALL                   = 0x00000089,
GL2C_PERF_SEL_IB_TAG_STALL               = 0x0000008a,
GL2C_PERF_SEL_IB_CM_STALL                = 0x0000008b,
GL2C_PERF_SEL_RETURN_ACK                 = 0x0000008c,
GL2C_PERF_SEL_RETURN_DATA                = 0x0000008d,
GL2C_PERF_SEL_EA_RDRET_NACK              = 0x0000008e,
GL2C_PERF_SEL_EA_WRRET_NACK              = 0x0000008f,
GL2C_PERF_SEL_GL2A_LEVEL                 = 0x00000090,
GL2C_PERF_SEL_PROBE_FILTER_DISABLE_TRANSITION = 0x00000091,
GL2C_PERF_SEL_PROBE_FILTER_DISABLED      = 0x00000092,
GL2C_PERF_SEL_ALL_TC_OP_WB_OR_INV_START  = 0x00000093,
GL2C_PERF_SEL_ALL_TC_OP_WB_OR_INV_VOL_START = 0x00000094,
GL2C_PERF_SEL_GCR_INV                    = 0x00000095,
GL2C_PERF_SEL_GCR_WB                     = 0x00000096,
GL2C_PERF_SEL_GCR_DISCARD                = 0x00000097,
GL2C_PERF_SEL_GCR_RANGE                  = 0x00000098,
GL2C_PERF_SEL_GCR_ALL                    = 0x00000099,
GL2C_PERF_SEL_GCR_VOL                    = 0x0000009a,
GL2C_PERF_SEL_GCR_UNSHARED               = 0x0000009b,
GL2C_PERF_SEL_GCR_MDC_INV                = 0x0000009c,
GL2C_PERF_SEL_GCR_GL2_INV_ALL            = 0x0000009d,
GL2C_PERF_SEL_GCR_GL2_WB_ALL             = 0x0000009e,
GL2C_PERF_SEL_GCR_MDC_INV_ALL            = 0x0000009f,
GL2C_PERF_SEL_GCR_GL2_INV_RANGE          = 0x000000a0,
GL2C_PERF_SEL_GCR_GL2_WB_RANGE           = 0x000000a1,
GL2C_PERF_SEL_GCR_GL2_WB_INV_RANGE       = 0x000000a2,
GL2C_PERF_SEL_GCR_MDC_INV_RANGE          = 0x000000a3,
GL2C_PERF_SEL_ALL_GCR_INV_EVICT          = 0x000000a4,
GL2C_PERF_SEL_ALL_GCR_INV_VOL_EVICT      = 0x000000a5,
GL2C_PERF_SEL_ALL_GCR_WB_OR_INV_CYCLE    = 0x000000a6,
GL2C_PERF_SEL_ALL_GCR_WB_OR_INV_VOL_CYCLE = 0x000000a7,
GL2C_PERF_SEL_ALL_GCR_WB_WRITEBACK       = 0x000000a8,
GL2C_PERF_SEL_GCR_INVL2_VOL_CYCLE        = 0x000000a9,
GL2C_PERF_SEL_GCR_INVL2_VOL_EVICT        = 0x000000aa,
GL2C_PERF_SEL_GCR_INVL2_VOL_START        = 0x000000ab,
GL2C_PERF_SEL_GCR_WBL2_VOL_CYCLE         = 0x000000ac,
GL2C_PERF_SEL_GCR_WBL2_VOL_START         = 0x000000ad,
GL2C_PERF_SEL_GCR_WBINVL2_CYCLE          = 0x000000ae,
GL2C_PERF_SEL_GCR_WBINVL2_EVICT          = 0x000000af,
GL2C_PERF_SEL_GCR_WBINVL2_START          = 0x000000b0,
GL2C_PERF_SEL_MDC_INV_METADATA           = 0x000000b1,
GL2C_PERF_SEL_MDC_REQ                    = 0x000000b2,
GL2C_PERF_SEL_MDC_LEVEL                  = 0x000000b3,
GL2C_PERF_SEL_MDC_TAG_HIT                = 0x000000b4,
GL2C_PERF_SEL_MDC_SECTOR_HIT             = 0x000000b5,
GL2C_PERF_SEL_MDC_SECTOR_MISS            = 0x000000b6,
GL2C_PERF_SEL_MDC_TAG_STALL              = 0x000000b7,
GL2C_PERF_SEL_MDC_TAG_REPLACEMENT_LINE_IN_USE_STALL = 0x000000b8,
GL2C_PERF_SEL_MDC_TAG_DESECTORIZATION_FIFO_FULL_STALL = 0x000000b9,
GL2C_PERF_SEL_MDC_TAG_WAITING_FOR_INVALIDATE_COMPLETION_STALL = 0x000000ba,
GL2C_PERF_SEL_CM_CHANNEL0_REQ            = 0x000000bb,
GL2C_PERF_SEL_CM_CHANNEL1_REQ            = 0x000000bc,
GL2C_PERF_SEL_CM_CHANNEL2_REQ            = 0x000000bd,
GL2C_PERF_SEL_CM_CHANNEL3_REQ            = 0x000000be,
GL2C_PERF_SEL_CM_CHANNEL4_REQ            = 0x000000bf,
GL2C_PERF_SEL_CM_CHANNEL5_REQ            = 0x000000c0,
GL2C_PERF_SEL_CM_CHANNEL6_REQ            = 0x000000c1,
GL2C_PERF_SEL_CM_CHANNEL7_REQ            = 0x000000c2,
GL2C_PERF_SEL_CM_CHANNEL8_REQ            = 0x000000c3,
GL2C_PERF_SEL_CM_CHANNEL9_REQ            = 0x000000c4,
GL2C_PERF_SEL_CM_CHANNEL10_REQ           = 0x000000c5,
GL2C_PERF_SEL_CM_CHANNEL11_REQ           = 0x000000c6,
GL2C_PERF_SEL_CM_CHANNEL12_REQ           = 0x000000c7,
GL2C_PERF_SEL_CM_CHANNEL13_REQ           = 0x000000c8,
GL2C_PERF_SEL_CM_CHANNEL14_REQ           = 0x000000c9,
GL2C_PERF_SEL_CM_CHANNEL15_REQ           = 0x000000ca,
GL2C_PERF_SEL_CM_CHANNEL16_REQ           = 0x000000cb,
GL2C_PERF_SEL_CM_CHANNEL17_REQ           = 0x000000cc,
GL2C_PERF_SEL_CM_CHANNEL18_REQ           = 0x000000cd,
GL2C_PERF_SEL_CM_CHANNEL19_REQ           = 0x000000ce,
GL2C_PERF_SEL_CM_CHANNEL20_REQ           = 0x000000cf,
GL2C_PERF_SEL_CM_CHANNEL21_REQ           = 0x000000d0,
GL2C_PERF_SEL_CM_CHANNEL22_REQ           = 0x000000d1,
GL2C_PERF_SEL_CM_CHANNEL23_REQ           = 0x000000d2,
GL2C_PERF_SEL_CM_CHANNEL24_REQ           = 0x000000d3,
GL2C_PERF_SEL_CM_CHANNEL25_REQ           = 0x000000d4,
GL2C_PERF_SEL_CM_CHANNEL26_REQ           = 0x000000d5,
GL2C_PERF_SEL_CM_CHANNEL27_REQ           = 0x000000d6,
GL2C_PERF_SEL_CM_CHANNEL28_REQ           = 0x000000d7,
GL2C_PERF_SEL_CM_CHANNEL29_REQ           = 0x000000d8,
GL2C_PERF_SEL_CM_CHANNEL30_REQ           = 0x000000d9,
GL2C_PERF_SEL_CM_CHANNEL31_REQ           = 0x000000da,
GL2C_PERF_SEL_CM_COMP_ATOMIC_COLOR_REQ   = 0x000000db,
GL2C_PERF_SEL_CM_COMP_ATOMIC_DEPTH16_REQ = 0x000000dc,
GL2C_PERF_SEL_CM_COMP_ATOMIC_DEPTH32_REQ = 0x000000dd,
GL2C_PERF_SEL_CM_COMP_ATOMIC_STENCIL_REQ = 0x000000de,
GL2C_PERF_SEL_CM_COMP_WRITE_COLOR_REQ    = 0x000000df,
GL2C_PERF_SEL_CM_COMP_WRITE_DEPTH16_REQ  = 0x000000e0,
GL2C_PERF_SEL_CM_COMP_WRITE_DEPTH32_REQ  = 0x000000e1,
GL2C_PERF_SEL_CM_COMP_WRITE_STENCIL_REQ  = 0x000000e2,
GL2C_PERF_SEL_CM_COMP_READ_REQ           = 0x000000e3,
GL2C_PERF_SEL_CM_READ_BACK_REQ           = 0x000000e4,
GL2C_PERF_SEL_CM_METADATA_WR_REQ         = 0x000000e5,
GL2C_PERF_SEL_CM_WR_ACK_REQ              = 0x000000e6,
GL2C_PERF_SEL_CM_NO_ACK_REQ              = 0x000000e7,
GL2C_PERF_SEL_CM_NOOP_REQ                = 0x000000e8,
GL2C_PERF_SEL_CM_COMP_COLOR_EN_REQ       = 0x000000e9,
GL2C_PERF_SEL_CM_COMP_COLOR_DIS_REQ      = 0x000000ea,
GL2C_PERF_SEL_CM_COMP_STENCIL_REQ        = 0x000000eb,
GL2C_PERF_SEL_CM_COMP_DEPTH16_REQ        = 0x000000ec,
GL2C_PERF_SEL_CM_COMP_DEPTH32_REQ        = 0x000000ed,
GL2C_PERF_SEL_CM_COMP_RB_SKIP_REQ        = 0x000000ee,
GL2C_PERF_SEL_CM_COLOR_32B_WR_REQ        = 0x000000ef,
GL2C_PERF_SEL_CM_COLOR_64B_WR_REQ        = 0x000000f0,
GL2C_PERF_SEL_CM_FULL_WRITE_REQ          = 0x000000f1,
GL2C_PERF_SEL_CM_RVF_FULL                = 0x000000f2,
GL2C_PERF_SEL_CM_SDR_FULL                = 0x000000f3,
GL2C_PERF_SEL_CM_MERGE_BUF_FULL          = 0x000000f4,
GL2C_PERF_SEL_CM_DCC_STALL               = 0x000000f5,
GL2C_PERF_SEL_CM_DCC_IN_XFC              = 0x000000f6,
GL2C_PERF_SEL_CM_DCC_OUT_XFC             = 0x000000f7,
GL2C_PERF_SEL_CM_DCC_OUT_1x1             = 0x000000f8,
GL2C_PERF_SEL_CM_DCC_OUT_1x2             = 0x000000f9,
GL2C_PERF_SEL_CM_DCC_OUT_2x1             = 0x000000fa,
GL2C_PERF_SEL_CM_DCC_OUT_2x2             = 0x000000fb,
GL2C_PERF_SEL_CM_DCC_OUT_UNCOMP          = 0x000000fc,
GL2C_PERF_SEL_CM_DCC_OUT_CONST           = 0x000000fd,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT16  = 0x000000fe,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT17  = 0x000000ff,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT18  = 0x00000100,
GL2C_PERF_SEL_HIT_PASS_MISS_IN_CLIENT19  = 0x00000101,
} GL2C_PERF_SEL;

/*******************************************************
 * GRBM Enums
 *******************************************************/

/*
 * GRBM_PERF_SEL enum
 */

typedef enum GRBM_PERF_SEL {
GRBM_PERF_SEL_COUNT                      = 0x00000000,
GRBM_PERF_SEL_USER_DEFINED               = 0x00000001,
GRBM_PERF_SEL_GUI_ACTIVE                 = 0x00000002,
GRBM_PERF_SEL_CP_BUSY                    = 0x00000003,
GRBM_PERF_SEL_CP_COHER_BUSY              = 0x00000004,
GRBM_PERF_SEL_CP_DMA_BUSY                = 0x00000005,
GRBM_PERF_SEL_CB_BUSY                    = 0x00000006,
GRBM_PERF_SEL_DB_BUSY                    = 0x00000007,
GRBM_PERF_SEL_PA_BUSY                    = 0x00000008,
GRBM_PERF_SEL_SC_BUSY                    = 0x00000009,
GRBM_PERF_SEL_SPI_BUSY                   = 0x0000000b,
GRBM_PERF_SEL_SX_BUSY                    = 0x0000000c,
GRBM_PERF_SEL_TA_BUSY                    = 0x0000000d,
GRBM_PERF_SEL_CB_CLEAN                   = 0x0000000e,
GRBM_PERF_SEL_DB_CLEAN                   = 0x0000000f,
GRBM_PERF_SEL_GDS_BUSY                   = 0x00000019,
GRBM_PERF_SEL_BCI_BUSY                   = 0x0000001a,
GRBM_PERF_SEL_RLC_BUSY                   = 0x0000001b,
GRBM_PERF_SEL_TCP_BUSY                   = 0x0000001c,
GRBM_PERF_SEL_CPG_BUSY                   = 0x0000001d,
GRBM_PERF_SEL_CPC_BUSY                   = 0x0000001e,
GRBM_PERF_SEL_CPF_BUSY                   = 0x0000001f,
GRBM_PERF_SEL_GE_BUSY                    = 0x00000020,
GRBM_PERF_SEL_GE_NO_DMA_BUSY             = 0x00000021,
GRBM_PERF_SEL_UTCL2_BUSY                 = 0x00000022,
GRBM_PERF_SEL_EA_BUSY                    = 0x00000023,
GRBM_PERF_SEL_RMI_BUSY                   = 0x00000024,
GRBM_PERF_SEL_CPAXI_BUSY                 = 0x00000025,
GRBM_PERF_SEL_UTCL1_BUSY                 = 0x00000027,
GRBM_PERF_SEL_GL2CC_BUSY                 = 0x00000028,
GRBM_PERF_SEL_SDMA_BUSY                  = 0x00000029,
GRBM_PERF_SEL_CH_BUSY                    = 0x0000002a,
GRBM_PERF_SEL_PH_BUSY                    = 0x0000002b,
GRBM_PERF_SEL_PMM_BUSY                   = 0x0000002c,
GRBM_PERF_SEL_GUS_BUSY                   = 0x0000002d,
GRBM_PERF_SEL_GL1CC_BUSY                 = 0x0000002e,
GRBM_PERF_SEL_ANY_ACTIVE_F_BUSY          = 0x0000002f,
GRBM_PERF_SEL_GL1H_BUSY                  = 0x00000030,
GRBM_PERF_SEL_PC_BUSY                    = 0x00000031,
} GRBM_PERF_SEL;

/*
 * GRBM_SE0_PERF_SEL enum
 */

typedef enum GRBM_SE0_PERF_SEL {
GRBM_SE0_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE0_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE0_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE0_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE0_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE0_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE0_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE0_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE0_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE0_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE0_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE0_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE0_PERF_SEL_RMI_BUSY               = 0x0000000f,
GRBM_SE0_PERF_SEL_UTCL1_BUSY             = 0x00000010,
GRBM_SE0_PERF_SEL_TCP_BUSY               = 0x00000011,
GRBM_SE0_PERF_SEL_GL1CC_BUSY             = 0x00000012,
GRBM_SE0_PERF_SEL_GL1H_BUSY              = 0x00000013,
GRBM_SE0_PERF_SEL_PC_BUSY                = 0x00000014,
} GRBM_SE0_PERF_SEL;

/*
 * GRBM_SE1_PERF_SEL enum
 */

typedef enum GRBM_SE1_PERF_SEL {
GRBM_SE1_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE1_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE1_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE1_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE1_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE1_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE1_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE1_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE1_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE1_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE1_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE1_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE1_PERF_SEL_RMI_BUSY               = 0x0000000f,
GRBM_SE1_PERF_SEL_UTCL1_BUSY             = 0x00000010,
GRBM_SE1_PERF_SEL_TCP_BUSY               = 0x00000011,
GRBM_SE1_PERF_SEL_GL1CC_BUSY             = 0x00000012,
GRBM_SE1_PERF_SEL_GL1H_BUSY              = 0x00000013,
GRBM_SE1_PERF_SEL_PC_BUSY                = 0x00000014,
} GRBM_SE1_PERF_SEL;

/*
 * GRBM_SE2_PERF_SEL enum
 */

typedef enum GRBM_SE2_PERF_SEL {
GRBM_SE2_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE2_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE2_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE2_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE2_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE2_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE2_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE2_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE2_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE2_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE2_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE2_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE2_PERF_SEL_RMI_BUSY               = 0x0000000f,
GRBM_SE2_PERF_SEL_UTCL1_BUSY             = 0x00000010,
GRBM_SE2_PERF_SEL_TCP_BUSY               = 0x00000011,
GRBM_SE2_PERF_SEL_GL1CC_BUSY             = 0x00000012,
GRBM_SE2_PERF_SEL_GL1H_BUSY              = 0x00000013,
GRBM_SE2_PERF_SEL_PC_BUSY                = 0x00000014,
} GRBM_SE2_PERF_SEL;

/*
 * GRBM_SE3_PERF_SEL enum
 */

typedef enum GRBM_SE3_PERF_SEL {
GRBM_SE3_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE3_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE3_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE3_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE3_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE3_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE3_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE3_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE3_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE3_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE3_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE3_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE3_PERF_SEL_RMI_BUSY               = 0x0000000f,
GRBM_SE3_PERF_SEL_UTCL1_BUSY             = 0x00000010,
GRBM_SE3_PERF_SEL_TCP_BUSY               = 0x00000011,
GRBM_SE3_PERF_SEL_GL1CC_BUSY             = 0x00000012,
GRBM_SE3_PERF_SEL_GL1H_BUSY              = 0x00000013,
GRBM_SE3_PERF_SEL_PC_BUSY                = 0x00000014,
} GRBM_SE3_PERF_SEL;

/*
 * GRBM_SE4_PERF_SEL enum
 */

typedef enum GRBM_SE4_PERF_SEL {
GRBM_SE4_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE4_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE4_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE4_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE4_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE4_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE4_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE4_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE4_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE4_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE4_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE4_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE4_PERF_SEL_RMI_BUSY               = 0x0000000f,
GRBM_SE4_PERF_SEL_UTCL1_BUSY             = 0x00000010,
GRBM_SE4_PERF_SEL_TCP_BUSY               = 0x00000011,
GRBM_SE4_PERF_SEL_GL1CC_BUSY             = 0x00000012,
GRBM_SE4_PERF_SEL_GL1H_BUSY              = 0x00000013,
GRBM_SE4_PERF_SEL_PC_BUSY                = 0x00000014,
} GRBM_SE4_PERF_SEL;

/*
 * GRBM_SE5_PERF_SEL enum
 */

typedef enum GRBM_SE5_PERF_SEL {
GRBM_SE5_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE5_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE5_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE5_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE5_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE5_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE5_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE5_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE5_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE5_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE5_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE5_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE5_PERF_SEL_RMI_BUSY               = 0x0000000f,
GRBM_SE5_PERF_SEL_UTCL1_BUSY             = 0x00000010,
GRBM_SE5_PERF_SEL_TCP_BUSY               = 0x00000011,
GRBM_SE5_PERF_SEL_GL1CC_BUSY             = 0x00000012,
GRBM_SE5_PERF_SEL_GL1H_BUSY              = 0x00000013,
GRBM_SE5_PERF_SEL_PC_BUSY                = 0x00000014,
} GRBM_SE5_PERF_SEL;

/*
 * GRBM_SE6_PERF_SEL enum
 */

typedef enum GRBM_SE6_PERF_SEL {
GRBM_SE6_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE6_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE6_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE6_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE6_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE6_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE6_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE6_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE6_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE6_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE6_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE6_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE6_PERF_SEL_RMI_BUSY               = 0x0000000f,
GRBM_SE6_PERF_SEL_UTCL1_BUSY             = 0x00000010,
GRBM_SE6_PERF_SEL_TCP_BUSY               = 0x00000011,
GRBM_SE6_PERF_SEL_GL1CC_BUSY             = 0x00000012,
GRBM_SE6_PERF_SEL_GL1H_BUSY              = 0x00000013,
GRBM_SE6_PERF_SEL_PC_BUSY                = 0x00000014,
} GRBM_SE6_PERF_SEL;

/*
 * GRBM_SE7_PERF_SEL enum
 */

typedef enum GRBM_SE7_PERF_SEL {
GRBM_SE7_PERF_SEL_COUNT                  = 0x00000000,
GRBM_SE7_PERF_SEL_USER_DEFINED           = 0x00000001,
GRBM_SE7_PERF_SEL_CB_BUSY                = 0x00000002,
GRBM_SE7_PERF_SEL_DB_BUSY                = 0x00000003,
GRBM_SE7_PERF_SEL_SC_BUSY                = 0x00000004,
GRBM_SE7_PERF_SEL_SPI_BUSY               = 0x00000006,
GRBM_SE7_PERF_SEL_SX_BUSY                = 0x00000007,
GRBM_SE7_PERF_SEL_TA_BUSY                = 0x00000008,
GRBM_SE7_PERF_SEL_CB_CLEAN               = 0x00000009,
GRBM_SE7_PERF_SEL_DB_CLEAN               = 0x0000000a,
GRBM_SE7_PERF_SEL_PA_BUSY                = 0x0000000c,
GRBM_SE7_PERF_SEL_BCI_BUSY               = 0x0000000e,
GRBM_SE7_PERF_SEL_RMI_BUSY               = 0x0000000f,
GRBM_SE7_PERF_SEL_UTCL1_BUSY             = 0x00000010,
GRBM_SE7_PERF_SEL_TCP_BUSY               = 0x00000011,
GRBM_SE7_PERF_SEL_GL1CC_BUSY             = 0x00000012,
GRBM_SE7_PERF_SEL_GL1H_BUSY              = 0x00000013,
GRBM_SE7_PERF_SEL_PC_BUSY                = 0x00000014,
} GRBM_SE7_PERF_SEL;

/*
 * PIPE_COMPAT_LEVEL enum
 */

typedef enum PIPE_COMPAT_LEVEL {
GEN_ZERO                                 = 0x00000000,
GEN_ONE                                  = 0x00000001,
GEN_TWO                                  = 0x00000002,
GEN_RESERVED                             = 0x00000003,
} PIPE_COMPAT_LEVEL;

/*******************************************************
 * CP Enums
 *******************************************************/

/*
 * CPC_LATENCY_STATS_SEL enum
 */

typedef enum CPC_LATENCY_STATS_SEL {
CPC_LATENCY_STATS_SEL_XACK_MAX           = 0x00000000,
CPC_LATENCY_STATS_SEL_XACK_MIN           = 0x00000001,
CPC_LATENCY_STATS_SEL_XACK_LAST          = 0x00000002,
CPC_LATENCY_STATS_SEL_XNACK_MAX          = 0x00000003,
CPC_LATENCY_STATS_SEL_XNACK_MIN          = 0x00000004,
CPC_LATENCY_STATS_SEL_XNACK_LAST         = 0x00000005,
CPC_LATENCY_STATS_SEL_INVAL_MAX          = 0x00000006,
CPC_LATENCY_STATS_SEL_INVAL_MIN          = 0x00000007,
CPC_LATENCY_STATS_SEL_INVAL_LAST         = 0x00000008,
} CPC_LATENCY_STATS_SEL;

/*
 * CPC_PERFCOUNT_SEL enum
 */

typedef enum CPC_PERFCOUNT_SEL {
CPC_PERF_SEL_ALWAYS_COUNT                = 0x00000000,
CPC_PERF_SEL_RCIU_STALL_WAIT_ON_FREE     = 0x00000001,
CPC_PERF_SEL_RCIU_STALL_PRIV_VIOLATION   = 0x00000002,
CPC_PERF_SEL_TCIU_STALL_WAIT_ON_FREE     = 0x00000005,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_RCIU_READY = 0x00000006,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_RCIU_READY_PERF = 0x00000007,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_RCIU_READ = 0x00000008,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_GUS_READ  = 0x00000009,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_GUS_WRITE = 0x0000000a,
CPC_PERF_SEL_ME1_STALL_ON_DATA_FROM_ROQ  = 0x0000000b,
CPC_PERF_SEL_ME1_STALL_ON_DATA_FROM_ROQ_PERF = 0x0000000c,
CPC_PERF_SEL_ME1_BUSY_FOR_PACKET_DECODE  = 0x0000000d,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_RCIU_READY = 0x0000000e,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_RCIU_READY_PERF = 0x0000000f,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_RCIU_READ = 0x00000010,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_GUS_READ  = 0x00000011,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_GUS_WRITE = 0x00000012,
CPC_PERF_SEL_ME2_STALL_ON_DATA_FROM_ROQ  = 0x00000013,
CPC_PERF_SEL_ME2_STALL_ON_DATA_FROM_ROQ_PERF = 0x00000014,
CPC_PERF_SEL_ME2_BUSY_FOR_PACKET_DECODE  = 0x00000015,
CPC_PERF_SEL_UTCL2IU_STALL_WAIT_ON_FREE  = 0x00000016,
CPC_PERF_SEL_UTCL2IU_STALL_WAIT_ON_TAGS  = 0x00000017,
CPC_PERF_SEL_UTCL1_STALL_ON_TRANSLATION  = 0x00000018,
CPC_PERF_SEL_CPC_STAT_BUSY               = 0x00000019,
CPC_PERF_SEL_CPC_STAT_IDLE               = 0x0000001a,
CPC_PERF_SEL_CPC_STAT_STALL              = 0x0000001b,
CPC_PERF_SEL_CPC_TCIU_BUSY               = 0x0000001c,
CPC_PERF_SEL_CPC_TCIU_IDLE               = 0x0000001d,
CPC_PERF_SEL_CPC_UTCL2IU_BUSY            = 0x0000001e,
CPC_PERF_SEL_CPC_UTCL2IU_IDLE            = 0x0000001f,
CPC_PERF_SEL_CPC_UTCL2IU_STALL           = 0x00000020,
CPC_PERF_SEL_ME1_DC0_SPI_BUSY            = 0x00000021,
CPC_PERF_SEL_ME2_DC1_SPI_BUSY            = 0x00000022,
CPC_PERF_SEL_CPC_GCRIU_BUSY              = 0x00000023,
CPC_PERF_SEL_CPC_GCRIU_IDLE              = 0x00000024,
CPC_PERF_SEL_CPC_GCRIU_STALL             = 0x00000025,
CPC_PERF_SEL_GCRIU_STALL_WAIT_ON_FREE    = 0x00000026,
CPC_PERF_SEL_ME1_STALL_WAIT_ON_TCIU_READ = 0x00000027,
CPC_PERF_SEL_ME2_STALL_WAIT_ON_TCIU_READ = 0x00000028,
CPC_PERF_SEL_CPC_UTCL2IU_XACK            = 0x00000029,
CPC_PERF_SEL_CPC_UTCL2IU_XNACK           = 0x0000002a,
CPC_PERF_SEL_MEC_INSTR_CACHE_HIT         = 0x0000002b,
CPC_PERF_SEL_MEC_INSTR_CACHE_MISS        = 0x0000002c,
CPC_PERF_SEL_MES_THREAD0                 = 0x0000002d,
CPC_PERF_SEL_MES_THREAD1                 = 0x0000002e,
} CPC_PERFCOUNT_SEL;

/*
 * CPF_LATENCY_STATS_SEL enum
 */

typedef enum CPF_LATENCY_STATS_SEL {
CPF_LATENCY_STATS_SEL_XACK_MAX           = 0x00000000,
CPF_LATENCY_STATS_SEL_XACK_MIN           = 0x00000001,
CPF_LATENCY_STATS_SEL_XACK_LAST          = 0x00000002,
CPF_LATENCY_STATS_SEL_XNACK_MAX          = 0x00000003,
CPF_LATENCY_STATS_SEL_XNACK_MIN          = 0x00000004,
CPF_LATENCY_STATS_SEL_XNACK_LAST         = 0x00000005,
CPF_LATENCY_STATS_SEL_READ_MAX           = 0x00000006,
CPF_LATENCY_STATS_SEL_READ_MIN           = 0x00000007,
CPF_LATENCY_STATS_SEL_READ_LAST          = 0x00000008,
CPF_LATENCY_STATS_SEL_INVAL_MAX          = 0x00000009,
CPF_LATENCY_STATS_SEL_INVAL_MIN          = 0x0000000a,
CPF_LATENCY_STATS_SEL_INVAL_LAST         = 0x0000000b,
} CPF_LATENCY_STATS_SEL;

/*
 * CPF_PERFCOUNTWINDOW_SEL enum
 */

typedef enum CPF_PERFCOUNTWINDOW_SEL {
CPF_PERFWINDOW_SEL_CSF                   = 0x00000000,
CPF_PERFWINDOW_SEL_HQD1                  = 0x00000001,
CPF_PERFWINDOW_SEL_HQD2                  = 0x00000002,
CPF_PERFWINDOW_SEL_RDMA                  = 0x00000003,
CPF_PERFWINDOW_SEL_RWPP                  = 0x00000004,
} CPF_PERFCOUNTWINDOW_SEL;

/*
 * CPF_PERFCOUNT_SEL enum
 */

typedef enum CPF_PERFCOUNT_SEL {
CPF_PERF_SEL_ALWAYS_COUNT                = 0x00000000,
CPF_PERF_SEL_TCIU_STALLED_WAITING_ON_FREE = 0x00000002,
CPF_PERF_SEL_TCIU_STALLED_WAITING_ON_TAGS = 0x00000003,
CPF_PERF_SEL_CSF_BUSY_FOR_FETCHING_RING  = 0x00000004,
CPF_PERF_SEL_CSF_BUSY_FOR_FETCHING_IB1   = 0x00000005,
CPF_PERF_SEL_CSF_BUSY_FOR_FETCHING_IB2   = 0x00000006,
CPF_PERF_SEL_CSF_BUSY_FOR_FETCHING_STATE = 0x00000007,
CPF_PERF_SEL_CSF_STATE_FIFO_NOT_RTR      = 0x0000000a,
CPF_PERF_SEL_CSF_FETCHING_CMD_BUFFERS    = 0x0000000b,
CPF_PERF_SEL_GRBM_DWORDS_SENT            = 0x0000000c,
CPF_PERF_SEL_DYNAMIC_CLOCK_VALID         = 0x0000000d,
CPF_PERF_SEL_REGISTER_CLOCK_VALID        = 0x0000000e,
CPF_PERF_SEL_GUS_WRITE_REQUEST_SENT      = 0x0000000f,
CPF_PERF_SEL_GUS_READ_REQUEST_SENT       = 0x00000010,
CPF_PERF_SEL_UTCL2IU_STALL_WAIT_ON_FREE  = 0x00000011,
CPF_PERF_SEL_UTCL2IU_STALL_WAIT_ON_TAGS  = 0x00000012,
CPF_PERF_SEL_GFX_UTCL1_STALL_ON_TRANSLATION = 0x00000013,
CPF_PERF_SEL_CMP_UTCL1_STALL_ON_TRANSLATION = 0x00000014,
CPF_PERF_SEL_RCIU_STALL_WAIT_ON_FREE     = 0x00000015,
CPF_PERF_SEL_TCIU_WRITE_REQUEST_SENT     = 0x00000016,
CPF_PERF_SEL_TCIU_READ_REQUEST_SENT      = 0x00000017,
CPF_PERF_SEL_CPF_STAT_BUSY               = 0x00000018,
CPF_PERF_SEL_CPF_STAT_IDLE               = 0x00000019,
CPF_PERF_SEL_CPF_STAT_STALL              = 0x0000001a,
CPF_PERF_SEL_CPF_TCIU_BUSY               = 0x0000001b,
CPF_PERF_SEL_CPF_TCIU_IDLE               = 0x0000001c,
CPF_PERF_SEL_CPF_TCIU_STALL              = 0x0000001d,
CPF_PERF_SEL_CPF_UTCL2IU_BUSY            = 0x0000001e,
CPF_PERF_SEL_CPF_UTCL2IU_IDLE            = 0x0000001f,
CPF_PERF_SEL_CPF_UTCL2IU_STALL           = 0x00000020,
CPF_PERF_SEL_CPF_GCRIU_BUSY              = 0x00000021,
CPF_PERF_SEL_CPF_GCRIU_IDLE              = 0x00000022,
CPF_PERF_SEL_CPF_GCRIU_STALL             = 0x00000023,
CPF_PERF_SEL_GCRIU_STALL_WAIT_ON_FREE    = 0x00000024,
CPF_PERF_SEL_CSF_BUSY_FOR_FETCHING_DB    = 0x00000025,
CPF_PERF_SEL_CPF_UTCL2IU_XACK            = 0x00000026,
CPF_PERF_SEL_CPF_UTCL2IU_XNACK           = 0x00000027,
CPF_PERF_SEL_CP_SDMA_MNGR_DMA_REQ        = 0x00000028,
CPF_PERF_SEL_CP_SDMA_MNGR_DMA_DONE       = 0x00000029,
CPF_PERF_SEL_CP_SDMA_MNGR_LATENCY        = 0x0000002a,
CPF_PERF_SEL_CP_SDMA_MNGR_SDMABUSY       = 0x0000002b,
} CPF_PERFCOUNT_SEL;

/*
 * CPF_SCRATCH_REG_ATOMIC_OP enum
 */

typedef enum CPF_SCRATCH_REG_ATOMIC_OP {
CPF_SCRATCH_REG_ATOMIC_ADD               = 0x00000000,
CPF_SCRATCH_REG_ATOMIC_SUB               = 0x00000001,
CPF_SCRATCH_REG_ATOMIC_OR                = 0x00000002,
CPF_SCRATCH_REG_ATOMIC_AND               = 0x00000003,
CPF_SCRATCH_REG_ATOMIC_NOT               = 0x00000004,
CPF_SCRATCH_REG_ATOMIC_MIN               = 0x00000005,
CPF_SCRATCH_REG_ATOMIC_MAX               = 0x00000006,
CPF_SCRATCH_REG_ATOMIC_CMPSWAP           = 0x00000007,
} CPF_SCRATCH_REG_ATOMIC_OP;

/*
 * CPG_LATENCY_STATS_SEL enum
 */

typedef enum CPG_LATENCY_STATS_SEL {
CPG_LATENCY_STATS_SEL_XACK_MAX           = 0x00000000,
CPG_LATENCY_STATS_SEL_XACK_MIN           = 0x00000001,
CPG_LATENCY_STATS_SEL_XACK_LAST          = 0x00000002,
CPG_LATENCY_STATS_SEL_XNACK_MAX          = 0x00000003,
CPG_LATENCY_STATS_SEL_XNACK_MIN          = 0x00000004,
CPG_LATENCY_STATS_SEL_XNACK_LAST         = 0x00000005,
CPG_LATENCY_STATS_SEL_WRITE_MAX          = 0x00000006,
CPG_LATENCY_STATS_SEL_WRITE_MIN          = 0x00000007,
CPG_LATENCY_STATS_SEL_WRITE_LAST         = 0x00000008,
CPG_LATENCY_STATS_SEL_READ_MAX           = 0x00000009,
CPG_LATENCY_STATS_SEL_READ_MIN           = 0x0000000a,
CPG_LATENCY_STATS_SEL_READ_LAST          = 0x0000000b,
CPG_LATENCY_STATS_SEL_ATOMIC_MAX         = 0x0000000c,
CPG_LATENCY_STATS_SEL_ATOMIC_MIN         = 0x0000000d,
CPG_LATENCY_STATS_SEL_ATOMIC_LAST        = 0x0000000e,
CPG_LATENCY_STATS_SEL_INVAL_MAX          = 0x0000000f,
CPG_LATENCY_STATS_SEL_INVAL_MIN          = 0x00000010,
CPG_LATENCY_STATS_SEL_INVAL_LAST         = 0x00000011,
} CPG_LATENCY_STATS_SEL;

/*
 * CPG_PERFCOUNTWINDOW_SEL enum
 */

typedef enum CPG_PERFCOUNTWINDOW_SEL {
CPG_PERFWINDOW_SEL_PFP                   = 0x00000000,
CPG_PERFWINDOW_SEL_ME                    = 0x00000001,
CPG_PERFWINDOW_SEL_CE                    = 0x00000002,
CPG_PERFWINDOW_SEL_MES                   = 0x00000003,
CPG_PERFWINDOW_SEL_MEC1                  = 0x00000004,
CPG_PERFWINDOW_SEL_MEC2                  = 0x00000005,
CPG_PERFWINDOW_SEL_DFY                   = 0x00000006,
CPG_PERFWINDOW_SEL_DMA                   = 0x00000007,
CPG_PERFWINDOW_SEL_SHADOW                = 0x00000008,
CPG_PERFWINDOW_SEL_RB                    = 0x00000009,
CPG_PERFWINDOW_SEL_CEDMA                 = 0x0000000a,
CPG_PERFWINDOW_SEL_PRT_HDR_RPTR          = 0x0000000b,
CPG_PERFWINDOW_SEL_PRT_SMP_RPTR          = 0x0000000c,
CPG_PERFWINDOW_SEL_PQ1                   = 0x0000000d,
CPG_PERFWINDOW_SEL_PQ2                   = 0x0000000e,
CPG_PERFWINDOW_SEL_PQ3                   = 0x0000000f,
CPG_PERFWINDOW_SEL_MEMWR                 = 0x00000010,
CPG_PERFWINDOW_SEL_MEMRD                 = 0x00000011,
CPG_PERFWINDOW_SEL_VGT0                  = 0x00000012,
CPG_PERFWINDOW_SEL_VGT1                  = 0x00000013,
CPG_PERFWINDOW_SEL_APPEND                = 0x00000014,
CPG_PERFWINDOW_SEL_QURD                  = 0x00000015,
CPG_PERFWINDOW_SEL_DDID                  = 0x00000016,
CPG_PERFWINDOW_SEL_SR                    = 0x00000017,
CPG_PERFWINDOW_SEL_QU_EOP                = 0x00000018,
CPG_PERFWINDOW_SEL_QU_STRM               = 0x00000019,
CPG_PERFWINDOW_SEL_QU_PIPE               = 0x0000001a,
CPG_PERFWINDOW_SEL_RESERVED1             = 0x0000001b,
CPG_PERFWINDOW_SEL_CPC_IC                = 0x0000001c,
CPG_PERFWINDOW_SEL_RESERVED2             = 0x0000001d,
CPG_PERFWINDOW_SEL_CPG_IC                = 0x0000001e,
} CPG_PERFCOUNTWINDOW_SEL;

/*
 * CPG_PERFCOUNT_SEL enum
 */

typedef enum CPG_PERFCOUNT_SEL {
CPG_PERF_SEL_ALWAYS_COUNT                = 0x00000000,
CPG_PERF_SEL_RBIU_FIFO_FULL              = 0x00000001,
CPG_PERF_SEL_CP_GRBM_DWORDS_SENT         = 0x00000004,
CPG_PERF_SEL_ME_PARSER_BUSY              = 0x00000005,
CPG_PERF_SEL_COUNT_TYPE0_PACKETS         = 0x00000006,
CPG_PERF_SEL_COUNT_TYPE3_PACKETS         = 0x00000007,
CPG_PERF_SEL_CP_GRBM_OUT_OF_CREDITS      = 0x00000009,
CPG_PERF_SEL_CP_PFP_GRBM_OUT_OF_CREDITS  = 0x0000000a,
CPG_PERF_SEL_CP_GDS_GRBM_OUT_OF_CREDITS  = 0x0000000b,
CPG_PERF_SEL_RCIU_STALLED_ON_ME_READ     = 0x0000000c,
CPG_PERF_SEL_RCIU_STALLED_ON_DMA_READ    = 0x0000000d,
CPG_PERF_SEL_SSU_STALLED_ON_ACTIVE_CNTX  = 0x0000000e,
CPG_PERF_SEL_SSU_STALLED_ON_CLEAN_SIGNALS = 0x0000000f,
CPG_PERF_SEL_QU_STALLED_ON_EOP_DONE_PULSE = 0x00000010,
CPG_PERF_SEL_QU_STALLED_ON_EOP_DONE_WR_CONFIRM = 0x00000011,
CPG_PERF_SEL_PFP_STALLED_ON_CSF_READY    = 0x00000012,
CPG_PERF_SEL_PFP_STALLED_ON_MEQ_READY    = 0x00000013,
CPG_PERF_SEL_PFP_STALLED_ON_RCIU_READY   = 0x00000014,
CPG_PERF_SEL_PFP_STALLED_FOR_DATA_FROM_ROQ = 0x00000015,
CPG_PERF_SEL_ME_STALLED_FOR_DATA_FROM_PFP = 0x00000016,
CPG_PERF_SEL_ME_STALLED_FOR_DATA_FROM_STQ = 0x00000017,
CPG_PERF_SEL_ME_STALLED_ON_NO_AVAIL_GFX_CNTX = 0x00000018,
CPG_PERF_SEL_ME_STALLED_WRITING_TO_RCIU  = 0x00000019,
CPG_PERF_SEL_ME_STALLED_WRITING_CONSTANTS = 0x0000001a,
CPG_PERF_SEL_ME_STALLED_ON_PARTIAL_FLUSH = 0x0000001b,
CPG_PERF_SEL_ME_WAIT_ON_CE_COUNTER       = 0x0000001c,
CPG_PERF_SEL_ME_WAIT_ON_AVAIL_BUFFER     = 0x0000001d,
CPG_PERF_SEL_LOAD_STALLED_ON_SET_COHERENCY = 0x0000001f,
CPG_PERF_SEL_DYNAMIC_CLK_VALID           = 0x00000020,
CPG_PERF_SEL_REGISTER_CLK_VALID          = 0x00000021,
CPG_PERF_SEL_GUS_WRITE_REQUEST_SENT      = 0x00000022,
CPG_PERF_SEL_GUS_READ_REQUEST_SENT       = 0x00000023,
CPG_PERF_SEL_CE_STALL_RAM_DUMP           = 0x00000024,
CPG_PERF_SEL_CE_STALL_RAM_WRITE          = 0x00000025,
CPG_PERF_SEL_CE_STALL_ON_INC_FIFO        = 0x00000026,
CPG_PERF_SEL_CE_STALL_ON_WR_RAM_FIFO     = 0x00000027,
CPG_PERF_SEL_CE_STALL_ON_DATA_FROM_ROQ   = 0x00000029,
CPG_PERF_SEL_CE_STALL_ON_CE_BUFFER_FLAG  = 0x0000002a,
CPG_PERF_SEL_CE_STALL_ON_DE_COUNTER      = 0x0000002b,
CPG_PERF_SEL_TCIU_STALL_WAIT_ON_FREE     = 0x0000002c,
CPG_PERF_SEL_TCIU_STALL_WAIT_ON_TAGS     = 0x0000002d,
CPG_PERF_SEL_UTCL2IU_STALL_WAIT_ON_FREE  = 0x0000002e,
CPG_PERF_SEL_UTCL2IU_STALL_WAIT_ON_TAGS  = 0x0000002f,
CPG_PERF_SEL_UTCL1_STALL_ON_TRANSLATION  = 0x00000030,
CPG_PERF_SEL_TCIU_WRITE_REQUEST_SENT     = 0x00000031,
CPG_PERF_SEL_TCIU_READ_REQUEST_SENT      = 0x00000032,
CPG_PERF_SEL_CPG_STAT_BUSY               = 0x00000033,
CPG_PERF_SEL_CPG_STAT_IDLE               = 0x00000034,
CPG_PERF_SEL_CPG_STAT_STALL              = 0x00000035,
CPG_PERF_SEL_CPG_TCIU_BUSY               = 0x00000036,
CPG_PERF_SEL_CPG_TCIU_IDLE               = 0x00000037,
CPG_PERF_SEL_CPG_TCIU_STALL              = 0x00000038,
CPG_PERF_SEL_CPG_UTCL2IU_BUSY            = 0x00000039,
CPG_PERF_SEL_CPG_UTCL2IU_IDLE            = 0x0000003a,
CPG_PERF_SEL_CPG_UTCL2IU_STALL           = 0x0000003b,
CPG_PERF_SEL_CPG_GCRIU_BUSY              = 0x0000003c,
CPG_PERF_SEL_CPG_GCRIU_IDLE              = 0x0000003d,
CPG_PERF_SEL_CPG_GCRIU_STALL             = 0x0000003e,
CPG_PERF_SEL_GCRIU_STALL_WAIT_ON_FREE    = 0x0000003f,
CPG_PERF_SEL_ALL_GFX_PIPES_BUSY          = 0x00000040,
CPG_PERF_SEL_CPG_UTCL2IU_XACK            = 0x00000041,
CPG_PERF_SEL_CPG_UTCL2IU_XNACK           = 0x00000042,
CPG_PERF_SEL_PFP_STALLED_ON_MEQ_DDID_READY = 0x00000043,
CPG_PERF_SEL_PFP_INSTR_CACHE_HIT         = 0x00000044,
CPG_PERF_SEL_PFP_INSTR_CACHE_MISS        = 0x00000045,
CPG_PERF_SEL_CE_INSTR_CACHE_HIT          = 0x00000046,
CPG_PERF_SEL_CE_INSTR_CACHE_MISS         = 0x00000047,
CPG_PERF_SEL_ME_INSTR_CACHE_HIT          = 0x00000048,
CPG_PERF_SEL_ME_INSTR_CACHE_MISS         = 0x00000049,
CPG_PERF_SEL_PFP_PACKET_FILTER_HIT_IB1   = 0x0000004a,
CPG_PERF_SEL_PFP_PACKET_FILTER_MISS_IB1  = 0x0000004b,
CPG_PERF_SEL_PFP_PACKET_FILTER_HIT_IB2   = 0x0000004c,
CPG_PERF_SEL_PFP_PACKET_FILTER_MISS_IB2  = 0x0000004d,
CPG_PERF_SEL_DMA_BUSY                    = 0x0000004e,
CPG_PERF_SEL_DMA_STARVED                 = 0x0000004f,
CPG_PERF_SEL_DMA_STALLED                 = 0x00000050,
CPG_PERF_SEL_DMA_FETCHER_STALLED_ON_ROQ_FULL = 0x00000051,
CPG_PERF_SEL_PFP_PWS_STALLED0            = 0x00000052,
CPG_PERF_SEL_ME_PWS_STALLED0             = 0x00000053,
CPG_PERF_SEL_PFP_PWS_STALLED1            = 0x00000054,
CPG_PERF_SEL_ME_PWS_STALLED1             = 0x00000055,
} CPG_PERFCOUNT_SEL;

/*
 * CP_ALPHA_TAG_RAM_SEL enum
 */

typedef enum CP_ALPHA_TAG_RAM_SEL {
CPG_TAG_RAM                              = 0x00000000,
CPC_TAG_RAM                              = 0x00000001,
CPF_TAG_RAM                              = 0x00000002,
RSV_TAG_RAM                              = 0x00000003,
} CP_ALPHA_TAG_RAM_SEL;

/*
 * CP_DDID_CNTL_MODE enum
 */

typedef enum CP_DDID_CNTL_MODE {
STALL                                    = 0x00000000,
OVERRUN                                  = 0x00000001,
} CP_DDID_CNTL_MODE;

/*
 * CP_DDID_CNTL_SIZE enum
 */

typedef enum CP_DDID_CNTL_SIZE {
SIZE_8K                                  = 0x00000000,
SIZE_16K                                 = 0x00000001,
} CP_DDID_CNTL_SIZE;

/*
 * CP_DDID_CNTL_VMID_SEL enum
 */

typedef enum CP_DDID_CNTL_VMID_SEL {
DDID_VMID_PIPE                           = 0x00000000,
DDID_VMID_CNTL                           = 0x00000001,
} CP_DDID_CNTL_VMID_SEL;

/*
 * CP_ME_ID enum
 */

typedef enum CP_ME_ID {
ME_ID0                                   = 0x00000000,
ME_ID1                                   = 0x00000001,
ME_ID2                                   = 0x00000002,
ME_ID3                                   = 0x00000003,
} CP_ME_ID;

/*
 * CP_PERFMON_ENABLE_MODE enum
 */

typedef enum CP_PERFMON_ENABLE_MODE {
CP_PERFMON_ENABLE_MODE_ALWAYS_COUNT      = 0x00000000,
CP_PERFMON_ENABLE_MODE_RESERVED_1        = 0x00000001,
CP_PERFMON_ENABLE_MODE_COUNT_CONTEXT_TRUE = 0x00000002,
CP_PERFMON_ENABLE_MODE_COUNT_CONTEXT_FALSE = 0x00000003,
} CP_PERFMON_ENABLE_MODE;

/*
 * CP_PERFMON_STATE enum
 */

typedef enum CP_PERFMON_STATE {
CP_PERFMON_STATE_DISABLE_AND_RESET       = 0x00000000,
CP_PERFMON_STATE_START_COUNTING          = 0x00000001,
CP_PERFMON_STATE_STOP_COUNTING           = 0x00000002,
CP_PERFMON_STATE_RESERVED_3              = 0x00000003,
CP_PERFMON_STATE_DISABLE_AND_RESET_PHANTOM = 0x00000004,
CP_PERFMON_STATE_COUNT_AND_DUMP_PHANTOM  = 0x00000005,
} CP_PERFMON_STATE;

/*
 * CP_PIPE_ID enum
 */

typedef enum CP_PIPE_ID {
PIPE_ID0                                 = 0x00000000,
PIPE_ID1                                 = 0x00000001,
PIPE_ID2                                 = 0x00000002,
PIPE_ID3                                 = 0x00000003,
} CP_PIPE_ID;

/*
 * CP_RING_ID enum
 */

typedef enum CP_RING_ID {
RINGID0                                  = 0x00000000,
RINGID1                                  = 0x00000001,
RINGID2                                  = 0x00000002,
RINGID3                                  = 0x00000003,
} CP_RING_ID;

/*
 * SPM_PERFMON_STATE enum
 */

typedef enum SPM_PERFMON_STATE {
STRM_PERFMON_STATE_DISABLE_AND_RESET     = 0x00000000,
STRM_PERFMON_STATE_START_COUNTING        = 0x00000001,
STRM_PERFMON_STATE_STOP_COUNTING         = 0x00000002,
STRM_PERFMON_STATE_RESERVED_3            = 0x00000003,
STRM_PERFMON_STATE_DISABLE_AND_RESET_PHANTOM = 0x00000004,
STRM_PERFMON_STATE_COUNT_AND_DUMP_PHANTOM = 0x00000005,
} SPM_PERFMON_STATE;

/*
 * SEM_RESPONSE value
 */

#define SEM_ECC_ERROR                  0x00000000
#define SEM_TRANS_ERROR                0x00000001
#define SEM_RESP_FAILED                0x00000002
#define SEM_RESP_PASSED                0x00000003

/*
 * IQ_RETRY_TYPE value
 */

#define IQ_QUEUE_SLEEP                 0x00000000
#define IQ_OFFLOAD_RETRY               0x00000001
#define IQ_SCH_WAVE_MSG                0x00000002
#define IQ_SEM_REARM                   0x00000003
#define IQ_DEQUEUE_RETRY               0x00000004

/*
 * IQ_INTR_TYPE value
 */

#define IQ_INTR_TYPE_PQ                0x00000000
#define IQ_INTR_TYPE_IB                0x00000001
#define IQ_INTR_TYPE_MQD               0x00000002

/*
 * VMID_SIZE value
 */

#define VMID_SZ                        0x00000004

/*
 * SRCID_SECURE value
 */

#define SRCID_RLC                      0x00000000
#define SRCID_RLCV                     0x00000006
#define SRCID_SECURE_CP                0x00000007
#define SRCID_NONSECURE_CP             0x00000001
#define SRCID_SECURE_CP_RCIU           0x00000007
#define SRCID_NONSECURE_CP_RCIU        0x00000001

/*
 * CONFIG_SPACE value
 */

#define CONFIG_SPACE_START             0x00002000
#define CONFIG_SPACE_END               0x00009fff

/*
 * CONFIG_SPACE1 value
 */

#define CONFIG_SPACE1_START            0x00002000
#define CONFIG_SPACE1_END              0x00002bff

/*
 * CONFIG_SPACE2 value
 */

#define CONFIG_SPACE2_START            0x00003000
#define CONFIG_SPACE2_END              0x00009fff

/*
 * UCONFIG_SPACE value
 */

#define UCONFIG_SPACE_START            0x0000c000
#define UCONFIG_SPACE_END              0x0000ffff

/*
 * PERSISTENT_SPACE value
 */

#define PERSISTENT_SPACE_START         0x00002c00
#define PERSISTENT_SPACE_END           0x00002fff

/*
 * CONTEXT_SPACE value
 */

#define CONTEXT_SPACE_START            0x0000a000
#define CONTEXT_SPACE_END              0x0000a3ff

/*******************************************************
 * SX Enums
 *******************************************************/

/*
 * SX_BLEND_OPT enum
 */

typedef enum SX_BLEND_OPT {
BLEND_OPT_PRESERVE_NONE_IGNORE_ALL       = 0x00000000,
BLEND_OPT_PRESERVE_ALL_IGNORE_NONE       = 0x00000001,
BLEND_OPT_PRESERVE_C1_IGNORE_C0          = 0x00000002,
BLEND_OPT_PRESERVE_C0_IGNORE_C1          = 0x00000003,
BLEND_OPT_PRESERVE_A1_IGNORE_A0          = 0x00000004,
BLEND_OPT_PRESERVE_A0_IGNORE_A1          = 0x00000005,
BLEND_OPT_PRESERVE_NONE_IGNORE_A0        = 0x00000006,
BLEND_OPT_PRESERVE_NONE_IGNORE_NONE      = 0x00000007,
} SX_BLEND_OPT;

/*
 * SX_DOWNCONVERT_FORMAT enum
 */

typedef enum SX_DOWNCONVERT_FORMAT {
SX_RT_EXPORT_NO_CONVERSION               = 0x00000000,
SX_RT_EXPORT_32_R                        = 0x00000001,
SX_RT_EXPORT_32_A                        = 0x00000002,
SX_RT_EXPORT_10_11_11                    = 0x00000003,
SX_RT_EXPORT_2_10_10_10                  = 0x00000004,
SX_RT_EXPORT_8_8_8_8                     = 0x00000005,
SX_RT_EXPORT_5_6_5                       = 0x00000006,
SX_RT_EXPORT_1_5_5_5                     = 0x00000007,
SX_RT_EXPORT_4_4_4_4                     = 0x00000008,
SX_RT_EXPORT_16_16_GR                    = 0x00000009,
SX_RT_EXPORT_16_16_AR                    = 0x0000000a,
SX_RT_EXPORT_9_9_9_E5                    = 0x0000000b,
SX_RT_EXPORT_2_10_10_10_7E3              = 0x0000000c,
SX_RT_EXPORT_2_10_10_10_6E4              = 0x0000000d,
} SX_DOWNCONVERT_FORMAT;

/*
 * SX_OPT_COMB_FCN enum
 */

typedef enum SX_OPT_COMB_FCN {
OPT_COMB_NONE                            = 0x00000000,
OPT_COMB_ADD                             = 0x00000001,
OPT_COMB_SUBTRACT                        = 0x00000002,
OPT_COMB_MIN                             = 0x00000003,
OPT_COMB_MAX                             = 0x00000004,
OPT_COMB_REVSUBTRACT                     = 0x00000005,
OPT_COMB_BLEND_DISABLED                  = 0x00000006,
OPT_COMB_SAFE_ADD                        = 0x00000007,
} SX_OPT_COMB_FCN;

/*
 * SX_PERFCOUNTER_VALS enum
 */

typedef enum SX_PERFCOUNTER_VALS {
SX_PERF_SEL_PA_IDLE_CYCLES               = 0x00000000,
SX_PERF_SEL_PA_REQ                       = 0x00000001,
SX_PERF_SEL_PA_POS                       = 0x00000002,
SX_PERF_SEL_CLOCK                        = 0x00000003,
SX_PERF_SEL_GATE_EN1                     = 0x00000004,
SX_PERF_SEL_GATE_EN2                     = 0x00000005,
SX_PERF_SEL_GATE_EN3                     = 0x00000006,
SX_PERF_SEL_GATE_EN4                     = 0x00000007,
SX_PERF_SEL_SH_POS_STARVE                = 0x00000008,
SX_PERF_SEL_SH_COLOR_STARVE              = 0x00000009,
SX_PERF_SEL_SH_POS_STALL                 = 0x0000000a,
SX_PERF_SEL_SH_COLOR_STALL               = 0x0000000b,
SX_PERF_SEL_DB0_PIXELS                   = 0x0000000c,
SX_PERF_SEL_DB0_HALF_QUADS               = 0x0000000d,
SX_PERF_SEL_DB0_PIXEL_STALL              = 0x0000000e,
SX_PERF_SEL_DB0_PIXEL_IDLE               = 0x0000000f,
SX_PERF_SEL_DB0_PRED_PIXELS              = 0x00000010,
SX_PERF_SEL_DB1_PIXELS                   = 0x00000011,
SX_PERF_SEL_DB1_HALF_QUADS               = 0x00000012,
SX_PERF_SEL_DB1_PIXEL_STALL              = 0x00000013,
SX_PERF_SEL_DB1_PIXEL_IDLE               = 0x00000014,
SX_PERF_SEL_DB1_PRED_PIXELS              = 0x00000015,
SX_PERF_SEL_DB2_PIXELS                   = 0x00000016,
SX_PERF_SEL_DB2_HALF_QUADS               = 0x00000017,
SX_PERF_SEL_DB2_PIXEL_STALL              = 0x00000018,
SX_PERF_SEL_DB2_PIXEL_IDLE               = 0x00000019,
SX_PERF_SEL_DB2_PRED_PIXELS              = 0x0000001a,
SX_PERF_SEL_DB3_PIXELS                   = 0x0000001b,
SX_PERF_SEL_DB3_HALF_QUADS               = 0x0000001c,
SX_PERF_SEL_DB3_PIXEL_STALL              = 0x0000001d,
SX_PERF_SEL_DB3_PIXEL_IDLE               = 0x0000001e,
SX_PERF_SEL_DB3_PRED_PIXELS              = 0x0000001f,
SX_PERF_SEL_COL_BUSY                     = 0x00000020,
SX_PERF_SEL_POS_BUSY                     = 0x00000021,
SX_PERF_SEL_DB0_MRT_BLEND_BYPASS         = 0x00000022,
SX_PERF_SEL_DB0_MRT_DONT_RD_DEST         = 0x00000023,
SX_PERF_SEL_DB0_MRT_DISCARD_SRC          = 0x00000024,
SX_PERF_SEL_DB0_MRT_SINGLE_QUADS         = 0x00000025,
SX_PERF_SEL_DB0_MRT_DOUBLE_QUADS         = 0x00000026,
SX_PERF_SEL_DB1_MRT_BLEND_BYPASS         = 0x00000027,
SX_PERF_SEL_DB1_MRT_DONT_RD_DEST         = 0x00000028,
SX_PERF_SEL_DB1_MRT_DISCARD_SRC          = 0x00000029,
SX_PERF_SEL_DB1_MRT_SINGLE_QUADS         = 0x0000002a,
SX_PERF_SEL_DB1_MRT_DOUBLE_QUADS         = 0x0000002b,
SX_PERF_SEL_DB2_MRT_BLEND_BYPASS         = 0x0000002c,
SX_PERF_SEL_DB2_MRT_DONT_RD_DEST         = 0x0000002d,
SX_PERF_SEL_DB2_MRT_DISCARD_SRC          = 0x0000002e,
SX_PERF_SEL_DB2_MRT_SINGLE_QUADS         = 0x0000002f,
SX_PERF_SEL_DB2_MRT_DOUBLE_QUADS         = 0x00000030,
SX_PERF_SEL_DB3_MRT_BLEND_BYPASS         = 0x00000031,
SX_PERF_SEL_DB3_MRT_DONT_RD_DEST         = 0x00000032,
SX_PERF_SEL_DB3_MRT_DISCARD_SRC          = 0x00000033,
SX_PERF_SEL_DB3_MRT_SINGLE_QUADS         = 0x00000034,
SX_PERF_SEL_DB3_MRT_DOUBLE_QUADS         = 0x00000035,
SX_PERF_SEL_PA_REQ_LATENCY               = 0x00000036,
SX_PERF_SEL_POS_SCBD_STALL               = 0x00000037,
SX_PERF_SEL_CLOCK_DROP_STALL             = 0x00000038,
SX_PERF_SEL_GATE_EN5                     = 0x00000039,
SX_PERF_SEL_GATE_EN6                     = 0x0000003a,
SX_PERF_SEL_DB0_SIZE                     = 0x0000003b,
SX_PERF_SEL_DB1_SIZE                     = 0x0000003c,
SX_PERF_SEL_DB2_SIZE                     = 0x0000003d,
SX_PERF_SEL_DB3_SIZE                     = 0x0000003e,
SX_PERF_SEL_IDX_STALL_CYCLES             = 0x0000003f,
SX_PERF_SEL_IDX_IDLE_CYCLES              = 0x00000040,
SX_PERF_SEL_IDX_REQ                      = 0x00000041,
SX_PERF_SEL_IDX_RET                      = 0x00000042,
SX_PERF_SEL_IDX_REQ_LATENCY              = 0x00000043,
SX_PERF_SEL_IDX_SCBD_STALL               = 0x00000044,
SX_PERF_SEL_GATE_EN7                     = 0x00000045,
SX_PERF_SEL_GATE_EN8                     = 0x00000046,
SX_PERF_SEL_SH_IDX_STARVE                = 0x00000047,
SX_PERF_SEL_IDX_BUSY                     = 0x00000048,
SX_PERF_SEL_PA_POS_BANK_CONF             = 0x00000049,
SX_PERF_SEL_DB0_END_OF_WAVE              = 0x0000004a,
SX_PERF_SEL_DB0_4X2_DISCARD              = 0x0000004b,
SX_PERF_SEL_DB1_END_OF_WAVE              = 0x0000004c,
SX_PERF_SEL_DB1_4X2_DISCARD              = 0x0000004d,
SX_PERF_SEL_DB2_END_OF_WAVE              = 0x0000004e,
SX_PERF_SEL_DB2_4X2_DISCARD              = 0x0000004f,
SX_PERF_SEL_DB3_END_OF_WAVE              = 0x00000050,
SX_PERF_SEL_DB3_4X2_DISCARD              = 0x00000051,
} SX_PERFCOUNTER_VALS;

/*******************************************************
 * DB Enums
 *******************************************************/

/*
 * CompareFrag enum
 */

typedef enum CompareFrag {
FRAG_NEVER                               = 0x00000000,
FRAG_LESS                                = 0x00000001,
FRAG_EQUAL                               = 0x00000002,
FRAG_LEQUAL                              = 0x00000003,
FRAG_GREATER                             = 0x00000004,
FRAG_NOTEQUAL                            = 0x00000005,
FRAG_GEQUAL                              = 0x00000006,
FRAG_ALWAYS                              = 0x00000007,
} CompareFrag;

/*
 * ConservativeZExport enum
 */

typedef enum ConservativeZExport {
EXPORT_ANY_Z                             = 0x00000000,
EXPORT_LESS_THAN_Z                       = 0x00000001,
EXPORT_GREATER_THAN_Z                    = 0x00000002,
EXPORT_RESERVED                          = 0x00000003,
} ConservativeZExport;

/*
 * DFSMFlushEvents enum
 */

typedef enum DFSMFlushEvents {
DB_FLUSH_AND_INV_DB_DATA_TS              = 0x00000000,
DB_FLUSH_AND_INV_DB_META                 = 0x00000001,
DB_CACHE_FLUSH                           = 0x00000002,
DB_CACHE_FLUSH_TS                        = 0x00000003,
DB_CACHE_FLUSH_AND_INV_EVENT             = 0x00000004,
DB_CACHE_FLUSH_AND_INV_TS_EVENT          = 0x00000005,
DB_VPORT_CHANGED_EVENT                   = 0x00000006,
DB_CONTEXT_DONE_EVENT                    = 0x00000007,
DB_BREAK_BATCH_EVENT                     = 0x00000008,
DB_INVOKE_CHANGE_EVENT                   = 0x00000009,
DB_CONTEXT_SUSPEND_EVENT                 = 0x0000000a,
} DFSMFlushEvents;

/*
 * DbMemArbWatermarks enum
 */

typedef enum DbMemArbWatermarks {
TRANSFERRED_64_BYTES                     = 0x00000000,
TRANSFERRED_128_BYTES                    = 0x00000001,
TRANSFERRED_256_BYTES                    = 0x00000002,
TRANSFERRED_512_BYTES                    = 0x00000003,
TRANSFERRED_1024_BYTES                   = 0x00000004,
TRANSFERRED_2048_BYTES                   = 0x00000005,
TRANSFERRED_4096_BYTES                   = 0x00000006,
TRANSFERRED_8192_BYTES                   = 0x00000007,
} DbMemArbWatermarks;

/*
 * DbPRTFaultBehavior enum
 */

typedef enum DbPRTFaultBehavior {
FAULT_ZERO                               = 0x00000000,
FAULT_ONE                                = 0x00000001,
FAULT_FAIL                               = 0x00000002,
FAULT_PASS                               = 0x00000003,
} DbPRTFaultBehavior;

/*
 * DbPSLControl enum
 */

typedef enum DbPSLControl {
PSLC_AUTO                                = 0x00000000,
PSLC_ON_HANG_ONLY                        = 0x00000001,
PSLC_ASAP                                = 0x00000002,
PSLC_COUNTDOWN                           = 0x00000003,
} DbPSLControl;

/*
 * ForceControl enum
 */

typedef enum ForceControl {
FORCE_OFF                                = 0x00000000,
FORCE_ENABLE                             = 0x00000001,
FORCE_DISABLE                            = 0x00000002,
FORCE_RESERVED                           = 0x00000003,
} ForceControl;

/*
 * OreoMode enum
 */

typedef enum OreoMode {
OMODE_BLEND                              = 0x00000000,
OMODE_O_THEN_B                           = 0x00000001,
OMODE_P_THEN_O_THEN_B                    = 0x00000002,
OMODE_RESERVED_3                         = 0x00000003,
} OreoMode;

/*
 * PerfCounter_Vals enum
 */

typedef enum PerfCounter_Vals {
DB_PERF_SEL_SC_DB_tile_sends             = 0x00000000,
DB_PERF_SEL_SC_DB_tile_busy              = 0x00000001,
DB_PERF_SEL_SC_DB_tile_stalls            = 0x00000002,
DB_PERF_SEL_SC_DB_tile_events            = 0x00000003,
DB_PERF_SEL_SC_DB_tile_tiles             = 0x00000004,
DB_PERF_SEL_SC_DB_tile_covered           = 0x00000005,
DB_PERF_SEL_hiz_tc_read_starved          = 0x00000006,
DB_PERF_SEL_hiz_tc_write_stall           = 0x00000007,
DB_PERF_SEL_hiz_tile_culled              = 0x00000008,
DB_PERF_SEL_his_tile_culled              = 0x00000009,
DB_PERF_SEL_DB_SC_tile_sends             = 0x0000000a,
DB_PERF_SEL_DB_SC_tile_busy              = 0x0000000b,
DB_PERF_SEL_DB_SC_tile_stalls            = 0x0000000c,
DB_PERF_SEL_DB_SC_tile_df_stalls         = 0x0000000d,
DB_PERF_SEL_DB_SC_tile_tiles             = 0x0000000e,
DB_PERF_SEL_DB_SC_tile_culled            = 0x0000000f,
DB_PERF_SEL_DB_SC_tile_hier_kill         = 0x00000010,
DB_PERF_SEL_DB_SC_tile_fast_ops          = 0x00000011,
DB_PERF_SEL_DB_SC_tile_no_ops            = 0x00000012,
DB_PERF_SEL_DB_SC_tile_tile_rate         = 0x00000013,
DB_PERF_SEL_DB_SC_tile_ssaa_kill         = 0x00000014,
DB_PERF_SEL_DB_SC_tile_fast_z_ops        = 0x00000015,
DB_PERF_SEL_DB_SC_tile_fast_stencil_ops  = 0x00000016,
DB_PERF_SEL_SC_DB_quad_sends             = 0x00000017,
DB_PERF_SEL_SC_DB_quad_busy              = 0x00000018,
DB_PERF_SEL_SC_DB_quad_squads            = 0x00000019,
DB_PERF_SEL_SC_DB_quad_tiles             = 0x0000001a,
DB_PERF_SEL_SC_DB_quad_pixels            = 0x0000001b,
DB_PERF_SEL_SC_DB_quad_killed_tiles      = 0x0000001c,
DB_PERF_SEL_DB_SC_quad_sends             = 0x0000001d,
DB_PERF_SEL_DB_SC_quad_busy              = 0x0000001e,
DB_PERF_SEL_DB_SC_quad_stalls            = 0x0000001f,
DB_PERF_SEL_DB_SC_quad_tiles             = 0x00000020,
DB_PERF_SEL_DB_SC_quad_lit_quad          = 0x00000021,
DB_PERF_SEL_DB_CB_tile_sends             = 0x00000022,
DB_PERF_SEL_DB_CB_tile_busy              = 0x00000023,
DB_PERF_SEL_DB_CB_tile_stalls            = 0x00000024,
DB_PERF_SEL_SX_DB_quad_sends             = 0x00000025,
DB_PERF_SEL_SX_DB_quad_busy              = 0x00000026,
DB_PERF_SEL_SX_DB_quad_stalls            = 0x00000027,
DB_PERF_SEL_SX_DB_quad_quads             = 0x00000028,
DB_PERF_SEL_SX_DB_quad_pixels            = 0x00000029,
DB_PERF_SEL_SX_DB_quad_exports           = 0x0000002a,
DB_PERF_SEL_SH_quads_outstanding_sum     = 0x0000002b,
DB_PERF_SEL_DB_CB_lquad_sends            = 0x0000002c,
DB_PERF_SEL_DB_CB_lquad_busy             = 0x0000002d,
DB_PERF_SEL_DB_CB_lquad_stalls           = 0x0000002e,
DB_PERF_SEL_DB_CB_lquad_quads            = 0x0000002f,
DB_PERF_SEL_tile_rd_sends                = 0x00000030,
DB_PERF_SEL_mi_tile_rd_outstanding_sum   = 0x00000031,
DB_PERF_SEL_quad_rd_sends                = 0x00000032,
DB_PERF_SEL_quad_rd_busy                 = 0x00000033,
DB_PERF_SEL_quad_rd_mi_stall             = 0x00000034,
DB_PERF_SEL_quad_rd_rw_collision         = 0x00000035,
DB_PERF_SEL_quad_rd_tag_stall            = 0x00000036,
DB_PERF_SEL_quad_rd_32byte_reqs          = 0x00000037,
DB_PERF_SEL_quad_rd_panic                = 0x00000038,
DB_PERF_SEL_mi_quad_rd_outstanding_sum   = 0x00000039,
DB_PERF_SEL_quad_rdret_sends             = 0x0000003a,
DB_PERF_SEL_quad_rdret_busy              = 0x0000003b,
DB_PERF_SEL_tile_wr_sends                = 0x0000003c,
DB_PERF_SEL_tile_wr_acks                 = 0x0000003d,
DB_PERF_SEL_mi_tile_wr_outstanding_sum   = 0x0000003e,
DB_PERF_SEL_quad_wr_sends                = 0x0000003f,
DB_PERF_SEL_quad_wr_busy                 = 0x00000040,
DB_PERF_SEL_quad_wr_mi_stall             = 0x00000041,
DB_PERF_SEL_quad_wr_coherency_stall      = 0x00000042,
DB_PERF_SEL_quad_wr_acks                 = 0x00000043,
DB_PERF_SEL_mi_quad_wr_outstanding_sum   = 0x00000044,
DB_PERF_SEL_Tile_Cache_misses            = 0x00000045,
DB_PERF_SEL_Tile_Cache_hits              = 0x00000046,
DB_PERF_SEL_Tile_Cache_flushes           = 0x00000047,
DB_PERF_SEL_Tile_Cache_surface_stall     = 0x00000048,
DB_PERF_SEL_Tile_Cache_starves           = 0x00000049,
DB_PERF_SEL_Tile_Cache_mem_return_starve = 0x0000004a,
DB_PERF_SEL_tcp_dispatcher_reads         = 0x0000004b,
DB_PERF_SEL_tcp_prefetcher_reads         = 0x0000004c,
DB_PERF_SEL_tcp_preloader_reads          = 0x0000004d,
DB_PERF_SEL_tcp_dispatcher_flushes       = 0x0000004e,
DB_PERF_SEL_tcp_prefetcher_flushes       = 0x0000004f,
DB_PERF_SEL_tcp_preloader_flushes        = 0x00000050,
DB_PERF_SEL_Depth_Tile_Cache_sends       = 0x00000051,
DB_PERF_SEL_Depth_Tile_Cache_busy        = 0x00000052,
DB_PERF_SEL_Depth_Tile_Cache_starves     = 0x00000053,
DB_PERF_SEL_Depth_Tile_Cache_dtile_locked = 0x00000054,
DB_PERF_SEL_Depth_Tile_Cache_alloc_stall = 0x00000055,
DB_PERF_SEL_Depth_Tile_Cache_misses      = 0x00000056,
DB_PERF_SEL_Depth_Tile_Cache_hits        = 0x00000057,
DB_PERF_SEL_Depth_Tile_Cache_flushes     = 0x00000058,
DB_PERF_SEL_Depth_Tile_Cache_noop_tile   = 0x00000059,
DB_PERF_SEL_Depth_Tile_Cache_detailed_noop = 0x0000005a,
DB_PERF_SEL_Depth_Tile_Cache_event       = 0x0000005b,
DB_PERF_SEL_Depth_Tile_Cache_tile_frees  = 0x0000005c,
DB_PERF_SEL_Depth_Tile_Cache_data_frees  = 0x0000005d,
DB_PERF_SEL_Depth_Tile_Cache_mem_return_starve = 0x0000005e,
DB_PERF_SEL_Stencil_Cache_misses         = 0x0000005f,
DB_PERF_SEL_Stencil_Cache_hits           = 0x00000060,
DB_PERF_SEL_Stencil_Cache_flushes        = 0x00000061,
DB_PERF_SEL_Stencil_Cache_starves        = 0x00000062,
DB_PERF_SEL_Stencil_Cache_frees          = 0x00000063,
DB_PERF_SEL_Z_Cache_separate_Z_misses    = 0x00000064,
DB_PERF_SEL_Z_Cache_separate_Z_hits      = 0x00000065,
DB_PERF_SEL_Z_Cache_separate_Z_flushes   = 0x00000066,
DB_PERF_SEL_Z_Cache_separate_Z_starves   = 0x00000067,
DB_PERF_SEL_Z_Cache_pmask_misses         = 0x00000068,
DB_PERF_SEL_Z_Cache_pmask_hits           = 0x00000069,
DB_PERF_SEL_Z_Cache_pmask_flushes        = 0x0000006a,
DB_PERF_SEL_Z_Cache_pmask_starves        = 0x0000006b,
DB_PERF_SEL_Z_Cache_frees                = 0x0000006c,
DB_PERF_SEL_Plane_Cache_misses           = 0x0000006d,
DB_PERF_SEL_Plane_Cache_hits             = 0x0000006e,
DB_PERF_SEL_Plane_Cache_flushes          = 0x0000006f,
DB_PERF_SEL_Plane_Cache_starves          = 0x00000070,
DB_PERF_SEL_Plane_Cache_frees            = 0x00000071,
DB_PERF_SEL_flush_expanded_stencil       = 0x00000072,
DB_PERF_SEL_flush_compressed_stencil     = 0x00000073,
DB_PERF_SEL_flush_single_stencil         = 0x00000074,
DB_PERF_SEL_planes_flushed               = 0x00000075,
DB_PERF_SEL_flush_1plane                 = 0x00000076,
DB_PERF_SEL_flush_2plane                 = 0x00000077,
DB_PERF_SEL_flush_3plane                 = 0x00000078,
DB_PERF_SEL_flush_4plane                 = 0x00000079,
DB_PERF_SEL_flush_5plane                 = 0x0000007a,
DB_PERF_SEL_flush_6plane                 = 0x0000007b,
DB_PERF_SEL_flush_7plane                 = 0x0000007c,
DB_PERF_SEL_flush_8plane                 = 0x0000007d,
DB_PERF_SEL_flush_9plane                 = 0x0000007e,
DB_PERF_SEL_flush_10plane                = 0x0000007f,
DB_PERF_SEL_flush_11plane                = 0x00000080,
DB_PERF_SEL_flush_12plane                = 0x00000081,
DB_PERF_SEL_flush_13plane                = 0x00000082,
DB_PERF_SEL_flush_14plane                = 0x00000083,
DB_PERF_SEL_flush_15plane                = 0x00000084,
DB_PERF_SEL_flush_16plane                = 0x00000085,
DB_PERF_SEL_flush_expanded_z             = 0x00000086,
DB_PERF_SEL_earlyZ_waiting_for_postZ_done = 0x00000087,
DB_PERF_SEL_reZ_waiting_for_postZ_done   = 0x00000088,
DB_PERF_SEL_dk_tile_sends                = 0x00000089,
DB_PERF_SEL_dk_tile_busy                 = 0x0000008a,
DB_PERF_SEL_dk_tile_quad_starves         = 0x0000008b,
DB_PERF_SEL_dk_tile_stalls               = 0x0000008c,
DB_PERF_SEL_dk_squad_sends               = 0x0000008d,
DB_PERF_SEL_dk_squad_busy                = 0x0000008e,
DB_PERF_SEL_dk_squad_stalls              = 0x0000008f,
DB_PERF_SEL_Op_Pipe_Busy                 = 0x00000090,
DB_PERF_SEL_Op_Pipe_MC_Read_stall        = 0x00000091,
DB_PERF_SEL_qc_busy                      = 0x00000092,
DB_PERF_SEL_qc_xfc                       = 0x00000093,
DB_PERF_SEL_qc_conflicts                 = 0x00000094,
DB_PERF_SEL_qc_full_stall                = 0x00000095,
DB_PERF_SEL_qc_in_preZ_tile_stalls_postZ = 0x00000096,
DB_PERF_SEL_qc_in_postZ_tile_stalls_preZ = 0x00000097,
DB_PERF_SEL_tsc_insert_summarize_stall   = 0x00000098,
DB_PERF_SEL_tl_busy                      = 0x00000099,
DB_PERF_SEL_tl_dtc_read_starved          = 0x0000009a,
DB_PERF_SEL_tl_z_fetch_stall             = 0x0000009b,
DB_PERF_SEL_tl_stencil_stall             = 0x0000009c,
DB_PERF_SEL_tl_z_decompress_stall        = 0x0000009d,
DB_PERF_SEL_tl_stencil_locked_stall      = 0x0000009e,
DB_PERF_SEL_tl_events                    = 0x0000009f,
DB_PERF_SEL_tl_summarize_squads          = 0x000000a0,
DB_PERF_SEL_tl_flush_expand_squads       = 0x000000a1,
DB_PERF_SEL_tl_expand_squads             = 0x000000a2,
DB_PERF_SEL_tl_preZ_squads               = 0x000000a3,
DB_PERF_SEL_tl_postZ_squads              = 0x000000a4,
DB_PERF_SEL_tl_preZ_noop_squads          = 0x000000a5,
DB_PERF_SEL_tl_postZ_noop_squads         = 0x000000a6,
DB_PERF_SEL_tl_tile_ops                  = 0x000000a7,
DB_PERF_SEL_tl_in_xfc                    = 0x000000a8,
DB_PERF_SEL_tl_in_single_stencil_expand_stall = 0x000000a9,
DB_PERF_SEL_tl_in_fast_z_stall           = 0x000000aa,
DB_PERF_SEL_tl_out_xfc                   = 0x000000ab,
DB_PERF_SEL_tl_out_squads                = 0x000000ac,
DB_PERF_SEL_zf_plane_multicycle          = 0x000000ad,
DB_PERF_SEL_PostZ_Samples_passing_Z      = 0x000000ae,
DB_PERF_SEL_PostZ_Samples_failing_Z      = 0x000000af,
DB_PERF_SEL_PostZ_Samples_failing_S      = 0x000000b0,
DB_PERF_SEL_PreZ_Samples_passing_Z       = 0x000000b1,
DB_PERF_SEL_PreZ_Samples_failing_Z       = 0x000000b2,
DB_PERF_SEL_PreZ_Samples_failing_S       = 0x000000b3,
DB_PERF_SEL_ts_tc_update_stall           = 0x000000b4,
DB_PERF_SEL_sc_kick_start                = 0x000000b5,
DB_PERF_SEL_sc_kick_end                  = 0x000000b6,
DB_PERF_SEL_clock_reg_active             = 0x000000b7,
DB_PERF_SEL_clock_main_active            = 0x000000b8,
DB_PERF_SEL_clock_mem_export_active      = 0x000000b9,
DB_PERF_SEL_esr_ps_out_busy              = 0x000000ba,
DB_PERF_SEL_esr_ps_lqf_busy              = 0x000000bb,
DB_PERF_SEL_esr_ps_lqf_stall             = 0x000000bc,
DB_PERF_SEL_etr_out_send                 = 0x000000bd,
DB_PERF_SEL_etr_out_busy                 = 0x000000be,
DB_PERF_SEL_etr_out_ltile_probe_fifo_full_stall = 0x000000bf,
DB_PERF_SEL_etr_out_cb_tile_stall        = 0x000000c0,
DB_PERF_SEL_etr_out_esr_stall            = 0x000000c1,
DB_PERF_SEL_esr_ps_vic_busy              = 0x000000c2,
DB_PERF_SEL_esr_ps_vic_stall             = 0x000000c3,
DB_PERF_SEL_esr_eot_fwd_busy             = 0x000000c4,
DB_PERF_SEL_esr_eot_fwd_holding_squad    = 0x000000c5,
DB_PERF_SEL_esr_eot_fwd_forward          = 0x000000c6,
DB_PERF_SEL_esr_sqq_zi_busy              = 0x000000c7,
DB_PERF_SEL_esr_sqq_zi_stall             = 0x000000c8,
DB_PERF_SEL_postzl_sq_pt_busy            = 0x000000c9,
DB_PERF_SEL_postzl_sq_pt_stall           = 0x000000ca,
DB_PERF_SEL_postzl_se_busy               = 0x000000cb,
DB_PERF_SEL_postzl_se_stall              = 0x000000cc,
DB_PERF_SEL_postzl_partial_launch        = 0x000000cd,
DB_PERF_SEL_postzl_full_launch           = 0x000000ce,
DB_PERF_SEL_postzl_partial_waiting       = 0x000000cf,
DB_PERF_SEL_postzl_tile_mem_stall        = 0x000000d0,
DB_PERF_SEL_postzl_tile_init_stall       = 0x000000d1,
DB_PERF_SEL_prezl_tile_mem_stall         = 0x000000d2,
DB_PERF_SEL_prezl_tile_init_stall        = 0x000000d3,
DB_PERF_SEL_dtt_sm_clash_stall           = 0x000000d4,
DB_PERF_SEL_dtt_sm_slot_stall            = 0x000000d5,
DB_PERF_SEL_dtt_sm_miss_stall            = 0x000000d6,
DB_PERF_SEL_mi_rdreq_busy                = 0x000000d7,
DB_PERF_SEL_mi_rdreq_stall               = 0x000000d8,
DB_PERF_SEL_mi_wrreq_busy                = 0x000000d9,
DB_PERF_SEL_mi_wrreq_stall               = 0x000000da,
DB_PERF_SEL_recomp_tile_to_1zplane_no_fastop = 0x000000db,
DB_PERF_SEL_dkg_tile_rate_tile           = 0x000000dc,
DB_PERF_SEL_prezl_src_in_sends           = 0x000000dd,
DB_PERF_SEL_prezl_src_in_stall           = 0x000000de,
DB_PERF_SEL_prezl_src_in_squads          = 0x000000df,
DB_PERF_SEL_prezl_src_in_squads_unrolled = 0x000000e0,
DB_PERF_SEL_prezl_src_in_tile_rate       = 0x000000e1,
DB_PERF_SEL_prezl_src_in_tile_rate_unrolled = 0x000000e2,
DB_PERF_SEL_prezl_src_out_stall          = 0x000000e3,
DB_PERF_SEL_postzl_src_in_sends          = 0x000000e4,
DB_PERF_SEL_postzl_src_in_stall          = 0x000000e5,
DB_PERF_SEL_postzl_src_in_squads         = 0x000000e6,
DB_PERF_SEL_postzl_src_in_squads_unrolled = 0x000000e7,
DB_PERF_SEL_postzl_src_in_tile_rate      = 0x000000e8,
DB_PERF_SEL_postzl_src_in_tile_rate_unrolled = 0x000000e9,
DB_PERF_SEL_postzl_src_out_stall         = 0x000000ea,
DB_PERF_SEL_esr_ps_src_in_sends          = 0x000000eb,
DB_PERF_SEL_esr_ps_src_in_stall          = 0x000000ec,
DB_PERF_SEL_esr_ps_src_in_squads         = 0x000000ed,
DB_PERF_SEL_esr_ps_src_in_squads_unrolled = 0x000000ee,
DB_PERF_SEL_esr_ps_src_in_tile_rate      = 0x000000ef,
DB_PERF_SEL_esr_ps_src_in_tile_rate_unrolled = 0x000000f0,
DB_PERF_SEL_esr_ps_src_in_tile_rate_unrolled_to_pixel_rate = 0x000000f1,
DB_PERF_SEL_esr_ps_src_out_stall         = 0x000000f2,
DB_PERF_SEL_depth_bounds_tile_culled     = 0x000000f3,
DB_PERF_SEL_PreZ_Samples_failing_DB      = 0x000000f4,
DB_PERF_SEL_PostZ_Samples_failing_DB     = 0x000000f5,
DB_PERF_SEL_flush_compressed             = 0x000000f6,
DB_PERF_SEL_flush_plane_le4              = 0x000000f7,
DB_PERF_SEL_tiles_z_fully_summarized     = 0x000000f8,
DB_PERF_SEL_tiles_stencil_fully_summarized = 0x000000f9,
DB_PERF_SEL_tiles_z_clear_on_expclear    = 0x000000fa,
DB_PERF_SEL_tiles_s_clear_on_expclear    = 0x000000fb,
DB_PERF_SEL_tiles_decomp_on_expclear     = 0x000000fc,
DB_PERF_SEL_tiles_compressed_to_decompressed = 0x000000fd,
DB_PERF_SEL_Op_Pipe_Prez_Busy            = 0x000000fe,
DB_PERF_SEL_Op_Pipe_Postz_Busy           = 0x000000ff,
DB_PERF_SEL_di_dt_stall                  = 0x00000100,
Spare_257                                = 0x00000101,
DB_PERF_SEL_DB_SC_s_tile_rate            = 0x00000102,
DB_PERF_SEL_DB_SC_c_tile_rate            = 0x00000103,
DB_PERF_SEL_DB_SC_z_tile_rate            = 0x00000104,
DB_PERF_SEL_DB_CB_lquad_export_quads     = 0x00000105,
DB_PERF_SEL_DB_CB_lquad_double_format    = 0x00000106,
DB_PERF_SEL_DB_CB_lquad_fast_format      = 0x00000107,
DB_PERF_SEL_DB_CB_lquad_slow_format      = 0x00000108,
DB_PERF_SEL_CB_DB_rdreq_sends            = 0x00000109,
DB_PERF_SEL_CB_DB_rdreq_prt_sends        = 0x0000010a,
DB_PERF_SEL_CB_DB_wrreq_sends            = 0x0000010b,
DB_PERF_SEL_CB_DB_wrreq_prt_sends        = 0x0000010c,
DB_PERF_SEL_DB_CB_rdret_ack              = 0x0000010d,
DB_PERF_SEL_DB_CB_rdret_nack             = 0x0000010e,
DB_PERF_SEL_DB_CB_wrret_ack              = 0x0000010f,
DB_PERF_SEL_DB_CB_wrret_nack             = 0x00000110,
DB_PERF_SEL_MI_tile_req_wrack_counter_stall = 0x00000111,
DB_PERF_SEL_MI_quad_req_wrack_counter_stall = 0x00000112,
DB_PERF_SEL_MI_zpc_req_wrack_counter_stall = 0x00000113,
DB_PERF_SEL_MI_psd_req_wrack_counter_stall = 0x00000114,
DB_PERF_SEL_unmapped_z_tile_culled       = 0x00000115,
DB_PERF_SEL_DB_CB_tile_is_event_FLUSH_AND_INV_DB_DATA_TS = 0x00000116,
DB_PERF_SEL_DB_CB_tile_is_event_FLUSH_AND_INV_CB_PIXEL_DATA = 0x00000117,
DB_PERF_SEL_DB_CB_tile_is_event_BOTTOM_OF_PIPE_TS = 0x00000118,
DB_PERF_SEL_DB_CB_tile_waiting_for_perfcounter_stop_event = 0x00000119,
DB_PERF_SEL_DB_CB_lquad_fmt_32bpp_8pix   = 0x0000011a,
DB_PERF_SEL_DB_CB_lquad_fmt_16_16_unsigned_8pix = 0x0000011b,
DB_PERF_SEL_DB_CB_lquad_fmt_16_16_signed_8pix = 0x0000011c,
DB_PERF_SEL_DB_CB_lquad_fmt_16_16_float_8pix = 0x0000011d,
DB_PERF_SEL_DB_CB_lquad_num_pixels_need_blending = 0x0000011e,
DB_PERF_SEL_DB_CB_context_dones          = 0x0000011f,
DB_PERF_SEL_DB_CB_eop_dones              = 0x00000120,
DB_PERF_SEL_SX_DB_quad_all_pixels_killed = 0x00000121,
DB_PERF_SEL_SX_DB_quad_all_pixels_enabled = 0x00000122,
DB_PERF_SEL_SX_DB_quad_need_blending_and_dst_read = 0x00000123,
DB_PERF_SEL_SC_DB_tile_backface          = 0x00000124,
DB_PERF_SEL_SC_DB_quad_quads             = 0x00000125,
DB_PERF_SEL_DB_SC_quad_quads_with_1_pixel = 0x00000126,
DB_PERF_SEL_DB_SC_quad_quads_with_2_pixels = 0x00000127,
DB_PERF_SEL_DB_SC_quad_quads_with_3_pixels = 0x00000128,
DB_PERF_SEL_DB_SC_quad_quads_with_4_pixels = 0x00000129,
DB_PERF_SEL_DB_SC_quad_double_quad       = 0x0000012a,
DB_PERF_SEL_SX_DB_quad_export_quads      = 0x0000012b,
DB_PERF_SEL_SX_DB_quad_double_format     = 0x0000012c,
DB_PERF_SEL_SX_DB_quad_fast_format       = 0x0000012d,
DB_PERF_SEL_SX_DB_quad_slow_format       = 0x0000012e,
DB_PERF_SEL_quad_rd_sends_unc            = 0x0000012f,
DB_PERF_SEL_quad_rd_mi_stall_unc         = 0x00000130,
DB_PERF_SEL_SC_DB_tile_tiles_pipe0       = 0x00000131,
DB_PERF_SEL_SC_DB_tile_tiles_pipe1       = 0x00000132,
DB_PERF_SEL_SC_DB_quad_quads_pipe0       = 0x00000133,
DB_PERF_SEL_SC_DB_quad_quads_pipe1       = 0x00000134,
DB_PERF_SEL_PERF_fg_lob_fwdr_timeout_hits = 0x00000135,
DB_PERF_SEL_noz_waiting_for_postz_done   = 0x00000136,
DB_PERF_SEL_DB_CB_lquad_quads_vrs_rate_1x1 = 0x00000137,
DB_PERF_SEL_DB_CB_lquad_quads_vrs_rate_2x1 = 0x00000138,
DB_PERF_SEL_DB_CB_lquad_quads_vrs_rate_1x2 = 0x00000139,
DB_PERF_SEL_DB_CB_lquad_quads_vrs_rate_2x2 = 0x0000013a,
DB_PERF_SEL_RMI_rd_tile_32byte_req       = 0x0000013b,
DB_PERF_SEL_RMI_rd_z_32byte_req          = 0x0000013c,
DB_PERF_SEL_RMI_rd_s_32byte_req          = 0x0000013d,
DB_PERF_SEL_RMI_wr_tile_32byte_req       = 0x0000013e,
DB_PERF_SEL_RMI_wr_z_32byte_req          = 0x0000013f,
DB_PERF_SEL_RMI_wr_s_32byte_req          = 0x00000140,
DB_PERF_SEL_RMI_wr_psdzpc_32byte_req     = 0x00000141,
DB_PERF_SEL_RMI_rd_tile_32byte_ret       = 0x00000142,
DB_PERF_SEL_RMI_rd_z_32byte_ret          = 0x00000143,
DB_PERF_SEL_RMI_rd_s_32byte_ret          = 0x00000144,
DB_PERF_SEL_RMI_wr_tile_32byte_ack       = 0x00000145,
DB_PERF_SEL_RMI_wr_z_32byte_ack          = 0x00000146,
DB_PERF_SEL_RMI_wr_s_32byte_ack          = 0x00000147,
DB_PERF_SEL_RMI_wr_psdzpc_32byte_ack     = 0x00000148,
DB_PERF_SEL_esr_vic_sqq_busy             = 0x00000149,
DB_PERF_SEL_esr_vic_sqq_stall            = 0x0000014a,
DB_PERF_SEL_esr_psi_vic_tile_rate        = 0x0000014b,
DB_PERF_SEL_esr_vic_footprint_match_2x2  = 0x0000014c,
DB_PERF_SEL_esr_vic_footprint_match_2x1  = 0x0000014d,
DB_PERF_SEL_esr_vic_footprint_match_1x2  = 0x0000014e,
DB_PERF_SEL_DB_SC_quad_num_null_2x2_coarse_pixels = 0x0000014f,
DB_PERF_SEL_DB_SC_quad_num_null_2x1_coarse_pixels = 0x00000150,
DB_PERF_SEL_DB_SC_quad_num_null_1x2_coarse_pixels = 0x00000151,
DB_PERF_SEL_hi_z_s_checker_force_coarse_vrs_1x1 = 0x00000152,
DB_PERF_SEL_hi_z_s_checker_force_ssaa_vrs_1x1 = 0x00000153,
DB_PERF_SEL_esr_ps_woc_1squadIn_2squadOut = 0x00000154,
DB_PERF_SEL_esr_ps_woc_2squadIn_1squadOut = 0x00000155,
DB_PERF_SEL_prez_ps_invoked_pixel_cnt    = 0x00000156,
DB_PERF_SEL_postz_ps_invoked_pixel_cnt   = 0x00000157,
DB_PERF_SEL_ts_events_pws_enable         = 0x00000158,
DB_PERF_SEL_ps_events_pws_enable         = 0x00000159,
DB_PERF_SEL_cs_events_pws_enable         = 0x0000015a,
DB_PERF_SEL_DB_SC_quad_noz_tiles         = 0x0000015b,
DB_PERF_SEL_DB_SC_quad_lit_noz_quad      = 0x0000015c,
} PerfCounter_Vals;

/*
 * PixelPipeCounterId enum
 */

typedef enum PixelPipeCounterId {
PIXEL_PIPE_OCCLUSION_COUNT_0             = 0x00000000,
PIXEL_PIPE_OCCLUSION_COUNT_1             = 0x00000001,
PIXEL_PIPE_OCCLUSION_COUNT_2             = 0x00000002,
PIXEL_PIPE_OCCLUSION_COUNT_3             = 0x00000003,
PIXEL_PIPE_SCREEN_MIN_EXTENTS_0          = 0x00000004,
PIXEL_PIPE_SCREEN_MAX_EXTENTS_0          = 0x00000005,
PIXEL_PIPE_SCREEN_MIN_EXTENTS_1          = 0x00000006,
PIXEL_PIPE_SCREEN_MAX_EXTENTS_1          = 0x00000007,
} PixelPipeCounterId;

/*
 * PixelPipeStride enum
 */

typedef enum PixelPipeStride {
PIXEL_PIPE_STRIDE_32_BITS                = 0x00000000,
PIXEL_PIPE_STRIDE_64_BITS                = 0x00000001,
PIXEL_PIPE_STRIDE_128_BITS               = 0x00000002,
PIXEL_PIPE_STRIDE_256_BITS               = 0x00000003,
} PixelPipeStride;

/*
 * RingCounterControl enum
 */

typedef enum RingCounterControl {
COUNTER_RING_SPLIT                       = 0x00000000,
COUNTER_RING_0                           = 0x00000001,
COUNTER_RING_1                           = 0x00000002,
} RingCounterControl;

/*
 * StencilOp enum
 */

typedef enum StencilOp {
STENCIL_KEEP                             = 0x00000000,
STENCIL_ZERO                             = 0x00000001,
STENCIL_ONES                             = 0x00000002,
STENCIL_REPLACE_TEST                     = 0x00000003,
STENCIL_REPLACE_OP                       = 0x00000004,
STENCIL_ADD_CLAMP                        = 0x00000005,
STENCIL_SUB_CLAMP                        = 0x00000006,
STENCIL_INVERT                           = 0x00000007,
STENCIL_ADD_WRAP                         = 0x00000008,
STENCIL_SUB_WRAP                         = 0x00000009,
STENCIL_AND                              = 0x0000000a,
STENCIL_OR                               = 0x0000000b,
STENCIL_XOR                              = 0x0000000c,
STENCIL_NAND                             = 0x0000000d,
STENCIL_NOR                              = 0x0000000e,
STENCIL_XNOR                             = 0x0000000f,
} StencilOp;

/*
 * ZLimitSumm enum
 */

typedef enum ZLimitSumm {
FORCE_SUMM_OFF                           = 0x00000000,
FORCE_SUMM_MINZ                          = 0x00000001,
FORCE_SUMM_MAXZ                          = 0x00000002,
FORCE_SUMM_BOTH                          = 0x00000003,
} ZLimitSumm;

/*
 * ZModeForce enum
 */

typedef enum ZModeForce {
NO_FORCE                                 = 0x00000000,
FORCE_EARLY_Z                            = 0x00000001,
FORCE_LATE_Z                             = 0x00000002,
FORCE_RE_Z                               = 0x00000003,
} ZModeForce;

/*
 * ZOrder enum
 */

typedef enum ZOrder {
LATE_Z                                   = 0x00000000,
EARLY_Z_THEN_LATE_Z                      = 0x00000001,
RE_Z                                     = 0x00000002,
EARLY_Z_THEN_RE_Z                        = 0x00000003,
} ZOrder;

/*
 * ZSamplePosition enum
 */

typedef enum ZSamplePosition {
Z_SAMPLE_CENTER                          = 0x00000000,
Z_SAMPLE_CENTROID                        = 0x00000001,
} ZSamplePosition;

/*
 * ZpassControl enum
 */

typedef enum ZpassControl {
ZPASS_DISABLE                            = 0x00000000,
ZPASS_SAMPLES                            = 0x00000001,
ZPASS_PIXELS                             = 0x00000002,
} ZpassControl;

/*******************************************************
 * PA Enums
 *******************************************************/

/*
 * SU_PERFCNT_SEL enum
 */

typedef enum SU_PERFCNT_SEL {
PERF_PAPC_PASX_REQ                       = 0x00000000,
PERF_PAPC_PASX_DISABLE_PIPE              = 0x00000001,
PERF_PAPC_PASX_FIRST_VECTOR              = 0x00000002,
PERF_PAPC_PASX_SECOND_VECTOR             = 0x00000003,
PERF_PAPC_PASX_FIRST_DEAD                = 0x00000004,
PERF_PAPC_PASX_SECOND_DEAD               = 0x00000005,
PERF_PAPC_PASX_VTX_KILL_DISCARD          = 0x00000006,
PERF_PAPC_PASX_VTX_NAN_DISCARD           = 0x00000007,
PERF_PAPC_PA_INPUT_PRIM                  = 0x00000008,
PERF_PAPC_PA_INPUT_NULL_PRIM             = 0x00000009,
PERF_PAPC_PA_INPUT_EVENT_FLAG            = 0x0000000a,
PERF_PAPC_PA_INPUT_FIRST_PRIM_SLOT       = 0x0000000b,
PERF_PAPC_PA_INPUT_END_OF_PACKET         = 0x0000000c,
PERF_PAPC_PA_INPUT_EXTENDED_EVENT        = 0x0000000d,
PERF_PAPC_CLPR_CULL_PRIM                 = 0x0000000e,
PERF_PAPC_CLPR_VVUCP_CULL_PRIM           = 0x0000000f,
PERF_PAPC_CLPR_VV_CULL_PRIM              = 0x00000010,
PERF_PAPC_CLPR_UCP_CULL_PRIM             = 0x00000011,
PERF_PAPC_CLPR_VTX_KILL_CULL_PRIM        = 0x00000012,
PERF_PAPC_CLPR_VTX_NAN_CULL_PRIM         = 0x00000013,
PERF_PAPC_CLPR_CULL_TO_NULL_PRIM         = 0x00000014,
PERF_PAPC_CLPR_VVUCP_CLIP_PRIM           = 0x00000015,
PERF_PAPC_CLPR_VV_CLIP_PRIM              = 0x00000016,
PERF_PAPC_CLPR_UCP_CLIP_PRIM             = 0x00000017,
PERF_PAPC_CLPR_POINT_CLIP_CANDIDATE      = 0x00000018,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_1          = 0x00000019,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_2          = 0x0000001a,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_3          = 0x0000001b,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_4          = 0x0000001c,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_5_8        = 0x0000001d,
PERF_PAPC_CLPR_CLIP_PLANE_CNT_9_12       = 0x0000001e,
PERF_PAPC_CLPR_CLIP_PLANE_NEAR           = 0x0000001f,
PERF_PAPC_CLPR_CLIP_PLANE_FAR            = 0x00000020,
PERF_PAPC_CLPR_CLIP_PLANE_LEFT           = 0x00000021,
PERF_PAPC_CLPR_CLIP_PLANE_RIGHT          = 0x00000022,
PERF_PAPC_CLPR_CLIP_PLANE_TOP            = 0x00000023,
PERF_PAPC_CLPR_CLIP_PLANE_BOTTOM         = 0x00000024,
PERF_PAPC_CLPR_GSC_KILL_CULL_PRIM        = 0x00000025,
PERF_PAPC_CLPR_RASTER_KILL_CULL_PRIM     = 0x00000026,
PERF_PAPC_CLSM_NULL_PRIM                 = 0x00000027,
PERF_PAPC_CLSM_TOTALLY_VISIBLE_PRIM      = 0x00000028,
PERF_PAPC_CLSM_CULL_TO_NULL_PRIM         = 0x00000029,
PERF_PAPC_CLSM_OUT_PRIM_CNT_1            = 0x0000002a,
PERF_PAPC_CLSM_OUT_PRIM_CNT_2            = 0x0000002b,
PERF_PAPC_CLSM_OUT_PRIM_CNT_3            = 0x0000002c,
PERF_PAPC_CLSM_OUT_PRIM_CNT_4            = 0x0000002d,
PERF_PAPC_CLSM_OUT_PRIM_CNT_5_8          = 0x0000002e,
PERF_PAPC_CLSM_OUT_PRIM_CNT_9_13         = 0x0000002f,
PERF_PAPC_CLIPGA_VTE_KILL_PRIM           = 0x00000030,
PERF_PAPC_SU_INPUT_PRIM                  = 0x00000031,
PERF_PAPC_SU_INPUT_CLIP_PRIM             = 0x00000032,
PERF_PAPC_SU_INPUT_NULL_PRIM             = 0x00000033,
PERF_PAPC_SU_INPUT_PRIM_DUAL             = 0x00000034,
PERF_PAPC_SU_INPUT_CLIP_PRIM_DUAL        = 0x00000035,
PERF_PAPC_SU_ZERO_AREA_CULL_PRIM         = 0x00000036,
PERF_PAPC_SU_BACK_FACE_CULL_PRIM         = 0x00000037,
PERF_PAPC_SU_FRONT_FACE_CULL_PRIM        = 0x00000038,
PERF_PAPC_SU_POLYMODE_FACE_CULL          = 0x00000039,
PERF_PAPC_SU_POLYMODE_BACK_CULL          = 0x0000003a,
PERF_PAPC_SU_POLYMODE_FRONT_CULL         = 0x0000003b,
PERF_PAPC_SU_POLYMODE_INVALID_FILL       = 0x0000003c,
PERF_PAPC_SU_OUTPUT_PRIM                 = 0x0000003d,
PERF_PAPC_SU_OUTPUT_CLIP_PRIM            = 0x0000003e,
PERF_PAPC_SU_OUTPUT_NULL_PRIM            = 0x0000003f,
PERF_PAPC_SU_OUTPUT_EVENT_FLAG           = 0x00000040,
PERF_PAPC_SU_OUTPUT_FIRST_PRIM_SLOT      = 0x00000041,
PERF_PAPC_SU_OUTPUT_END_OF_PACKET        = 0x00000042,
PERF_PAPC_SU_OUTPUT_POLYMODE_FACE        = 0x00000043,
PERF_PAPC_SU_OUTPUT_POLYMODE_BACK        = 0x00000044,
PERF_PAPC_SU_OUTPUT_POLYMODE_FRONT       = 0x00000045,
PERF_PAPC_SU_OUT_CLIP_POLYMODE_FACE      = 0x00000046,
PERF_PAPC_SU_OUT_CLIP_POLYMODE_BACK      = 0x00000047,
PERF_PAPC_SU_OUT_CLIP_POLYMODE_FRONT     = 0x00000048,
PERF_PAPC_SU_OUTPUT_PRIM_DUAL            = 0x00000049,
PERF_PAPC_SU_OUTPUT_CLIP_PRIM_DUAL       = 0x0000004a,
PERF_PAPC_SU_OUTPUT_POLYMODE_DUAL        = 0x0000004b,
PERF_PAPC_SU_OUTPUT_CLIP_POLYMODE_DUAL   = 0x0000004c,
PERF_PAPC_PASX_REQ_IDLE                  = 0x0000004d,
PERF_PAPC_PASX_REQ_BUSY                  = 0x0000004e,
PERF_PAPC_PASX_REQ_STALLED               = 0x0000004f,
PERF_PAPC_PASX_REC_IDLE                  = 0x00000050,
PERF_PAPC_PASX_REC_BUSY                  = 0x00000051,
PERF_PAPC_PASX_REC_STARVED_SX            = 0x00000052,
PERF_PAPC_PASX_REC_STALLED               = 0x00000053,
PERF_PAPC_PASX_REC_STALLED_POS_MEM       = 0x00000054,
PERF_PAPC_PASX_REC_STALLED_CCGSM_IN      = 0x00000055,
PERF_PAPC_CCGSM_IDLE                     = 0x00000056,
PERF_PAPC_CCGSM_BUSY                     = 0x00000057,
PERF_PAPC_CCGSM_STALLED                  = 0x00000058,
PERF_PAPC_CLPRIM_IDLE                    = 0x00000059,
PERF_PAPC_CLPRIM_BUSY                    = 0x0000005a,
PERF_PAPC_CLPRIM_STALLED                 = 0x0000005b,
PERF_PAPC_CLPRIM_STARVED_CCGSM           = 0x0000005c,
PERF_PAPC_CLIPSM_IDLE                    = 0x0000005d,
PERF_PAPC_CLIPSM_BUSY                    = 0x0000005e,
PERF_PAPC_CLIPSM_WAIT_CLIP_VERT_ENGH     = 0x0000005f,
PERF_PAPC_CLIPSM_WAIT_HIGH_PRI_SEQ       = 0x00000060,
PERF_PAPC_CLIPSM_WAIT_CLIPGA             = 0x00000061,
PERF_PAPC_CLIPSM_WAIT_AVAIL_VTE_CLIP     = 0x00000062,
PERF_PAPC_CLIPSM_WAIT_CLIP_OUTSM         = 0x00000063,
PERF_PAPC_CLIPGA_IDLE                    = 0x00000064,
PERF_PAPC_CLIPGA_BUSY                    = 0x00000065,
PERF_PAPC_CLIPGA_STARVED_VTE_CLIP        = 0x00000066,
PERF_PAPC_CLIPGA_STALLED                 = 0x00000067,
PERF_PAPC_CLIP_IDLE                      = 0x00000068,
PERF_PAPC_CLIP_BUSY                      = 0x00000069,
PERF_PAPC_SU_IDLE                        = 0x0000006a,
PERF_PAPC_SU_BUSY                        = 0x0000006b,
PERF_PAPC_SU_STARVED_CLIP                = 0x0000006c,
PERF_PAPC_SU_STALLED_SC                  = 0x0000006d,
PERF_PAPC_CL_DYN_SCLK_VLD                = 0x0000006e,
PERF_PAPC_SU_DYN_SCLK_VLD                = 0x0000006f,
PERF_PAPC_PA_REG_SCLK_VLD                = 0x00000070,
PERF_PAPC_SU_MULTI_GPU_PRIM_FILTER_CULL  = 0x00000071,
PERF_PAPC_PASX_SE0_REQ                   = 0x00000072,
PERF_PAPC_PASX_SE1_REQ                   = 0x00000073,
PERF_PAPC_PASX_SE0_FIRST_VECTOR          = 0x00000074,
PERF_PAPC_PASX_SE0_SECOND_VECTOR         = 0x00000075,
PERF_PAPC_PASX_SE1_FIRST_VECTOR          = 0x00000076,
PERF_PAPC_PASX_SE1_SECOND_VECTOR         = 0x00000077,
PERF_PAPC_SU_SE0_PRIM_FILTER_CULL        = 0x00000078,
PERF_PAPC_SU_SE1_PRIM_FILTER_CULL        = 0x00000079,
PERF_PAPC_SU_SE01_PRIM_FILTER_CULL       = 0x0000007a,
PERF_PAPC_SU_SE0_OUTPUT_PRIM             = 0x0000007b,
PERF_PAPC_SU_SE1_OUTPUT_PRIM             = 0x0000007c,
PERF_PAPC_SU_SE01_OUTPUT_PRIM            = 0x0000007d,
PERF_PAPC_SU_SE0_OUTPUT_NULL_PRIM        = 0x0000007e,
PERF_PAPC_SU_SE1_OUTPUT_NULL_PRIM        = 0x0000007f,
PERF_PAPC_SU_SE01_OUTPUT_NULL_PRIM       = 0x00000080,
PERF_PAPC_SU_SE0_OUTPUT_FIRST_PRIM_SLOT  = 0x00000081,
PERF_PAPC_SU_SE1_OUTPUT_FIRST_PRIM_SLOT  = 0x00000082,
PERF_PAPC_SU_SE0_STALLED_SC              = 0x00000083,
PERF_PAPC_SU_SE1_STALLED_SC              = 0x00000084,
PERF_PAPC_SU_SE01_STALLED_SC             = 0x00000085,
PERF_PAPC_CLSM_CLIPPING_PRIM             = 0x00000086,
PERF_PAPC_SU_CULLED_PRIM                 = 0x00000087,
PERF_PAPC_SU_OUTPUT_EOPG                 = 0x00000088,
PERF_PAPC_SU_SE2_PRIM_FILTER_CULL        = 0x00000089,
PERF_PAPC_SU_SE3_PRIM_FILTER_CULL        = 0x0000008a,
PERF_PAPC_SU_SE2_OUTPUT_PRIM             = 0x0000008b,
PERF_PAPC_SU_SE3_OUTPUT_PRIM             = 0x0000008c,
PERF_PAPC_SU_SE2_OUTPUT_NULL_PRIM        = 0x0000008d,
PERF_PAPC_SU_SE3_OUTPUT_NULL_PRIM        = 0x0000008e,
PERF_PAPC_SU_SE0_OUTPUT_END_OF_PACKET    = 0x0000008f,
PERF_PAPC_SU_SE1_OUTPUT_END_OF_PACKET    = 0x00000090,
PERF_PAPC_SU_SE2_OUTPUT_END_OF_PACKET    = 0x00000091,
PERF_PAPC_SU_SE3_OUTPUT_END_OF_PACKET    = 0x00000092,
PERF_PAPC_SU_SE0_OUTPUT_EOPG             = 0x00000093,
PERF_PAPC_SU_SE1_OUTPUT_EOPG             = 0x00000094,
PERF_PAPC_SU_SE2_OUTPUT_EOPG             = 0x00000095,
PERF_PAPC_SU_SE3_OUTPUT_EOPG             = 0x00000096,
PERF_PAPC_SU_SE2_STALLED_SC              = 0x00000097,
PERF_PAPC_SU_SE3_STALLED_SC              = 0x00000098,
PERF_SU_SMALL_PRIM_FILTER_CULL_CNT       = 0x00000099,
PERF_SMALL_PRIM_CULL_PRIM_1X1            = 0x0000009a,
PERF_SMALL_PRIM_CULL_PRIM_2X1            = 0x0000009b,
PERF_SMALL_PRIM_CULL_PRIM_1X2            = 0x0000009c,
PERF_SMALL_PRIM_CULL_PRIM_2X2            = 0x0000009d,
PERF_SMALL_PRIM_CULL_PRIM_3X1            = 0x0000009e,
PERF_SMALL_PRIM_CULL_PRIM_1X3            = 0x0000009f,
PERF_SMALL_PRIM_CULL_PRIM_3X2            = 0x000000a0,
PERF_SMALL_PRIM_CULL_PRIM_2X3            = 0x000000a1,
PERF_SMALL_PRIM_CULL_PRIM_NX1            = 0x000000a2,
PERF_SMALL_PRIM_CULL_PRIM_1XN            = 0x000000a3,
PERF_SMALL_PRIM_CULL_PRIM_NX2            = 0x000000a4,
PERF_SMALL_PRIM_CULL_PRIM_2XN            = 0x000000a5,
PERF_SMALL_PRIM_CULL_PRIM_FULL_RES_EVENT = 0x000000a6,
PERF_SMALL_PRIM_CULL_PRIM_HALF_RES_EVENT = 0x000000a7,
PERF_SMALL_PRIM_CULL_PRIM_QUARTER_RES_EVENT = 0x000000a8,
PERF_SC0_QUALIFIED_SEND_BUSY_EVENT       = 0x000000aa,
PERF_SC0_QUALIFIED_SEND_NOT_BUSY_EVENT   = 0x000000ab,
PERF_SC1_QUALIFIED_SEND_BUSY_EVENT       = 0x000000ac,
PERF_SC1_QUALIFIED_SEND_NOT_BUSY_EVENT   = 0x000000ad,
PERF_SC2_QUALIFIED_SEND_BUSY_EVENT       = 0x000000ae,
PERF_SC2_QUALIFIED_SEND_NOT_BUSY_EVENT   = 0x000000af,
PERF_SC3_QUALIFIED_SEND_BUSY_EVENT       = 0x000000b0,
PERF_SC3_QUALIFIED_SEND_NOT_BUSY_EVENT   = 0x000000b1,
PERF_PA_VERTEX_FIFO_FULL                 = 0x000000b3,
PERF_PA_PRIMIC_TO_CLPRIM_FIFO_FULL       = 0x000000b4,
PERF_PA_FETCH_TO_PRIMIC_P_FIFO_FULL      = 0x000000b6,
PERF_PA_FETCH_TO_SXIF_FIFO_FULL          = 0x000000b7,
PERF_PA_PIPE0_SWITCHED_GEN               = 0x000000b9,
PERF_PA_PIPE1_SWITCHED_GEN               = 0x000000ba,
PERF_ENGG_CSB_MACHINE_IS_STARVED         = 0x000000bc,
PERF_ENGG_CSB_MACHINE_STALLED_BY_CSB_MEMORY = 0x000000bd,
PERF_ENGG_CSB_MACHINE_STALLED_BY_SPI     = 0x000000be,
PERF_ENGG_CSB_GE_INPUT_FIFO_FULL         = 0x000000bf,
PERF_ENGG_CSB_SPI_INPUT_FIFO_FULL        = 0x000000c0,
PERF_ENGG_CSB_PAYLOAD_INPUT_FIFO_FULL    = 0x000000c1,
PERF_ENGG_CSB_GE_INPUT_FIFO_POP_BIT      = 0x000000c2,
PERF_ENGG_CSB_PRIM_COUNT_EQ0             = 0x000000c3,
PERF_ENGG_CSB_NULL_SUBGROUP              = 0x000000c4,
PERF_ENGG_CSB_GE_SENDING_SUBGROUP        = 0x000000c5,
PERF_ENGG_CSB_GE_MEMORY_FULL             = 0x000000c6,
PERF_ENGG_CSB_GE_MEMORY_EMPTY            = 0x000000c7,
PERF_ENGG_CSB_SPI_MEMORY_FULL            = 0x000000c8,
PERF_ENGG_CSB_SPI_MEMORY_EMPTY           = 0x000000c9,
PERF_ENGG_CSB_DELAY_BIN00                = 0x000000ca,
PERF_ENGG_CSB_DELAY_BIN01                = 0x000000cb,
PERF_ENGG_CSB_DELAY_BIN02                = 0x000000cc,
PERF_ENGG_CSB_DELAY_BIN03                = 0x000000cd,
PERF_ENGG_CSB_DELAY_BIN04                = 0x000000ce,
PERF_ENGG_CSB_DELAY_BIN05                = 0x000000cf,
PERF_ENGG_CSB_DELAY_BIN06                = 0x000000d0,
PERF_ENGG_CSB_DELAY_BIN07                = 0x000000d1,
PERF_ENGG_CSB_DELAY_BIN08                = 0x000000d2,
PERF_ENGG_CSB_DELAY_BIN09                = 0x000000d3,
PERF_ENGG_CSB_DELAY_BIN10                = 0x000000d4,
PERF_ENGG_CSB_DELAY_BIN11                = 0x000000d5,
PERF_ENGG_CSB_DELAY_BIN12                = 0x000000d6,
PERF_ENGG_CSB_DELAY_BIN13                = 0x000000d7,
PERF_ENGG_CSB_DELAY_BIN14                = 0x000000d8,
PERF_ENGG_CSB_DELAY_BIN15                = 0x000000d9,
PERF_ENGG_CSB_SPI_DELAY_BIN00            = 0x000000da,
PERF_ENGG_CSB_SPI_DELAY_BIN01            = 0x000000db,
PERF_ENGG_CSB_SPI_DELAY_BIN02            = 0x000000dc,
PERF_ENGG_CSB_SPI_DELAY_BIN03            = 0x000000dd,
PERF_ENGG_CSB_SPI_DELAY_BIN04            = 0x000000de,
PERF_ENGG_CSB_SPI_DELAY_BIN05            = 0x000000df,
PERF_ENGG_CSB_SPI_DELAY_BIN06            = 0x000000e0,
PERF_ENGG_CSB_SPI_DELAY_BIN07            = 0x000000e1,
PERF_ENGG_CSB_SPI_DELAY_BIN08            = 0x000000e2,
PERF_ENGG_CSB_SPI_DELAY_BIN09            = 0x000000e3,
PERF_ENGG_CSB_SPI_DELAY_BIN10            = 0x000000e4,
PERF_ENGG_INDEX_REQ_NULL_REQUEST         = 0x000000e5,
PERF_ENGG_INDEX_REQ_0_NEW_VERTS_THIS_PRIM = 0x000000e6,
PERF_ENGG_INDEX_REQ_1_NEW_VERTS_THIS_PRIM = 0x000000e7,
PERF_ENGG_INDEX_REQ_2_NEW_VERTS_THIS_PRIM = 0x000000e8,
PERF_ENGG_INDEX_REQ_3_NEW_VERTS_THIS_PRIM = 0x000000e9,
PERF_ENGG_INDEX_REQ_STARVED              = 0x000000ea,
PERF_ENGG_INDEX_REQ_IDLE_AND_STALLED_BY_REQ2RTN_FIFO_FULL = 0x000000eb,
PERF_ENGG_INDEX_REQ_BUSY_AND_STALLED_BY_REQ2RTN_FIFO_FULL = 0x000000ec,
PERF_ENGG_INDEX_REQ_STALLED_BY_SX_CREDITS = 0x000000ed,
PERF_ENGG_INDEX_RET_REQ2RTN_FIFO_FULL    = 0x000000ee,
PERF_ENGG_INDEX_RET_REQ2RTN_FIFO_EMPTY   = 0x000000ef,
PERF_ENGG_INDEX_RET_SX_RECEIVE_FIFO_FULL = 0x000000f0,
PERF_ENGG_INDEX_RET_SXRX_STARVED_BY_CSB  = 0x000000f1,
PERF_ENGG_INDEX_RET_SXRX_STARVED_BY_PRIMS = 0x000000f2,
PERF_ENGG_INDEX_RET_SXRX_STALLED_BY_PRIM_INDICES_CSB_FIFO = 0x000000f3,
PERF_ENGG_INDEX_RET_SXRX_STALLED_BY_PRIM_INDICES_FIFO = 0x000000f4,
PERF_ENGG_INDEX_RET_SXRX_READING_EVENT   = 0x000000f5,
PERF_ENGG_INDEX_RET_SXRX_READING_NULL_SUBGROUP = 0x000000f6,
PERF_ENGG_INDEX_RET_SXRX_READING_SUBGROUP_PRIMCOUNT_EQ0 = 0x000000f7,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_0_VALID_PRIMS_NOPL = 0x000000f8,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_1_VALID_PRIMS_NOPL = 0x000000f9,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_2_VALID_PRIMS_NOPL = 0x000000fa,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_3_VALID_PRIMS_NOPL = 0x000000fb,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_4_VALID_PRIMS_NOPL = 0x000000fc,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_0_VALID_PRIMS_PL = 0x000000fd,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_1_VALID_PRIMS_PL = 0x000000fe,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_2_VALID_PRIMS_PL = 0x000000ff,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_3_VALID_PRIMS_PL = 0x00000100,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_4_VALID_PRIMS_PL = 0x00000101,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_0_NULL_PRIMS = 0x00000102,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_1_NULL_PRIMS = 0x00000103,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_2_NULL_PRIMS = 0x00000104,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_3_NULL_PRIMS = 0x00000105,
PERF_ENGG_INDEX_RET_SXRX_READING_QDWORD_4_NULL_PRIMS = 0x00000106,
PERF_ENGG_INDEX_PRIM_IF_STALLED_BY_FULL_FETCH_TO_PRIMIC_P_FIFO = 0x00000107,
PERF_ENGG_INDEX_PRIM_IF_STALLED_BY_FULL_FETCH_TO_PRIMIC_S_FIFO = 0x00000108,
PERF_ENGG_INDEX_PRIM_IF_STARVED_BY_NO_CSB = 0x00000109,
PERF_ENGG_INDEX_PRIM_IF_STARVED_BY_NO_PRIM = 0x0000010a,
PERF_ENGG_INDEX_PRIM_IF_FETCH_TO_PRIMIC_P_FIFO_WRITE = 0x0000010b,
PERF_ENGG_INDEX_PRIM_IF_FETCH_TO_PRIMIC_P_FIFO_NO_WRITE = 0x0000010c,
PERF_ENGG_POS_REQ_STARVED                = 0x0000010d,
PERF_ENGG_INDEX_RET_SXRX_NULL_DROPPER_STALLED_BY_FULL_PRIM_FIFO = 0x0000010e,
PERF_ENGG_BUSY                           = 0x0000010f,
PERF_CLIPSM_CULL_PRIMS_CNT               = 0x00000110,
PERF_PH_SEND_1_SC                        = 0x00000111,
PERF_PH_SEND_2_SC                        = 0x00000112,
PERF_PH_SEND_3_SC                        = 0x00000113,
PERF_PH_SEND_4_SC                        = 0x00000114,
PERF_OUTPUT_PRIM_1_SC                    = 0x00000115,
PERF_OUTPUT_PRIM_2_SC                    = 0x00000116,
PERF_OUTPUT_PRIM_3_SC                    = 0x00000117,
PERF_OUTPUT_PRIM_4_SC                    = 0x00000118,
} SU_PERFCNT_SEL;

/*******************************************************
 * PH Enums
 *******************************************************/

/*
 * PH_PERFCNT_SEL enum
 */

typedef enum PH_PERFCNT_SEL {
PH_PERF_SEL_SC0_SRPS_WINDOW_VALID        = 0x00000000,
PH_PERF_SEL_SC0_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES = 0x00000001,
PH_PERF_SEL_SC0_ARB_XFC_ONLY_PRIM_CYCLES = 0x00000002,
PH_PERF_SEL_SC0_ARB_XFC_ONLY_ONE_INC_PER_PRIM = 0x00000003,
PH_PERF_SEL_SC0_ARB_STALLED_FROM_BELOW   = 0x00000004,
PH_PERF_SEL_SC0_ARB_STARVED_FROM_ABOVE   = 0x00000005,
PH_PERF_SEL_SC0_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x00000006,
PH_PERF_SEL_SC0_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x00000007,
PH_PERF_SEL_SC0_ARB_BUSY                 = 0x00000008,
PH_PERF_SEL_SC0_ARB_PA_BUSY_SOP          = 0x00000009,
PH_PERF_SEL_SC0_ARB_EOP_POP_SYNC_POP     = 0x0000000a,
PH_PERF_SEL_SC0_ARB_EVENT_SYNC_POP       = 0x0000000b,
PH_PERF_SEL_SC0_PS_ENG_MULTICYCLE_BUBBLE = 0x0000000c,
PH_PERF_SEL_SC0_EOP_SYNC_WINDOW          = 0x0000000d,
PH_PERF_SEL_SC0_BUSY_PROCESSING_MULTICYCLE_PRIM = 0x0000000e,
PH_PERF_SEL_SC0_BUSY_CNT_NOT_ZERO        = 0x0000000f,
PH_PERF_SEL_SC0_SEND                     = 0x00000010,
PH_PERF_SEL_SC0_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x00000011,
PH_PERF_SEL_SC0_CREDIT_AT_MAX            = 0x00000012,
PH_PERF_SEL_SC0_CREDIT_AT_MAX_NO_PENDING_SEND = 0x00000013,
PH_PERF_SEL_SC0_GFX_PIPE0_TO_1_TRANSITION = 0x00000014,
PH_PERF_SEL_SC0_GFX_PIPE1_TO_0_TRANSITION = 0x00000015,
PH_PERF_SEL_SC0_GFX_PIPE_PRIM_PROVOKED_TRANSITION = 0x00000016,
PH_PERF_SEL_SC0_GFX_PIPE_EVENT_PROVOKED_TRANSITION = 0x00000017,
PH_PERF_SEL_SC0_PA0_DATA_FIFO_RD         = 0x00000018,
PH_PERF_SEL_SC0_PA0_DATA_FIFO_WE         = 0x00000019,
PH_PERF_SEL_SC0_PA0_FIFO_EMPTY           = 0x0000001a,
PH_PERF_SEL_SC0_PA0_FIFO_FULL            = 0x0000001b,
PH_PERF_SEL_SC0_PA0_NULL_WE              = 0x0000001c,
PH_PERF_SEL_SC0_PA0_EVENT_WE             = 0x0000001d,
PH_PERF_SEL_SC0_PA0_FPOV_WE              = 0x0000001e,
PH_PERF_SEL_SC0_PA0_LPOV_WE              = 0x0000001f,
PH_PERF_SEL_SC0_PA0_EOP_WE               = 0x00000020,
PH_PERF_SEL_SC0_PA0_DATA_FIFO_EOP_RD     = 0x00000021,
PH_PERF_SEL_SC0_PA0_EOPG_WE              = 0x00000022,
PH_PERF_SEL_SC0_PA0_DEALLOC_4_0_RD       = 0x00000023,
PH_PERF_SEL_SC0_PA1_DATA_FIFO_RD         = 0x00000024,
PH_PERF_SEL_SC0_PA1_DATA_FIFO_WE         = 0x00000025,
PH_PERF_SEL_SC0_PA1_FIFO_EMPTY           = 0x00000026,
PH_PERF_SEL_SC0_PA1_FIFO_FULL            = 0x00000027,
PH_PERF_SEL_SC0_PA1_NULL_WE              = 0x00000028,
PH_PERF_SEL_SC0_PA1_EVENT_WE             = 0x00000029,
PH_PERF_SEL_SC0_PA1_FPOV_WE              = 0x0000002a,
PH_PERF_SEL_SC0_PA1_LPOV_WE              = 0x0000002b,
PH_PERF_SEL_SC0_PA1_EOP_WE               = 0x0000002c,
PH_PERF_SEL_SC0_PA1_DATA_FIFO_EOP_RD     = 0x0000002d,
PH_PERF_SEL_SC0_PA1_EOPG_WE              = 0x0000002e,
PH_PERF_SEL_SC0_PA1_DEALLOC_4_0_RD       = 0x0000002f,
PH_PERF_SEL_SC0_PA2_DATA_FIFO_RD         = 0x00000030,
PH_PERF_SEL_SC0_PA2_DATA_FIFO_WE         = 0x00000031,
PH_PERF_SEL_SC0_PA2_FIFO_EMPTY           = 0x00000032,
PH_PERF_SEL_SC0_PA2_FIFO_FULL            = 0x00000033,
PH_PERF_SEL_SC0_PA2_NULL_WE              = 0x00000034,
PH_PERF_SEL_SC0_PA2_EVENT_WE             = 0x00000035,
PH_PERF_SEL_SC0_PA2_FPOV_WE              = 0x00000036,
PH_PERF_SEL_SC0_PA2_LPOV_WE              = 0x00000037,
PH_PERF_SEL_SC0_PA2_EOP_WE               = 0x00000038,
PH_PERF_SEL_SC0_PA2_DATA_FIFO_EOP_RD     = 0x00000039,
PH_PERF_SEL_SC0_PA2_EOPG_WE              = 0x0000003a,
PH_PERF_SEL_SC0_PA2_DEALLOC_4_0_RD       = 0x0000003b,
PH_PERF_SEL_SC0_PA3_DATA_FIFO_RD         = 0x0000003c,
PH_PERF_SEL_SC0_PA3_DATA_FIFO_WE         = 0x0000003d,
PH_PERF_SEL_SC0_PA3_FIFO_EMPTY           = 0x0000003e,
PH_PERF_SEL_SC0_PA3_FIFO_FULL            = 0x0000003f,
PH_PERF_SEL_SC0_PA3_NULL_WE              = 0x00000040,
PH_PERF_SEL_SC0_PA3_EVENT_WE             = 0x00000041,
PH_PERF_SEL_SC0_PA3_FPOV_WE              = 0x00000042,
PH_PERF_SEL_SC0_PA3_LPOV_WE              = 0x00000043,
PH_PERF_SEL_SC0_PA3_EOP_WE               = 0x00000044,
PH_PERF_SEL_SC0_PA3_DATA_FIFO_EOP_RD     = 0x00000045,
PH_PERF_SEL_SC0_PA3_EOPG_WE              = 0x00000046,
PH_PERF_SEL_SC0_PA3_DEALLOC_4_0_RD       = 0x00000047,
PH_PERF_SEL_SC0_PA4_DATA_FIFO_RD         = 0x00000048,
PH_PERF_SEL_SC0_PA4_DATA_FIFO_WE         = 0x00000049,
PH_PERF_SEL_SC0_PA4_FIFO_EMPTY           = 0x0000004a,
PH_PERF_SEL_SC0_PA4_FIFO_FULL            = 0x0000004b,
PH_PERF_SEL_SC0_PA4_NULL_WE              = 0x0000004c,
PH_PERF_SEL_SC0_PA4_EVENT_WE             = 0x0000004d,
PH_PERF_SEL_SC0_PA4_FPOV_WE              = 0x0000004e,
PH_PERF_SEL_SC0_PA4_LPOV_WE              = 0x0000004f,
PH_PERF_SEL_SC0_PA4_EOP_WE               = 0x00000050,
PH_PERF_SEL_SC0_PA4_DATA_FIFO_EOP_RD     = 0x00000051,
PH_PERF_SEL_SC0_PA4_EOPG_WE              = 0x00000052,
PH_PERF_SEL_SC0_PA4_DEALLOC_4_0_RD       = 0x00000053,
PH_PERF_SEL_SC0_PA5_DATA_FIFO_RD         = 0x00000054,
PH_PERF_SEL_SC0_PA5_DATA_FIFO_WE         = 0x00000055,
PH_PERF_SEL_SC0_PA5_FIFO_EMPTY           = 0x00000056,
PH_PERF_SEL_SC0_PA5_FIFO_FULL            = 0x00000057,
PH_PERF_SEL_SC0_PA5_NULL_WE              = 0x00000058,
PH_PERF_SEL_SC0_PA5_EVENT_WE             = 0x00000059,
PH_PERF_SEL_SC0_PA5_FPOV_WE              = 0x0000005a,
PH_PERF_SEL_SC0_PA5_LPOV_WE              = 0x0000005b,
PH_PERF_SEL_SC0_PA5_EOP_WE               = 0x0000005c,
PH_PERF_SEL_SC0_PA5_DATA_FIFO_EOP_RD     = 0x0000005d,
PH_PERF_SEL_SC0_PA5_EOPG_WE              = 0x0000005e,
PH_PERF_SEL_SC0_PA5_DEALLOC_4_0_RD       = 0x0000005f,
PH_PERF_SEL_SC0_PA6_DATA_FIFO_RD         = 0x00000060,
PH_PERF_SEL_SC0_PA6_DATA_FIFO_WE         = 0x00000061,
PH_PERF_SEL_SC0_PA6_FIFO_EMPTY           = 0x00000062,
PH_PERF_SEL_SC0_PA6_FIFO_FULL            = 0x00000063,
PH_PERF_SEL_SC0_PA6_NULL_WE              = 0x00000064,
PH_PERF_SEL_SC0_PA6_EVENT_WE             = 0x00000065,
PH_PERF_SEL_SC0_PA6_FPOV_WE              = 0x00000066,
PH_PERF_SEL_SC0_PA6_LPOV_WE              = 0x00000067,
PH_PERF_SEL_SC0_PA6_EOP_WE               = 0x00000068,
PH_PERF_SEL_SC0_PA6_DATA_FIFO_EOP_RD     = 0x00000069,
PH_PERF_SEL_SC0_PA6_EOPG_WE              = 0x0000006a,
PH_PERF_SEL_SC0_PA6_DEALLOC_4_0_RD       = 0x0000006b,
PH_PERF_SEL_SC0_PA7_DATA_FIFO_RD         = 0x0000006c,
PH_PERF_SEL_SC0_PA7_DATA_FIFO_WE         = 0x0000006d,
PH_PERF_SEL_SC0_PA7_FIFO_EMPTY           = 0x0000006e,
PH_PERF_SEL_SC0_PA7_FIFO_FULL            = 0x0000006f,
PH_PERF_SEL_SC0_PA7_NULL_WE              = 0x00000070,
PH_PERF_SEL_SC0_PA7_EVENT_WE             = 0x00000071,
PH_PERF_SEL_SC0_PA7_FPOV_WE              = 0x00000072,
PH_PERF_SEL_SC0_PA7_LPOV_WE              = 0x00000073,
PH_PERF_SEL_SC0_PA7_EOP_WE               = 0x00000074,
PH_PERF_SEL_SC0_PA7_DATA_FIFO_EOP_RD     = 0x00000075,
PH_PERF_SEL_SC0_PA7_EOPG_WE              = 0x00000076,
PH_PERF_SEL_SC0_PA7_DEALLOC_4_0_RD       = 0x00000077,
PH_PERF_SEL_SC1_SRPS_WINDOW_VALID        = 0x00000078,
PH_PERF_SEL_SC1_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES = 0x00000079,
PH_PERF_SEL_SC1_ARB_XFC_ONLY_PRIM_CYCLES = 0x0000007a,
PH_PERF_SEL_SC1_ARB_XFC_ONLY_ONE_INC_PER_PRIM = 0x0000007b,
PH_PERF_SEL_SC1_ARB_STALLED_FROM_BELOW   = 0x0000007c,
PH_PERF_SEL_SC1_ARB_STARVED_FROM_ABOVE   = 0x0000007d,
PH_PERF_SEL_SC1_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x0000007e,
PH_PERF_SEL_SC1_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x0000007f,
PH_PERF_SEL_SC1_ARB_BUSY                 = 0x00000080,
PH_PERF_SEL_SC1_ARB_PA_BUSY_SOP          = 0x00000081,
PH_PERF_SEL_SC1_ARB_EOP_POP_SYNC_POP     = 0x00000082,
PH_PERF_SEL_SC1_ARB_EVENT_SYNC_POP       = 0x00000083,
PH_PERF_SEL_SC1_PS_ENG_MULTICYCLE_BUBBLE = 0x00000084,
PH_PERF_SEL_SC1_EOP_SYNC_WINDOW          = 0x00000085,
PH_PERF_SEL_SC1_BUSY_PROCESSING_MULTICYCLE_PRIM = 0x00000086,
PH_PERF_SEL_SC1_BUSY_CNT_NOT_ZERO        = 0x00000087,
PH_PERF_SEL_SC1_SEND                     = 0x00000088,
PH_PERF_SEL_SC1_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x00000089,
PH_PERF_SEL_SC1_CREDIT_AT_MAX            = 0x0000008a,
PH_PERF_SEL_SC1_CREDIT_AT_MAX_NO_PENDING_SEND = 0x0000008b,
PH_PERF_SEL_SC1_GFX_PIPE0_TO_1_TRANSITION = 0x0000008c,
PH_PERF_SEL_SC1_GFX_PIPE1_TO_0_TRANSITION = 0x0000008d,
PH_PERF_SEL_SC1_GFX_PIPE_EOP_PRIM_PROVOKED_TRANSITION = 0x0000008e,
PH_PERF_SEL_SC1_GFX_PIPE_EVENT_PROVOKED_TRANSITION = 0x0000008f,
PH_PERF_SEL_SC1_PA0_DATA_FIFO_RD         = 0x00000090,
PH_PERF_SEL_SC1_PA0_DATA_FIFO_WE         = 0x00000091,
PH_PERF_SEL_SC1_PA0_FIFO_EMPTY           = 0x00000092,
PH_PERF_SEL_SC1_PA0_FIFO_FULL            = 0x00000093,
PH_PERF_SEL_SC1_PA0_NULL_WE              = 0x00000094,
PH_PERF_SEL_SC1_PA0_EVENT_WE             = 0x00000095,
PH_PERF_SEL_SC1_PA0_FPOV_WE              = 0x00000096,
PH_PERF_SEL_SC1_PA0_LPOV_WE              = 0x00000097,
PH_PERF_SEL_SC1_PA0_EOP_WE               = 0x00000098,
PH_PERF_SEL_SC1_PA0_DATA_FIFO_EOP_RD     = 0x00000099,
PH_PERF_SEL_SC1_PA0_EOPG_WE              = 0x0000009a,
PH_PERF_SEL_SC1_PA0_DEALLOC_4_0_RD       = 0x0000009b,
PH_PERF_SEL_SC1_PA1_DATA_FIFO_RD         = 0x0000009c,
PH_PERF_SEL_SC1_PA1_DATA_FIFO_WE         = 0x0000009d,
PH_PERF_SEL_SC1_PA1_FIFO_EMPTY           = 0x0000009e,
PH_PERF_SEL_SC1_PA1_FIFO_FULL            = 0x0000009f,
PH_PERF_SEL_SC1_PA1_NULL_WE              = 0x000000a0,
PH_PERF_SEL_SC1_PA1_EVENT_WE             = 0x000000a1,
PH_PERF_SEL_SC1_PA1_FPOV_WE              = 0x000000a2,
PH_PERF_SEL_SC1_PA1_LPOV_WE              = 0x000000a3,
PH_PERF_SEL_SC1_PA1_EOP_WE               = 0x000000a4,
PH_PERF_SEL_SC1_PA1_DATA_FIFO_EOP_RD     = 0x000000a5,
PH_PERF_SEL_SC1_PA1_EOPG_WE              = 0x000000a6,
PH_PERF_SEL_SC1_PA1_DEALLOC_4_0_RD       = 0x000000a7,
PH_PERF_SEL_SC1_PA2_DATA_FIFO_RD         = 0x000000a8,
PH_PERF_SEL_SC1_PA2_DATA_FIFO_WE         = 0x000000a9,
PH_PERF_SEL_SC1_PA2_FIFO_EMPTY           = 0x000000aa,
PH_PERF_SEL_SC1_PA2_FIFO_FULL            = 0x000000ab,
PH_PERF_SEL_SC1_PA2_NULL_WE              = 0x000000ac,
PH_PERF_SEL_SC1_PA2_EVENT_WE             = 0x000000ad,
PH_PERF_SEL_SC1_PA2_FPOV_WE              = 0x000000ae,
PH_PERF_SEL_SC1_PA2_LPOV_WE              = 0x000000af,
PH_PERF_SEL_SC1_PA2_EOP_WE               = 0x000000b0,
PH_PERF_SEL_SC1_PA2_DATA_FIFO_EOP_RD     = 0x000000b1,
PH_PERF_SEL_SC1_PA2_EOPG_WE              = 0x000000b2,
PH_PERF_SEL_SC1_PA2_DEALLOC_4_0_RD       = 0x000000b3,
PH_PERF_SEL_SC1_PA3_DATA_FIFO_RD         = 0x000000b4,
PH_PERF_SEL_SC1_PA3_DATA_FIFO_WE         = 0x000000b5,
PH_PERF_SEL_SC1_PA3_FIFO_EMPTY           = 0x000000b6,
PH_PERF_SEL_SC1_PA3_FIFO_FULL            = 0x000000b7,
PH_PERF_SEL_SC1_PA3_NULL_WE              = 0x000000b8,
PH_PERF_SEL_SC1_PA3_EVENT_WE             = 0x000000b9,
PH_PERF_SEL_SC1_PA3_FPOV_WE              = 0x000000ba,
PH_PERF_SEL_SC1_PA3_LPOV_WE              = 0x000000bb,
PH_PERF_SEL_SC1_PA3_EOP_WE               = 0x000000bc,
PH_PERF_SEL_SC1_PA3_DATA_FIFO_EOP_RD     = 0x000000bd,
PH_PERF_SEL_SC1_PA3_EOPG_WE              = 0x000000be,
PH_PERF_SEL_SC1_PA3_DEALLOC_4_0_RD       = 0x000000bf,
PH_PERF_SEL_SC1_PA4_DATA_FIFO_RD         = 0x000000c0,
PH_PERF_SEL_SC1_PA4_DATA_FIFO_WE         = 0x000000c1,
PH_PERF_SEL_SC1_PA4_FIFO_EMPTY           = 0x000000c2,
PH_PERF_SEL_SC1_PA4_FIFO_FULL            = 0x000000c3,
PH_PERF_SEL_SC1_PA4_NULL_WE              = 0x000000c4,
PH_PERF_SEL_SC1_PA4_EVENT_WE             = 0x000000c5,
PH_PERF_SEL_SC1_PA4_FPOV_WE              = 0x000000c6,
PH_PERF_SEL_SC1_PA4_LPOV_WE              = 0x000000c7,
PH_PERF_SEL_SC1_PA4_EOP_WE               = 0x000000c8,
PH_PERF_SEL_SC1_PA4_DATA_FIFO_EOP_RD     = 0x000000c9,
PH_PERF_SEL_SC1_PA4_EOPG_WE              = 0x000000ca,
PH_PERF_SEL_SC1_PA4_DEALLOC_4_0_RD       = 0x000000cb,
PH_PERF_SEL_SC1_PA5_DATA_FIFO_RD         = 0x000000cc,
PH_PERF_SEL_SC1_PA5_DATA_FIFO_WE         = 0x000000cd,
PH_PERF_SEL_SC1_PA5_FIFO_EMPTY           = 0x000000ce,
PH_PERF_SEL_SC1_PA5_FIFO_FULL            = 0x000000cf,
PH_PERF_SEL_SC1_PA5_NULL_WE              = 0x000000d0,
PH_PERF_SEL_SC1_PA5_EVENT_WE             = 0x000000d1,
PH_PERF_SEL_SC1_PA5_FPOV_WE              = 0x000000d2,
PH_PERF_SEL_SC1_PA5_LPOV_WE              = 0x000000d3,
PH_PERF_SEL_SC1_PA5_EOP_WE               = 0x000000d4,
PH_PERF_SEL_SC1_PA5_DATA_FIFO_EOP_RD     = 0x000000d5,
PH_PERF_SEL_SC1_PA5_EOPG_WE              = 0x000000d6,
PH_PERF_SEL_SC1_PA5_DEALLOC_4_0_RD       = 0x000000d7,
PH_PERF_SEL_SC1_PA6_DATA_FIFO_RD         = 0x000000d8,
PH_PERF_SEL_SC1_PA6_DATA_FIFO_WE         = 0x000000d9,
PH_PERF_SEL_SC1_PA6_FIFO_EMPTY           = 0x000000da,
PH_PERF_SEL_SC1_PA6_FIFO_FULL            = 0x000000db,
PH_PERF_SEL_SC1_PA6_NULL_WE              = 0x000000dc,
PH_PERF_SEL_SC1_PA6_EVENT_WE             = 0x000000dd,
PH_PERF_SEL_SC1_PA6_FPOV_WE              = 0x000000de,
PH_PERF_SEL_SC1_PA6_LPOV_WE              = 0x000000df,
PH_PERF_SEL_SC1_PA6_EOP_WE               = 0x000000e0,
PH_PERF_SEL_SC1_PA6_DATA_FIFO_EOP_RD     = 0x000000e1,
PH_PERF_SEL_SC1_PA6_EOPG_WE              = 0x000000e2,
PH_PERF_SEL_SC1_PA6_DEALLOC_4_0_RD       = 0x000000e3,
PH_PERF_SEL_SC1_PA7_DATA_FIFO_RD         = 0x000000e4,
PH_PERF_SEL_SC1_PA7_DATA_FIFO_WE         = 0x000000e5,
PH_PERF_SEL_SC1_PA7_FIFO_EMPTY           = 0x000000e6,
PH_PERF_SEL_SC1_PA7_FIFO_FULL            = 0x000000e7,
PH_PERF_SEL_SC1_PA7_NULL_WE              = 0x000000e8,
PH_PERF_SEL_SC1_PA7_EVENT_WE             = 0x000000e9,
PH_PERF_SEL_SC1_PA7_FPOV_WE              = 0x000000ea,
PH_PERF_SEL_SC1_PA7_LPOV_WE              = 0x000000eb,
PH_PERF_SEL_SC1_PA7_EOP_WE               = 0x000000ec,
PH_PERF_SEL_SC1_PA7_DATA_FIFO_EOP_RD     = 0x000000ed,
PH_PERF_SEL_SC1_PA7_EOPG_WE              = 0x000000ee,
PH_PERF_SEL_SC1_PA7_DEALLOC_4_0_RD       = 0x000000ef,
PH_PERF_SEL_SC2_SRPS_WINDOW_VALID        = 0x000000f0,
PH_PERF_SEL_SC2_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES = 0x000000f1,
PH_PERF_SEL_SC2_ARB_XFC_ONLY_PRIM_CYCLES = 0x000000f2,
PH_PERF_SEL_SC2_ARB_XFC_ONLY_ONE_INC_PER_PRIM = 0x000000f3,
PH_PERF_SEL_SC2_ARB_STALLED_FROM_BELOW   = 0x000000f4,
PH_PERF_SEL_SC2_ARB_STARVED_FROM_ABOVE   = 0x000000f5,
PH_PERF_SEL_SC2_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000000f6,
PH_PERF_SEL_SC2_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000000f7,
PH_PERF_SEL_SC2_ARB_BUSY                 = 0x000000f8,
PH_PERF_SEL_SC2_ARB_PA_BUSY_SOP          = 0x000000f9,
PH_PERF_SEL_SC2_ARB_EOP_POP_SYNC_POP     = 0x000000fa,
PH_PERF_SEL_SC2_ARB_EVENT_SYNC_POP       = 0x000000fb,
PH_PERF_SEL_SC2_PS_ENG_MULTICYCLE_BUBBLE = 0x000000fc,
PH_PERF_SEL_SC2_EOP_SYNC_WINDOW          = 0x000000fd,
PH_PERF_SEL_SC2_BUSY_PROCESSING_MULTICYCLE_PRIM = 0x000000fe,
PH_PERF_SEL_SC2_BUSY_CNT_NOT_ZERO        = 0x000000ff,
PH_PERF_SEL_SC2_SEND                     = 0x00000100,
PH_PERF_SEL_SC2_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x00000101,
PH_PERF_SEL_SC2_CREDIT_AT_MAX            = 0x00000102,
PH_PERF_SEL_SC2_CREDIT_AT_MAX_NO_PENDING_SEND = 0x00000103,
PH_PERF_SEL_SC2_GFX_PIPE0_TO_1_TRANSITION = 0x00000104,
PH_PERF_SEL_SC2_GFX_PIPE1_TO_0_TRANSITION = 0x00000105,
PH_PERF_SEL_SC2_GFX_PIPE_EOP_PRIM_PROVOKED_TRANSITION = 0x00000106,
PH_PERF_SEL_SC2_GFX_PIPE_EVENT_PROVOKED_TRANSITION = 0x00000107,
PH_PERF_SEL_SC2_PA0_DATA_FIFO_RD         = 0x00000108,
PH_PERF_SEL_SC2_PA0_DATA_FIFO_WE         = 0x00000109,
PH_PERF_SEL_SC2_PA0_FIFO_EMPTY           = 0x0000010a,
PH_PERF_SEL_SC2_PA0_FIFO_FULL            = 0x0000010b,
PH_PERF_SEL_SC2_PA0_NULL_WE              = 0x0000010c,
PH_PERF_SEL_SC2_PA0_EVENT_WE             = 0x0000010d,
PH_PERF_SEL_SC2_PA0_FPOV_WE              = 0x0000010e,
PH_PERF_SEL_SC2_PA0_LPOV_WE              = 0x0000010f,
PH_PERF_SEL_SC2_PA0_EOP_WE               = 0x00000110,
PH_PERF_SEL_SC2_PA0_DATA_FIFO_EOP_RD     = 0x00000111,
PH_PERF_SEL_SC2_PA0_EOPG_WE              = 0x00000112,
PH_PERF_SEL_SC2_PA0_DEALLOC_4_0_RD       = 0x00000113,
PH_PERF_SEL_SC2_PA1_DATA_FIFO_RD         = 0x00000114,
PH_PERF_SEL_SC2_PA1_DATA_FIFO_WE         = 0x00000115,
PH_PERF_SEL_SC2_PA1_FIFO_EMPTY           = 0x00000116,
PH_PERF_SEL_SC2_PA1_FIFO_FULL            = 0x00000117,
PH_PERF_SEL_SC2_PA1_NULL_WE              = 0x00000118,
PH_PERF_SEL_SC2_PA1_EVENT_WE             = 0x00000119,
PH_PERF_SEL_SC2_PA1_FPOV_WE              = 0x0000011a,
PH_PERF_SEL_SC2_PA1_LPOV_WE              = 0x0000011b,
PH_PERF_SEL_SC2_PA1_EOP_WE               = 0x0000011c,
PH_PERF_SEL_SC2_PA1_DATA_FIFO_EOP_RD     = 0x0000011d,
PH_PERF_SEL_SC2_PA1_EOPG_WE              = 0x0000011e,
PH_PERF_SEL_SC2_PA1_DEALLOC_4_0_RD       = 0x0000011f,
PH_PERF_SEL_SC2_PA2_DATA_FIFO_RD         = 0x00000120,
PH_PERF_SEL_SC2_PA2_DATA_FIFO_WE         = 0x00000121,
PH_PERF_SEL_SC2_PA2_FIFO_EMPTY           = 0x00000122,
PH_PERF_SEL_SC2_PA2_FIFO_FULL            = 0x00000123,
PH_PERF_SEL_SC2_PA2_NULL_WE              = 0x00000124,
PH_PERF_SEL_SC2_PA2_EVENT_WE             = 0x00000125,
PH_PERF_SEL_SC2_PA2_FPOV_WE              = 0x00000126,
PH_PERF_SEL_SC2_PA2_LPOV_WE              = 0x00000127,
PH_PERF_SEL_SC2_PA2_EOP_WE               = 0x00000128,
PH_PERF_SEL_SC2_PA2_DATA_FIFO_EOP_RD     = 0x00000129,
PH_PERF_SEL_SC2_PA2_EOPG_WE              = 0x0000012a,
PH_PERF_SEL_SC2_PA2_DEALLOC_4_0_RD       = 0x0000012b,
PH_PERF_SEL_SC2_PA3_DATA_FIFO_RD         = 0x0000012c,
PH_PERF_SEL_SC2_PA3_DATA_FIFO_WE         = 0x0000012d,
PH_PERF_SEL_SC2_PA3_FIFO_EMPTY           = 0x0000012e,
PH_PERF_SEL_SC2_PA3_FIFO_FULL            = 0x0000012f,
PH_PERF_SEL_SC2_PA3_NULL_WE              = 0x00000130,
PH_PERF_SEL_SC2_PA3_EVENT_WE             = 0x00000131,
PH_PERF_SEL_SC2_PA3_FPOV_WE              = 0x00000132,
PH_PERF_SEL_SC2_PA3_LPOV_WE              = 0x00000133,
PH_PERF_SEL_SC2_PA3_EOP_WE               = 0x00000134,
PH_PERF_SEL_SC2_PA3_DATA_FIFO_EOP_RD     = 0x00000135,
PH_PERF_SEL_SC2_PA3_EOPG_WE              = 0x00000136,
PH_PERF_SEL_SC2_PA3_DEALLOC_4_0_RD       = 0x00000137,
PH_PERF_SEL_SC2_PA4_DATA_FIFO_RD         = 0x00000138,
PH_PERF_SEL_SC2_PA4_DATA_FIFO_WE         = 0x00000139,
PH_PERF_SEL_SC2_PA4_FIFO_EMPTY           = 0x0000013a,
PH_PERF_SEL_SC2_PA4_FIFO_FULL            = 0x0000013b,
PH_PERF_SEL_SC2_PA4_NULL_WE              = 0x0000013c,
PH_PERF_SEL_SC2_PA4_EVENT_WE             = 0x0000013d,
PH_PERF_SEL_SC2_PA4_FPOV_WE              = 0x0000013e,
PH_PERF_SEL_SC2_PA4_LPOV_WE              = 0x0000013f,
PH_PERF_SEL_SC2_PA4_EOP_WE               = 0x00000140,
PH_PERF_SEL_SC2_PA4_DATA_FIFO_EOP_RD     = 0x00000141,
PH_PERF_SEL_SC2_PA4_EOPG_WE              = 0x00000142,
PH_PERF_SEL_SC2_PA4_DEALLOC_4_0_RD       = 0x00000143,
PH_PERF_SEL_SC2_PA5_DATA_FIFO_RD         = 0x00000144,
PH_PERF_SEL_SC2_PA5_DATA_FIFO_WE         = 0x00000145,
PH_PERF_SEL_SC2_PA5_FIFO_EMPTY           = 0x00000146,
PH_PERF_SEL_SC2_PA5_FIFO_FULL            = 0x00000147,
PH_PERF_SEL_SC2_PA5_NULL_WE              = 0x00000148,
PH_PERF_SEL_SC2_PA5_EVENT_WE             = 0x00000149,
PH_PERF_SEL_SC2_PA5_FPOV_WE              = 0x0000014a,
PH_PERF_SEL_SC2_PA5_LPOV_WE              = 0x0000014b,
PH_PERF_SEL_SC2_PA5_EOP_WE               = 0x0000014c,
PH_PERF_SEL_SC2_PA5_DATA_FIFO_EOP_RD     = 0x0000014d,
PH_PERF_SEL_SC2_PA5_EOPG_WE              = 0x0000014e,
PH_PERF_SEL_SC2_PA5_DEALLOC_4_0_RD       = 0x0000014f,
PH_PERF_SEL_SC2_PA6_DATA_FIFO_RD         = 0x00000150,
PH_PERF_SEL_SC2_PA6_DATA_FIFO_WE         = 0x00000151,
PH_PERF_SEL_SC2_PA6_FIFO_EMPTY           = 0x00000152,
PH_PERF_SEL_SC2_PA6_FIFO_FULL            = 0x00000153,
PH_PERF_SEL_SC2_PA6_NULL_WE              = 0x00000154,
PH_PERF_SEL_SC2_PA6_EVENT_WE             = 0x00000155,
PH_PERF_SEL_SC2_PA6_FPOV_WE              = 0x00000156,
PH_PERF_SEL_SC2_PA6_LPOV_WE              = 0x00000157,
PH_PERF_SEL_SC2_PA6_EOP_WE               = 0x00000158,
PH_PERF_SEL_SC2_PA6_DATA_FIFO_EOP_RD     = 0x00000159,
PH_PERF_SEL_SC2_PA6_EOPG_WE              = 0x0000015a,
PH_PERF_SEL_SC2_PA6_DEALLOC_4_0_RD       = 0x0000015b,
PH_PERF_SEL_SC2_PA7_DATA_FIFO_RD         = 0x0000015c,
PH_PERF_SEL_SC2_PA7_DATA_FIFO_WE         = 0x0000015d,
PH_PERF_SEL_SC2_PA7_FIFO_EMPTY           = 0x0000015e,
PH_PERF_SEL_SC2_PA7_FIFO_FULL            = 0x0000015f,
PH_PERF_SEL_SC2_PA7_NULL_WE              = 0x00000160,
PH_PERF_SEL_SC2_PA7_EVENT_WE             = 0x00000161,
PH_PERF_SEL_SC2_PA7_FPOV_WE              = 0x00000162,
PH_PERF_SEL_SC2_PA7_LPOV_WE              = 0x00000163,
PH_PERF_SEL_SC2_PA7_EOP_WE               = 0x00000164,
PH_PERF_SEL_SC2_PA7_DATA_FIFO_EOP_RD     = 0x00000165,
PH_PERF_SEL_SC2_PA7_EOPG_WE              = 0x00000166,
PH_PERF_SEL_SC2_PA7_DEALLOC_4_0_RD       = 0x00000167,
PH_PERF_SEL_SC3_SRPS_WINDOW_VALID        = 0x00000168,
PH_PERF_SEL_SC3_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES = 0x00000169,
PH_PERF_SEL_SC3_ARB_XFC_ONLY_PRIM_CYCLES = 0x0000016a,
PH_PERF_SEL_SC3_ARB_XFC_ONLY_ONE_INC_PER_PRIM = 0x0000016b,
PH_PERF_SEL_SC3_ARB_STALLED_FROM_BELOW   = 0x0000016c,
PH_PERF_SEL_SC3_ARB_STARVED_FROM_ABOVE   = 0x0000016d,
PH_PERF_SEL_SC3_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x0000016e,
PH_PERF_SEL_SC3_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x0000016f,
PH_PERF_SEL_SC3_ARB_BUSY                 = 0x00000170,
PH_PERF_SEL_SC3_ARB_PA_BUSY_SOP          = 0x00000171,
PH_PERF_SEL_SC3_ARB_EOP_POP_SYNC_POP     = 0x00000172,
PH_PERF_SEL_SC3_ARB_EVENT_SYNC_POP       = 0x00000173,
PH_PERF_SEL_SC3_PS_ENG_MULTICYCLE_BUBBLE = 0x00000174,
PH_PERF_SEL_SC3_EOP_SYNC_WINDOW          = 0x00000175,
PH_PERF_SEL_SC3_BUSY_PROCESSING_MULTICYCLE_PRIM = 0x00000176,
PH_PERF_SEL_SC3_BUSY_CNT_NOT_ZERO        = 0x00000177,
PH_PERF_SEL_SC3_SEND                     = 0x00000178,
PH_PERF_SEL_SC3_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x00000179,
PH_PERF_SEL_SC3_CREDIT_AT_MAX            = 0x0000017a,
PH_PERF_SEL_SC3_CREDIT_AT_MAX_NO_PENDING_SEND = 0x0000017b,
PH_PERF_SEL_SC3_GFX_PIPE0_TO_1_TRANSITION = 0x0000017c,
PH_PERF_SEL_SC3_GFX_PIPE1_TO_0_TRANSITION = 0x0000017d,
PH_PERF_SEL_SC3_GFX_PIPE_EOP_PRIM_PROVOKED_TRANSITION = 0x0000017e,
PH_PERF_SEL_SC3_GFX_PIPE_EVENT_PROVOKED_TRANSITION = 0x0000017f,
PH_PERF_SEL_SC3_PA0_DATA_FIFO_RD         = 0x00000180,
PH_PERF_SEL_SC3_PA0_DATA_FIFO_WE         = 0x00000181,
PH_PERF_SEL_SC3_PA0_FIFO_EMPTY           = 0x00000182,
PH_PERF_SEL_SC3_PA0_FIFO_FULL            = 0x00000183,
PH_PERF_SEL_SC3_PA0_NULL_WE              = 0x00000184,
PH_PERF_SEL_SC3_PA0_EVENT_WE             = 0x00000185,
PH_PERF_SEL_SC3_PA0_FPOV_WE              = 0x00000186,
PH_PERF_SEL_SC3_PA0_LPOV_WE              = 0x00000187,
PH_PERF_SEL_SC3_PA0_EOP_WE               = 0x00000188,
PH_PERF_SEL_SC3_PA0_DATA_FIFO_EOP_RD     = 0x00000189,
PH_PERF_SEL_SC3_PA0_EOPG_WE              = 0x0000018a,
PH_PERF_SEL_SC3_PA0_DEALLOC_4_0_RD       = 0x0000018b,
PH_PERF_SEL_SC3_PA1_DATA_FIFO_RD         = 0x0000018c,
PH_PERF_SEL_SC3_PA1_DATA_FIFO_WE         = 0x0000018d,
PH_PERF_SEL_SC3_PA1_FIFO_EMPTY           = 0x0000018e,
PH_PERF_SEL_SC3_PA1_FIFO_FULL            = 0x0000018f,
PH_PERF_SEL_SC3_PA1_NULL_WE              = 0x00000190,
PH_PERF_SEL_SC3_PA1_EVENT_WE             = 0x00000191,
PH_PERF_SEL_SC3_PA1_FPOV_WE              = 0x00000192,
PH_PERF_SEL_SC3_PA1_LPOV_WE              = 0x00000193,
PH_PERF_SEL_SC3_PA1_EOP_WE               = 0x00000194,
PH_PERF_SEL_SC3_PA1_DATA_FIFO_EOP_RD     = 0x00000195,
PH_PERF_SEL_SC3_PA1_EOPG_WE              = 0x00000196,
PH_PERF_SEL_SC3_PA1_DEALLOC_4_0_RD       = 0x00000197,
PH_PERF_SEL_SC3_PA2_DATA_FIFO_RD         = 0x00000198,
PH_PERF_SEL_SC3_PA2_DATA_FIFO_WE         = 0x00000199,
PH_PERF_SEL_SC3_PA2_FIFO_EMPTY           = 0x0000019a,
PH_PERF_SEL_SC3_PA2_FIFO_FULL            = 0x0000019b,
PH_PERF_SEL_SC3_PA2_NULL_WE              = 0x0000019c,
PH_PERF_SEL_SC3_PA2_EVENT_WE             = 0x0000019d,
PH_PERF_SEL_SC3_PA2_FPOV_WE              = 0x0000019e,
PH_PERF_SEL_SC3_PA2_LPOV_WE              = 0x0000019f,
PH_PERF_SEL_SC3_PA2_EOP_WE               = 0x000001a0,
PH_PERF_SEL_SC3_PA2_DATA_FIFO_EOP_RD     = 0x000001a1,
PH_PERF_SEL_SC3_PA2_EOPG_WE              = 0x000001a2,
PH_PERF_SEL_SC3_PA2_DEALLOC_4_0_RD       = 0x000001a3,
PH_PERF_SEL_SC3_PA3_DATA_FIFO_RD         = 0x000001a4,
PH_PERF_SEL_SC3_PA3_DATA_FIFO_WE         = 0x000001a5,
PH_PERF_SEL_SC3_PA3_FIFO_EMPTY           = 0x000001a6,
PH_PERF_SEL_SC3_PA3_FIFO_FULL            = 0x000001a7,
PH_PERF_SEL_SC3_PA3_NULL_WE              = 0x000001a8,
PH_PERF_SEL_SC3_PA3_EVENT_WE             = 0x000001a9,
PH_PERF_SEL_SC3_PA3_FPOV_WE              = 0x000001aa,
PH_PERF_SEL_SC3_PA3_LPOV_WE              = 0x000001ab,
PH_PERF_SEL_SC3_PA3_EOP_WE               = 0x000001ac,
PH_PERF_SEL_SC3_PA3_DATA_FIFO_EOP_RD     = 0x000001ad,
PH_PERF_SEL_SC3_PA3_EOPG_WE              = 0x000001ae,
PH_PERF_SEL_SC3_PA3_DEALLOC_4_0_RD       = 0x000001af,
PH_PERF_SEL_SC3_PA4_DATA_FIFO_RD         = 0x000001b0,
PH_PERF_SEL_SC3_PA4_DATA_FIFO_WE         = 0x000001b1,
PH_PERF_SEL_SC3_PA4_FIFO_EMPTY           = 0x000001b2,
PH_PERF_SEL_SC3_PA4_FIFO_FULL            = 0x000001b3,
PH_PERF_SEL_SC3_PA4_NULL_WE              = 0x000001b4,
PH_PERF_SEL_SC3_PA4_EVENT_WE             = 0x000001b5,
PH_PERF_SEL_SC3_PA4_FPOV_WE              = 0x000001b6,
PH_PERF_SEL_SC3_PA4_LPOV_WE              = 0x000001b7,
PH_PERF_SEL_SC3_PA4_EOP_WE               = 0x000001b8,
PH_PERF_SEL_SC3_PA4_DATA_FIFO_EOP_RD     = 0x000001b9,
PH_PERF_SEL_SC3_PA4_EOPG_WE              = 0x000001ba,
PH_PERF_SEL_SC3_PA4_DEALLOC_4_0_RD       = 0x000001bb,
PH_PERF_SEL_SC3_PA5_DATA_FIFO_RD         = 0x000001bc,
PH_PERF_SEL_SC3_PA5_DATA_FIFO_WE         = 0x000001bd,
PH_PERF_SEL_SC3_PA5_FIFO_EMPTY           = 0x000001be,
PH_PERF_SEL_SC3_PA5_FIFO_FULL            = 0x000001bf,
PH_PERF_SEL_SC3_PA5_NULL_WE              = 0x000001c0,
PH_PERF_SEL_SC3_PA5_EVENT_WE             = 0x000001c1,
PH_PERF_SEL_SC3_PA5_FPOV_WE              = 0x000001c2,
PH_PERF_SEL_SC3_PA5_LPOV_WE              = 0x000001c3,
PH_PERF_SEL_SC3_PA5_EOP_WE               = 0x000001c4,
PH_PERF_SEL_SC3_PA5_DATA_FIFO_EOP_RD     = 0x000001c5,
PH_PERF_SEL_SC3_PA5_EOPG_WE              = 0x000001c6,
PH_PERF_SEL_SC3_PA5_DEALLOC_4_0_RD       = 0x000001c7,
PH_PERF_SEL_SC3_PA6_DATA_FIFO_RD         = 0x000001c8,
PH_PERF_SEL_SC3_PA6_DATA_FIFO_WE         = 0x000001c9,
PH_PERF_SEL_SC3_PA6_FIFO_EMPTY           = 0x000001ca,
PH_PERF_SEL_SC3_PA6_FIFO_FULL            = 0x000001cb,
PH_PERF_SEL_SC3_PA6_NULL_WE              = 0x000001cc,
PH_PERF_SEL_SC3_PA6_EVENT_WE             = 0x000001cd,
PH_PERF_SEL_SC3_PA6_FPOV_WE              = 0x000001ce,
PH_PERF_SEL_SC3_PA6_LPOV_WE              = 0x000001cf,
PH_PERF_SEL_SC3_PA6_EOP_WE               = 0x000001d0,
PH_PERF_SEL_SC3_PA6_DATA_FIFO_EOP_RD     = 0x000001d1,
PH_PERF_SEL_SC3_PA6_EOPG_WE              = 0x000001d2,
PH_PERF_SEL_SC3_PA6_DEALLOC_4_0_RD       = 0x000001d3,
PH_PERF_SEL_SC3_PA7_DATA_FIFO_RD         = 0x000001d4,
PH_PERF_SEL_SC3_PA7_DATA_FIFO_WE         = 0x000001d5,
PH_PERF_SEL_SC3_PA7_FIFO_EMPTY           = 0x000001d6,
PH_PERF_SEL_SC3_PA7_FIFO_FULL            = 0x000001d7,
PH_PERF_SEL_SC3_PA7_NULL_WE              = 0x000001d8,
PH_PERF_SEL_SC3_PA7_EVENT_WE             = 0x000001d9,
PH_PERF_SEL_SC3_PA7_FPOV_WE              = 0x000001da,
PH_PERF_SEL_SC3_PA7_LPOV_WE              = 0x000001db,
PH_PERF_SEL_SC3_PA7_EOP_WE               = 0x000001dc,
PH_PERF_SEL_SC3_PA7_DATA_FIFO_EOP_RD     = 0x000001dd,
PH_PERF_SEL_SC3_PA7_EOPG_WE              = 0x000001de,
PH_PERF_SEL_SC3_PA7_DEALLOC_4_0_RD       = 0x000001df,
PH_PERF_SEL_SC4_SRPS_WINDOW_VALID        = 0x000001e0,
PH_PERF_SEL_SC4_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES = 0x000001e1,
PH_PERF_SEL_SC4_ARB_XFC_ONLY_PRIM_CYCLES = 0x000001e2,
PH_PERF_SEL_SC4_ARB_XFC_ONLY_ONE_INC_PER_PRIM = 0x000001e3,
PH_PERF_SEL_SC4_ARB_STALLED_FROM_BELOW   = 0x000001e4,
PH_PERF_SEL_SC4_ARB_STARVED_FROM_ABOVE   = 0x000001e5,
PH_PERF_SEL_SC4_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000001e6,
PH_PERF_SEL_SC4_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000001e7,
PH_PERF_SEL_SC4_ARB_BUSY                 = 0x000001e8,
PH_PERF_SEL_SC4_ARB_PA_BUSY_SOP          = 0x000001e9,
PH_PERF_SEL_SC4_ARB_EOP_POP_SYNC_POP     = 0x000001ea,
PH_PERF_SEL_SC4_ARB_EVENT_SYNC_POP       = 0x000001eb,
PH_PERF_SEL_SC4_PS_ENG_MULTICYCLE_BUBBLE = 0x000001ec,
PH_PERF_SEL_SC4_EOP_SYNC_WINDOW          = 0x000001ed,
PH_PERF_SEL_SC4_BUSY_PROCESSING_MULTICYCLE_PRIM = 0x000001ee,
PH_PERF_SEL_SC4_BUSY_CNT_NOT_ZERO        = 0x000001ef,
PH_PERF_SEL_SC4_SEND                     = 0x000001f0,
PH_PERF_SEL_SC4_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x000001f1,
PH_PERF_SEL_SC4_CREDIT_AT_MAX            = 0x000001f2,
PH_PERF_SEL_SC4_CREDIT_AT_MAX_NO_PENDING_SEND = 0x000001f3,
PH_PERF_SEL_SC4_GFX_PIPE0_TO_1_TRANSITION = 0x000001f4,
PH_PERF_SEL_SC4_GFX_PIPE1_TO_0_TRANSITION = 0x000001f5,
PH_PERF_SEL_SC4_GFX_PIPE_EOP_PRIM_PROVOKED_TRANSITION = 0x000001f6,
PH_PERF_SEL_SC4_GFX_PIPE_EVENT_PROVOKED_TRANSITION = 0x000001f7,
PH_PERF_SEL_SC4_PA0_DATA_FIFO_RD         = 0x000001f8,
PH_PERF_SEL_SC4_PA0_DATA_FIFO_WE         = 0x000001f9,
PH_PERF_SEL_SC4_PA0_FIFO_EMPTY           = 0x000001fa,
PH_PERF_SEL_SC4_PA0_FIFO_FULL            = 0x000001fb,
PH_PERF_SEL_SC4_PA0_NULL_WE              = 0x000001fc,
PH_PERF_SEL_SC4_PA0_EVENT_WE             = 0x000001fd,
PH_PERF_SEL_SC4_PA0_FPOV_WE              = 0x000001fe,
PH_PERF_SEL_SC4_PA0_LPOV_WE              = 0x000001ff,
PH_PERF_SEL_SC4_PA0_EOP_WE               = 0x00000200,
PH_PERF_SEL_SC4_PA0_DATA_FIFO_EOP_RD     = 0x00000201,
PH_PERF_SEL_SC4_PA0_EOPG_WE              = 0x00000202,
PH_PERF_SEL_SC4_PA0_DEALLOC_4_0_RD       = 0x00000203,
PH_PERF_SEL_SC4_PA1_DATA_FIFO_RD         = 0x00000204,
PH_PERF_SEL_SC4_PA1_DATA_FIFO_WE         = 0x00000205,
PH_PERF_SEL_SC4_PA1_FIFO_EMPTY           = 0x00000206,
PH_PERF_SEL_SC4_PA1_FIFO_FULL            = 0x00000207,
PH_PERF_SEL_SC4_PA1_NULL_WE              = 0x00000208,
PH_PERF_SEL_SC4_PA1_EVENT_WE             = 0x00000209,
PH_PERF_SEL_SC4_PA1_FPOV_WE              = 0x0000020a,
PH_PERF_SEL_SC4_PA1_LPOV_WE              = 0x0000020b,
PH_PERF_SEL_SC4_PA1_EOP_WE               = 0x0000020c,
PH_PERF_SEL_SC4_PA1_DATA_FIFO_EOP_RD     = 0x0000020d,
PH_PERF_SEL_SC4_PA1_EOPG_WE              = 0x0000020e,
PH_PERF_SEL_SC4_PA1_DEALLOC_4_0_RD       = 0x0000020f,
PH_PERF_SEL_SC4_PA2_DATA_FIFO_RD         = 0x00000210,
PH_PERF_SEL_SC4_PA2_DATA_FIFO_WE         = 0x00000211,
PH_PERF_SEL_SC4_PA2_FIFO_EMPTY           = 0x00000212,
PH_PERF_SEL_SC4_PA2_FIFO_FULL            = 0x00000213,
PH_PERF_SEL_SC4_PA2_NULL_WE              = 0x00000214,
PH_PERF_SEL_SC4_PA2_EVENT_WE             = 0x00000215,
PH_PERF_SEL_SC4_PA2_FPOV_WE              = 0x00000216,
PH_PERF_SEL_SC4_PA2_LPOV_WE              = 0x00000217,
PH_PERF_SEL_SC4_PA2_EOP_WE               = 0x00000218,
PH_PERF_SEL_SC4_PA2_DATA_FIFO_EOP_RD     = 0x00000219,
PH_PERF_SEL_SC4_PA2_EOPG_WE              = 0x0000021a,
PH_PERF_SEL_SC4_PA2_DEALLOC_4_0_RD       = 0x0000021b,
PH_PERF_SEL_SC4_PA3_DATA_FIFO_RD         = 0x0000021c,
PH_PERF_SEL_SC4_PA3_DATA_FIFO_WE         = 0x0000021d,
PH_PERF_SEL_SC4_PA3_FIFO_EMPTY           = 0x0000021e,
PH_PERF_SEL_SC4_PA3_FIFO_FULL            = 0x0000021f,
PH_PERF_SEL_SC4_PA3_NULL_WE              = 0x00000220,
PH_PERF_SEL_SC4_PA3_EVENT_WE             = 0x00000221,
PH_PERF_SEL_SC4_PA3_FPOV_WE              = 0x00000222,
PH_PERF_SEL_SC4_PA3_LPOV_WE              = 0x00000223,
PH_PERF_SEL_SC4_PA3_EOP_WE               = 0x00000224,
PH_PERF_SEL_SC4_PA3_DATA_FIFO_EOP_RD     = 0x00000225,
PH_PERF_SEL_SC4_PA3_EOPG_WE              = 0x00000226,
PH_PERF_SEL_SC4_PA3_DEALLOC_4_0_RD       = 0x00000227,
PH_PERF_SEL_SC4_PA4_DATA_FIFO_RD         = 0x00000228,
PH_PERF_SEL_SC4_PA4_DATA_FIFO_WE         = 0x00000229,
PH_PERF_SEL_SC4_PA4_FIFO_EMPTY           = 0x0000022a,
PH_PERF_SEL_SC4_PA4_FIFO_FULL            = 0x0000022b,
PH_PERF_SEL_SC4_PA4_NULL_WE              = 0x0000022c,
PH_PERF_SEL_SC4_PA4_EVENT_WE             = 0x0000022d,
PH_PERF_SEL_SC4_PA4_FPOV_WE              = 0x0000022e,
PH_PERF_SEL_SC4_PA4_LPOV_WE              = 0x0000022f,
PH_PERF_SEL_SC4_PA4_EOP_WE               = 0x00000230,
PH_PERF_SEL_SC4_PA4_DATA_FIFO_EOP_RD     = 0x00000231,
PH_PERF_SEL_SC4_PA4_EOPG_WE              = 0x00000232,
PH_PERF_SEL_SC4_PA4_DEALLOC_4_0_RD       = 0x00000233,
PH_PERF_SEL_SC4_PA5_DATA_FIFO_RD         = 0x00000234,
PH_PERF_SEL_SC4_PA5_DATA_FIFO_WE         = 0x00000235,
PH_PERF_SEL_SC4_PA5_FIFO_EMPTY           = 0x00000236,
PH_PERF_SEL_SC4_PA5_FIFO_FULL            = 0x00000237,
PH_PERF_SEL_SC4_PA5_NULL_WE              = 0x00000238,
PH_PERF_SEL_SC4_PA5_EVENT_WE             = 0x00000239,
PH_PERF_SEL_SC4_PA5_FPOV_WE              = 0x0000023a,
PH_PERF_SEL_SC4_PA5_LPOV_WE              = 0x0000023b,
PH_PERF_SEL_SC4_PA5_EOP_WE               = 0x0000023c,
PH_PERF_SEL_SC4_PA5_DATA_FIFO_EOP_RD     = 0x0000023d,
PH_PERF_SEL_SC4_PA5_EOPG_WE              = 0x0000023e,
PH_PERF_SEL_SC4_PA5_DEALLOC_4_0_RD       = 0x0000023f,
PH_PERF_SEL_SC4_PA6_DATA_FIFO_RD         = 0x00000240,
PH_PERF_SEL_SC4_PA6_DATA_FIFO_WE         = 0x00000241,
PH_PERF_SEL_SC4_PA6_FIFO_EMPTY           = 0x00000242,
PH_PERF_SEL_SC4_PA6_FIFO_FULL            = 0x00000243,
PH_PERF_SEL_SC4_PA6_NULL_WE              = 0x00000244,
PH_PERF_SEL_SC4_PA6_EVENT_WE             = 0x00000245,
PH_PERF_SEL_SC4_PA6_FPOV_WE              = 0x00000246,
PH_PERF_SEL_SC4_PA6_LPOV_WE              = 0x00000247,
PH_PERF_SEL_SC4_PA6_EOP_WE               = 0x00000248,
PH_PERF_SEL_SC4_PA6_DATA_FIFO_EOP_RD     = 0x00000249,
PH_PERF_SEL_SC4_PA6_EOPG_WE              = 0x0000024a,
PH_PERF_SEL_SC4_PA6_DEALLOC_4_0_RD       = 0x0000024b,
PH_PERF_SEL_SC4_PA7_DATA_FIFO_RD         = 0x0000024c,
PH_PERF_SEL_SC4_PA7_DATA_FIFO_WE         = 0x0000024d,
PH_PERF_SEL_SC4_PA7_FIFO_EMPTY           = 0x0000024e,
PH_PERF_SEL_SC4_PA7_FIFO_FULL            = 0x0000024f,
PH_PERF_SEL_SC4_PA7_NULL_WE              = 0x00000250,
PH_PERF_SEL_SC4_PA7_EVENT_WE             = 0x00000251,
PH_PERF_SEL_SC4_PA7_FPOV_WE              = 0x00000252,
PH_PERF_SEL_SC4_PA7_LPOV_WE              = 0x00000253,
PH_PERF_SEL_SC4_PA7_EOP_WE               = 0x00000254,
PH_PERF_SEL_SC4_PA7_DATA_FIFO_EOP_RD     = 0x00000255,
PH_PERF_SEL_SC4_PA7_EOPG_WE              = 0x00000256,
PH_PERF_SEL_SC4_PA7_DEALLOC_4_0_RD       = 0x00000257,
PH_PERF_SEL_SC5_SRPS_WINDOW_VALID        = 0x00000258,
PH_PERF_SEL_SC5_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES = 0x00000259,
PH_PERF_SEL_SC5_ARB_XFC_ONLY_PRIM_CYCLES = 0x0000025a,
PH_PERF_SEL_SC5_ARB_XFC_ONLY_ONE_INC_PER_PRIM = 0x0000025b,
PH_PERF_SEL_SC5_ARB_STALLED_FROM_BELOW   = 0x0000025c,
PH_PERF_SEL_SC5_ARB_STARVED_FROM_ABOVE   = 0x0000025d,
PH_PERF_SEL_SC5_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x0000025e,
PH_PERF_SEL_SC5_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x0000025f,
PH_PERF_SEL_SC5_ARB_BUSY                 = 0x00000260,
PH_PERF_SEL_SC5_ARB_PA_BUSY_SOP          = 0x00000261,
PH_PERF_SEL_SC5_ARB_EOP_POP_SYNC_POP     = 0x00000262,
PH_PERF_SEL_SC5_ARB_EVENT_SYNC_POP       = 0x00000263,
PH_PERF_SEL_SC5_PS_ENG_MULTICYCLE_BUBBLE = 0x00000264,
PH_PERF_SEL_SC5_EOP_SYNC_WINDOW          = 0x00000265,
PH_PERF_SEL_SC5_BUSY_PROCESSING_MULTICYCLE_PRIM = 0x00000266,
PH_PERF_SEL_SC5_BUSY_CNT_NOT_ZERO        = 0x00000267,
PH_PERF_SEL_SC5_SEND                     = 0x00000268,
PH_PERF_SEL_SC5_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x00000269,
PH_PERF_SEL_SC5_CREDIT_AT_MAX            = 0x0000026a,
PH_PERF_SEL_SC5_CREDIT_AT_MAX_NO_PENDING_SEND = 0x0000026b,
PH_PERF_SEL_SC5_GFX_PIPE0_TO_1_TRANSITION = 0x0000026c,
PH_PERF_SEL_SC5_GFX_PIPE1_TO_0_TRANSITION = 0x0000026d,
PH_PERF_SEL_SC5_GFX_PIPE_EOP_PRIM_PROVOKED_TRANSITION = 0x0000026e,
PH_PERF_SEL_SC5_GFX_PIPE_EVENT_PROVOKED_TRANSITION = 0x0000026f,
PH_PERF_SEL_SC5_PA0_DATA_FIFO_RD         = 0x00000270,
PH_PERF_SEL_SC5_PA0_DATA_FIFO_WE         = 0x00000271,
PH_PERF_SEL_SC5_PA0_FIFO_EMPTY           = 0x00000272,
PH_PERF_SEL_SC5_PA0_FIFO_FULL            = 0x00000273,
PH_PERF_SEL_SC5_PA0_NULL_WE              = 0x00000274,
PH_PERF_SEL_SC5_PA0_EVENT_WE             = 0x00000275,
PH_PERF_SEL_SC5_PA0_FPOV_WE              = 0x00000276,
PH_PERF_SEL_SC5_PA0_LPOV_WE              = 0x00000277,
PH_PERF_SEL_SC5_PA0_EOP_WE               = 0x00000278,
PH_PERF_SEL_SC5_PA0_DATA_FIFO_EOP_RD     = 0x00000279,
PH_PERF_SEL_SC5_PA0_EOPG_WE              = 0x0000027a,
PH_PERF_SEL_SC5_PA0_DEALLOC_4_0_RD       = 0x0000027b,
PH_PERF_SEL_SC5_PA1_DATA_FIFO_RD         = 0x0000027c,
PH_PERF_SEL_SC5_PA1_DATA_FIFO_WE         = 0x0000027d,
PH_PERF_SEL_SC5_PA1_FIFO_EMPTY           = 0x0000027e,
PH_PERF_SEL_SC5_PA1_FIFO_FULL            = 0x0000027f,
PH_PERF_SEL_SC5_PA1_NULL_WE              = 0x00000280,
PH_PERF_SEL_SC5_PA1_EVENT_WE             = 0x00000281,
PH_PERF_SEL_SC5_PA1_FPOV_WE              = 0x00000282,
PH_PERF_SEL_SC5_PA1_LPOV_WE              = 0x00000283,
PH_PERF_SEL_SC5_PA1_EOP_WE               = 0x00000284,
PH_PERF_SEL_SC5_PA1_DATA_FIFO_EOP_RD     = 0x00000285,
PH_PERF_SEL_SC5_PA1_EOPG_WE              = 0x00000286,
PH_PERF_SEL_SC5_PA1_DEALLOC_4_0_RD       = 0x00000287,
PH_PERF_SEL_SC5_PA2_DATA_FIFO_RD         = 0x00000288,
PH_PERF_SEL_SC5_PA2_DATA_FIFO_WE         = 0x00000289,
PH_PERF_SEL_SC5_PA2_FIFO_EMPTY           = 0x0000028a,
PH_PERF_SEL_SC5_PA2_FIFO_FULL            = 0x0000028b,
PH_PERF_SEL_SC5_PA2_NULL_WE              = 0x0000028c,
PH_PERF_SEL_SC5_PA2_EVENT_WE             = 0x0000028d,
PH_PERF_SEL_SC5_PA2_FPOV_WE              = 0x0000028e,
PH_PERF_SEL_SC5_PA2_LPOV_WE              = 0x0000028f,
PH_PERF_SEL_SC5_PA2_EOP_WE               = 0x00000290,
PH_PERF_SEL_SC5_PA2_DATA_FIFO_EOP_RD     = 0x00000291,
PH_PERF_SEL_SC5_PA2_EOPG_WE              = 0x00000292,
PH_PERF_SEL_SC5_PA2_DEALLOC_4_0_RD       = 0x00000293,
PH_PERF_SEL_SC5_PA3_DATA_FIFO_RD         = 0x00000294,
PH_PERF_SEL_SC5_PA3_DATA_FIFO_WE         = 0x00000295,
PH_PERF_SEL_SC5_PA3_FIFO_EMPTY           = 0x00000296,
PH_PERF_SEL_SC5_PA3_FIFO_FULL            = 0x00000297,
PH_PERF_SEL_SC5_PA3_NULL_WE              = 0x00000298,
PH_PERF_SEL_SC5_PA3_EVENT_WE             = 0x00000299,
PH_PERF_SEL_SC5_PA3_FPOV_WE              = 0x0000029a,
PH_PERF_SEL_SC5_PA3_LPOV_WE              = 0x0000029b,
PH_PERF_SEL_SC5_PA3_EOP_WE               = 0x0000029c,
PH_PERF_SEL_SC5_PA3_DATA_FIFO_EOP_RD     = 0x0000029d,
PH_PERF_SEL_SC5_PA3_EOPG_WE              = 0x0000029e,
PH_PERF_SEL_SC5_PA3_DEALLOC_4_0_RD       = 0x0000029f,
PH_PERF_SEL_SC5_PA4_DATA_FIFO_RD         = 0x000002a0,
PH_PERF_SEL_SC5_PA4_DATA_FIFO_WE         = 0x000002a1,
PH_PERF_SEL_SC5_PA4_FIFO_EMPTY           = 0x000002a2,
PH_PERF_SEL_SC5_PA4_FIFO_FULL            = 0x000002a3,
PH_PERF_SEL_SC5_PA4_NULL_WE              = 0x000002a4,
PH_PERF_SEL_SC5_PA4_EVENT_WE             = 0x000002a5,
PH_PERF_SEL_SC5_PA4_FPOV_WE              = 0x000002a6,
PH_PERF_SEL_SC5_PA4_LPOV_WE              = 0x000002a7,
PH_PERF_SEL_SC5_PA4_EOP_WE               = 0x000002a8,
PH_PERF_SEL_SC5_PA4_DATA_FIFO_EOP_RD     = 0x000002a9,
PH_PERF_SEL_SC5_PA4_EOPG_WE              = 0x000002aa,
PH_PERF_SEL_SC5_PA4_DEALLOC_4_0_RD       = 0x000002ab,
PH_PERF_SEL_SC5_PA5_DATA_FIFO_RD         = 0x000002ac,
PH_PERF_SEL_SC5_PA5_DATA_FIFO_WE         = 0x000002ad,
PH_PERF_SEL_SC5_PA5_FIFO_EMPTY           = 0x000002ae,
PH_PERF_SEL_SC5_PA5_FIFO_FULL            = 0x000002af,
PH_PERF_SEL_SC5_PA5_NULL_WE              = 0x000002b0,
PH_PERF_SEL_SC5_PA5_EVENT_WE             = 0x000002b1,
PH_PERF_SEL_SC5_PA5_FPOV_WE              = 0x000002b2,
PH_PERF_SEL_SC5_PA5_LPOV_WE              = 0x000002b3,
PH_PERF_SEL_SC5_PA5_EOP_WE               = 0x000002b4,
PH_PERF_SEL_SC5_PA5_DATA_FIFO_EOP_RD     = 0x000002b5,
PH_PERF_SEL_SC5_PA5_EOPG_WE              = 0x000002b6,
PH_PERF_SEL_SC5_PA5_DEALLOC_4_0_RD       = 0x000002b7,
PH_PERF_SEL_SC5_PA6_DATA_FIFO_RD         = 0x000002b8,
PH_PERF_SEL_SC5_PA6_DATA_FIFO_WE         = 0x000002b9,
PH_PERF_SEL_SC5_PA6_FIFO_EMPTY           = 0x000002ba,
PH_PERF_SEL_SC5_PA6_FIFO_FULL            = 0x000002bb,
PH_PERF_SEL_SC5_PA6_NULL_WE              = 0x000002bc,
PH_PERF_SEL_SC5_PA6_EVENT_WE             = 0x000002bd,
PH_PERF_SEL_SC5_PA6_FPOV_WE              = 0x000002be,
PH_PERF_SEL_SC5_PA6_LPOV_WE              = 0x000002bf,
PH_PERF_SEL_SC5_PA6_EOP_WE               = 0x000002c0,
PH_PERF_SEL_SC5_PA6_DATA_FIFO_EOP_RD     = 0x000002c1,
PH_PERF_SEL_SC5_PA6_EOPG_WE              = 0x000002c2,
PH_PERF_SEL_SC5_PA6_DEALLOC_4_0_RD       = 0x000002c3,
PH_PERF_SEL_SC5_PA7_DATA_FIFO_RD         = 0x000002c4,
PH_PERF_SEL_SC5_PA7_DATA_FIFO_WE         = 0x000002c5,
PH_PERF_SEL_SC5_PA7_FIFO_EMPTY           = 0x000002c6,
PH_PERF_SEL_SC5_PA7_FIFO_FULL            = 0x000002c7,
PH_PERF_SEL_SC5_PA7_NULL_WE              = 0x000002c8,
PH_PERF_SEL_SC5_PA7_EVENT_WE             = 0x000002c9,
PH_PERF_SEL_SC5_PA7_FPOV_WE              = 0x000002ca,
PH_PERF_SEL_SC5_PA7_LPOV_WE              = 0x000002cb,
PH_PERF_SEL_SC5_PA7_EOP_WE               = 0x000002cc,
PH_PERF_SEL_SC5_PA7_DATA_FIFO_EOP_RD     = 0x000002cd,
PH_PERF_SEL_SC5_PA7_EOPG_WE              = 0x000002ce,
PH_PERF_SEL_SC5_PA7_DEALLOC_4_0_RD       = 0x000002cf,
PH_PERF_SEL_SC6_SRPS_WINDOW_VALID        = 0x000002d0,
PH_PERF_SEL_SC6_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES = 0x000002d1,
PH_PERF_SEL_SC6_ARB_XFC_ONLY_PRIM_CYCLES = 0x000002d2,
PH_PERF_SEL_SC6_ARB_XFC_ONLY_ONE_INC_PER_PRIM = 0x000002d3,
PH_PERF_SEL_SC6_ARB_STALLED_FROM_BELOW   = 0x000002d4,
PH_PERF_SEL_SC6_ARB_STARVED_FROM_ABOVE   = 0x000002d5,
PH_PERF_SEL_SC6_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000002d6,
PH_PERF_SEL_SC6_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000002d7,
PH_PERF_SEL_SC6_ARB_BUSY                 = 0x000002d8,
PH_PERF_SEL_SC6_ARB_PA_BUSY_SOP          = 0x000002d9,
PH_PERF_SEL_SC6_ARB_EOP_POP_SYNC_POP     = 0x000002da,
PH_PERF_SEL_SC6_ARB_EVENT_SYNC_POP       = 0x000002db,
PH_PERF_SEL_SC6_PS_ENG_MULTICYCLE_BUBBLE = 0x000002dc,
PH_PERF_SEL_SC6_EOP_SYNC_WINDOW          = 0x000002dd,
PH_PERF_SEL_SC6_BUSY_PROCESSING_MULTICYCLE_PRIM = 0x000002de,
PH_PERF_SEL_SC6_BUSY_CNT_NOT_ZERO        = 0x000002df,
PH_PERF_SEL_SC6_SEND                     = 0x000002e0,
PH_PERF_SEL_SC6_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x000002e1,
PH_PERF_SEL_SC6_CREDIT_AT_MAX            = 0x000002e2,
PH_PERF_SEL_SC6_CREDIT_AT_MAX_NO_PENDING_SEND = 0x000002e3,
PH_PERF_SEL_SC6_GFX_PIPE0_TO_1_TRANSITION = 0x000002e4,
PH_PERF_SEL_SC6_GFX_PIPE1_TO_0_TRANSITION = 0x000002e5,
PH_PERF_SEL_SC6_GFX_PIPE_EOP_PRIM_PROVOKED_TRANSITION = 0x000002e6,
PH_PERF_SEL_SC6_GFX_PIPE_EVENT_PROVOKED_TRANSITION = 0x000002e7,
PH_PERF_SEL_SC6_PA0_DATA_FIFO_RD         = 0x000002e8,
PH_PERF_SEL_SC6_PA0_DATA_FIFO_WE         = 0x000002e9,
PH_PERF_SEL_SC6_PA0_FIFO_EMPTY           = 0x000002ea,
PH_PERF_SEL_SC6_PA0_FIFO_FULL            = 0x000002eb,
PH_PERF_SEL_SC6_PA0_NULL_WE              = 0x000002ec,
PH_PERF_SEL_SC6_PA0_EVENT_WE             = 0x000002ed,
PH_PERF_SEL_SC6_PA0_FPOV_WE              = 0x000002ee,
PH_PERF_SEL_SC6_PA0_LPOV_WE              = 0x000002ef,
PH_PERF_SEL_SC6_PA0_EOP_WE               = 0x000002f0,
PH_PERF_SEL_SC6_PA0_DATA_FIFO_EOP_RD     = 0x000002f1,
PH_PERF_SEL_SC6_PA0_EOPG_WE              = 0x000002f2,
PH_PERF_SEL_SC6_PA0_DEALLOC_4_0_RD       = 0x000002f3,
PH_PERF_SEL_SC6_PA1_DATA_FIFO_RD         = 0x000002f4,
PH_PERF_SEL_SC6_PA1_DATA_FIFO_WE         = 0x000002f5,
PH_PERF_SEL_SC6_PA1_FIFO_EMPTY           = 0x000002f6,
PH_PERF_SEL_SC6_PA1_FIFO_FULL            = 0x000002f7,
PH_PERF_SEL_SC6_PA1_NULL_WE              = 0x000002f8,
PH_PERF_SEL_SC6_PA1_EVENT_WE             = 0x000002f9,
PH_PERF_SEL_SC6_PA1_FPOV_WE              = 0x000002fa,
PH_PERF_SEL_SC6_PA1_LPOV_WE              = 0x000002fb,
PH_PERF_SEL_SC6_PA1_EOP_WE               = 0x000002fc,
PH_PERF_SEL_SC6_PA1_DATA_FIFO_EOP_RD     = 0x000002fd,
PH_PERF_SEL_SC6_PA1_EOPG_WE              = 0x000002fe,
PH_PERF_SEL_SC6_PA1_DEALLOC_4_0_RD       = 0x000002ff,
PH_PERF_SEL_SC6_PA2_DATA_FIFO_RD         = 0x00000300,
PH_PERF_SEL_SC6_PA2_DATA_FIFO_WE         = 0x00000301,
PH_PERF_SEL_SC6_PA2_FIFO_EMPTY           = 0x00000302,
PH_PERF_SEL_SC6_PA2_FIFO_FULL            = 0x00000303,
PH_PERF_SEL_SC6_PA2_NULL_WE              = 0x00000304,
PH_PERF_SEL_SC6_PA2_EVENT_WE             = 0x00000305,
PH_PERF_SEL_SC6_PA2_FPOV_WE              = 0x00000306,
PH_PERF_SEL_SC6_PA2_LPOV_WE              = 0x00000307,
PH_PERF_SEL_SC6_PA2_EOP_WE               = 0x00000308,
PH_PERF_SEL_SC6_PA2_DATA_FIFO_EOP_RD     = 0x00000309,
PH_PERF_SEL_SC6_PA2_EOPG_WE              = 0x0000030a,
PH_PERF_SEL_SC6_PA2_DEALLOC_4_0_RD       = 0x0000030b,
PH_PERF_SEL_SC6_PA3_DATA_FIFO_RD         = 0x0000030c,
PH_PERF_SEL_SC6_PA3_DATA_FIFO_WE         = 0x0000030d,
PH_PERF_SEL_SC6_PA3_FIFO_EMPTY           = 0x0000030e,
PH_PERF_SEL_SC6_PA3_FIFO_FULL            = 0x0000030f,
PH_PERF_SEL_SC6_PA3_NULL_WE              = 0x00000310,
PH_PERF_SEL_SC6_PA3_EVENT_WE             = 0x00000311,
PH_PERF_SEL_SC6_PA3_FPOV_WE              = 0x00000312,
PH_PERF_SEL_SC6_PA3_LPOV_WE              = 0x00000313,
PH_PERF_SEL_SC6_PA3_EOP_WE               = 0x00000314,
PH_PERF_SEL_SC6_PA3_DATA_FIFO_EOP_RD     = 0x00000315,
PH_PERF_SEL_SC6_PA3_EOPG_WE              = 0x00000316,
PH_PERF_SEL_SC6_PA3_DEALLOC_4_0_RD       = 0x00000317,
PH_PERF_SEL_SC6_PA4_DATA_FIFO_RD         = 0x00000318,
PH_PERF_SEL_SC6_PA4_DATA_FIFO_WE         = 0x00000319,
PH_PERF_SEL_SC6_PA4_FIFO_EMPTY           = 0x0000031a,
PH_PERF_SEL_SC6_PA4_FIFO_FULL            = 0x0000031b,
PH_PERF_SEL_SC6_PA4_NULL_WE              = 0x0000031c,
PH_PERF_SEL_SC6_PA4_EVENT_WE             = 0x0000031d,
PH_PERF_SEL_SC6_PA4_FPOV_WE              = 0x0000031e,
PH_PERF_SEL_SC6_PA4_LPOV_WE              = 0x0000031f,
PH_PERF_SEL_SC6_PA4_EOP_WE               = 0x00000320,
PH_PERF_SEL_SC6_PA4_DATA_FIFO_EOP_RD     = 0x00000321,
PH_PERF_SEL_SC6_PA4_EOPG_WE              = 0x00000322,
PH_PERF_SEL_SC6_PA4_DEALLOC_4_0_RD       = 0x00000323,
PH_PERF_SEL_SC6_PA5_DATA_FIFO_RD         = 0x00000324,
PH_PERF_SEL_SC6_PA5_DATA_FIFO_WE         = 0x00000325,
PH_PERF_SEL_SC6_PA5_FIFO_EMPTY           = 0x00000326,
PH_PERF_SEL_SC6_PA5_FIFO_FULL            = 0x00000327,
PH_PERF_SEL_SC6_PA5_NULL_WE              = 0x00000328,
PH_PERF_SEL_SC6_PA5_EVENT_WE             = 0x00000329,
PH_PERF_SEL_SC6_PA5_FPOV_WE              = 0x0000032a,
PH_PERF_SEL_SC6_PA5_LPOV_WE              = 0x0000032b,
PH_PERF_SEL_SC6_PA5_EOP_WE               = 0x0000032c,
PH_PERF_SEL_SC6_PA5_DATA_FIFO_EOP_RD     = 0x0000032d,
PH_PERF_SEL_SC6_PA5_EOPG_WE              = 0x0000032e,
PH_PERF_SEL_SC6_PA5_DEALLOC_4_0_RD       = 0x0000032f,
PH_PERF_SEL_SC6_PA6_DATA_FIFO_RD         = 0x00000330,
PH_PERF_SEL_SC6_PA6_DATA_FIFO_WE         = 0x00000331,
PH_PERF_SEL_SC6_PA6_FIFO_EMPTY           = 0x00000332,
PH_PERF_SEL_SC6_PA6_FIFO_FULL            = 0x00000333,
PH_PERF_SEL_SC6_PA6_NULL_WE              = 0x00000334,
PH_PERF_SEL_SC6_PA6_EVENT_WE             = 0x00000335,
PH_PERF_SEL_SC6_PA6_FPOV_WE              = 0x00000336,
PH_PERF_SEL_SC6_PA6_LPOV_WE              = 0x00000337,
PH_PERF_SEL_SC6_PA6_EOP_WE               = 0x00000338,
PH_PERF_SEL_SC6_PA6_DATA_FIFO_EOP_RD     = 0x00000339,
PH_PERF_SEL_SC6_PA6_EOPG_WE              = 0x0000033a,
PH_PERF_SEL_SC6_PA6_DEALLOC_4_0_RD       = 0x0000033b,
PH_PERF_SEL_SC6_PA7_DATA_FIFO_RD         = 0x0000033c,
PH_PERF_SEL_SC6_PA7_DATA_FIFO_WE         = 0x0000033d,
PH_PERF_SEL_SC6_PA7_FIFO_EMPTY           = 0x0000033e,
PH_PERF_SEL_SC6_PA7_FIFO_FULL            = 0x0000033f,
PH_PERF_SEL_SC6_PA7_NULL_WE              = 0x00000340,
PH_PERF_SEL_SC6_PA7_EVENT_WE             = 0x00000341,
PH_PERF_SEL_SC6_PA7_FPOV_WE              = 0x00000342,
PH_PERF_SEL_SC6_PA7_LPOV_WE              = 0x00000343,
PH_PERF_SEL_SC6_PA7_EOP_WE               = 0x00000344,
PH_PERF_SEL_SC6_PA7_DATA_FIFO_EOP_RD     = 0x00000345,
PH_PERF_SEL_SC6_PA7_EOPG_WE              = 0x00000346,
PH_PERF_SEL_SC6_PA7_DEALLOC_4_0_RD       = 0x00000347,
PH_PERF_SEL_SC7_SRPS_WINDOW_VALID        = 0x00000348,
PH_PERF_SEL_SC7_ARB_XFC_ALL_EVENT_OR_PRIM_CYCLES = 0x00000349,
PH_PERF_SEL_SC7_ARB_XFC_ONLY_PRIM_CYCLES = 0x0000034a,
PH_PERF_SEL_SC7_ARB_XFC_ONLY_ONE_INC_PER_PRIM = 0x0000034b,
PH_PERF_SEL_SC7_ARB_STALLED_FROM_BELOW   = 0x0000034c,
PH_PERF_SEL_SC7_ARB_STARVED_FROM_ABOVE   = 0x0000034d,
PH_PERF_SEL_SC7_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x0000034e,
PH_PERF_SEL_SC7_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x0000034f,
PH_PERF_SEL_SC7_ARB_BUSY                 = 0x00000350,
PH_PERF_SEL_SC7_ARB_PA_BUSY_SOP          = 0x00000351,
PH_PERF_SEL_SC7_ARB_EOP_POP_SYNC_POP     = 0x00000352,
PH_PERF_SEL_SC7_ARB_EVENT_SYNC_POP       = 0x00000353,
PH_PERF_SEL_SC7_PS_ENG_MULTICYCLE_BUBBLE = 0x00000354,
PH_PERF_SEL_SC7_EOP_SYNC_WINDOW          = 0x00000355,
PH_PERF_SEL_SC7_BUSY_PROCESSING_MULTICYCLE_PRIM = 0x00000356,
PH_PERF_SEL_SC7_BUSY_CNT_NOT_ZERO        = 0x00000357,
PH_PERF_SEL_SC7_SEND                     = 0x00000358,
PH_PERF_SEL_SC7_CREDIT_AT_ZERO_WITH_PENDING_SEND = 0x00000359,
PH_PERF_SEL_SC7_CREDIT_AT_MAX            = 0x0000035a,
PH_PERF_SEL_SC7_CREDIT_AT_MAX_NO_PENDING_SEND = 0x0000035b,
PH_PERF_SEL_SC7_GFX_PIPE0_TO_1_TRANSITION = 0x0000035c,
PH_PERF_SEL_SC7_GFX_PIPE1_TO_0_TRANSITION = 0x0000035d,
PH_PERF_SEL_SC7_GFX_PIPE_EOP_PRIM_PROVOKED_TRANSITION = 0x0000035e,
PH_PERF_SEL_SC7_GFX_PIPE_EVENT_PROVOKED_TRANSITION = 0x0000035f,
PH_PERF_SEL_SC7_PA0_DATA_FIFO_RD         = 0x00000360,
PH_PERF_SEL_SC7_PA0_DATA_FIFO_WE         = 0x00000361,
PH_PERF_SEL_SC7_PA0_FIFO_EMPTY           = 0x00000362,
PH_PERF_SEL_SC7_PA0_FIFO_FULL            = 0x00000363,
PH_PERF_SEL_SC7_PA0_NULL_WE              = 0x00000364,
PH_PERF_SEL_SC7_PA0_EVENT_WE             = 0x00000365,
PH_PERF_SEL_SC7_PA0_FPOV_WE              = 0x00000366,
PH_PERF_SEL_SC7_PA0_LPOV_WE              = 0x00000367,
PH_PERF_SEL_SC7_PA0_EOP_WE               = 0x00000368,
PH_PERF_SEL_SC7_PA0_DATA_FIFO_EOP_RD     = 0x00000369,
PH_PERF_SEL_SC7_PA0_EOPG_WE              = 0x0000036a,
PH_PERF_SEL_SC7_PA0_DEALLOC_4_0_RD       = 0x0000036b,
PH_PERF_SEL_SC7_PA1_DATA_FIFO_RD         = 0x0000036c,
PH_PERF_SEL_SC7_PA1_DATA_FIFO_WE         = 0x0000036d,
PH_PERF_SEL_SC7_PA1_FIFO_EMPTY           = 0x0000036e,
PH_PERF_SEL_SC7_PA1_FIFO_FULL            = 0x0000036f,
PH_PERF_SEL_SC7_PA1_NULL_WE              = 0x00000370,
PH_PERF_SEL_SC7_PA1_EVENT_WE             = 0x00000371,
PH_PERF_SEL_SC7_PA1_FPOV_WE              = 0x00000372,
PH_PERF_SEL_SC7_PA1_LPOV_WE              = 0x00000373,
PH_PERF_SEL_SC7_PA1_EOP_WE               = 0x00000374,
PH_PERF_SEL_SC7_PA1_DATA_FIFO_EOP_RD     = 0x00000375,
PH_PERF_SEL_SC7_PA1_EOPG_WE              = 0x00000376,
PH_PERF_SEL_SC7_PA1_DEALLOC_4_0_RD       = 0x00000377,
PH_PERF_SEL_SC7_PA2_DATA_FIFO_RD         = 0x00000378,
PH_PERF_SEL_SC7_PA2_DATA_FIFO_WE         = 0x00000379,
PH_PERF_SEL_SC7_PA2_FIFO_EMPTY           = 0x0000037a,
PH_PERF_SEL_SC7_PA2_FIFO_FULL            = 0x0000037b,
PH_PERF_SEL_SC7_PA2_NULL_WE              = 0x0000037c,
PH_PERF_SEL_SC7_PA2_EVENT_WE             = 0x0000037d,
PH_PERF_SEL_SC7_PA2_FPOV_WE              = 0x0000037e,
PH_PERF_SEL_SC7_PA2_LPOV_WE              = 0x0000037f,
PH_PERF_SEL_SC7_PA2_EOP_WE               = 0x00000380,
PH_PERF_SEL_SC7_PA2_DATA_FIFO_EOP_RD     = 0x00000381,
PH_PERF_SEL_SC7_PA2_EOPG_WE              = 0x00000382,
PH_PERF_SEL_SC7_PA2_DEALLOC_4_0_RD       = 0x00000383,
PH_PERF_SEL_SC7_PA3_DATA_FIFO_RD         = 0x00000384,
PH_PERF_SEL_SC7_PA3_DATA_FIFO_WE         = 0x00000385,
PH_PERF_SEL_SC7_PA3_FIFO_EMPTY           = 0x00000386,
PH_PERF_SEL_SC7_PA3_FIFO_FULL            = 0x00000387,
PH_PERF_SEL_SC7_PA3_NULL_WE              = 0x00000388,
PH_PERF_SEL_SC7_PA3_EVENT_WE             = 0x00000389,
PH_PERF_SEL_SC7_PA3_FPOV_WE              = 0x0000038a,
PH_PERF_SEL_SC7_PA3_LPOV_WE              = 0x0000038b,
PH_PERF_SEL_SC7_PA3_EOP_WE               = 0x0000038c,
PH_PERF_SEL_SC7_PA3_DATA_FIFO_EOP_RD     = 0x0000038d,
PH_PERF_SEL_SC7_PA3_EOPG_WE              = 0x0000038e,
PH_PERF_SEL_SC7_PA3_DEALLOC_4_0_RD       = 0x0000038f,
PH_PERF_SEL_SC7_PA4_DATA_FIFO_RD         = 0x00000390,
PH_PERF_SEL_SC7_PA4_DATA_FIFO_WE         = 0x00000391,
PH_PERF_SEL_SC7_PA4_FIFO_EMPTY           = 0x00000392,
PH_PERF_SEL_SC7_PA4_FIFO_FULL            = 0x00000393,
PH_PERF_SEL_SC7_PA4_NULL_WE              = 0x00000394,
PH_PERF_SEL_SC7_PA4_EVENT_WE             = 0x00000395,
PH_PERF_SEL_SC7_PA4_FPOV_WE              = 0x00000396,
PH_PERF_SEL_SC7_PA4_LPOV_WE              = 0x00000397,
PH_PERF_SEL_SC7_PA4_EOP_WE               = 0x00000398,
PH_PERF_SEL_SC7_PA4_DATA_FIFO_EOP_RD     = 0x00000399,
PH_PERF_SEL_SC7_PA4_EOPG_WE              = 0x0000039a,
PH_PERF_SEL_SC7_PA4_DEALLOC_4_0_RD       = 0x0000039b,
PH_PERF_SEL_SC7_PA5_DATA_FIFO_RD         = 0x0000039c,
PH_PERF_SEL_SC7_PA5_DATA_FIFO_WE         = 0x0000039d,
PH_PERF_SEL_SC7_PA5_FIFO_EMPTY           = 0x0000039e,
PH_PERF_SEL_SC7_PA5_FIFO_FULL            = 0x0000039f,
PH_PERF_SEL_SC7_PA5_NULL_WE              = 0x000003a0,
PH_PERF_SEL_SC7_PA5_EVENT_WE             = 0x000003a1,
PH_PERF_SEL_SC7_PA5_FPOV_WE              = 0x000003a2,
PH_PERF_SEL_SC7_PA5_LPOV_WE              = 0x000003a3,
PH_PERF_SEL_SC7_PA5_EOP_WE               = 0x000003a4,
PH_PERF_SEL_SC7_PA5_DATA_FIFO_EOP_RD     = 0x000003a5,
PH_PERF_SEL_SC7_PA5_EOPG_WE              = 0x000003a6,
PH_PERF_SEL_SC7_PA5_DEALLOC_4_0_RD       = 0x000003a7,
PH_PERF_SEL_SC7_PA6_DATA_FIFO_RD         = 0x000003a8,
PH_PERF_SEL_SC7_PA6_DATA_FIFO_WE         = 0x000003a9,
PH_PERF_SEL_SC7_PA6_FIFO_EMPTY           = 0x000003aa,
PH_PERF_SEL_SC7_PA6_FIFO_FULL            = 0x000003ab,
PH_PERF_SEL_SC7_PA6_NULL_WE              = 0x000003ac,
PH_PERF_SEL_SC7_PA6_EVENT_WE             = 0x000003ad,
PH_PERF_SEL_SC7_PA6_FPOV_WE              = 0x000003ae,
PH_PERF_SEL_SC7_PA6_LPOV_WE              = 0x000003af,
PH_PERF_SEL_SC7_PA6_EOP_WE               = 0x000003b0,
PH_PERF_SEL_SC7_PA6_DATA_FIFO_EOP_RD     = 0x000003b1,
PH_PERF_SEL_SC7_PA6_EOPG_WE              = 0x000003b2,
PH_PERF_SEL_SC7_PA6_DEALLOC_4_0_RD       = 0x000003b3,
PH_PERF_SEL_SC7_PA7_DATA_FIFO_RD         = 0x000003b4,
PH_PERF_SEL_SC7_PA7_DATA_FIFO_WE         = 0x000003b5,
PH_PERF_SEL_SC7_PA7_FIFO_EMPTY           = 0x000003b6,
PH_PERF_SEL_SC7_PA7_FIFO_FULL            = 0x000003b7,
PH_PERF_SEL_SC7_PA7_NULL_WE              = 0x000003b8,
PH_PERF_SEL_SC7_PA7_EVENT_WE             = 0x000003b9,
PH_PERF_SEL_SC7_PA7_FPOV_WE              = 0x000003ba,
PH_PERF_SEL_SC7_PA7_LPOV_WE              = 0x000003bb,
PH_PERF_SEL_SC7_PA7_EOP_WE               = 0x000003bc,
PH_PERF_SEL_SC7_PA7_DATA_FIFO_EOP_RD     = 0x000003bd,
PH_PERF_SEL_SC7_PA7_EOPG_WE              = 0x000003be,
PH_PERF_SEL_SC7_PA7_DEALLOC_4_0_RD       = 0x000003bf,
PH_PERF_SEL_1_SC_ARB_STALLED_FROM_BELOW  = 0x000003c0,
PH_PERF_SEL_2_SC_ARB_STALLED_FROM_BELOW  = 0x000003c1,
PH_PERF_SEL_3_SC_ARB_STALLED_FROM_BELOW  = 0x000003c2,
PH_PERF_SEL_4_SC_ARB_STALLED_FROM_BELOW  = 0x000003c3,
PH_PERF_SEL_5_SC_ARB_STALLED_FROM_BELOW  = 0x000003c4,
PH_PERF_SEL_6_SC_ARB_STALLED_FROM_BELOW  = 0x000003c5,
PH_PERF_SEL_7_SC_ARB_STALLED_FROM_BELOW  = 0x000003c6,
PH_PERF_SEL_8_SC_ARB_STALLED_FROM_BELOW  = 0x000003c7,
PH_PERF_SEL_1_SC_ARB_STARVED_FROM_ABOVE  = 0x000003c8,
PH_PERF_SEL_2_SC_ARB_STARVED_FROM_ABOVE  = 0x000003c9,
PH_PERF_SEL_3_SC_ARB_STARVED_FROM_ABOVE  = 0x000003ca,
PH_PERF_SEL_4_SC_ARB_STARVED_FROM_ABOVE  = 0x000003cb,
PH_PERF_SEL_5_SC_ARB_STARVED_FROM_ABOVE  = 0x000003cc,
PH_PERF_SEL_6_SC_ARB_STARVED_FROM_ABOVE  = 0x000003cd,
PH_PERF_SEL_7_SC_ARB_STARVED_FROM_ABOVE  = 0x000003ce,
PH_PERF_SEL_8_SC_ARB_STARVED_FROM_ABOVE  = 0x000003cf,
PH_PERF_SEL_1_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000003d0,
PH_PERF_SEL_2_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000003d1,
PH_PERF_SEL_3_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000003d2,
PH_PERF_SEL_4_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000003d3,
PH_PERF_SEL_5_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000003d4,
PH_PERF_SEL_6_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000003d5,
PH_PERF_SEL_7_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000003d6,
PH_PERF_SEL_8_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_NOT_EMPTY = 0x000003d7,
PH_PERF_SEL_1_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000003d8,
PH_PERF_SEL_2_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000003d9,
PH_PERF_SEL_3_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000003da,
PH_PERF_SEL_4_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000003db,
PH_PERF_SEL_5_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000003dc,
PH_PERF_SEL_6_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000003dd,
PH_PERF_SEL_7_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000003de,
PH_PERF_SEL_8_SC_ARB_STARVED_FROM_ABOVE_WITH_UNSELECTED_FIFO_FULL = 0x000003df,
PH_PERF_SC0_FIFO_STATUS_0                = 0x000003e0,
PH_PERF_SC0_FIFO_STATUS_1                = 0x000003e1,
PH_PERF_SC0_FIFO_STATUS_2                = 0x000003e2,
PH_PERF_SC0_FIFO_STATUS_3                = 0x000003e3,
PH_PERF_SC1_FIFO_STATUS_0                = 0x000003e4,
PH_PERF_SC1_FIFO_STATUS_1                = 0x000003e5,
PH_PERF_SC1_FIFO_STATUS_2                = 0x000003e6,
PH_PERF_SC1_FIFO_STATUS_3                = 0x000003e7,
PH_PERF_SC2_FIFO_STATUS_0                = 0x000003e8,
PH_PERF_SC2_FIFO_STATUS_1                = 0x000003e9,
PH_PERF_SC2_FIFO_STATUS_2                = 0x000003ea,
PH_PERF_SC2_FIFO_STATUS_3                = 0x000003eb,
PH_PERF_SC3_FIFO_STATUS_0                = 0x000003ec,
PH_PERF_SC3_FIFO_STATUS_1                = 0x000003ed,
PH_PERF_SC3_FIFO_STATUS_2                = 0x000003ee,
PH_PERF_SC3_FIFO_STATUS_3                = 0x000003ef,
PH_PERF_SC4_FIFO_STATUS_0                = 0x000003f0,
PH_PERF_SC4_FIFO_STATUS_1                = 0x000003f1,
PH_PERF_SC4_FIFO_STATUS_2                = 0x000003f2,
PH_PERF_SC4_FIFO_STATUS_3                = 0x000003f3,
PH_PERF_SC5_FIFO_STATUS_0                = 0x000003f4,
PH_PERF_SC5_FIFO_STATUS_1                = 0x000003f5,
PH_PERF_SC5_FIFO_STATUS_2                = 0x000003f6,
PH_PERF_SC5_FIFO_STATUS_3                = 0x000003f7,
PH_PERF_SC6_FIFO_STATUS_0                = 0x000003f8,
PH_PERF_SC6_FIFO_STATUS_1                = 0x000003f9,
PH_PERF_SC6_FIFO_STATUS_2                = 0x000003fa,
PH_PERF_SC6_FIFO_STATUS_3                = 0x000003fb,
PH_PERF_SC7_FIFO_STATUS_0                = 0x000003fc,
PH_PERF_SC7_FIFO_STATUS_1                = 0x000003fd,
PH_PERF_SC7_FIFO_STATUS_2                = 0x000003fe,
PH_PERF_SC7_FIFO_STATUS_3                = 0x000003ff,
} PH_PERFCNT_SEL;

/*
 * PhSPIstatusMode enum
 */

typedef enum PhSPIstatusMode {
PH_SPI_MODE_LARGEST_PA_PH_FIFO_COUNT     = 0x00000000,
PH_SPI_MODE_ARBITER_SELECTED_PA_PH_FIFO_COUNT = 0x00000001,
PH_SPI_MODE_DISABLED                     = 0x00000002,
} PhSPIstatusMode;

/*******************************************************
 * RMI Enums
 *******************************************************/

/*
 * RMIPerfSel enum
 */

typedef enum RMIPerfSel {
RMI_PERF_SEL_RB_RMI_WRREQ_ALL_CID        = 0x00000000,
RMI_PERF_SEL_RB_RMI_RDREQ_ALL_CID        = 0x00000001,
} RMIPerfSel;

/*******************************************************
 * PMM Enums
 *******************************************************/

/*
 * GCRPerfSel enum
 */

typedef enum GCRPerfSel {
GCR_PERF_SEL_NONE                        = 0x00000000,
GCR_PERF_SEL_SDMA0_ALL_REQ               = 0x00000001,
GCR_PERF_SEL_SDMA0_GL2_RANGE_REQ         = 0x00000002,
GCR_PERF_SEL_SDMA0_GL2_RANGE_LT16K_REQ   = 0x00000003,
GCR_PERF_SEL_SDMA0_GL2_RANGE_16K_REQ     = 0x00000004,
GCR_PERF_SEL_SDMA0_GL2_RANGE_GT16K_REQ   = 0x00000005,
GCR_PERF_SEL_SDMA0_GL2_ALL_REQ           = 0x00000006,
GCR_PERF_SEL_SDMA0_GL1_RANGE_REQ         = 0x00000007,
GCR_PERF_SEL_SDMA0_GL1_RANGE_LT16K_REQ   = 0x00000008,
GCR_PERF_SEL_SDMA0_GL1_RANGE_16K_REQ     = 0x00000009,
GCR_PERF_SEL_SDMA0_GL1_RANGE_GT16K_REQ   = 0x0000000a,
GCR_PERF_SEL_SDMA0_GL1_ALL_REQ           = 0x0000000b,
GCR_PERF_SEL_SDMA0_METADATA_REQ          = 0x0000000c,
GCR_PERF_SEL_SDMA0_SQC_DATA_REQ          = 0x0000000d,
GCR_PERF_SEL_SDMA0_SQC_INST_REQ          = 0x0000000e,
GCR_PERF_SEL_SDMA0_TCP_REQ               = 0x0000000f,
GCR_PERF_SEL_SDMA0_TCP_TLB_SHOOTDOWN_REQ = 0x00000010,
GCR_PERF_SEL_SDMA1_ALL_REQ               = 0x00000011,
GCR_PERF_SEL_SDMA1_GL2_RANGE_REQ         = 0x00000012,
GCR_PERF_SEL_SDMA1_GL2_RANGE_LT16K_REQ   = 0x00000013,
GCR_PERF_SEL_SDMA1_GL2_RANGE_16K_REQ     = 0x00000014,
GCR_PERF_SEL_SDMA1_GL2_RANGE_GT16K_REQ   = 0x00000015,
GCR_PERF_SEL_SDMA1_GL2_ALL_REQ           = 0x00000016,
GCR_PERF_SEL_SDMA1_GL1_RANGE_REQ         = 0x00000017,
GCR_PERF_SEL_SDMA1_GL1_RANGE_LT16K_REQ   = 0x00000018,
GCR_PERF_SEL_SDMA1_GL1_RANGE_16K_REQ     = 0x00000019,
GCR_PERF_SEL_SDMA1_GL1_RANGE_GT16K_REQ   = 0x0000001a,
GCR_PERF_SEL_SDMA1_GL1_ALL_REQ           = 0x0000001b,
GCR_PERF_SEL_SDMA1_METADATA_REQ          = 0x0000001c,
GCR_PERF_SEL_SDMA1_SQC_DATA_REQ          = 0x0000001d,
GCR_PERF_SEL_SDMA1_SQC_INST_REQ          = 0x0000001e,
GCR_PERF_SEL_SDMA1_TCP_REQ               = 0x0000001f,
GCR_PERF_SEL_SDMA1_TCP_TLB_SHOOTDOWN_REQ = 0x00000020,
GCR_PERF_SEL_CPC_ALL_REQ                 = 0x00000021,
GCR_PERF_SEL_CPC_GL2_RANGE_REQ           = 0x00000022,
GCR_PERF_SEL_CPC_GL2_RANGE_LT16K_REQ     = 0x00000023,
GCR_PERF_SEL_CPC_GL2_RANGE_16K_REQ       = 0x00000024,
GCR_PERF_SEL_CPC_GL2_RANGE_GT16K_REQ     = 0x00000025,
GCR_PERF_SEL_CPC_GL2_ALL_REQ             = 0x00000026,
GCR_PERF_SEL_CPC_GL1_RANGE_REQ           = 0x00000027,
GCR_PERF_SEL_CPC_GL1_RANGE_LT16K_REQ     = 0x00000028,
GCR_PERF_SEL_CPC_GL1_RANGE_16K_REQ       = 0x00000029,
GCR_PERF_SEL_CPC_GL1_RANGE_GT16K_REQ     = 0x0000002a,
GCR_PERF_SEL_CPC_GL1_ALL_REQ             = 0x0000002b,
GCR_PERF_SEL_CPC_METADATA_REQ            = 0x0000002c,
GCR_PERF_SEL_CPC_SQC_DATA_REQ            = 0x0000002d,
GCR_PERF_SEL_CPC_SQC_INST_REQ            = 0x0000002e,
GCR_PERF_SEL_CPC_TCP_REQ                 = 0x0000002f,
GCR_PERF_SEL_CPC_TCP_TLB_SHOOTDOWN_REQ   = 0x00000030,
GCR_PERF_SEL_CPG_ALL_REQ                 = 0x00000031,
GCR_PERF_SEL_CPG_GL2_RANGE_REQ           = 0x00000032,
GCR_PERF_SEL_CPG_GL2_RANGE_LT16K_REQ     = 0x00000033,
GCR_PERF_SEL_CPG_GL2_RANGE_16K_REQ       = 0x00000034,
GCR_PERF_SEL_CPG_GL2_RANGE_GT16K_REQ     = 0x00000035,
GCR_PERF_SEL_CPG_GL2_ALL_REQ             = 0x00000036,
GCR_PERF_SEL_CPG_GL1_RANGE_REQ           = 0x00000037,
GCR_PERF_SEL_CPG_GL1_RANGE_LT16K_REQ     = 0x00000038,
GCR_PERF_SEL_CPG_GL1_RANGE_16K_REQ       = 0x00000039,
GCR_PERF_SEL_CPG_GL1_RANGE_GT16K_REQ     = 0x0000003a,
GCR_PERF_SEL_CPG_GL1_ALL_REQ             = 0x0000003b,
GCR_PERF_SEL_CPG_METADATA_REQ            = 0x0000003c,
GCR_PERF_SEL_CPG_SQC_DATA_REQ            = 0x0000003d,
GCR_PERF_SEL_CPG_SQC_INST_REQ            = 0x0000003e,
GCR_PERF_SEL_CPG_TCP_REQ                 = 0x0000003f,
GCR_PERF_SEL_CPG_TCP_TLB_SHOOTDOWN_REQ   = 0x00000040,
GCR_PERF_SEL_CPF_ALL_REQ                 = 0x00000041,
GCR_PERF_SEL_CPF_GL2_RANGE_REQ           = 0x00000042,
GCR_PERF_SEL_CPF_GL2_RANGE_LT16K_REQ     = 0x00000043,
GCR_PERF_SEL_CPF_GL2_RANGE_16K_REQ       = 0x00000044,
GCR_PERF_SEL_CPF_GL2_RANGE_GT16K_REQ     = 0x00000045,
GCR_PERF_SEL_CPF_GL2_ALL_REQ             = 0x00000046,
GCR_PERF_SEL_CPF_GL1_RANGE_REQ           = 0x00000047,
GCR_PERF_SEL_CPF_GL1_RANGE_LT16K_REQ     = 0x00000048,
GCR_PERF_SEL_CPF_GL1_RANGE_16K_REQ       = 0x00000049,
GCR_PERF_SEL_CPF_GL1_RANGE_GT16K_REQ     = 0x0000004a,
GCR_PERF_SEL_CPF_GL1_ALL_REQ             = 0x0000004b,
GCR_PERF_SEL_CPF_METADATA_REQ            = 0x0000004c,
GCR_PERF_SEL_CPF_SQC_DATA_REQ            = 0x0000004d,
GCR_PERF_SEL_CPF_SQC_INST_REQ            = 0x0000004e,
GCR_PERF_SEL_CPF_TCP_REQ                 = 0x0000004f,
GCR_PERF_SEL_CPF_TCP_TLB_SHOOTDOWN_REQ   = 0x00000050,
GCR_PERF_SEL_VIRT_REQ                    = 0x00000051,
GCR_PERF_SEL_PHY_REQ                     = 0x00000052,
GCR_PERF_SEL_TLB_SHOOTDOWN_HEAVY_REQ     = 0x00000053,
GCR_PERF_SEL_TLB_SHOOTDOWN_LIGHT_REQ     = 0x00000054,
GCR_PERF_SEL_ALL_REQ                     = 0x00000055,
GCR_PERF_SEL_CLK_FOR_PHY_OUTSTANDING_REQ = 0x00000056,
GCR_PERF_SEL_CLK_FOR_VIRT_OUTSTANDING_REQ = 0x00000057,
GCR_PERF_SEL_CLK_FOR_ALL_OUTSTANDING_REQ = 0x00000058,
GCR_PERF_SEL_UTCL2_REQ                   = 0x00000059,
GCR_PERF_SEL_UTCL2_RET                   = 0x0000005a,
GCR_PERF_SEL_UTCL2_OUT_OF_CREDIT_EVENT   = 0x0000005b,
GCR_PERF_SEL_UTCL2_INFLIGHT_REQ          = 0x0000005c,
GCR_PERF_SEL_UTCL2_FILTERED_RET          = 0x0000005d,
GCR_PERF_SEL_RLC_ALL_REQ                 = 0x0000005e,
GCR_PERF_SEL_RLC_GL2_RANGE_REQ           = 0x0000005f,
GCR_PERF_SEL_RLC_GL2_RANGE_LT16K_REQ     = 0x00000060,
GCR_PERF_SEL_RLC_GL2_RANGE_16K_REQ       = 0x00000061,
GCR_PERF_SEL_RLC_GL2_RANGE_GT16K_REQ     = 0x00000062,
GCR_PERF_SEL_RLC_GL2_ALL_REQ             = 0x00000063,
GCR_PERF_SEL_RLC_GL1_RANGE_REQ           = 0x00000064,
GCR_PERF_SEL_RLC_GL1_RANGE_LT16K_REQ     = 0x00000065,
GCR_PERF_SEL_RLC_GL1_RANGE_16K_REQ       = 0x00000066,
GCR_PERF_SEL_RLC_GL1_RANGE_GT16K_REQ     = 0x00000067,
GCR_PERF_SEL_RLC_GL1_ALL_REQ             = 0x00000068,
GCR_PERF_SEL_RLC_METADATA_REQ            = 0x00000069,
GCR_PERF_SEL_RLC_SQC_DATA_REQ            = 0x0000006a,
GCR_PERF_SEL_RLC_SQC_INST_REQ            = 0x0000006b,
GCR_PERF_SEL_RLC_TCP_REQ                 = 0x0000006c,
GCR_PERF_SEL_RLC_TCP_TLB_SHOOTDOWN_REQ   = 0x0000006d,
GCR_PERF_SEL_PM_ALL_REQ                  = 0x0000006e,
GCR_PERF_SEL_PM_GL2_RANGE_REQ            = 0x0000006f,
GCR_PERF_SEL_PM_GL2_RANGE_LT16K_REQ      = 0x00000070,
GCR_PERF_SEL_PM_GL2_RANGE_16K_REQ        = 0x00000071,
GCR_PERF_SEL_PM_GL2_RANGE_GT16K_REQ      = 0x00000072,
GCR_PERF_SEL_PM_GL2_ALL_REQ              = 0x00000073,
GCR_PERF_SEL_PM_GL1_RANGE_REQ            = 0x00000074,
GCR_PERF_SEL_PM_GL1_RANGE_LT16K_REQ      = 0x00000075,
GCR_PERF_SEL_PM_GL1_RANGE_16K_REQ        = 0x00000076,
GCR_PERF_SEL_PM_GL1_RANGE_GT16K_REQ      = 0x00000077,
GCR_PERF_SEL_PM_GL1_ALL_REQ              = 0x00000078,
GCR_PERF_SEL_PM_METADATA_REQ             = 0x00000079,
GCR_PERF_SEL_PM_SQC_DATA_REQ             = 0x0000007a,
GCR_PERF_SEL_PM_SQC_INST_REQ             = 0x0000007b,
GCR_PERF_SEL_PM_TCP_REQ                  = 0x0000007c,
GCR_PERF_SEL_PM_TCP_TLB_SHOOTDOWN_REQ    = 0x0000007d,
GCR_PERF_SEL_PIO_ALL_REQ                 = 0x0000007e,
GCR_PERF_SEL_PIO_GL2_RANGE_REQ           = 0x0000007f,
GCR_PERF_SEL_PIO_GL2_RANGE_LT16K_REQ     = 0x00000080,
GCR_PERF_SEL_PIO_GL2_RANGE_16K_REQ       = 0x00000081,
GCR_PERF_SEL_PIO_GL2_RANGE_GT16K_REQ     = 0x00000082,
GCR_PERF_SEL_PIO_GL2_ALL_REQ             = 0x00000083,
GCR_PERF_SEL_PIO_GL1_RANGE_REQ           = 0x00000084,
GCR_PERF_SEL_PIO_GL1_RANGE_LT16K_REQ     = 0x00000085,
GCR_PERF_SEL_PIO_GL1_RANGE_16K_REQ       = 0x00000086,
GCR_PERF_SEL_PIO_GL1_RANGE_GT16K_REQ     = 0x00000087,
GCR_PERF_SEL_PIO_GL1_ALL_REQ             = 0x00000088,
GCR_PERF_SEL_PIO_METADATA_REQ            = 0x00000089,
GCR_PERF_SEL_PIO_SQC_DATA_REQ            = 0x0000008a,
GCR_PERF_SEL_PIO_SQC_INST_REQ            = 0x0000008b,
GCR_PERF_SEL_PIO_TCP_REQ                 = 0x0000008c,
GCR_PERF_SEL_PIO_TCP_TLB_SHOOTDOWN_REQ   = 0x0000008d,
} GCRPerfSel;

/*******************************************************
 * UTCL1 Enums
 *******************************************************/

/*
 * UTCL1PerfSel enum
 */

typedef enum UTCL1PerfSel {
UTCL1_PERF_SEL_NONE                      = 0x00000000,
UTCL1_PERF_SEL_REQS                      = 0x00000001,
UTCL1_PERF_SEL_HITS                      = 0x00000002,
UTCL1_PERF_SEL_MISSES                    = 0x00000003,
UTCL1_PERF_SEL_MH_RECENT_BUF_HIT         = 0x00000004,
UTCL1_PERF_SEL_MH_DUPLICATE_DETECT       = 0x00000005,
UTCL1_PERF_SEL_UTCL2_REQS                = 0x00000006,
UTCL1_PERF_SEL_UTCL2_RET_XNACK_RETRY     = 0x00000007,
UTCL1_PERF_SEL_UTCL2_RET_FAULT           = 0x00000008,
UTCL1_PERF_SEL_STALL_UTCL2_CREDITS       = 0x00000009,
UTCL1_PERF_SEL_STALL_MH_FULL             = 0x0000000a,
UTCL1_PERF_SEL_UTCL2_REQS_OUTSTANDING_ACCUM = 0x0000000b,
UTCL1_PERF_SEL_UTCL2_RET_CNT             = 0x0000000c,
UTCL1_PERF_SEL_RTNS                      = 0x0000000d,
UTCL1_PERF_SEL_XLAT_REQ_BUSY             = 0x0000000e,
UTCL1_PERF_SEL_BYPASS_REQS               = 0x0000000f,
UTCL1_PERF_SEL_HIT_INV_FILTER_REQS       = 0x00000010,
UTCL1_PERF_SEL_UTCL2_RET_PERM_FAULT      = 0x00000011,
UTCL1_PERF_SEL_UTCL2_RET_PRT_FAULT       = 0x00000012,
UTCL1_PERF_SEL_CP_INVREQS                = 0x00000013,
UTCL1_PERF_SEL_UTCL2_UTCL1_INVREQS       = 0x00000014,
UTCL1_PERF_SEL_RANGE_INVREQS             = 0x00000015,
UTCL1_PERF_SEL_INV_ALL_VMID_INVREQS      = 0x00000016,
} UTCL1PerfSel;

/*******************************************************
 * IH Enums
 *******************************************************/

/*
 * IH_CLIENT_TYPE enum
 */

typedef enum IH_CLIENT_TYPE {
IH_GFX_VMID_CLIENT                       = 0x00000000,
IH_MM_VMID_CLIENT                        = 0x00000001,
IH_MULTI_VMID_CLIENT                     = 0x00000002,
IH_CLIENT_TYPE_RESERVED                  = 0x00000003,
} IH_CLIENT_TYPE;

/*
 * IH_INTERFACE_TYPE enum
 */

typedef enum IH_INTERFACE_TYPE {
IH_LEGACY_INTERFACE                      = 0x00000000,
IH_REGISTER_WRITE_INTERFACE              = 0x00000001,
} IH_INTERFACE_TYPE;

/*
 * IH_PERF_SEL enum
 */

typedef enum IH_PERF_SEL {
IH_PERF_SEL_CYCLE                        = 0x00000000,
IH_PERF_SEL_IDLE                         = 0x00000001,
IH_PERF_SEL_INPUT_IDLE                   = 0x00000002,
IH_PERF_SEL_BUFFER_IDLE                  = 0x00000003,
IH_PERF_SEL_RB0_FULL                     = 0x00000004,
IH_PERF_SEL_RB0_OVERFLOW                 = 0x00000005,
IH_PERF_SEL_RB0_WPTR_WRITEBACK           = 0x00000006,
IH_PERF_SEL_RB0_WPTR_WRAP                = 0x00000007,
IH_PERF_SEL_RB0_RPTR_WRAP                = 0x00000008,
IH_PERF_SEL_MC_WR_IDLE                   = 0x00000009,
IH_PERF_SEL_MC_WR_COUNT                  = 0x0000000a,
IH_PERF_SEL_MC_WR_STALL                  = 0x0000000b,
IH_PERF_SEL_MC_WR_CLEAN_PENDING          = 0x0000000c,
IH_PERF_SEL_MC_WR_CLEAN_STALL            = 0x0000000d,
IH_PERF_SEL_BIF_LINE0_RISING             = 0x0000000e,
IH_PERF_SEL_BIF_LINE0_FALLING            = 0x0000000f,
IH_PERF_SEL_RB1_FULL                     = 0x00000010,
IH_PERF_SEL_RB1_OVERFLOW                 = 0x00000011,
IH_PERF_SEL_COOKIE_REC_ERROR             = 0x00000012,
IH_PERF_SEL_RB1_WPTR_WRAP                = 0x00000013,
IH_PERF_SEL_RB1_RPTR_WRAP                = 0x00000014,
IH_PERF_SEL_RB2_FULL                     = 0x00000015,
IH_PERF_SEL_RB2_OVERFLOW                 = 0x00000016,
IH_PERF_SEL_CLIENT_CREDIT_ERROR          = 0x00000017,
IH_PERF_SEL_RB2_WPTR_WRAP                = 0x00000018,
IH_PERF_SEL_RB2_RPTR_WRAP                = 0x00000019,
IH_PERF_SEL_STORM_CLIENT_INT_DROP        = 0x0000001a,
IH_PERF_SEL_SELF_IV_VALID                = 0x0000001b,
IH_PERF_SEL_BUFFER_FIFO_FULL             = 0x0000001c,
IH_PERF_SEL_RB0_FULL_VF0                 = 0x0000001d,
IH_PERF_SEL_RB0_FULL_VF1                 = 0x0000001e,
IH_PERF_SEL_RB0_FULL_VF2                 = 0x0000001f,
IH_PERF_SEL_RB0_FULL_VF3                 = 0x00000020,
IH_PERF_SEL_RB0_FULL_VF4                 = 0x00000021,
IH_PERF_SEL_RB0_FULL_VF5                 = 0x00000022,
IH_PERF_SEL_RB0_FULL_VF6                 = 0x00000023,
IH_PERF_SEL_RB0_FULL_VF7                 = 0x00000024,
IH_PERF_SEL_RB0_FULL_VF8                 = 0x00000025,
IH_PERF_SEL_RB0_FULL_VF9                 = 0x00000026,
IH_PERF_SEL_RB0_FULL_VF10                = 0x00000027,
IH_PERF_SEL_RB0_FULL_VF11                = 0x00000028,
IH_PERF_SEL_RB0_FULL_VF12                = 0x00000029,
IH_PERF_SEL_RB0_FULL_VF13                = 0x0000002a,
IH_PERF_SEL_RB0_FULL_VF14                = 0x0000002b,
IH_PERF_SEL_RB0_FULL_VF15                = 0x0000002c,
IH_PERF_SEL_RB0_OVERFLOW_VF0             = 0x0000002d,
IH_PERF_SEL_RB0_OVERFLOW_VF1             = 0x0000002e,
IH_PERF_SEL_RB0_OVERFLOW_VF2             = 0x0000002f,
IH_PERF_SEL_RB0_OVERFLOW_VF3             = 0x00000030,
IH_PERF_SEL_RB0_OVERFLOW_VF4             = 0x00000031,
IH_PERF_SEL_RB0_OVERFLOW_VF5             = 0x00000032,
IH_PERF_SEL_RB0_OVERFLOW_VF6             = 0x00000033,
IH_PERF_SEL_RB0_OVERFLOW_VF7             = 0x00000034,
IH_PERF_SEL_RB0_OVERFLOW_VF8             = 0x00000035,
IH_PERF_SEL_RB0_OVERFLOW_VF9             = 0x00000036,
IH_PERF_SEL_RB0_OVERFLOW_VF10            = 0x00000037,
IH_PERF_SEL_RB0_OVERFLOW_VF11            = 0x00000038,
IH_PERF_SEL_RB0_OVERFLOW_VF12            = 0x00000039,
IH_PERF_SEL_RB0_OVERFLOW_VF13            = 0x0000003a,
IH_PERF_SEL_RB0_OVERFLOW_VF14            = 0x0000003b,
IH_PERF_SEL_RB0_OVERFLOW_VF15            = 0x0000003c,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF0       = 0x0000003d,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF1       = 0x0000003e,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF2       = 0x0000003f,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF3       = 0x00000040,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF4       = 0x00000041,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF5       = 0x00000042,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF6       = 0x00000043,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF7       = 0x00000044,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF8       = 0x00000045,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF9       = 0x00000046,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF10      = 0x00000047,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF11      = 0x00000048,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF12      = 0x00000049,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF13      = 0x0000004a,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF14      = 0x0000004b,
IH_PERF_SEL_RB0_WPTR_WRITEBACK_VF15      = 0x0000004c,
IH_PERF_SEL_RB0_WPTR_WRAP_VF0            = 0x0000004d,
IH_PERF_SEL_RB0_WPTR_WRAP_VF1            = 0x0000004e,
IH_PERF_SEL_RB0_WPTR_WRAP_VF2            = 0x0000004f,
IH_PERF_SEL_RB0_WPTR_WRAP_VF3            = 0x00000050,
IH_PERF_SEL_RB0_WPTR_WRAP_VF4            = 0x00000051,
IH_PERF_SEL_RB0_WPTR_WRAP_VF5            = 0x00000052,
IH_PERF_SEL_RB0_WPTR_WRAP_VF6            = 0x00000053,
IH_PERF_SEL_RB0_WPTR_WRAP_VF7            = 0x00000054,
IH_PERF_SEL_RB0_WPTR_WRAP_VF8            = 0x00000055,
IH_PERF_SEL_RB0_WPTR_WRAP_VF9            = 0x00000056,
IH_PERF_SEL_RB0_WPTR_WRAP_VF10           = 0x00000057,
IH_PERF_SEL_RB0_WPTR_WRAP_VF11           = 0x00000058,
IH_PERF_SEL_RB0_WPTR_WRAP_VF12           = 0x00000059,
IH_PERF_SEL_RB0_WPTR_WRAP_VF13           = 0x0000005a,
IH_PERF_SEL_RB0_WPTR_WRAP_VF14           = 0x0000005b,
IH_PERF_SEL_RB0_WPTR_WRAP_VF15           = 0x0000005c,
IH_PERF_SEL_RB0_RPTR_WRAP_VF0            = 0x0000005d,
IH_PERF_SEL_RB0_RPTR_WRAP_VF1            = 0x0000005e,
IH_PERF_SEL_RB0_RPTR_WRAP_VF2            = 0x0000005f,
IH_PERF_SEL_RB0_RPTR_WRAP_VF3            = 0x00000060,
IH_PERF_SEL_RB0_RPTR_WRAP_VF4            = 0x00000061,
IH_PERF_SEL_RB0_RPTR_WRAP_VF5            = 0x00000062,
IH_PERF_SEL_RB0_RPTR_WRAP_VF6            = 0x00000063,
IH_PERF_SEL_RB0_RPTR_WRAP_VF7            = 0x00000064,
IH_PERF_SEL_RB0_RPTR_WRAP_VF8            = 0x00000065,
IH_PERF_SEL_RB0_RPTR_WRAP_VF9            = 0x00000066,
IH_PERF_SEL_RB0_RPTR_WRAP_VF10           = 0x00000067,
IH_PERF_SEL_RB0_RPTR_WRAP_VF11           = 0x00000068,
IH_PERF_SEL_RB0_RPTR_WRAP_VF12           = 0x00000069,
IH_PERF_SEL_RB0_RPTR_WRAP_VF13           = 0x0000006a,
IH_PERF_SEL_RB0_RPTR_WRAP_VF14           = 0x0000006b,
IH_PERF_SEL_RB0_RPTR_WRAP_VF15           = 0x0000006c,
IH_PERF_SEL_BIF_LINE0_RISING_VF0         = 0x0000006d,
IH_PERF_SEL_BIF_LINE0_RISING_VF1         = 0x0000006e,
IH_PERF_SEL_BIF_LINE0_RISING_VF2         = 0x0000006f,
IH_PERF_SEL_BIF_LINE0_RISING_VF3         = 0x00000070,
IH_PERF_SEL_BIF_LINE0_RISING_VF4         = 0x00000071,
IH_PERF_SEL_BIF_LINE0_RISING_VF5         = 0x00000072,
IH_PERF_SEL_BIF_LINE0_RISING_VF6         = 0x00000073,
IH_PERF_SEL_BIF_LINE0_RISING_VF7         = 0x00000074,
IH_PERF_SEL_BIF_LINE0_RISING_VF8         = 0x00000075,
IH_PERF_SEL_BIF_LINE0_RISING_VF9         = 0x00000076,
IH_PERF_SEL_BIF_LINE0_RISING_VF10        = 0x00000077,
IH_PERF_SEL_BIF_LINE0_RISING_VF11        = 0x00000078,
IH_PERF_SEL_BIF_LINE0_RISING_VF12        = 0x00000079,
IH_PERF_SEL_BIF_LINE0_RISING_VF13        = 0x0000007a,
IH_PERF_SEL_BIF_LINE0_RISING_VF14        = 0x0000007b,
IH_PERF_SEL_BIF_LINE0_RISING_VF15        = 0x0000007c,
IH_PERF_SEL_BIF_LINE0_FALLING_VF0        = 0x0000007d,
IH_PERF_SEL_BIF_LINE0_FALLING_VF1        = 0x0000007e,
IH_PERF_SEL_BIF_LINE0_FALLING_VF2        = 0x0000007f,
IH_PERF_SEL_BIF_LINE0_FALLING_VF3        = 0x00000080,
IH_PERF_SEL_BIF_LINE0_FALLING_VF4        = 0x00000081,
IH_PERF_SEL_BIF_LINE0_FALLING_VF5        = 0x00000082,
IH_PERF_SEL_BIF_LINE0_FALLING_VF6        = 0x00000083,
IH_PERF_SEL_BIF_LINE0_FALLING_VF7        = 0x00000084,
IH_PERF_SEL_BIF_LINE0_FALLING_VF8        = 0x00000085,
IH_PERF_SEL_BIF_LINE0_FALLING_VF9        = 0x00000086,
IH_PERF_SEL_BIF_LINE0_FALLING_VF10       = 0x00000087,
IH_PERF_SEL_BIF_LINE0_FALLING_VF11       = 0x00000088,
IH_PERF_SEL_BIF_LINE0_FALLING_VF12       = 0x00000089,
IH_PERF_SEL_BIF_LINE0_FALLING_VF13       = 0x0000008a,
IH_PERF_SEL_BIF_LINE0_FALLING_VF14       = 0x0000008b,
IH_PERF_SEL_BIF_LINE0_FALLING_VF15       = 0x0000008c,
IH_PERF_SEL_CLIENT0_INT                  = 0x0000008d,
IH_PERF_SEL_CLIENT1_INT                  = 0x0000008e,
IH_PERF_SEL_CLIENT2_INT                  = 0x0000008f,
IH_PERF_SEL_CLIENT3_INT                  = 0x00000090,
IH_PERF_SEL_CLIENT4_INT                  = 0x00000091,
IH_PERF_SEL_CLIENT5_INT                  = 0x00000092,
IH_PERF_SEL_CLIENT6_INT                  = 0x00000093,
IH_PERF_SEL_CLIENT7_INT                  = 0x00000094,
IH_PERF_SEL_CLIENT8_INT                  = 0x00000095,
IH_PERF_SEL_CLIENT9_INT                  = 0x00000096,
IH_PERF_SEL_CLIENT10_INT                 = 0x00000097,
IH_PERF_SEL_CLIENT11_INT                 = 0x00000098,
IH_PERF_SEL_CLIENT12_INT                 = 0x00000099,
IH_PERF_SEL_CLIENT13_INT                 = 0x0000009a,
IH_PERF_SEL_CLIENT14_INT                 = 0x0000009b,
IH_PERF_SEL_CLIENT15_INT                 = 0x0000009c,
IH_PERF_SEL_CLIENT16_INT                 = 0x0000009d,
IH_PERF_SEL_CLIENT17_INT                 = 0x0000009e,
IH_PERF_SEL_CLIENT18_INT                 = 0x0000009f,
IH_PERF_SEL_CLIENT19_INT                 = 0x000000a0,
IH_PERF_SEL_CLIENT20_INT                 = 0x000000a1,
IH_PERF_SEL_CLIENT21_INT                 = 0x000000a2,
IH_PERF_SEL_CLIENT22_INT                 = 0x000000a3,
IH_PERF_SEL_CLIENT23_INT                 = 0x000000a4,
IH_PERF_SEL_CLIENT24_INT                 = 0x000000a5,
IH_PERF_SEL_CLIENT25_INT                 = 0x000000a6,
IH_PERF_SEL_CLIENT26_INT                 = 0x000000a7,
IH_PERF_SEL_CLIENT27_INT                 = 0x000000a8,
IH_PERF_SEL_CLIENT28_INT                 = 0x000000a9,
IH_PERF_SEL_CLIENT29_INT                 = 0x000000aa,
IH_PERF_SEL_CLIENT30_INT                 = 0x000000ab,
IH_PERF_SEL_CLIENT31_INT                 = 0x000000ac,
IH_PERF_SEL_RB1_FULL_VF0                 = 0x000000ad,
IH_PERF_SEL_RB1_FULL_VF1                 = 0x000000ae,
IH_PERF_SEL_RB1_FULL_VF2                 = 0x000000af,
IH_PERF_SEL_RB1_FULL_VF3                 = 0x000000b0,
IH_PERF_SEL_RB1_FULL_VF4                 = 0x000000b1,
IH_PERF_SEL_RB1_FULL_VF5                 = 0x000000b2,
IH_PERF_SEL_RB1_FULL_VF6                 = 0x000000b3,
IH_PERF_SEL_RB1_FULL_VF7                 = 0x000000b4,
IH_PERF_SEL_RB1_FULL_VF8                 = 0x000000b5,
IH_PERF_SEL_RB1_FULL_VF9                 = 0x000000b6,
IH_PERF_SEL_RB1_FULL_VF10                = 0x000000b7,
IH_PERF_SEL_RB1_FULL_VF11                = 0x000000b8,
IH_PERF_SEL_RB1_FULL_VF12                = 0x000000b9,
IH_PERF_SEL_RB1_FULL_VF13                = 0x000000ba,
IH_PERF_SEL_RB1_FULL_VF14                = 0x000000bb,
IH_PERF_SEL_RB1_FULL_VF15                = 0x000000bc,
IH_PERF_SEL_RB1_OVERFLOW_VF0             = 0x000000bd,
IH_PERF_SEL_RB1_OVERFLOW_VF1             = 0x000000be,
IH_PERF_SEL_RB1_OVERFLOW_VF2             = 0x000000bf,
IH_PERF_SEL_RB1_OVERFLOW_VF3             = 0x000000c0,
IH_PERF_SEL_RB1_OVERFLOW_VF4             = 0x000000c1,
IH_PERF_SEL_RB1_OVERFLOW_VF5             = 0x000000c2,
IH_PERF_SEL_RB1_OVERFLOW_VF6             = 0x000000c3,
IH_PERF_SEL_RB1_OVERFLOW_VF7             = 0x000000c4,
IH_PERF_SEL_RB1_OVERFLOW_VF8             = 0x000000c5,
IH_PERF_SEL_RB1_OVERFLOW_VF9             = 0x000000c6,
IH_PERF_SEL_RB1_OVERFLOW_VF10            = 0x000000c7,
IH_PERF_SEL_RB1_OVERFLOW_VF11            = 0x000000c8,
IH_PERF_SEL_RB1_OVERFLOW_VF12            = 0x000000c9,
IH_PERF_SEL_RB1_OVERFLOW_VF13            = 0x000000ca,
IH_PERF_SEL_RB1_OVERFLOW_VF14            = 0x000000cb,
IH_PERF_SEL_RB1_OVERFLOW_VF15            = 0x000000cc,
IH_PERF_SEL_RB1_WPTR_WRAP_VF0            = 0x000000cd,
IH_PERF_SEL_RB1_WPTR_WRAP_VF1            = 0x000000ce,
IH_PERF_SEL_RB1_WPTR_WRAP_VF2            = 0x000000cf,
IH_PERF_SEL_RB1_WPTR_WRAP_VF3            = 0x000000d0,
IH_PERF_SEL_RB1_WPTR_WRAP_VF4            = 0x000000d1,
IH_PERF_SEL_RB1_WPTR_WRAP_VF5            = 0x000000d2,
IH_PERF_SEL_RB1_WPTR_WRAP_VF6            = 0x000000d3,
IH_PERF_SEL_RB1_WPTR_WRAP_VF7            = 0x000000d4,
IH_PERF_SEL_RB1_WPTR_WRAP_VF8            = 0x000000d5,
IH_PERF_SEL_RB1_WPTR_WRAP_VF9            = 0x000000d6,
IH_PERF_SEL_RB1_WPTR_WRAP_VF10           = 0x000000d7,
IH_PERF_SEL_RB1_WPTR_WRAP_VF11           = 0x000000d8,
IH_PERF_SEL_RB1_WPTR_WRAP_VF12           = 0x000000d9,
IH_PERF_SEL_RB1_WPTR_WRAP_VF13           = 0x000000da,
IH_PERF_SEL_RB1_WPTR_WRAP_VF14           = 0x000000db,
IH_PERF_SEL_RB1_WPTR_WRAP_VF15           = 0x000000dc,
IH_PERF_SEL_RB1_RPTR_WRAP_VF0            = 0x000000dd,
IH_PERF_SEL_RB1_RPTR_WRAP_VF1            = 0x000000de,
IH_PERF_SEL_RB1_RPTR_WRAP_VF2            = 0x000000df,
IH_PERF_SEL_RB1_RPTR_WRAP_VF3            = 0x000000e0,
IH_PERF_SEL_RB1_RPTR_WRAP_VF4            = 0x000000e1,
IH_PERF_SEL_RB1_RPTR_WRAP_VF5            = 0x000000e2,
IH_PERF_SEL_RB1_RPTR_WRAP_VF6            = 0x000000e3,
IH_PERF_SEL_RB1_RPTR_WRAP_VF7            = 0x000000e4,
IH_PERF_SEL_RB1_RPTR_WRAP_VF8            = 0x000000e5,
IH_PERF_SEL_RB1_RPTR_WRAP_VF9            = 0x000000e6,
IH_PERF_SEL_RB1_RPTR_WRAP_VF10           = 0x000000e7,
IH_PERF_SEL_RB1_RPTR_WRAP_VF11           = 0x000000e8,
IH_PERF_SEL_RB1_RPTR_WRAP_VF12           = 0x000000e9,
IH_PERF_SEL_RB1_RPTR_WRAP_VF13           = 0x000000ea,
IH_PERF_SEL_RB1_RPTR_WRAP_VF14           = 0x000000eb,
IH_PERF_SEL_RB1_RPTR_WRAP_VF15           = 0x000000ec,
IH_PERF_SEL_RB2_FULL_VF0                 = 0x000000ed,
IH_PERF_SEL_RB2_FULL_VF1                 = 0x000000ee,
IH_PERF_SEL_RB2_FULL_VF2                 = 0x000000ef,
IH_PERF_SEL_RB2_FULL_VF3                 = 0x000000f0,
IH_PERF_SEL_RB2_FULL_VF4                 = 0x000000f1,
IH_PERF_SEL_RB2_FULL_VF5                 = 0x000000f2,
IH_PERF_SEL_RB2_FULL_VF6                 = 0x000000f3,
IH_PERF_SEL_RB2_FULL_VF7                 = 0x000000f4,
IH_PERF_SEL_RB2_FULL_VF8                 = 0x000000f5,
IH_PERF_SEL_RB2_FULL_VF9                 = 0x000000f6,
IH_PERF_SEL_RB2_FULL_VF10                = 0x000000f7,
IH_PERF_SEL_RB2_FULL_VF11                = 0x000000f8,
IH_PERF_SEL_RB2_FULL_VF12                = 0x000000f9,
IH_PERF_SEL_RB2_FULL_VF13                = 0x000000fa,
IH_PERF_SEL_RB2_FULL_VF14                = 0x000000fb,
IH_PERF_SEL_RB2_FULL_VF15                = 0x000000fc,
IH_PERF_SEL_RB2_OVERFLOW_VF0             = 0x000000fd,
IH_PERF_SEL_RB2_OVERFLOW_VF1             = 0x000000fe,
IH_PERF_SEL_RB2_OVERFLOW_VF2             = 0x000000ff,
IH_PERF_SEL_RB2_OVERFLOW_VF3             = 0x00000100,
IH_PERF_SEL_RB2_OVERFLOW_VF4             = 0x00000101,
IH_PERF_SEL_RB2_OVERFLOW_VF5             = 0x00000102,
IH_PERF_SEL_RB2_OVERFLOW_VF6             = 0x00000103,
IH_PERF_SEL_RB2_OVERFLOW_VF7             = 0x00000104,
IH_PERF_SEL_RB2_OVERFLOW_VF8             = 0x00000105,
IH_PERF_SEL_RB2_OVERFLOW_VF9             = 0x00000106,
IH_PERF_SEL_RB2_OVERFLOW_VF10            = 0x00000107,
IH_PERF_SEL_RB2_OVERFLOW_VF11            = 0x00000108,
IH_PERF_SEL_RB2_OVERFLOW_VF12            = 0x00000109,
IH_PERF_SEL_RB2_OVERFLOW_VF13            = 0x0000010a,
IH_PERF_SEL_RB2_OVERFLOW_VF14            = 0x0000010b,
IH_PERF_SEL_RB2_OVERFLOW_VF15            = 0x0000010c,
IH_PERF_SEL_RB2_WPTR_WRAP_VF0            = 0x0000010d,
IH_PERF_SEL_RB2_WPTR_WRAP_VF1            = 0x0000010e,
IH_PERF_SEL_RB2_WPTR_WRAP_VF2            = 0x0000010f,
IH_PERF_SEL_RB2_WPTR_WRAP_VF3            = 0x00000110,
IH_PERF_SEL_RB2_WPTR_WRAP_VF4            = 0x00000111,
IH_PERF_SEL_RB2_WPTR_WRAP_VF5            = 0x00000112,
IH_PERF_SEL_RB2_WPTR_WRAP_VF6            = 0x00000113,
IH_PERF_SEL_RB2_WPTR_WRAP_VF7            = 0x00000114,
IH_PERF_SEL_RB2_WPTR_WRAP_VF8            = 0x00000115,
IH_PERF_SEL_RB2_WPTR_WRAP_VF9            = 0x00000116,
IH_PERF_SEL_RB2_WPTR_WRAP_VF10           = 0x00000117,
IH_PERF_SEL_RB2_WPTR_WRAP_VF11           = 0x00000118,
IH_PERF_SEL_RB2_WPTR_WRAP_VF12           = 0x00000119,
IH_PERF_SEL_RB2_WPTR_WRAP_VF13           = 0x0000011a,
IH_PERF_SEL_RB2_WPTR_WRAP_VF14           = 0x0000011b,
IH_PERF_SEL_RB2_WPTR_WRAP_VF15           = 0x0000011c,
IH_PERF_SEL_RB2_RPTR_WRAP_VF0            = 0x0000011d,
IH_PERF_SEL_RB2_RPTR_WRAP_VF1            = 0x0000011e,
IH_PERF_SEL_RB2_RPTR_WRAP_VF2            = 0x0000011f,
IH_PERF_SEL_RB2_RPTR_WRAP_VF3            = 0x00000120,
IH_PERF_SEL_RB2_RPTR_WRAP_VF4            = 0x00000121,
IH_PERF_SEL_RB2_RPTR_WRAP_VF5            = 0x00000122,
IH_PERF_SEL_RB2_RPTR_WRAP_VF6            = 0x00000123,
IH_PERF_SEL_RB2_RPTR_WRAP_VF7            = 0x00000124,
IH_PERF_SEL_RB2_RPTR_WRAP_VF8            = 0x00000125,
IH_PERF_SEL_RB2_RPTR_WRAP_VF9            = 0x00000126,
IH_PERF_SEL_RB2_RPTR_WRAP_VF10           = 0x00000127,
IH_PERF_SEL_RB2_RPTR_WRAP_VF11           = 0x00000128,
IH_PERF_SEL_RB2_RPTR_WRAP_VF12           = 0x00000129,
IH_PERF_SEL_RB2_RPTR_WRAP_VF13           = 0x0000012a,
IH_PERF_SEL_RB2_RPTR_WRAP_VF14           = 0x0000012b,
IH_PERF_SEL_RB2_RPTR_WRAP_VF15           = 0x0000012c,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP          = 0x0000012d,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF0      = 0x0000012e,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF1      = 0x0000012f,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF2      = 0x00000130,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF3      = 0x00000131,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF4      = 0x00000132,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF5      = 0x00000133,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF6      = 0x00000134,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF7      = 0x00000135,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF8      = 0x00000136,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF9      = 0x00000137,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF10     = 0x00000138,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF11     = 0x00000139,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF12     = 0x0000013a,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF13     = 0x0000013b,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF14     = 0x0000013c,
IH_PERF_SEL_RB0_FULL_DRAIN_DROP_VF15     = 0x0000013d,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP          = 0x0000013e,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF0      = 0x0000013f,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF1      = 0x00000140,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF2      = 0x00000141,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF3      = 0x00000142,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF4      = 0x00000143,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF5      = 0x00000144,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF6      = 0x00000145,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF7      = 0x00000146,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF8      = 0x00000147,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF9      = 0x00000148,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF10     = 0x00000149,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF11     = 0x0000014a,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF12     = 0x0000014b,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF13     = 0x0000014c,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF14     = 0x0000014d,
IH_PERF_SEL_RB1_FULL_DRAIN_DROP_VF15     = 0x0000014e,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP          = 0x0000014f,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF0      = 0x00000150,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF1      = 0x00000151,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF2      = 0x00000152,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF3      = 0x00000153,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF4      = 0x00000154,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF5      = 0x00000155,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF6      = 0x00000156,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF7      = 0x00000157,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF8      = 0x00000158,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF9      = 0x00000159,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF10     = 0x0000015a,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF11     = 0x0000015b,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF12     = 0x0000015c,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF13     = 0x0000015d,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF14     = 0x0000015e,
IH_PERF_SEL_RB2_FULL_DRAIN_DROP_VF15     = 0x0000015f,
IH_PERF_SEL_RB0_LOAD_RPTR                = 0x00000160,
IH_PERF_SEL_RB0_LOAD_RPTR_VF0            = 0x00000161,
IH_PERF_SEL_RB0_LOAD_RPTR_VF1            = 0x00000162,
IH_PERF_SEL_RB0_LOAD_RPTR_VF2            = 0x00000163,
IH_PERF_SEL_RB0_LOAD_RPTR_VF3            = 0x00000164,
IH_PERF_SEL_RB0_LOAD_RPTR_VF4            = 0x00000165,
IH_PERF_SEL_RB0_LOAD_RPTR_VF5            = 0x00000166,
IH_PERF_SEL_RB0_LOAD_RPTR_VF6            = 0x00000167,
IH_PERF_SEL_RB0_LOAD_RPTR_VF7            = 0x00000168,
IH_PERF_SEL_RB0_LOAD_RPTR_VF8            = 0x00000169,
IH_PERF_SEL_RB0_LOAD_RPTR_VF9            = 0x0000016a,
IH_PERF_SEL_RB0_LOAD_RPTR_VF10           = 0x0000016b,
IH_PERF_SEL_RB0_LOAD_RPTR_VF11           = 0x0000016c,
IH_PERF_SEL_RB0_LOAD_RPTR_VF12           = 0x0000016d,
IH_PERF_SEL_RB0_LOAD_RPTR_VF13           = 0x0000016e,
IH_PERF_SEL_RB0_LOAD_RPTR_VF14           = 0x0000016f,
IH_PERF_SEL_RB0_LOAD_RPTR_VF15           = 0x00000170,
IH_PERF_SEL_RB1_LOAD_RPTR                = 0x00000171,
IH_PERF_SEL_RB1_LOAD_RPTR_VF0            = 0x00000172,
IH_PERF_SEL_RB1_LOAD_RPTR_VF1            = 0x00000173,
IH_PERF_SEL_RB1_LOAD_RPTR_VF2            = 0x00000174,
IH_PERF_SEL_RB1_LOAD_RPTR_VF3            = 0x00000175,
IH_PERF_SEL_RB1_LOAD_RPTR_VF4            = 0x00000176,
IH_PERF_SEL_RB1_LOAD_RPTR_VF5            = 0x00000177,
IH_PERF_SEL_RB1_LOAD_RPTR_VF6            = 0x00000178,
IH_PERF_SEL_RB1_LOAD_RPTR_VF7            = 0x00000179,
IH_PERF_SEL_RB1_LOAD_RPTR_VF8            = 0x0000017a,
IH_PERF_SEL_RB1_LOAD_RPTR_VF9            = 0x0000017b,
IH_PERF_SEL_RB1_LOAD_RPTR_VF10           = 0x0000017c,
IH_PERF_SEL_RB1_LOAD_RPTR_VF11           = 0x0000017d,
IH_PERF_SEL_RB1_LOAD_RPTR_VF12           = 0x0000017e,
IH_PERF_SEL_RB1_LOAD_RPTR_VF13           = 0x0000017f,
IH_PERF_SEL_RB1_LOAD_RPTR_VF14           = 0x00000180,
IH_PERF_SEL_RB1_LOAD_RPTR_VF15           = 0x00000181,
IH_PERF_SEL_RB2_LOAD_RPTR                = 0x00000182,
IH_PERF_SEL_RB2_LOAD_RPTR_VF0            = 0x00000183,
IH_PERF_SEL_RB2_LOAD_RPTR_VF1            = 0x00000184,
IH_PERF_SEL_RB2_LOAD_RPTR_VF2            = 0x00000185,
IH_PERF_SEL_RB2_LOAD_RPTR_VF3            = 0x00000186,
IH_PERF_SEL_RB2_LOAD_RPTR_VF4            = 0x00000187,
IH_PERF_SEL_RB2_LOAD_RPTR_VF5            = 0x00000188,
IH_PERF_SEL_RB2_LOAD_RPTR_VF6            = 0x00000189,
IH_PERF_SEL_RB2_LOAD_RPTR_VF7            = 0x0000018a,
IH_PERF_SEL_RB2_LOAD_RPTR_VF8            = 0x0000018b,
IH_PERF_SEL_RB2_LOAD_RPTR_VF9            = 0x0000018c,
IH_PERF_SEL_RB2_LOAD_RPTR_VF10           = 0x0000018d,
IH_PERF_SEL_RB2_LOAD_RPTR_VF11           = 0x0000018e,
IH_PERF_SEL_RB2_LOAD_RPTR_VF12           = 0x0000018f,
IH_PERF_SEL_RB2_LOAD_RPTR_VF13           = 0x00000190,
IH_PERF_SEL_RB2_LOAD_RPTR_VF14           = 0x00000191,
IH_PERF_SEL_RB2_LOAD_RPTR_VF15           = 0x00000192,
} IH_PERF_SEL;

/*
 * IH_RING_ID enum
 */

typedef enum IH_RING_ID {
IH_RING_ID_INTERRUPT                     = 0x00000000,
IH_RING_ID_REQUEST                       = 0x00000001,
IH_RING_ID_TRANSLATION                   = 0x00000002,
IH_RING_ID_RESERVED                      = 0x00000003,
} IH_RING_ID;

/*
 * IH_VF_RB_SELECT enum
 */

typedef enum IH_VF_RB_SELECT {
IH_VF_RB_SELECT_CLIENT_FCN_ID            = 0x00000000,
IH_VF_RB_SELECT_IH_FCN_ID                = 0x00000001,
IH_VF_RB_SELECT_PF                       = 0x00000002,
IH_VF_RB_SELECT_RESERVED                 = 0x00000003,
} IH_VF_RB_SELECT;

/*******************************************************
 * SEM Enums
 *******************************************************/

/*
 * SEM_PERF_SEL enum
 */

typedef enum SEM_PERF_SEL {
SEM_PERF_SEL_CYCLE                       = 0x00000000,
SEM_PERF_SEL_IDLE                        = 0x00000001,
SEM_PERF_SEL_SDMA0_REQ_SIGNAL            = 0x00000002,
SEM_PERF_SEL_SDMA1_REQ_SIGNAL            = 0x00000003,
SEM_PERF_SEL_SDMA2_REQ_SIGNAL            = 0x00000004,
SEM_PERF_SEL_SDMA3_REQ_SIGNAL            = 0x00000005,
SEM_PERF_SEL_UVD_REQ_SIGNAL              = 0x00000006,
SEM_PERF_SEL_UVD1_REQ_SIGNAL             = 0x00000007,
SEM_PERF_SEL_VCE0_REQ_SIGNAL             = 0x00000008,
SEM_PERF_SEL_ACP_REQ_SIGNAL              = 0x00000009,
SEM_PERF_SEL_ISP_REQ_SIGNAL              = 0x0000000a,
SEM_PERF_SEL_VCE1_REQ_SIGNAL             = 0x0000000b,
SEM_PERF_SEL_VP8_REQ_SIGNAL              = 0x0000000c,
SEM_PERF_SEL_CPG_E0_REQ_SIGNAL           = 0x0000000d,
SEM_PERF_SEL_CPG_E1_REQ_SIGNAL           = 0x0000000e,
SEM_PERF_SEL_CPC1_IMME_E0_REQ_SIGNAL     = 0x0000000f,
SEM_PERF_SEL_CPC1_IMME_E1_REQ_SIGNAL     = 0x00000010,
SEM_PERF_SEL_CPC1_IMME_E2_REQ_SIGNAL     = 0x00000011,
SEM_PERF_SEL_CPC1_IMME_E3_REQ_SIGNAL     = 0x00000012,
SEM_PERF_SEL_CPC2_IMME_E0_REQ_SIGNAL     = 0x00000013,
SEM_PERF_SEL_CPC2_IMME_E1_REQ_SIGNAL     = 0x00000014,
SEM_PERF_SEL_CPC2_IMME_E2_REQ_SIGNAL     = 0x00000015,
SEM_PERF_SEL_CPC2_IMME_E3_REQ_SIGNAL     = 0x00000016,
SEM_PERF_SEL_SDMA0_REQ_WAIT              = 0x00000017,
SEM_PERF_SEL_SDMA1_REQ_WAIT              = 0x00000018,
SEM_PERF_SEL_SDMA2_REQ_WAIT              = 0x00000019,
SEM_PERF_SEL_SDMA3_REQ_WAIT              = 0x0000001a,
SEM_PERF_SEL_UVD_REQ_WAIT                = 0x0000001b,
SEM_PERF_SEL_UVD1_REQ_WAIT               = 0x0000001c,
SEM_PERF_SEL_VCE0_REQ_WAIT               = 0x0000001d,
SEM_PERF_SEL_ACP_REQ_WAIT                = 0x0000001e,
SEM_PERF_SEL_ISP_REQ_WAIT                = 0x0000001f,
SEM_PERF_SEL_VCE1_REQ_WAIT               = 0x00000020,
SEM_PERF_SEL_VP8_REQ_WAIT                = 0x00000021,
SEM_PERF_SEL_CPG_E0_REQ_WAIT             = 0x00000022,
SEM_PERF_SEL_CPG_E1_REQ_WAIT             = 0x00000023,
SEM_PERF_SEL_CPC1_IMME_E0_REQ_WAIT       = 0x00000024,
SEM_PERF_SEL_CPC1_IMME_E1_REQ_WAIT       = 0x00000025,
SEM_PERF_SEL_CPC1_IMME_E2_REQ_WAIT       = 0x00000026,
SEM_PERF_SEL_CPC1_IMME_E3_REQ_WAIT       = 0x00000027,
SEM_PERF_SEL_CPC2_IMME_E0_REQ_WAIT       = 0x00000028,
SEM_PERF_SEL_CPC2_IMME_E1_REQ_WAIT       = 0x00000029,
SEM_PERF_SEL_CPC2_IMME_E2_REQ_WAIT       = 0x0000002a,
SEM_PERF_SEL_CPC2_IMME_E3_REQ_WAIT       = 0x0000002b,
SEM_PERF_SEL_CPC1_OFFL_E0_REQ_WAIT       = 0x0000002c,
SEM_PERF_SEL_CPC1_OFFL_E1_REQ_WAIT       = 0x0000002d,
SEM_PERF_SEL_CPC1_OFFL_E2_REQ_WAIT       = 0x0000002e,
SEM_PERF_SEL_CPC1_OFFL_E3_REQ_WAIT       = 0x0000002f,
SEM_PERF_SEL_CPC1_OFFL_E4_REQ_WAIT       = 0x00000030,
SEM_PERF_SEL_CPC1_OFFL_E5_REQ_WAIT       = 0x00000031,
SEM_PERF_SEL_CPC1_OFFL_E6_REQ_WAIT       = 0x00000032,
SEM_PERF_SEL_CPC1_OFFL_E7_REQ_WAIT       = 0x00000033,
SEM_PERF_SEL_CPC1_OFFL_E8_REQ_WAIT       = 0x00000034,
SEM_PERF_SEL_CPC1_OFFL_E9_REQ_WAIT       = 0x00000035,
SEM_PERF_SEL_CPC1_OFFL_E10_REQ_WAIT      = 0x00000036,
SEM_PERF_SEL_CPC1_OFFL_E11_REQ_WAIT      = 0x00000037,
SEM_PERF_SEL_CPC1_OFFL_E12_REQ_WAIT      = 0x00000038,
SEM_PERF_SEL_CPC1_OFFL_E13_REQ_WAIT      = 0x00000039,
SEM_PERF_SEL_CPC1_OFFL_E14_REQ_WAIT      = 0x0000003a,
SEM_PERF_SEL_CPC1_OFFL_E15_REQ_WAIT      = 0x0000003b,
SEM_PERF_SEL_CPC1_OFFL_E16_REQ_WAIT      = 0x0000003c,
SEM_PERF_SEL_CPC1_OFFL_E17_REQ_WAIT      = 0x0000003d,
SEM_PERF_SEL_CPC1_OFFL_E18_REQ_WAIT      = 0x0000003e,
SEM_PERF_SEL_CPC1_OFFL_E19_REQ_WAIT      = 0x0000003f,
SEM_PERF_SEL_CPC1_OFFL_E20_REQ_WAIT      = 0x00000040,
SEM_PERF_SEL_CPC1_OFFL_E21_REQ_WAIT      = 0x00000041,
SEM_PERF_SEL_CPC1_OFFL_E22_REQ_WAIT      = 0x00000042,
SEM_PERF_SEL_CPC1_OFFL_E23_REQ_WAIT      = 0x00000043,
SEM_PERF_SEL_CPC1_OFFL_E24_REQ_WAIT      = 0x00000044,
SEM_PERF_SEL_CPC1_OFFL_E25_REQ_WAIT      = 0x00000045,
SEM_PERF_SEL_CPC1_OFFL_E26_REQ_WAIT      = 0x00000046,
SEM_PERF_SEL_CPC1_OFFL_E27_REQ_WAIT      = 0x00000047,
SEM_PERF_SEL_CPC1_OFFL_E28_REQ_WAIT      = 0x00000048,
SEM_PERF_SEL_CPC1_OFFL_E29_REQ_WAIT      = 0x00000049,
SEM_PERF_SEL_CPC1_OFFL_E30_REQ_WAIT      = 0x0000004a,
SEM_PERF_SEL_CPC1_OFFL_E31_REQ_WAIT      = 0x0000004b,
SEM_PERF_SEL_CPC2_OFFL_E0_REQ_WAIT       = 0x0000004c,
SEM_PERF_SEL_CPC2_OFFL_E1_REQ_WAIT       = 0x0000004d,
SEM_PERF_SEL_CPC2_OFFL_E2_REQ_WAIT       = 0x0000004e,
SEM_PERF_SEL_CPC2_OFFL_E3_REQ_WAIT       = 0x0000004f,
SEM_PERF_SEL_CPC2_OFFL_E4_REQ_WAIT       = 0x00000050,
SEM_PERF_SEL_CPC2_OFFL_E5_REQ_WAIT       = 0x00000051,
SEM_PERF_SEL_CPC2_OFFL_E6_REQ_WAIT       = 0x00000052,
SEM_PERF_SEL_CPC2_OFFL_E7_REQ_WAIT       = 0x00000053,
SEM_PERF_SEL_CPC2_OFFL_E8_REQ_WAIT       = 0x00000054,
SEM_PERF_SEL_CPC2_OFFL_E9_REQ_WAIT       = 0x00000055,
SEM_PERF_SEL_CPC2_OFFL_E10_REQ_WAIT      = 0x00000056,
SEM_PERF_SEL_CPC2_OFFL_E11_REQ_WAIT      = 0x00000057,
SEM_PERF_SEL_CPC2_OFFL_E12_REQ_WAIT      = 0x00000058,
SEM_PERF_SEL_CPC2_OFFL_E13_REQ_WAIT      = 0x00000059,
SEM_PERF_SEL_CPC2_OFFL_E14_REQ_WAIT      = 0x0000005a,
SEM_PERF_SEL_CPC2_OFFL_E15_REQ_WAIT      = 0x0000005b,
SEM_PERF_SEL_CPC2_OFFL_E16_REQ_WAIT      = 0x0000005c,
SEM_PERF_SEL_CPC2_OFFL_E17_REQ_WAIT      = 0x0000005d,
SEM_PERF_SEL_CPC2_OFFL_E18_REQ_WAIT      = 0x0000005e,
SEM_PERF_SEL_CPC2_OFFL_E19_REQ_WAIT      = 0x0000005f,
SEM_PERF_SEL_CPC2_OFFL_E20_REQ_WAIT      = 0x00000060,
SEM_PERF_SEL_CPC2_OFFL_E21_REQ_WAIT      = 0x00000061,
SEM_PERF_SEL_CPC2_OFFL_E22_REQ_WAIT      = 0x00000062,
SEM_PERF_SEL_CPC2_OFFL_E23_REQ_WAIT      = 0x00000063,
SEM_PERF_SEL_CPC2_OFFL_E24_REQ_WAIT      = 0x00000064,
SEM_PERF_SEL_CPC2_OFFL_E25_REQ_WAIT      = 0x00000065,
SEM_PERF_SEL_CPC2_OFFL_E26_REQ_WAIT      = 0x00000066,
SEM_PERF_SEL_CPC2_OFFL_E27_REQ_WAIT      = 0x00000067,
SEM_PERF_SEL_CPC2_OFFL_E28_REQ_WAIT      = 0x00000068,
SEM_PERF_SEL_CPC2_OFFL_E29_REQ_WAIT      = 0x00000069,
SEM_PERF_SEL_CPC2_OFFL_E30_REQ_WAIT      = 0x0000006a,
SEM_PERF_SEL_CPC2_OFFL_E31_REQ_WAIT      = 0x0000006b,
SEM_PERF_SEL_CPC1_OFFL_E0_POLL_WAIT      = 0x0000006c,
SEM_PERF_SEL_CPC1_OFFL_E1_POLL_WAIT      = 0x0000006d,
SEM_PERF_SEL_CPC1_OFFL_E2_POLL_WAIT      = 0x0000006e,
SEM_PERF_SEL_CPC1_OFFL_E3_POLL_WAIT      = 0x0000006f,
SEM_PERF_SEL_CPC1_OFFL_E4_POLL_WAIT      = 0x00000070,
SEM_PERF_SEL_CPC1_OFFL_E5_POLL_WAIT      = 0x00000071,
SEM_PERF_SEL_CPC1_OFFL_E6_POLL_WAIT      = 0x00000072,
SEM_PERF_SEL_CPC1_OFFL_E7_POLL_WAIT      = 0x00000073,
SEM_PERF_SEL_CPC1_OFFL_E8_POLL_WAIT      = 0x00000074,
SEM_PERF_SEL_CPC1_OFFL_E9_POLL_WAIT      = 0x00000075,
SEM_PERF_SEL_CPC1_OFFL_E10_POLL_WAIT     = 0x00000076,
SEM_PERF_SEL_CPC1_OFFL_E11_POLL_WAIT     = 0x00000077,
SEM_PERF_SEL_CPC1_OFFL_E12_POLL_WAIT     = 0x00000078,
SEM_PERF_SEL_CPC1_OFFL_E13_POLL_WAIT     = 0x00000079,
SEM_PERF_SEL_CPC1_OFFL_E14_POLL_WAIT     = 0x0000007a,
SEM_PERF_SEL_CPC1_OFFL_E15_POLL_WAIT     = 0x0000007b,
SEM_PERF_SEL_CPC1_OFFL_E16_POLL_WAIT     = 0x0000007c,
SEM_PERF_SEL_CPC1_OFFL_E17_POLL_WAIT     = 0x0000007d,
SEM_PERF_SEL_CPC1_OFFL_E18_POLL_WAIT     = 0x0000007e,
SEM_PERF_SEL_CPC1_OFFL_E19_POLL_WAIT     = 0x0000007f,
SEM_PERF_SEL_CPC1_OFFL_E20_POLL_WAIT     = 0x00000080,
SEM_PERF_SEL_CPC1_OFFL_E21_POLL_WAIT     = 0x00000081,
SEM_PERF_SEL_CPC1_OFFL_E22_POLL_WAIT     = 0x00000082,
SEM_PERF_SEL_CPC1_OFFL_E23_POLL_WAIT     = 0x00000083,
SEM_PERF_SEL_CPC1_OFFL_E24_POLL_WAIT     = 0x00000084,
SEM_PERF_SEL_CPC1_OFFL_E25_POLL_WAIT     = 0x00000085,
SEM_PERF_SEL_CPC1_OFFL_E26_POLL_WAIT     = 0x00000086,
SEM_PERF_SEL_CPC1_OFFL_E27_POLL_WAIT     = 0x00000087,
SEM_PERF_SEL_CPC1_OFFL_E28_POLL_WAIT     = 0x00000088,
SEM_PERF_SEL_CPC1_OFFL_E29_POLL_WAIT     = 0x00000089,
SEM_PERF_SEL_CPC1_OFFL_E30_POLL_WAIT     = 0x0000008a,
SEM_PERF_SEL_CPC1_OFFL_E31_POLL_WAIT     = 0x0000008b,
SEM_PERF_SEL_CPC2_OFFL_E0_POLL_WAIT      = 0x0000008c,
SEM_PERF_SEL_CPC2_OFFL_E1_POLL_WAIT      = 0x0000008d,
SEM_PERF_SEL_CPC2_OFFL_E2_POLL_WAIT      = 0x0000008e,
SEM_PERF_SEL_CPC2_OFFL_E3_POLL_WAIT      = 0x0000008f,
SEM_PERF_SEL_CPC2_OFFL_E4_POLL_WAIT      = 0x00000090,
SEM_PERF_SEL_CPC2_OFFL_E5_POLL_WAIT      = 0x00000091,
SEM_PERF_SEL_CPC2_OFFL_E6_POLL_WAIT      = 0x00000092,
SEM_PERF_SEL_CPC2_OFFL_E7_POLL_WAIT      = 0x00000093,
SEM_PERF_SEL_CPC2_OFFL_E8_POLL_WAIT      = 0x00000094,
SEM_PERF_SEL_CPC2_OFFL_E9_POLL_WAIT      = 0x00000095,
SEM_PERF_SEL_CPC2_OFFL_E10_POLL_WAIT     = 0x00000096,
SEM_PERF_SEL_CPC2_OFFL_E11_POLL_WAIT     = 0x00000097,
SEM_PERF_SEL_CPC2_OFFL_E12_POLL_WAIT     = 0x00000098,
SEM_PERF_SEL_CPC2_OFFL_E13_POLL_WAIT     = 0x00000099,
SEM_PERF_SEL_CPC2_OFFL_E14_POLL_WAIT     = 0x0000009a,
SEM_PERF_SEL_CPC2_OFFL_E15_POLL_WAIT     = 0x0000009b,
SEM_PERF_SEL_CPC2_OFFL_E16_POLL_WAIT     = 0x0000009c,
SEM_PERF_SEL_CPC2_OFFL_E17_POLL_WAIT     = 0x0000009d,
SEM_PERF_SEL_CPC2_OFFL_E18_POLL_WAIT     = 0x0000009e,
SEM_PERF_SEL_CPC2_OFFL_E19_POLL_WAIT     = 0x0000009f,
SEM_PERF_SEL_CPC2_OFFL_E20_POLL_WAIT     = 0x000000a0,
SEM_PERF_SEL_CPC2_OFFL_E21_POLL_WAIT     = 0x000000a1,
SEM_PERF_SEL_CPC2_OFFL_E22_POLL_WAIT     = 0x000000a2,
SEM_PERF_SEL_CPC2_OFFL_E23_POLL_WAIT     = 0x000000a3,
SEM_PERF_SEL_CPC2_OFFL_E24_POLL_WAIT     = 0x000000a4,
SEM_PERF_SEL_CPC2_OFFL_E25_POLL_WAIT     = 0x000000a5,
SEM_PERF_SEL_CPC2_OFFL_E26_POLL_WAIT     = 0x000000a6,
SEM_PERF_SEL_CPC2_OFFL_E27_POLL_WAIT     = 0x000000a7,
SEM_PERF_SEL_CPC2_OFFL_E28_POLL_WAIT     = 0x000000a8,
SEM_PERF_SEL_CPC2_OFFL_E29_POLL_WAIT     = 0x000000a9,
SEM_PERF_SEL_CPC2_OFFL_E30_POLL_WAIT     = 0x000000aa,
SEM_PERF_SEL_CPC2_OFFL_E31_POLL_WAIT     = 0x000000ab,
SEM_PERF_SEL_MC_RD_REQ                   = 0x000000ac,
SEM_PERF_SEL_MC_RD_RET                   = 0x000000ad,
SEM_PERF_SEL_MC_WR_REQ                   = 0x000000ae,
SEM_PERF_SEL_MC_WR_RET                   = 0x000000af,
SEM_PERF_SEL_ATC_REQ                     = 0x000000b0,
SEM_PERF_SEL_ATC_RET                     = 0x000000b1,
SEM_PERF_SEL_ATC_XNACK                   = 0x000000b2,
SEM_PERF_SEL_ATC_INVALIDATION            = 0x000000b3,
SEM_PERF_SEL_ATC_VM_INVALIDATION         = 0x000000b4,
} SEM_PERF_SEL;

/*******************************************************
 * LSDMA Enums
 *******************************************************/

/*
 * LSDMA_PERF_SEL enum
 */

typedef enum LSDMA_PERF_SEL {
LSDMA_PERF_SEL_CYCLE                     = 0x00000000,
LSDMA_PERF_SEL_IDLE                      = 0x00000001,
LSDMA_PERF_SEL_REG_IDLE                  = 0x00000002,
LSDMA_PERF_SEL_RB_EMPTY                  = 0x00000003,
LSDMA_PERF_SEL_RB_FULL                   = 0x00000004,
LSDMA_PERF_SEL_RB_WPTR_WRAP              = 0x00000005,
LSDMA_PERF_SEL_RB_RPTR_WRAP              = 0x00000006,
LSDMA_PERF_SEL_RB_WPTR_POLL_READ         = 0x00000007,
LSDMA_PERF_SEL_RB_RPTR_WB                = 0x00000008,
LSDMA_PERF_SEL_RB_CMD_IDLE               = 0x00000009,
LSDMA_PERF_SEL_RB_CMD_FULL               = 0x0000000a,
LSDMA_PERF_SEL_IB_CMD_IDLE               = 0x0000000b,
LSDMA_PERF_SEL_IB_CMD_FULL               = 0x0000000c,
LSDMA_PERF_SEL_EX_IDLE                   = 0x0000000d,
LSDMA_PERF_SEL_SRBM_REG_SEND             = 0x0000000e,
LSDMA_PERF_SEL_EX_IDLE_POLL_TIMER_EXPIRE = 0x0000000f,
LSDMA_PERF_SEL_MC_WR_IDLE                = 0x00000010,
LSDMA_PERF_SEL_MC_WR_COUNT               = 0x00000011,
LSDMA_PERF_SEL_MC_RD_IDLE                = 0x00000012,
LSDMA_PERF_SEL_MC_RD_COUNT               = 0x00000013,
LSDMA_PERF_SEL_MC_RD_RET_STALL           = 0x00000014,
LSDMA_PERF_SEL_MC_RD_NO_POLL_IDLE        = 0x00000015,
LSDMA_PERF_SEL_SEM_IDLE                  = 0x00000018,
LSDMA_PERF_SEL_SEM_REQ_STALL             = 0x00000019,
LSDMA_PERF_SEL_SEM_REQ_COUNT             = 0x0000001a,
LSDMA_PERF_SEL_SEM_RESP_INCOMPLETE       = 0x0000001b,
LSDMA_PERF_SEL_SEM_RESP_FAIL             = 0x0000001c,
LSDMA_PERF_SEL_SEM_RESP_PASS             = 0x0000001d,
LSDMA_PERF_SEL_INT_IDLE                  = 0x0000001e,
LSDMA_PERF_SEL_INT_REQ_STALL             = 0x0000001f,
LSDMA_PERF_SEL_INT_REQ_COUNT             = 0x00000020,
LSDMA_PERF_SEL_INT_RESP_ACCEPTED         = 0x00000021,
LSDMA_PERF_SEL_INT_RESP_RETRY            = 0x00000022,
LSDMA_PERF_SEL_NUM_PACKET                = 0x00000023,
LSDMA_PERF_SEL_CE_WREQ_IDLE              = 0x00000025,
LSDMA_PERF_SEL_CE_WR_IDLE                = 0x00000026,
LSDMA_PERF_SEL_CE_SPLIT_IDLE             = 0x00000027,
LSDMA_PERF_SEL_CE_RREQ_IDLE              = 0x00000028,
LSDMA_PERF_SEL_CE_OUT_IDLE               = 0x00000029,
LSDMA_PERF_SEL_CE_IN_IDLE                = 0x0000002a,
LSDMA_PERF_SEL_CE_DST_IDLE               = 0x0000002b,
LSDMA_PERF_SEL_CE_AFIFO_FULL             = 0x0000002e,
LSDMA_PERF_SEL_CE_INFO_FULL              = 0x00000031,
LSDMA_PERF_SEL_CE_INFO1_FULL             = 0x00000032,
LSDMA_PERF_SEL_CE_RD_STALL               = 0x00000033,
LSDMA_PERF_SEL_CE_WR_STALL               = 0x00000034,
LSDMA_PERF_SEL_GFX_SELECT                = 0x00000035,
LSDMA_PERF_SEL_RLC0_SELECT               = 0x00000036,
LSDMA_PERF_SEL_RLC1_SELECT               = 0x00000037,
LSDMA_PERF_SEL_PAGE_SELECT               = 0x00000038,
LSDMA_PERF_SEL_CTX_CHANGE                = 0x00000039,
LSDMA_PERF_SEL_CTX_CHANGE_EXPIRED        = 0x0000003a,
LSDMA_PERF_SEL_CTX_CHANGE_EXCEPTION      = 0x0000003b,
LSDMA_PERF_SEL_DOORBELL                  = 0x0000003c,
LSDMA_PERF_SEL_RD_BA_RTR                 = 0x0000003d,
LSDMA_PERF_SEL_WR_BA_RTR                 = 0x0000003e,
LSDMA_PERF_SEL_F32_L1_WR_VLD             = 0x0000003f,
LSDMA_PERF_SEL_CE_L1_WR_VLD              = 0x00000040,
LSDMA_PERF_SEL_CE_L1_STALL               = 0x00000041,
LSDMA_PERF_SEL_SDMA_INVACK_NFLUSH        = 0x00000042,
LSDMA_PERF_SEL_SDMA_INVACK_FLUSH         = 0x00000043,
LSDMA_PERF_SEL_ATCL2_INVREQ_NFLUSH       = 0x00000044,
LSDMA_PERF_SEL_ATCL2_INVREQ_FLUSH        = 0x00000045,
LSDMA_PERF_SEL_ATCL2_RET_XNACK           = 0x00000046,
LSDMA_PERF_SEL_ATCL2_RET_ACK             = 0x00000047,
LSDMA_PERF_SEL_ATCL2_FREE                = 0x00000048,
LSDMA_PERF_SEL_SDMA_ATCL2_SEND           = 0x00000049,
LSDMA_PERF_SEL_DMA_L1_WR_SEND            = 0x0000004a,
LSDMA_PERF_SEL_DMA_L1_RD_SEND            = 0x0000004b,
LSDMA_PERF_SEL_DMA_MC_WR_SEND            = 0x0000004c,
LSDMA_PERF_SEL_DMA_MC_RD_SEND            = 0x0000004d,
LSDMA_PERF_SEL_L1_WR_FIFO_IDLE           = 0x0000004e,
LSDMA_PERF_SEL_L1_RD_FIFO_IDLE           = 0x0000004f,
LSDMA_PERF_SEL_L1_WRL2_IDLE              = 0x00000050,
LSDMA_PERF_SEL_L1_RDL2_IDLE              = 0x00000051,
LSDMA_PERF_SEL_L1_WRMC_IDLE              = 0x00000052,
LSDMA_PERF_SEL_L1_RDMC_IDLE              = 0x00000053,
LSDMA_PERF_SEL_L1_WR_INV_IDLE            = 0x00000054,
LSDMA_PERF_SEL_L1_RD_INV_IDLE            = 0x00000055,
LSDMA_PERF_SEL_L1_WR_INV_EN              = 0x00000056,
LSDMA_PERF_SEL_L1_RD_INV_EN              = 0x00000057,
LSDMA_PERF_SEL_L1_WR_WAIT_INVADR         = 0x00000058,
LSDMA_PERF_SEL_L1_RD_WAIT_INVADR         = 0x00000059,
LSDMA_PERF_SEL_IS_INVREQ_ADDR_WR         = 0x0000005a,
LSDMA_PERF_SEL_IS_INVREQ_ADDR_RD         = 0x0000005b,
LSDMA_PERF_SEL_L1_WR_XNACK_TIMEOUT       = 0x0000005c,
LSDMA_PERF_SEL_L1_RD_XNACK_TIMEOUT       = 0x0000005d,
LSDMA_PERF_SEL_L1_INV_MIDDLE             = 0x0000005e,
LSDMA_PERF_SEL_CE_OR_F32_MMHUB_WR_REQ    = 0x0000005f,
LSDMA_PERF_SEL_CE_OR_F32_MMHUB_WR_RET    = 0x00000060,
LSDMA_PERF_SEL_ATOMIC_MMHUB_WR_REQ       = 0x00000061,
LSDMA_PERF_SEL_ATOMIC_MMHUB_WR_RET       = 0x00000062,
LSDMA_PERF_SEL_CE_OR_F32_MMHUB_RD_REQ    = 0x00000063,
LSDMA_PERF_SEL_CE_OR_F32_MMHUB_RD_RET    = 0x00000064,
LSDMA_PERF_SEL_RB_MMHUB_RD_REQ           = 0x00000065,
LSDMA_PERF_SEL_RB_MMHUB_RD_RET           = 0x00000066,
LSDMA_PERF_SEL_IB_MMHUB_RD_REQ           = 0x00000067,
LSDMA_PERF_SEL_IB_MMHUB_RD_RET           = 0x00000068,
LSDMA_PERF_SEL_WPTR_MMHUB_RD_REQ         = 0x00000069,
LSDMA_PERF_SEL_WPTR_MMHUB_RD_RET         = 0x0000006a,
LSDMA_PERF_SEL_UTCL1_UTCL2_REQ           = 0x0000006b,
LSDMA_PERF_SEL_UTCL1_UTCL2_RET           = 0x0000006c,
LSDMA_PERF_SEL_CMD_OP_MATCH              = 0x0000006d,
LSDMA_PERF_SEL_CMD_OP_START              = 0x0000006e,
LSDMA_PERF_SEL_CMD_OP_END                = 0x0000006f,
LSDMA_PERF_SEL_CE_BUSY                   = 0x00000070,
LSDMA_PERF_SEL_CE_BUSY_START             = 0x00000071,
LSDMA_PERF_SEL_CE_BUSY_END               = 0x00000072,
LSDMA_PERF_SEL_F32_PERFCNT_TRIGGER       = 0x00000073,
LSDMA_PERF_SEL_F32_PERFCNT_TRIGGER_START = 0x00000074,
LSDMA_PERF_SEL_F32_PERFCNT_TRIGGER_END   = 0x00000075,
LSDMA_PERF_SEL_CE_MMHUB_WRREQ_SEND       = 0x00000076,
LSDMA_PERF_SEL_MMHUB_CE_WRRET_VALID      = 0x00000077,
LSDMA_PERF_SEL_CE_MMHUB_RDREQ_SEND       = 0x00000078,
LSDMA_PERF_SEL_MMHUB_CE_RDRET_VALID      = 0x00000079,
LSDMA_PERF_SEL_DRAM_ECC                  = 0x0000007a,
LSDMA_PERF_SEL_NACK_GEN_ERR              = 0x0000007b,
} LSDMA_PERF_SEL;

/*******************************************************
 * SMUIO_ROM Enums
 *******************************************************/

/*
 * ROM_SIGNATURE value
 */

#define ROM_SIGNATURE                  0x0000aa55

/*******************************************************
 * UVD_EFC Enums
 *******************************************************/

/*
 * EFC_SURFACE_PIXEL_FORMAT enum
 */

typedef enum EFC_SURFACE_PIXEL_FORMAT {
EFC_ARGB1555                             = 0x00000001,
EFC_RGBA5551                             = 0x00000002,
EFC_RGB565                               = 0x00000003,
EFC_BGR565                               = 0x00000004,
EFC_ARGB4444                             = 0x00000005,
EFC_RGBA4444                             = 0x00000006,
EFC_ARGB8888                             = 0x00000008,
EFC_RGBA8888                             = 0x00000009,
EFC_ARGB2101010                          = 0x0000000a,
EFC_RGBA1010102                          = 0x0000000b,
EFC_AYCrCb8888                           = 0x0000000c,
EFC_YCrCbA8888                           = 0x0000000d,
EFC_ACrYCb8888                           = 0x0000000e,
EFC_CrYCbA8888                           = 0x0000000f,
EFC_ARGB16161616_10MSB                   = 0x00000010,
EFC_RGBA16161616_10MSB                   = 0x00000011,
EFC_ARGB16161616_10LSB                   = 0x00000012,
EFC_RGBA16161616_10LSB                   = 0x00000013,
EFC_ARGB16161616_12MSB                   = 0x00000014,
EFC_RGBA16161616_12MSB                   = 0x00000015,
EFC_ARGB16161616_12LSB                   = 0x00000016,
EFC_RGBA16161616_12LSB                   = 0x00000017,
EFC_ARGB16161616_FLOAT                   = 0x00000018,
EFC_RGBA16161616_FLOAT                   = 0x00000019,
EFC_ARGB16161616_UNORM                   = 0x0000001a,
EFC_RGBA16161616_UNORM                   = 0x0000001b,
EFC_ARGB16161616_SNORM                   = 0x0000001c,
EFC_RGBA16161616_SNORM                   = 0x0000001d,
EFC_AYCrCb16161616_10MSB                 = 0x00000020,
EFC_AYCrCb16161616_10LSB                 = 0x00000021,
EFC_YCrCbA16161616_10MSB                 = 0x00000022,
EFC_YCrCbA16161616_10LSB                 = 0x00000023,
EFC_ACrYCb16161616_10MSB                 = 0x00000024,
EFC_ACrYCb16161616_10LSB                 = 0x00000025,
EFC_CrYCbA16161616_10MSB                 = 0x00000026,
EFC_CrYCbA16161616_10LSB                 = 0x00000027,
EFC_AYCrCb16161616_12MSB                 = 0x00000028,
EFC_AYCrCb16161616_12LSB                 = 0x00000029,
EFC_YCrCbA16161616_12MSB                 = 0x0000002a,
EFC_YCrCbA16161616_12LSB                 = 0x0000002b,
EFC_ACrYCb16161616_12MSB                 = 0x0000002c,
EFC_ACrYCb16161616_12LSB                 = 0x0000002d,
EFC_CrYCbA16161616_12MSB                 = 0x0000002e,
EFC_CrYCbA16161616_12LSB                 = 0x0000002f,
EFC_Y8_CrCb88_420_PLANAR                 = 0x00000040,
EFC_Y8_CbCr88_420_PLANAR                 = 0x00000041,
EFC_Y10_CrCb1010_420_PLANAR              = 0x00000042,
EFC_Y10_CbCr1010_420_PLANAR              = 0x00000043,
EFC_Y12_CrCb1212_420_PLANAR              = 0x00000044,
EFC_Y12_CbCr1212_420_PLANAR              = 0x00000045,
EFC_YCrYCb8888_422_PACKED                = 0x00000048,
EFC_YCbYCr8888_422_PACKED                = 0x00000049,
EFC_CrYCbY8888_422_PACKED                = 0x0000004a,
EFC_CbYCrY8888_422_PACKED                = 0x0000004b,
EFC_YCrYCb10101010_422_PACKED            = 0x0000004c,
EFC_YCbYCr10101010_422_PACKED            = 0x0000004d,
EFC_CrYCbY10101010_422_PACKED            = 0x0000004e,
EFC_CbYCrY10101010_422_PACKED            = 0x0000004f,
EFC_YCrYCb12121212_422_PACKED            = 0x00000050,
EFC_YCbYCr12121212_422_PACKED            = 0x00000051,
EFC_CrYCbY12121212_422_PACKED            = 0x00000052,
EFC_CbYCrY12121212_422_PACKED            = 0x00000053,
EFC_RGB111110_FIX                        = 0x00000070,
EFC_BGR101111_FIX                        = 0x00000071,
EFC_ACrYCb2101010                        = 0x00000072,
EFC_CrYCbA1010102                        = 0x00000073,
EFC_RGB111110_FLOAT                      = 0x00000076,
EFC_BGR101111_FLOAT                      = 0x00000077,
EFC_MONO_8                               = 0x00000078,
EFC_MONO_10MSB                           = 0x00000079,
EFC_MONO_10LSB                           = 0x0000007a,
EFC_MONO_12MSB                           = 0x0000007b,
EFC_MONO_12LSB                           = 0x0000007c,
EFC_MONO_16                              = 0x0000007d,
} EFC_SURFACE_PIXEL_FORMAT;

#endif /*_soc21_ENUM_HEADER*/
/*
 * Copyright 2018 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __SOC15_IH_CLIENTID_H__
#define __SOC15_IH_CLIENTID_H__

/*
 * Vega10+ IH clients
 * Whenever this structure is updated, which should not happen, make sure
 * soc15_ih_clientid_name in the below is also updated accordingly.
 */
enum soc15_ih_clientid {
	SOC15_IH_CLIENTID_IH		= 0x00,
	SOC15_IH_CLIENTID_ACP		= 0x01,
	SOC15_IH_CLIENTID_ATHUB		= 0x02,
	SOC15_IH_CLIENTID_BIF		= 0x03,
	SOC15_IH_CLIENTID_DCE		= 0x04,
	SOC15_IH_CLIENTID_ISP		= 0x05,
	SOC15_IH_CLIENTID_PCIE0		= 0x06,
	SOC15_IH_CLIENTID_RLC		= 0x07,
	SOC15_IH_CLIENTID_SDMA0		= 0x08,
	SOC15_IH_CLIENTID_SDMA1		= 0x09,
	SOC15_IH_CLIENTID_SE0SH		= 0x0a,
	SOC15_IH_CLIENTID_SE1SH		= 0x0b,
	SOC15_IH_CLIENTID_SE2SH		= 0x0c,
	SOC15_IH_CLIENTID_SE3SH		= 0x0d,
	SOC15_IH_CLIENTID_UVD1		= 0x0e,
	SOC15_IH_CLIENTID_THM		= 0x0f,
	SOC15_IH_CLIENTID_UVD		= 0x10,
	SOC15_IH_CLIENTID_VCE0		= 0x11,
	SOC15_IH_CLIENTID_VMC		= 0x12,
	SOC15_IH_CLIENTID_XDMA		= 0x13,
	SOC15_IH_CLIENTID_GRBM_CP	= 0x14,
	SOC15_IH_CLIENTID_ATS		= 0x15,
	SOC15_IH_CLIENTID_ROM_SMUIO	= 0x16,
	SOC15_IH_CLIENTID_DF		= 0x17,
	SOC15_IH_CLIENTID_VCE1		= 0x18,
	SOC15_IH_CLIENTID_PWR		= 0x19,
	SOC15_IH_CLIENTID_RESERVED	= 0x1a,
	SOC15_IH_CLIENTID_UTCL2		= 0x1b,
	SOC15_IH_CLIENTID_EA		= 0x1c,
	SOC15_IH_CLIENTID_UTCL2LOG	= 0x1d,
	SOC15_IH_CLIENTID_MP0		= 0x1e,
	SOC15_IH_CLIENTID_MP1		= 0x1f,

	SOC15_IH_CLIENTID_MAX,

	SOC15_IH_CLIENTID_VCN		= SOC15_IH_CLIENTID_UVD,
	SOC15_IH_CLIENTID_VCN1		= SOC15_IH_CLIENTID_UVD1,
	SOC15_IH_CLIENTID_SDMA2		= SOC15_IH_CLIENTID_ACP,
	SOC15_IH_CLIENTID_SDMA3		= SOC15_IH_CLIENTID_DCE,
	SOC15_IH_CLIENTID_SDMA3_Sienna_Cichlid    = SOC15_IH_CLIENTID_ISP,
	SOC15_IH_CLIENTID_SDMA4		= SOC15_IH_CLIENTID_ISP,
	SOC15_IH_CLIENTID_SDMA5		= SOC15_IH_CLIENTID_VCE0,
	SOC15_IH_CLIENTID_SDMA6		= SOC15_IH_CLIENTID_XDMA,
	SOC15_IH_CLIENTID_SDMA7		= SOC15_IH_CLIENTID_VCE1,
	SOC15_IH_CLIENTID_VMC1		= SOC15_IH_CLIENTID_PCIE0,
};

extern const char *soc15_ih_clientid_name[];

/*
 * soc21 IH clients
 */
enum soc21_ih_clientid {
	SOC21_IH_CLIENTID_IH		= 0x00,
	SOC21_IH_CLIENTID_ATHUB		= 0x02,
	SOC21_IH_CLIENTID_BIF		= 0x03,
	SOC21_IH_CLIENTID_DCN		= 0x04,
	SOC21_IH_CLIENTID_ISP		= 0x05,
	SOC21_IH_CLIENTID_MP3		= 0x06,
	SOC21_IH_CLIENTID_RLC		= 0x07,
	SOC21_IH_CLIENTID_GFX		= 0x0a,
	SOC21_IH_CLIENTID_IMU		= 0x0b,
	SOC21_IH_CLIENTID_VCN1		= 0x0e,
	SOC21_IH_CLIENTID_THM		= 0x0f,
	SOC21_IH_CLIENTID_VCN		= 0x10,
	SOC21_IH_CLIENTID_VMC		= 0x12,
	SOC21_IH_CLIENTID_GRBM_CP	= 0x14,
	SOC21_IH_CLIENTID_ROM_SMUIO	= 0x16,
	SOC21_IH_CLIENTID_DF		= 0x17,
	SOC21_IH_CLIENTID_PWR		= 0x19,
	SOC21_IH_CLIENTID_LSDMA		= 0x1a,
	SOC21_IH_CLIENTID_MP0		= 0x1e,
	SOC21_IH_CLIENTID_MP1		= 0x1f,
	SOC21_IH_CLIENTID_MAX,
};

#endif


/*
 * Copyright (C) 2018  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _soc15_hw_ip_HEADER
#define _soc15_hw_ip_HEADER

// HW ID
#define MP1_HWID                                           1
#define MP2_HWID                                           2
#define THM_HWID                                           3
#define SMUIO_HWID                                         4
#define FUSE_HWID                                          5
#define CLKA_HWID                                          6
#define PWR_HWID                                          10
#define GC_HWID                                           11
#define UVD_HWID                                          12
#define VCN_HWID                                          UVD_HWID
#define AUDIO_AZ_HWID                                     13
#define ACP_HWID                                          14
#define DCI_HWID                                          15
#define DMU_HWID                                         271
#define DCO_HWID                                          16
#define DIO_HWID                                         272
#define XDMA_HWID                                         17
#define DCEAZ_HWID                                        18
#define DAZ_HWID                                         274
#define SDPMUX_HWID                                       19
#define NTB_HWID                                          20
#define IOHC_HWID                                         24
#define L2IMU_HWID                                        28
#define VCE_HWID                                          32
#define MMHUB_HWID                                        34
#define ATHUB_HWID                                        35
#define DBGU_NBIO_HWID                                    36
#define DFX_HWID                                          37
#define DBGU0_HWID                                        38
#define DBGU1_HWID                                        39
#define OSSSYS_HWID                                       40
#define HDP_HWID                                          41
#define SDMA0_HWID                                        42
#define SDMA1_HWID                                        43
#define ISP_HWID                                          44
#define DBGU_IO_HWID                                      45
#define DF_HWID                                           46
#define CLKB_HWID                                         47
#define FCH_HWID                                          48
#define DFX_DAP_HWID                                      49
#define L1IMU_PCIE_HWID                                   50
#define L1IMU_NBIF_HWID                                   51
#define L1IMU_IOAGR_HWID                                  52
#define L1IMU3_HWID                                       53
#define L1IMU4_HWID                                       54
#define L1IMU5_HWID                                       55
#define L1IMU6_HWID                                       56
#define L1IMU7_HWID                                       57
#define L1IMU8_HWID                                       58
#define L1IMU9_HWID                                       59
#define L1IMU10_HWID                                      60
#define L1IMU11_HWID                                      61
#define L1IMU12_HWID                                      62
#define L1IMU13_HWID                                      63
#define L1IMU14_HWID                                      64
#define L1IMU15_HWID                                      65
#define WAFLC_HWID                                        66
#define FCH_USB_PD_HWID                                   67
#define SDMA2_HWID                                        68
#define SDMA3_HWID                                        69
#define PCIE_HWID                                         70
#define PCS_HWID                                          80
#define DDCL_HWID                                         89
#define SST_HWID                                          90
#define LSDMA_HWID                                        91
#define IOAGR_HWID                                       100
#define NBIF_HWID                                        108
#define IOAPIC_HWID                                      124
#define SYSTEMHUB_HWID                                   128
#define NTBCCP_HWID                                      144
#define UMC_HWID                                         150
#define SATA_HWID                                        168
#define USB_HWID                                         170
#define CCXSEC_HWID                                      176
#define XGMI_HWID                                        200
#define XGBE_HWID                                        216
#define MP0_HWID                                         255

#endif
/*
 * Copyright (C) 2019  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _sienna_cichlid_ip_offset_HEADER
#define _sienna_cichlid_ip_offset_HEADER

#define MAX_INSTANCE                                        7
#define MAX_SEGMENT                                         5


struct IP_BASE_INSTANCE
{
    unsigned int segment[MAX_SEGMENT];
};

struct IP_BASE
{
    struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
} __maybe_unused;


static const struct IP_BASE ATHUB_BASE = { { { { 0x00000C00, 0x02408C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE CLK_BASE = { { { { 0x00016C00, 0x02401800, 0, 0, 0 } },
                                        { { 0x00016E00, 0x02401C00, 0, 0, 0 } },
                                        { { 0x00017000, 0x02402000, 0, 0, 0 } },
                                        { { 0x00017200, 0x02402400, 0, 0, 0 } },
                                        { { 0x0001B000, 0x0242D800, 0, 0, 0 } },
                                        { { 0x0001B200, 0x0242DC00, 0, 0, 0 } },
                                        { { 0x0001B400, 0x0242E000, 0, 0, 0 } } } };
static const struct IP_BASE DF_BASE = { { { { 0x00007000, 0x0240B800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DIO_BASE = { { { { 0x02404000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DCN_BASE = { { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DPCS_BASE = { { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FUSE_BASE = { { { { 0x00017400, 0x02401400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE GC_BASE = { { { { 0x00001260, 0x0000A000, 0x0001C000, 0x02402C00, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDA_BASE = { { { { 0x004C0000, 0x02404800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDP_BASE = { { { { 0x00000F20, 0x0240A400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MMHUB_BASE = { { { { 0x0001A000, 0x02408800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP0_BASE = { { { { 0x00016000, 0x00DC0000, 0x00E00000, 0x00E40000, 0x0243FC00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP1_BASE = { { { { 0x00016000, 0x00DC0000, 0x00E00000, 0x00E40000, 0x0243FC00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE NBIO_BASE = { { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE OSSSYS_BASE = { { { { 0x000010A0, 0x0240A000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE PCIE0_BASE = { { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SDMA0_BASE = { { { { 0x00001260, 0x0000A000, 0x0001C000, 0x02402C00, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SDMA1_BASE = { { { { 0x00001260, 0x0000A000, 0x0001C000, 0x02402C00, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SMUIO_BASE = { { { { 0x00016800, 0x00016A00, 0x00440000, 0x02401000, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE THM_BASE = { { { { 0x00016600, 0x02400C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UMC_BASE = { { { { 0x00014000, 0x02425800, 0, 0, 0 } },
                                        { { 0x00054000, 0x02425C00, 0, 0, 0 } },
                                        { { 0x00094000, 0x02426000, 0, 0, 0 } },
                                        { { 0x000D4000, 0x02426400, 0, 0, 0 } },
                                        { { 0x00114000, 0x02426800, 0, 0, 0 } },
                                        { { 0x00154000, 0x02426C00, 0, 0, 0 } },
                                        { { 0x00194000, 0x02427000, 0, 0, 0 } } } };
static const struct IP_BASE USB0_BASE = { { { { 0x0242A800, 0x05B00000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE VCN_BASE = { { { { 0x00007800, 0x00007E00, 0x02403000, 0, 0 } },
                                        { { 0x00007B00, 0x00012000, 0x02445000, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };


#define ATHUB_BASE__INST0_SEG0                     0x00000C00
#define ATHUB_BASE__INST0_SEG1                     0x02408C00
#define ATHUB_BASE__INST0_SEG2                     0
#define ATHUB_BASE__INST0_SEG3                     0
#define ATHUB_BASE__INST0_SEG4                     0

#define ATHUB_BASE__INST1_SEG0                     0
#define ATHUB_BASE__INST1_SEG1                     0
#define ATHUB_BASE__INST1_SEG2                     0
#define ATHUB_BASE__INST1_SEG3                     0
#define ATHUB_BASE__INST1_SEG4                     0

#define ATHUB_BASE__INST2_SEG0                     0
#define ATHUB_BASE__INST2_SEG1                     0
#define ATHUB_BASE__INST2_SEG2                     0
#define ATHUB_BASE__INST2_SEG3                     0
#define ATHUB_BASE__INST2_SEG4                     0

#define ATHUB_BASE__INST3_SEG0                     0
#define ATHUB_BASE__INST3_SEG1                     0
#define ATHUB_BASE__INST3_SEG2                     0
#define ATHUB_BASE__INST3_SEG3                     0
#define ATHUB_BASE__INST3_SEG4                     0

#define ATHUB_BASE__INST4_SEG0                     0
#define ATHUB_BASE__INST4_SEG1                     0
#define ATHUB_BASE__INST4_SEG2                     0
#define ATHUB_BASE__INST4_SEG3                     0
#define ATHUB_BASE__INST4_SEG4                     0

#define ATHUB_BASE__INST5_SEG0                     0
#define ATHUB_BASE__INST5_SEG1                     0
#define ATHUB_BASE__INST5_SEG2                     0
#define ATHUB_BASE__INST5_SEG3                     0
#define ATHUB_BASE__INST5_SEG4                     0

#define ATHUB_BASE__INST6_SEG0                     0
#define ATHUB_BASE__INST6_SEG1                     0
#define ATHUB_BASE__INST6_SEG2                     0
#define ATHUB_BASE__INST6_SEG3                     0
#define ATHUB_BASE__INST6_SEG4                     0

#define CLK_BASE__INST0_SEG0                       0x00016C00
#define CLK_BASE__INST0_SEG1                       0x02401800
#define CLK_BASE__INST0_SEG2                       0
#define CLK_BASE__INST0_SEG3                       0
#define CLK_BASE__INST0_SEG4                       0

#define CLK_BASE__INST1_SEG0                       0x00016E00
#define CLK_BASE__INST1_SEG1                       0x02401C00
#define CLK_BASE__INST1_SEG2                       0
#define CLK_BASE__INST1_SEG3                       0
#define CLK_BASE__INST1_SEG4                       0

#define CLK_BASE__INST2_SEG0                       0x00017000
#define CLK_BASE__INST2_SEG1                       0x02402000
#define CLK_BASE__INST2_SEG2                       0
#define CLK_BASE__INST2_SEG3                       0
#define CLK_BASE__INST2_SEG4                       0

#define CLK_BASE__INST3_SEG0                       0x00017200
#define CLK_BASE__INST3_SEG1                       0x02402400
#define CLK_BASE__INST3_SEG2                       0
#define CLK_BASE__INST3_SEG3                       0
#define CLK_BASE__INST3_SEG4                       0

#define CLK_BASE__INST4_SEG0                       0x0001B000
#define CLK_BASE__INST4_SEG1                       0x0242D800
#define CLK_BASE__INST4_SEG2                       0
#define CLK_BASE__INST4_SEG3                       0
#define CLK_BASE__INST4_SEG4                       0

#define CLK_BASE__INST5_SEG0                       0x0001B200
#define CLK_BASE__INST5_SEG1                       0x0242DC00
#define CLK_BASE__INST5_SEG2                       0
#define CLK_BASE__INST5_SEG3                       0
#define CLK_BASE__INST5_SEG4                       0

#define CLK_BASE__INST6_SEG0                       0x0001B400
#define CLK_BASE__INST6_SEG1                       0x0242E000
#define CLK_BASE__INST6_SEG2                       0
#define CLK_BASE__INST6_SEG3                       0
#define CLK_BASE__INST6_SEG4                       0

#define DF_BASE__INST0_SEG0                        0x00007000
#define DF_BASE__INST0_SEG1                        0x0240B800
#define DF_BASE__INST0_SEG2                        0
#define DF_BASE__INST0_SEG3                        0
#define DF_BASE__INST0_SEG4                        0

#define DF_BASE__INST1_SEG0                        0
#define DF_BASE__INST1_SEG1                        0
#define DF_BASE__INST1_SEG2                        0
#define DF_BASE__INST1_SEG3                        0
#define DF_BASE__INST1_SEG4                        0

#define DF_BASE__INST2_SEG0                        0
#define DF_BASE__INST2_SEG1                        0
#define DF_BASE__INST2_SEG2                        0
#define DF_BASE__INST2_SEG3                        0
#define DF_BASE__INST2_SEG4                        0

#define DF_BASE__INST3_SEG0                        0
#define DF_BASE__INST3_SEG1                        0
#define DF_BASE__INST3_SEG2                        0
#define DF_BASE__INST3_SEG3                        0
#define DF_BASE__INST3_SEG4                        0

#define DF_BASE__INST4_SEG0                        0
#define DF_BASE__INST4_SEG1                        0
#define DF_BASE__INST4_SEG2                        0
#define DF_BASE__INST4_SEG3                        0
#define DF_BASE__INST4_SEG4                        0

#define DF_BASE__INST5_SEG0                        0
#define DF_BASE__INST5_SEG1                        0
#define DF_BASE__INST5_SEG2                        0
#define DF_BASE__INST5_SEG3                        0
#define DF_BASE__INST5_SEG4                        0

#define DF_BASE__INST6_SEG0                        0
#define DF_BASE__INST6_SEG1                        0
#define DF_BASE__INST6_SEG2                        0
#define DF_BASE__INST6_SEG3                        0
#define DF_BASE__INST6_SEG4                        0

#define DIO_BASE__INST0_SEG0                       0x02404000
#define DIO_BASE__INST0_SEG1                       0
#define DIO_BASE__INST0_SEG2                       0
#define DIO_BASE__INST0_SEG3                       0
#define DIO_BASE__INST0_SEG4                       0

#define DIO_BASE__INST1_SEG0                       0
#define DIO_BASE__INST1_SEG1                       0
#define DIO_BASE__INST1_SEG2                       0
#define DIO_BASE__INST1_SEG3                       0
#define DIO_BASE__INST1_SEG4                       0

#define DIO_BASE__INST2_SEG0                       0
#define DIO_BASE__INST2_SEG1                       0
#define DIO_BASE__INST2_SEG2                       0
#define DIO_BASE__INST2_SEG3                       0
#define DIO_BASE__INST2_SEG4                       0

#define DIO_BASE__INST3_SEG0                       0
#define DIO_BASE__INST3_SEG1                       0
#define DIO_BASE__INST3_SEG2                       0
#define DIO_BASE__INST3_SEG3                       0
#define DIO_BASE__INST3_SEG4                       0

#define DIO_BASE__INST4_SEG0                       0
#define DIO_BASE__INST4_SEG1                       0
#define DIO_BASE__INST4_SEG2                       0
#define DIO_BASE__INST4_SEG3                       0
#define DIO_BASE__INST4_SEG4                       0

#define DIO_BASE__INST5_SEG0                       0
#define DIO_BASE__INST5_SEG1                       0
#define DIO_BASE__INST5_SEG2                       0
#define DIO_BASE__INST5_SEG3                       0
#define DIO_BASE__INST5_SEG4                       0

#define DIO_BASE__INST6_SEG0                       0
#define DIO_BASE__INST6_SEG1                       0
#define DIO_BASE__INST6_SEG2                       0
#define DIO_BASE__INST6_SEG3                       0
#define DIO_BASE__INST6_SEG4                       0

#define DCN_BASE__INST0_SEG0                       0x00000012
#define DCN_BASE__INST0_SEG1                       0x000000C0
#define DCN_BASE__INST0_SEG2                       0x000034C0
#define DCN_BASE__INST0_SEG3                       0x00009000
#define DCN_BASE__INST0_SEG4                       0x02403C00

#define DCN_BASE__INST1_SEG0                       0
#define DCN_BASE__INST1_SEG1                       0
#define DCN_BASE__INST1_SEG2                       0
#define DCN_BASE__INST1_SEG3                       0
#define DCN_BASE__INST1_SEG4                       0

#define DCN_BASE__INST2_SEG0                       0
#define DCN_BASE__INST2_SEG1                       0
#define DCN_BASE__INST2_SEG2                       0
#define DCN_BASE__INST2_SEG3                       0
#define DCN_BASE__INST2_SEG4                       0

#define DCN_BASE__INST3_SEG0                       0
#define DCN_BASE__INST3_SEG1                       0
#define DCN_BASE__INST3_SEG2                       0
#define DCN_BASE__INST3_SEG3                       0
#define DCN_BASE__INST3_SEG4                       0

#define DCN_BASE__INST4_SEG0                       0
#define DCN_BASE__INST4_SEG1                       0
#define DCN_BASE__INST4_SEG2                       0
#define DCN_BASE__INST4_SEG3                       0
#define DCN_BASE__INST4_SEG4                       0

#define DCN_BASE__INST5_SEG0                       0
#define DCN_BASE__INST5_SEG1                       0
#define DCN_BASE__INST5_SEG2                       0
#define DCN_BASE__INST5_SEG3                       0
#define DCN_BASE__INST5_SEG4                       0

#define DCN_BASE__INST6_SEG0                       0
#define DCN_BASE__INST6_SEG1                       0
#define DCN_BASE__INST6_SEG2                       0
#define DCN_BASE__INST6_SEG3                       0
#define DCN_BASE__INST6_SEG4                       0

#define DPCS_BASE__INST0_SEG0                      0x00000012
#define DPCS_BASE__INST0_SEG1                      0x000000C0
#define DPCS_BASE__INST0_SEG2                      0x000034C0
#define DPCS_BASE__INST0_SEG3                      0x00009000
#define DPCS_BASE__INST0_SEG4                      0x02403C00

#define DPCS_BASE__INST1_SEG0                      0
#define DPCS_BASE__INST1_SEG1                      0
#define DPCS_BASE__INST1_SEG2                      0
#define DPCS_BASE__INST1_SEG3                      0
#define DPCS_BASE__INST1_SEG4                      0

#define DPCS_BASE__INST2_SEG0                      0
#define DPCS_BASE__INST2_SEG1                      0
#define DPCS_BASE__INST2_SEG2                      0
#define DPCS_BASE__INST2_SEG3                      0
#define DPCS_BASE__INST2_SEG4                      0

#define DPCS_BASE__INST3_SEG0                      0
#define DPCS_BASE__INST3_SEG1                      0
#define DPCS_BASE__INST3_SEG2                      0
#define DPCS_BASE__INST3_SEG3                      0
#define DPCS_BASE__INST3_SEG4                      0

#define DPCS_BASE__INST4_SEG0                      0
#define DPCS_BASE__INST4_SEG1                      0
#define DPCS_BASE__INST4_SEG2                      0
#define DPCS_BASE__INST4_SEG3                      0
#define DPCS_BASE__INST4_SEG4                      0

#define DPCS_BASE__INST5_SEG0                      0
#define DPCS_BASE__INST5_SEG1                      0
#define DPCS_BASE__INST5_SEG2                      0
#define DPCS_BASE__INST5_SEG3                      0
#define DPCS_BASE__INST5_SEG4                      0

#define DPCS_BASE__INST6_SEG0                      0
#define DPCS_BASE__INST6_SEG1                      0
#define DPCS_BASE__INST6_SEG2                      0
#define DPCS_BASE__INST6_SEG3                      0
#define DPCS_BASE__INST6_SEG4                      0

#define FUSE_BASE__INST0_SEG0                      0x00017400
#define FUSE_BASE__INST0_SEG1                      0x02401400
#define FUSE_BASE__INST0_SEG2                      0
#define FUSE_BASE__INST0_SEG3                      0
#define FUSE_BASE__INST0_SEG4                      0

#define FUSE_BASE__INST1_SEG0                      0
#define FUSE_BASE__INST1_SEG1                      0
#define FUSE_BASE__INST1_SEG2                      0
#define FUSE_BASE__INST1_SEG3                      0
#define FUSE_BASE__INST1_SEG4                      0

#define FUSE_BASE__INST2_SEG0                      0
#define FUSE_BASE__INST2_SEG1                      0
#define FUSE_BASE__INST2_SEG2                      0
#define FUSE_BASE__INST2_SEG3                      0
#define FUSE_BASE__INST2_SEG4                      0

#define FUSE_BASE__INST3_SEG0                      0
#define FUSE_BASE__INST3_SEG1                      0
#define FUSE_BASE__INST3_SEG2                      0
#define FUSE_BASE__INST3_SEG3                      0
#define FUSE_BASE__INST3_SEG4                      0

#define FUSE_BASE__INST4_SEG0                      0
#define FUSE_BASE__INST4_SEG1                      0
#define FUSE_BASE__INST4_SEG2                      0
#define FUSE_BASE__INST4_SEG3                      0
#define FUSE_BASE__INST4_SEG4                      0

#define FUSE_BASE__INST5_SEG0                      0
#define FUSE_BASE__INST5_SEG1                      0
#define FUSE_BASE__INST5_SEG2                      0
#define FUSE_BASE__INST5_SEG3                      0
#define FUSE_BASE__INST5_SEG4                      0

#define FUSE_BASE__INST6_SEG0                      0
#define FUSE_BASE__INST6_SEG1                      0
#define FUSE_BASE__INST6_SEG2                      0
#define FUSE_BASE__INST6_SEG3                      0
#define FUSE_BASE__INST6_SEG4                      0

#define GC_BASE__INST0_SEG0                        0x00001260
#define GC_BASE__INST0_SEG1                        0x0000A000
#define GC_BASE__INST0_SEG2                        0x0001C000
#define GC_BASE__INST0_SEG3                        0x02402C00
#define GC_BASE__INST0_SEG4                        0

#define GC_BASE__INST1_SEG0                        0
#define GC_BASE__INST1_SEG1                        0
#define GC_BASE__INST1_SEG2                        0
#define GC_BASE__INST1_SEG3                        0
#define GC_BASE__INST1_SEG4                        0

#define GC_BASE__INST2_SEG0                        0
#define GC_BASE__INST2_SEG1                        0
#define GC_BASE__INST2_SEG2                        0
#define GC_BASE__INST2_SEG3                        0
#define GC_BASE__INST2_SEG4                        0

#define GC_BASE__INST3_SEG0                        0
#define GC_BASE__INST3_SEG1                        0
#define GC_BASE__INST3_SEG2                        0
#define GC_BASE__INST3_SEG3                        0
#define GC_BASE__INST3_SEG4                        0

#define GC_BASE__INST4_SEG0                        0
#define GC_BASE__INST4_SEG1                        0
#define GC_BASE__INST4_SEG2                        0
#define GC_BASE__INST4_SEG3                        0
#define GC_BASE__INST4_SEG4                        0

#define GC_BASE__INST5_SEG0                        0
#define GC_BASE__INST5_SEG1                        0
#define GC_BASE__INST5_SEG2                        0
#define GC_BASE__INST5_SEG3                        0
#define GC_BASE__INST5_SEG4                        0

#define GC_BASE__INST6_SEG0                        0
#define GC_BASE__INST6_SEG1                        0
#define GC_BASE__INST6_SEG2                        0
#define GC_BASE__INST6_SEG3                        0
#define GC_BASE__INST6_SEG4                        0

#define HDA_BASE__INST0_SEG0                       0x004C0000
#define HDA_BASE__INST0_SEG1                       0x02404800
#define HDA_BASE__INST0_SEG2                       0
#define HDA_BASE__INST0_SEG3                       0
#define HDA_BASE__INST0_SEG4                       0

#define HDA_BASE__INST1_SEG0                       0
#define HDA_BASE__INST1_SEG1                       0
#define HDA_BASE__INST1_SEG2                       0
#define HDA_BASE__INST1_SEG3                       0
#define HDA_BASE__INST1_SEG4                       0

#define HDA_BASE__INST2_SEG0                       0
#define HDA_BASE__INST2_SEG1                       0
#define HDA_BASE__INST2_SEG2                       0
#define HDA_BASE__INST2_SEG3                       0
#define HDA_BASE__INST2_SEG4                       0

#define HDA_BASE__INST3_SEG0                       0
#define HDA_BASE__INST3_SEG1                       0
#define HDA_BASE__INST3_SEG2                       0
#define HDA_BASE__INST3_SEG3                       0
#define HDA_BASE__INST3_SEG4                       0

#define HDA_BASE__INST4_SEG0                       0
#define HDA_BASE__INST4_SEG1                       0
#define HDA_BASE__INST4_SEG2                       0
#define HDA_BASE__INST4_SEG3                       0
#define HDA_BASE__INST4_SEG4                       0

#define HDA_BASE__INST5_SEG0                       0
#define HDA_BASE__INST5_SEG1                       0
#define HDA_BASE__INST5_SEG2                       0
#define HDA_BASE__INST5_SEG3                       0
#define HDA_BASE__INST5_SEG4                       0

#define HDA_BASE__INST6_SEG0                       0
#define HDA_BASE__INST6_SEG1                       0
#define HDA_BASE__INST6_SEG2                       0
#define HDA_BASE__INST6_SEG3                       0
#define HDA_BASE__INST6_SEG4                       0

#define HDP_BASE__INST0_SEG0                       0x00000F20
#define HDP_BASE__INST0_SEG1                       0x0240A400
#define HDP_BASE__INST0_SEG2                       0
#define HDP_BASE__INST0_SEG3                       0
#define HDP_BASE__INST0_SEG4                       0

#define HDP_BASE__INST1_SEG0                       0
#define HDP_BASE__INST1_SEG1                       0
#define HDP_BASE__INST1_SEG2                       0
#define HDP_BASE__INST1_SEG3                       0
#define HDP_BASE__INST1_SEG4                       0

#define HDP_BASE__INST2_SEG0                       0
#define HDP_BASE__INST2_SEG1                       0
#define HDP_BASE__INST2_SEG2                       0
#define HDP_BASE__INST2_SEG3                       0
#define HDP_BASE__INST2_SEG4                       0

#define HDP_BASE__INST3_SEG0                       0
#define HDP_BASE__INST3_SEG1                       0
#define HDP_BASE__INST3_SEG2                       0
#define HDP_BASE__INST3_SEG3                       0
#define HDP_BASE__INST3_SEG4                       0

#define HDP_BASE__INST4_SEG0                       0
#define HDP_BASE__INST4_SEG1                       0
#define HDP_BASE__INST4_SEG2                       0
#define HDP_BASE__INST4_SEG3                       0
#define HDP_BASE__INST4_SEG4                       0

#define HDP_BASE__INST5_SEG0                       0
#define HDP_BASE__INST5_SEG1                       0
#define HDP_BASE__INST5_SEG2                       0
#define HDP_BASE__INST5_SEG3                       0
#define HDP_BASE__INST5_SEG4                       0

#define HDP_BASE__INST6_SEG0                       0
#define HDP_BASE__INST6_SEG1                       0
#define HDP_BASE__INST6_SEG2                       0
#define HDP_BASE__INST6_SEG3                       0
#define HDP_BASE__INST6_SEG4                       0

#define MMHUB_BASE__INST0_SEG0                     0x0001A000
#define MMHUB_BASE__INST0_SEG1                     0x02408800
#define MMHUB_BASE__INST0_SEG2                     0
#define MMHUB_BASE__INST0_SEG3                     0
#define MMHUB_BASE__INST0_SEG4                     0

#define MMHUB_BASE__INST1_SEG0                     0
#define MMHUB_BASE__INST1_SEG1                     0
#define MMHUB_BASE__INST1_SEG2                     0
#define MMHUB_BASE__INST1_SEG3                     0
#define MMHUB_BASE__INST1_SEG4                     0

#define MMHUB_BASE__INST2_SEG0                     0
#define MMHUB_BASE__INST2_SEG1                     0
#define MMHUB_BASE__INST2_SEG2                     0
#define MMHUB_BASE__INST2_SEG3                     0
#define MMHUB_BASE__INST2_SEG4                     0

#define MMHUB_BASE__INST3_SEG0                     0
#define MMHUB_BASE__INST3_SEG1                     0
#define MMHUB_BASE__INST3_SEG2                     0
#define MMHUB_BASE__INST3_SEG3                     0
#define MMHUB_BASE__INST3_SEG4                     0

#define MMHUB_BASE__INST4_SEG0                     0
#define MMHUB_BASE__INST4_SEG1                     0
#define MMHUB_BASE__INST4_SEG2                     0
#define MMHUB_BASE__INST4_SEG3                     0
#define MMHUB_BASE__INST4_SEG4                     0

#define MMHUB_BASE__INST5_SEG0                     0
#define MMHUB_BASE__INST5_SEG1                     0
#define MMHUB_BASE__INST5_SEG2                     0
#define MMHUB_BASE__INST5_SEG3                     0
#define MMHUB_BASE__INST5_SEG4                     0

#define MMHUB_BASE__INST6_SEG0                     0
#define MMHUB_BASE__INST6_SEG1                     0
#define MMHUB_BASE__INST6_SEG2                     0
#define MMHUB_BASE__INST6_SEG3                     0
#define MMHUB_BASE__INST6_SEG4                     0

#define MP0_BASE__INST0_SEG0                       0x00016000
#define MP0_BASE__INST0_SEG1                       0x00DC0000
#define MP0_BASE__INST0_SEG2                       0x00E00000
#define MP0_BASE__INST0_SEG3                       0x00E40000
#define MP0_BASE__INST0_SEG4                       0x0243FC00

#define MP0_BASE__INST1_SEG0                       0
#define MP0_BASE__INST1_SEG1                       0
#define MP0_BASE__INST1_SEG2                       0
#define MP0_BASE__INST1_SEG3                       0
#define MP0_BASE__INST1_SEG4                       0

#define MP0_BASE__INST2_SEG0                       0
#define MP0_BASE__INST2_SEG1                       0
#define MP0_BASE__INST2_SEG2                       0
#define MP0_BASE__INST2_SEG3                       0
#define MP0_BASE__INST2_SEG4                       0

#define MP0_BASE__INST3_SEG0                       0
#define MP0_BASE__INST3_SEG1                       0
#define MP0_BASE__INST3_SEG2                       0
#define MP0_BASE__INST3_SEG3                       0
#define MP0_BASE__INST3_SEG4                       0

#define MP0_BASE__INST4_SEG0                       0
#define MP0_BASE__INST4_SEG1                       0
#define MP0_BASE__INST4_SEG2                       0
#define MP0_BASE__INST4_SEG3                       0
#define MP0_BASE__INST4_SEG4                       0

#define MP0_BASE__INST5_SEG0                       0
#define MP0_BASE__INST5_SEG1                       0
#define MP0_BASE__INST5_SEG2                       0
#define MP0_BASE__INST5_SEG3                       0
#define MP0_BASE__INST5_SEG4                       0

#define MP0_BASE__INST6_SEG0                       0
#define MP0_BASE__INST6_SEG1                       0
#define MP0_BASE__INST6_SEG2                       0
#define MP0_BASE__INST6_SEG3                       0
#define MP0_BASE__INST6_SEG4                       0

#define MP1_BASE__INST0_SEG0                       0x00016000
#define MP1_BASE__INST0_SEG1                       0x00DC0000
#define MP1_BASE__INST0_SEG2                       0x00E00000
#define MP1_BASE__INST0_SEG3                       0x00E40000
#define MP1_BASE__INST0_SEG4                       0x0243FC00

#define MP1_BASE__INST1_SEG0                       0
#define MP1_BASE__INST1_SEG1                       0
#define MP1_BASE__INST1_SEG2                       0
#define MP1_BASE__INST1_SEG3                       0
#define MP1_BASE__INST1_SEG4                       0

#define MP1_BASE__INST2_SEG0                       0
#define MP1_BASE__INST2_SEG1                       0
#define MP1_BASE__INST2_SEG2                       0
#define MP1_BASE__INST2_SEG3                       0
#define MP1_BASE__INST2_SEG4                       0

#define MP1_BASE__INST3_SEG0                       0
#define MP1_BASE__INST3_SEG1                       0
#define MP1_BASE__INST3_SEG2                       0
#define MP1_BASE__INST3_SEG3                       0
#define MP1_BASE__INST3_SEG4                       0

#define MP1_BASE__INST4_SEG0                       0
#define MP1_BASE__INST4_SEG1                       0
#define MP1_BASE__INST4_SEG2                       0
#define MP1_BASE__INST4_SEG3                       0
#define MP1_BASE__INST4_SEG4                       0

#define MP1_BASE__INST5_SEG0                       0
#define MP1_BASE__INST5_SEG1                       0
#define MP1_BASE__INST5_SEG2                       0
#define MP1_BASE__INST5_SEG3                       0
#define MP1_BASE__INST5_SEG4                       0

#define MP1_BASE__INST6_SEG0                       0
#define MP1_BASE__INST6_SEG1                       0
#define MP1_BASE__INST6_SEG2                       0
#define MP1_BASE__INST6_SEG3                       0
#define MP1_BASE__INST6_SEG4                       0

#define NBIO_BASE__INST0_SEG0                      0x00000000
#define NBIO_BASE__INST0_SEG1                      0x00000014
#define NBIO_BASE__INST0_SEG2                      0x00000D20
#define NBIO_BASE__INST0_SEG3                      0x00010400
#define NBIO_BASE__INST0_SEG4                      0x0241B000

#define NBIO_BASE__INST1_SEG0                      0
#define NBIO_BASE__INST1_SEG1                      0
#define NBIO_BASE__INST1_SEG2                      0
#define NBIO_BASE__INST1_SEG3                      0
#define NBIO_BASE__INST1_SEG4                      0

#define NBIO_BASE__INST2_SEG0                      0
#define NBIO_BASE__INST2_SEG1                      0
#define NBIO_BASE__INST2_SEG2                      0
#define NBIO_BASE__INST2_SEG3                      0
#define NBIO_BASE__INST2_SEG4                      0

#define NBIO_BASE__INST3_SEG0                      0
#define NBIO_BASE__INST3_SEG1                      0
#define NBIO_BASE__INST3_SEG2                      0
#define NBIO_BASE__INST3_SEG3                      0
#define NBIO_BASE__INST3_SEG4                      0

#define NBIO_BASE__INST4_SEG0                      0
#define NBIO_BASE__INST4_SEG1                      0
#define NBIO_BASE__INST4_SEG2                      0
#define NBIO_BASE__INST4_SEG3                      0
#define NBIO_BASE__INST4_SEG4                      0

#define NBIO_BASE__INST5_SEG0                      0
#define NBIO_BASE__INST5_SEG1                      0
#define NBIO_BASE__INST5_SEG2                      0
#define NBIO_BASE__INST5_SEG3                      0
#define NBIO_BASE__INST5_SEG4                      0

#define NBIO_BASE__INST6_SEG0                      0
#define NBIO_BASE__INST6_SEG1                      0
#define NBIO_BASE__INST6_SEG2                      0
#define NBIO_BASE__INST6_SEG3                      0
#define NBIO_BASE__INST6_SEG4                      0

#define OSSSYS_BASE__INST0_SEG0                    0x000010A0
#define OSSSYS_BASE__INST0_SEG1                    0x0240A000
#define OSSSYS_BASE__INST0_SEG2                    0
#define OSSSYS_BASE__INST0_SEG3                    0
#define OSSSYS_BASE__INST0_SEG4                    0

#define OSSSYS_BASE__INST1_SEG0                    0
#define OSSSYS_BASE__INST1_SEG1                    0
#define OSSSYS_BASE__INST1_SEG2                    0
#define OSSSYS_BASE__INST1_SEG3                    0
#define OSSSYS_BASE__INST1_SEG4                    0

#define OSSSYS_BASE__INST2_SEG0                    0
#define OSSSYS_BASE__INST2_SEG1                    0
#define OSSSYS_BASE__INST2_SEG2                    0
#define OSSSYS_BASE__INST2_SEG3                    0
#define OSSSYS_BASE__INST2_SEG4                    0

#define OSSSYS_BASE__INST3_SEG0                    0
#define OSSSYS_BASE__INST3_SEG1                    0
#define OSSSYS_BASE__INST3_SEG2                    0
#define OSSSYS_BASE__INST3_SEG3                    0
#define OSSSYS_BASE__INST3_SEG4                    0

#define OSSSYS_BASE__INST4_SEG0                    0
#define OSSSYS_BASE__INST4_SEG1                    0
#define OSSSYS_BASE__INST4_SEG2                    0
#define OSSSYS_BASE__INST4_SEG3                    0
#define OSSSYS_BASE__INST4_SEG4                    0

#define OSSSYS_BASE__INST5_SEG0                    0
#define OSSSYS_BASE__INST5_SEG1                    0
#define OSSSYS_BASE__INST5_SEG2                    0
#define OSSSYS_BASE__INST5_SEG3                    0
#define OSSSYS_BASE__INST5_SEG4                    0

#define OSSSYS_BASE__INST6_SEG0                    0
#define OSSSYS_BASE__INST6_SEG1                    0
#define OSSSYS_BASE__INST6_SEG2                    0
#define OSSSYS_BASE__INST6_SEG3                    0
#define OSSSYS_BASE__INST6_SEG4                    0

#define PCIE0_BASE__INST0_SEG0                     0x00000000
#define PCIE0_BASE__INST0_SEG1                     0x00000014
#define PCIE0_BASE__INST0_SEG2                     0x00000D20
#define PCIE0_BASE__INST0_SEG3                     0x00010400
#define PCIE0_BASE__INST0_SEG4                     0x0241B000

#define PCIE0_BASE__INST1_SEG0                     0
#define PCIE0_BASE__INST1_SEG1                     0
#define PCIE0_BASE__INST1_SEG2                     0
#define PCIE0_BASE__INST1_SEG3                     0
#define PCIE0_BASE__INST1_SEG4                     0

#define PCIE0_BASE__INST2_SEG0                     0
#define PCIE0_BASE__INST2_SEG1                     0
#define PCIE0_BASE__INST2_SEG2                     0
#define PCIE0_BASE__INST2_SEG3                     0
#define PCIE0_BASE__INST2_SEG4                     0

#define PCIE0_BASE__INST3_SEG0                     0
#define PCIE0_BASE__INST3_SEG1                     0
#define PCIE0_BASE__INST3_SEG2                     0
#define PCIE0_BASE__INST3_SEG3                     0
#define PCIE0_BASE__INST3_SEG4                     0

#define PCIE0_BASE__INST4_SEG0                     0
#define PCIE0_BASE__INST4_SEG1                     0
#define PCIE0_BASE__INST4_SEG2                     0
#define PCIE0_BASE__INST4_SEG3                     0
#define PCIE0_BASE__INST4_SEG4                     0

#define PCIE0_BASE__INST5_SEG0                     0
#define PCIE0_BASE__INST5_SEG1                     0
#define PCIE0_BASE__INST5_SEG2                     0
#define PCIE0_BASE__INST5_SEG3                     0
#define PCIE0_BASE__INST5_SEG4                     0

#define PCIE0_BASE__INST6_SEG0                     0
#define PCIE0_BASE__INST6_SEG1                     0
#define PCIE0_BASE__INST6_SEG2                     0
#define PCIE0_BASE__INST6_SEG3                     0
#define PCIE0_BASE__INST6_SEG4                     0

#define SDMA0_BASE__INST0_SEG0                     0x00001260
#define SDMA0_BASE__INST0_SEG1                     0x0000A000
#define SDMA0_BASE__INST0_SEG2                     0x0001C000
#define SDMA0_BASE__INST0_SEG3                     0x02402C00
#define SDMA0_BASE__INST0_SEG4                     0

#define SDMA0_BASE__INST1_SEG0                     0
#define SDMA0_BASE__INST1_SEG1                     0
#define SDMA0_BASE__INST1_SEG2                     0
#define SDMA0_BASE__INST1_SEG3                     0
#define SDMA0_BASE__INST1_SEG4                     0

#define SDMA0_BASE__INST2_SEG0                     0
#define SDMA0_BASE__INST2_SEG1                     0
#define SDMA0_BASE__INST2_SEG2                     0
#define SDMA0_BASE__INST2_SEG3                     0
#define SDMA0_BASE__INST2_SEG4                     0

#define SDMA0_BASE__INST3_SEG0                     0
#define SDMA0_BASE__INST3_SEG1                     0
#define SDMA0_BASE__INST3_SEG2                     0
#define SDMA0_BASE__INST3_SEG3                     0
#define SDMA0_BASE__INST3_SEG4                     0

#define SDMA0_BASE__INST4_SEG0                     0
#define SDMA0_BASE__INST4_SEG1                     0
#define SDMA0_BASE__INST4_SEG2                     0
#define SDMA0_BASE__INST4_SEG3                     0
#define SDMA0_BASE__INST4_SEG4                     0

#define SDMA0_BASE__INST5_SEG0                     0
#define SDMA0_BASE__INST5_SEG1                     0
#define SDMA0_BASE__INST5_SEG2                     0
#define SDMA0_BASE__INST5_SEG3                     0
#define SDMA0_BASE__INST5_SEG4                     0

#define SDMA0_BASE__INST6_SEG0                     0
#define SDMA0_BASE__INST6_SEG1                     0
#define SDMA0_BASE__INST6_SEG2                     0
#define SDMA0_BASE__INST6_SEG3                     0
#define SDMA0_BASE__INST6_SEG4                     0

#define SDMA1_BASE__INST0_SEG0                     0x00001260
#define SDMA1_BASE__INST0_SEG1                     0x0000A000
#define SDMA1_BASE__INST0_SEG2                     0x0001C000
#define SDMA1_BASE__INST0_SEG3                     0x02402C00
#define SDMA1_BASE__INST0_SEG4                     0

#define SDMA1_BASE__INST1_SEG0                     0
#define SDMA1_BASE__INST1_SEG1                     0
#define SDMA1_BASE__INST1_SEG2                     0
#define SDMA1_BASE__INST1_SEG3                     0
#define SDMA1_BASE__INST1_SEG4                     0

#define SDMA1_BASE__INST2_SEG0                     0
#define SDMA1_BASE__INST2_SEG1                     0
#define SDMA1_BASE__INST2_SEG2                     0
#define SDMA1_BASE__INST2_SEG3                     0
#define SDMA1_BASE__INST2_SEG4                     0

#define SDMA1_BASE__INST3_SEG0                     0
#define SDMA1_BASE__INST3_SEG1                     0
#define SDMA1_BASE__INST3_SEG2                     0
#define SDMA1_BASE__INST3_SEG3                     0
#define SDMA1_BASE__INST3_SEG4                     0

#define SDMA1_BASE__INST4_SEG0                     0
#define SDMA1_BASE__INST4_SEG1                     0
#define SDMA1_BASE__INST4_SEG2                     0
#define SDMA1_BASE__INST4_SEG3                     0
#define SDMA1_BASE__INST4_SEG4                     0

#define SDMA1_BASE__INST5_SEG0                     0
#define SDMA1_BASE__INST5_SEG1                     0
#define SDMA1_BASE__INST5_SEG2                     0
#define SDMA1_BASE__INST5_SEG3                     0
#define SDMA1_BASE__INST5_SEG4                     0

#define SDMA1_BASE__INST6_SEG0                     0
#define SDMA1_BASE__INST6_SEG1                     0
#define SDMA1_BASE__INST6_SEG2                     0
#define SDMA1_BASE__INST6_SEG3                     0
#define SDMA1_BASE__INST6_SEG4                     0

#define SMUIO_BASE__INST0_SEG0                     0x00016800
#define SMUIO_BASE__INST0_SEG1                     0x00016A00
#define SMUIO_BASE__INST0_SEG2                     0x00440000
#define SMUIO_BASE__INST0_SEG3                     0x02401000
#define SMUIO_BASE__INST0_SEG4                     0

#define SMUIO_BASE__INST1_SEG0                     0
#define SMUIO_BASE__INST1_SEG1                     0
#define SMUIO_BASE__INST1_SEG2                     0
#define SMUIO_BASE__INST1_SEG3                     0
#define SMUIO_BASE__INST1_SEG4                     0

#define SMUIO_BASE__INST2_SEG0                     0
#define SMUIO_BASE__INST2_SEG1                     0
#define SMUIO_BASE__INST2_SEG2                     0
#define SMUIO_BASE__INST2_SEG3                     0
#define SMUIO_BASE__INST2_SEG4                     0

#define SMUIO_BASE__INST3_SEG0                     0
#define SMUIO_BASE__INST3_SEG1                     0
#define SMUIO_BASE__INST3_SEG2                     0
#define SMUIO_BASE__INST3_SEG3                     0
#define SMUIO_BASE__INST3_SEG4                     0

#define SMUIO_BASE__INST4_SEG0                     0
#define SMUIO_BASE__INST4_SEG1                     0
#define SMUIO_BASE__INST4_SEG2                     0
#define SMUIO_BASE__INST4_SEG3                     0
#define SMUIO_BASE__INST4_SEG4                     0

#define SMUIO_BASE__INST5_SEG0                     0
#define SMUIO_BASE__INST5_SEG1                     0
#define SMUIO_BASE__INST5_SEG2                     0
#define SMUIO_BASE__INST5_SEG3                     0
#define SMUIO_BASE__INST5_SEG4                     0

#define SMUIO_BASE__INST6_SEG0                     0
#define SMUIO_BASE__INST6_SEG1                     0
#define SMUIO_BASE__INST6_SEG2                     0
#define SMUIO_BASE__INST6_SEG3                     0
#define SMUIO_BASE__INST6_SEG4                     0

#define THM_BASE__INST0_SEG0                       0x00016600
#define THM_BASE__INST0_SEG1                       0x02400C00
#define THM_BASE__INST0_SEG2                       0
#define THM_BASE__INST0_SEG3                       0
#define THM_BASE__INST0_SEG4                       0

#define THM_BASE__INST1_SEG0                       0
#define THM_BASE__INST1_SEG1                       0
#define THM_BASE__INST1_SEG2                       0
#define THM_BASE__INST1_SEG3                       0
#define THM_BASE__INST1_SEG4                       0

#define THM_BASE__INST2_SEG0                       0
#define THM_BASE__INST2_SEG1                       0
#define THM_BASE__INST2_SEG2                       0
#define THM_BASE__INST2_SEG3                       0
#define THM_BASE__INST2_SEG4                       0

#define THM_BASE__INST3_SEG0                       0
#define THM_BASE__INST3_SEG1                       0
#define THM_BASE__INST3_SEG2                       0
#define THM_BASE__INST3_SEG3                       0
#define THM_BASE__INST3_SEG4                       0

#define THM_BASE__INST4_SEG0                       0
#define THM_BASE__INST4_SEG1                       0
#define THM_BASE__INST4_SEG2                       0
#define THM_BASE__INST4_SEG3                       0
#define THM_BASE__INST4_SEG4                       0

#define THM_BASE__INST5_SEG0                       0
#define THM_BASE__INST5_SEG1                       0
#define THM_BASE__INST5_SEG2                       0
#define THM_BASE__INST5_SEG3                       0
#define THM_BASE__INST5_SEG4                       0

#define THM_BASE__INST6_SEG0                       0
#define THM_BASE__INST6_SEG1                       0
#define THM_BASE__INST6_SEG2                       0
#define THM_BASE__INST6_SEG3                       0
#define THM_BASE__INST6_SEG4                       0

#define UMC_BASE__INST0_SEG0                       0x00014000
#define UMC_BASE__INST0_SEG1                       0x02425800
#define UMC_BASE__INST0_SEG2                       0
#define UMC_BASE__INST0_SEG3                       0
#define UMC_BASE__INST0_SEG4                       0

#define UMC_BASE__INST1_SEG0                       0x00054000
#define UMC_BASE__INST1_SEG1                       0x02425C00
#define UMC_BASE__INST1_SEG2                       0
#define UMC_BASE__INST1_SEG3                       0
#define UMC_BASE__INST1_SEG4                       0

#define UMC_BASE__INST2_SEG0                       0x00094000
#define UMC_BASE__INST2_SEG1                       0x02426000
#define UMC_BASE__INST2_SEG2                       0
#define UMC_BASE__INST2_SEG3                       0
#define UMC_BASE__INST2_SEG4                       0

#define UMC_BASE__INST3_SEG0                       0x000D4000
#define UMC_BASE__INST3_SEG1                       0x02426400
#define UMC_BASE__INST3_SEG2                       0
#define UMC_BASE__INST3_SEG3                       0
#define UMC_BASE__INST3_SEG4                       0

#define UMC_BASE__INST4_SEG0                       0x00114000
#define UMC_BASE__INST4_SEG1                       0x02426800
#define UMC_BASE__INST4_SEG2                       0
#define UMC_BASE__INST4_SEG3                       0
#define UMC_BASE__INST4_SEG4                       0

#define UMC_BASE__INST5_SEG0                       0x00154000
#define UMC_BASE__INST5_SEG1                       0x02426C00
#define UMC_BASE__INST5_SEG2                       0
#define UMC_BASE__INST5_SEG3                       0
#define UMC_BASE__INST5_SEG4                       0

#define UMC_BASE__INST6_SEG0                       0x00194000
#define UMC_BASE__INST6_SEG1                       0x02427000
#define UMC_BASE__INST6_SEG2                       0
#define UMC_BASE__INST6_SEG3                       0
#define UMC_BASE__INST6_SEG4                       0

#define USB0_BASE__INST0_SEG0                      0x0242A800
#define USB0_BASE__INST0_SEG1                      0x05B00000
#define USB0_BASE__INST0_SEG2                      0
#define USB0_BASE__INST0_SEG3                      0
#define USB0_BASE__INST0_SEG4                      0

#define USB0_BASE__INST1_SEG0                      0
#define USB0_BASE__INST1_SEG1                      0
#define USB0_BASE__INST1_SEG2                      0
#define USB0_BASE__INST1_SEG3                      0
#define USB0_BASE__INST1_SEG4                      0

#define USB0_BASE__INST2_SEG0                      0
#define USB0_BASE__INST2_SEG1                      0
#define USB0_BASE__INST2_SEG2                      0
#define USB0_BASE__INST2_SEG3                      0
#define USB0_BASE__INST2_SEG4                      0

#define USB0_BASE__INST3_SEG0                      0
#define USB0_BASE__INST3_SEG1                      0
#define USB0_BASE__INST3_SEG2                      0
#define USB0_BASE__INST3_SEG3                      0
#define USB0_BASE__INST3_SEG4                      0

#define USB0_BASE__INST4_SEG0                      0
#define USB0_BASE__INST4_SEG1                      0
#define USB0_BASE__INST4_SEG2                      0
#define USB0_BASE__INST4_SEG3                      0
#define USB0_BASE__INST4_SEG4                      0

#define USB0_BASE__INST5_SEG0                      0
#define USB0_BASE__INST5_SEG1                      0
#define USB0_BASE__INST5_SEG2                      0
#define USB0_BASE__INST5_SEG3                      0
#define USB0_BASE__INST5_SEG4                      0

#define USB0_BASE__INST6_SEG0                      0
#define USB0_BASE__INST6_SEG1                      0
#define USB0_BASE__INST6_SEG2                      0
#define USB0_BASE__INST6_SEG3                      0
#define USB0_BASE__INST6_SEG4                      0

#define VCN_BASE__INST0_SEG0                       0x00007800
#define VCN_BASE__INST0_SEG1                       0x00007E00
#define VCN_BASE__INST0_SEG2                       0x02403000
#define VCN_BASE__INST0_SEG3                       0
#define VCN_BASE__INST0_SEG4                       0

#define VCN_BASE__INST1_SEG0                       0x00007B00
#define VCN_BASE__INST1_SEG1                       0x00012000
#define VCN_BASE__INST1_SEG2                       0x02445000
#define VCN_BASE__INST1_SEG3                       0
#define VCN_BASE__INST1_SEG4                       0

#define VCN_BASE__INST2_SEG0                       0
#define VCN_BASE__INST2_SEG1                       0
#define VCN_BASE__INST2_SEG2                       0
#define VCN_BASE__INST2_SEG3                       0
#define VCN_BASE__INST2_SEG4                       0

#define VCN_BASE__INST3_SEG0                       0
#define VCN_BASE__INST3_SEG1                       0
#define VCN_BASE__INST3_SEG2                       0
#define VCN_BASE__INST3_SEG3                       0
#define VCN_BASE__INST3_SEG4                       0

#define VCN_BASE__INST4_SEG0                       0
#define VCN_BASE__INST4_SEG1                       0
#define VCN_BASE__INST4_SEG2                       0
#define VCN_BASE__INST4_SEG3                       0
#define VCN_BASE__INST4_SEG4                       0

#define VCN_BASE__INST5_SEG0                       0
#define VCN_BASE__INST5_SEG1                       0
#define VCN_BASE__INST5_SEG2                       0
#define VCN_BASE__INST5_SEG3                       0
#define VCN_BASE__INST5_SEG4                       0

#define VCN_BASE__INST6_SEG0                       0
#define VCN_BASE__INST6_SEG1                       0
#define VCN_BASE__INST6_SEG2                       0
#define VCN_BASE__INST6_SEG3                       0
#define VCN_BASE__INST6_SEG4                       0

#endif
/*
 * Copyright (C) 2019  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _renoir_ip_offset_HEADER
#define _renoir_ip_offset_HEADER

#define MAX_INSTANCE                                       7
#define MAX_SEGMENT                                        5


struct IP_BASE_INSTANCE
{
    unsigned int segment[MAX_SEGMENT];
};

struct IP_BASE
{
    struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
} __maybe_unused;


static const struct IP_BASE ACP_BASE ={ { { { 0x02403800, 0x00480000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE ATHUB_BASE ={ { { { 0x00000C20, 0x02408C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE CLK_BASE ={ { { { 0x00016C00, 0x00016E00, 0x00017000, 0x00017E00, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DBGU_IO0_BASE ={ { { { 0x000001E0, 0x0240B400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DF_BASE ={ { { { 0x00007000, 0x0240B800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DIO_BASE ={ { { { 0x02404000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DMU_BASE ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DPCS_BASE ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FUSE_BASE ={ { { { 0x00017400, 0x02401400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE GC_BASE ={ { { { 0x00002000, 0x0000A000, 0x02402C00, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDA_BASE ={ { { { 0x02404800, 0x004C0000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDP_BASE ={ { { { 0x00000F20, 0x0240A400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE IOHC0_BASE ={ { { { 0x00010000, 0x02406000, 0x04EC0000, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE ISP_BASE ={ { { { 0x00018000, 0x0240B000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE L2IMU0_BASE ={ { { { 0x00007DC0, 0x02407000, 0x00900000, 0x04FC0000, 0x055C0000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MMHUB_BASE ={ { { { 0x0001A000, 0x02408800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP0_BASE ={ { { { 0x00016000, 0x0243FC00, 0x00DC0000, 0x00E00000, 0x00E40000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP1_BASE ={ { { { 0x00016000, 0x02400400, 0x00E80000, 0x00EC0000, 0x00F00000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE NBIF0_BASE ={ { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DCN_BASE   ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE OSSSYS_BASE ={ { { { 0x000010A0, 0x0240A000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE PCIE0_BASE ={ { { { 0x02411800, 0x04440000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SDMA0_BASE ={ { { { 0x00001260, 0x0240A800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SMUIO_BASE ={ { { { 0x00016800, 0x00016A00, 0x02401000, 0x00440000, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE THM_BASE ={ { { { 0x00016600, 0x02400C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UMC_BASE ={ { { { 0x00014000, 0x02425800, 0, 0, 0 } },
                                        { { 0x00054000, 0x02425C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE USB0_BASE ={ { { { 0x0242A800, 0x05B00000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UVD0_BASE ={ { { { 0x00007800, 0x00007E00, 0x02403000, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };


#define ACP_BASE__INST0_SEG0                       0x02403800
#define ACP_BASE__INST0_SEG1                       0x00480000
#define ACP_BASE__INST0_SEG2                       0
#define ACP_BASE__INST0_SEG3                       0
#define ACP_BASE__INST0_SEG4                       0

#define ACP_BASE__INST1_SEG0                       0
#define ACP_BASE__INST1_SEG1                       0
#define ACP_BASE__INST1_SEG2                       0
#define ACP_BASE__INST1_SEG3                       0
#define ACP_BASE__INST1_SEG4                       0

#define ACP_BASE__INST2_SEG0                       0
#define ACP_BASE__INST2_SEG1                       0
#define ACP_BASE__INST2_SEG2                       0
#define ACP_BASE__INST2_SEG3                       0
#define ACP_BASE__INST2_SEG4                       0

#define ACP_BASE__INST3_SEG0                       0
#define ACP_BASE__INST3_SEG1                       0
#define ACP_BASE__INST3_SEG2                       0
#define ACP_BASE__INST3_SEG3                       0
#define ACP_BASE__INST3_SEG4                       0

#define ACP_BASE__INST4_SEG0                       0
#define ACP_BASE__INST4_SEG1                       0
#define ACP_BASE__INST4_SEG2                       0
#define ACP_BASE__INST4_SEG3                       0
#define ACP_BASE__INST4_SEG4                       0

#define ACP_BASE__INST5_SEG0                       0
#define ACP_BASE__INST5_SEG1                       0
#define ACP_BASE__INST5_SEG2                       0
#define ACP_BASE__INST5_SEG3                       0
#define ACP_BASE__INST5_SEG4                       0

#define ACP_BASE__INST6_SEG0                       0
#define ACP_BASE__INST6_SEG1                       0
#define ACP_BASE__INST6_SEG2                       0
#define ACP_BASE__INST6_SEG3                       0
#define ACP_BASE__INST6_SEG4                       0

#define ATHUB_BASE__INST0_SEG0                     0x00000C20
#define ATHUB_BASE__INST0_SEG1                     0x02408C00
#define ATHUB_BASE__INST0_SEG2                     0
#define ATHUB_BASE__INST0_SEG3                     0
#define ATHUB_BASE__INST0_SEG4                     0

#define ATHUB_BASE__INST1_SEG0                     0
#define ATHUB_BASE__INST1_SEG1                     0
#define ATHUB_BASE__INST1_SEG2                     0
#define ATHUB_BASE__INST1_SEG3                     0
#define ATHUB_BASE__INST1_SEG4                     0

#define ATHUB_BASE__INST2_SEG0                     0
#define ATHUB_BASE__INST2_SEG1                     0
#define ATHUB_BASE__INST2_SEG2                     0
#define ATHUB_BASE__INST2_SEG3                     0
#define ATHUB_BASE__INST2_SEG4                     0

#define ATHUB_BASE__INST3_SEG0                     0
#define ATHUB_BASE__INST3_SEG1                     0
#define ATHUB_BASE__INST3_SEG2                     0
#define ATHUB_BASE__INST3_SEG3                     0
#define ATHUB_BASE__INST3_SEG4                     0

#define ATHUB_BASE__INST4_SEG0                     0
#define ATHUB_BASE__INST4_SEG1                     0
#define ATHUB_BASE__INST4_SEG2                     0
#define ATHUB_BASE__INST4_SEG3                     0
#define ATHUB_BASE__INST4_SEG4                     0

#define ATHUB_BASE__INST5_SEG0                     0
#define ATHUB_BASE__INST5_SEG1                     0
#define ATHUB_BASE__INST5_SEG2                     0
#define ATHUB_BASE__INST5_SEG3                     0
#define ATHUB_BASE__INST5_SEG4                     0

#define ATHUB_BASE__INST6_SEG0                     0
#define ATHUB_BASE__INST6_SEG1                     0
#define ATHUB_BASE__INST6_SEG2                     0
#define ATHUB_BASE__INST6_SEG3                     0
#define ATHUB_BASE__INST6_SEG4                     0

#define CLK_BASE__INST0_SEG0                       0x00016C00
#define CLK_BASE__INST0_SEG1                       0x00016E00
#define CLK_BASE__INST0_SEG2                       0x00017000
#define CLK_BASE__INST0_SEG3                       0x00017E00
#define CLK_BASE__INST0_SEG4                       0

#define CLK_BASE__INST1_SEG0                       0
#define CLK_BASE__INST1_SEG1                       0
#define CLK_BASE__INST1_SEG2                       0
#define CLK_BASE__INST1_SEG3                       0
#define CLK_BASE__INST1_SEG4                       0

#define CLK_BASE__INST2_SEG0                       0
#define CLK_BASE__INST2_SEG1                       0
#define CLK_BASE__INST2_SEG2                       0
#define CLK_BASE__INST2_SEG3                       0
#define CLK_BASE__INST2_SEG4                       0

#define CLK_BASE__INST3_SEG0                       0
#define CLK_BASE__INST3_SEG1                       0
#define CLK_BASE__INST3_SEG2                       0
#define CLK_BASE__INST3_SEG3                       0
#define CLK_BASE__INST3_SEG4                       0

#define CLK_BASE__INST4_SEG0                       0
#define CLK_BASE__INST4_SEG1                       0
#define CLK_BASE__INST4_SEG2                       0
#define CLK_BASE__INST4_SEG3                       0
#define CLK_BASE__INST4_SEG4                       0

#define CLK_BASE__INST5_SEG0                       0
#define CLK_BASE__INST5_SEG1                       0
#define CLK_BASE__INST5_SEG2                       0
#define CLK_BASE__INST5_SEG3                       0
#define CLK_BASE__INST5_SEG4                       0

#define CLK_BASE__INST6_SEG0                       0
#define CLK_BASE__INST6_SEG1                       0
#define CLK_BASE__INST6_SEG2                       0
#define CLK_BASE__INST6_SEG3                       0
#define CLK_BASE__INST6_SEG4                       0

#define DBGU_IO0_BASE__INST0_SEG0                  0x000001E0
#define DBGU_IO0_BASE__INST0_SEG1                  0x0240B400
#define DBGU_IO0_BASE__INST0_SEG2                  0
#define DBGU_IO0_BASE__INST0_SEG3                  0
#define DBGU_IO0_BASE__INST0_SEG4                  0

#define DBGU_IO0_BASE__INST1_SEG0                  0
#define DBGU_IO0_BASE__INST1_SEG1                  0
#define DBGU_IO0_BASE__INST1_SEG2                  0
#define DBGU_IO0_BASE__INST1_SEG3                  0
#define DBGU_IO0_BASE__INST1_SEG4                  0

#define DBGU_IO0_BASE__INST2_SEG0                  0
#define DBGU_IO0_BASE__INST2_SEG1                  0
#define DBGU_IO0_BASE__INST2_SEG2                  0
#define DBGU_IO0_BASE__INST2_SEG3                  0
#define DBGU_IO0_BASE__INST2_SEG4                  0

#define DBGU_IO0_BASE__INST3_SEG0                  0
#define DBGU_IO0_BASE__INST3_SEG1                  0
#define DBGU_IO0_BASE__INST3_SEG2                  0
#define DBGU_IO0_BASE__INST3_SEG3                  0
#define DBGU_IO0_BASE__INST3_SEG4                  0

#define DBGU_IO0_BASE__INST4_SEG0                  0
#define DBGU_IO0_BASE__INST4_SEG1                  0
#define DBGU_IO0_BASE__INST4_SEG2                  0
#define DBGU_IO0_BASE__INST4_SEG3                  0
#define DBGU_IO0_BASE__INST4_SEG4                  0

#define DBGU_IO0_BASE__INST5_SEG0                  0
#define DBGU_IO0_BASE__INST5_SEG1                  0
#define DBGU_IO0_BASE__INST5_SEG2                  0
#define DBGU_IO0_BASE__INST5_SEG3                  0
#define DBGU_IO0_BASE__INST5_SEG4                  0

#define DBGU_IO0_BASE__INST6_SEG0                  0
#define DBGU_IO0_BASE__INST6_SEG1                  0
#define DBGU_IO0_BASE__INST6_SEG2                  0
#define DBGU_IO0_BASE__INST6_SEG3                  0
#define DBGU_IO0_BASE__INST6_SEG4                  0

#define DF_BASE__INST0_SEG0                        0x00007000
#define DF_BASE__INST0_SEG1                        0x0240B800
#define DF_BASE__INST0_SEG2                        0
#define DF_BASE__INST0_SEG3                        0
#define DF_BASE__INST0_SEG4                        0

#define DF_BASE__INST1_SEG0                        0
#define DF_BASE__INST1_SEG1                        0
#define DF_BASE__INST1_SEG2                        0
#define DF_BASE__INST1_SEG3                        0
#define DF_BASE__INST1_SEG4                        0

#define DF_BASE__INST2_SEG0                        0
#define DF_BASE__INST2_SEG1                        0
#define DF_BASE__INST2_SEG2                        0
#define DF_BASE__INST2_SEG3                        0
#define DF_BASE__INST2_SEG4                        0

#define DF_BASE__INST3_SEG0                        0
#define DF_BASE__INST3_SEG1                        0
#define DF_BASE__INST3_SEG2                        0
#define DF_BASE__INST3_SEG3                        0
#define DF_BASE__INST3_SEG4                        0

#define DF_BASE__INST4_SEG0                        0
#define DF_BASE__INST4_SEG1                        0
#define DF_BASE__INST4_SEG2                        0
#define DF_BASE__INST4_SEG3                        0
#define DF_BASE__INST4_SEG4                        0

#define DF_BASE__INST5_SEG0                        0
#define DF_BASE__INST5_SEG1                        0
#define DF_BASE__INST5_SEG2                        0
#define DF_BASE__INST5_SEG3                        0
#define DF_BASE__INST5_SEG4                        0

#define DF_BASE__INST6_SEG0                        0
#define DF_BASE__INST6_SEG1                        0
#define DF_BASE__INST6_SEG2                        0
#define DF_BASE__INST6_SEG3                        0
#define DF_BASE__INST6_SEG4                        0

#define DIO_BASE__INST0_SEG0                       0x02404000
#define DIO_BASE__INST0_SEG1                       0
#define DIO_BASE__INST0_SEG2                       0
#define DIO_BASE__INST0_SEG3                       0
#define DIO_BASE__INST0_SEG4                       0

#define DIO_BASE__INST1_SEG0                       0
#define DIO_BASE__INST1_SEG1                       0
#define DIO_BASE__INST1_SEG2                       0
#define DIO_BASE__INST1_SEG3                       0
#define DIO_BASE__INST1_SEG4                       0

#define DIO_BASE__INST2_SEG0                       0
#define DIO_BASE__INST2_SEG1                       0
#define DIO_BASE__INST2_SEG2                       0
#define DIO_BASE__INST2_SEG3                       0
#define DIO_BASE__INST2_SEG4                       0

#define DIO_BASE__INST3_SEG0                       0
#define DIO_BASE__INST3_SEG1                       0
#define DIO_BASE__INST3_SEG2                       0
#define DIO_BASE__INST3_SEG3                       0
#define DIO_BASE__INST3_SEG4                       0

#define DIO_BASE__INST4_SEG0                       0
#define DIO_BASE__INST4_SEG1                       0
#define DIO_BASE__INST4_SEG2                       0
#define DIO_BASE__INST4_SEG3                       0
#define DIO_BASE__INST4_SEG4                       0

#define DIO_BASE__INST5_SEG0                       0
#define DIO_BASE__INST5_SEG1                       0
#define DIO_BASE__INST5_SEG2                       0
#define DIO_BASE__INST5_SEG3                       0
#define DIO_BASE__INST5_SEG4                       0

#define DIO_BASE__INST6_SEG0                       0
#define DIO_BASE__INST6_SEG1                       0
#define DIO_BASE__INST6_SEG2                       0
#define DIO_BASE__INST6_SEG3                       0
#define DIO_BASE__INST6_SEG4                       0

#define DMU_BASE__INST0_SEG0                       0x00000012
#define DMU_BASE__INST0_SEG1                       0x000000C0
#define DMU_BASE__INST0_SEG2                       0x000034C0
#define DMU_BASE__INST0_SEG3                       0x00009000
#define DMU_BASE__INST0_SEG4                       0x02403C00

#define DMU_BASE__INST1_SEG0                       0
#define DMU_BASE__INST1_SEG1                       0
#define DMU_BASE__INST1_SEG2                       0
#define DMU_BASE__INST1_SEG3                       0
#define DMU_BASE__INST1_SEG4                       0

#define DMU_BASE__INST2_SEG0                       0
#define DMU_BASE__INST2_SEG1                       0
#define DMU_BASE__INST2_SEG2                       0
#define DMU_BASE__INST2_SEG3                       0
#define DMU_BASE__INST2_SEG4                       0

#define DMU_BASE__INST3_SEG0                       0
#define DMU_BASE__INST3_SEG1                       0
#define DMU_BASE__INST3_SEG2                       0
#define DMU_BASE__INST3_SEG3                       0
#define DMU_BASE__INST3_SEG4                       0

#define DMU_BASE__INST4_SEG0                       0
#define DMU_BASE__INST4_SEG1                       0
#define DMU_BASE__INST4_SEG2                       0
#define DMU_BASE__INST4_SEG3                       0
#define DMU_BASE__INST4_SEG4                       0

#define DMU_BASE__INST5_SEG0                       0
#define DMU_BASE__INST5_SEG1                       0
#define DMU_BASE__INST5_SEG2                       0
#define DMU_BASE__INST5_SEG3                       0
#define DMU_BASE__INST5_SEG4                       0

#define DMU_BASE__INST6_SEG0                       0
#define DMU_BASE__INST6_SEG1                       0
#define DMU_BASE__INST6_SEG2                       0
#define DMU_BASE__INST6_SEG3                       0
#define DMU_BASE__INST6_SEG4                       0

#define DPCS_BASE__INST0_SEG0                      0x00000012
#define DPCS_BASE__INST0_SEG1                      0x000000C0
#define DPCS_BASE__INST0_SEG2                      0x000034C0
#define DPCS_BASE__INST0_SEG3                      0x00009000
#define DPCS_BASE__INST0_SEG4                      0x02403C00

#define DPCS_BASE__INST1_SEG0                      0
#define DPCS_BASE__INST1_SEG1                      0
#define DPCS_BASE__INST1_SEG2                      0
#define DPCS_BASE__INST1_SEG3                      0
#define DPCS_BASE__INST1_SEG4                      0

#define DPCS_BASE__INST2_SEG0                      0
#define DPCS_BASE__INST2_SEG1                      0
#define DPCS_BASE__INST2_SEG2                      0
#define DPCS_BASE__INST2_SEG3                      0
#define DPCS_BASE__INST2_SEG4                      0

#define DPCS_BASE__INST3_SEG0                      0
#define DPCS_BASE__INST3_SEG1                      0
#define DPCS_BASE__INST3_SEG2                      0
#define DPCS_BASE__INST3_SEG3                      0
#define DPCS_BASE__INST3_SEG4                      0

#define DPCS_BASE__INST4_SEG0                      0
#define DPCS_BASE__INST4_SEG1                      0
#define DPCS_BASE__INST4_SEG2                      0
#define DPCS_BASE__INST4_SEG3                      0
#define DPCS_BASE__INST4_SEG4                      0

#define DPCS_BASE__INST5_SEG0                      0
#define DPCS_BASE__INST5_SEG1                      0
#define DPCS_BASE__INST5_SEG2                      0
#define DPCS_BASE__INST5_SEG3                      0
#define DPCS_BASE__INST5_SEG4                      0

#define DPCS_BASE__INST6_SEG0                      0
#define DPCS_BASE__INST6_SEG1                      0
#define DPCS_BASE__INST6_SEG2                      0
#define DPCS_BASE__INST6_SEG3                      0
#define DPCS_BASE__INST6_SEG4                      0

#define FUSE_BASE__INST0_SEG0                      0x00017400
#define FUSE_BASE__INST0_SEG1                      0x02401400
#define FUSE_BASE__INST0_SEG2                      0
#define FUSE_BASE__INST0_SEG3                      0
#define FUSE_BASE__INST0_SEG4                      0

#define FUSE_BASE__INST1_SEG0                      0
#define FUSE_BASE__INST1_SEG1                      0
#define FUSE_BASE__INST1_SEG2                      0
#define FUSE_BASE__INST1_SEG3                      0
#define FUSE_BASE__INST1_SEG4                      0

#define FUSE_BASE__INST2_SEG0                      0
#define FUSE_BASE__INST2_SEG1                      0
#define FUSE_BASE__INST2_SEG2                      0
#define FUSE_BASE__INST2_SEG3                      0
#define FUSE_BASE__INST2_SEG4                      0

#define FUSE_BASE__INST3_SEG0                      0
#define FUSE_BASE__INST3_SEG1                      0
#define FUSE_BASE__INST3_SEG2                      0
#define FUSE_BASE__INST3_SEG3                      0
#define FUSE_BASE__INST3_SEG4                      0

#define FUSE_BASE__INST4_SEG0                      0
#define FUSE_BASE__INST4_SEG1                      0
#define FUSE_BASE__INST4_SEG2                      0
#define FUSE_BASE__INST4_SEG3                      0
#define FUSE_BASE__INST4_SEG4                      0

#define FUSE_BASE__INST5_SEG0                      0
#define FUSE_BASE__INST5_SEG1                      0
#define FUSE_BASE__INST5_SEG2                      0
#define FUSE_BASE__INST5_SEG3                      0
#define FUSE_BASE__INST5_SEG4                      0

#define FUSE_BASE__INST6_SEG0                      0
#define FUSE_BASE__INST6_SEG1                      0
#define FUSE_BASE__INST6_SEG2                      0
#define FUSE_BASE__INST6_SEG3                      0
#define FUSE_BASE__INST6_SEG4                      0

#define GC_BASE__INST0_SEG0                        0x00002000
#define GC_BASE__INST0_SEG1                        0x0000A000
#define GC_BASE__INST0_SEG2                        0x02402C00
#define GC_BASE__INST0_SEG3                        0
#define GC_BASE__INST0_SEG4                        0

#define GC_BASE__INST1_SEG0                        0
#define GC_BASE__INST1_SEG1                        0
#define GC_BASE__INST1_SEG2                        0
#define GC_BASE__INST1_SEG3                        0
#define GC_BASE__INST1_SEG4                        0

#define GC_BASE__INST2_SEG0                        0
#define GC_BASE__INST2_SEG1                        0
#define GC_BASE__INST2_SEG2                        0
#define GC_BASE__INST2_SEG3                        0
#define GC_BASE__INST2_SEG4                        0

#define GC_BASE__INST3_SEG0                        0
#define GC_BASE__INST3_SEG1                        0
#define GC_BASE__INST3_SEG2                        0
#define GC_BASE__INST3_SEG3                        0
#define GC_BASE__INST3_SEG4                        0

#define GC_BASE__INST4_SEG0                        0
#define GC_BASE__INST4_SEG1                        0
#define GC_BASE__INST4_SEG2                        0
#define GC_BASE__INST4_SEG3                        0
#define GC_BASE__INST4_SEG4                        0

#define GC_BASE__INST5_SEG0                        0
#define GC_BASE__INST5_SEG1                        0
#define GC_BASE__INST5_SEG2                        0
#define GC_BASE__INST5_SEG3                        0
#define GC_BASE__INST5_SEG4                        0

#define GC_BASE__INST6_SEG0                        0
#define GC_BASE__INST6_SEG1                        0
#define GC_BASE__INST6_SEG2                        0
#define GC_BASE__INST6_SEG3                        0
#define GC_BASE__INST6_SEG4                        0

#define HDA_BASE__INST0_SEG0                       0x02404800
#define HDA_BASE__INST0_SEG1                       0x004C0000
#define HDA_BASE__INST0_SEG2                       0
#define HDA_BASE__INST0_SEG3                       0
#define HDA_BASE__INST0_SEG4                       0

#define HDA_BASE__INST1_SEG0                       0
#define HDA_BASE__INST1_SEG1                       0
#define HDA_BASE__INST1_SEG2                       0
#define HDA_BASE__INST1_SEG3                       0
#define HDA_BASE__INST1_SEG4                       0

#define HDA_BASE__INST2_SEG0                       0
#define HDA_BASE__INST2_SEG1                       0
#define HDA_BASE__INST2_SEG2                       0
#define HDA_BASE__INST2_SEG3                       0
#define HDA_BASE__INST2_SEG4                       0

#define HDA_BASE__INST3_SEG0                       0
#define HDA_BASE__INST3_SEG1                       0
#define HDA_BASE__INST3_SEG2                       0
#define HDA_BASE__INST3_SEG3                       0
#define HDA_BASE__INST3_SEG4                       0

#define HDA_BASE__INST4_SEG0                       0
#define HDA_BASE__INST4_SEG1                       0
#define HDA_BASE__INST4_SEG2                       0
#define HDA_BASE__INST4_SEG3                       0
#define HDA_BASE__INST4_SEG4                       0

#define HDA_BASE__INST5_SEG0                       0
#define HDA_BASE__INST5_SEG1                       0
#define HDA_BASE__INST5_SEG2                       0
#define HDA_BASE__INST5_SEG3                       0
#define HDA_BASE__INST5_SEG4                       0

#define HDA_BASE__INST6_SEG0                       0
#define HDA_BASE__INST6_SEG1                       0
#define HDA_BASE__INST6_SEG2                       0
#define HDA_BASE__INST6_SEG3                       0
#define HDA_BASE__INST6_SEG4                       0

#define HDP_BASE__INST0_SEG0                       0x00000F20
#define HDP_BASE__INST0_SEG1                       0x0240A400
#define HDP_BASE__INST0_SEG2                       0
#define HDP_BASE__INST0_SEG3                       0
#define HDP_BASE__INST0_SEG4                       0

#define HDP_BASE__INST1_SEG0                       0
#define HDP_BASE__INST1_SEG1                       0
#define HDP_BASE__INST1_SEG2                       0
#define HDP_BASE__INST1_SEG3                       0
#define HDP_BASE__INST1_SEG4                       0

#define HDP_BASE__INST2_SEG0                       0
#define HDP_BASE__INST2_SEG1                       0
#define HDP_BASE__INST2_SEG2                       0
#define HDP_BASE__INST2_SEG3                       0
#define HDP_BASE__INST2_SEG4                       0

#define HDP_BASE__INST3_SEG0                       0
#define HDP_BASE__INST3_SEG1                       0
#define HDP_BASE__INST3_SEG2                       0
#define HDP_BASE__INST3_SEG3                       0
#define HDP_BASE__INST3_SEG4                       0

#define HDP_BASE__INST4_SEG0                       0
#define HDP_BASE__INST4_SEG1                       0
#define HDP_BASE__INST4_SEG2                       0
#define HDP_BASE__INST4_SEG3                       0
#define HDP_BASE__INST4_SEG4                       0

#define HDP_BASE__INST5_SEG0                       0
#define HDP_BASE__INST5_SEG1                       0
#define HDP_BASE__INST5_SEG2                       0
#define HDP_BASE__INST5_SEG3                       0
#define HDP_BASE__INST5_SEG4                       0

#define HDP_BASE__INST6_SEG0                       0
#define HDP_BASE__INST6_SEG1                       0
#define HDP_BASE__INST6_SEG2                       0
#define HDP_BASE__INST6_SEG3                       0
#define HDP_BASE__INST6_SEG4                       0

#define IOHC0_BASE__INST0_SEG0                     0x00010000
#define IOHC0_BASE__INST0_SEG1                     0x02406000
#define IOHC0_BASE__INST0_SEG2                     0x04EC0000
#define IOHC0_BASE__INST0_SEG3                     0
#define IOHC0_BASE__INST0_SEG4                     0

#define IOHC0_BASE__INST1_SEG0                     0
#define IOHC0_BASE__INST1_SEG1                     0
#define IOHC0_BASE__INST1_SEG2                     0
#define IOHC0_BASE__INST1_SEG3                     0
#define IOHC0_BASE__INST1_SEG4                     0

#define IOHC0_BASE__INST2_SEG0                     0
#define IOHC0_BASE__INST2_SEG1                     0
#define IOHC0_BASE__INST2_SEG2                     0
#define IOHC0_BASE__INST2_SEG3                     0
#define IOHC0_BASE__INST2_SEG4                     0

#define IOHC0_BASE__INST3_SEG0                     0
#define IOHC0_BASE__INST3_SEG1                     0
#define IOHC0_BASE__INST3_SEG2                     0
#define IOHC0_BASE__INST3_SEG3                     0
#define IOHC0_BASE__INST3_SEG4                     0

#define IOHC0_BASE__INST4_SEG0                     0
#define IOHC0_BASE__INST4_SEG1                     0
#define IOHC0_BASE__INST4_SEG2                     0
#define IOHC0_BASE__INST4_SEG3                     0
#define IOHC0_BASE__INST4_SEG4                     0

#define IOHC0_BASE__INST5_SEG0                     0
#define IOHC0_BASE__INST5_SEG1                     0
#define IOHC0_BASE__INST5_SEG2                     0
#define IOHC0_BASE__INST5_SEG3                     0
#define IOHC0_BASE__INST5_SEG4                     0

#define IOHC0_BASE__INST6_SEG0                     0
#define IOHC0_BASE__INST6_SEG1                     0
#define IOHC0_BASE__INST6_SEG2                     0
#define IOHC0_BASE__INST6_SEG3                     0
#define IOHC0_BASE__INST6_SEG4                     0

#define ISP_BASE__INST0_SEG0                       0x00018000
#define ISP_BASE__INST0_SEG1                       0x0240B000
#define ISP_BASE__INST0_SEG2                       0
#define ISP_BASE__INST0_SEG3                       0
#define ISP_BASE__INST0_SEG4                       0

#define ISP_BASE__INST1_SEG0                       0
#define ISP_BASE__INST1_SEG1                       0
#define ISP_BASE__INST1_SEG2                       0
#define ISP_BASE__INST1_SEG3                       0
#define ISP_BASE__INST1_SEG4                       0

#define ISP_BASE__INST2_SEG0                       0
#define ISP_BASE__INST2_SEG1                       0
#define ISP_BASE__INST2_SEG2                       0
#define ISP_BASE__INST2_SEG3                       0
#define ISP_BASE__INST2_SEG4                       0

#define ISP_BASE__INST3_SEG0                       0
#define ISP_BASE__INST3_SEG1                       0
#define ISP_BASE__INST3_SEG2                       0
#define ISP_BASE__INST3_SEG3                       0
#define ISP_BASE__INST3_SEG4                       0

#define ISP_BASE__INST4_SEG0                       0
#define ISP_BASE__INST4_SEG1                       0
#define ISP_BASE__INST4_SEG2                       0
#define ISP_BASE__INST4_SEG3                       0
#define ISP_BASE__INST4_SEG4                       0

#define ISP_BASE__INST5_SEG0                       0
#define ISP_BASE__INST5_SEG1                       0
#define ISP_BASE__INST5_SEG2                       0
#define ISP_BASE__INST5_SEG3                       0
#define ISP_BASE__INST5_SEG4                       0

#define ISP_BASE__INST6_SEG0                       0
#define ISP_BASE__INST6_SEG1                       0
#define ISP_BASE__INST6_SEG2                       0
#define ISP_BASE__INST6_SEG3                       0
#define ISP_BASE__INST6_SEG4                       0

#define L2IMU0_BASE__INST0_SEG0                    0x00007DC0
#define L2IMU0_BASE__INST0_SEG1                    0x02407000
#define L2IMU0_BASE__INST0_SEG2                    0x00900000
#define L2IMU0_BASE__INST0_SEG3                    0x04FC0000
#define L2IMU0_BASE__INST0_SEG4                    0x055C0000

#define L2IMU0_BASE__INST1_SEG0                    0
#define L2IMU0_BASE__INST1_SEG1                    0
#define L2IMU0_BASE__INST1_SEG2                    0
#define L2IMU0_BASE__INST1_SEG3                    0
#define L2IMU0_BASE__INST1_SEG4                    0

#define L2IMU0_BASE__INST2_SEG0                    0
#define L2IMU0_BASE__INST2_SEG1                    0
#define L2IMU0_BASE__INST2_SEG2                    0
#define L2IMU0_BASE__INST2_SEG3                    0
#define L2IMU0_BASE__INST2_SEG4                    0

#define L2IMU0_BASE__INST3_SEG0                    0
#define L2IMU0_BASE__INST3_SEG1                    0
#define L2IMU0_BASE__INST3_SEG2                    0
#define L2IMU0_BASE__INST3_SEG3                    0
#define L2IMU0_BASE__INST3_SEG4                    0

#define L2IMU0_BASE__INST4_SEG0                    0
#define L2IMU0_BASE__INST4_SEG1                    0
#define L2IMU0_BASE__INST4_SEG2                    0
#define L2IMU0_BASE__INST4_SEG3                    0
#define L2IMU0_BASE__INST4_SEG4                    0

#define L2IMU0_BASE__INST5_SEG0                    0
#define L2IMU0_BASE__INST5_SEG1                    0
#define L2IMU0_BASE__INST5_SEG2                    0
#define L2IMU0_BASE__INST5_SEG3                    0
#define L2IMU0_BASE__INST5_SEG4                    0

#define L2IMU0_BASE__INST6_SEG0                    0
#define L2IMU0_BASE__INST6_SEG1                    0
#define L2IMU0_BASE__INST6_SEG2                    0
#define L2IMU0_BASE__INST6_SEG3                    0
#define L2IMU0_BASE__INST6_SEG4                    0

#define MMHUB_BASE__INST0_SEG0                     0x0001A000
#define MMHUB_BASE__INST0_SEG1                     0x02408800
#define MMHUB_BASE__INST0_SEG2                     0
#define MMHUB_BASE__INST0_SEG3                     0
#define MMHUB_BASE__INST0_SEG4                     0

#define MMHUB_BASE__INST1_SEG0                     0
#define MMHUB_BASE__INST1_SEG1                     0
#define MMHUB_BASE__INST1_SEG2                     0
#define MMHUB_BASE__INST1_SEG3                     0
#define MMHUB_BASE__INST1_SEG4                     0

#define MMHUB_BASE__INST2_SEG0                     0
#define MMHUB_BASE__INST2_SEG1                     0
#define MMHUB_BASE__INST2_SEG2                     0
#define MMHUB_BASE__INST2_SEG3                     0
#define MMHUB_BASE__INST2_SEG4                     0

#define MMHUB_BASE__INST3_SEG0                     0
#define MMHUB_BASE__INST3_SEG1                     0
#define MMHUB_BASE__INST3_SEG2                     0
#define MMHUB_BASE__INST3_SEG3                     0
#define MMHUB_BASE__INST3_SEG4                     0

#define MMHUB_BASE__INST4_SEG0                     0
#define MMHUB_BASE__INST4_SEG1                     0
#define MMHUB_BASE__INST4_SEG2                     0
#define MMHUB_BASE__INST4_SEG3                     0
#define MMHUB_BASE__INST4_SEG4                     0

#define MMHUB_BASE__INST5_SEG0                     0
#define MMHUB_BASE__INST5_SEG1                     0
#define MMHUB_BASE__INST5_SEG2                     0
#define MMHUB_BASE__INST5_SEG3                     0
#define MMHUB_BASE__INST5_SEG4                     0

#define MMHUB_BASE__INST6_SEG0                     0
#define MMHUB_BASE__INST6_SEG1                     0
#define MMHUB_BASE__INST6_SEG2                     0
#define MMHUB_BASE__INST6_SEG3                     0
#define MMHUB_BASE__INST6_SEG4                     0

#define MP0_BASE__INST0_SEG0                       0x00016000
#define MP0_BASE__INST0_SEG1                       0x0243FC00
#define MP0_BASE__INST0_SEG2                       0x00DC0000
#define MP0_BASE__INST0_SEG3                       0x00E00000
#define MP0_BASE__INST0_SEG4                       0x00E40000

#define MP0_BASE__INST1_SEG0                       0
#define MP0_BASE__INST1_SEG1                       0
#define MP0_BASE__INST1_SEG2                       0
#define MP0_BASE__INST1_SEG3                       0
#define MP0_BASE__INST1_SEG4                       0

#define MP0_BASE__INST2_SEG0                       0
#define MP0_BASE__INST2_SEG1                       0
#define MP0_BASE__INST2_SEG2                       0
#define MP0_BASE__INST2_SEG3                       0
#define MP0_BASE__INST2_SEG4                       0

#define MP0_BASE__INST3_SEG0                       0
#define MP0_BASE__INST3_SEG1                       0
#define MP0_BASE__INST3_SEG2                       0
#define MP0_BASE__INST3_SEG3                       0
#define MP0_BASE__INST3_SEG4                       0

#define MP0_BASE__INST4_SEG0                       0
#define MP0_BASE__INST4_SEG1                       0
#define MP0_BASE__INST4_SEG2                       0
#define MP0_BASE__INST4_SEG3                       0
#define MP0_BASE__INST4_SEG4                       0

#define MP0_BASE__INST5_SEG0                       0
#define MP0_BASE__INST5_SEG1                       0
#define MP0_BASE__INST5_SEG2                       0
#define MP0_BASE__INST5_SEG3                       0
#define MP0_BASE__INST5_SEG4                       0

#define MP0_BASE__INST6_SEG0                       0
#define MP0_BASE__INST6_SEG1                       0
#define MP0_BASE__INST6_SEG2                       0
#define MP0_BASE__INST6_SEG3                       0
#define MP0_BASE__INST6_SEG4                       0

#define MP1_BASE__INST0_SEG0                       0x00016200
#define MP1_BASE__INST0_SEG1                       0x02400400
#define MP1_BASE__INST0_SEG2                       0x00E80000
#define MP1_BASE__INST0_SEG3                       0x00EC0000
#define MP1_BASE__INST0_SEG4                       0x00F00000

#define MP1_BASE__INST1_SEG0                       0
#define MP1_BASE__INST1_SEG1                       0
#define MP1_BASE__INST1_SEG2                       0
#define MP1_BASE__INST1_SEG3                       0
#define MP1_BASE__INST1_SEG4                       0

#define MP1_BASE__INST2_SEG0                       0
#define MP1_BASE__INST2_SEG1                       0
#define MP1_BASE__INST2_SEG2                       0
#define MP1_BASE__INST2_SEG3                       0
#define MP1_BASE__INST2_SEG4                       0

#define MP1_BASE__INST3_SEG0                       0
#define MP1_BASE__INST3_SEG1                       0
#define MP1_BASE__INST3_SEG2                       0
#define MP1_BASE__INST3_SEG3                       0
#define MP1_BASE__INST3_SEG4                       0

#define MP1_BASE__INST4_SEG0                       0
#define MP1_BASE__INST4_SEG1                       0
#define MP1_BASE__INST4_SEG2                       0
#define MP1_BASE__INST4_SEG3                       0
#define MP1_BASE__INST4_SEG4                       0

#define MP1_BASE__INST5_SEG0                       0
#define MP1_BASE__INST5_SEG1                       0
#define MP1_BASE__INST5_SEG2                       0
#define MP1_BASE__INST5_SEG3                       0
#define MP1_BASE__INST5_SEG4                       0

#define MP1_BASE__INST6_SEG0                       0
#define MP1_BASE__INST6_SEG1                       0
#define MP1_BASE__INST6_SEG2                       0
#define MP1_BASE__INST6_SEG3                       0
#define MP1_BASE__INST6_SEG4                       0

#define NBIF0_BASE__INST0_SEG0                     0x00000000
#define NBIF0_BASE__INST0_SEG1                     0x00000014
#define NBIF0_BASE__INST0_SEG2                     0x00000D20
#define NBIF0_BASE__INST0_SEG3                     0x00010400
#define NBIF0_BASE__INST0_SEG4                     0x0241B000

#define NBIF0_BASE__INST1_SEG0                     0
#define NBIF0_BASE__INST1_SEG1                     0
#define NBIF0_BASE__INST1_SEG2                     0
#define NBIF0_BASE__INST1_SEG3                     0
#define NBIF0_BASE__INST1_SEG4                     0

#define NBIF0_BASE__INST2_SEG0                     0
#define NBIF0_BASE__INST2_SEG1                     0
#define NBIF0_BASE__INST2_SEG2                     0
#define NBIF0_BASE__INST2_SEG3                     0
#define NBIF0_BASE__INST2_SEG4                     0

#define NBIF0_BASE__INST3_SEG0                     0
#define NBIF0_BASE__INST3_SEG1                     0
#define NBIF0_BASE__INST3_SEG2                     0
#define NBIF0_BASE__INST3_SEG3                     0
#define NBIF0_BASE__INST3_SEG4                     0

#define NBIF0_BASE__INST4_SEG0                     0
#define NBIF0_BASE__INST4_SEG1                     0
#define NBIF0_BASE__INST4_SEG2                     0
#define NBIF0_BASE__INST4_SEG3                     0
#define NBIF0_BASE__INST4_SEG4                     0

#define NBIF0_BASE__INST5_SEG0                     0
#define NBIF0_BASE__INST5_SEG1                     0
#define NBIF0_BASE__INST5_SEG2                     0
#define NBIF0_BASE__INST5_SEG3                     0
#define NBIF0_BASE__INST5_SEG4                     0

#define NBIF0_BASE__INST6_SEG0                     0
#define NBIF0_BASE__INST6_SEG1                     0
#define NBIF0_BASE__INST6_SEG2                     0
#define NBIF0_BASE__INST6_SEG3                     0
#define NBIF0_BASE__INST6_SEG4                     0

#define OSSSYS_BASE__INST0_SEG0                    0x000010A0
#define OSSSYS_BASE__INST0_SEG1                    0x0240A000
#define OSSSYS_BASE__INST0_SEG2                    0
#define OSSSYS_BASE__INST0_SEG3                    0
#define OSSSYS_BASE__INST0_SEG4                    0

#define OSSSYS_BASE__INST1_SEG0                    0
#define OSSSYS_BASE__INST1_SEG1                    0
#define OSSSYS_BASE__INST1_SEG2                    0
#define OSSSYS_BASE__INST1_SEG3                    0
#define OSSSYS_BASE__INST1_SEG4                    0

#define OSSSYS_BASE__INST2_SEG0                    0
#define OSSSYS_BASE__INST2_SEG1                    0
#define OSSSYS_BASE__INST2_SEG2                    0
#define OSSSYS_BASE__INST2_SEG3                    0
#define OSSSYS_BASE__INST2_SEG4                    0

#define OSSSYS_BASE__INST3_SEG0                    0
#define OSSSYS_BASE__INST3_SEG1                    0
#define OSSSYS_BASE__INST3_SEG2                    0
#define OSSSYS_BASE__INST3_SEG3                    0
#define OSSSYS_BASE__INST3_SEG4                    0

#define OSSSYS_BASE__INST4_SEG0                    0
#define OSSSYS_BASE__INST4_SEG1                    0
#define OSSSYS_BASE__INST4_SEG2                    0
#define OSSSYS_BASE__INST4_SEG3                    0
#define OSSSYS_BASE__INST4_SEG4                    0

#define OSSSYS_BASE__INST5_SEG0                    0
#define OSSSYS_BASE__INST5_SEG1                    0
#define OSSSYS_BASE__INST5_SEG2                    0
#define OSSSYS_BASE__INST5_SEG3                    0
#define OSSSYS_BASE__INST5_SEG4                    0

#define OSSSYS_BASE__INST6_SEG0                    0
#define OSSSYS_BASE__INST6_SEG1                    0
#define OSSSYS_BASE__INST6_SEG2                    0
#define OSSSYS_BASE__INST6_SEG3                    0
#define OSSSYS_BASE__INST6_SEG4                    0

#define PCIE0_BASE__INST0_SEG0                     0x02411800
#define PCIE0_BASE__INST0_SEG1                     0x04440000
#define PCIE0_BASE__INST0_SEG2                     0
#define PCIE0_BASE__INST0_SEG3                     0
#define PCIE0_BASE__INST0_SEG4                     0

#define PCIE0_BASE__INST1_SEG0                     0
#define PCIE0_BASE__INST1_SEG1                     0
#define PCIE0_BASE__INST1_SEG2                     0
#define PCIE0_BASE__INST1_SEG3                     0
#define PCIE0_BASE__INST1_SEG4                     0

#define PCIE0_BASE__INST2_SEG0                     0
#define PCIE0_BASE__INST2_SEG1                     0
#define PCIE0_BASE__INST2_SEG2                     0
#define PCIE0_BASE__INST2_SEG3                     0
#define PCIE0_BASE__INST2_SEG4                     0

#define PCIE0_BASE__INST3_SEG0                     0
#define PCIE0_BASE__INST3_SEG1                     0
#define PCIE0_BASE__INST3_SEG2                     0
#define PCIE0_BASE__INST3_SEG3                     0
#define PCIE0_BASE__INST3_SEG4                     0

#define PCIE0_BASE__INST4_SEG0                     0
#define PCIE0_BASE__INST4_SEG1                     0
#define PCIE0_BASE__INST4_SEG2                     0
#define PCIE0_BASE__INST4_SEG3                     0
#define PCIE0_BASE__INST4_SEG4                     0

#define PCIE0_BASE__INST5_SEG0                     0
#define PCIE0_BASE__INST5_SEG1                     0
#define PCIE0_BASE__INST5_SEG2                     0
#define PCIE0_BASE__INST5_SEG3                     0
#define PCIE0_BASE__INST5_SEG4                     0

#define PCIE0_BASE__INST6_SEG0                     0
#define PCIE0_BASE__INST6_SEG1                     0
#define PCIE0_BASE__INST6_SEG2                     0
#define PCIE0_BASE__INST6_SEG3                     0
#define PCIE0_BASE__INST6_SEG4                     0

#define SDMA0_BASE__INST0_SEG0                     0x00001260
#define SDMA0_BASE__INST0_SEG1                     0x0240A800
#define SDMA0_BASE__INST0_SEG2                     0
#define SDMA0_BASE__INST0_SEG3                     0
#define SDMA0_BASE__INST0_SEG4                     0

#define SDMA0_BASE__INST1_SEG0                     0
#define SDMA0_BASE__INST1_SEG1                     0
#define SDMA0_BASE__INST1_SEG2                     0
#define SDMA0_BASE__INST1_SEG3                     0
#define SDMA0_BASE__INST1_SEG4                     0

#define SDMA0_BASE__INST2_SEG0                     0
#define SDMA0_BASE__INST2_SEG1                     0
#define SDMA0_BASE__INST2_SEG2                     0
#define SDMA0_BASE__INST2_SEG3                     0
#define SDMA0_BASE__INST2_SEG4                     0

#define SDMA0_BASE__INST3_SEG0                     0
#define SDMA0_BASE__INST3_SEG1                     0
#define SDMA0_BASE__INST3_SEG2                     0
#define SDMA0_BASE__INST3_SEG3                     0
#define SDMA0_BASE__INST3_SEG4                     0

#define SDMA0_BASE__INST4_SEG0                     0
#define SDMA0_BASE__INST4_SEG1                     0
#define SDMA0_BASE__INST4_SEG2                     0
#define SDMA0_BASE__INST4_SEG3                     0
#define SDMA0_BASE__INST4_SEG4                     0

#define SDMA0_BASE__INST5_SEG0                     0
#define SDMA0_BASE__INST5_SEG1                     0
#define SDMA0_BASE__INST5_SEG2                     0
#define SDMA0_BASE__INST5_SEG3                     0
#define SDMA0_BASE__INST5_SEG4                     0

#define SDMA0_BASE__INST6_SEG0                     0
#define SDMA0_BASE__INST6_SEG1                     0
#define SDMA0_BASE__INST6_SEG2                     0
#define SDMA0_BASE__INST6_SEG3                     0
#define SDMA0_BASE__INST6_SEG4                     0

#define SMUIO_BASE__INST0_SEG0                     0x00016800
#define SMUIO_BASE__INST0_SEG1                     0x00016A00
#define SMUIO_BASE__INST0_SEG2                     0x02401000
#define SMUIO_BASE__INST0_SEG3                     0x00440000
#define SMUIO_BASE__INST0_SEG4                     0

#define SMUIO_BASE__INST1_SEG0                     0
#define SMUIO_BASE__INST1_SEG1                     0
#define SMUIO_BASE__INST1_SEG2                     0
#define SMUIO_BASE__INST1_SEG3                     0
#define SMUIO_BASE__INST1_SEG4                     0

#define SMUIO_BASE__INST2_SEG0                     0
#define SMUIO_BASE__INST2_SEG1                     0
#define SMUIO_BASE__INST2_SEG2                     0
#define SMUIO_BASE__INST2_SEG3                     0
#define SMUIO_BASE__INST2_SEG4                     0

#define SMUIO_BASE__INST3_SEG0                     0
#define SMUIO_BASE__INST3_SEG1                     0
#define SMUIO_BASE__INST3_SEG2                     0
#define SMUIO_BASE__INST3_SEG3                     0
#define SMUIO_BASE__INST3_SEG4                     0

#define SMUIO_BASE__INST4_SEG0                     0
#define SMUIO_BASE__INST4_SEG1                     0
#define SMUIO_BASE__INST4_SEG2                     0
#define SMUIO_BASE__INST4_SEG3                     0
#define SMUIO_BASE__INST4_SEG4                     0

#define SMUIO_BASE__INST5_SEG0                     0
#define SMUIO_BASE__INST5_SEG1                     0
#define SMUIO_BASE__INST5_SEG2                     0
#define SMUIO_BASE__INST5_SEG3                     0
#define SMUIO_BASE__INST5_SEG4                     0

#define SMUIO_BASE__INST6_SEG0                     0
#define SMUIO_BASE__INST6_SEG1                     0
#define SMUIO_BASE__INST6_SEG2                     0
#define SMUIO_BASE__INST6_SEG3                     0
#define SMUIO_BASE__INST6_SEG4                     0

#define THM_BASE__INST0_SEG0                       0x00016600
#define THM_BASE__INST0_SEG1                       0x02400C00
#define THM_BASE__INST0_SEG2                       0
#define THM_BASE__INST0_SEG3                       0
#define THM_BASE__INST0_SEG4                       0

#define THM_BASE__INST1_SEG0                       0
#define THM_BASE__INST1_SEG1                       0
#define THM_BASE__INST1_SEG2                       0
#define THM_BASE__INST1_SEG3                       0
#define THM_BASE__INST1_SEG4                       0

#define THM_BASE__INST2_SEG0                       0
#define THM_BASE__INST2_SEG1                       0
#define THM_BASE__INST2_SEG2                       0
#define THM_BASE__INST2_SEG3                       0
#define THM_BASE__INST2_SEG4                       0

#define THM_BASE__INST3_SEG0                       0
#define THM_BASE__INST3_SEG1                       0
#define THM_BASE__INST3_SEG2                       0
#define THM_BASE__INST3_SEG3                       0
#define THM_BASE__INST3_SEG4                       0

#define THM_BASE__INST4_SEG0                       0
#define THM_BASE__INST4_SEG1                       0
#define THM_BASE__INST4_SEG2                       0
#define THM_BASE__INST4_SEG3                       0
#define THM_BASE__INST4_SEG4                       0

#define THM_BASE__INST5_SEG0                       0
#define THM_BASE__INST5_SEG1                       0
#define THM_BASE__INST5_SEG2                       0
#define THM_BASE__INST5_SEG3                       0
#define THM_BASE__INST5_SEG4                       0

#define THM_BASE__INST6_SEG0                       0
#define THM_BASE__INST6_SEG1                       0
#define THM_BASE__INST6_SEG2                       0
#define THM_BASE__INST6_SEG3                       0
#define THM_BASE__INST6_SEG4                       0

#define UMC_BASE__INST0_SEG0                       0x00014000
#define UMC_BASE__INST0_SEG1                       0x02425800
#define UMC_BASE__INST0_SEG2                       0
#define UMC_BASE__INST0_SEG3                       0
#define UMC_BASE__INST0_SEG4                       0

#define UMC_BASE__INST1_SEG0                       0x00054000
#define UMC_BASE__INST1_SEG1                       0x02425C00
#define UMC_BASE__INST1_SEG2                       0
#define UMC_BASE__INST1_SEG3                       0
#define UMC_BASE__INST1_SEG4                       0

#define UMC_BASE__INST2_SEG0                       0
#define UMC_BASE__INST2_SEG1                       0
#define UMC_BASE__INST2_SEG2                       0
#define UMC_BASE__INST2_SEG3                       0
#define UMC_BASE__INST2_SEG4                       0

#define UMC_BASE__INST3_SEG0                       0
#define UMC_BASE__INST3_SEG1                       0
#define UMC_BASE__INST3_SEG2                       0
#define UMC_BASE__INST3_SEG3                       0
#define UMC_BASE__INST3_SEG4                       0

#define UMC_BASE__INST4_SEG0                       0
#define UMC_BASE__INST4_SEG1                       0
#define UMC_BASE__INST4_SEG2                       0
#define UMC_BASE__INST4_SEG3                       0
#define UMC_BASE__INST4_SEG4                       0

#define UMC_BASE__INST5_SEG0                       0
#define UMC_BASE__INST5_SEG1                       0
#define UMC_BASE__INST5_SEG2                       0
#define UMC_BASE__INST5_SEG3                       0
#define UMC_BASE__INST5_SEG4                       0

#define UMC_BASE__INST6_SEG0                       0
#define UMC_BASE__INST6_SEG1                       0
#define UMC_BASE__INST6_SEG2                       0
#define UMC_BASE__INST6_SEG3                       0
#define UMC_BASE__INST6_SEG4                       0

#define USB0_BASE__INST0_SEG0                      0x0242A800
#define USB0_BASE__INST0_SEG1                      0x05B00000
#define USB0_BASE__INST0_SEG2                      0
#define USB0_BASE__INST0_SEG3                      0
#define USB0_BASE__INST0_SEG4                      0

#define USB0_BASE__INST1_SEG0                      0
#define USB0_BASE__INST1_SEG1                      0
#define USB0_BASE__INST1_SEG2                      0
#define USB0_BASE__INST1_SEG3                      0
#define USB0_BASE__INST1_SEG4                      0

#define USB0_BASE__INST2_SEG0                      0
#define USB0_BASE__INST2_SEG1                      0
#define USB0_BASE__INST2_SEG2                      0
#define USB0_BASE__INST2_SEG3                      0
#define USB0_BASE__INST2_SEG4                      0

#define USB0_BASE__INST3_SEG0                      0
#define USB0_BASE__INST3_SEG1                      0
#define USB0_BASE__INST3_SEG2                      0
#define USB0_BASE__INST3_SEG3                      0
#define USB0_BASE__INST3_SEG4                      0

#define USB0_BASE__INST4_SEG0                      0
#define USB0_BASE__INST4_SEG1                      0
#define USB0_BASE__INST4_SEG2                      0
#define USB0_BASE__INST4_SEG3                      0
#define USB0_BASE__INST4_SEG4                      0

#define USB0_BASE__INST5_SEG0                      0
#define USB0_BASE__INST5_SEG1                      0
#define USB0_BASE__INST5_SEG2                      0
#define USB0_BASE__INST5_SEG3                      0
#define USB0_BASE__INST5_SEG4                      0

#define USB0_BASE__INST6_SEG0                      0
#define USB0_BASE__INST6_SEG1                      0
#define USB0_BASE__INST6_SEG2                      0
#define USB0_BASE__INST6_SEG3                      0
#define USB0_BASE__INST6_SEG4                      0

#define UVD0_BASE__INST0_SEG0                      0x00007800
#define UVD0_BASE__INST0_SEG1                      0x00007E00
#define UVD0_BASE__INST0_SEG2                      0x02403000
#define UVD0_BASE__INST0_SEG3                      0
#define UVD0_BASE__INST0_SEG4                      0

#define UVD0_BASE__INST1_SEG0                      0
#define UVD0_BASE__INST1_SEG1                      0
#define UVD0_BASE__INST1_SEG2                      0
#define UVD0_BASE__INST1_SEG3                      0
#define UVD0_BASE__INST1_SEG4                      0

#define UVD0_BASE__INST2_SEG0                      0
#define UVD0_BASE__INST2_SEG1                      0
#define UVD0_BASE__INST2_SEG2                      0
#define UVD0_BASE__INST2_SEG3                      0
#define UVD0_BASE__INST2_SEG4                      0

#define UVD0_BASE__INST3_SEG0                      0
#define UVD0_BASE__INST3_SEG1                      0
#define UVD0_BASE__INST3_SEG2                      0
#define UVD0_BASE__INST3_SEG3                      0
#define UVD0_BASE__INST3_SEG4                      0

#define UVD0_BASE__INST4_SEG0                      0
#define UVD0_BASE__INST4_SEG1                      0
#define UVD0_BASE__INST4_SEG2                      0
#define UVD0_BASE__INST4_SEG3                      0
#define UVD0_BASE__INST4_SEG4                      0

#define UVD0_BASE__INST5_SEG0                      0
#define UVD0_BASE__INST5_SEG1                      0
#define UVD0_BASE__INST5_SEG2                      0
#define UVD0_BASE__INST5_SEG3                      0
#define UVD0_BASE__INST5_SEG4                      0

#define UVD0_BASE__INST6_SEG0                      0
#define UVD0_BASE__INST6_SEG1                      0
#define UVD0_BASE__INST6_SEG2                      0
#define UVD0_BASE__INST6_SEG3                      0
#define UVD0_BASE__INST6_SEG4                      0

#define DCN_BASE__INST0_SEG0                      0x00000012
#define DCN_BASE__INST0_SEG1                      0x000000C0
#define DCN_BASE__INST0_SEG2                      0x000034C0
#define DCN_BASE__INST0_SEG3                      0
#define DCN_BASE__INST0_SEG4                      0

#define DCN_BASE__INST1_SEG0                      0
#define DCN_BASE__INST1_SEG1                      0
#define DCN_BASE__INST1_SEG2                      0
#define DCN_BASE__INST1_SEG3                      0
#define DCN_BASE__INST1_SEG4                      0

#define DCN_BASE__INST2_SEG0                      0
#define DCN_BASE__INST2_SEG1                      0
#define DCN_BASE__INST2_SEG2                      0
#define DCN_BASE__INST2_SEG3                      0
#define DCN_BASE__INST2_SEG4                      0

#define DCN_BASE__INST3_SEG0                      0
#define DCN_BASE__INST3_SEG1                      0
#define DCN_BASE__INST3_SEG2                      0
#define DCN_BASE__INST3_SEG3                      0
#define DCN_BASE__INST3_SEG4                      0

#define DCN_BASE__INST4_SEG0                      0
#define DCN_BASE__INST4_SEG1                      0
#define DCN_BASE__INST4_SEG2                      0
#define DCN_BASE__INST4_SEG3                      0
#define DCN_BASE__INST4_SEG4                      0
#endif
/*
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef _PPTABLE_H
#define _PPTABLE_H

#pragma pack(1)

typedef struct _ATOM_PPLIB_THERMALCONTROLLER

{
    UCHAR ucType;           // one of ATOM_PP_THERMALCONTROLLER_*
    UCHAR ucI2cLine;        // as interpreted by DAL I2C
    UCHAR ucI2cAddress;
    UCHAR ucFanParameters;  // Fan Control Parameters.
    UCHAR ucFanMinRPM;      // Fan Minimum RPM (hundreds) -- for display purposes only.
    UCHAR ucFanMaxRPM;      // Fan Maximum RPM (hundreds) -- for display purposes only.
    UCHAR ucReserved;       // ----
    UCHAR ucFlags;          // to be defined
} ATOM_PPLIB_THERMALCONTROLLER;

#define ATOM_PP_FANPARAMETERS_TACHOMETER_PULSES_PER_REVOLUTION_MASK 0x0f
#define ATOM_PP_FANPARAMETERS_NOFAN                                 0x80    // No fan is connected to this controller.

#define ATOM_PP_THERMALCONTROLLER_NONE      0
#define ATOM_PP_THERMALCONTROLLER_LM63      1  // Not used by PPLib
#define ATOM_PP_THERMALCONTROLLER_ADM1032   2  // Not used by PPLib
#define ATOM_PP_THERMALCONTROLLER_ADM1030   3  // Not used by PPLib
#define ATOM_PP_THERMALCONTROLLER_MUA6649   4  // Not used by PPLib
#define ATOM_PP_THERMALCONTROLLER_LM64      5
#define ATOM_PP_THERMALCONTROLLER_F75375    6  // Not used by PPLib
#define ATOM_PP_THERMALCONTROLLER_RV6xx     7
#define ATOM_PP_THERMALCONTROLLER_RV770     8
#define ATOM_PP_THERMALCONTROLLER_ADT7473   9
#define ATOM_PP_THERMALCONTROLLER_KONG      10
#define ATOM_PP_THERMALCONTROLLER_EXTERNAL_GPIO     11
#define ATOM_PP_THERMALCONTROLLER_EVERGREEN 12
#define ATOM_PP_THERMALCONTROLLER_EMC2103   13  /* 0x0D */ // Only fan control will be implemented, do NOT show this in PPGen.
#define ATOM_PP_THERMALCONTROLLER_SUMO      14  /* 0x0E */ // Sumo type, used internally
#define ATOM_PP_THERMALCONTROLLER_NISLANDS  15
#define ATOM_PP_THERMALCONTROLLER_SISLANDS  16
#define ATOM_PP_THERMALCONTROLLER_LM96163   17
#define ATOM_PP_THERMALCONTROLLER_CISLANDS  18
#define ATOM_PP_THERMALCONTROLLER_KAVERI    19
#define ATOM_PP_THERMALCONTROLLER_ICELAND   20
#define ATOM_PP_THERMALCONTROLLER_TONGA     21
#define ATOM_PP_THERMALCONTROLLER_FIJI      22
#define ATOM_PP_THERMALCONTROLLER_POLARIS10 23
#define ATOM_PP_THERMALCONTROLLER_VEGA10    24


// Thermal controller 'combo type' to use an external controller for Fan control and an internal controller for thermal.
// We probably should reserve the bit 0x80 for this use.
// To keep the number of these types low we should also use the same code for all ASICs (i.e. do not distinguish RV6xx and RV7xx Internal here).
// The driver can pick the correct internal controller based on the ASIC.
#define ATOM_PP_THERMALCONTROLLER_ADT7473_WITH_INTERNAL   0x89    // ADT7473 Fan Control + Internal Thermal Controller
#define ATOM_PP_THERMALCONTROLLER_EMC2103_WITH_INTERNAL   0x8D    // EMC2103 Fan Control + Internal Thermal Controller

typedef struct _ATOM_PPLIB_STATE
{
    UCHAR ucNonClockStateIndex;
    UCHAR ucClockStateIndices[1]; // variable-sized
} ATOM_PPLIB_STATE;


typedef struct _ATOM_PPLIB_FANTABLE
{
    UCHAR   ucFanTableFormat;                // Change this if the table format changes or version changes so that the other fields are not the same.
    UCHAR   ucTHyst;                         // Temperature hysteresis. Integer.
    USHORT  usTMin;                          // The temperature, in 0.01 centigrades, below which we just run at a minimal PWM.
    USHORT  usTMed;                          // The middle temperature where we change slopes.
    USHORT  usTHigh;                         // The high point above TMed for adjusting the second slope.
    USHORT  usPWMMin;                        // The minimum PWM value in percent (0.01% increments).
    USHORT  usPWMMed;                        // The PWM value (in percent) at TMed.
    USHORT  usPWMHigh;                       // The PWM value at THigh.
} ATOM_PPLIB_FANTABLE;

typedef struct _ATOM_PPLIB_FANTABLE2
{
    ATOM_PPLIB_FANTABLE basicTable;
    USHORT  usTMax;                          // The max temperature
} ATOM_PPLIB_FANTABLE2;

typedef struct _ATOM_PPLIB_FANTABLE3
{
	ATOM_PPLIB_FANTABLE2 basicTable2;
	UCHAR ucFanControlMode;
	USHORT usFanPWMMax;
	USHORT usFanOutputSensitivity;
} ATOM_PPLIB_FANTABLE3;

typedef struct _ATOM_PPLIB_FANTABLE4
{
    ATOM_PPLIB_FANTABLE3 basicTable3;
    USHORT  usFanRPMMax;
} ATOM_PPLIB_FANTABLE4;

typedef struct _ATOM_PPLIB_FANTABLE5
{
    ATOM_PPLIB_FANTABLE4 basicTable4;
    USHORT  usFanCurrentLow;
    USHORT  usFanCurrentHigh;
    USHORT  usFanRPMLow;
    USHORT  usFanRPMHigh;
} ATOM_PPLIB_FANTABLE5;

typedef struct _ATOM_PPLIB_EXTENDEDHEADER
{
    USHORT  usSize;
    ULONG   ulMaxEngineClock;   // For Overdrive.
    ULONG   ulMaxMemoryClock;   // For Overdrive.
    // Add extra system parameters here, always adjust size to include all fields.
    USHORT  usVCETableOffset; //points to ATOM_PPLIB_VCE_Table
    USHORT  usUVDTableOffset;   //points to ATOM_PPLIB_UVD_Table
    USHORT  usSAMUTableOffset;  //points to ATOM_PPLIB_SAMU_Table
    USHORT  usPPMTableOffset;   //points to ATOM_PPLIB_PPM_Table
    USHORT  usACPTableOffset;  //points to ATOM_PPLIB_ACP_Table   
    /* points to ATOM_PPLIB_POWERTUNE_Table */
    USHORT  usPowerTuneTableOffset;
    /* points to ATOM_PPLIB_CLOCK_Voltage_Dependency_Table for sclkVddgfxTable */
    USHORT  usSclkVddgfxTableOffset;
    USHORT  usVQBudgetingTableOffset; /* points to the vqBudgetingTable; */
} ATOM_PPLIB_EXTENDEDHEADER;

//// ATOM_PPLIB_POWERPLAYTABLE::ulPlatformCaps
#define ATOM_PP_PLATFORM_CAP_BACKBIAS 1
#define ATOM_PP_PLATFORM_CAP_POWERPLAY 2
#define ATOM_PP_PLATFORM_CAP_SBIOSPOWERSOURCE 4
#define ATOM_PP_PLATFORM_CAP_ASPM_L0s 8
#define ATOM_PP_PLATFORM_CAP_ASPM_L1 16
#define ATOM_PP_PLATFORM_CAP_HARDWAREDC 32
#define ATOM_PP_PLATFORM_CAP_GEMINIPRIMARY 64
#define ATOM_PP_PLATFORM_CAP_STEPVDDC 128
#define ATOM_PP_PLATFORM_CAP_VOLTAGECONTROL 256
#define ATOM_PP_PLATFORM_CAP_SIDEPORTCONTROL 512
#define ATOM_PP_PLATFORM_CAP_TURNOFFPLL_ASPML1 1024
#define ATOM_PP_PLATFORM_CAP_HTLINKCONTROL 2048
#define ATOM_PP_PLATFORM_CAP_MVDDCONTROL 4096
#define ATOM_PP_PLATFORM_CAP_GOTO_BOOT_ON_ALERT 0x2000              // Go to boot state on alerts, e.g. on an AC->DC transition.
#define ATOM_PP_PLATFORM_CAP_DONT_WAIT_FOR_VBLANK_ON_ALERT 0x4000   // Do NOT wait for VBLANK during an alert (e.g. AC->DC transition).
#define ATOM_PP_PLATFORM_CAP_VDDCI_CONTROL 0x8000                   // Does the driver control VDDCI independently from VDDC.
#define ATOM_PP_PLATFORM_CAP_REGULATOR_HOT 0x00010000               // Enable the 'regulator hot' feature.
#define ATOM_PP_PLATFORM_CAP_BACO          0x00020000               // Does the driver supports BACO state.
#define ATOM_PP_PLATFORM_CAP_NEW_CAC_VOLTAGE   0x00040000           // Does the driver supports new CAC voltage table.
#define ATOM_PP_PLATFORM_CAP_REVERT_GPIO5_POLARITY   0x00080000     // Does the driver supports revert GPIO5 polarity.
#define ATOM_PP_PLATFORM_CAP_OUTPUT_THERMAL2GPIO17   0x00100000     // Does the driver supports thermal2GPIO17.
#define ATOM_PP_PLATFORM_CAP_VRHOT_GPIO_CONFIGURABLE   0x00200000   // Does the driver supports VR HOT GPIO Configurable.
#define ATOM_PP_PLATFORM_CAP_TEMP_INVERSION   0x00400000            // Does the driver supports Temp Inversion feature.
#define ATOM_PP_PLATFORM_CAP_EVV    0x00800000
#define ATOM_PP_PLATFORM_COMBINE_PCC_WITH_THERMAL_SIGNAL    0x01000000
#define ATOM_PP_PLATFORM_LOAD_POST_PRODUCTION_FIRMWARE    0x02000000
#define ATOM_PP_PLATFORM_CAP_DISABLE_USING_ACTUAL_TEMPERATURE_FOR_POWER_CALC   0x04000000
#define ATOM_PP_PLATFORM_CAP_VRHOT_POLARITY_HIGH   0x08000000

typedef struct _ATOM_PPLIB_POWERPLAYTABLE
{
      ATOM_COMMON_TABLE_HEADER sHeader;

      UCHAR ucDataRevision;

      UCHAR ucNumStates;
      UCHAR ucStateEntrySize;
      UCHAR ucClockInfoSize;
      UCHAR ucNonClockSize;

      // offset from start of this table to array of ucNumStates ATOM_PPLIB_STATE structures
      USHORT usStateArrayOffset;

      // offset from start of this table to array of ASIC-specific structures,
      // currently ATOM_PPLIB_CLOCK_INFO.
      USHORT usClockInfoArrayOffset;

      // offset from start of this table to array of ATOM_PPLIB_NONCLOCK_INFO
      USHORT usNonClockInfoArrayOffset;

      USHORT usBackbiasTime;    // in microseconds
      USHORT usVoltageTime;     // in microseconds
      USHORT usTableSize;       //the size of this structure, or the extended structure

      ULONG ulPlatformCaps;            // See ATOM_PPLIB_CAPS_*

      ATOM_PPLIB_THERMALCONTROLLER    sThermalController;

      USHORT usBootClockInfoOffset;
      USHORT usBootNonClockInfoOffset;

} ATOM_PPLIB_POWERPLAYTABLE;

typedef struct _ATOM_PPLIB_POWERPLAYTABLE2
{
    ATOM_PPLIB_POWERPLAYTABLE basicTable;
    UCHAR   ucNumCustomThermalPolicy;
    USHORT  usCustomThermalPolicyArrayOffset;
}ATOM_PPLIB_POWERPLAYTABLE2, *LPATOM_PPLIB_POWERPLAYTABLE2;

typedef struct _ATOM_PPLIB_POWERPLAYTABLE3
{
    ATOM_PPLIB_POWERPLAYTABLE2 basicTable2;
    USHORT                     usFormatID;                      // To be used ONLY by PPGen.
    USHORT                     usFanTableOffset;
    USHORT                     usExtendendedHeaderOffset;
} ATOM_PPLIB_POWERPLAYTABLE3, *LPATOM_PPLIB_POWERPLAYTABLE3;

typedef struct _ATOM_PPLIB_POWERPLAYTABLE4
{
    ATOM_PPLIB_POWERPLAYTABLE3 basicTable3;
    ULONG                      ulGoldenPPID;                    // PPGen use only     
    ULONG                      ulGoldenRevision;                // PPGen use only
    USHORT                     usVddcDependencyOnSCLKOffset;
    USHORT                     usVddciDependencyOnMCLKOffset;
    USHORT                     usVddcDependencyOnMCLKOffset;
    USHORT                     usMaxClockVoltageOnDCOffset;
    USHORT                     usVddcPhaseShedLimitsTableOffset;    // Points to ATOM_PPLIB_PhaseSheddingLimits_Table
    USHORT                     usMvddDependencyOnMCLKOffset;  
} ATOM_PPLIB_POWERPLAYTABLE4, *LPATOM_PPLIB_POWERPLAYTABLE4;

typedef struct _ATOM_PPLIB_POWERPLAYTABLE5
{
    ATOM_PPLIB_POWERPLAYTABLE4 basicTable4;
    ULONG                      ulTDPLimit;
    ULONG                      ulNearTDPLimit;
    ULONG                      ulSQRampingThreshold;
    USHORT                     usCACLeakageTableOffset;         // Points to ATOM_PPLIB_CAC_Leakage_Table
    ULONG                      ulCACLeakage;                    // The iLeakage for driver calculated CAC leakage table
    USHORT                     usTDPODLimit;
    USHORT                     usLoadLineSlope;                 // in milliOhms * 100
} ATOM_PPLIB_POWERPLAYTABLE5, *LPATOM_PPLIB_POWERPLAYTABLE5;

//// ATOM_PPLIB_NONCLOCK_INFO::usClassification
#define ATOM_PPLIB_CLASSIFICATION_UI_MASK          0x0007
#define ATOM_PPLIB_CLASSIFICATION_UI_SHIFT         0
#define ATOM_PPLIB_CLASSIFICATION_UI_NONE          0
#define ATOM_PPLIB_CLASSIFICATION_UI_BATTERY       1
#define ATOM_PPLIB_CLASSIFICATION_UI_BALANCED      3
#define ATOM_PPLIB_CLASSIFICATION_UI_PERFORMANCE   5
// 2, 4, 6, 7 are reserved

#define ATOM_PPLIB_CLASSIFICATION_BOOT                   0x0008
#define ATOM_PPLIB_CLASSIFICATION_THERMAL                0x0010
#define ATOM_PPLIB_CLASSIFICATION_LIMITEDPOWERSOURCE     0x0020
#define ATOM_PPLIB_CLASSIFICATION_REST                   0x0040
#define ATOM_PPLIB_CLASSIFICATION_FORCED                 0x0080
#define ATOM_PPLIB_CLASSIFICATION_3DPERFORMANCE          0x0100
#define ATOM_PPLIB_CLASSIFICATION_OVERDRIVETEMPLATE      0x0200
#define ATOM_PPLIB_CLASSIFICATION_UVDSTATE               0x0400
#define ATOM_PPLIB_CLASSIFICATION_3DLOW                  0x0800
#define ATOM_PPLIB_CLASSIFICATION_ACPI                   0x1000
#define ATOM_PPLIB_CLASSIFICATION_HD2STATE               0x2000
#define ATOM_PPLIB_CLASSIFICATION_HDSTATE                0x4000
#define ATOM_PPLIB_CLASSIFICATION_SDSTATE                0x8000

//// ATOM_PPLIB_NONCLOCK_INFO::usClassification2
#define ATOM_PPLIB_CLASSIFICATION2_LIMITEDPOWERSOURCE_2     0x0001
#define ATOM_PPLIB_CLASSIFICATION2_ULV                      0x0002
#define ATOM_PPLIB_CLASSIFICATION2_MVC                      0x0004   //Multi-View Codec (BD-3D)

//// ATOM_PPLIB_NONCLOCK_INFO::ulCapsAndSettings
#define ATOM_PPLIB_SINGLE_DISPLAY_ONLY           0x00000001
#define ATOM_PPLIB_SUPPORTS_VIDEO_PLAYBACK         0x00000002

// 0 is 2.5Gb/s, 1 is 5Gb/s
#define ATOM_PPLIB_PCIE_LINK_SPEED_MASK            0x00000004
#define ATOM_PPLIB_PCIE_LINK_SPEED_SHIFT           2

// lanes - 1: 1, 2, 4, 8, 12, 16 permitted by PCIE spec
#define ATOM_PPLIB_PCIE_LINK_WIDTH_MASK            0x000000F8
#define ATOM_PPLIB_PCIE_LINK_WIDTH_SHIFT           3

// lookup into reduced refresh-rate table
#define ATOM_PPLIB_LIMITED_REFRESHRATE_VALUE_MASK  0x00000F00
#define ATOM_PPLIB_LIMITED_REFRESHRATE_VALUE_SHIFT 8

#define ATOM_PPLIB_LIMITED_REFRESHRATE_UNLIMITED    0
#define ATOM_PPLIB_LIMITED_REFRESHRATE_50HZ         1
// 2-15 TBD as needed.

#define ATOM_PPLIB_SOFTWARE_DISABLE_LOADBALANCING        0x00001000
#define ATOM_PPLIB_SOFTWARE_ENABLE_SLEEP_FOR_TIMESTAMPS  0x00002000

#define ATOM_PPLIB_DISALLOW_ON_DC                       0x00004000

#define ATOM_PPLIB_ENABLE_VARIBRIGHT                     0x00008000

//memory related flags
#define ATOM_PPLIB_SWSTATE_MEMORY_DLL_OFF               0x000010000

//M3 Arb    //2bits, current 3 sets of parameters in total
#define ATOM_PPLIB_M3ARB_MASK                       0x00060000
#define ATOM_PPLIB_M3ARB_SHIFT                      17

#define ATOM_PPLIB_ENABLE_DRR                       0x00080000

// remaining 16 bits are reserved
typedef struct _ATOM_PPLIB_THERMAL_STATE
{
    UCHAR   ucMinTemperature;
    UCHAR   ucMaxTemperature;
    UCHAR   ucThermalAction;
}ATOM_PPLIB_THERMAL_STATE, *LPATOM_PPLIB_THERMAL_STATE;

// Contained in an array starting at the offset
// in ATOM_PPLIB_POWERPLAYTABLE::usNonClockInfoArrayOffset.
// referenced from ATOM_PPLIB_STATE_INFO::ucNonClockStateIndex
#define ATOM_PPLIB_NONCLOCKINFO_VER1      12
#define ATOM_PPLIB_NONCLOCKINFO_VER2      24
typedef struct _ATOM_PPLIB_NONCLOCK_INFO
{
      USHORT usClassification;
      UCHAR  ucMinTemperature;
      UCHAR  ucMaxTemperature;
      ULONG  ulCapsAndSettings;
      UCHAR  ucRequiredPower;
      USHORT usClassification2;
      ULONG  ulVCLK;
      ULONG  ulDCLK;
      UCHAR  ucUnused[5];
} ATOM_PPLIB_NONCLOCK_INFO;

// Contained in an array starting at the offset
// in ATOM_PPLIB_POWERPLAYTABLE::usClockInfoArrayOffset.
// referenced from ATOM_PPLIB_STATE::ucClockStateIndices
typedef struct _ATOM_PPLIB_R600_CLOCK_INFO
{
      USHORT usEngineClockLow;
      UCHAR ucEngineClockHigh;

      USHORT usMemoryClockLow;
      UCHAR ucMemoryClockHigh;

      USHORT usVDDC;
      USHORT usUnused1;
      USHORT usUnused2;

      ULONG ulFlags; // ATOM_PPLIB_R600_FLAGS_*

} ATOM_PPLIB_R600_CLOCK_INFO;

// ulFlags in ATOM_PPLIB_R600_CLOCK_INFO
#define ATOM_PPLIB_R600_FLAGS_PCIEGEN2          1
#define ATOM_PPLIB_R600_FLAGS_UVDSAFE           2
#define ATOM_PPLIB_R600_FLAGS_BACKBIASENABLE    4
#define ATOM_PPLIB_R600_FLAGS_MEMORY_ODT_OFF    8
#define ATOM_PPLIB_R600_FLAGS_MEMORY_DLL_OFF   16
#define ATOM_PPLIB_R600_FLAGS_LOWPOWER         32   // On the RV770 use 'low power' setting (sequencer S0).

typedef struct _ATOM_PPLIB_RS780_CLOCK_INFO

{
      USHORT usLowEngineClockLow;         // Low Engine clock in MHz (the same way as on the R600).
      UCHAR  ucLowEngineClockHigh;
      USHORT usHighEngineClockLow;        // High Engine clock in MHz.
      UCHAR  ucHighEngineClockHigh;
      USHORT usMemoryClockLow;            // For now one of the ATOM_PPLIB_RS780_SPMCLK_XXXX constants.
      UCHAR  ucMemoryClockHigh;           // Currentyl unused.
      UCHAR  ucPadding;                   // For proper alignment and size.
      USHORT usVDDC;                      // For the 780, use: None, Low, High, Variable
      UCHAR  ucMaxHTLinkWidth;            // From SBIOS - {2, 4, 8, 16}
      UCHAR  ucMinHTLinkWidth;            // From SBIOS - {2, 4, 8, 16}. Effective only if CDLW enabled. Minimum down stream width could 
      USHORT usHTLinkFreq;                // See definition ATOM_PPLIB_RS780_HTLINKFREQ_xxx or in MHz(>=200).
      ULONG  ulFlags; 
} ATOM_PPLIB_RS780_CLOCK_INFO;

#define ATOM_PPLIB_RS780_VOLTAGE_NONE       0 
#define ATOM_PPLIB_RS780_VOLTAGE_LOW        1 
#define ATOM_PPLIB_RS780_VOLTAGE_HIGH       2 
#define ATOM_PPLIB_RS780_VOLTAGE_VARIABLE   3 

#define ATOM_PPLIB_RS780_SPMCLK_NONE        0   // We cannot change the side port memory clock, leave it as it is.
#define ATOM_PPLIB_RS780_SPMCLK_LOW         1
#define ATOM_PPLIB_RS780_SPMCLK_HIGH        2

#define ATOM_PPLIB_RS780_HTLINKFREQ_NONE       0 
#define ATOM_PPLIB_RS780_HTLINKFREQ_LOW        1 
#define ATOM_PPLIB_RS780_HTLINKFREQ_HIGH       2 

typedef struct _ATOM_PPLIB_EVERGREEN_CLOCK_INFO
{
      USHORT usEngineClockLow;
      UCHAR  ucEngineClockHigh;

      USHORT usMemoryClockLow;
      UCHAR  ucMemoryClockHigh;

      USHORT usVDDC;
      USHORT usVDDCI;
      USHORT usUnused;

      ULONG ulFlags; // ATOM_PPLIB_R600_FLAGS_*

} ATOM_PPLIB_EVERGREEN_CLOCK_INFO;

typedef struct _ATOM_PPLIB_SI_CLOCK_INFO
{
      USHORT usEngineClockLow;
      UCHAR  ucEngineClockHigh;

      USHORT usMemoryClockLow;
      UCHAR  ucMemoryClockHigh;

      USHORT usVDDC;
      USHORT usVDDCI;
      UCHAR  ucPCIEGen;
      UCHAR  ucUnused1;

      ULONG ulFlags; // ATOM_PPLIB_SI_FLAGS_*, no flag is necessary for now

} ATOM_PPLIB_SI_CLOCK_INFO;

typedef struct _ATOM_PPLIB_CI_CLOCK_INFO
{
      USHORT usEngineClockLow;
      UCHAR  ucEngineClockHigh;

      USHORT usMemoryClockLow;
      UCHAR  ucMemoryClockHigh;
      
      UCHAR  ucPCIEGen;
      USHORT usPCIELane;
} ATOM_PPLIB_CI_CLOCK_INFO;

typedef struct _ATOM_PPLIB_SUMO_CLOCK_INFO{
      USHORT usEngineClockLow;  //clockfrequency & 0xFFFF. The unit is in 10khz
      UCHAR  ucEngineClockHigh; //clockfrequency >> 16. 
      UCHAR  vddcIndex;         //2-bit vddc index;
      USHORT tdpLimit;
      //please initalize to 0
      USHORT rsv1;
      //please initialize to 0s
      ULONG rsv2[2];
}ATOM_PPLIB_SUMO_CLOCK_INFO;

typedef struct _ATOM_PPLIB_KV_CLOCK_INFO {
      USHORT usEngineClockLow;
      UCHAR  ucEngineClockHigh;
      UCHAR  vddcIndex;
      USHORT tdpLimit;
      USHORT rsv1;
      ULONG rsv2[2];
} ATOM_PPLIB_KV_CLOCK_INFO;

typedef struct _ATOM_PPLIB_CZ_CLOCK_INFO {
      UCHAR index;
      UCHAR rsv[3];
} ATOM_PPLIB_CZ_CLOCK_INFO;

typedef struct _ATOM_PPLIB_STATE_V2
{
      //number of valid dpm levels in this state; Driver uses it to calculate the whole 
      //size of the state: sizeof(ATOM_PPLIB_STATE_V2) + (ucNumDPMLevels - 1) * sizeof(UCHAR)
      UCHAR ucNumDPMLevels;
      
      //a index to the array of nonClockInfos
      UCHAR nonClockInfoIndex;
      /**
      * Driver will read the first ucNumDPMLevels in this array
      */
      UCHAR clockInfoIndex[1];
} ATOM_PPLIB_STATE_V2;

typedef struct _StateArray{
    //how many states we have 
    UCHAR ucNumEntries;
    
    ATOM_PPLIB_STATE_V2 states[1];
}StateArray;


typedef struct _ClockInfoArray{
    //how many clock levels we have
    UCHAR ucNumEntries;
    
    //sizeof(ATOM_PPLIB_CLOCK_INFO)
    UCHAR ucEntrySize;
    
    UCHAR clockInfo[1];
}ClockInfoArray;

typedef struct _NonClockInfoArray{

    //how many non-clock levels we have. normally should be same as number of states
    UCHAR ucNumEntries;
    //sizeof(ATOM_PPLIB_NONCLOCK_INFO)
    UCHAR ucEntrySize;
    
    ATOM_PPLIB_NONCLOCK_INFO nonClockInfo[1];
}NonClockInfoArray;

typedef struct _ATOM_PPLIB_Clock_Voltage_Dependency_Record
{
    USHORT usClockLow;
    UCHAR  ucClockHigh;
    USHORT usVoltage;
}ATOM_PPLIB_Clock_Voltage_Dependency_Record;

typedef struct _ATOM_PPLIB_Clock_Voltage_Dependency_Table
{
    UCHAR ucNumEntries;                                                // Number of entries.
    ATOM_PPLIB_Clock_Voltage_Dependency_Record entries[1];             // Dynamically allocate entries.
}ATOM_PPLIB_Clock_Voltage_Dependency_Table;

typedef struct _ATOM_PPLIB_Clock_Voltage_Limit_Record
{
    USHORT usSclkLow;
    UCHAR  ucSclkHigh;
    USHORT usMclkLow;
    UCHAR  ucMclkHigh;
    USHORT usVddc;
    USHORT usVddci;
}ATOM_PPLIB_Clock_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_Clock_Voltage_Limit_Table
{
    UCHAR ucNumEntries;                                                // Number of entries.
    ATOM_PPLIB_Clock_Voltage_Limit_Record entries[1];                  // Dynamically allocate entries.
}ATOM_PPLIB_Clock_Voltage_Limit_Table;

union _ATOM_PPLIB_CAC_Leakage_Record
{
    struct
    {
        USHORT usVddc;          // We use this field for the "fake" standardized VDDC for power calculations; For CI and newer, we use this as the real VDDC value. in CI we read it as StdVoltageHiSidd
        ULONG  ulLeakageValue;  // For CI and newer we use this as the "fake" standar VDDC value. in CI we read it as StdVoltageLoSidd

    };
    struct
     {
        USHORT usVddc1;
        USHORT usVddc2;
        USHORT usVddc3;
     };
};

typedef union _ATOM_PPLIB_CAC_Leakage_Record ATOM_PPLIB_CAC_Leakage_Record;

typedef struct _ATOM_PPLIB_CAC_Leakage_Table
{
    UCHAR ucNumEntries;                                                 // Number of entries.
    ATOM_PPLIB_CAC_Leakage_Record entries[1];                           // Dynamically allocate entries.
}ATOM_PPLIB_CAC_Leakage_Table;

typedef struct _ATOM_PPLIB_PhaseSheddingLimits_Record
{
    USHORT usVoltage;
    USHORT usSclkLow;
    UCHAR  ucSclkHigh;
    USHORT usMclkLow;
    UCHAR  ucMclkHigh;
}ATOM_PPLIB_PhaseSheddingLimits_Record;

typedef struct _ATOM_PPLIB_PhaseSheddingLimits_Table
{
    UCHAR ucNumEntries;                                                 // Number of entries.
    ATOM_PPLIB_PhaseSheddingLimits_Record entries[1];                   // Dynamically allocate entries.
}ATOM_PPLIB_PhaseSheddingLimits_Table;

typedef struct _VCEClockInfo{
    USHORT usEVClkLow;
    UCHAR  ucEVClkHigh;
    USHORT usECClkLow;
    UCHAR  ucECClkHigh;
}VCEClockInfo;

typedef struct _VCEClockInfoArray{
    UCHAR ucNumEntries;
    VCEClockInfo entries[1];
}VCEClockInfoArray;

typedef struct _ATOM_PPLIB_VCE_Clock_Voltage_Limit_Record
{
    USHORT usVoltage;
    UCHAR  ucVCEClockInfoIndex;
}ATOM_PPLIB_VCE_Clock_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_VCE_Clock_Voltage_Limit_Table
{
    UCHAR numEntries;
    ATOM_PPLIB_VCE_Clock_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_VCE_Clock_Voltage_Limit_Table;

typedef struct _ATOM_PPLIB_VCE_State_Record
{
    UCHAR  ucVCEClockInfoIndex;
    UCHAR  ucClockInfoIndex; //highest 2 bits indicates memory p-states, lower 6bits indicates index to ClockInfoArrary
}ATOM_PPLIB_VCE_State_Record;

typedef struct _ATOM_PPLIB_VCE_State_Table
{
    UCHAR numEntries;
    ATOM_PPLIB_VCE_State_Record entries[1];
}ATOM_PPLIB_VCE_State_Table;


typedef struct _ATOM_PPLIB_VCE_Table
{
      UCHAR revid;
//    VCEClockInfoArray array;
//    ATOM_PPLIB_VCE_Clock_Voltage_Limit_Table limits;
//    ATOM_PPLIB_VCE_State_Table states;
}ATOM_PPLIB_VCE_Table;


typedef struct _UVDClockInfo{
    USHORT usVClkLow;
    UCHAR  ucVClkHigh;
    USHORT usDClkLow;
    UCHAR  ucDClkHigh;
}UVDClockInfo;

typedef struct _UVDClockInfoArray{
    UCHAR ucNumEntries;
    UVDClockInfo entries[1];
}UVDClockInfoArray;

typedef struct _ATOM_PPLIB_UVD_Clock_Voltage_Limit_Record
{
    USHORT usVoltage;
    UCHAR  ucUVDClockInfoIndex;
}ATOM_PPLIB_UVD_Clock_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_UVD_Clock_Voltage_Limit_Table
{
    UCHAR numEntries;
    ATOM_PPLIB_UVD_Clock_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_UVD_Clock_Voltage_Limit_Table;

typedef struct _ATOM_PPLIB_UVD_Table
{
      UCHAR revid;
//    UVDClockInfoArray array;
//    ATOM_PPLIB_UVD_Clock_Voltage_Limit_Table limits;
}ATOM_PPLIB_UVD_Table;

typedef struct _ATOM_PPLIB_SAMClk_Voltage_Limit_Record
{
      USHORT usVoltage;
      USHORT usSAMClockLow;
      UCHAR  ucSAMClockHigh;
}ATOM_PPLIB_SAMClk_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_SAMClk_Voltage_Limit_Table{
    UCHAR numEntries;
    ATOM_PPLIB_SAMClk_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_SAMClk_Voltage_Limit_Table;

typedef struct _ATOM_PPLIB_SAMU_Table
{
      UCHAR revid;
      ATOM_PPLIB_SAMClk_Voltage_Limit_Table limits;
}ATOM_PPLIB_SAMU_Table;

typedef struct _ATOM_PPLIB_ACPClk_Voltage_Limit_Record
{
      USHORT usVoltage;
      USHORT usACPClockLow;
      UCHAR  ucACPClockHigh;
}ATOM_PPLIB_ACPClk_Voltage_Limit_Record;

typedef struct _ATOM_PPLIB_ACPClk_Voltage_Limit_Table{
    UCHAR numEntries;
    ATOM_PPLIB_ACPClk_Voltage_Limit_Record entries[1];
}ATOM_PPLIB_ACPClk_Voltage_Limit_Table;

typedef struct _ATOM_PPLIB_ACP_Table
{
      UCHAR revid;
      ATOM_PPLIB_ACPClk_Voltage_Limit_Table limits;
}ATOM_PPLIB_ACP_Table;

typedef struct _ATOM_PowerTune_Table{
    USHORT usTDP;
    USHORT usConfigurableTDP;
    USHORT usTDC;
    USHORT usBatteryPowerLimit;
    USHORT usSmallPowerLimit;
    USHORT usLowCACLeakage;
    USHORT usHighCACLeakage;
}ATOM_PowerTune_Table;

typedef struct _ATOM_PPLIB_POWERTUNE_Table
{
      UCHAR revid;
      ATOM_PowerTune_Table power_tune_table;
}ATOM_PPLIB_POWERTUNE_Table;

typedef struct _ATOM_PPLIB_POWERTUNE_Table_V1
{
      UCHAR revid;
      ATOM_PowerTune_Table power_tune_table;
      USHORT usMaximumPowerDeliveryLimit;
      USHORT usTjMax;
      USHORT usReserve[6];
} ATOM_PPLIB_POWERTUNE_Table_V1;

#define ATOM_PPM_A_A    1
#define ATOM_PPM_A_I    2
typedef struct _ATOM_PPLIB_PPM_Table
{
      UCHAR  ucRevId;
      UCHAR  ucPpmDesign;          //A+I or A+A
      USHORT usCpuCoreNumber;
      ULONG  ulPlatformTDP;
      ULONG  ulSmallACPlatformTDP;
      ULONG  ulPlatformTDC;
      ULONG  ulSmallACPlatformTDC;
      ULONG  ulApuTDP;
      ULONG  ulDGpuTDP;  
      ULONG  ulDGpuUlvPower;
      ULONG  ulTjmax;
} ATOM_PPLIB_PPM_Table;

#define    VQ_DisplayConfig_NoneAWD   1
#define    VQ_DisplayConfig_AWD       2

typedef struct ATOM_PPLIB_VQ_Budgeting_Record{
    ULONG ulDeviceID;
    ULONG ulSustainableSOCPowerLimitLow; /* in mW */
    ULONG ulSustainableSOCPowerLimitHigh; /* in mW */

    ULONG ulDClk;
    ULONG ulEClk;
    ULONG ulDispSclk;
    UCHAR ucDispConfig;

} ATOM_PPLIB_VQ_Budgeting_Record;

typedef struct ATOM_PPLIB_VQ_Budgeting_Table {
    UCHAR revid;
    UCHAR numEntries;
    ATOM_PPLIB_VQ_Budgeting_Record         entries[1];
} ATOM_PPLIB_VQ_Budgeting_Table;

#pragma pack()

#endif
/*
 * Copyright (C) 2018  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _navi14_ip_offset_HEADER
#define _navi14_ip_offset_HEADER

#define MAX_INSTANCE                                       7
#define MAX_SEGMENT                                        5


struct IP_BASE_INSTANCE
{
    unsigned int segment[MAX_SEGMENT];
};

struct IP_BASE
{
    struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
} __maybe_unused;


static const struct IP_BASE ATHUB_BASE ={ { { { 0x00000C00, 0x02408C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE CLK_BASE ={ { { { 0x00016C00, 0x02401800, 0, 0, 0 } },
                                        { { 0x00016E00, 0x02401C00, 0, 0, 0 } },
                                        { { 0x00017000, 0x02402000, 0, 0, 0 } },
                                        { { 0x00017200, 0x02402400, 0, 0, 0 } },
                                        { { 0x0001B000, 0x0242D800, 0, 0, 0 } },
                                        { { 0x00017E00, 0x0240BC00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DF_BASE ={ { { { 0x00007000, 0x0240B800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DIO_BASE ={ { { { 0x02404000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DMU_BASE ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DPCS_BASE ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FUSE_BASE ={ { { { 0x00017400, 0x02401400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE GC_BASE ={ { { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDA_BASE ={ { { { 0x004C0000, 0x02404800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDP_BASE ={ { { { 0x00000F20, 0x0240A400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MMHUB_BASE ={ { { { 0x0001A000, 0x02408800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP0_BASE ={ { { { 0x00016000, 0x00DC0000, 0x00E00000, 0x00E40000, 0x0243FC00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP1_BASE ={ { { { 0x00016000, 0x00DC0000, 0x00E00000, 0x00E40000, 0x0243FC00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE NBIF0_BASE ={ { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE OSSSYS_BASE ={ { { { 0x000010A0, 0x0240A000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE PCIE0_BASE ={ { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SDMA_BASE ={ { { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0 } },
                                        { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SMUIO_BASE ={ { { { 0x00016800, 0x00016A00, 0x00440000, 0x02401000, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE THM_BASE ={ { { { 0x00016600, 0x02400C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UMC_BASE ={ { { { 0x00014000, 0x02425800, 0, 0, 0 } },
                                        { { 0x00054000, 0x02425C00, 0, 0, 0 } },
                                        { { 0x00094000, 0x02426000, 0, 0, 0 } },
                                        { { 0x000D4000, 0x02426400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE USB0_BASE ={ { { { 0x0242A800, 0x05B00000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UVD0_BASE ={ { { { 0x00007800, 0x00007E00, 0x02403000, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };


#define ATHUB_BASE__INST0_SEG0                     0x00000C00
#define ATHUB_BASE__INST0_SEG1                     0x02408C00
#define ATHUB_BASE__INST0_SEG2                     0
#define ATHUB_BASE__INST0_SEG3                     0
#define ATHUB_BASE__INST0_SEG4                     0

#define ATHUB_BASE__INST1_SEG0                     0
#define ATHUB_BASE__INST1_SEG1                     0
#define ATHUB_BASE__INST1_SEG2                     0
#define ATHUB_BASE__INST1_SEG3                     0
#define ATHUB_BASE__INST1_SEG4                     0

#define ATHUB_BASE__INST2_SEG0                     0
#define ATHUB_BASE__INST2_SEG1                     0
#define ATHUB_BASE__INST2_SEG2                     0
#define ATHUB_BASE__INST2_SEG3                     0
#define ATHUB_BASE__INST2_SEG4                     0

#define ATHUB_BASE__INST3_SEG0                     0
#define ATHUB_BASE__INST3_SEG1                     0
#define ATHUB_BASE__INST3_SEG2                     0
#define ATHUB_BASE__INST3_SEG3                     0
#define ATHUB_BASE__INST3_SEG4                     0

#define ATHUB_BASE__INST4_SEG0                     0
#define ATHUB_BASE__INST4_SEG1                     0
#define ATHUB_BASE__INST4_SEG2                     0
#define ATHUB_BASE__INST4_SEG3                     0
#define ATHUB_BASE__INST4_SEG4                     0

#define ATHUB_BASE__INST5_SEG0                     0
#define ATHUB_BASE__INST5_SEG1                     0
#define ATHUB_BASE__INST5_SEG2                     0
#define ATHUB_BASE__INST5_SEG3                     0
#define ATHUB_BASE__INST5_SEG4                     0

#define ATHUB_BASE__INST6_SEG0                     0
#define ATHUB_BASE__INST6_SEG1                     0
#define ATHUB_BASE__INST6_SEG2                     0
#define ATHUB_BASE__INST6_SEG3                     0
#define ATHUB_BASE__INST6_SEG4                     0

#define CLK_BASE__INST0_SEG0                       0x00016C00
#define CLK_BASE__INST0_SEG1                       0x02401800
#define CLK_BASE__INST0_SEG2                       0
#define CLK_BASE__INST0_SEG3                       0
#define CLK_BASE__INST0_SEG4                       0

#define CLK_BASE__INST1_SEG0                       0x00016E00
#define CLK_BASE__INST1_SEG1                       0x02401C00
#define CLK_BASE__INST1_SEG2                       0
#define CLK_BASE__INST1_SEG3                       0
#define CLK_BASE__INST1_SEG4                       0

#define CLK_BASE__INST2_SEG0                       0x00017000
#define CLK_BASE__INST2_SEG1                       0x02402000
#define CLK_BASE__INST2_SEG2                       0
#define CLK_BASE__INST2_SEG3                       0
#define CLK_BASE__INST2_SEG4                       0

#define CLK_BASE__INST3_SEG0                       0x00017200
#define CLK_BASE__INST3_SEG1                       0x02402400
#define CLK_BASE__INST3_SEG2                       0
#define CLK_BASE__INST3_SEG3                       0
#define CLK_BASE__INST3_SEG4                       0

#define CLK_BASE__INST4_SEG0                       0x0001B000
#define CLK_BASE__INST4_SEG1                       0x0242D800
#define CLK_BASE__INST4_SEG2                       0
#define CLK_BASE__INST4_SEG3                       0
#define CLK_BASE__INST4_SEG4                       0

#define CLK_BASE__INST5_SEG0                       0x00017E00
#define CLK_BASE__INST5_SEG1                       0x0240BC00
#define CLK_BASE__INST5_SEG2                       0
#define CLK_BASE__INST5_SEG3                       0
#define CLK_BASE__INST5_SEG4                       0

#define CLK_BASE__INST6_SEG0                       0
#define CLK_BASE__INST6_SEG1                       0
#define CLK_BASE__INST6_SEG2                       0
#define CLK_BASE__INST6_SEG3                       0
#define CLK_BASE__INST6_SEG4                       0

#define DF_BASE__INST0_SEG0                        0x00007000
#define DF_BASE__INST0_SEG1                        0x0240B800
#define DF_BASE__INST0_SEG2                        0
#define DF_BASE__INST0_SEG3                        0
#define DF_BASE__INST0_SEG4                        0

#define DF_BASE__INST1_SEG0                        0
#define DF_BASE__INST1_SEG1                        0
#define DF_BASE__INST1_SEG2                        0
#define DF_BASE__INST1_SEG3                        0
#define DF_BASE__INST1_SEG4                        0

#define DF_BASE__INST2_SEG0                        0
#define DF_BASE__INST2_SEG1                        0
#define DF_BASE__INST2_SEG2                        0
#define DF_BASE__INST2_SEG3                        0
#define DF_BASE__INST2_SEG4                        0

#define DF_BASE__INST3_SEG0                        0
#define DF_BASE__INST3_SEG1                        0
#define DF_BASE__INST3_SEG2                        0
#define DF_BASE__INST3_SEG3                        0
#define DF_BASE__INST3_SEG4                        0

#define DF_BASE__INST4_SEG0                        0
#define DF_BASE__INST4_SEG1                        0
#define DF_BASE__INST4_SEG2                        0
#define DF_BASE__INST4_SEG3                        0
#define DF_BASE__INST4_SEG4                        0

#define DF_BASE__INST5_SEG0                        0
#define DF_BASE__INST5_SEG1                        0
#define DF_BASE__INST5_SEG2                        0
#define DF_BASE__INST5_SEG3                        0
#define DF_BASE__INST5_SEG4                        0

#define DF_BASE__INST6_SEG0                        0
#define DF_BASE__INST6_SEG1                        0
#define DF_BASE__INST6_SEG2                        0
#define DF_BASE__INST6_SEG3                        0
#define DF_BASE__INST6_SEG4                        0

#define DIO_BASE__INST0_SEG0                       0x02404000
#define DIO_BASE__INST0_SEG1                       0
#define DIO_BASE__INST0_SEG2                       0
#define DIO_BASE__INST0_SEG3                       0
#define DIO_BASE__INST0_SEG4                       0

#define DIO_BASE__INST1_SEG0                       0
#define DIO_BASE__INST1_SEG1                       0
#define DIO_BASE__INST1_SEG2                       0
#define DIO_BASE__INST1_SEG3                       0
#define DIO_BASE__INST1_SEG4                       0

#define DIO_BASE__INST2_SEG0                       0
#define DIO_BASE__INST2_SEG1                       0
#define DIO_BASE__INST2_SEG2                       0
#define DIO_BASE__INST2_SEG3                       0
#define DIO_BASE__INST2_SEG4                       0

#define DIO_BASE__INST3_SEG0                       0
#define DIO_BASE__INST3_SEG1                       0
#define DIO_BASE__INST3_SEG2                       0
#define DIO_BASE__INST3_SEG3                       0
#define DIO_BASE__INST3_SEG4                       0

#define DIO_BASE__INST4_SEG0                       0
#define DIO_BASE__INST4_SEG1                       0
#define DIO_BASE__INST4_SEG2                       0
#define DIO_BASE__INST4_SEG3                       0
#define DIO_BASE__INST4_SEG4                       0

#define DIO_BASE__INST5_SEG0                       0
#define DIO_BASE__INST5_SEG1                       0
#define DIO_BASE__INST5_SEG2                       0
#define DIO_BASE__INST5_SEG3                       0
#define DIO_BASE__INST5_SEG4                       0

#define DIO_BASE__INST6_SEG0                       0
#define DIO_BASE__INST6_SEG1                       0
#define DIO_BASE__INST6_SEG2                       0
#define DIO_BASE__INST6_SEG3                       0
#define DIO_BASE__INST6_SEG4                       0

#define DMU_BASE__INST0_SEG0                       0x00000012
#define DMU_BASE__INST0_SEG1                       0x000000C0
#define DMU_BASE__INST0_SEG2                       0x000034C0
#define DMU_BASE__INST0_SEG3                       0x00009000
#define DMU_BASE__INST0_SEG4                       0x02403C00

#define DMU_BASE__INST1_SEG0                       0
#define DMU_BASE__INST1_SEG1                       0
#define DMU_BASE__INST1_SEG2                       0
#define DMU_BASE__INST1_SEG3                       0
#define DMU_BASE__INST1_SEG4                       0

#define DMU_BASE__INST2_SEG0                       0
#define DMU_BASE__INST2_SEG1                       0
#define DMU_BASE__INST2_SEG2                       0
#define DMU_BASE__INST2_SEG3                       0
#define DMU_BASE__INST2_SEG4                       0

#define DMU_BASE__INST3_SEG0                       0
#define DMU_BASE__INST3_SEG1                       0
#define DMU_BASE__INST3_SEG2                       0
#define DMU_BASE__INST3_SEG3                       0
#define DMU_BASE__INST3_SEG4                       0

#define DMU_BASE__INST4_SEG0                       0
#define DMU_BASE__INST4_SEG1                       0
#define DMU_BASE__INST4_SEG2                       0
#define DMU_BASE__INST4_SEG3                       0
#define DMU_BASE__INST4_SEG4                       0

#define DMU_BASE__INST5_SEG0                       0
#define DMU_BASE__INST5_SEG1                       0
#define DMU_BASE__INST5_SEG2                       0
#define DMU_BASE__INST5_SEG3                       0
#define DMU_BASE__INST5_SEG4                       0

#define DMU_BASE__INST6_SEG0                       0
#define DMU_BASE__INST6_SEG1                       0
#define DMU_BASE__INST6_SEG2                       0
#define DMU_BASE__INST6_SEG3                       0
#define DMU_BASE__INST6_SEG4                       0

#define DPCS_BASE__INST0_SEG0                      0x00000012
#define DPCS_BASE__INST0_SEG1                      0x000000C0
#define DPCS_BASE__INST0_SEG2                      0x000034C0
#define DPCS_BASE__INST0_SEG3                      0x00009000
#define DPCS_BASE__INST0_SEG4                      0x02403C00

#define DPCS_BASE__INST1_SEG0                      0
#define DPCS_BASE__INST1_SEG1                      0
#define DPCS_BASE__INST1_SEG2                      0
#define DPCS_BASE__INST1_SEG3                      0
#define DPCS_BASE__INST1_SEG4                      0

#define DPCS_BASE__INST2_SEG0                      0
#define DPCS_BASE__INST2_SEG1                      0
#define DPCS_BASE__INST2_SEG2                      0
#define DPCS_BASE__INST2_SEG3                      0
#define DPCS_BASE__INST2_SEG4                      0

#define DPCS_BASE__INST3_SEG0                      0
#define DPCS_BASE__INST3_SEG1                      0
#define DPCS_BASE__INST3_SEG2                      0
#define DPCS_BASE__INST3_SEG3                      0
#define DPCS_BASE__INST3_SEG4                      0

#define DPCS_BASE__INST4_SEG0                      0
#define DPCS_BASE__INST4_SEG1                      0
#define DPCS_BASE__INST4_SEG2                      0
#define DPCS_BASE__INST4_SEG3                      0
#define DPCS_BASE__INST4_SEG4                      0

#define DPCS_BASE__INST5_SEG0                      0
#define DPCS_BASE__INST5_SEG1                      0
#define DPCS_BASE__INST5_SEG2                      0
#define DPCS_BASE__INST5_SEG3                      0
#define DPCS_BASE__INST5_SEG4                      0

#define DPCS_BASE__INST6_SEG0                      0
#define DPCS_BASE__INST6_SEG1                      0
#define DPCS_BASE__INST6_SEG2                      0
#define DPCS_BASE__INST6_SEG3                      0
#define DPCS_BASE__INST6_SEG4                      0

#define FUSE_BASE__INST0_SEG0                      0x00017400
#define FUSE_BASE__INST0_SEG1                      0x02401400
#define FUSE_BASE__INST0_SEG2                      0
#define FUSE_BASE__INST0_SEG3                      0
#define FUSE_BASE__INST0_SEG4                      0

#define FUSE_BASE__INST1_SEG0                      0
#define FUSE_BASE__INST1_SEG1                      0
#define FUSE_BASE__INST1_SEG2                      0
#define FUSE_BASE__INST1_SEG3                      0
#define FUSE_BASE__INST1_SEG4                      0

#define FUSE_BASE__INST2_SEG0                      0
#define FUSE_BASE__INST2_SEG1                      0
#define FUSE_BASE__INST2_SEG2                      0
#define FUSE_BASE__INST2_SEG3                      0
#define FUSE_BASE__INST2_SEG4                      0

#define FUSE_BASE__INST3_SEG0                      0
#define FUSE_BASE__INST3_SEG1                      0
#define FUSE_BASE__INST3_SEG2                      0
#define FUSE_BASE__INST3_SEG3                      0
#define FUSE_BASE__INST3_SEG4                      0

#define FUSE_BASE__INST4_SEG0                      0
#define FUSE_BASE__INST4_SEG1                      0
#define FUSE_BASE__INST4_SEG2                      0
#define FUSE_BASE__INST4_SEG3                      0
#define FUSE_BASE__INST4_SEG4                      0

#define FUSE_BASE__INST5_SEG0                      0
#define FUSE_BASE__INST5_SEG1                      0
#define FUSE_BASE__INST5_SEG2                      0
#define FUSE_BASE__INST5_SEG3                      0
#define FUSE_BASE__INST5_SEG4                      0

#define FUSE_BASE__INST6_SEG0                      0
#define FUSE_BASE__INST6_SEG1                      0
#define FUSE_BASE__INST6_SEG2                      0
#define FUSE_BASE__INST6_SEG3                      0
#define FUSE_BASE__INST6_SEG4                      0

#define GC_BASE__INST0_SEG0                        0x00001260
#define GC_BASE__INST0_SEG1                        0x0000A000
#define GC_BASE__INST0_SEG2                        0x02402C00
#define GC_BASE__INST0_SEG3                        0
#define GC_BASE__INST0_SEG4                        0

#define GC_BASE__INST1_SEG0                        0
#define GC_BASE__INST1_SEG1                        0
#define GC_BASE__INST1_SEG2                        0
#define GC_BASE__INST1_SEG3                        0
#define GC_BASE__INST1_SEG4                        0

#define GC_BASE__INST2_SEG0                        0
#define GC_BASE__INST2_SEG1                        0
#define GC_BASE__INST2_SEG2                        0
#define GC_BASE__INST2_SEG3                        0
#define GC_BASE__INST2_SEG4                        0

#define GC_BASE__INST3_SEG0                        0
#define GC_BASE__INST3_SEG1                        0
#define GC_BASE__INST3_SEG2                        0
#define GC_BASE__INST3_SEG3                        0
#define GC_BASE__INST3_SEG4                        0

#define GC_BASE__INST4_SEG0                        0
#define GC_BASE__INST4_SEG1                        0
#define GC_BASE__INST4_SEG2                        0
#define GC_BASE__INST4_SEG3                        0
#define GC_BASE__INST4_SEG4                        0

#define GC_BASE__INST5_SEG0                        0
#define GC_BASE__INST5_SEG1                        0
#define GC_BASE__INST5_SEG2                        0
#define GC_BASE__INST5_SEG3                        0
#define GC_BASE__INST5_SEG4                        0

#define GC_BASE__INST6_SEG0                        0
#define GC_BASE__INST6_SEG1                        0
#define GC_BASE__INST6_SEG2                        0
#define GC_BASE__INST6_SEG3                        0
#define GC_BASE__INST6_SEG4                        0

#define HDA_BASE__INST0_SEG0                       0x004C0000
#define HDA_BASE__INST0_SEG1                       0x02404800
#define HDA_BASE__INST0_SEG2                       0
#define HDA_BASE__INST0_SEG3                       0
#define HDA_BASE__INST0_SEG4                       0

#define HDA_BASE__INST1_SEG0                       0
#define HDA_BASE__INST1_SEG1                       0
#define HDA_BASE__INST1_SEG2                       0
#define HDA_BASE__INST1_SEG3                       0
#define HDA_BASE__INST1_SEG4                       0

#define HDA_BASE__INST2_SEG0                       0
#define HDA_BASE__INST2_SEG1                       0
#define HDA_BASE__INST2_SEG2                       0
#define HDA_BASE__INST2_SEG3                       0
#define HDA_BASE__INST2_SEG4                       0

#define HDA_BASE__INST3_SEG0                       0
#define HDA_BASE__INST3_SEG1                       0
#define HDA_BASE__INST3_SEG2                       0
#define HDA_BASE__INST3_SEG3                       0
#define HDA_BASE__INST3_SEG4                       0

#define HDA_BASE__INST4_SEG0                       0
#define HDA_BASE__INST4_SEG1                       0
#define HDA_BASE__INST4_SEG2                       0
#define HDA_BASE__INST4_SEG3                       0
#define HDA_BASE__INST4_SEG4                       0

#define HDA_BASE__INST5_SEG0                       0
#define HDA_BASE__INST5_SEG1                       0
#define HDA_BASE__INST5_SEG2                       0
#define HDA_BASE__INST5_SEG3                       0
#define HDA_BASE__INST5_SEG4                       0

#define HDA_BASE__INST6_SEG0                       0
#define HDA_BASE__INST6_SEG1                       0
#define HDA_BASE__INST6_SEG2                       0
#define HDA_BASE__INST6_SEG3                       0
#define HDA_BASE__INST6_SEG4                       0

#define HDP_BASE__INST0_SEG0                       0x00000F20
#define HDP_BASE__INST0_SEG1                       0x0240A400
#define HDP_BASE__INST0_SEG2                       0
#define HDP_BASE__INST0_SEG3                       0
#define HDP_BASE__INST0_SEG4                       0

#define HDP_BASE__INST1_SEG0                       0
#define HDP_BASE__INST1_SEG1                       0
#define HDP_BASE__INST1_SEG2                       0
#define HDP_BASE__INST1_SEG3                       0
#define HDP_BASE__INST1_SEG4                       0

#define HDP_BASE__INST2_SEG0                       0
#define HDP_BASE__INST2_SEG1                       0
#define HDP_BASE__INST2_SEG2                       0
#define HDP_BASE__INST2_SEG3                       0
#define HDP_BASE__INST2_SEG4                       0

#define HDP_BASE__INST3_SEG0                       0
#define HDP_BASE__INST3_SEG1                       0
#define HDP_BASE__INST3_SEG2                       0
#define HDP_BASE__INST3_SEG3                       0
#define HDP_BASE__INST3_SEG4                       0

#define HDP_BASE__INST4_SEG0                       0
#define HDP_BASE__INST4_SEG1                       0
#define HDP_BASE__INST4_SEG2                       0
#define HDP_BASE__INST4_SEG3                       0
#define HDP_BASE__INST4_SEG4                       0

#define HDP_BASE__INST5_SEG0                       0
#define HDP_BASE__INST5_SEG1                       0
#define HDP_BASE__INST5_SEG2                       0
#define HDP_BASE__INST5_SEG3                       0
#define HDP_BASE__INST5_SEG4                       0

#define HDP_BASE__INST6_SEG0                       0
#define HDP_BASE__INST6_SEG1                       0
#define HDP_BASE__INST6_SEG2                       0
#define HDP_BASE__INST6_SEG3                       0
#define HDP_BASE__INST6_SEG4                       0

#define MMHUB_BASE__INST0_SEG0                     0x0001A000
#define MMHUB_BASE__INST0_SEG1                     0x02408800
#define MMHUB_BASE__INST0_SEG2                     0
#define MMHUB_BASE__INST0_SEG3                     0
#define MMHUB_BASE__INST0_SEG4                     0

#define MMHUB_BASE__INST1_SEG0                     0
#define MMHUB_BASE__INST1_SEG1                     0
#define MMHUB_BASE__INST1_SEG2                     0
#define MMHUB_BASE__INST1_SEG3                     0
#define MMHUB_BASE__INST1_SEG4                     0

#define MMHUB_BASE__INST2_SEG0                     0
#define MMHUB_BASE__INST2_SEG1                     0
#define MMHUB_BASE__INST2_SEG2                     0
#define MMHUB_BASE__INST2_SEG3                     0
#define MMHUB_BASE__INST2_SEG4                     0

#define MMHUB_BASE__INST3_SEG0                     0
#define MMHUB_BASE__INST3_SEG1                     0
#define MMHUB_BASE__INST3_SEG2                     0
#define MMHUB_BASE__INST3_SEG3                     0
#define MMHUB_BASE__INST3_SEG4                     0

#define MMHUB_BASE__INST4_SEG0                     0
#define MMHUB_BASE__INST4_SEG1                     0
#define MMHUB_BASE__INST4_SEG2                     0
#define MMHUB_BASE__INST4_SEG3                     0
#define MMHUB_BASE__INST4_SEG4                     0

#define MMHUB_BASE__INST5_SEG0                     0
#define MMHUB_BASE__INST5_SEG1                     0
#define MMHUB_BASE__INST5_SEG2                     0
#define MMHUB_BASE__INST5_SEG3                     0
#define MMHUB_BASE__INST5_SEG4                     0

#define MMHUB_BASE__INST6_SEG0                     0
#define MMHUB_BASE__INST6_SEG1                     0
#define MMHUB_BASE__INST6_SEG2                     0
#define MMHUB_BASE__INST6_SEG3                     0
#define MMHUB_BASE__INST6_SEG4                     0

#define MP0_BASE__INST0_SEG0                       0x00016000
#define MP0_BASE__INST0_SEG1                       0x00DC0000
#define MP0_BASE__INST0_SEG2                       0x00E00000
#define MP0_BASE__INST0_SEG3                       0x00E40000
#define MP0_BASE__INST0_SEG4                       0x0243FC00

#define MP0_BASE__INST1_SEG0                       0
#define MP0_BASE__INST1_SEG1                       0
#define MP0_BASE__INST1_SEG2                       0
#define MP0_BASE__INST1_SEG3                       0
#define MP0_BASE__INST1_SEG4                       0

#define MP0_BASE__INST2_SEG0                       0
#define MP0_BASE__INST2_SEG1                       0
#define MP0_BASE__INST2_SEG2                       0
#define MP0_BASE__INST2_SEG3                       0
#define MP0_BASE__INST2_SEG4                       0

#define MP0_BASE__INST3_SEG0                       0
#define MP0_BASE__INST3_SEG1                       0
#define MP0_BASE__INST3_SEG2                       0
#define MP0_BASE__INST3_SEG3                       0
#define MP0_BASE__INST3_SEG4                       0

#define MP0_BASE__INST4_SEG0                       0
#define MP0_BASE__INST4_SEG1                       0
#define MP0_BASE__INST4_SEG2                       0
#define MP0_BASE__INST4_SEG3                       0
#define MP0_BASE__INST4_SEG4                       0

#define MP0_BASE__INST5_SEG0                       0
#define MP0_BASE__INST5_SEG1                       0
#define MP0_BASE__INST5_SEG2                       0
#define MP0_BASE__INST5_SEG3                       0
#define MP0_BASE__INST5_SEG4                       0

#define MP0_BASE__INST6_SEG0                       0
#define MP0_BASE__INST6_SEG1                       0
#define MP0_BASE__INST6_SEG2                       0
#define MP0_BASE__INST6_SEG3                       0
#define MP0_BASE__INST6_SEG4                       0

#define MP1_BASE__INST0_SEG0                       0x00016000
#define MP1_BASE__INST0_SEG1                       0x00DC0000
#define MP1_BASE__INST0_SEG2                       0x00E00000
#define MP1_BASE__INST0_SEG3                       0x00E40000
#define MP1_BASE__INST0_SEG4                       0x0243FC00

#define MP1_BASE__INST1_SEG0                       0
#define MP1_BASE__INST1_SEG1                       0
#define MP1_BASE__INST1_SEG2                       0
#define MP1_BASE__INST1_SEG3                       0
#define MP1_BASE__INST1_SEG4                       0

#define MP1_BASE__INST2_SEG0                       0
#define MP1_BASE__INST2_SEG1                       0
#define MP1_BASE__INST2_SEG2                       0
#define MP1_BASE__INST2_SEG3                       0
#define MP1_BASE__INST2_SEG4                       0

#define MP1_BASE__INST3_SEG0                       0
#define MP1_BASE__INST3_SEG1                       0
#define MP1_BASE__INST3_SEG2                       0
#define MP1_BASE__INST3_SEG3                       0
#define MP1_BASE__INST3_SEG4                       0

#define MP1_BASE__INST4_SEG0                       0
#define MP1_BASE__INST4_SEG1                       0
#define MP1_BASE__INST4_SEG2                       0
#define MP1_BASE__INST4_SEG3                       0
#define MP1_BASE__INST4_SEG4                       0

#define MP1_BASE__INST5_SEG0                       0
#define MP1_BASE__INST5_SEG1                       0
#define MP1_BASE__INST5_SEG2                       0
#define MP1_BASE__INST5_SEG3                       0
#define MP1_BASE__INST5_SEG4                       0

#define MP1_BASE__INST6_SEG0                       0
#define MP1_BASE__INST6_SEG1                       0
#define MP1_BASE__INST6_SEG2                       0
#define MP1_BASE__INST6_SEG3                       0
#define MP1_BASE__INST6_SEG4                       0

#define NBIF0_BASE__INST0_SEG0                     0x00000000
#define NBIF0_BASE__INST0_SEG1                     0x00000014
#define NBIF0_BASE__INST0_SEG2                     0x00000D20
#define NBIF0_BASE__INST0_SEG3                     0x00010400
#define NBIF0_BASE__INST0_SEG4                     0x0241B000

#define NBIF0_BASE__INST1_SEG0                     0
#define NBIF0_BASE__INST1_SEG1                     0
#define NBIF0_BASE__INST1_SEG2                     0
#define NBIF0_BASE__INST1_SEG3                     0
#define NBIF0_BASE__INST1_SEG4                     0

#define NBIF0_BASE__INST2_SEG0                     0
#define NBIF0_BASE__INST2_SEG1                     0
#define NBIF0_BASE__INST2_SEG2                     0
#define NBIF0_BASE__INST2_SEG3                     0
#define NBIF0_BASE__INST2_SEG4                     0

#define NBIF0_BASE__INST3_SEG0                     0
#define NBIF0_BASE__INST3_SEG1                     0
#define NBIF0_BASE__INST3_SEG2                     0
#define NBIF0_BASE__INST3_SEG3                     0
#define NBIF0_BASE__INST3_SEG4                     0

#define NBIF0_BASE__INST4_SEG0                     0
#define NBIF0_BASE__INST4_SEG1                     0
#define NBIF0_BASE__INST4_SEG2                     0
#define NBIF0_BASE__INST4_SEG3                     0
#define NBIF0_BASE__INST4_SEG4                     0

#define NBIF0_BASE__INST5_SEG0                     0
#define NBIF0_BASE__INST5_SEG1                     0
#define NBIF0_BASE__INST5_SEG2                     0
#define NBIF0_BASE__INST5_SEG3                     0
#define NBIF0_BASE__INST5_SEG4                     0

#define NBIF0_BASE__INST6_SEG0                     0
#define NBIF0_BASE__INST6_SEG1                     0
#define NBIF0_BASE__INST6_SEG2                     0
#define NBIF0_BASE__INST6_SEG3                     0
#define NBIF0_BASE__INST6_SEG4                     0

#define OSSSYS_BASE__INST0_SEG0                    0x000010A0
#define OSSSYS_BASE__INST0_SEG1                    0x0240A000
#define OSSSYS_BASE__INST0_SEG2                    0
#define OSSSYS_BASE__INST0_SEG3                    0
#define OSSSYS_BASE__INST0_SEG4                    0

#define OSSSYS_BASE__INST1_SEG0                    0
#define OSSSYS_BASE__INST1_SEG1                    0
#define OSSSYS_BASE__INST1_SEG2                    0
#define OSSSYS_BASE__INST1_SEG3                    0
#define OSSSYS_BASE__INST1_SEG4                    0

#define OSSSYS_BASE__INST2_SEG0                    0
#define OSSSYS_BASE__INST2_SEG1                    0
#define OSSSYS_BASE__INST2_SEG2                    0
#define OSSSYS_BASE__INST2_SEG3                    0
#define OSSSYS_BASE__INST2_SEG4                    0

#define OSSSYS_BASE__INST3_SEG0                    0
#define OSSSYS_BASE__INST3_SEG1                    0
#define OSSSYS_BASE__INST3_SEG2                    0
#define OSSSYS_BASE__INST3_SEG3                    0
#define OSSSYS_BASE__INST3_SEG4                    0

#define OSSSYS_BASE__INST4_SEG0                    0
#define OSSSYS_BASE__INST4_SEG1                    0
#define OSSSYS_BASE__INST4_SEG2                    0
#define OSSSYS_BASE__INST4_SEG3                    0
#define OSSSYS_BASE__INST4_SEG4                    0

#define OSSSYS_BASE__INST5_SEG0                    0
#define OSSSYS_BASE__INST5_SEG1                    0
#define OSSSYS_BASE__INST5_SEG2                    0
#define OSSSYS_BASE__INST5_SEG3                    0
#define OSSSYS_BASE__INST5_SEG4                    0

#define OSSSYS_BASE__INST6_SEG0                    0
#define OSSSYS_BASE__INST6_SEG1                    0
#define OSSSYS_BASE__INST6_SEG2                    0
#define OSSSYS_BASE__INST6_SEG3                    0
#define OSSSYS_BASE__INST6_SEG4                    0

#define PCIE0_BASE__INST0_SEG0                     0x00000000
#define PCIE0_BASE__INST0_SEG1                     0x00000014
#define PCIE0_BASE__INST0_SEG2                     0x00000D20
#define PCIE0_BASE__INST0_SEG3                     0x00010400
#define PCIE0_BASE__INST0_SEG4                     0x0241B000

#define PCIE0_BASE__INST1_SEG0                     0
#define PCIE0_BASE__INST1_SEG1                     0
#define PCIE0_BASE__INST1_SEG2                     0
#define PCIE0_BASE__INST1_SEG3                     0
#define PCIE0_BASE__INST1_SEG4                     0

#define PCIE0_BASE__INST2_SEG0                     0
#define PCIE0_BASE__INST2_SEG1                     0
#define PCIE0_BASE__INST2_SEG2                     0
#define PCIE0_BASE__INST2_SEG3                     0
#define PCIE0_BASE__INST2_SEG4                     0

#define PCIE0_BASE__INST3_SEG0                     0
#define PCIE0_BASE__INST3_SEG1                     0
#define PCIE0_BASE__INST3_SEG2                     0
#define PCIE0_BASE__INST3_SEG3                     0
#define PCIE0_BASE__INST3_SEG4                     0

#define PCIE0_BASE__INST4_SEG0                     0
#define PCIE0_BASE__INST4_SEG1                     0
#define PCIE0_BASE__INST4_SEG2                     0
#define PCIE0_BASE__INST4_SEG3                     0
#define PCIE0_BASE__INST4_SEG4                     0

#define PCIE0_BASE__INST5_SEG0                     0
#define PCIE0_BASE__INST5_SEG1                     0
#define PCIE0_BASE__INST5_SEG2                     0
#define PCIE0_BASE__INST5_SEG3                     0
#define PCIE0_BASE__INST5_SEG4                     0

#define PCIE0_BASE__INST6_SEG0                     0
#define PCIE0_BASE__INST6_SEG1                     0
#define PCIE0_BASE__INST6_SEG2                     0
#define PCIE0_BASE__INST6_SEG3                     0
#define PCIE0_BASE__INST6_SEG4                     0

#define SDMA_BASE__INST0_SEG0                      0x00001260
#define SDMA_BASE__INST0_SEG1                      0x0000A000
#define SDMA_BASE__INST0_SEG2                      0x02402C00
#define SDMA_BASE__INST0_SEG3                      0
#define SDMA_BASE__INST0_SEG4                      0

#define SDMA_BASE__INST1_SEG0                      0x00001260
#define SDMA_BASE__INST1_SEG1                      0x0000A000
#define SDMA_BASE__INST1_SEG2                      0x02402C00
#define SDMA_BASE__INST1_SEG3                      0
#define SDMA_BASE__INST1_SEG4                      0

#define SDMA_BASE__INST2_SEG0                      0
#define SDMA_BASE__INST2_SEG1                      0
#define SDMA_BASE__INST2_SEG2                      0
#define SDMA_BASE__INST2_SEG3                      0
#define SDMA_BASE__INST2_SEG4                      0

#define SDMA_BASE__INST3_SEG0                      0
#define SDMA_BASE__INST3_SEG1                      0
#define SDMA_BASE__INST3_SEG2                      0
#define SDMA_BASE__INST3_SEG3                      0
#define SDMA_BASE__INST3_SEG4                      0

#define SDMA_BASE__INST4_SEG0                      0
#define SDMA_BASE__INST4_SEG1                      0
#define SDMA_BASE__INST4_SEG2                      0
#define SDMA_BASE__INST4_SEG3                      0
#define SDMA_BASE__INST4_SEG4                      0

#define SDMA_BASE__INST5_SEG0                      0
#define SDMA_BASE__INST5_SEG1                      0
#define SDMA_BASE__INST5_SEG2                      0
#define SDMA_BASE__INST5_SEG3                      0
#define SDMA_BASE__INST5_SEG4                      0

#define SDMA_BASE__INST6_SEG0                      0
#define SDMA_BASE__INST6_SEG1                      0
#define SDMA_BASE__INST6_SEG2                      0
#define SDMA_BASE__INST6_SEG3                      0
#define SDMA_BASE__INST6_SEG4                      0

#define SMUIO_BASE__INST0_SEG0                     0x00016800
#define SMUIO_BASE__INST0_SEG1                     0x00016A00
#define SMUIO_BASE__INST0_SEG2                     0x00440000
#define SMUIO_BASE__INST0_SEG3                     0x02401000
#define SMUIO_BASE__INST0_SEG4                     0

#define SMUIO_BASE__INST1_SEG0                     0
#define SMUIO_BASE__INST1_SEG1                     0
#define SMUIO_BASE__INST1_SEG2                     0
#define SMUIO_BASE__INST1_SEG3                     0
#define SMUIO_BASE__INST1_SEG4                     0

#define SMUIO_BASE__INST2_SEG0                     0
#define SMUIO_BASE__INST2_SEG1                     0
#define SMUIO_BASE__INST2_SEG2                     0
#define SMUIO_BASE__INST2_SEG3                     0
#define SMUIO_BASE__INST2_SEG4                     0

#define SMUIO_BASE__INST3_SEG0                     0
#define SMUIO_BASE__INST3_SEG1                     0
#define SMUIO_BASE__INST3_SEG2                     0
#define SMUIO_BASE__INST3_SEG3                     0
#define SMUIO_BASE__INST3_SEG4                     0

#define SMUIO_BASE__INST4_SEG0                     0
#define SMUIO_BASE__INST4_SEG1                     0
#define SMUIO_BASE__INST4_SEG2                     0
#define SMUIO_BASE__INST4_SEG3                     0
#define SMUIO_BASE__INST4_SEG4                     0

#define SMUIO_BASE__INST5_SEG0                     0
#define SMUIO_BASE__INST5_SEG1                     0
#define SMUIO_BASE__INST5_SEG2                     0
#define SMUIO_BASE__INST5_SEG3                     0
#define SMUIO_BASE__INST5_SEG4                     0

#define SMUIO_BASE__INST6_SEG0                     0
#define SMUIO_BASE__INST6_SEG1                     0
#define SMUIO_BASE__INST6_SEG2                     0
#define SMUIO_BASE__INST6_SEG3                     0
#define SMUIO_BASE__INST6_SEG4                     0

#define THM_BASE__INST0_SEG0                       0x00016600
#define THM_BASE__INST0_SEG1                       0x02400C00
#define THM_BASE__INST0_SEG2                       0
#define THM_BASE__INST0_SEG3                       0
#define THM_BASE__INST0_SEG4                       0

#define THM_BASE__INST1_SEG0                       0
#define THM_BASE__INST1_SEG1                       0
#define THM_BASE__INST1_SEG2                       0
#define THM_BASE__INST1_SEG3                       0
#define THM_BASE__INST1_SEG4                       0

#define THM_BASE__INST2_SEG0                       0
#define THM_BASE__INST2_SEG1                       0
#define THM_BASE__INST2_SEG2                       0
#define THM_BASE__INST2_SEG3                       0
#define THM_BASE__INST2_SEG4                       0

#define THM_BASE__INST3_SEG0                       0
#define THM_BASE__INST3_SEG1                       0
#define THM_BASE__INST3_SEG2                       0
#define THM_BASE__INST3_SEG3                       0
#define THM_BASE__INST3_SEG4                       0

#define THM_BASE__INST4_SEG0                       0
#define THM_BASE__INST4_SEG1                       0
#define THM_BASE__INST4_SEG2                       0
#define THM_BASE__INST4_SEG3                       0
#define THM_BASE__INST4_SEG4                       0

#define THM_BASE__INST5_SEG0                       0
#define THM_BASE__INST5_SEG1                       0
#define THM_BASE__INST5_SEG2                       0
#define THM_BASE__INST5_SEG3                       0
#define THM_BASE__INST5_SEG4                       0

#define THM_BASE__INST6_SEG0                       0
#define THM_BASE__INST6_SEG1                       0
#define THM_BASE__INST6_SEG2                       0
#define THM_BASE__INST6_SEG3                       0
#define THM_BASE__INST6_SEG4                       0

#define UMC_BASE__INST0_SEG0                       0x00014000
#define UMC_BASE__INST0_SEG1                       0x02425800
#define UMC_BASE__INST0_SEG2                       0
#define UMC_BASE__INST0_SEG3                       0
#define UMC_BASE__INST0_SEG4                       0

#define UMC_BASE__INST1_SEG0                       0x00054000
#define UMC_BASE__INST1_SEG1                       0x02425C00
#define UMC_BASE__INST1_SEG2                       0
#define UMC_BASE__INST1_SEG3                       0
#define UMC_BASE__INST1_SEG4                       0

#define UMC_BASE__INST2_SEG0                       0x00094000
#define UMC_BASE__INST2_SEG1                       0x02426000
#define UMC_BASE__INST2_SEG2                       0
#define UMC_BASE__INST2_SEG3                       0
#define UMC_BASE__INST2_SEG4                       0

#define UMC_BASE__INST3_SEG0                       0x000D4000
#define UMC_BASE__INST3_SEG1                       0x02426400
#define UMC_BASE__INST3_SEG2                       0
#define UMC_BASE__INST3_SEG3                       0
#define UMC_BASE__INST3_SEG4                       0

#define UMC_BASE__INST4_SEG0                       0
#define UMC_BASE__INST4_SEG1                       0
#define UMC_BASE__INST4_SEG2                       0
#define UMC_BASE__INST4_SEG3                       0
#define UMC_BASE__INST4_SEG4                       0

#define UMC_BASE__INST5_SEG0                       0
#define UMC_BASE__INST5_SEG1                       0
#define UMC_BASE__INST5_SEG2                       0
#define UMC_BASE__INST5_SEG3                       0
#define UMC_BASE__INST5_SEG4                       0

#define UMC_BASE__INST6_SEG0                       0
#define UMC_BASE__INST6_SEG1                       0
#define UMC_BASE__INST6_SEG2                       0
#define UMC_BASE__INST6_SEG3                       0
#define UMC_BASE__INST6_SEG4                       0

#define USB0_BASE__INST0_SEG0                      0x0242A800
#define USB0_BASE__INST0_SEG1                      0x05B00000
#define USB0_BASE__INST0_SEG2                      0
#define USB0_BASE__INST0_SEG3                      0
#define USB0_BASE__INST0_SEG4                      0

#define USB0_BASE__INST1_SEG0                      0
#define USB0_BASE__INST1_SEG1                      0
#define USB0_BASE__INST1_SEG2                      0
#define USB0_BASE__INST1_SEG3                      0
#define USB0_BASE__INST1_SEG4                      0

#define USB0_BASE__INST2_SEG0                      0
#define USB0_BASE__INST2_SEG1                      0
#define USB0_BASE__INST2_SEG2                      0
#define USB0_BASE__INST2_SEG3                      0
#define USB0_BASE__INST2_SEG4                      0

#define USB0_BASE__INST3_SEG0                      0
#define USB0_BASE__INST3_SEG1                      0
#define USB0_BASE__INST3_SEG2                      0
#define USB0_BASE__INST3_SEG3                      0
#define USB0_BASE__INST3_SEG4                      0

#define USB0_BASE__INST4_SEG0                      0
#define USB0_BASE__INST4_SEG1                      0
#define USB0_BASE__INST4_SEG2                      0
#define USB0_BASE__INST4_SEG3                      0
#define USB0_BASE__INST4_SEG4                      0

#define USB0_BASE__INST5_SEG0                      0
#define USB0_BASE__INST5_SEG1                      0
#define USB0_BASE__INST5_SEG2                      0
#define USB0_BASE__INST5_SEG3                      0
#define USB0_BASE__INST5_SEG4                      0

#define USB0_BASE__INST6_SEG0                      0
#define USB0_BASE__INST6_SEG1                      0
#define USB0_BASE__INST6_SEG2                      0
#define USB0_BASE__INST6_SEG3                      0
#define USB0_BASE__INST6_SEG4                      0

#define UVD0_BASE__INST0_SEG0                      0x00007800
#define UVD0_BASE__INST0_SEG1                      0x00007E00
#define UVD0_BASE__INST0_SEG2                      0x02403000
#define UVD0_BASE__INST0_SEG3                      0
#define UVD0_BASE__INST0_SEG4                      0

#define UVD0_BASE__INST1_SEG0                      0
#define UVD0_BASE__INST1_SEG1                      0
#define UVD0_BASE__INST1_SEG2                      0
#define UVD0_BASE__INST1_SEG3                      0
#define UVD0_BASE__INST1_SEG4                      0

#define UVD0_BASE__INST2_SEG0                      0
#define UVD0_BASE__INST2_SEG1                      0
#define UVD0_BASE__INST2_SEG2                      0
#define UVD0_BASE__INST2_SEG3                      0
#define UVD0_BASE__INST2_SEG4                      0

#define UVD0_BASE__INST3_SEG0                      0
#define UVD0_BASE__INST3_SEG1                      0
#define UVD0_BASE__INST3_SEG2                      0
#define UVD0_BASE__INST3_SEG3                      0
#define UVD0_BASE__INST3_SEG4                      0

#define UVD0_BASE__INST4_SEG0                      0
#define UVD0_BASE__INST4_SEG1                      0
#define UVD0_BASE__INST4_SEG2                      0
#define UVD0_BASE__INST4_SEG3                      0
#define UVD0_BASE__INST4_SEG4                      0

#define UVD0_BASE__INST5_SEG0                      0
#define UVD0_BASE__INST5_SEG1                      0
#define UVD0_BASE__INST5_SEG2                      0
#define UVD0_BASE__INST5_SEG3                      0
#define UVD0_BASE__INST5_SEG4                      0

#define UVD0_BASE__INST6_SEG0                      0
#define UVD0_BASE__INST6_SEG1                      0
#define UVD0_BASE__INST6_SEG2                      0
#define UVD0_BASE__INST6_SEG3                      0
#define UVD0_BASE__INST6_SEG4                      0

#endif
/*
 * Copyright (C) 2019  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _navi12_ip_offset_HEADER
#define _navi12_ip_offset_HEADER

#define MAX_INSTANCE                                       7
#define MAX_SEGMENT                                        5


struct IP_BASE_INSTANCE
{
    unsigned int segment[MAX_SEGMENT];
};

struct IP_BASE
{
    struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
} __maybe_unused;


static const struct IP_BASE ATHUB_BASE ={ { { { 0x00000C00, 0x02408C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE CLK_BASE ={ { { { 0x00016C00, 0x02401800, 0, 0, 0 } },
                                        { { 0x00016E00, 0x02401C00, 0, 0, 0 } },
                                        { { 0x00017000, 0x02402000, 0, 0, 0 } },
                                        { { 0x00017200, 0x02402400, 0, 0, 0 } },
                                        { { 0x0001B000, 0x0242D800, 0, 0, 0 } },
                                        { { 0x00017E00, 0x0240BC00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DF_BASE ={ { { { 0x00007000, 0x0240B800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DIO_BASE ={ { { { 0x02404000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DMU_BASE ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DPCS_BASE ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0x02403C00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FUSE_BASE ={ { { { 0x00017400, 0x02401400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE GC_BASE ={ { { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDA_BASE ={ { { { 0x004C0000, 0x02404800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDP_BASE ={ { { { 0x00000F20, 0x0240A400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MMHUB_BASE ={ { { { 0x0001A000, 0x02408800, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP0_BASE ={ { { { 0x00016000, 0x00DC0000, 0x00E00000, 0x00E40000, 0x0243FC00 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP1_BASE ={ { { { 0x00016000, 0x00E80000, 0x00EC0000, 0x00F00000, 0x02400400 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE NBIF0_BASE ={ { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0x0241B000 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE OSSSYS_BASE ={ { { { 0x000010A0, 0x0240A000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE PCIE0_BASE ={ { { { 0x02411800, 0x04440000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SDMA_BASE ={ { { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0 } },
                                        { { 0x00001260, 0x0000A000, 0x02402C00, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SMUIO_BASE ={ { { { 0x00016800, 0x00016A00, 0x00440000, 0x02401000, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE THM_BASE ={ { { { 0x00016600, 0x02400C00, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UMC_BASE ={ { { { 0x00014000, 0x02425800, 0, 0, 0 } },
                                        { { 0x00054000, 0x02425C00, 0, 0, 0 } },
                                        { { 0x00094000, 0x02426000, 0, 0, 0 } },
                                        { { 0x000D4000, 0x02426400, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE USB0_BASE ={ { { { 0x0242A800, 0x05B00000, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UVD0_BASE ={ { { { 0x00007800, 0x00007E00, 0x02403000, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0 } } } };


#define ATHUB_BASE__INST0_SEG0                     0x00000C00
#define ATHUB_BASE__INST0_SEG1                     0x02408C00
#define ATHUB_BASE__INST0_SEG2                     0
#define ATHUB_BASE__INST0_SEG3                     0
#define ATHUB_BASE__INST0_SEG4                     0

#define ATHUB_BASE__INST1_SEG0                     0
#define ATHUB_BASE__INST1_SEG1                     0
#define ATHUB_BASE__INST1_SEG2                     0
#define ATHUB_BASE__INST1_SEG3                     0
#define ATHUB_BASE__INST1_SEG4                     0

#define ATHUB_BASE__INST2_SEG0                     0
#define ATHUB_BASE__INST2_SEG1                     0
#define ATHUB_BASE__INST2_SEG2                     0
#define ATHUB_BASE__INST2_SEG3                     0
#define ATHUB_BASE__INST2_SEG4                     0

#define ATHUB_BASE__INST3_SEG0                     0
#define ATHUB_BASE__INST3_SEG1                     0
#define ATHUB_BASE__INST3_SEG2                     0
#define ATHUB_BASE__INST3_SEG3                     0
#define ATHUB_BASE__INST3_SEG4                     0

#define ATHUB_BASE__INST4_SEG0                     0
#define ATHUB_BASE__INST4_SEG1                     0
#define ATHUB_BASE__INST4_SEG2                     0
#define ATHUB_BASE__INST4_SEG3                     0
#define ATHUB_BASE__INST4_SEG4                     0

#define ATHUB_BASE__INST5_SEG0                     0
#define ATHUB_BASE__INST5_SEG1                     0
#define ATHUB_BASE__INST5_SEG2                     0
#define ATHUB_BASE__INST5_SEG3                     0
#define ATHUB_BASE__INST5_SEG4                     0

#define ATHUB_BASE__INST6_SEG0                     0
#define ATHUB_BASE__INST6_SEG1                     0
#define ATHUB_BASE__INST6_SEG2                     0
#define ATHUB_BASE__INST6_SEG3                     0
#define ATHUB_BASE__INST6_SEG4                     0

#define CLK_BASE__INST0_SEG0                       0x00016C00
#define CLK_BASE__INST0_SEG1                       0x02401800
#define CLK_BASE__INST0_SEG2                       0
#define CLK_BASE__INST0_SEG3                       0
#define CLK_BASE__INST0_SEG4                       0

#define CLK_BASE__INST1_SEG0                       0x00016E00
#define CLK_BASE__INST1_SEG1                       0x02401C00
#define CLK_BASE__INST1_SEG2                       0
#define CLK_BASE__INST1_SEG3                       0
#define CLK_BASE__INST1_SEG4                       0

#define CLK_BASE__INST2_SEG0                       0x00017000
#define CLK_BASE__INST2_SEG1                       0x02402000
#define CLK_BASE__INST2_SEG2                       0
#define CLK_BASE__INST2_SEG3                       0
#define CLK_BASE__INST2_SEG4                       0

#define CLK_BASE__INST3_SEG0                       0x00017200
#define CLK_BASE__INST3_SEG1                       0x02402400
#define CLK_BASE__INST3_SEG2                       0
#define CLK_BASE__INST3_SEG3                       0
#define CLK_BASE__INST3_SEG4                       0

#define CLK_BASE__INST4_SEG0                       0x0001B000
#define CLK_BASE__INST4_SEG1                       0x0242D800
#define CLK_BASE__INST4_SEG2                       0
#define CLK_BASE__INST4_SEG3                       0
#define CLK_BASE__INST4_SEG4                       0

#define CLK_BASE__INST5_SEG0                       0x00017E00
#define CLK_BASE__INST5_SEG1                       0x0240BC00
#define CLK_BASE__INST5_SEG2                       0
#define CLK_BASE__INST5_SEG3                       0
#define CLK_BASE__INST5_SEG4                       0

#define CLK_BASE__INST6_SEG0                       0
#define CLK_BASE__INST6_SEG1                       0
#define CLK_BASE__INST6_SEG2                       0
#define CLK_BASE__INST6_SEG3                       0
#define CLK_BASE__INST6_SEG4                       0

#define DF_BASE__INST0_SEG0                        0x00007000
#define DF_BASE__INST0_SEG1                        0x0240B800
#define DF_BASE__INST0_SEG2                        0
#define DF_BASE__INST0_SEG3                        0
#define DF_BASE__INST0_SEG4                        0

#define DF_BASE__INST1_SEG0                        0
#define DF_BASE__INST1_SEG1                        0
#define DF_BASE__INST1_SEG2                        0
#define DF_BASE__INST1_SEG3                        0
#define DF_BASE__INST1_SEG4                        0

#define DF_BASE__INST2_SEG0                        0
#define DF_BASE__INST2_SEG1                        0
#define DF_BASE__INST2_SEG2                        0
#define DF_BASE__INST2_SEG3                        0
#define DF_BASE__INST2_SEG4                        0

#define DF_BASE__INST3_SEG0                        0
#define DF_BASE__INST3_SEG1                        0
#define DF_BASE__INST3_SEG2                        0
#define DF_BASE__INST3_SEG3                        0
#define DF_BASE__INST3_SEG4                        0

#define DF_BASE__INST4_SEG0                        0
#define DF_BASE__INST4_SEG1                        0
#define DF_BASE__INST4_SEG2                        0
#define DF_BASE__INST4_SEG3                        0
#define DF_BASE__INST4_SEG4                        0

#define DF_BASE__INST5_SEG0                        0
#define DF_BASE__INST5_SEG1                        0
#define DF_BASE__INST5_SEG2                        0
#define DF_BASE__INST5_SEG3                        0
#define DF_BASE__INST5_SEG4                        0

#define DF_BASE__INST6_SEG0                        0
#define DF_BASE__INST6_SEG1                        0
#define DF_BASE__INST6_SEG2                        0
#define DF_BASE__INST6_SEG3                        0
#define DF_BASE__INST6_SEG4                        0

#define DIO_BASE__INST0_SEG0                       0x02404000
#define DIO_BASE__INST0_SEG1                       0
#define DIO_BASE__INST0_SEG2                       0
#define DIO_BASE__INST0_SEG3                       0
#define DIO_BASE__INST0_SEG4                       0

#define DIO_BASE__INST1_SEG0                       0
#define DIO_BASE__INST1_SEG1                       0
#define DIO_BASE__INST1_SEG2                       0
#define DIO_BASE__INST1_SEG3                       0
#define DIO_BASE__INST1_SEG4                       0

#define DIO_BASE__INST2_SEG0                       0
#define DIO_BASE__INST2_SEG1                       0
#define DIO_BASE__INST2_SEG2                       0
#define DIO_BASE__INST2_SEG3                       0
#define DIO_BASE__INST2_SEG4                       0

#define DIO_BASE__INST3_SEG0                       0
#define DIO_BASE__INST3_SEG1                       0
#define DIO_BASE__INST3_SEG2                       0
#define DIO_BASE__INST3_SEG3                       0
#define DIO_BASE__INST3_SEG4                       0

#define DIO_BASE__INST4_SEG0                       0
#define DIO_BASE__INST4_SEG1                       0
#define DIO_BASE__INST4_SEG2                       0
#define DIO_BASE__INST4_SEG3                       0
#define DIO_BASE__INST4_SEG4                       0

#define DIO_BASE__INST5_SEG0                       0
#define DIO_BASE__INST5_SEG1                       0
#define DIO_BASE__INST5_SEG2                       0
#define DIO_BASE__INST5_SEG3                       0
#define DIO_BASE__INST5_SEG4                       0

#define DIO_BASE__INST6_SEG0                       0
#define DIO_BASE__INST6_SEG1                       0
#define DIO_BASE__INST6_SEG2                       0
#define DIO_BASE__INST6_SEG3                       0
#define DIO_BASE__INST6_SEG4                       0

#define DMU_BASE__INST0_SEG0                       0x00000012
#define DMU_BASE__INST0_SEG1                       0x000000C0
#define DMU_BASE__INST0_SEG2                       0x000034C0
#define DMU_BASE__INST0_SEG3                       0x00009000
#define DMU_BASE__INST0_SEG4                       0x02403C00

#define DMU_BASE__INST1_SEG0                       0
#define DMU_BASE__INST1_SEG1                       0
#define DMU_BASE__INST1_SEG2                       0
#define DMU_BASE__INST1_SEG3                       0
#define DMU_BASE__INST1_SEG4                       0

#define DMU_BASE__INST2_SEG0                       0
#define DMU_BASE__INST2_SEG1                       0
#define DMU_BASE__INST2_SEG2                       0
#define DMU_BASE__INST2_SEG3                       0
#define DMU_BASE__INST2_SEG4                       0

#define DMU_BASE__INST3_SEG0                       0
#define DMU_BASE__INST3_SEG1                       0
#define DMU_BASE__INST3_SEG2                       0
#define DMU_BASE__INST3_SEG3                       0
#define DMU_BASE__INST3_SEG4                       0

#define DMU_BASE__INST4_SEG0                       0
#define DMU_BASE__INST4_SEG1                       0
#define DMU_BASE__INST4_SEG2                       0
#define DMU_BASE__INST4_SEG3                       0
#define DMU_BASE__INST4_SEG4                       0

#define DMU_BASE__INST5_SEG0                       0
#define DMU_BASE__INST5_SEG1                       0
#define DMU_BASE__INST5_SEG2                       0
#define DMU_BASE__INST5_SEG3                       0
#define DMU_BASE__INST5_SEG4                       0

#define DMU_BASE__INST6_SEG0                       0
#define DMU_BASE__INST6_SEG1                       0
#define DMU_BASE__INST6_SEG2                       0
#define DMU_BASE__INST6_SEG3                       0
#define DMU_BASE__INST6_SEG4                       0

#define DPCS_BASE__INST0_SEG0                      0x00000012
#define DPCS_BASE__INST0_SEG1                      0x000000C0
#define DPCS_BASE__INST0_SEG2                      0x000034C0
#define DPCS_BASE__INST0_SEG3                      0x00009000
#define DPCS_BASE__INST0_SEG4                      0x02403C00

#define DPCS_BASE__INST1_SEG0                      0
#define DPCS_BASE__INST1_SEG1                      0
#define DPCS_BASE__INST1_SEG2                      0
#define DPCS_BASE__INST1_SEG3                      0
#define DPCS_BASE__INST1_SEG4                      0

#define DPCS_BASE__INST2_SEG0                      0
#define DPCS_BASE__INST2_SEG1                      0
#define DPCS_BASE__INST2_SEG2                      0
#define DPCS_BASE__INST2_SEG3                      0
#define DPCS_BASE__INST2_SEG4                      0

#define DPCS_BASE__INST3_SEG0                      0
#define DPCS_BASE__INST3_SEG1                      0
#define DPCS_BASE__INST3_SEG2                      0
#define DPCS_BASE__INST3_SEG3                      0
#define DPCS_BASE__INST3_SEG4                      0

#define DPCS_BASE__INST4_SEG0                      0
#define DPCS_BASE__INST4_SEG1                      0
#define DPCS_BASE__INST4_SEG2                      0
#define DPCS_BASE__INST4_SEG3                      0
#define DPCS_BASE__INST4_SEG4                      0

#define DPCS_BASE__INST5_SEG0                      0
#define DPCS_BASE__INST5_SEG1                      0
#define DPCS_BASE__INST5_SEG2                      0
#define DPCS_BASE__INST5_SEG3                      0
#define DPCS_BASE__INST5_SEG4                      0

#define DPCS_BASE__INST6_SEG0                      0
#define DPCS_BASE__INST6_SEG1                      0
#define DPCS_BASE__INST6_SEG2                      0
#define DPCS_BASE__INST6_SEG3                      0
#define DPCS_BASE__INST6_SEG4                      0

#define FUSE_BASE__INST0_SEG0                      0x00017400
#define FUSE_BASE__INST0_SEG1                      0x02401400
#define FUSE_BASE__INST0_SEG2                      0
#define FUSE_BASE__INST0_SEG3                      0
#define FUSE_BASE__INST0_SEG4                      0

#define FUSE_BASE__INST1_SEG0                      0
#define FUSE_BASE__INST1_SEG1                      0
#define FUSE_BASE__INST1_SEG2                      0
#define FUSE_BASE__INST1_SEG3                      0
#define FUSE_BASE__INST1_SEG4                      0

#define FUSE_BASE__INST2_SEG0                      0
#define FUSE_BASE__INST2_SEG1                      0
#define FUSE_BASE__INST2_SEG2                      0
#define FUSE_BASE__INST2_SEG3                      0
#define FUSE_BASE__INST2_SEG4                      0

#define FUSE_BASE__INST3_SEG0                      0
#define FUSE_BASE__INST3_SEG1                      0
#define FUSE_BASE__INST3_SEG2                      0
#define FUSE_BASE__INST3_SEG3                      0
#define FUSE_BASE__INST3_SEG4                      0

#define FUSE_BASE__INST4_SEG0                      0
#define FUSE_BASE__INST4_SEG1                      0
#define FUSE_BASE__INST4_SEG2                      0
#define FUSE_BASE__INST4_SEG3                      0
#define FUSE_BASE__INST4_SEG4                      0

#define FUSE_BASE__INST5_SEG0                      0
#define FUSE_BASE__INST5_SEG1                      0
#define FUSE_BASE__INST5_SEG2                      0
#define FUSE_BASE__INST5_SEG3                      0
#define FUSE_BASE__INST5_SEG4                      0

#define FUSE_BASE__INST6_SEG0                      0
#define FUSE_BASE__INST6_SEG1                      0
#define FUSE_BASE__INST6_SEG2                      0
#define FUSE_BASE__INST6_SEG3                      0
#define FUSE_BASE__INST6_SEG4                      0

#define GC_BASE__INST0_SEG0                        0x00001260
#define GC_BASE__INST0_SEG1                        0x0000A000
#define GC_BASE__INST0_SEG2                        0x02402C00
#define GC_BASE__INST0_SEG3                        0
#define GC_BASE__INST0_SEG4                        0

#define GC_BASE__INST1_SEG0                        0
#define GC_BASE__INST1_SEG1                        0
#define GC_BASE__INST1_SEG2                        0
#define GC_BASE__INST1_SEG3                        0
#define GC_BASE__INST1_SEG4                        0

#define GC_BASE__INST2_SEG0                        0
#define GC_BASE__INST2_SEG1                        0
#define GC_BASE__INST2_SEG2                        0
#define GC_BASE__INST2_SEG3                        0
#define GC_BASE__INST2_SEG4                        0

#define GC_BASE__INST3_SEG0                        0
#define GC_BASE__INST3_SEG1                        0
#define GC_BASE__INST3_SEG2                        0
#define GC_BASE__INST3_SEG3                        0
#define GC_BASE__INST3_SEG4                        0

#define GC_BASE__INST4_SEG0                        0
#define GC_BASE__INST4_SEG1                        0
#define GC_BASE__INST4_SEG2                        0
#define GC_BASE__INST4_SEG3                        0
#define GC_BASE__INST4_SEG4                        0

#define GC_BASE__INST5_SEG0                        0
#define GC_BASE__INST5_SEG1                        0
#define GC_BASE__INST5_SEG2                        0
#define GC_BASE__INST5_SEG3                        0
#define GC_BASE__INST5_SEG4                        0

#define GC_BASE__INST6_SEG0                        0
#define GC_BASE__INST6_SEG1                        0
#define GC_BASE__INST6_SEG2                        0
#define GC_BASE__INST6_SEG3                        0
#define GC_BASE__INST6_SEG4                        0

#define HDA_BASE__INST0_SEG0                       0x004C0000
#define HDA_BASE__INST0_SEG1                       0x02404800
#define HDA_BASE__INST0_SEG2                       0
#define HDA_BASE__INST0_SEG3                       0
#define HDA_BASE__INST0_SEG4                       0

#define HDA_BASE__INST1_SEG0                       0
#define HDA_BASE__INST1_SEG1                       0
#define HDA_BASE__INST1_SEG2                       0
#define HDA_BASE__INST1_SEG3                       0
#define HDA_BASE__INST1_SEG4                       0

#define HDA_BASE__INST2_SEG0                       0
#define HDA_BASE__INST2_SEG1                       0
#define HDA_BASE__INST2_SEG2                       0
#define HDA_BASE__INST2_SEG3                       0
#define HDA_BASE__INST2_SEG4                       0

#define HDA_BASE__INST3_SEG0                       0
#define HDA_BASE__INST3_SEG1                       0
#define HDA_BASE__INST3_SEG2                       0
#define HDA_BASE__INST3_SEG3                       0
#define HDA_BASE__INST3_SEG4                       0

#define HDA_BASE__INST4_SEG0                       0
#define HDA_BASE__INST4_SEG1                       0
#define HDA_BASE__INST4_SEG2                       0
#define HDA_BASE__INST4_SEG3                       0
#define HDA_BASE__INST4_SEG4                       0

#define HDA_BASE__INST5_SEG0                       0
#define HDA_BASE__INST5_SEG1                       0
#define HDA_BASE__INST5_SEG2                       0
#define HDA_BASE__INST5_SEG3                       0
#define HDA_BASE__INST5_SEG4                       0

#define HDA_BASE__INST6_SEG0                       0
#define HDA_BASE__INST6_SEG1                       0
#define HDA_BASE__INST6_SEG2                       0
#define HDA_BASE__INST6_SEG3                       0
#define HDA_BASE__INST6_SEG4                       0

#define HDP_BASE__INST0_SEG0                       0x00000F20
#define HDP_BASE__INST0_SEG1                       0x0240A400
#define HDP_BASE__INST0_SEG2                       0
#define HDP_BASE__INST0_SEG3                       0
#define HDP_BASE__INST0_SEG4                       0

#define HDP_BASE__INST1_SEG0                       0
#define HDP_BASE__INST1_SEG1                       0
#define HDP_BASE__INST1_SEG2                       0
#define HDP_BASE__INST1_SEG3                       0
#define HDP_BASE__INST1_SEG4                       0

#define HDP_BASE__INST2_SEG0                       0
#define HDP_BASE__INST2_SEG1                       0
#define HDP_BASE__INST2_SEG2                       0
#define HDP_BASE__INST2_SEG3                       0
#define HDP_BASE__INST2_SEG4                       0

#define HDP_BASE__INST3_SEG0                       0
#define HDP_BASE__INST3_SEG1                       0
#define HDP_BASE__INST3_SEG2                       0
#define HDP_BASE__INST3_SEG3                       0
#define HDP_BASE__INST3_SEG4                       0

#define HDP_BASE__INST4_SEG0                       0
#define HDP_BASE__INST4_SEG1                       0
#define HDP_BASE__INST4_SEG2                       0
#define HDP_BASE__INST4_SEG3                       0
#define HDP_BASE__INST4_SEG4                       0

#define HDP_BASE__INST5_SEG0                       0
#define HDP_BASE__INST5_SEG1                       0
#define HDP_BASE__INST5_SEG2                       0
#define HDP_BASE__INST5_SEG3                       0
#define HDP_BASE__INST5_SEG4                       0

#define HDP_BASE__INST6_SEG0                       0
#define HDP_BASE__INST6_SEG1                       0
#define HDP_BASE__INST6_SEG2                       0
#define HDP_BASE__INST6_SEG3                       0
#define HDP_BASE__INST6_SEG4                       0

#define MMHUB_BASE__INST0_SEG0                     0x0001A000
#define MMHUB_BASE__INST0_SEG1                     0x02408800
#define MMHUB_BASE__INST0_SEG2                     0
#define MMHUB_BASE__INST0_SEG3                     0
#define MMHUB_BASE__INST0_SEG4                     0

#define MMHUB_BASE__INST1_SEG0                     0
#define MMHUB_BASE__INST1_SEG1                     0
#define MMHUB_BASE__INST1_SEG2                     0
#define MMHUB_BASE__INST1_SEG3                     0
#define MMHUB_BASE__INST1_SEG4                     0

#define MMHUB_BASE__INST2_SEG0                     0
#define MMHUB_BASE__INST2_SEG1                     0
#define MMHUB_BASE__INST2_SEG2                     0
#define MMHUB_BASE__INST2_SEG3                     0
#define MMHUB_BASE__INST2_SEG4                     0

#define MMHUB_BASE__INST3_SEG0                     0
#define MMHUB_BASE__INST3_SEG1                     0
#define MMHUB_BASE__INST3_SEG2                     0
#define MMHUB_BASE__INST3_SEG3                     0
#define MMHUB_BASE__INST3_SEG4                     0

#define MMHUB_BASE__INST4_SEG0                     0
#define MMHUB_BASE__INST4_SEG1                     0
#define MMHUB_BASE__INST4_SEG2                     0
#define MMHUB_BASE__INST4_SEG3                     0
#define MMHUB_BASE__INST4_SEG4                     0

#define MMHUB_BASE__INST5_SEG0                     0
#define MMHUB_BASE__INST5_SEG1                     0
#define MMHUB_BASE__INST5_SEG2                     0
#define MMHUB_BASE__INST5_SEG3                     0
#define MMHUB_BASE__INST5_SEG4                     0

#define MMHUB_BASE__INST6_SEG0                     0
#define MMHUB_BASE__INST6_SEG1                     0
#define MMHUB_BASE__INST6_SEG2                     0
#define MMHUB_BASE__INST6_SEG3                     0
#define MMHUB_BASE__INST6_SEG4                     0

#define MP0_BASE__INST0_SEG0                       0x00016000
#define MP0_BASE__INST0_SEG1                       0x00DC0000
#define MP0_BASE__INST0_SEG2                       0x00E00000
#define MP0_BASE__INST0_SEG3                       0x00E40000
#define MP0_BASE__INST0_SEG4                       0x0243FC00

#define MP0_BASE__INST1_SEG0                       0
#define MP0_BASE__INST1_SEG1                       0
#define MP0_BASE__INST1_SEG2                       0
#define MP0_BASE__INST1_SEG3                       0
#define MP0_BASE__INST1_SEG4                       0

#define MP0_BASE__INST2_SEG0                       0
#define MP0_BASE__INST2_SEG1                       0
#define MP0_BASE__INST2_SEG2                       0
#define MP0_BASE__INST2_SEG3                       0
#define MP0_BASE__INST2_SEG4                       0

#define MP0_BASE__INST3_SEG0                       0
#define MP0_BASE__INST3_SEG1                       0
#define MP0_BASE__INST3_SEG2                       0
#define MP0_BASE__INST3_SEG3                       0
#define MP0_BASE__INST3_SEG4                       0

#define MP0_BASE__INST4_SEG0                       0
#define MP0_BASE__INST4_SEG1                       0
#define MP0_BASE__INST4_SEG2                       0
#define MP0_BASE__INST4_SEG3                       0
#define MP0_BASE__INST4_SEG4                       0

#define MP0_BASE__INST5_SEG0                       0
#define MP0_BASE__INST5_SEG1                       0
#define MP0_BASE__INST5_SEG2                       0
#define MP0_BASE__INST5_SEG3                       0
#define MP0_BASE__INST5_SEG4                       0

#define MP0_BASE__INST6_SEG0                       0
#define MP0_BASE__INST6_SEG1                       0
#define MP0_BASE__INST6_SEG2                       0
#define MP0_BASE__INST6_SEG3                       0
#define MP0_BASE__INST6_SEG4                       0

#define MP1_BASE__INST0_SEG0                       0x00016200
#define MP1_BASE__INST0_SEG1                       0x00E80000
#define MP1_BASE__INST0_SEG2                       0x00EC0000
#define MP1_BASE__INST0_SEG3                       0x00F00000
#define MP1_BASE__INST0_SEG4                       0x02400400

#define MP1_BASE__INST1_SEG0                       0
#define MP1_BASE__INST1_SEG1                       0
#define MP1_BASE__INST1_SEG2                       0
#define MP1_BASE__INST1_SEG3                       0
#define MP1_BASE__INST1_SEG4                       0

#define MP1_BASE__INST2_SEG0                       0
#define MP1_BASE__INST2_SEG1                       0
#define MP1_BASE__INST2_SEG2                       0
#define MP1_BASE__INST2_SEG3                       0
#define MP1_BASE__INST2_SEG4                       0

#define MP1_BASE__INST3_SEG0                       0
#define MP1_BASE__INST3_SEG1                       0
#define MP1_BASE__INST3_SEG2                       0
#define MP1_BASE__INST3_SEG3                       0
#define MP1_BASE__INST3_SEG4                       0

#define MP1_BASE__INST4_SEG0                       0
#define MP1_BASE__INST4_SEG1                       0
#define MP1_BASE__INST4_SEG2                       0
#define MP1_BASE__INST4_SEG3                       0
#define MP1_BASE__INST4_SEG4                       0

#define MP1_BASE__INST5_SEG0                       0
#define MP1_BASE__INST5_SEG1                       0
#define MP1_BASE__INST5_SEG2                       0
#define MP1_BASE__INST5_SEG3                       0
#define MP1_BASE__INST5_SEG4                       0

#define MP1_BASE__INST6_SEG0                       0
#define MP1_BASE__INST6_SEG1                       0
#define MP1_BASE__INST6_SEG2                       0
#define MP1_BASE__INST6_SEG3                       0
#define MP1_BASE__INST6_SEG4                       0

#define NBIF0_BASE__INST0_SEG0                     0x00000000
#define NBIF0_BASE__INST0_SEG1                     0x00000014
#define NBIF0_BASE__INST0_SEG2                     0x00000D20
#define NBIF0_BASE__INST0_SEG3                     0x00010400
#define NBIF0_BASE__INST0_SEG4                     0x0241B000

#define NBIF0_BASE__INST1_SEG0                     0
#define NBIF0_BASE__INST1_SEG1                     0
#define NBIF0_BASE__INST1_SEG2                     0
#define NBIF0_BASE__INST1_SEG3                     0
#define NBIF0_BASE__INST1_SEG4                     0

#define NBIF0_BASE__INST2_SEG0                     0
#define NBIF0_BASE__INST2_SEG1                     0
#define NBIF0_BASE__INST2_SEG2                     0
#define NBIF0_BASE__INST2_SEG3                     0
#define NBIF0_BASE__INST2_SEG4                     0

#define NBIF0_BASE__INST3_SEG0                     0
#define NBIF0_BASE__INST3_SEG1                     0
#define NBIF0_BASE__INST3_SEG2                     0
#define NBIF0_BASE__INST3_SEG3                     0
#define NBIF0_BASE__INST3_SEG4                     0

#define NBIF0_BASE__INST4_SEG0                     0
#define NBIF0_BASE__INST4_SEG1                     0
#define NBIF0_BASE__INST4_SEG2                     0
#define NBIF0_BASE__INST4_SEG3                     0
#define NBIF0_BASE__INST4_SEG4                     0

#define NBIF0_BASE__INST5_SEG0                     0
#define NBIF0_BASE__INST5_SEG1                     0
#define NBIF0_BASE__INST5_SEG2                     0
#define NBIF0_BASE__INST5_SEG3                     0
#define NBIF0_BASE__INST5_SEG4                     0

#define NBIF0_BASE__INST6_SEG0                     0
#define NBIF0_BASE__INST6_SEG1                     0
#define NBIF0_BASE__INST6_SEG2                     0
#define NBIF0_BASE__INST6_SEG3                     0
#define NBIF0_BASE__INST6_SEG4                     0

#define OSSSYS_BASE__INST0_SEG0                    0x000010A0
#define OSSSYS_BASE__INST0_SEG1                    0x0240A000
#define OSSSYS_BASE__INST0_SEG2                    0
#define OSSSYS_BASE__INST0_SEG3                    0
#define OSSSYS_BASE__INST0_SEG4                    0

#define OSSSYS_BASE__INST1_SEG0                    0
#define OSSSYS_BASE__INST1_SEG1                    0
#define OSSSYS_BASE__INST1_SEG2                    0
#define OSSSYS_BASE__INST1_SEG3                    0
#define OSSSYS_BASE__INST1_SEG4                    0

#define OSSSYS_BASE__INST2_SEG0                    0
#define OSSSYS_BASE__INST2_SEG1                    0
#define OSSSYS_BASE__INST2_SEG2                    0
#define OSSSYS_BASE__INST2_SEG3                    0
#define OSSSYS_BASE__INST2_SEG4                    0

#define OSSSYS_BASE__INST3_SEG0                    0
#define OSSSYS_BASE__INST3_SEG1                    0
#define OSSSYS_BASE__INST3_SEG2                    0
#define OSSSYS_BASE__INST3_SEG3                    0
#define OSSSYS_BASE__INST3_SEG4                    0

#define OSSSYS_BASE__INST4_SEG0                    0
#define OSSSYS_BASE__INST4_SEG1                    0
#define OSSSYS_BASE__INST4_SEG2                    0
#define OSSSYS_BASE__INST4_SEG3                    0
#define OSSSYS_BASE__INST4_SEG4                    0

#define OSSSYS_BASE__INST5_SEG0                    0
#define OSSSYS_BASE__INST5_SEG1                    0
#define OSSSYS_BASE__INST5_SEG2                    0
#define OSSSYS_BASE__INST5_SEG3                    0
#define OSSSYS_BASE__INST5_SEG4                    0

#define OSSSYS_BASE__INST6_SEG0                    0
#define OSSSYS_BASE__INST6_SEG1                    0
#define OSSSYS_BASE__INST6_SEG2                    0
#define OSSSYS_BASE__INST6_SEG3                    0
#define OSSSYS_BASE__INST6_SEG4                    0

#define PCIE0_BASE__INST0_SEG0                     0x02411800
#define PCIE0_BASE__INST0_SEG1                     0x04440000
#define PCIE0_BASE__INST0_SEG2                     0
#define PCIE0_BASE__INST0_SEG3                     0
#define PCIE0_BASE__INST0_SEG4                     0

#define PCIE0_BASE__INST1_SEG0                     0
#define PCIE0_BASE__INST1_SEG1                     0
#define PCIE0_BASE__INST1_SEG2                     0
#define PCIE0_BASE__INST1_SEG3                     0
#define PCIE0_BASE__INST1_SEG4                     0

#define PCIE0_BASE__INST2_SEG0                     0
#define PCIE0_BASE__INST2_SEG1                     0
#define PCIE0_BASE__INST2_SEG2                     0
#define PCIE0_BASE__INST2_SEG3                     0
#define PCIE0_BASE__INST2_SEG4                     0

#define PCIE0_BASE__INST3_SEG0                     0
#define PCIE0_BASE__INST3_SEG1                     0
#define PCIE0_BASE__INST3_SEG2                     0
#define PCIE0_BASE__INST3_SEG3                     0
#define PCIE0_BASE__INST3_SEG4                     0

#define PCIE0_BASE__INST4_SEG0                     0
#define PCIE0_BASE__INST4_SEG1                     0
#define PCIE0_BASE__INST4_SEG2                     0
#define PCIE0_BASE__INST4_SEG3                     0
#define PCIE0_BASE__INST4_SEG4                     0

#define PCIE0_BASE__INST5_SEG0                     0
#define PCIE0_BASE__INST5_SEG1                     0
#define PCIE0_BASE__INST5_SEG2                     0
#define PCIE0_BASE__INST5_SEG3                     0
#define PCIE0_BASE__INST5_SEG4                     0

#define PCIE0_BASE__INST6_SEG0                     0
#define PCIE0_BASE__INST6_SEG1                     0
#define PCIE0_BASE__INST6_SEG2                     0
#define PCIE0_BASE__INST6_SEG3                     0
#define PCIE0_BASE__INST6_SEG4                     0

#define SDMA_BASE__INST0_SEG0                      0x00001260
#define SDMA_BASE__INST0_SEG1                      0x0000A000
#define SDMA_BASE__INST0_SEG2                      0x02402C00
#define SDMA_BASE__INST0_SEG3                      0
#define SDMA_BASE__INST0_SEG4                      0

#define SDMA_BASE__INST1_SEG0                      0x00001260
#define SDMA_BASE__INST1_SEG1                      0x0000A000
#define SDMA_BASE__INST1_SEG2                      0x02402C00
#define SDMA_BASE__INST1_SEG3                      0
#define SDMA_BASE__INST1_SEG4                      0

#define SDMA_BASE__INST2_SEG0                      0
#define SDMA_BASE__INST2_SEG1                      0
#define SDMA_BASE__INST2_SEG2                      0
#define SDMA_BASE__INST2_SEG3                      0
#define SDMA_BASE__INST2_SEG4                      0

#define SDMA_BASE__INST3_SEG0                      0
#define SDMA_BASE__INST3_SEG1                      0
#define SDMA_BASE__INST3_SEG2                      0
#define SDMA_BASE__INST3_SEG3                      0
#define SDMA_BASE__INST3_SEG4                      0

#define SDMA_BASE__INST4_SEG0                      0
#define SDMA_BASE__INST4_SEG1                      0
#define SDMA_BASE__INST4_SEG2                      0
#define SDMA_BASE__INST4_SEG3                      0
#define SDMA_BASE__INST4_SEG4                      0

#define SDMA_BASE__INST5_SEG0                      0
#define SDMA_BASE__INST5_SEG1                      0
#define SDMA_BASE__INST5_SEG2                      0
#define SDMA_BASE__INST5_SEG3                      0
#define SDMA_BASE__INST5_SEG4                      0

#define SDMA_BASE__INST6_SEG0                      0
#define SDMA_BASE__INST6_SEG1                      0
#define SDMA_BASE__INST6_SEG2                      0
#define SDMA_BASE__INST6_SEG3                      0
#define SDMA_BASE__INST6_SEG4                      0

#define SMUIO_BASE__INST0_SEG0                     0x00016800
#define SMUIO_BASE__INST0_SEG1                     0x00016A00
#define SMUIO_BASE__INST0_SEG2                     0x00440000
#define SMUIO_BASE__INST0_SEG3                     0x02401000
#define SMUIO_BASE__INST0_SEG4                     0

#define SMUIO_BASE__INST1_SEG0                     0
#define SMUIO_BASE__INST1_SEG1                     0
#define SMUIO_BASE__INST1_SEG2                     0
#define SMUIO_BASE__INST1_SEG3                     0
#define SMUIO_BASE__INST1_SEG4                     0

#define SMUIO_BASE__INST2_SEG0                     0
#define SMUIO_BASE__INST2_SEG1                     0
#define SMUIO_BASE__INST2_SEG2                     0
#define SMUIO_BASE__INST2_SEG3                     0
#define SMUIO_BASE__INST2_SEG4                     0

#define SMUIO_BASE__INST3_SEG0                     0
#define SMUIO_BASE__INST3_SEG1                     0
#define SMUIO_BASE__INST3_SEG2                     0
#define SMUIO_BASE__INST3_SEG3                     0
#define SMUIO_BASE__INST3_SEG4                     0

#define SMUIO_BASE__INST4_SEG0                     0
#define SMUIO_BASE__INST4_SEG1                     0
#define SMUIO_BASE__INST4_SEG2                     0
#define SMUIO_BASE__INST4_SEG3                     0
#define SMUIO_BASE__INST4_SEG4                     0

#define SMUIO_BASE__INST5_SEG0                     0
#define SMUIO_BASE__INST5_SEG1                     0
#define SMUIO_BASE__INST5_SEG2                     0
#define SMUIO_BASE__INST5_SEG3                     0
#define SMUIO_BASE__INST5_SEG4                     0

#define SMUIO_BASE__INST6_SEG0                     0
#define SMUIO_BASE__INST6_SEG1                     0
#define SMUIO_BASE__INST6_SEG2                     0
#define SMUIO_BASE__INST6_SEG3                     0
#define SMUIO_BASE__INST6_SEG4                     0

#define THM_BASE__INST0_SEG0                       0x00016600
#define THM_BASE__INST0_SEG1                       0x02400C00
#define THM_BASE__INST0_SEG2                       0
#define THM_BASE__INST0_SEG3                       0
#define THM_BASE__INST0_SEG4                       0

#define THM_BASE__INST1_SEG0                       0
#define THM_BASE__INST1_SEG1                       0
#define THM_BASE__INST1_SEG2                       0
#define THM_BASE__INST1_SEG3                       0
#define THM_BASE__INST1_SEG4                       0

#define THM_BASE__INST2_SEG0                       0
#define THM_BASE__INST2_SEG1                       0
#define THM_BASE__INST2_SEG2                       0
#define THM_BASE__INST2_SEG3                       0
#define THM_BASE__INST2_SEG4                       0

#define THM_BASE__INST3_SEG0                       0
#define THM_BASE__INST3_SEG1                       0
#define THM_BASE__INST3_SEG2                       0
#define THM_BASE__INST3_SEG3                       0
#define THM_BASE__INST3_SEG4                       0

#define THM_BASE__INST4_SEG0                       0
#define THM_BASE__INST4_SEG1                       0
#define THM_BASE__INST4_SEG2                       0
#define THM_BASE__INST4_SEG3                       0
#define THM_BASE__INST4_SEG4                       0

#define THM_BASE__INST5_SEG0                       0
#define THM_BASE__INST5_SEG1                       0
#define THM_BASE__INST5_SEG2                       0
#define THM_BASE__INST5_SEG3                       0
#define THM_BASE__INST5_SEG4                       0

#define THM_BASE__INST6_SEG0                       0
#define THM_BASE__INST6_SEG1                       0
#define THM_BASE__INST6_SEG2                       0
#define THM_BASE__INST6_SEG3                       0
#define THM_BASE__INST6_SEG4                       0

#define UMC_BASE__INST0_SEG0                       0x00014000
#define UMC_BASE__INST0_SEG1                       0x02425800
#define UMC_BASE__INST0_SEG2                       0
#define UMC_BASE__INST0_SEG3                       0
#define UMC_BASE__INST0_SEG4                       0

#define UMC_BASE__INST1_SEG0                       0x00054000
#define UMC_BASE__INST1_SEG1                       0x02425C00
#define UMC_BASE__INST1_SEG2                       0
#define UMC_BASE__INST1_SEG3                       0
#define UMC_BASE__INST1_SEG4                       0

#define UMC_BASE__INST2_SEG0                       0x00094000
#define UMC_BASE__INST2_SEG1                       0x02426000
#define UMC_BASE__INST2_SEG2                       0
#define UMC_BASE__INST2_SEG3                       0
#define UMC_BASE__INST2_SEG4                       0

#define UMC_BASE__INST3_SEG0                       0x000D4000
#define UMC_BASE__INST3_SEG1                       0x02426400
#define UMC_BASE__INST3_SEG2                       0
#define UMC_BASE__INST3_SEG3                       0
#define UMC_BASE__INST3_SEG4                       0

#define UMC_BASE__INST4_SEG0                       0
#define UMC_BASE__INST4_SEG1                       0
#define UMC_BASE__INST4_SEG2                       0
#define UMC_BASE__INST4_SEG3                       0
#define UMC_BASE__INST4_SEG4                       0

#define UMC_BASE__INST5_SEG0                       0
#define UMC_BASE__INST5_SEG1                       0
#define UMC_BASE__INST5_SEG2                       0
#define UMC_BASE__INST5_SEG3                       0
#define UMC_BASE__INST5_SEG4                       0

#define UMC_BASE__INST6_SEG0                       0
#define UMC_BASE__INST6_SEG1                       0
#define UMC_BASE__INST6_SEG2                       0
#define UMC_BASE__INST6_SEG3                       0
#define UMC_BASE__INST6_SEG4                       0

#define USB0_BASE__INST0_SEG0                      0x0242A800
#define USB0_BASE__INST0_SEG1                      0x05B00000
#define USB0_BASE__INST0_SEG2                      0
#define USB0_BASE__INST0_SEG3                      0
#define USB0_BASE__INST0_SEG4                      0

#define USB0_BASE__INST1_SEG0                      0
#define USB0_BASE__INST1_SEG1                      0
#define USB0_BASE__INST1_SEG2                      0
#define USB0_BASE__INST1_SEG3                      0
#define USB0_BASE__INST1_SEG4                      0

#define USB0_BASE__INST2_SEG0                      0
#define USB0_BASE__INST2_SEG1                      0
#define USB0_BASE__INST2_SEG2                      0
#define USB0_BASE__INST2_SEG3                      0
#define USB0_BASE__INST2_SEG4                      0

#define USB0_BASE__INST3_SEG0                      0
#define USB0_BASE__INST3_SEG1                      0
#define USB0_BASE__INST3_SEG2                      0
#define USB0_BASE__INST3_SEG3                      0
#define USB0_BASE__INST3_SEG4                      0

#define USB0_BASE__INST4_SEG0                      0
#define USB0_BASE__INST4_SEG1                      0
#define USB0_BASE__INST4_SEG2                      0
#define USB0_BASE__INST4_SEG3                      0
#define USB0_BASE__INST4_SEG4                      0

#define USB0_BASE__INST5_SEG0                      0
#define USB0_BASE__INST5_SEG1                      0
#define USB0_BASE__INST5_SEG2                      0
#define USB0_BASE__INST5_SEG3                      0
#define USB0_BASE__INST5_SEG4                      0

#define USB0_BASE__INST6_SEG0                      0
#define USB0_BASE__INST6_SEG1                      0
#define USB0_BASE__INST6_SEG2                      0
#define USB0_BASE__INST6_SEG3                      0
#define USB0_BASE__INST6_SEG4                      0

#define UVD0_BASE__INST0_SEG0                      0x00007800
#define UVD0_BASE__INST0_SEG1                      0x00007E00
#define UVD0_BASE__INST0_SEG2                      0x02403000
#define UVD0_BASE__INST0_SEG3                      0
#define UVD0_BASE__INST0_SEG4                      0

#define UVD0_BASE__INST1_SEG0                      0
#define UVD0_BASE__INST1_SEG1                      0
#define UVD0_BASE__INST1_SEG2                      0
#define UVD0_BASE__INST1_SEG3                      0
#define UVD0_BASE__INST1_SEG4                      0

#define UVD0_BASE__INST2_SEG0                      0
#define UVD0_BASE__INST2_SEG1                      0
#define UVD0_BASE__INST2_SEG2                      0
#define UVD0_BASE__INST2_SEG3                      0
#define UVD0_BASE__INST2_SEG4                      0

#define UVD0_BASE__INST3_SEG0                      0
#define UVD0_BASE__INST3_SEG1                      0
#define UVD0_BASE__INST3_SEG2                      0
#define UVD0_BASE__INST3_SEG3                      0
#define UVD0_BASE__INST3_SEG4                      0

#define UVD0_BASE__INST4_SEG0                      0
#define UVD0_BASE__INST4_SEG1                      0
#define UVD0_BASE__INST4_SEG2                      0
#define UVD0_BASE__INST4_SEG3                      0
#define UVD0_BASE__INST4_SEG4                      0

#define UVD0_BASE__INST5_SEG0                      0
#define UVD0_BASE__INST5_SEG1                      0
#define UVD0_BASE__INST5_SEG2                      0
#define UVD0_BASE__INST5_SEG3                      0
#define UVD0_BASE__INST5_SEG4                      0

#define UVD0_BASE__INST6_SEG0                      0
#define UVD0_BASE__INST6_SEG1                      0
#define UVD0_BASE__INST6_SEG2                      0
#define UVD0_BASE__INST6_SEG3                      0
#define UVD0_BASE__INST6_SEG4                      0

#endif
/*
 * Copyright (C) 2019  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#ifndef _navi10_ip_offset_HEADER
#define _navi10_ip_offset_HEADER

#define MAX_INSTANCE                                       6
#define MAX_SEGMENT                                        6


struct IP_BASE_INSTANCE {
	unsigned int segment[MAX_SEGMENT];
};
 
struct IP_BASE {
	struct IP_BASE_INSTANCE instance[MAX_INSTANCE];
} __maybe_unused;


static const struct IP_BASE ATHUB_BASE            ={ { { { 0x00000C00, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE CLK_BASE            ={ { { { 0x00016C00, 0x00016E00, 0x00017000, 0x00017200, 0x00017E00, 0x0001B000 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DF_BASE            ={ { { { 0x00007000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE DCN_BASE            ={ { { { 0x00000012, 0x000000C0, 0x000034C0, 0x00009000, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE FUSE_BASE            ={ { { { 0x00017400, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE GC_BASE            ={ { { { 0x00001260, 0x0000A000, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE HDP_BASE            ={ { { { 0x00000F20, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MMHUB_BASE            ={ { { { 0x0001A000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP0_BASE            ={ { { { 0x00016000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE MP1_BASE            ={ { { { 0x00016000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE NBIO_BASE            ={ { { { 0x00000000, 0x00000014, 0x00000D20, 0x00010400, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE OSSSYS_BASE            ={ { { { 0x000010A0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE RSMU_BASE			= { { { { 0x00012000, 0, 0, 0, 0, 0 } },
					{ { 0, 0, 0, 0, 0, 0 } },
					{ { 0, 0, 0, 0, 0, 0 } },
					{ { 0, 0, 0, 0, 0, 0 } },
					{ { 0, 0, 0, 0, 0, 0 } },
					{ { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE SMUIO_BASE            ={ { { { 0x00016800, 0x00016A00, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE THM_BASE            ={ { { { 0x00016600, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE UMC_BASE            ={ { { { 0x00014000, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };
static const struct IP_BASE VCN_BASE            ={ { { { 0x00007800, 0x00007E00, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } },
                                        { { 0, 0, 0, 0, 0, 0 } } } };


#define ATHUB_BASE__INST0_SEG0                     0x00000C00
#define ATHUB_BASE__INST0_SEG1                     0
#define ATHUB_BASE__INST0_SEG2                     0
#define ATHUB_BASE__INST0_SEG3                     0
#define ATHUB_BASE__INST0_SEG4                     0
#define ATHUB_BASE__INST0_SEG5                     0

#define ATHUB_BASE__INST1_SEG0                     0
#define ATHUB_BASE__INST1_SEG1                     0
#define ATHUB_BASE__INST1_SEG2                     0
#define ATHUB_BASE__INST1_SEG3                     0
#define ATHUB_BASE__INST1_SEG4                     0
#define ATHUB_BASE__INST1_SEG5                     0

#define ATHUB_BASE__INST2_SEG0                     0
#define ATHUB_BASE__INST2_SEG1                     0
#define ATHUB_BASE__INST2_SEG2                     0
#define ATHUB_BASE__INST2_SEG3                     0
#define ATHUB_BASE__INST2_SEG4                     0
#define ATHUB_BASE__INST2_SEG5                     0

#define ATHUB_BASE__INST3_SEG0                     0
#define ATHUB_BASE__INST3_SEG1                     0
#define ATHUB_BASE__INST3_SEG2                     0
#define ATHUB_BASE__INST3_SEG3                     0
#define ATHUB_BASE__INST3_SEG4                     0
#define ATHUB_BASE__INST3_SEG5                     0

#define ATHUB_BASE__INST4_SEG0                     0
#define ATHUB_BASE__INST4_SEG1                     0
#define ATHUB_BASE__INST4_SEG2                     0
#define ATHUB_BASE__INST4_SEG3                     0
#define ATHUB_BASE__INST4_SEG4                     0
#define ATHUB_BASE__INST4_SEG5                     0

#define ATHUB_BASE__INST5_SEG0                     0
#define ATHUB_BASE__INST5_SEG1                     0
#define ATHUB_BASE__INST5_SEG2                     0
#define ATHUB_BASE__INST5_SEG3                     0
#define ATHUB_BASE__INST5_SEG4                     0
#define ATHUB_BASE__INST5_SEG5                     0

#define CLK_BASE__INST0_SEG0                       0x00016C00
#define CLK_BASE__INST0_SEG1                       0x00016E00
#define CLK_BASE__INST0_SEG2                       0x00017000
#define CLK_BASE__INST0_SEG3                       0x00017200
#define CLK_BASE__INST0_SEG4                       0x00017E00
#define CLK_BASE__INST0_SEG5                       0x0001B000

#define CLK_BASE__INST1_SEG0                       0
#define CLK_BASE__INST1_SEG1                       0
#define CLK_BASE__INST1_SEG2                       0
#define CLK_BASE__INST1_SEG3                       0
#define CLK_BASE__INST1_SEG4                       0
#define CLK_BASE__INST1_SEG5                       0

#define CLK_BASE__INST2_SEG0                       0
#define CLK_BASE__INST2_SEG1                       0
#define CLK_BASE__INST2_SEG2                       0
#define CLK_BASE__INST2_SEG3                       0
#define CLK_BASE__INST2_SEG4                       0
#define CLK_BASE__INST2_SEG5                       0

#define CLK_BASE__INST3_SEG0                       0
#define CLK_BASE__INST3_SEG1                       0
#define CLK_BASE__INST3_SEG2                       0
#define CLK_BASE__INST3_SEG3                       0
#define CLK_BASE__INST3_SEG4                       0
#define CLK_BASE__INST3_SEG5                       0

#define CLK_BASE__INST4_SEG0                       0
#define CLK_BASE__INST4_SEG1                       0
#define CLK_BASE__INST4_SEG2                       0
#define CLK_BASE__INST4_SEG3                       0
#define CLK_BASE__INST4_SEG4                       0
#define CLK_BASE__INST4_SEG5                       0

#define CLK_BASE__INST5_SEG0                       0
#define CLK_BASE__INST5_SEG1                       0
#define CLK_BASE__INST5_SEG2                       0
#define CLK_BASE__INST5_SEG3                       0
#define CLK_BASE__INST5_SEG4                       0
#define CLK_BASE__INST5_SEG5                       0

#define DF_BASE__INST0_SEG0                        0x00007000
#define DF_BASE__INST0_SEG1                        0
#define DF_BASE__INST0_SEG2                        0
#define DF_BASE__INST0_SEG3                        0
#define DF_BASE__INST0_SEG4                        0
#define DF_BASE__INST0_SEG5                        0

#define DF_BASE__INST1_SEG0                        0
#define DF_BASE__INST1_SEG1                        0
#define DF_BASE__INST1_SEG2                        0
#define DF_BASE__INST1_SEG3                        0
#define DF_BASE__INST1_SEG4                        0
#define DF_BASE__INST1_SEG5                        0

#define DF_BASE__INST2_SEG0                        0
#define DF_BASE__INST2_SEG1                        0
#define DF_BASE__INST2_SEG2                        0
#define DF_BASE__INST2_SEG3                        0
#define DF_BASE__INST2_SEG4                        0
#define DF_BASE__INST2_SEG5                        0

#define DF_BASE__INST3_SEG0                        0
#define DF_BASE__INST3_SEG1                        0
#define DF_BASE__INST3_SEG2                        0
#define DF_BASE__INST3_SEG3                        0
#define DF_BASE__INST3_SEG4                        0
#define DF_BASE__INST3_SEG5                        0

#define DF_BASE__INST4_SEG0                        0
#define DF_BASE__INST4_SEG1                        0
#define DF_BASE__INST4_SEG2                        0
#define DF_BASE__INST4_SEG3                        0
#define DF_BASE__INST4_SEG4                        0
#define DF_BASE__INST4_SEG5                        0

#define DF_BASE__INST5_SEG0                        0
#define DF_BASE__INST5_SEG1                        0
#define DF_BASE__INST5_SEG2                        0
#define DF_BASE__INST5_SEG3                        0
#define DF_BASE__INST5_SEG4                        0
#define DF_BASE__INST5_SEG5                        0

#define DCN_BASE__INST0_SEG0                       0x00000012
#define DCN_BASE__INST0_SEG1                       0x000000C0
#define DCN_BASE__INST0_SEG2                       0x000034C0
#define DCN_BASE__INST0_SEG3                       0x00009000
#define DCN_BASE__INST0_SEG4                       0
#define DCN_BASE__INST0_SEG5                       0

#define DCN_BASE__INST1_SEG0                       0
#define DCN_BASE__INST1_SEG1                       0
#define DCN_BASE__INST1_SEG2                       0
#define DCN_BASE__INST1_SEG3                       0
#define DCN_BASE__INST1_SEG4                       0
#define DCN_BASE__INST1_SEG5                       0

#define DCN_BASE__INST2_SEG0                       0
#define DCN_BASE__INST2_SEG1                       0
#define DCN_BASE__INST2_SEG2                       0
#define DCN_BASE__INST2_SEG3                       0
#define DCN_BASE__INST2_SEG4                       0
#define DCN_BASE__INST2_SEG5                       0

#define DCN_BASE__INST3_SEG0                       0
#define DCN_BASE__INST3_SEG1                       0
#define DCN_BASE__INST3_SEG2                       0
#define DCN_BASE__INST3_SEG3                       0
#define DCN_BASE__INST3_SEG4                       0
#define DCN_BASE__INST3_SEG5                       0

#define DCN_BASE__INST4_SEG0                       0
#define DCN_BASE__INST4_SEG1                       0
#define DCN_BASE__INST4_SEG2                       0
#define DCN_BASE__INST4_SEG3                       0
#define DCN_BASE__INST4_SEG4                       0
#define DCN_BASE__INST4_SEG5                       0

#define DCN_BASE__INST5_SEG0                       0
#define DCN_BASE__INST5_SEG1                       0
#define DCN_BASE__INST5_SEG2                       0
#define DCN_BASE__INST5_SEG3                       0
#define DCN_BASE__INST5_SEG4                       0
#define DCN_BASE__INST5_SEG5                       0

#define FUSE_BASE__INST0_SEG0                      0x00017400
#define FUSE_BASE__INST0_SEG1                      0
#define FUSE_BASE__INST0_SEG2                      0
#define FUSE_BASE__INST0_SEG3                      0
#define FUSE_BASE__INST0_SEG4                      0
#define FUSE_BASE__INST0_SEG5                      0

#define FUSE_BASE__INST1_SEG0                      0
#define FUSE_BASE__INST1_SEG1                      0
#define FUSE_BASE__INST1_SEG2                      0
#define FUSE_BASE__INST1_SEG3                      0
#define FUSE_BASE__INST1_SEG4                      0
#define FUSE_BASE__INST1_SEG5                      0

#define FUSE_BASE__INST2_SEG0                      0
#define FUSE_BASE__INST2_SEG1                      0
#define FUSE_BASE__INST2_SEG2                      0
#define FUSE_BASE__INST2_SEG3                      0
#define FUSE_BASE__INST2_SEG4                      0
#define FUSE_BASE__INST2_SEG5                      0

#define FUSE_BASE__INST3_SEG0                      0
#define FUSE_BASE__INST3_SEG1                      0
#define FUSE_BASE__INST3_SEG2                      0
#define FUSE_BASE__INST3_SEG3                      0
#define FUSE_BASE__INST3_SEG4                      0
#define FUSE_BASE__INST3_SEG5                      0

#define FUSE_BASE__INST4_SEG0                      0
#define FUSE_BASE__INST4_SEG1                      0
#define FUSE_BASE__INST4_SEG2                      0
#define FUSE_BASE__INST4_SEG3                      0
#define FUSE_BASE__INST4_SEG4                      0
#define FUSE_BASE__INST4_SEG5                      0

#define FUSE_BASE__INST5_SEG0                      0
#define FUSE_BASE__INST5_SEG1                      0
#define FUSE_BASE__INST5_SEG2                      0
#define FUSE_BASE__INST5_SEG3                      0
#define FUSE_BASE__INST5_SEG4                      0
#define FUSE_BASE__INST5_SEG5                      0

#define GC_BASE__INST0_SEG0                        0x00001260
#define GC_BASE__INST0_SEG1                        0x0000A000
#define GC_BASE__INST0_SEG2                        0
#define GC_BASE__INST0_SEG3                        0
#define GC_BASE__INST0_SEG4                        0
#define GC_BASE__INST0_SEG5                        0

#define GC_BASE__INST1_SEG0                        0
#define GC_BASE__INST1_SEG1                        0
#define GC_BASE__INST1_SEG2                        0
#define GC_BASE__INST1_SEG3                        0
#define GC_BASE__INST1_SEG4                        0
#define GC_BASE__INST1_SEG5                        0

#define GC_BASE__INST2_SEG0                        0
#define GC_BASE__INST2_SEG1                        0
#define GC_BASE__INST2_SEG2                        0
#define GC_BASE__INST2_SEG3                        0
#define GC_BASE__INST2_SEG4                        0
#define GC_BASE__INST2_SEG5                        0

#define GC_BASE__INST3_SEG0                        0
#define GC_BASE__INST3_SEG1                        0
#define GC_BASE__INST3_SEG2                        0
#define GC_BASE__INST3_SEG3                        0
#define GC_BASE__INST3_SEG4                        0
#define GC_BASE__INST3_SEG5                        0

#define GC_BASE__INST4_SEG0                        0
#define GC_BASE__INST4_SEG1                        0
#define GC_BASE__INST4_SEG2                        0
#define GC_BASE__INST4_SEG3                        0
#define GC_BASE__INST4_SEG4                        0
#define GC_BASE__INST4_SEG5                        0

#define GC_BASE__INST5_SEG0                        0
#define GC_BASE__INST5_SEG1                        0
#define GC_BASE__INST5_SEG2                        0
#define GC_BASE__INST5_SEG3                        0
#define GC_BASE__INST5_SEG4                        0
#define GC_BASE__INST5_SEG5                        0

#define HDP_BASE__INST0_SEG0                       0x00000F20
#define HDP_BASE__INST0_SEG1                       0
#define HDP_BASE__INST0_SEG2                       0
#define HDP_BASE__INST0_SEG3                       0
#define HDP_BASE__INST0_SEG4                       0
#define HDP_BASE__INST0_SEG5                       0

#define HDP_BASE__INST1_SEG0                       0
#define HDP_BASE__INST1_SEG1                       0
#define HDP_BASE__INST1_SEG2                       0
#define HDP_BASE__INST1_SEG3                       0
#define HDP_BASE__INST1_SEG4                       0
#define HDP_BASE__INST1_SEG5                       0

#define HDP_BASE__INST2_SEG0                       0
#define HDP_BASE__INST2_SEG1                       0
#define HDP_BASE__INST2_SEG2                       0
#define HDP_BASE__INST2_SEG3                       0
#define HDP_BASE__INST2_SEG4                       0
#define HDP_BASE__INST2_SEG5                       0

#define HDP_BASE__INST3_SEG0                       0
#define HDP_BASE__INST3_SEG1                       0
#define HDP_BASE__INST3_SEG2                       0
#define HDP_BASE__INST3_SEG3                       0
#define HDP_BASE__INST3_SEG4                       0
#define HDP_BASE__INST3_SEG5                       0

#define HDP_BASE__INST4_SEG0                       0
#define HDP_BASE__INST4_SEG1                       0
#define HDP_BASE__INST4_SEG2                       0
#define HDP_BASE__INST4_SEG3                       0
#define HDP_BASE__INST4_SEG4                       0
#define HDP_BASE__INST4_SEG5                       0

#define HDP_BASE__INST5_SEG0                       0
#define HDP_BASE__INST5_SEG1                       0
#define HDP_BASE__INST5_SEG2                       0
#define HDP_BASE__INST5_SEG3                       0
#define HDP_BASE__INST5_SEG4                       0
#define HDP_BASE__INST5_SEG5                       0

#define MMHUB_BASE__INST0_SEG0                     0x0001A000
#define MMHUB_BASE__INST0_SEG1                     0
#define MMHUB_BASE__INST0_SEG2                     0
#define MMHUB_BASE__INST0_SEG3                     0
#define MMHUB_BASE__INST0_SEG4                     0
#define MMHUB_BASE__INST0_SEG5                     0

#define MMHUB_BASE__INST1_SEG0                     0
#define MMHUB_BASE__INST1_SEG1                     0
#define MMHUB_BASE__INST1_SEG2                     0
#define MMHUB_BASE__INST1_SEG3                     0
#define MMHUB_BASE__INST1_SEG4                     0
#define MMHUB_BASE__INST1_SEG5                     0

#define MMHUB_BASE__INST2_SEG0                     0
#define MMHUB_BASE__INST2_SEG1                     0
#define MMHUB_BASE__INST2_SEG2                     0
#define MMHUB_BASE__INST2_SEG3                     0
#define MMHUB_BASE__INST2_SEG4                     0
#define MMHUB_BASE__INST2_SEG5                     0

#define MMHUB_BASE__INST3_SEG0                     0
#define MMHUB_BASE__INST3_SEG1                     0
#define MMHUB_BASE__INST3_SEG2                     0
#define MMHUB_BASE__INST3_SEG3                     0
#define MMHUB_BASE__INST3_SEG4                     0
#define MMHUB_BASE__INST3_SEG5                     0

#define MMHUB_BASE__INST4_SEG0                     0
#define MMHUB_BASE__INST4_SEG1                     0
#define MMHUB_BASE__INST4_SEG2                     0
#define MMHUB_BASE__INST4_SEG3                     0
#define MMHUB_BASE__INST4_SEG4                     0
#define MMHUB_BASE__INST4_SEG5                     0

#define MMHUB_BASE__INST5_SEG0                     0
#define MMHUB_BASE__INST5_SEG1                     0
#define MMHUB_BASE__INST5_SEG2                     0
#define MMHUB_BASE__INST5_SEG3                     0
#define MMHUB_BASE__INST5_SEG4                     0
#define MMHUB_BASE__INST5_SEG5                     0

#define MP0_BASE__INST0_SEG0                       0x00016000
#define MP0_BASE__INST0_SEG1                       0
#define MP0_BASE__INST0_SEG2                       0
#define MP0_BASE__INST0_SEG3                       0
#define MP0_BASE__INST0_SEG4                       0
#define MP0_BASE__INST0_SEG5                       0

#define MP0_BASE__INST1_SEG0                       0
#define MP0_BASE__INST1_SEG1                       0
#define MP0_BASE__INST1_SEG2                       0
#define MP0_BASE__INST1_SEG3                       0
#define MP0_BASE__INST1_SEG4                       0
#define MP0_BASE__INST1_SEG5                       0

#define MP0_BASE__INST2_SEG0                       0
#define MP0_BASE__INST2_SEG1                       0
#define MP0_BASE__INST2_SEG2                       0
#define MP0_BASE__INST2_SEG3                       0
#define MP0_BASE__INST2_SEG4                       0
#define MP0_BASE__INST2_SEG5                       0

#define MP0_BASE__INST3_SEG0                       0
#define MP0_BASE__INST3_SEG1                       0
#define MP0_BASE__INST3_SEG2                       0
#define MP0_BASE__INST3_SEG3                       0
#define MP0_BASE__INST3_SEG4                       0
#define MP0_BASE__INST3_SEG5                       0

#define MP0_BASE__INST4_SEG0                       0
#define MP0_BASE__INST4_SEG1                       0
#define MP0_BASE__INST4_SEG2                       0
#define MP0_BASE__INST4_SEG3                       0
#define MP0_BASE__INST4_SEG4                       0
#define MP0_BASE__INST4_SEG5                       0

#define MP0_BASE__INST5_SEG0                       0
#define MP0_BASE__INST5_SEG1                       0
#define MP0_BASE__INST5_SEG2                       0
#define MP0_BASE__INST5_SEG3                       0
#define MP0_BASE__INST5_SEG4                       0
#define MP0_BASE__INST5_SEG5                       0

#define MP1_BASE__INST0_SEG0                       0x00016000
#define MP1_BASE__INST0_SEG1                       0
#define MP1_BASE__INST0_SEG2                       0
#define MP1_BASE__INST0_SEG3                       0
#define MP1_BASE__INST0_SEG4                       0
#define MP1_BASE__INST0_SEG5                       0

#define MP1_BASE__INST1_SEG0                       0
#define MP1_BASE__INST1_SEG1                       0
#define MP1_BASE__INST1_SEG2                       0
#define MP1_BASE__INST1_SEG3                       0
#define MP1_BASE__INST1_SEG4                       0
#define MP1_BASE__INST1_SEG5                       0

#define MP1_BASE__INST2_SEG0                       0
#define MP1_BASE__INST2_SEG1                       0
#define MP1_BASE__INST2_SEG2                       0
#define MP1_BASE__INST2_SEG3                       0
#define MP1_BASE__INST2_SEG4                       0
#define MP1_BASE__INST2_SEG5                       0

#define MP1_BASE__INST3_SEG0                       0
#define MP1_BASE__INST3_SEG1                       0
#define MP1_BASE__INST3_SEG2                       0
#define MP1_BASE__INST3_SEG3                       0
#define MP1_BASE__INST3_SEG4                       0
#define MP1_BASE__INST3_SEG5                       0

#define MP1_BASE__INST4_SEG0                       0
#define MP1_BASE__INST4_SEG1                       0
#define MP1_BASE__INST4_SEG2                       0
#define MP1_BASE__INST4_SEG3                       0
#define MP1_BASE__INST4_SEG4                       0
#define MP1_BASE__INST4_SEG5                       0

#define MP1_BASE__INST5_SEG0                       0
#define MP1_BASE__INST5_SEG1                       0
#define MP1_BASE__INST5_SEG2                       0
#define MP1_BASE__INST5_SEG3                       0
#define MP1_BASE__INST5_SEG4                       0
#define MP1_BASE__INST5_SEG5                       0

#define NBIO_BASE__INST0_SEG0                      0x00000000
#define NBIO_BASE__INST0_SEG1                      0x00000014
#define NBIO_BASE__INST0_SEG2                      0x00000D20
#define NBIO_BASE__INST0_SEG3                      0x00010400
#define NBIO_BASE__INST0_SEG4                      0
#define NBIO_BASE__INST0_SEG5                      0

#define NBIO_BASE__INST1_SEG0                      0
#define NBIO_BASE__INST1_SEG1                      0
#define NBIO_BASE__INST1_SEG2                      0
#define NBIO_BASE__INST1_SEG3                      0
#define NBIO_BASE__INST1_SEG4                      0
#define NBIO_BASE__INST1_SEG5                      0

#define NBIO_BASE__INST2_SEG0                      0
#define NBIO_BASE__INST2_SEG1                      0
#define NBIO_BASE__INST2_SEG2                      0
#define NBIO_BASE__INST2_SEG3                      0
#define NBIO_BASE__INST2_SEG4                      0
#define NBIO_BASE__INST2_SEG5                      0

#define NBIO_BASE__INST3_SEG0                      0
#define NBIO_BASE__INST3_SEG1                      0
#define NBIO_BASE__INST3_SEG2                      0
#define NBIO_BASE__INST3_SEG3                      0
#define NBIO_BASE__INST3_SEG4                      0
#define NBIO_BASE__INST3_SEG5                      0

#define NBIO_BASE__INST4_SEG0                      0
#define NBIO_BASE__INST4_SEG1                      0
#define NBIO_BASE__INST4_SEG2                      0
#define NBIO_BASE__INST4_SEG3                      0
#define NBIO_BASE__INST4_SEG4                      0
#define NBIO_BASE__INST4_SEG5                      0

#define NBIO_BASE__INST5_SEG0                      0
#define NBIO_BASE__INST5_SEG1                      0
#define NBIO_BASE__INST5_SEG2                      0
#define NBIO_BASE__INST5_SEG3                      0
#define NBIO_BASE__INST5_SEG4                      0
#define NBIO_BASE__INST5_SEG5                      0

#define OSSSYS_BASE__INST0_SEG0                    0x000010A0
#define OSSSYS_BASE__INST0_SEG1                    0
#define OSSSYS_BASE__INST0_SEG2                    0
#define OSSSYS_BASE__INST0_SEG3                    0
#define OSSSYS_BASE__INST0_SEG4                    0
#define OSSSYS_BASE__INST0_SEG5                    0

#define OSSSYS_BASE__INST1_SEG0                    0
#define OSSSYS_BASE__INST1_SEG1                    0
#define OSSSYS_BASE__INST1_SEG2                    0
#define OSSSYS_BASE__INST1_SEG3                    0
#define OSSSYS_BASE__INST1_SEG4                    0
#define OSSSYS_BASE__INST1_SEG5                    0

#define OSSSYS_BASE__INST2_SEG0                    0
#define OSSSYS_BASE__INST2_SEG1                    0
#define OSSSYS_BASE__INST2_SEG2                    0
#define OSSSYS_BASE__INST2_SEG3                    0
#define OSSSYS_BASE__INST2_SEG4                    0
#define OSSSYS_BASE__INST2_SEG5                    0

#define OSSSYS_BASE__INST3_SEG0                    0
#define OSSSYS_BASE__INST3_SEG1                    0
#define OSSSYS_BASE__INST3_SEG2                    0
#define OSSSYS_BASE__INST3_SEG3                    0
#define OSSSYS_BASE__INST3_SEG4                    0
#define OSSSYS_BASE__INST3_SEG5                    0

#define OSSSYS_BASE__INST4_SEG0                    0
#define OSSSYS_BASE__INST4_SEG1                    0
#define OSSSYS_BASE__INST4_SEG2                    0
#define OSSSYS_BASE__INST4_SEG3                    0
#define OSSSYS_BASE__INST4_SEG4                    0
#define OSSSYS_BASE__INST4_SEG5                    0

#define OSSSYS_BASE__INST5_SEG0                    0
#define OSSSYS_BASE__INST5_SEG1                    0
#define OSSSYS_BASE__INST5_SEG2                    0
#define OSSSYS_BASE__INST5_SEG3                    0
#define OSSSYS_BASE__INST5_SEG4                    0
#define OSSSYS_BASE__INST5_SEG5                    0

#define RSMU_BASE__INST0_SEG0                      0x00012000
#define RSMU_BASE__INST0_SEG1                      0
#define RSMU_BASE__INST0_SEG2                      0
#define RSMU_BASE__INST0_SEG3                      0
#define RSMU_BASE__INST0_SEG4                      0
#define RSMU_BASE__INST0_SEG5                      0

#define RSMU_BASE__INST1_SEG0                      0
#define RSMU_BASE__INST1_SEG1                      0
#define RSMU_BASE__INST1_SEG2                      0
#define RSMU_BASE__INST1_SEG3                      0
#define RSMU_BASE__INST1_SEG4                      0
#define RSMU_BASE__INST1_SEG5                      0

#define RSMU_BASE__INST2_SEG0                      0
#define RSMU_BASE__INST2_SEG1                      0
#define RSMU_BASE__INST2_SEG2                      0
#define RSMU_BASE__INST2_SEG3                      0
#define RSMU_BASE__INST2_SEG4                      0
#define RSMU_BASE__INST2_SEG5                      0

#define RSMU_BASE__INST3_SEG0                      0
#define RSMU_BASE__INST3_SEG1                      0
#define RSMU_BASE__INST3_SEG2                      0
#define RSMU_BASE__INST3_SEG3                      0
#define RSMU_BASE__INST3_SEG4                      0
#define RSMU_BASE__INST3_SEG5                      0

#define RSMU_BASE__INST4_SEG0                      0
#define RSMU_BASE__INST4_SEG1                      0
#define RSMU_BASE__INST4_SEG2                      0
#define RSMU_BASE__INST4_SEG3                      0
#define RSMU_BASE__INST4_SEG4                      0
#define RSMU_BASE__INST4_SEG5                      0

#define RSMU_BASE__INST5_SEG0                      0
#define RSMU_BASE__INST5_SEG1                      0
#define RSMU_BASE__INST5_SEG2                      0
#define RSMU_BASE__INST5_SEG3                      0
#define RSMU_BASE__INST5_SEG4                      0
#define RSMU_BASE__INST5_SEG5                      0

#define SMUIO_BASE__INST0_SEG0                     0x00016800
#define SMUIO_BASE__INST0_SEG1                     0x00016A00
#define SMUIO_BASE__INST0_SEG2                     0
#define SMUIO_BASE__INST0_SEG3                     0
#define SMUIO_BASE__INST0_SEG4                     0
#define SMUIO_BASE__INST0_SEG5                     0

#define SMUIO_BASE__INST1_SEG0                     0
#define SMUIO_BASE__INST1_SEG1                     0
#define SMUIO_BASE__INST1_SEG2                     0
#define SMUIO_BASE__INST1_SEG3                     0
#define SMUIO_BASE__INST1_SEG4                     0
#define SMUIO_BASE__INST1_SEG5                     0

#define SMUIO_BASE__INST2_SEG0                     0
#define SMUIO_BASE__INST2_SEG1                     0
#define SMUIO_BASE__INST2_SEG2                     0
#define SMUIO_BASE__INST2_SEG3                     0
#define SMUIO_BASE__INST2_SEG4                     0
#define SMUIO_BASE__INST2_SEG5                     0

#define SMUIO_BASE__INST3_SEG0                     0
#define SMUIO_BASE__INST3_SEG1                     0
#define SMUIO_BASE__INST3_SEG2                     0
#define SMUIO_BASE__INST3_SEG3                     0
#define SMUIO_BASE__INST3_SEG4                     0
#define SMUIO_BASE__INST3_SEG5                     0

#define SMUIO_BASE__INST4_SEG0                     0
#define SMUIO_BASE__INST4_SEG1                     0
#define SMUIO_BASE__INST4_SEG2                     0
#define SMUIO_BASE__INST4_SEG3                     0
#define SMUIO_BASE__INST4_SEG4                     0
#define SMUIO_BASE__INST4_SEG5                     0

#define SMUIO_BASE__INST5_SEG0                     0
#define SMUIO_BASE__INST5_SEG1                     0
#define SMUIO_BASE__INST5_SEG2                     0
#define SMUIO_BASE__INST5_SEG3                     0
#define SMUIO_BASE__INST5_SEG4                     0
#define SMUIO_BASE__INST5_SEG5                     0

#define THM_BASE__INST0_SEG0                       0x00016600
#define THM_BASE__INST0_SEG1                       0
#define THM_BASE__INST0_SEG2                       0
#define THM_BASE__INST0_SEG3                       0
#define THM_BASE__INST0_SEG4                       0
#define THM_BASE__INST0_SEG5                       0

#define THM_BASE__INST1_SEG0                       0
#define THM_BASE__INST1_SEG1                       0
#define THM_BASE__INST1_SEG2                       0
#define THM_BASE__INST1_SEG3                       0
#define THM_BASE__INST1_SEG4                       0
#define THM_BASE__INST1_SEG5                       0

#define THM_BASE__INST2_SEG0                       0
#define THM_BASE__INST2_SEG1                       0
#define THM_BASE__INST2_SEG2                       0
#define THM_BASE__INST2_SEG3                       0
#define THM_BASE__INST2_SEG4                       0
#define THM_BASE__INST2_SEG5                       0

#define THM_BASE__INST3_SEG0                       0
#define THM_BASE__INST3_SEG1                       0
#define THM_BASE__INST3_SEG2                       0
#define THM_BASE__INST3_SEG3                       0
#define THM_BASE__INST3_SEG4                       0
#define THM_BASE__INST3_SEG5                       0

#define THM_BASE__INST4_SEG0                       0
#define THM_BASE__INST4_SEG1                       0
#define THM_BASE__INST4_SEG2                       0
#define THM_BASE__INST4_SEG3                       0
#define THM_BASE__INST4_SEG4                       0
#define THM_BASE__INST4_SEG5                       0

#define THM_BASE__INST5_SEG0                       0
#define THM_BASE__INST5_SEG1                       0
#define THM_BASE__INST5_SEG2                       0
#define THM_BASE__INST5_SEG3                       0
#define THM_BASE__INST5_SEG4                       0
#define THM_BASE__INST5_SEG5                       0

#define UMC_BASE__INST0_SEG0                       0x00014000
#define UMC_BASE__INST0_SEG1                       0
#define UMC_BASE__INST0_SEG2                       0
#define UMC_BASE__INST0_SEG3                       0
#define UMC_BASE__INST0_SEG4                       0
#define UMC_BASE__INST0_SEG5                       0

#define UMC_BASE__INST1_SEG0                       0
#define UMC_BASE__INST1_SEG1                       0
#define UMC_BASE__INST1_SEG2                       0
#define UMC_BASE__INST1_SEG3                       0
#define UMC_BASE__INST1_SEG4                       0
#define UMC_BASE__INST1_SEG5                       0

#define UMC_BASE__INST2_SEG0                       0
#define UMC_BASE__INST2_SEG1                       0
#define UMC_BASE__INST2_SEG2                       0
#define UMC_BASE__INST2_SEG3                       0
#define UMC_BASE__INST2_SEG4                       0
#define UMC_BASE__INST2_SEG5                       0

#define UMC_BASE__INST3_SEG0                       0
#define UMC_BASE__INST3_SEG1                       0
#define UMC_BASE__INST3_SEG2                       0
#define UMC_BASE__INST3_SEG3                       0
#define UMC_BASE__INST3_SEG4                       0
#define UMC_BASE__INST3_SEG5                       0

#define UMC_BASE__INST4_SEG0                       0
#define UMC_BASE__INST4_SEG1                       0
#define UMC_BASE__INST4_SEG2                       0
#define UMC_BASE__INST4_SEG3                       0
#define UMC_BASE__INST4_SEG4                       0
#define UMC_BASE__INST4_SEG5                       0

#define UMC_BASE__INST5_SEG0                       0
#define UMC_BASE__INST5_SEG1                       0
#define UMC_BASE__INST5_SEG2                       0
#define UMC_BASE__INST5_SEG3                       0
#define UMC_BASE__INST5_SEG4                       0
#define UMC_BASE__INST5_SEG5                       0

#define VCN_BASE__INST0_SEG0                       0x00007800
#define VCN_BASE__INST0_SEG1                       0x00007E00
#define VCN_BASE__INST0_SEG2                       0
#define VCN_BASE__INST0_SEG3                       0
#define VCN_BASE__INST0_SEG4                       0
#define VCN_BASE__INST0_SEG5                       0

#define VCN_BASE__INST1_SEG0                       0
#define VCN_BASE__INST1_SEG1                       0
#define VCN_BASE__INST1_SEG2                       0
#define VCN_BASE__INST1_SEG3                       0
#define VCN_BASE__INST1_SEG4                       0
#define VCN_BASE__INST1_SEG5                       0

#define VCN_BASE__INST2_SEG0                       0
#define VCN_BASE__INST2_SEG1                       0
#define VCN_BASE__INST2_SEG2                       0
#define VCN_BASE__INST2_SEG3                       0
#define VCN_BASE__INST2_SEG4                       0
#define VCN_BASE__INST2_SEG5                       0

#define VCN_BASE__INST3_SEG0                       0
#define VCN_BASE__INST3_SEG1                       0
#define VCN_BASE__INST3_SEG2                       0
#define VCN_BASE__INST3_SEG3                       0
#define VCN_BASE__INST3_SEG4                       0
#define VCN_BASE__INST3_SEG5                       0

#define VCN_BASE__INST4_SEG0                       0
#define VCN_BASE__INST4_SEG1                       0
#define VCN_BASE__INST4_SEG2                       0
#define VCN_BASE__INST4_SEG3                       0
#define VCN_BASE__INST4_SEG4                       0
#define VCN_BASE__INST4_SEG5                       0

#define VCN_BASE__INST5_SEG0                       0
#define VCN_BASE__INST5_SEG1                       0
#define VCN_BASE__INST5_SEG2                       0
#define VCN_BASE__INST5_SEG3                       0
#define VCN_BASE__INST5_SEG4                       0
#define VCN_BASE__INST5_SEG5                       0

#endif
/*
 * Copyright (C) 2019  Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#if !defined (_navi10_ENUM_HEADER)
#define _navi10_ENUM_HEADER

#ifndef _DRIVER_BUILD
#ifndef GL_ZERO
#define GL__ZERO                      BLEND_ZERO
#define GL__ONE                       BLEND_ONE
#define GL__SRC_COLOR                 BLEND_SRC_COLOR
#define GL__ONE_MINUS_SRC_COLOR       BLEND_ONE_MINUS_SRC_COLOR
#define GL__DST_COLOR                 BLEND_DST_COLOR
#define GL__ONE_MINUS_DST_COLOR       BLEND_ONE_MINUS_DST_COLOR
#define GL__SRC_ALPHA                 BLEND_SRC_ALPHA
#define GL__ONE_MINUS_SRC_ALPHA       BLEND_ONE_MINUS_SRC_ALPHA
#define GL__DST_ALPHA                 BLEND_DST_ALPHA
#define GL__ONE_MINUS_DST_ALPHA       BLEND_ONE_MINUS_DST_ALPHA
#define GL__SRC_ALPHA_SATURATE        BLEND_SRC_ALPHA_SATURATE
#define GL__CONSTANT_COLOR            BLEND_CONSTANT_COLOR
#define GL__ONE_MINUS_CONSTANT_COLOR  BLEND_ONE_MINUS_CONSTANT_COLOR
#define GL__CONSTANT_ALPHA            BLEND_CONSTANT_ALPHA
#define GL__ONE_MINUS_CONSTANT_ALPHA  BLEND_ONE_MINUS_CONSTANT_ALPHA
#endif
#endif

/*******************************************************
 * GDS DATA_TYPE Enums
 *******************************************************/

#ifndef ENUMS_GDS_PERFCOUNT_SELECT_H
#define ENUMS_GDS_PERFCOUNT_SELECT_H
typedef enum GDS_PERFCOUNT_SELECT {
 GDS_PERF_SEL_DS_ADDR_CONFL = 0,
 GDS_PERF_SEL_DS_BANK_CONFL = 1,
 GDS_PERF_SEL_WBUF_FLUSH = 2,
 GDS_PERF_SEL_WR_COMP = 3,
 GDS_PERF_SEL_WBUF_WR = 4,
 GDS_PERF_SEL_RBUF_HIT = 5,
 GDS_PERF_SEL_RBUF_MISS = 6,
 GDS_PERF_SEL_SE0_SH0_NORET = 7,
 GDS_PERF_SEL_SE0_SH0_RET = 8,
 GDS_PERF_SEL_SE0_SH0_ORD_CNT = 9,
 GDS_PERF_SEL_SE0_SH0_2COMP_REQ = 10,
 GDS_PERF_SEL_SE0_SH0_ORD_WAVE_VALID = 11,
 GDS_PERF_SEL_SE0_SH0_GDS_DATA_VALID = 12,
 GDS_PERF_SEL_SE0_SH0_GDS_STALL_BY_ORD = 13,
 GDS_PERF_SEL_SE0_SH0_GDS_WR_OP = 14,
 GDS_PERF_SEL_SE0_SH0_GDS_RD_OP = 15,
 GDS_PERF_SEL_SE0_SH0_GDS_ATOM_OP = 16,
 GDS_PERF_SEL_SE0_SH0_GDS_REL_OP = 17,
 GDS_PERF_SEL_SE0_SH0_GDS_CMPXCH_OP = 18,
 GDS_PERF_SEL_SE0_SH0_GDS_BYTE_OP = 19,
 GDS_PERF_SEL_SE0_SH0_GDS_SHORT_OP = 20,
 GDS_PERF_SEL_SE0_SH1_NORET = 21,
 GDS_PERF_SEL_SE0_SH1_RET = 22,
 GDS_PERF_SEL_SE0_SH1_ORD_CNT = 23,
 GDS_PERF_SEL_SE0_SH1_2COMP_REQ = 24,
 GDS_PERF_SEL_SE0_SH1_ORD_WAVE_VALID = 25,
 GDS_PERF_SEL_SE0_SH1_GDS_DATA_VALID = 26,
 GDS_PERF_SEL_SE0_SH1_GDS_STALL_BY_ORD = 27,
 GDS_PERF_SEL_SE0_SH1_GDS_WR_OP = 28,
 GDS_PERF_SEL_SE0_SH1_GDS_RD_OP = 29,
 GDS_PERF_SEL_SE0_SH1_GDS_ATOM_OP = 30,
 GDS_PERF_SEL_SE0_SH1_GDS_REL_OP = 31,
 GDS_PERF_SEL_SE0_SH1_GDS_CMPXCH_OP = 32,
 GDS_PERF_SEL_SE0_SH1_GDS_BYTE_OP = 33,
 GDS_PERF_SEL_SE0_SH1_GDS_SHORT_OP = 34,
 GDS_PERF_SEL_SE1_SH0_NORET = 35,
 GDS_PERF_SEL_SE1_SH0_RET = 36,
 GDS_PERF_SEL_SE1_SH0_ORD_CNT = 37,
 GDS_PERF_SEL_SE1_SH0_2COMP_REQ = 38,
 GDS_PERF_SEL_SE1_SH0_ORD_WAVE_VALID = 39,
 GDS_PERF_SEL_SE1_SH0_GDS_DATA_VALID = 40,
 GDS_PERF_SEL_SE1_SH0_GDS_STALL_BY_ORD = 41,
 GDS_PERF_SEL_SE1_SH0_GDS_WR_OP = 42,
 GDS_PERF_SEL_SE1_SH0_GDS_RD_OP = 43,
 GDS_PERF_SEL_SE1_SH0_GDS_ATOM_OP = 44,
 GDS_PERF_SEL_SE1_SH0_GDS_REL_OP = 45,
 GDS_PERF_SEL_SE1_SH0_GDS_CMPXCH_OP = 46,
 GDS_PERF_SEL_SE1_SH0_GDS_BYTE_OP = 47,
 GDS_PERF_SEL_SE1_SH0_GDS_SHORT_OP = 48,
 GDS_PERF_SEL_SE1_SH1_NORET = 49,
 GDS_PERF_SEL_SE1_SH1_RET = 50,
 GDS_PERF_SEL_SE1_SH1_ORD_CNT = 51,
 GDS_PERF_SEL_SE1_SH1_2COMP_REQ = 52,
 GDS_PERF_SEL_SE1_SH1_ORD_WAVE_VALID = 53,
 GDS_PERF_SEL_SE1_SH1_GDS_DATA_VALID = 54,
 GDS_PERF_SEL_SE1_SH1_GDS_STALL_BY_ORD = 55,
 GDS_PERF_SEL_SE1_SH1_GDS_WR_OP = 56,
 GDS_PERF_SEL_SE1_SH1_GDS_RD_OP = 57,
 GDS_PERF_SEL_SE1_SH1_GDS_ATOM_OP = 58,
 GDS_PERF_SEL_SE1_SH1_GDS_REL_OP = 59,
 GDS_PERF_SEL_SE1_SH1_GDS_CMPXCH_OP = 60,
 GDS_PERF_SEL_SE1_SH1_GDS_BYTE_OP = 61,
 GDS_PERF_SEL_SE1_SH1_GDS_SHORT_OP = 62,
 GDS_PERF_SEL_SE2_SH0_NORET = 63,
 GDS_PERF_SEL_SE2_SH0_RET = 64,
 GDS_PERF_SEL_SE2_SH0_ORD_CNT = 65,
 GDS_PERF_SEL_SE2_SH0_2COMP_REQ = 66,
 GDS_PERF_SEL_SE2_SH0_ORD_WAVE_VALID = 67,
 GDS_PERF_SEL_SE2_SH0_GDS_DATA_VALID = 68,
 GDS_PERF_SEL_SE2_SH0_GDS_STALL_BY_ORD = 69,
 GDS_PERF_SEL_SE2_SH0_GDS_WR_OP = 70,
 GDS_PERF_SEL_SE2_SH0_GDS_RD_OP = 71,
 GDS_PERF_SEL_SE2_SH0_GDS_ATOM_OP = 72,
 GDS_PERF_SEL_SE2_SH0_GDS_REL_OP = 73,
 GDS_PERF_SEL_SE2_SH0_GDS_CMPXCH_OP = 74,
 GDS_PERF_SEL_SE2_SH0_GDS_BYTE_OP = 75,
 GDS_PERF_SEL_SE2_SH0_GDS_SHORT_OP = 76,
 GDS_PERF_SEL_SE2_SH1_NORET = 77,
 GDS_PERF_SEL_SE2_SH1_RET = 78,
 GDS_PERF_SEL_SE2_SH1_ORD_CNT = 79,
 GDS_PERF_SEL_SE2_SH1_2COMP_REQ = 80,
 GDS_PERF_SEL_SE2_SH1_ORD_WAVE_VALID = 81,
 GDS_PERF_SEL_SE2_SH1_GDS_DATA_VALID = 82,
 GDS_PERF_SEL_SE2_SH1_GDS_STALL_BY_ORD = 83,
 GDS_PERF_SEL_SE2_SH1_GDS_WR_OP = 84,
 GDS_PERF_SEL_SE2_SH1_GDS_RD_OP = 85,
 GDS_PERF_SEL_SE2_SH1_GDS_ATOM_OP = 86,
 GDS_PERF_SEL_SE2_SH1_GDS_REL_OP = 87,
 GDS_PERF_SEL_SE2_SH1_GDS_CMPXCH_OP = 88,
 GDS_PERF_SEL_SE2_SH1_GDS_BYTE_OP = 89,
 GDS_PERF_SEL_SE2_SH1_GDS_SHORT_OP = 90,
 GDS_PERF_SEL_SE3_SH0_NORET = 91,
 GDS_PERF_SEL_SE3_SH0_RET = 92,
 GDS_PERF_SEL_SE3_SH0_ORD_CNT = 93,
 GDS_PERF_SEL_SE3_SH0_2COMP_REQ = 94,
 GDS_PERF_SEL_SE3_SH0_ORD_WAVE_VALID = 95,
 GDS_PERF_SEL_SE3_SH0_GDS_DATA_VALID = 96,
 GDS_PERF_SEL_SE3_SH0_GDS_STALL_BY_ORD = 97,
 GDS_PERF_SEL_SE3_SH0_GDS_WR_OP = 98,
 GDS_PERF_SEL_SE3_SH0_GDS_RD_OP = 99,
 GDS_PERF_SEL_SE3_SH0_GDS_ATOM_OP = 100,
 GDS_PERF_SEL_SE3_SH0_GDS_REL_OP = 101,
 GDS_PERF_SEL_SE3_SH0_GDS_CMPXCH_OP = 102,
 GDS_PERF_SEL_SE3_SH0_GDS_BYTE_OP = 103,
 GDS_PERF_SEL_SE3_SH0_GDS_SHORT_OP = 104,
 GDS_PERF_SEL_SE3_SH1_NORET = 105,
 GDS_PERF_SEL_SE3_SH1_RET = 106,
 GDS_PERF_SEL_SE3_SH1_ORD_CNT = 107,
 GDS_PERF_SEL_SE3_SH1_2COMP_REQ = 108,
 GDS_PERF_SEL_SE3_SH1_ORD_WAVE_VALID = 109,
 GDS_PERF_SEL_SE3_SH1_GDS_DATA_VALID = 110,
 GDS_PERF_SEL_SE3_SH1_GDS_STALL_BY_ORD = 111,
 GDS_PERF_SEL_SE3_SH1_GDS_WR_OP = 112,
 GDS_PERF_SEL_SE3_SH1_GDS_RD_OP = 113,
 GDS_PERF_SEL_SE3_SH1_GDS_ATOM_OP = 114,
 GDS_PERF_SEL_SE3_SH1_GDS_REL_OP = 115,
 GDS_PERF_SEL_SE3_SH1_GDS_CMPXCH_OP = 116,
 GDS_PERF_SEL_SE3_SH1_GDS_BYTE_OP = 117,
 GDS_PERF_SEL_SE3_SH1_GDS_SHORT_OP = 118,
 GDS_PERF_SEL_GWS_RELEASED = 119,
 GDS_PERF_SEL_GWS_BYPASS = 120,
} GDS_PERFCOUNT_SELECT;
#endif /*ENUMS_GDS_PERFCOUNT_SELECT_H*/

/*******************************************************
 * Chip Enums
 *******************************************************/

/*
 * GATCL1RequestType enum
 */

typedef enum GATCL1RequestType {
GATCL1_TYPE_NORMAL                       = 0x00000000,
GATCL1_TYPE_SHOOTDOWN                    = 0x00000001,
GATCL1_TYPE_BYPASS                       = 0x00000002,
} GATCL1RequestType;

/*
 * UTCL1RequestType enum
 */

typedef enum UTCL1RequestType {
UTCL1_TYPE_NORMAL                        = 0x00000000,
UTCL1_TYPE_SHOOTDOWN                     = 0x00000001,
UTCL1_TYPE_BYPASS                        = 0x00000002,
} UTCL1RequestType;

/*
 * UTCL1FaultType enum
 */

typedef enum UTCL1FaultType {
UTCL1_XNACK_SUCCESS                      = 0x00000000,
UTCL1_XNACK_RETRY                        = 0x00000001,
UTCL1_XNACK_PRT                          = 0x00000002,
UTCL1_XNACK_NO_RETRY                     = 0x00000003,
} UTCL1FaultType;

/*
 * UTCL0RequestType enum
 */

typedef enum UTCL0RequestType {
UTCL0_TYPE_NORMAL                        = 0x00000000,
UTCL0_TYPE_SHOOTDOWN                     = 0x00000001,
UTCL0_TYPE_BYPASS                        = 0x00000002,
} UTCL0RequestType;

/*
 * UTCL0FaultType enum
 */

typedef enum UTCL0FaultType {
UTCL0_XNACK_SUCCESS                      = 0x00000000,
UTCL0_XNACK_RETRY                        = 0x00000001,
UTCL0_XNACK_PRT                          = 0x00000002,
UTCL0_XNACK_NO_RETRY                     = 0x00000003,
} UTCL0FaultType;

/*
 * VMEMCMD_RETURN_ORDER enum
 */

typedef enum VMEMCMD_RETURN_ORDER {
VMEMCMD_RETURN_OUT_OF_ORDER              = 0x00000000,
VMEMCMD_RETURN_IN_ORDER                  = 0x00000001,
VMEMCMD_RETURN_IN_ORDER_READ             = 0x00000002,
} VMEMCMD_RETURN_ORDER;

/*
 * GL0V_CACHE_POLICIES enum
 */

typedef enum GL0V_CACHE_POLICIES {
GL0V_CACHE_POLICY_MISS_LRU               = 0x00000000,
GL0V_CACHE_POLICY_MISS_EVICT             = 0x00000001,
GL0V_CACHE_POLICY_HIT_LRU                = 0x00000002,
GL0V_CACHE_POLICY_HIT_EVICT              = 0x00000003,
} GL0V_CACHE_POLICIES;

/*
 * GL1_CACHE_POLICIES enum
 */

typedef enum GL1_CACHE_POLICIES {
GL1_CACHE_POLICY_MISS_LRU                = 0x00000000,
GL1_CACHE_POLICY_MISS_EVICT              = 0x00000001,
GL1_CACHE_POLICY_HIT_LRU                 = 0x00000002,
GL1_CACHE_POLICY_HIT_EVICT               = 0x00000003,
} GL1_CACHE_POLICIES;

/*
 * GL1_CACHE_STORE_POLICIES enum
 */

typedef enum GL1_CACHE_STORE_POLICIES {
GL1_CACHE_STORE_POLICY_BYPASS            = 0x00000000,
} GL1_CACHE_STORE_POLICIES;

/*
 * TCC_CACHE_POLICIES enum
 */

typedef enum TCC_CACHE_POLICIES {
TCC_CACHE_POLICY_LRU                     = 0x00000000,
TCC_CACHE_POLICY_STREAM                  = 0x00000001,
} TCC_CACHE_POLICIES;

/*
 * TCC_MTYPE enum
 */

typedef enum TCC_MTYPE {
MTYPE_NC                                 = 0x00000000,
MTYPE_WC                                 = 0x00000001,
MTYPE_CC                                 = 0x00000002,
} TCC_MTYPE;

/*
 * GL2_CACHE_POLICIES enum
 */

typedef enum GL2_CACHE_POLICIES {
GL2_CACHE_POLICY_LRU                     = 0x00000000,
GL2_CACHE_POLICY_STREAM                  = 0x00000001,
GL2_CACHE_POLICY_NOA                     = 0x00000002,
GL2_CACHE_POLICY_BYPASS                  = 0x00000003,
} GL2_CACHE_POLICIES;

/*
 * MTYPE enum
 */

typedef enum MTYPE {
MTYPE_C_RW_US                            = 0x00000000,
MTYPE_RESERVED_1                         = 0x00000001,
MTYPE_C_RO_S                             = 0x00000002,
MTYPE_UC                                 = 0x00000003,
MTYPE_C_RW_S                             = 0x00000004,
MTYPE_RESERVED_5                         = 0x00000005,
MTYPE_C_RO_US                            = 0x00000006,
MTYPE_RESERVED_7                         = 0x00000007,
} MTYPE;

/*
 * RMI_CID enum
 */

typedef enum RMI_CID {
RMI_CID_CC                               = 0x00000000,
RMI_CID_FC                               = 0x00000001,
RMI_CID_CM                               = 0x00000002,
RMI_CID_DC                               = 0x00000003,
RMI_CID_Z                                = 0x00000004,
RMI_CID_S                                = 0x00000005,
RMI_CID_TILE                             = 0x00000006,
RMI_CID_ZPCPSD                           = 0x00000007,
} RMI_CID;

/*
 * WritePolicy enum
 */

typedef enum WritePolicy {
CACHE_LRU_WR                             = 0x00000000,
CACHE_STREAM                             = 0x00000001,
CACHE_BYPASS                             = 0x00000002,
UNCACHED_WR                              = 0x00000003,
} WritePolicy;

/*
 * ReadPolicy enum
 */

typedef enum ReadPolicy {
CACHE_LRU_RD                             = 0x00000000,
CACHE_NOA                                = 0x00000001,
UNCACHED_RD                              = 0x00000002,
RESERVED_RDPOLICY                        = 0x00000003,
} ReadPolicy;

/*
 * PERFMON_COUNTER_MODE enum
 */

typedef enum PERFMON_COUNTER_MODE {
PERFMON_COUNTER_MODE_ACCUM               = 0x00000000,
PERFMON_COUNTER_MODE_ACTIVE_CYCLES       = 0x00000001,
PERFMON_COUNTER_MODE_MAX                 = 0x00000002,
PERFMON_COUNTER_MODE_DIRTY               = 0x00000003,
PERFMON_COUNTER_MODE_SAMPLE              = 0x00000004,
PERFMON_COUNTER_MODE_CYCLES_SINCE_FIRST_EVENT  = 0x00000005,
PERFMON_COUNTER_MODE_CYCLES_SINCE_LAST_EVENT  = 0x00000006,
PERFMON_COUNTER_MODE_CYCLES_GE_HI        = 0x00000007,
PERFMON_COUNTER_MODE_CYCLES_EQ_HI        = 0x00000008,
PERFMON_COUNTER_MODE_INACTIVE_CYCLES     = 0x00000009,
PERFMON_COUNTER_MODE_RESERVED            = 0x0000000f,
} PERFMON_COUNTER_MODE;

/*
 * PERFMON_SPM_MODE enum
 */

typedef enum PERFMON_SPM_MODE {
PERFMON_SPM_MODE_OFF                     = 0x00000000,
PERFMON_SPM_MODE_16BIT_CLAMP             = 0x00000001,
PERFMON_SPM_MODE_16BIT_NO_CLAMP          = 0x00000002,
PERFMON_SPM_MODE_32BIT_CLAMP             = 0x00000003,
PERFMON_SPM_MODE_32BIT_NO_CLAMP          = 0x00000004,
PERFMON_SPM_MODE_RESERVED_5              = 0x00000005,
PERFMON_SPM_MODE_RESERVED_6              = 0x00000006,
PERFMON_SPM_MODE_RESERVED_7              = 0x00000007,
PERFMON_SPM_MODE_TEST_MODE_0             = 0x00000008,
PERFMON_SPM_MODE_TEST_MODE_1             = 0x00000009,
PERFMON_SPM_MODE_TEST_MODE_2             = 0x0000000a,
} PERFMON_SPM_MODE;

/*
 * SurfaceTiling enum
 */

typedef enum SurfaceTiling {
ARRAY_LINEAR                             = 0x00000000,
ARRAY_TILED                              = 0x00000001,
} SurfaceTiling;

/*
 * SurfaceArray enum
 */

typedef enum SurfaceArray {
ARRAY_1D                                 = 0x00000000,
ARRAY_2D                                 = 0x00000001,
ARRAY_3D                                 = 0x00000002,
ARRAY_3D_SLICE                           = 0x00000003,
} SurfaceArray;

/*
 * ColorArray enum
 */

typedef enum ColorArray {
ARRAY_2D_ALT_COLOR                       = 0x00000000,
ARRAY_2D_COLOR                           = 0x00000001,
ARRAY_3D_SLICE_COLOR                     = 0x00000003,
} ColorArray;

/*
 * DepthArray enum
 */

typedef enum DepthArray {
ARRAY_2D_ALT_DEPTH                       = 0x00000000,
ARRAY_2D_DEPTH                           = 0x00000001,
} DepthArray;

/*
 * ENUM_NUM_SIMD_PER_CU enum
 */

typedef enum ENUM_NUM_SIMD_PER_CU {
NUM_SIMD_PER_CU                          = 0x00000002,
} ENUM_NUM_SIMD_PER_CU;

/*
 * DSM_ENABLE_ERROR_INJECT enum
 */

typedef enum DSM_ENABLE_ERROR_INJECT {
DSM_ENABLE_ERROR_INJECT_FED_IN           = 0x00000000,
DSM_ENABLE_ERROR_INJECT_SINGLE           = 0x00000001,
DSM_ENABLE_ERROR_INJECT_UNCORRECTABLE    = 0x00000002,
DSM_ENABLE_ERROR_INJECT_UNCORRECTABLE_LIMITED  = 0x00000003,
} DSM_ENABLE_ERROR_INJECT;

/*
 * DSM_SELECT_INJECT_DELAY enum
 */

typedef enum DSM_SELECT_INJECT_DELAY {
DSM_SELECT_INJECT_DELAY_NO_DELAY         = 0x00000000,
DSM_SELECT_INJECT_DELAY_DELAY_ERROR      = 0x00000001,
} DSM_SELECT_INJECT_DELAY;

/*
 * DSM_DATA_SEL enum
 */

typedef enum DSM_DATA_SEL {
DSM_DATA_SEL_DISABLE                     = 0x00000000,
DSM_DATA_SEL_0                           = 0x00000001,
DSM_DATA_SEL_1                           = 0x00000002,
DSM_DATA_SEL_BOTH                        = 0x00000003,
} DSM_DATA_SEL;

/*
 * DSM_SINGLE_WRITE enum
 */

typedef enum DSM_SINGLE_WRITE {
DSM_SINGLE_WRITE_DIS                     = 0x00000000,
DSM_SINGLE_WRITE_EN                      = 0x00000001,
} DSM_SINGLE_WRITE;

/*
 * Hdp_SurfaceEndian enum
 */

typedef enum Hdp_SurfaceEndian {
HDP_ENDIAN_NONE                          = 0x00000000,
HDP_ENDIAN_8IN16                         = 0x00000001,
HDP_ENDIAN_8IN32                         = 0x00000002,
HDP_ENDIAN_8IN64                         = 0x00000003,
} Hdp_SurfaceEndian;

/*******************************************************
 * CNVC_CFG Enums
 *******************************************************/

/*
 * CNVC_ENABLE enum
 */

typedef enum CNVC_ENABLE {
CNVC_DIS                                 = 0x00000000,
CNVC_EN                                  = 0x00000001,
} CNVC_ENABLE;

/*
 * CNVC_BYPASS enum
 */

typedef enum CNVC_BYPASS {
CNVC_BYPASS_DISABLE                      = 0x00000000,
CNVC_BYPASS_EN                           = 0x00000001,
} CNVC_BYPASS;

/*
 * CNVC_PENDING enum
 */

typedef enum CNVC_PENDING {
CNVC_NOT_PENDING                         = 0x00000000,
CNVC_YES_PENDING                         = 0x00000001,
} CNVC_PENDING;

/*
 * DENORM_TRUNCATE enum
 */

typedef enum DENORM_TRUNCATE {
CNVC_ROUND                               = 0x00000000,
CNVC_TRUNCATE                            = 0x00000001,
} DENORM_TRUNCATE;

/*
 * PIX_EXPAND_MODE enum
 */

typedef enum PIX_EXPAND_MODE {
PIX_DYNAMIC_EXPANSION                    = 0x00000000,
PIX_ZERO_EXPANSION                       = 0x00000001,
} PIX_EXPAND_MODE;

/*
 * SURFACE_PIXEL_FORMAT enum
 */

typedef enum SURFACE_PIXEL_FORMAT {
ARGB1555                                 = 0x00000001,
RGBA5551                                 = 0x00000002,
RGB565                                   = 0x00000003,
BGR565                                   = 0x00000004,
ARGB4444                                 = 0x00000005,
RGBA4444                                 = 0x00000006,
ARGB8888                                 = 0x00000008,
RGBA8888                                 = 0x00000009,
ARGB2101010                              = 0x0000000a,
RGBA1010102                              = 0x0000000b,
AYCrCb8888                               = 0x0000000c,
YCrCbA8888                               = 0x0000000d,
ACrYCb8888                               = 0x0000000e,
CrYCbA8888                               = 0x0000000f,
ARGB16161616_10MSB                       = 0x00000010,
RGBA16161616_10MSB                       = 0x00000011,
ARGB16161616_10LSB                       = 0x00000012,
RGBA16161616_10LSB                       = 0x00000013,
ARGB16161616_12MSB                       = 0x00000014,
RGBA16161616_12MSB                       = 0x00000015,
ARGB16161616_12LSB                       = 0x00000016,
RGBA16161616_12LSB                       = 0x00000017,
ARGB16161616_FLOAT                       = 0x00000018,
RGBA16161616_FLOAT                       = 0x00000019,
ARGB16161616_UNORM                       = 0x0000001a,
RGBA16161616_UNORM                       = 0x0000001b,
ARGB16161616_SNORM                       = 0x0000001c,
RGBA16161616_SNORM                       = 0x0000001d,
AYCrCb16161616_10MSB                     = 0x00000020,
AYCrCb16161616_10LSB                     = 0x00000021,
YCrCbA16161616_10MSB                     = 0x00000022,
YCrCbA16161616_10LSB                     = 0x00000023,
ACrYCb16161616_10MSB                     = 0x00000024,
ACrYCb16161616_10LSB                     = 0x00000025,
CrYCbA16161616_10MSB                     = 0x00000026,
CrYCbA16161616_10LSB                     = 0x00000027,
AYCrCb16161616_12MSB                     = 0x00000028,
AYCrCb16161616_12LSB                     = 0x00000029,
YCrCbA16161616_12MSB                     = 0x0000002a,
YCrCbA16161616_12LSB                     = 0x0000002b,
ACrYCb16161616_12MSB                     = 0x0000002c,
ACrYCb16161616_12LSB                     = 0x0000002d,
CrYCbA16161616_12MSB                     = 0x0000002e,
CrYCbA16161616_12LSB                     = 0x0000002f,
Y8_CrCb88_420_PLANAR                     = 0x00000040,
Y8_CbCr88_420_PLANAR                     = 0x00000041,
Y10_CrCb1010_420_PLANAR                  = 0x00000042,
Y10_CbCr1010_420_PLANAR                  = 0x00000043,
Y12_CrCb1212_420_PLANAR                  = 0x00000044,
Y12_CbCr1212_420_PLANAR                  = 0x00000045,
YCrYCb8888_422_PACKED                    = 0x00000048,
YCbYCr8888_422_PACKED                    = 0x00000049,
CrYCbY8888_422_PACKED                    = 0x0000004a,
CbYCrY8888_422_PACKED                    = 0x0000004b,
YCrYCb10101010_422_PACKED                = 0x0000004c,
YCbYCr10101010_422_PACKED                = 0x0000004d,
CrYCbY10101010_422_PACKED                = 0x0000004e,
CbYCrY10101010_422_PACKED                = 0x0000004f,
YCrYCb12121212_422_PACKED                = 0x00000050,
YCbYCr12121212_422_PACKED                = 0x00000051,
CrYCbY12121212_422_PACKED                = 0x00000052,
CbYCrY12121212_422_PACKED                = 0x00000053,
RGB111110_FIX                            = 0x00000070,
BGR101111_FIX                            = 0x00000071,
ACrYCb2101010                            = 0x00000072,
CrYCbA1010102                            = 0x00000073,
RGB111110_FLOAT                          = 0x00000076,
BGR101111_FLOAT                          = 0x00000077,
MONO_8                                   = 0x00000078,
MONO_10MSB                               = 0x00000079,
MONO_10LSB                               = 0x0000007a,
MONO_12MSB                               = 0x0000007b,
MONO_12LSB                               = 0x0000007c,
MONO_16                                  = 0x0000007d,
} SURFACE_PIXEL_FORMAT;

/*
 * XNORM enum
 */

typedef enum XNORM {
XNORM_A                                  = 0x00000000,
XNORM_B                                  = 0x00000001,
} XNORM;

/*
 * COLOR_KEYER_MODE enum
 */

typedef enum COLOR_KEYER_MODE {
FORCE_00                                 = 0x00000000,
FORCE_FF                                 = 0x00000001,
RANGE_00                                 = 0x00000002,
RANGE_FF                                 = 0x00000003,
} COLOR_KEYER_MODE;

/*******************************************************
 * CNVC_CUR Enums
 *******************************************************/

/*
 * CUR_ENABLE enum
 */

typedef enum CUR_ENABLE {
CUR_DIS                                  = 0x00000000,
CUR_EN                                   = 0x00000001,
} CUR_ENABLE;

/*
 * CUR_PENDING enum
 */

typedef enum CUR_PENDING {
CUR_NOT_PENDING                          = 0x00000000,
CUR_YES_PENDING                          = 0x00000001,
} CUR_PENDING;

/*
 * CUR_EXPAND_MODE enum
 */

typedef enum CUR_EXPAND_MODE {
CUR_DYNAMIC_EXPANSION                    = 0x00000000,
CUR_ZERO_EXPANSION                       = 0x00000001,
} CUR_EXPAND_MODE;

/*
 * CUR_ROM_EN enum
 */

typedef enum CUR_ROM_EN {
CUR_FP_NO_ROM                            = 0x00000000,
CUR_FP_USE_ROM                           = 0x00000001,
} CUR_ROM_EN;

/*
 * CUR_MODE enum
 */

typedef enum CUR_MODE {
MONO_2BIT                                = 0x00000000,
COLOR_24BIT_1BIT_AND                     = 0x00000001,
COLOR_24BIT_8BIT_ALPHA_PREMULT           = 0x00000002,
COLOR_24BIT_8BIT_ALPHA_UNPREMULT         = 0x00000003,
COLOR_64BIT_FP_PREMULT                   = 0x00000004,
COLOR_64BIT_FP_UNPREMULT                 = 0x00000005,
} CUR_MODE;

/*
 * CUR_INV_CLAMP enum
 */

typedef enum CUR_INV_CLAMP {
CUR_CLAMP_DIS                            = 0x00000000,
CUR_CLAMP_EN                             = 0x00000001,
} CUR_INV_CLAMP;

/*******************************************************
 * DSCL Enums
 *******************************************************/

/*
 * SCL_COEF_FILTER_TYPE_SEL enum
 */

typedef enum SCL_COEF_FILTER_TYPE_SEL {
SCL_COEF_LUMA_VERT_FILTER                = 0x00000000,
SCL_COEF_LUMA_HORZ_FILTER                = 0x00000001,
SCL_COEF_CHROMA_VERT_FILTER              = 0x00000002,
SCL_COEF_CHROMA_HORZ_FILTER              = 0x00000003,
SCL_COEF_ALPHA_VERT_FILTER               = 0x00000004,
SCL_COEF_ALPHA_HORZ_FILTER               = 0x00000005,
} SCL_COEF_FILTER_TYPE_SEL;

/*
 * DSCL_MODE_SEL enum
 */

typedef enum DSCL_MODE_SEL {
DSCL_MODE_SCALING_444_BYPASS             = 0x00000000,
DSCL_MODE_SCALING_444_RGB_ENABLE         = 0x00000001,
DSCL_MODE_SCALING_444_YCBCR_ENABLE       = 0x00000002,
DSCL_MODE_SCALING_YCBCR_ENABLE           = 0x00000003,
DSCL_MODE_LUMA_SCALING_BYPASS            = 0x00000004,
DSCL_MODE_CHROMA_SCALING_BYPASS          = 0x00000005,
DSCL_MODE_DSCL_BYPASS                    = 0x00000006,
} DSCL_MODE_SEL;

/*
 * SCL_AUTOCAL_MODE enum
 */

typedef enum SCL_AUTOCAL_MODE {
AUTOCAL_MODE_OFF                         = 0x00000000,
AUTOCAL_MODE_AUTOSCALE                   = 0x00000001,
AUTOCAL_MODE_AUTOCENTER                  = 0x00000002,
AUTOCAL_MODE_AUTOREPLICATE               = 0x00000003,
} SCL_AUTOCAL_MODE;

/*
 * SCL_COEF_RAM_SEL enum
 */

typedef enum SCL_COEF_RAM_SEL {
SCL_COEF_RAM_SEL_0                       = 0x00000000,
SCL_COEF_RAM_SEL_1                       = 0x00000001,
} SCL_COEF_RAM_SEL;

/*
 * SCL_CHROMA_COEF enum
 */

typedef enum SCL_CHROMA_COEF {
SCL_CHROMA_COEF_LUMA                     = 0x00000000,
SCL_CHROMA_COEF_CHROMA                   = 0x00000001,
} SCL_CHROMA_COEF;

/*
 * SCL_ALPHA_COEF enum
 */

typedef enum SCL_ALPHA_COEF {
SCL_ALPHA_COEF_LUMA                      = 0x00000000,
SCL_ALPHA_COEF_ALPHA                     = 0x00000001,
} SCL_ALPHA_COEF;

/*
 * COEF_RAM_SELECT_RD enum
 */

typedef enum COEF_RAM_SELECT_RD {
COEF_RAM_SELECT_BACK                     = 0x00000000,
COEF_RAM_SELECT_CURRENT                  = 0x00000001,
} COEF_RAM_SELECT_RD;

/*
 * SCL_2TAP_HARDCODE enum
 */

typedef enum SCL_2TAP_HARDCODE {
SCL_COEF_2TAP_HARDCODE_OFF               = 0x00000000,
SCL_COEF_2TAP_HARDCODE_ON                = 0x00000001,
} SCL_2TAP_HARDCODE;

/*
 * SCL_SHARP_EN enum
 */

typedef enum SCL_SHARP_EN {
SCL_SHARP_DISABLE                        = 0x00000000,
SCL_SHARP_ENABLE                         = 0x00000001,
} SCL_SHARP_EN;

/*
 * SCL_BOUNDARY enum
 */

typedef enum SCL_BOUNDARY {
SCL_BOUNDARY_EDGE                        = 0x00000000,
SCL_BOUNDARY_BLACK                       = 0x00000001,
} SCL_BOUNDARY;

/*
 * LB_INTERLEAVE_EN enum
 */

typedef enum LB_INTERLEAVE_EN {
LB_INTERLEAVE_DISABLE                    = 0x00000000,
LB_INTERLEAVE_ENABLE                     = 0x00000001,
} LB_INTERLEAVE_EN;

/*
 * LB_ALPHA_EN enum
 */

typedef enum LB_ALPHA_EN {
LB_ALPHA_DISABLE                         = 0x00000000,
LB_ALPHA_ENABLE                          = 0x00000001,
} LB_ALPHA_EN;

/*
 * OBUF_BYPASS_SEL enum
 */

typedef enum OBUF_BYPASS_SEL {
OBUF_BYPASS_DIS                          = 0x00000000,
OBUF_BYPASS_EN                           = 0x00000001,
} OBUF_BYPASS_SEL;

/*
 * OBUF_USE_FULL_BUFFER_SEL enum
 */

typedef enum OBUF_USE_FULL_BUFFER_SEL {
OBUF_RECOUT                              = 0x00000000,
OBUF_FULL                                = 0x00000001,
} OBUF_USE_FULL_BUFFER_SEL;

/*
 * OBUF_IS_HALF_RECOUT_WIDTH_SEL enum
 */

typedef enum OBUF_IS_HALF_RECOUT_WIDTH_SEL {
OBUF_FULL_RECOUT                         = 0x00000000,
OBUF_HALF_RECOUT                         = 0x00000001,
} OBUF_IS_HALF_RECOUT_WIDTH_SEL;

/*******************************************************
 * CM Enums
 *******************************************************/

/*
 * CM_BYPASS enum
 */

typedef enum CM_BYPASS {
NON_BYPASS                               = 0x00000000,
BYPASS_EN                                = 0x00000001,
} CM_BYPASS;

/*
 * CM_EN enum
 */

typedef enum CM_EN {
CM_DISABLE                               = 0x00000000,
CM_ENABLE                                = 0x00000001,
} CM_EN;

/*
 * CM_PENDING enum
 */

typedef enum CM_PENDING {
CM_NOT_PENDING                           = 0x00000000,
CM_YES_PENDING                           = 0x00000001,
} CM_PENDING;

/*
 * CM_DATA_SIGNED enum
 */

typedef enum CM_DATA_SIGNED {
UNSIGNED                                 = 0x00000000,
SIGNED                                   = 0x00000001,
} CM_DATA_SIGNED;

/*
 * CM_WRITE_BASE_ONLY enum
 */

typedef enum CM_WRITE_BASE_ONLY {
WRITE_BOTH                               = 0x00000000,
WRITE_BASE_ONLY                          = 0x00000001,
} CM_WRITE_BASE_ONLY;

/*
 * CM_LUT_4_CONFIG_ENUM enum
 */

typedef enum CM_LUT_4_CONFIG_ENUM {
LUT_4CFG_NO_MEMORY                       = 0x00000000,
LUT_4CFG_ROM_A                           = 0x00000001,
LUT_4CFG_ROM_B                           = 0x00000002,
LUT_4CFG_MEMORY_A                        = 0x00000003,
LUT_4CFG_MEMORY_B                        = 0x00000004,
} CM_LUT_4_CONFIG_ENUM;

/*
 * CM_LUT_2_CONFIG_ENUM enum
 */

typedef enum CM_LUT_2_CONFIG_ENUM {
LUT_2CFG_NO_MEMORY                       = 0x00000000,
LUT_2CFG_MEMORY_A                        = 0x00000001,
LUT_2CFG_MEMORY_B                        = 0x00000002,
} CM_LUT_2_CONFIG_ENUM;

/*
 * CM_LUT_4_MODE_ENUM enum
 */

typedef enum CM_LUT_4_MODE_ENUM {
LUT_4_MODE_BYPASS                        = 0x00000000,
LUT_4_MODE_ROMA_LUT                      = 0x00000001,
LUT_4_MODE_ROMB_LUT                      = 0x00000002,
LUT_4_MODE_RAMA_LUT                      = 0x00000003,
LUT_4_MODE_RAMB_LUT                      = 0x00000004,
} CM_LUT_4_MODE_ENUM;

/*
 * CM_LUT_2_MODE_ENUM enum
 */

typedef enum CM_LUT_2_MODE_ENUM {
LUT_2_MODE_BYPASS                        = 0x00000000,
LUT_2_MODE_RAMA_LUT                      = 0x00000001,
LUT_2_MODE_RAMB_LUT                      = 0x00000002,
} CM_LUT_2_MODE_ENUM;

/*
 * CM_LUT_RAM_SEL enum
 */

typedef enum CM_LUT_RAM_SEL {
RAMA_ACCESS                              = 0x00000000,
RAMB_ACCESS                              = 0x00000001,
} CM_LUT_RAM_SEL;

/*
 * CM_LUT_NUM_SEG enum
 */

typedef enum CM_LUT_NUM_SEG {
SEGMENTS_1                               = 0x00000000,
SEGMENTS_2                               = 0x00000001,
SEGMENTS_4                               = 0x00000002,
SEGMENTS_8                               = 0x00000003,
SEGMENTS_16                              = 0x00000004,
SEGMENTS_32                              = 0x00000005,
SEGMENTS_64                              = 0x00000006,
SEGMENTS_128                             = 0x00000007,
} CM_LUT_NUM_SEG;

/*
 * CM_ICSC_MODE_ENUM enum
 */

typedef enum CM_ICSC_MODE_ENUM {
BYPASS_ICSC                              = 0x00000000,
COEF_ICSC                                = 0x00000001,
COEF_ICSC_B                              = 0x00000002,
} CM_ICSC_MODE_ENUM;

/*
 * CM_GAMUT_REMAP_MODE_ENUM enum
 */

typedef enum CM_GAMUT_REMAP_MODE_ENUM {
BYPASS_GAMUT                             = 0x00000000,
GAMUT_COEF                               = 0x00000001,
GAMUT_COEF_B                             = 0x00000002,
} CM_GAMUT_REMAP_MODE_ENUM;

/*
 * CM_COEF_FORMAT_ENUM enum
 */

typedef enum CM_COEF_FORMAT_ENUM {
FIX_S2_13                                = 0x00000000,
FIX_S3_12                                = 0x00000001,
} CM_COEF_FORMAT_ENUM;

/*
 * CMC_LUT_2_CONFIG_ENUM enum
 */

typedef enum CMC_LUT_2_CONFIG_ENUM {
CMC_LUT_2CFG_NO_MEMORY                   = 0x00000000,
CMC_LUT_2CFG_MEMORY_A                    = 0x00000001,
CMC_LUT_2CFG_MEMORY_B                    = 0x00000002,
} CMC_LUT_2_CONFIG_ENUM;

/*
 * CMC_LUT_2_MODE_ENUM enum
 */

typedef enum CMC_LUT_2_MODE_ENUM {
CMC_LUT_2_MODE_BYPASS                    = 0x00000000,
CMC_LUT_2_MODE_RAMA_LUT                  = 0x00000001,
CMC_LUT_2_MODE_RAMB_LUT                  = 0x00000002,
} CMC_LUT_2_MODE_ENUM;

/*
 * CMC_LUT_RAM_SEL enum
 */

typedef enum CMC_LUT_RAM_SEL {
CMC_RAMA_ACCESS                          = 0x00000000,
CMC_RAMB_ACCESS                          = 0x00000001,
} CMC_LUT_RAM_SEL;

/*
 * CMC_3DLUT_RAM_SEL enum
 */

typedef enum CMC_3DLUT_RAM_SEL {
CMC_RAM0_ACCESS                          = 0x00000000,
CMC_RAM1_ACCESS                          = 0x00000001,
CMC_RAM2_ACCESS                          = 0x00000002,
CMC_RAM3_ACCESS                          = 0x00000003,
} CMC_3DLUT_RAM_SEL;

/*
 * CMC_LUT_NUM_SEG enum
 */

typedef enum CMC_LUT_NUM_SEG {
CMC_SEGMENTS_1                           = 0x00000000,
CMC_SEGMENTS_2                           = 0x00000001,
CMC_SEGMENTS_4                           = 0x00000002,
CMC_SEGMENTS_8                           = 0x00000003,
CMC_SEGMENTS_16                          = 0x00000004,
CMC_SEGMENTS_32                          = 0x00000005,
CMC_SEGMENTS_64                          = 0x00000006,
CMC_SEGMENTS_128                         = 0x00000007,
} CMC_LUT_NUM_SEG;

/*
 * CMC_3DLUT_30BIT_ENUM enum
 */

typedef enum CMC_3DLUT_30BIT_ENUM {
CMC_3DLUT_36BIT                          = 0x00000000,
CMC_3DLUT_30BIT                          = 0x00000001,
} CMC_3DLUT_30BIT_ENUM;

/*
 * CMC_3DLUT_SIZE_ENUM enum
 */

typedef enum CMC_3DLUT_SIZE_ENUM {
CMC_3DLUT_17CUBE                         = 0x00000000,
CMC_3DLUT_9CUBE                          = 0x00000001,
} CMC_3DLUT_SIZE_ENUM;

/*******************************************************
 * DPP_TOP Enums
 *******************************************************/

/*
 * TEST_CLK_SEL enum
 */

typedef enum TEST_CLK_SEL {
TEST_CLK_SEL_0                           = 0x00000000,
TEST_CLK_SEL_1                           = 0x00000001,
TEST_CLK_SEL_2                           = 0x00000002,
TEST_CLK_SEL_3                           = 0x00000003,
TEST_CLK_SEL_4                           = 0x00000004,
TEST_CLK_SEL_5                           = 0x00000005,
TEST_CLK_SEL_6                           = 0x00000006,
TEST_CLK_SEL_7                           = 0x00000007,
TEST_CLK_SEL_8                           = 0x00000008,
} TEST_CLK_SEL;

/*
 * CRC_SRC_SEL enum
 */

typedef enum CRC_SRC_SEL {
CRC_SRC_0                                = 0x00000000,
CRC_SRC_1                                = 0x00000001,
CRC_SRC_2                                = 0x00000002,
CRC_SRC_3                                = 0x00000003,
} CRC_SRC_SEL;

/*
 * CRC_IN_PIX_SEL enum
 */

typedef enum CRC_IN_PIX_SEL {
CRC_IN_PIX_0                             = 0x00000000,
CRC_IN_PIX_1                             = 0x00000001,
CRC_IN_PIX_2                             = 0x00000002,
CRC_IN_PIX_3                             = 0x00000003,
CRC_IN_PIX_4                             = 0x00000004,
CRC_IN_PIX_5                             = 0x00000005,
CRC_IN_PIX_6                             = 0x00000006,
CRC_IN_PIX_7                             = 0x00000007,
} CRC_IN_PIX_SEL;

/*
 * CRC_CUR_BITS_SEL enum
 */

typedef enum CRC_CUR_BITS_SEL {
CRC_CUR_BITS_0                           = 0x00000000,
CRC_CUR_BITS_1                           = 0x00000001,
} CRC_CUR_BITS_SEL;

/*
 * CRC_IN_CUR_SEL enum
 */

typedef enum CRC_IN_CUR_SEL {
CRC_IN_CUR_0                             = 0x00000000,
CRC_IN_CUR_1                             = 0x00000001,
} CRC_IN_CUR_SEL;

/*
 * CRC_CUR_SEL enum
 */

typedef enum CRC_CUR_SEL {
CRC_CUR_0                                = 0x00000000,
CRC_CUR_1                                = 0x00000001,
} CRC_CUR_SEL;

/*
 * CRC_STEREO_SEL enum
 */

typedef enum CRC_STEREO_SEL {
CRC_STEREO_0                             = 0x00000000,
CRC_STEREO_1                             = 0x00000001,
CRC_STEREO_2                             = 0x00000002,
CRC_STEREO_3                             = 0x00000003,
} CRC_STEREO_SEL;

/*
 * CRC_INTERLACE_SEL enum
 */

typedef enum CRC_INTERLACE_SEL {
CRC_INTERLACE_0                          = 0x00000000,
CRC_INTERLACE_1                          = 0x00000001,
CRC_INTERLACE_2                          = 0x00000002,
CRC_INTERLACE_3                          = 0x00000003,
} CRC_INTERLACE_SEL;

/*******************************************************
 * DC_PERFMON Enums
 *******************************************************/

/*
 * PERFCOUNTER_CVALUE_SEL enum
 */

typedef enum PERFCOUNTER_CVALUE_SEL {
PERFCOUNTER_CVALUE_SEL_47_0              = 0x00000000,
PERFCOUNTER_CVALUE_SEL_15_0              = 0x00000001,
PERFCOUNTER_CVALUE_SEL_31_16             = 0x00000002,
PERFCOUNTER_CVALUE_SEL_47_32             = 0x00000003,
PERFCOUNTER_CVALUE_SEL_11_0              = 0x00000004,
PERFCOUNTER_CVALUE_SEL_23_12             = 0x00000005,
PERFCOUNTER_CVALUE_SEL_35_24             = 0x00000006,
PERFCOUNTER_CVALUE_SEL_47_36             = 0x00000007,
} PERFCOUNTER_CVALUE_SEL;

/*
 * PERFCOUNTER_INC_MODE enum
 */

typedef enum PERFCOUNTER_INC_MODE {
PERFCOUNTER_INC_MODE_MULTI_BIT           = 0x00000000,
PERFCOUNTER_INC_MODE_BOTH_EDGE           = 0x00000001,
PERFCOUNTER_INC_MODE_LSB                 = 0x00000002,
PERFCOUNTER_INC_MODE_POS_EDGE            = 0x00000003,
PERFCOUNTER_INC_MODE_NEG_EDGE            = 0x00000004,
} PERFCOUNTER_INC_MODE;

/*
 * PERFCOUNTER_HW_CNTL_SEL enum
 */

typedef enum PERFCOUNTER_HW_CNTL_SEL {
PERFCOUNTER_HW_CNTL_SEL_RUNEN            = 0x00000000,
PERFCOUNTER_HW_CNTL_SEL_CNTOFF           = 0x00000001,
} PERFCOUNTER_HW_CNTL_SEL;

/*
 * PERFCOUNTER_RUNEN_MODE enum
 */

typedef enum PERFCOUNTER_RUNEN_MODE {
PERFCOUNTER_RUNEN_MODE_LEVEL             = 0x00000000,
PERFCOUNTER_RUNEN_MODE_EDGE              = 0x00000001,
} PERFCOUNTER_RUNEN_MODE;

/*
 * PERFCOUNTER_CNTOFF_START_DIS enum
 */

typedef enum PERFCOUNTER_CNTOFF_START_DIS {
PERFCOUNTER_CNTOFF_START_ENABLE          = 0x00000000,
PERFCOUNTER_CNTOFF_START_DISABLE         = 0x00000001,
} PERFCOUNTER_CNTOFF_START_DIS;

/*
 * PERFCOUNTER_RESTART_EN enum
 */

typedef enum PERFCOUNTER_RESTART_EN {
PERFCOUNTER_RESTART_DISABLE              = 0x00000000,
PERFCOUNTER_RESTART_ENABLE               = 0x00000001,
} PERFCOUNTER_RESTART_EN;

/*
 * PERFCOUNTER_INT_EN enum
 */

typedef enum PERFCOUNTER_INT_EN {
PERFCOUNTER_INT_DISABLE                  = 0x00000000,
PERFCOUNTER_INT_ENABLE                   = 0x00000001,
} PERFCOUNTER_INT_EN;

/*
 * PERFCOUNTER_OFF_MASK enum
 */

typedef enum PERFCOUNTER_OFF_MASK {
PERFCOUNTER_OFF_MASK_DISABLE             = 0x00000000,
PERFCOUNTER_OFF_MASK_ENABLE              = 0x00000001,
} PERFCOUNTER_OFF_MASK;

/*
 * PERFCOUNTER_ACTIVE enum
 */

typedef enum PERFCOUNTER_ACTIVE {
PERFCOUNTER_IS_IDLE                      = 0x00000000,
PERFCOUNTER_IS_ACTIVE                    = 0x00000001,
} PERFCOUNTER_ACTIVE;

/*
 * PERFCOUNTER_INT_TYPE enum
 */

typedef enum PERFCOUNTER_INT_TYPE {
PERFCOUNTER_INT_TYPE_LEVEL               = 0x00000000,
PERFCOUNTER_INT_TYPE_PULSE               = 0x00000001,
} PERFCOUNTER_INT_TYPE;

/*
 * PERFCOUNTER_COUNTED_VALUE_TYPE enum
 */

typedef enum PERFCOUNTER_COUNTED_VALUE_TYPE {
PERFCOUNTER_COUNTED_VALUE_TYPE_ACC       = 0x00000000,
PERFCOUNTER_COUNTED_VALUE_TYPE_MAX       = 0x00000001,
PERFCOUNTER_COUNTED_VALUE_TYPE_MIN       = 0x00000002,
} PERFCOUNTER_COUNTED_VALUE_TYPE;

/*
 * PERFCOUNTER_HW_STOP1_SEL enum
 */

typedef enum PERFCOUNTER_HW_STOP1_SEL {
PERFCOUNTER_HW_STOP1_0                   = 0x00000000,
PERFCOUNTER_HW_STOP1_1                   = 0x00000001,
} PERFCOUNTER_HW_STOP1_SEL;

/*
 * PERFCOUNTER_HW_STOP2_SEL enum
 */

typedef enum PERFCOUNTER_HW_STOP2_SEL {
PERFCOUNTER_HW_STOP2_0                   = 0x00000000,
PERFCOUNTER_HW_STOP2_1                   = 0x00000001,
} PERFCOUNTER_HW_STOP2_SEL;

/*
 * PERFCOUNTER_CNTL_SEL enum
 */

typedef enum PERFCOUNTER_CNTL_SEL {
PERFCOUNTER_CNTL_SEL_0                   = 0x00000000,
PERFCOUNTER_CNTL_SEL_1                   = 0x00000001,
PERFCOUNTER_CNTL_SEL_2                   = 0x00000002,
PERFCOUNTER_CNTL_SEL_3                   = 0x00000003,
PERFCOUNTER_CNTL_SEL_4                   = 0x00000004,
PERFCOUNTER_CNTL_SEL_5                   = 0x00000005,
PERFCOUNTER_CNTL_SEL_6                   = 0x00000006,
PERFCOUNTER_CNTL_SEL_7                   = 0x00000007,
} PERFCOUNTER_CNTL_SEL;

/*
 * PERFCOUNTER_CNT0_STATE enum
 */

typedef enum PERFCOUNTER_CNT0_STATE {
PERFCOUNTER_CNT0_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT0_STATE_START             = 0x00000001,
PERFCOUNTER_CNT0_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT0_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT0_STATE;

/*
 * PERFCOUNTER_STATE_SEL0 enum
 */

typedef enum PERFCOUNTER_STATE_SEL0 {
PERFCOUNTER_STATE_SEL0_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL0_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL0;

/*
 * PERFCOUNTER_CNT1_STATE enum
 */

typedef enum PERFCOUNTER_CNT1_STATE {
PERFCOUNTER_CNT1_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT1_STATE_START             = 0x00000001,
PERFCOUNTER_CNT1_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT1_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT1_STATE;

/*
 * PERFCOUNTER_STATE_SEL1 enum
 */

typedef enum PERFCOUNTER_STATE_SEL1 {
PERFCOUNTER_STATE_SEL1_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL1_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL1;

/*
 * PERFCOUNTER_CNT2_STATE enum
 */

typedef enum PERFCOUNTER_CNT2_STATE {
PERFCOUNTER_CNT2_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT2_STATE_START             = 0x00000001,
PERFCOUNTER_CNT2_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT2_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT2_STATE;

/*
 * PERFCOUNTER_STATE_SEL2 enum
 */

typedef enum PERFCOUNTER_STATE_SEL2 {
PERFCOUNTER_STATE_SEL2_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL2_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL2;

/*
 * PERFCOUNTER_CNT3_STATE enum
 */

typedef enum PERFCOUNTER_CNT3_STATE {
PERFCOUNTER_CNT3_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT3_STATE_START             = 0x00000001,
PERFCOUNTER_CNT3_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT3_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT3_STATE;

/*
 * PERFCOUNTER_STATE_SEL3 enum
 */

typedef enum PERFCOUNTER_STATE_SEL3 {
PERFCOUNTER_STATE_SEL3_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL3_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL3;

/*
 * PERFCOUNTER_CNT4_STATE enum
 */

typedef enum PERFCOUNTER_CNT4_STATE {
PERFCOUNTER_CNT4_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT4_STATE_START             = 0x00000001,
PERFCOUNTER_CNT4_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT4_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT4_STATE;

/*
 * PERFCOUNTER_STATE_SEL4 enum
 */

typedef enum PERFCOUNTER_STATE_SEL4 {
PERFCOUNTER_STATE_SEL4_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL4_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL4;

/*
 * PERFCOUNTER_CNT5_STATE enum
 */

typedef enum PERFCOUNTER_CNT5_STATE {
PERFCOUNTER_CNT5_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT5_STATE_START             = 0x00000001,
PERFCOUNTER_CNT5_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT5_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT5_STATE;

/*
 * PERFCOUNTER_STATE_SEL5 enum
 */

typedef enum PERFCOUNTER_STATE_SEL5 {
PERFCOUNTER_STATE_SEL5_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL5_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL5;

/*
 * PERFCOUNTER_CNT6_STATE enum
 */

typedef enum PERFCOUNTER_CNT6_STATE {
PERFCOUNTER_CNT6_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT6_STATE_START             = 0x00000001,
PERFCOUNTER_CNT6_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT6_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT6_STATE;

/*
 * PERFCOUNTER_STATE_SEL6 enum
 */

typedef enum PERFCOUNTER_STATE_SEL6 {
PERFCOUNTER_STATE_SEL6_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL6_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL6;

/*
 * PERFCOUNTER_CNT7_STATE enum
 */

typedef enum PERFCOUNTER_CNT7_STATE {
PERFCOUNTER_CNT7_STATE_RESET             = 0x00000000,
PERFCOUNTER_CNT7_STATE_START             = 0x00000001,
PERFCOUNTER_CNT7_STATE_FREEZE            = 0x00000002,
PERFCOUNTER_CNT7_STATE_HW                = 0x00000003,
} PERFCOUNTER_CNT7_STATE;

/*
 * PERFCOUNTER_STATE_SEL7 enum
 */

typedef enum PERFCOUNTER_STATE_SEL7 {
PERFCOUNTER_STATE_SEL7_GLOBAL            = 0x00000000,
PERFCOUNTER_STATE_SEL7_LOCAL             = 0x00000001,
} PERFCOUNTER_STATE_SEL7;

/*
 * PERFMON_STATE enum
 */

typedef enum PERFMON_STATE {
PERFMON_STATE_RESET                      = 0x00000000,
PERFMON_STATE_START                      = 0x00000001,
PERFMON_STATE_FREEZE                     = 0x00000002,
PERFMON_STATE_HW                         = 0x00000003,
} PERFMON_STATE;

/*
 * PERFMON_CNTOFF_AND_OR enum
 */

typedef enum PERFMON_CNTOFF_AND_OR {
PERFMON_CNTOFF_OR                        = 0x00000000,
PERFMON_CNTOFF_AND                       = 0x00000001,
} PERFMON_CNTOFF_AND_OR;

/*
 * PERFMON_CNTOFF_INT_EN enum
 */

typedef enum PERFMON_CNTOFF_INT_EN {
PERFMON_CNTOFF_INT_DISABLE               = 0x00000000,
PERFMON_CNTOFF_INT_ENABLE                = 0x00000001,
} PERFMON_CNTOFF_INT_EN;

/*
 * PERFMON_CNTOFF_INT_TYPE enum
 */

typedef enum PERFMON_CNTOFF_INT_TYPE {
PERFMON_CNTOFF_INT_TYPE_LEVEL            = 0x00000000,
PERFMON_CNTOFF_INT_TYPE_PULSE            = 0x00000001,
} PERFMON_CNTOFF_INT_TYPE;

/*******************************************************
 * HUBP Enums
 *******************************************************/

/*
 * ROTATION_ANGLE enum
 */

typedef enum ROTATION_ANGLE {
ROTATE_0_DEGREES                         = 0x00000000,
ROTATE_90_DEGREES                        = 0x00000001,
ROTATE_180_DEGREES                       = 0x00000002,
ROTATE_270_DEGREES                       = 0x00000003,
} ROTATION_ANGLE;

/*
 * H_MIRROR_EN enum
 */

typedef enum H_MIRROR_EN {
HW_MIRRORING_DISABLE                     = 0x00000000,
HW_MIRRORING_ENABLE                      = 0x00000001,
} H_MIRROR_EN;

/*
 * NUM_PIPES enum
 */

typedef enum NUM_PIPES {
ONE_PIPE                                 = 0x00000000,
TWO_PIPES                                = 0x00000001,
FOUR_PIPES                               = 0x00000002,
EIGHT_PIPES                              = 0x00000003,
SIXTEEN_PIPES                            = 0x00000004,
THIRTY_TWO_PIPES                         = 0x00000005,
SIXTY_FOUR_PIPES                         = 0x00000006,
} NUM_PIPES;

/*
 * NUM_BANKS enum
 */

typedef enum NUM_BANKS {
ONE_BANK                                 = 0x00000000,
TWO_BANKS                                = 0x00000001,
FOUR_BANKS                               = 0x00000002,
EIGHT_BANKS                              = 0x00000003,
SIXTEEN_BANKS                            = 0x00000004,
} NUM_BANKS;

/*
 * SW_MODE enum
 */

typedef enum SW_MODE {
SWIZZLE_LINEAR                           = 0x00000000,
SWIZZLE_4KB_S                            = 0x00000005,
SWIZZLE_4KB_D                            = 0x00000006,
SWIZZLE_64KB_S                           = 0x00000009,
SWIZZLE_64KB_D                           = 0x0000000a,
SWIZZLE_VAR_S                            = 0x0000000d,
SWIZZLE_VAR_D                            = 0x0000000e,
SWIZZLE_64KB_S_T                         = 0x00000011,
SWIZZLE_64KB_D_T                         = 0x00000012,
SWIZZLE_4KB_S_X                          = 0x00000015,
SWIZZLE_4KB_D_X                          = 0x00000016,
SWIZZLE_64KB_S_X                         = 0x00000019,
SWIZZLE_64KB_D_X                         = 0x0000001a,
SWIZZLE_64KB_R_X                         = 0x0000001b,
SWIZZLE_VAR_S_X                          = 0x0000001d,
SWIZZLE_VAR_D_X                          = 0x0000001e,
} SW_MODE;

/*
 * PIPE_INTERLEAVE enum
 */

typedef enum PIPE_INTERLEAVE {
PIPE_INTERLEAVE_256B                     = 0x00000000,
PIPE_INTERLEAVE_512B                     = 0x00000001,
PIPE_INTERLEAVE_1KB                      = 0x00000002,
} PIPE_INTERLEAVE;

/*
 * LEGACY_PIPE_INTERLEAVE enum
 */

typedef enum LEGACY_PIPE_INTERLEAVE {
LEGACY_PIPE_INTERLEAVE_256B              = 0x00000000,
LEGACY_PIPE_INTERLEAVE_512B              = 0x00000001,
} LEGACY_PIPE_INTERLEAVE;

/*
 * NUM_SE enum
 */

typedef enum NUM_SE {
ONE_SHADER_ENGIN                         = 0x00000000,
TWO_SHADER_ENGINS                        = 0x00000001,
FOUR_SHADER_ENGINS                       = 0x00000002,
EIGHT_SHADER_ENGINS                      = 0x00000003,
} NUM_SE;

/*
 * NUM_RB_PER_SE enum
 */

typedef enum NUM_RB_PER_SE {
ONE_RB_PER_SE                            = 0x00000000,
TWO_RB_PER_SE                            = 0x00000001,
FOUR_RB_PER_SE                           = 0x00000002,
} NUM_RB_PER_SE;

/*
 * MAX_COMPRESSED_FRAGS enum
 */

typedef enum MAX_COMPRESSED_FRAGS {
ONE_FRAGMENT                             = 0x00000000,
TWO_FRAGMENTS                            = 0x00000001,
FOUR_FRAGMENTS                           = 0x00000002,
EIGHT_FRAGMENTS                          = 0x00000003,
} MAX_COMPRESSED_FRAGS;

/*
 * DIM_TYPE enum
 */

typedef enum DIM_TYPE {
DIM_TYPE_1D                              = 0x00000000,
DIM_TYPE_2D                              = 0x00000001,
DIM_TYPE_3D                              = 0x00000002,
DIM_TYPE_RESERVED                        = 0x00000003,
} DIM_TYPE;

/*
 * META_LINEAR enum
 */

typedef enum META_LINEAR {
META_SURF_TILED                          = 0x00000000,
META_SURF_LINEAR                         = 0x00000001,
} META_LINEAR;

/*
 * RB_ALIGNED enum
 */

typedef enum RB_ALIGNED {
RB_UNALIGNED_META_SURF                   = 0x00000000,
RB_ALIGNED_META_SURF                     = 0x00000001,
} RB_ALIGNED;

/*
 * PIPE_ALIGNED enum
 */

typedef enum PIPE_ALIGNED {
PIPE_UNALIGNED_SURF                      = 0x00000000,
PIPE_ALIGNED_SURF                        = 0x00000001,
} PIPE_ALIGNED;

/*
 * ARRAY_MODE enum
 */

typedef enum ARRAY_MODE {
AM_LINEAR_GENERAL                        = 0x00000000,
AM_LINEAR_ALIGNED                        = 0x00000001,
AM_1D_TILED_THIN1                        = 0x00000002,
AM_1D_TILED_THICK                        = 0x00000003,
AM_2D_TILED_THIN1                        = 0x00000004,
AM_PRT_TILED_THIN1                       = 0x00000005,
AM_PRT_2D_TILED_THIN1                    = 0x00000006,
AM_2D_TILED_THICK                        = 0x00000007,
AM_2D_TILED_XTHICK                       = 0x00000008,
AM_PRT_TILED_THICK                       = 0x00000009,
AM_PRT_2D_TILED_THICK                    = 0x0000000a,
AM_PRT_3D_TILED_THIN1                    = 0x0000000b,
AM_3D_TILED_THIN1                        = 0x0000000c,
AM_3D_TILED_THICK                        = 0x0000000d,
AM_3D_TILED_XTHICK                       = 0x0000000e,
AM_PRT_3D_TILED_THICK                    = 0x0000000f,
} ARRAY_MODE;

/*
 * PIPE_CONFIG enum
 */

typedef enum PIPE_CONFIG {
P2                                       = 0x00000000,
P4_8x16                                  = 0x00000004,
P4_16x16                                 = 0x00000005,
P4_16x32                                 = 0x00000006,
P4_32x32                                 = 0x00000007,
P8_16x16_8x16                            = 0x00000008,
P8_16x32_8x16                            = 0x00000009,
P8_32x32_8x16                            = 0x0000000a,
P8_16x32_16x16                           = 0x0000000b,
P8_32x32_16x16                           = 0x0000000c,
P8_32x32_16x32                           = 0x0000000d,
P8_32x64_32x32                           = 0x0000000e,
P16_32x32_8x16                           = 0x00000010,
P16_32x32_16x16                          = 0x00000011,
P16_ADDR_SURF                            = 0x00000012,
} PIPE_CONFIG;

/*
 * MICRO_TILE_MODE_NEW enum
 */

typedef enum MICRO_TILE_MODE_NEW {
DISPLAY_MICRO_TILING                     = 0x00000000,
THIN_MICRO_TILING                        = 0x00000001,
DEPTH_MICRO_TILING                       = 0x00000002,
ROTATED_MICRO_TILING                     = 0x00000003,
THICK_MICRO_TILING                       = 0x00000004,
} MICRO_TILE_MODE_NEW;

/*
 * TILE_SPLIT enum
 */

typedef enum TILE_SPLIT {
SURF_TILE_SPLIT_64B                      = 0x00000000,
SURF_TILE_SPLIT_128B                     = 0x00000001,
SURF_TILE_SPLIT_256B                     = 0x00000002,
SURF_TILE_SPLIT_512B                     = 0x00000003,
SURF_TILE_SPLIT_1KB                      = 0x00000004,
SURF_TILE_SPLIT_2KB                      = 0x00000005,
SURF_TILE_SPLIT_4KB                      = 0x00000006,
} TILE_SPLIT;

/*
 * BANK_WIDTH enum
 */

typedef enum BANK_WIDTH {
SURF_BANK_WIDTH_1                        = 0x00000000,
SURF_BANK_WIDTH_2                        = 0x00000001,
SURF_BANK_WIDTH_4                        = 0x00000002,
SURF_BANK_WIDTH_8                        = 0x00000003,
} BANK_WIDTH;

/*
 * BANK_HEIGHT enum
 */

typedef enum BANK_HEIGHT {
SURF_BANK_HEIGHT_1                       = 0x00000000,
SURF_BANK_HEIGHT_2                       = 0x00000001,
SURF_BANK_HEIGHT_4                       = 0x00000002,
SURF_BANK_HEIGHT_8                       = 0x00000003,
} BANK_HEIGHT;

/*
 * MACRO_TILE_ASPECT enum
 */

typedef enum MACRO_TILE_ASPECT {
SURF_MACRO_ASPECT_1                      = 0x00000000,
SURF_MACRO_ASPECT_2                      = 0x00000001,
SURF_MACRO_ASPECT_4                      = 0x00000002,
SURF_MACRO_ASPECT_8                      = 0x00000003,
} MACRO_TILE_ASPECT;

/*
 * LEGACY_NUM_BANKS enum
 */

typedef enum LEGACY_NUM_BANKS {
SURF_2_BANK                              = 0x00000000,
SURF_4_BANK                              = 0x00000001,
SURF_8_BANK                              = 0x00000002,
SURF_16_BANK                             = 0x00000003,
} LEGACY_NUM_BANKS;

/*
 * SWATH_HEIGHT enum
 */

typedef enum SWATH_HEIGHT {
SWATH_HEIGHT_1L                          = 0x00000000,
SWATH_HEIGHT_2L                          = 0x00000001,
SWATH_HEIGHT_4L                          = 0x00000002,
SWATH_HEIGHT_8L                          = 0x00000003,
SWATH_HEIGHT_16L                         = 0x00000004,
} SWATH_HEIGHT;

/*
 * PTE_ROW_HEIGHT_LINEAR enum
 */

typedef enum PTE_ROW_HEIGHT_LINEAR {
PTE_ROW_HEIGHT_LINEAR_8L                 = 0x00000000,
PTE_ROW_HEIGHT_LINEAR_16L                = 0x00000001,
PTE_ROW_HEIGHT_LINEAR_32L                = 0x00000002,
PTE_ROW_HEIGHT_LINEAR_64L                = 0x00000003,
PTE_ROW_HEIGHT_LINEAR_128L               = 0x00000004,
PTE_ROW_HEIGHT_LINEAR_256L               = 0x00000005,
PTE_ROW_HEIGHT_LINEAR_512L               = 0x00000006,
PTE_ROW_HEIGHT_LINEAR_1024L              = 0x00000007,
} PTE_ROW_HEIGHT_LINEAR;

/*
 * CHUNK_SIZE enum
 */

typedef enum CHUNK_SIZE {
CHUNK_SIZE_1KB                           = 0x00000000,
CHUNK_SIZE_2KB                           = 0x00000001,
CHUNK_SIZE_4KB                           = 0x00000002,
CHUNK_SIZE_8KB                           = 0x00000003,
CHUNK_SIZE_16KB                          = 0x00000004,
CHUNK_SIZE_32KB                          = 0x00000005,
CHUNK_SIZE_64KB                          = 0x00000006,
} CHUNK_SIZE;

/*
 * MIN_CHUNK_SIZE enum
 */

typedef enum MIN_CHUNK_SIZE {
NO_MIN_CHUNK_SIZE                        = 0x00000000,
MIN_CHUNK_SIZE_256B                      = 0x00000001,
MIN_CHUNK_SIZE_512B                      = 0x00000002,
MIN_CHUNK_SIZE_1024B                     = 0x00000003,
} MIN_CHUNK_SIZE;

/*
 * META_CHUNK_SIZE enum
 */

typedef enum META_CHUNK_SIZE {
META_CHUNK_SIZE_1KB                      = 0x00000000,
META_CHUNK_SIZE_2KB                      = 0x00000001,
META_CHUNK_SIZE_4KB                      = 0x00000002,
META_CHUNK_SIZE_8KB                      = 0x00000003,
} META_CHUNK_SIZE;

/*
 * MIN_META_CHUNK_SIZE enum
 */

typedef enum MIN_META_CHUNK_SIZE {
NO_MIN_META_CHUNK_SIZE                   = 0x00000000,
MIN_META_CHUNK_SIZE_64B                  = 0x00000001,
MIN_META_CHUNK_SIZE_128B                 = 0x00000002,
MIN_META_CHUNK_SIZE_256B                 = 0x00000003,
} MIN_META_CHUNK_SIZE;

/*
 * DPTE_GROUP_SIZE enum
 */

typedef enum DPTE_GROUP_SIZE {
DPTE_GROUP_SIZE_64B                      = 0x00000000,
DPTE_GROUP_SIZE_128B                     = 0x00000001,
DPTE_GROUP_SIZE_256B                     = 0x00000002,
DPTE_GROUP_SIZE_512B                     = 0x00000003,
DPTE_GROUP_SIZE_1024B                    = 0x00000004,
DPTE_GROUP_SIZE_2048B                    = 0x00000005,
DPTE_GROUP_SIZE_4096B                    = 0x00000006,
DPTE_GROUP_SIZE_8192B                    = 0x00000007,
} DPTE_GROUP_SIZE;

/*
 * MPTE_GROUP_SIZE enum
 */

typedef enum MPTE_GROUP_SIZE {
MPTE_GROUP_SIZE_64B                      = 0x00000000,
MPTE_GROUP_SIZE_128B                     = 0x00000001,
MPTE_GROUP_SIZE_256B                     = 0x00000002,
MPTE_GROUP_SIZE_512B                     = 0x00000003,
MPTE_GROUP_SIZE_1024B                    = 0x00000004,
MPTE_GROUP_SIZE_2048B                    = 0x00000005,
MPTE_GROUP_SIZE_4096B                    = 0x00000006,
MPTE_GROUP_SIZE_8192B                    = 0x00000007,
} MPTE_GROUP_SIZE;

/*
 * HUBP_BLANK_EN enum
 */

typedef enum HUBP_BLANK_EN {
HUBP_BLANK_SW_DEASSERT                   = 0x00000000,
HUBP_BLANK_SW_ASSERT                     = 0x00000001,
} HUBP_BLANK_EN;

/*
 * HUBP_DISABLE enum
 */

typedef enum HUBP_DISABLE {
HUBP_ENABLED                             = 0x00000000,
HUBP_DISABLED                            = 0x00000001,
} HUBP_DISABLE;

/*
 * HUBP_TTU_DISABLE enum
 */

typedef enum HUBP_TTU_DISABLE {
HUBP_TTU_ENABLED                         = 0x00000000,
HUBP_TTU_DISABLED                        = 0x00000001,
} HUBP_TTU_DISABLE;

/*
 * HUBP_NO_OUTSTANDING_REQ enum
 */

typedef enum HUBP_NO_OUTSTANDING_REQ {
OUTSTANDING_REQ                          = 0x00000000,
NO_OUTSTANDING_REQ                       = 0x00000001,
} HUBP_NO_OUTSTANDING_REQ;

/*
 * HUBP_IN_BLANK enum
 */

typedef enum HUBP_IN_BLANK {
HUBP_IN_ACTIVE                           = 0x00000000,
HUBP_IN_VBLANK                           = 0x00000001,
} HUBP_IN_BLANK;

/*
 * HUBP_VTG_SEL enum
 */

typedef enum HUBP_VTG_SEL {
VTG_SEL_0                                = 0x00000000,
VTG_SEL_1                                = 0x00000001,
VTG_SEL_2                                = 0x00000002,
VTG_SEL_3                                = 0x00000003,
VTG_SEL_4                                = 0x00000004,
VTG_SEL_5                                = 0x00000005,
} HUBP_VTG_SEL;

/*
 * HUBP_VREADY_AT_OR_AFTER_VSYNC enum
 */

typedef enum HUBP_VREADY_AT_OR_AFTER_VSYNC {
VREADY_BEFORE_VSYNC                      = 0x00000000,
VREADY_AT_OR_AFTER_VSYNC                 = 0x00000001,
} HUBP_VREADY_AT_OR_AFTER_VSYNC;

/*
 * VMPG_SIZE enum
 */

typedef enum VMPG_SIZE {
VMPG_SIZE_4KB                            = 0x00000000,
VMPG_SIZE_64KB                           = 0x00000001,
} VMPG_SIZE;

/*
 * HUBP_MEASURE_WIN_MODE_DCFCLK enum
 */

typedef enum HUBP_MEASURE_WIN_MODE_DCFCLK {
HUBP_MEASURE_WIN_MODE_DCFCLK_0           = 0x00000000,
HUBP_MEASURE_WIN_MODE_DCFCLK_1           = 0x00000001,
HUBP_MEASURE_WIN_MODE_DCFCLK_2           = 0x00000002,
HUBP_MEASURE_WIN_MODE_DCFCLK_3           = 0x00000003,
} HUBP_MEASURE_WIN_MODE_DCFCLK;

/*******************************************************
 * HUBPREQ Enums
 *******************************************************/

/*
 * SURFACE_TMZ enum
 */

typedef enum SURFACE_TMZ {
SURFACE_IS_NOT_TMZ                       = 0x00000000,
SURFACE_IS_TMZ                           = 0x00000001,
} SURFACE_TMZ;

/*
 * SURFACE_DCC enum
 */

typedef enum SURFACE_DCC {
SURFACE_IS_NOT_DCC                       = 0x00000000,
SURFACE_IS_DCC                           = 0x00000001,
} SURFACE_DCC;

/*
 * SURFACE_DCC_IND_64B enum
 */

typedef enum SURFACE_DCC_IND_64B {
SURFACE_DCC_IS_NOT_IND_64B               = 0x00000000,
SURFACE_DCC_IS_IND_64B                   = 0x00000001,
} SURFACE_DCC_IND_64B;

/*
 * SURFACE_FLIP_TYPE enum
 */

typedef enum SURFACE_FLIP_TYPE {
SURFACE_V_FLIP                           = 0x00000000,
SURFACE_I_FLIP                           = 0x00000001,
} SURFACE_FLIP_TYPE;

/*
 * SURFACE_FLIP_MODE_FOR_STEREOSYNC enum
 */

typedef enum SURFACE_FLIP_MODE_FOR_STEREOSYNC {
FLIP_ANY_FRAME                           = 0x00000000,
FLIP_LEFT_EYE                            = 0x00000001,
FLIP_RIGHT_EYE                           = 0x00000002,
SURFACE_FLIP_MODE_FOR_STEREOSYNC_RESERVED  = 0x00000003,
} SURFACE_FLIP_MODE_FOR_STEREOSYNC;

/*
 * SURFACE_UPDATE_LOCK enum
 */

typedef enum SURFACE_UPDATE_LOCK {
SURFACE_UPDATE_IS_UNLOCKED               = 0x00000000,
SURFACE_UPDATE_IS_LOCKED                 = 0x00000001,
} SURFACE_UPDATE_LOCK;

/*
 * SURFACE_FLIP_IN_STEREOSYNC enum
 */

typedef enum SURFACE_FLIP_IN_STEREOSYNC {
SURFACE_FLIP_NOT_IN_STEREOSYNC_MODE      = 0x00000000,
SURFACE_FLIP_IN_STEREOSYNC_MODE          = 0x00000001,
} SURFACE_FLIP_IN_STEREOSYNC;

/*
 * SURFACE_FLIP_STEREO_SELECT_DISABLE enum
 */

typedef enum SURFACE_FLIP_STEREO_SELECT_DISABLE {
SURFACE_FLIP_STEREO_SELECT_ENABLED       = 0x00000000,
SURFACE_FLIP_STEREO_SELECT_DISABLED      = 0x00000001,
} SURFACE_FLIP_STEREO_SELECT_DISABLE;

/*
 * SURFACE_FLIP_STEREO_SELECT_POLARITY enum
 */

typedef enum SURFACE_FLIP_STEREO_SELECT_POLARITY {
SURFACE_FLIP_STEREO_SELECT_POLARITY_NOT_INVERT  = 0x00000000,
SURFACE_FLIP_STEREO_SELECT_POLARITY_INVERT  = 0x00000001,
} SURFACE_FLIP_STEREO_SELECT_POLARITY;

/*
 * SURFACE_INUSE_RAED_NO_LATCH enum
 */

typedef enum SURFACE_INUSE_RAED_NO_LATCH {
SURFACE_INUSE_IS_LATCHED                 = 0x00000000,
SURFACE_INUSE_IS_NOT_LATCHED             = 0x00000001,
} SURFACE_INUSE_RAED_NO_LATCH;

/*
 * INT_MASK enum
 */

typedef enum INT_MASK {
INT_DISABLED                             = 0x00000000,
INT_ENABLED                              = 0x00000001,
} INT_MASK;

/*
 * SURFACE_FLIP_INT_TYPE enum
 */

typedef enum SURFACE_FLIP_INT_TYPE {
SURFACE_FLIP_INT_LEVEL                   = 0x00000000,
SURFACE_FLIP_INT_PULSE                   = 0x00000001,
} SURFACE_FLIP_INT_TYPE;

/*
 * SURFACE_FLIP_AWAY_INT_TYPE enum
 */

typedef enum SURFACE_FLIP_AWAY_INT_TYPE {
SURFACE_FLIP_AWAY_INT_LEVEL              = 0x00000000,
SURFACE_FLIP_AWAY_INT_PULSE              = 0x00000001,
} SURFACE_FLIP_AWAY_INT_TYPE;

/*
 * SURFACE_FLIP_VUPDATE_SKIP_NUM enum
 */

typedef enum SURFACE_FLIP_VUPDATE_SKIP_NUM {
SURFACE_FLIP_VUPDATE_SKIP_NUM_0          = 0x00000000,
SURFACE_FLIP_VUPDATE_SKIP_NUM_1          = 0x00000001,
SURFACE_FLIP_VUPDATE_SKIP_NUM_2          = 0x00000002,
SURFACE_FLIP_VUPDATE_SKIP_NUM_3          = 0x00000003,
SURFACE_FLIP_VUPDATE_SKIP_NUM_4          = 0x00000004,
SURFACE_FLIP_VUPDATE_SKIP_NUM_5          = 0x00000005,
SURFACE_FLIP_VUPDATE_SKIP_NUM_6          = 0x00000006,
SURFACE_FLIP_VUPDATE_SKIP_NUM_7          = 0x00000007,
SURFACE_FLIP_VUPDATE_SKIP_NUM_8          = 0x00000008,
SURFACE_FLIP_VUPDATE_SKIP_NUM_9          = 0x00000009,
SURFACE_FLIP_VUPDATE_SKIP_NUM_10         = 0x0000000a,
SURFACE_FLIP_VUPDATE_SKIP_NUM_11         = 0x0000000b,
SURFACE_FLIP_VUPDATE_SKIP_NUM_12         = 0x0000000c,
SURFACE_FLIP_VUPDATE_SKIP_NUM_13         = 0x0000000d,
SURFACE_FLIP_VUPDATE_SKIP_NUM_14         = 0x0000000e,
SURFACE_FLIP_VUPDATE_SKIP_NUM_15         = 0x0000000f,
} SURFACE_FLIP_VUPDATE_SKIP_NUM;

/*
 * DFQ_SIZE enum
 */

typedef enum DFQ_SIZE {
DFQ_SIZE_0                               = 0x00000000,
DFQ_SIZE_1                               = 0x00000001,
DFQ_SIZE_2                               = 0x00000002,
DFQ_SIZE_3                               = 0x00000003,
DFQ_SIZE_4                               = 0x00000004,
DFQ_SIZE_5                               = 0x00000005,
DFQ_SIZE_6                               = 0x00000006,
DFQ_SIZE_7                               = 0x00000007,
} DFQ_SIZE;

/*
 * DFQ_MIN_FREE_ENTRIES enum
 */

typedef enum DFQ_MIN_FREE_ENTRIES {
DFQ_MIN_FREE_ENTRIES_0                   = 0x00000000,
DFQ_MIN_FREE_ENTRIES_1                   = 0x00000001,
DFQ_MIN_FREE_ENTRIES_2                   = 0x00000002,
DFQ_MIN_FREE_ENTRIES_3                   = 0x00000003,
DFQ_MIN_FREE_ENTRIES_4                   = 0x00000004,
DFQ_MIN_FREE_ENTRIES_5                   = 0x00000005,
DFQ_MIN_FREE_ENTRIES_6                   = 0x00000006,
DFQ_MIN_FREE_ENTRIES_7                   = 0x00000007,
} DFQ_MIN_FREE_ENTRIES;

/*
 * DFQ_NUM_ENTRIES enum
 */

typedef enum DFQ_NUM_ENTRIES {
DFQ_NUM_ENTRIES_0                        = 0x00000000,
DFQ_NUM_ENTRIES_1                        = 0x00000001,
DFQ_NUM_ENTRIES_2                        = 0x00000002,
DFQ_NUM_ENTRIES_3                        = 0x00000003,
DFQ_NUM_ENTRIES_4                        = 0x00000004,
DFQ_NUM_ENTRIES_5                        = 0x00000005,
DFQ_NUM_ENTRIES_6                        = 0x00000006,
DFQ_NUM_ENTRIES_7                        = 0x00000007,
DFQ_NUM_ENTRIES_8                        = 0x00000008,
} DFQ_NUM_ENTRIES;

/*
 * FLIP_RATE enum
 */

typedef enum FLIP_RATE {
FLIP_RATE_0                              = 0x00000000,
FLIP_RATE_1                              = 0x00000001,
FLIP_RATE_2                              = 0x00000002,
FLIP_RATE_3                              = 0x00000003,
FLIP_RATE_4                              = 0x00000004,
FLIP_RATE_5                              = 0x00000005,
FLIP_RATE_6                              = 0x00000006,
FLIP_RATE_7                              = 0x00000007,
} FLIP_RATE;

/*******************************************************
 * HUBPRET Enums
 *******************************************************/

/*
 * DETILE_BUFFER_PACKER_ENABLE enum
 */

typedef enum DETILE_BUFFER_PACKER_ENABLE {
DETILE_BUFFER_PACKER_IS_DISABLE          = 0x00000000,
DETILE_BUFFER_PACKER_IS_ENABLE           = 0x00000001,
} DETILE_BUFFER_PACKER_ENABLE;

/*
 * CROSSBAR_FOR_ALPHA enum
 */

typedef enum CROSSBAR_FOR_ALPHA {
ALPHA_DATA_ON_ALPHA_PORT                 = 0x00000000,
ALPHA_DATA_ON_Y_G_PORT                   = 0x00000001,
ALPHA_DATA_ON_CB_B_PORT                  = 0x00000002,
ALPHA_DATA_ON_CR_R_PORT                  = 0x00000003,
} CROSSBAR_FOR_ALPHA;

/*
 * CROSSBAR_FOR_Y_G enum
 */

typedef enum CROSSBAR_FOR_Y_G {
Y_G_DATA_ON_ALPHA_PORT                   = 0x00000000,
Y_G_DATA_ON_Y_G_PORT                     = 0x00000001,
Y_G_DATA_ON_CB_B_PORT                    = 0x00000002,
Y_G_DATA_ON_CR_R_PORT                    = 0x00000003,
} CROSSBAR_FOR_Y_G;

/*
 * CROSSBAR_FOR_CB_B enum
 */

typedef enum CROSSBAR_FOR_CB_B {
CB_B_DATA_ON_ALPHA_PORT                  = 0x00000000,
CB_B_DATA_ON_Y_G_PORT                    = 0x00000001,
CB_B_DATA_ON_CB_B_PORT                   = 0x00000002,
CB_B_DATA_ON_CR_R_PORT                   = 0x00000003,
} CROSSBAR_FOR_CB_B;

/*
 * CROSSBAR_FOR_CR_R enum
 */

typedef enum CROSSBAR_FOR_CR_R {
CR_R_DATA_ON_ALPHA_PORT                  = 0x00000000,
CR_R_DATA_ON_Y_G_PORT                    = 0x00000001,
CR_R_DATA_ON_CB_B_PORT                   = 0x00000002,
CR_R_DATA_ON_CR_R_PORT                   = 0x00000003,
} CROSSBAR_FOR_CR_R;

/*
 * DET_MEM_PWR_LIGHT_SLEEP_MODE enum
 */

typedef enum DET_MEM_PWR_LIGHT_SLEEP_MODE {
DET_MEM_POWER_LIGHT_SLEEP_MODE_OFF       = 0x00000000,
DET_MEM_POWER_LIGHT_SLEEP_MODE_1         = 0x00000001,
DET_MEM_POWER_LIGHT_SLEEP_MODE_2         = 0x00000002,
} DET_MEM_PWR_LIGHT_SLEEP_MODE;

/*
 * PIXCDC_MEM_PWR_LIGHT_SLEEP_MODE enum
 */

typedef enum PIXCDC_MEM_PWR_LIGHT_SLEEP_MODE {
PIXCDC_MEM_POWER_LIGHT_SLEEP_MODE_OFF    = 0x00000000,
PIXCDC_MEM_POWER_LIGHT_SLEEP_MODE_1      = 0x00000001,
} PIXCDC_MEM_PWR_LIGHT_SLEEP_MODE;

/*******************************************************
 * CURSOR Enums
 *******************************************************/

/*
 * CURSOR_ENABLE enum
 */

typedef enum CURSOR_ENABLE {
CURSOR_IS_DISABLE                        = 0x00000000,
CURSOR_IS_ENABLE                         = 0x00000001,
} CURSOR_ENABLE;

/*
 * CURSOR_2X_MAGNIFY enum
 */

typedef enum CURSOR_2X_MAGNIFY {
CURSOR_2X_MAGNIFY_IS_DISABLE             = 0x00000000,
CURSOR_2X_MAGNIFY_IS_ENABLE              = 0x00000001,
} CURSOR_2X_MAGNIFY;

/*
 * CURSOR_MODE enum
 */

typedef enum CURSOR_MODE {
CURSOR_MONO_2BIT                         = 0x00000000,
CURSOR_COLOR_24BIT_1BIT_AND              = 0x00000001,
CURSOR_COLOR_24BIT_8BIT_ALPHA_PREMULT    = 0x00000002,
CURSOR_COLOR_24BIT_8BIT_ALPHA_UNPREMULT  = 0x00000003,
CURSOR_COLOR_64BIT_FP_PREMULT            = 0x00000004,
CURSOR_COLOR_64BIT_FP_UNPREMULT          = 0x00000005,
} CURSOR_MODE;

/*
 * CURSOR_SURFACE_TMZ enum
 */

typedef enum CURSOR_SURFACE_TMZ {
CURSOR_SURFACE_IS_NOT_TMZ                = 0x00000000,
CURSOR_SURFACE_IS_TMZ                    = 0x00000001,
} CURSOR_SURFACE_TMZ;

/*
 * CURSOR_SNOOP enum
 */

typedef enum CURSOR_SNOOP {
CURSOR_IS_NOT_SNOOP                      = 0x00000000,
CURSOR_IS_SNOOP                          = 0x00000001,
} CURSOR_SNOOP;

/*
 * CURSOR_SYSTEM enum
 */

typedef enum CURSOR_SYSTEM {
CURSOR_IN_SYSTEM_PHYSICAL_ADDRESS        = 0x00000000,
CURSOR_IN_GUEST_PHYSICAL_ADDRESS         = 0x00000001,
} CURSOR_SYSTEM;

/*
 * CURSOR_PITCH enum
 */

typedef enum CURSOR_PITCH {
CURSOR_PITCH_64_PIXELS                   = 0x00000000,
CURSOR_PITCH_128_PIXELS                  = 0x00000001,
CURSOR_PITCH_256_PIXELS                  = 0x00000002,
} CURSOR_PITCH;

/*
 * CURSOR_LINES_PER_CHUNK enum
 */

typedef enum CURSOR_LINES_PER_CHUNK {
CURSOR_LINE_PER_CHUNK_1                  = 0x00000000,
CURSOR_LINE_PER_CHUNK_2                  = 0x00000001,
CURSOR_LINE_PER_CHUNK_4                  = 0x00000002,
CURSOR_LINE_PER_CHUNK_8                  = 0x00000003,
CURSOR_LINE_PER_CHUNK_16                 = 0x00000004,
} CURSOR_LINES_PER_CHUNK;

/*
 * CURSOR_PERFMON_LATENCY_MEASURE_EN enum
 */

typedef enum CURSOR_PERFMON_LATENCY_MEASURE_EN {
CURSOR_PERFMON_LATENCY_MEASURE_IS_DISABLED  = 0x00000000,
CURSOR_PERFMON_LATENCY_MEASURE_IS_ENABLED  = 0x00000001,
} CURSOR_PERFMON_LATENCY_MEASURE_EN;

/*
 * CURSOR_PERFMON_LATENCY_MEASURE_SEL enum
 */

typedef enum CURSOR_PERFMON_LATENCY_MEASURE_SEL {
CURSOR_PERFMON_LATENCY_MEASURE_MC_LATENCY  = 0x00000000,
CURSOR_PERFMON_LATENCY_MEASURE_CROB_LATENCY  = 0x00000001,
} CURSOR_PERFMON_LATENCY_MEASURE_SEL;

/*
 * CURSOR_STEREO_EN enum
 */

typedef enum CURSOR_STEREO_EN {
CURSOR_STEREO_IS_DISABLED                = 0x00000000,
CURSOR_STEREO_IS_ENABLED                 = 0x00000001,
} CURSOR_STEREO_EN;

/*
 * CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS enum
 */

typedef enum CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS {
CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS_0  = 0x00000000,
CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS_1  = 0x00000001,
} CURSOR_XY_POSITION_ROTATION_AND_MIRRORING_BYPASS;

/*
 * CROB_MEM_PWR_LIGHT_SLEEP_MODE enum
 */

typedef enum CROB_MEM_PWR_LIGHT_SLEEP_MODE {
CROB_MEM_POWER_LIGHT_SLEEP_MODE_OFF      = 0x00000000,
CROB_MEM_POWER_LIGHT_SLEEP_MODE_1        = 0x00000001,
CROB_MEM_POWER_LIGHT_SLEEP_MODE_2        = 0x00000002,
} CROB_MEM_PWR_LIGHT_SLEEP_MODE;

/*
 * DMDATA_UPDATED enum
 */

typedef enum DMDATA_UPDATED {
DMDATA_NOT_UPDATED                       = 0x00000000,
DMDATA_WAS_UPDATED                       = 0x00000001,
} DMDATA_UPDATED;

/*
 * DMDATA_REPEAT enum
 */

typedef enum DMDATA_REPEAT {
DMDATA_USE_FOR_CURRENT_FRAME_ONLY        = 0x00000000,
DMDATA_USE_FOR_CURRENT_AND_FUTURE_FRAMES  = 0x00000001,
} DMDATA_REPEAT;

/*
 * DMDATA_MODE enum
 */

typedef enum DMDATA_MODE {
DMDATA_SOFTWARE_UPDATE_MODE              = 0x00000000,
DMDATA_HARDWARE_UPDATE_MODE              = 0x00000001,
} DMDATA_MODE;

/*
 * DMDATA_QOS_MODE enum
 */

typedef enum DMDATA_QOS_MODE {
DMDATA_QOS_LEVEL_FROM_TTU                = 0x00000000,
DMDATA_QOS_LEVEL_FROM_SOFTWARE           = 0x00000001,
} DMDATA_QOS_MODE;

/*
 * DMDATA_DONE enum
 */

typedef enum DMDATA_DONE {
DMDATA_NOT_SENT_TO_DIG                   = 0x00000000,
DMDATA_SENT_TO_DIG                       = 0x00000001,
} DMDATA_DONE;

/*
 * DMDATA_UNDERFLOW enum
 */

typedef enum DMDATA_UNDERFLOW {
DMDATA_NOT_UNDERFLOW                     = 0x00000000,
DMDATA_UNDERFLOWED                       = 0x00000001,
} DMDATA_UNDERFLOW;

/*
 * DMDATA_UNDERFLOW_CLEAR enum
 */

typedef enum DMDATA_UNDERFLOW_CLEAR {
DMDATA_DONT_CLEAR                        = 0x00000000,
DMDATA_CLEAR_UNDERFLOW_STATUS            = 0x00000001,
} DMDATA_UNDERFLOW_CLEAR;

/*******************************************************
 * HUBPXFC Enums
 *******************************************************/

/*
 * HUBP_XFC_PIXEL_FORMAT_ENUM enum
 */

typedef enum HUBP_XFC_PIXEL_FORMAT_ENUM {
HUBP_XFC_PIXEL_IS_32BPP                  = 0x00000000,
HUBP_XFC_PIXEL_IS_64BPP                  = 0x00000001,
} HUBP_XFC_PIXEL_FORMAT_ENUM;

/*
 * HUBP_XFC_FRAME_MODE_ENUM enum
 */

typedef enum HUBP_XFC_FRAME_MODE_ENUM {
HUBP_XFC_PARTIAL_FRAME_MODE              = 0x00000000,
HUBP_XFC_FULL_FRAME_MODE                 = 0x00000001,
} HUBP_XFC_FRAME_MODE_ENUM;

/*
 * HUBP_XFC_CHUNK_SIZE_ENUM enum
 */

typedef enum HUBP_XFC_CHUNK_SIZE_ENUM {
HUBP_XFC_CHUNK_SIZE_256B                 = 0x00000000,
HUBP_XFC_CHUNK_SIZE_512B                 = 0x00000001,
HUBP_XFC_CHUNK_SIZE_1KB                  = 0x00000002,
HUBP_XFC_CHUNK_SIZE_2KB                  = 0x00000003,
HUBP_XFC_CHUNK_SIZE_4KB                  = 0x00000004,
HUBP_XFC_CHUNK_SIZE_8KB                  = 0x00000005,
HUBP_XFC_CHUNK_SIZE_16KB                 = 0x00000006,
HUBP_XFC_CHUNK_SIZE_32KB                 = 0x00000007,
} HUBP_XFC_CHUNK_SIZE_ENUM;

/*******************************************************
 * XFC Enums
 *******************************************************/

/*
 * MMHUBBUB_XFC_XFCMON_MODE_ENUM enum
 */

typedef enum MMHUBBUB_XFC_XFCMON_MODE_ENUM {
MMHUBBUB_XFC_XFCMON_MODE_ONE_SHOT        = 0x00000000,
MMHUBBUB_XFC_XFCMON_MODE_CONTINUOUS      = 0x00000001,
MMHUBBUB_XFC_XFCMON_MODE_PERIODS         = 0x00000002,
} MMHUBBUB_XFC_XFCMON_MODE_ENUM;

/*
 * MMHUBBUB_XFC_XFCMON_INTERFACE_SEL_ENUM enum
 */

typedef enum MMHUBBUB_XFC_XFCMON_INTERFACE_SEL_ENUM {
MMHUBBUB_XFC_XFCMON_INTERFACE_SEL_SYSHUB  = 0x00000000,
MMHUBBUB_XFC_XFCMON_INTERFACE_SEL_MMHUB  = 0x00000001,
} MMHUBBUB_XFC_XFCMON_INTERFACE_SEL_ENUM;

/*******************************************************
 * XFCP Enums
 *******************************************************/

/*
 * MMHUBBUB_XFC_PIXEL_FORMAT_ENUM enum
 */

typedef enum MMHUBBUB_XFC_PIXEL_FORMAT_ENUM {
MMHUBBUB_XFC_PIXEL_IS_32BPP              = 0x00000000,
MMHUBBUB_XFC_PIXEL_IS_64BPP              = 0x00000001,
} MMHUBBUB_XFC_PIXEL_FORMAT_ENUM;

/*
 * MMHUBBUB_XFC_FRAME_MODE_ENUM enum
 */

typedef enum MMHUBBUB_XFC_FRAME_MODE_ENUM {
MMHUBBUB_XFC_PARTIAL_FRAME_MODE          = 0x00000000,
MMHUBBUB_XFC_FULL_FRAME_MODE             = 0x00000001,
} MMHUBBUB_XFC_FRAME_MODE_ENUM;

/*******************************************************
 * MPC_CFG Enums
 *******************************************************/

/*
 * MPC_CFG_MPC_TEST_CLK_SEL enum
 */

typedef enum MPC_CFG_MPC_TEST_CLK_SEL {
MPC_CFG_MPC_TEST_CLK_SEL_0               = 0x00000000,
MPC_CFG_MPC_TEST_CLK_SEL_1               = 0x00000001,
MPC_CFG_MPC_TEST_CLK_SEL_2               = 0x00000002,
MPC_CFG_MPC_TEST_CLK_SEL_3               = 0x00000003,
} MPC_CFG_MPC_TEST_CLK_SEL;

/*
 * MPC_CRC_CALC_MODE enum
 */

typedef enum MPC_CRC_CALC_MODE {
MPC_CRC_ONE_SHOT_MODE                    = 0x00000000,
MPC_CRC_CONTINUOUS_MODE                  = 0x00000001,
} MPC_CRC_CALC_MODE;

/*
 * MPC_CRC_CALC_STEREO_MODE enum
 */

typedef enum MPC_CRC_CALC_STEREO_MODE {
MPC_CRC_STEREO_MODE_LEFT                 = 0x00000000,
MPC_CRC_STEREO_MODE_RIGHT                = 0x00000001,
MPC_CRC_STEREO_MODE_BOTH_RESET_RIGHT     = 0x00000002,
MPC_CRC_STEREO_MODE_BOTH_RESET_EACH      = 0x00000003,
} MPC_CRC_CALC_STEREO_MODE;

/*
 * MPC_CRC_CALC_INTERLACE_MODE enum
 */

typedef enum MPC_CRC_CALC_INTERLACE_MODE {
MPC_CRC_INTERLACE_MODE_TOP               = 0x00000000,
MPC_CRC_INTERLACE_MODE_BOTTOM            = 0x00000001,
MPC_CRC_INTERLACE_MODE_BOTH_RESET_BOTTOM  = 0x00000002,
MPC_CRC_INTERLACE_MODE_BOTH_RESET_EACH   = 0x00000003,
} MPC_CRC_CALC_INTERLACE_MODE;

/*
 * MPC_CRC_SOURCE_SELECT enum
 */

typedef enum MPC_CRC_SOURCE_SELECT {
MPC_CRC_SOURCE_SEL_DPP                   = 0x00000000,
MPC_CRC_SOURCE_SEL_OPP                   = 0x00000001,
MPC_CRC_SOURCE_SEL_DWB                   = 0x00000002,
MPC_CRC_SOURCE_SEL_OTHER                 = 0x00000003,
} MPC_CRC_SOURCE_SELECT;

/*
 * MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET {
MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET_FALSE  = 0x00000000,
MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET_TRUE  = 0x00000001,
} MPC_CFG_ADR_CFG_CUR_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET {
MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET_FALSE   = 0x00000000,
MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET_TRUE    = 0x00000001,
} MPC_CFG_ADR_CFG_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_CFG_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_CFG_VUPDATE_LOCK_SET {
MPC_CFG_CFG_VUPDATE_LOCK_SET_FALSE       = 0x00000000,
MPC_CFG_CFG_VUPDATE_LOCK_SET_TRUE        = 0x00000001,
} MPC_CFG_CFG_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_ADR_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_ADR_VUPDATE_LOCK_SET {
MPC_CFG_ADR_VUPDATE_LOCK_SET_FALSE       = 0x00000000,
MPC_CFG_ADR_VUPDATE_LOCK_SET_TRUE        = 0x00000001,
} MPC_CFG_ADR_VUPDATE_LOCK_SET;

/*
 * MPC_CFG_CUR_VUPDATE_LOCK_SET enum
 */

typedef enum MPC_CFG_CUR_VUPDATE_LOCK_SET {
MPC_CFG_CUR_VUPDATE_LOCK_SET_FALSE       = 0x00000000,
MPC_CFG_CUR_VUPDATE_LOCK_SET_TRUE        = 0x00000001,
} MPC_CFG_CUR_VUPDATE_LOCK_SET;

/*
 * MPC_OUT_RATE_CONTROL_DISABLE_SET enum
 */

typedef enum MPC_OUT_RATE_CONTROL_DISABLE_SET {
MPC_OUT_RATE_CONTROL_SET_ENABLE          = 0x00000000,
MPC_OUT_RATE_CONTROL_SET_DISABLE         = 0x00000001,
} MPC_OUT_RATE_CONTROL_DISABLE_SET;

/*
 * MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_MODE enum
 */

typedef enum MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_MODE {
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_BYPASS  = 0x00000000,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_6BITS  = 0x00000001,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_8BITS  = 0x00000002,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_9BITS  = 0x00000003,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_10BITS  = 0x00000004,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_11BITS  = 0x00000005,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_12BITS  = 0x00000006,
MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_PASSTHROUGH  = 0x00000007,
} MPC_OUT_DENORM_CONTROL_MPC_OUT_DENORM_MODE;

/*******************************************************
 * MPC_OCSC Enums
 *******************************************************/

/*
 * MPC_OCSC_COEF_FORMAT enum
 */

typedef enum MPC_OCSC_COEF_FORMAT {
MPC_OCSC_COEF_FORMAT_S2_13               = 0x00000000,
MPC_OCSC_COEF_FORMAT_S3_12               = 0x00000001,
} MPC_OCSC_COEF_FORMAT;

/*
 * MPC_OUT_CSC_MODE enum
 */

typedef enum MPC_OUT_CSC_MODE {
MPC_OUT_CSC_MODE_0                       = 0x00000000,
MPC_OUT_CSC_MODE_1                       = 0x00000001,
MPC_OUT_CSC_MODE_2                       = 0x00000002,
MPC_OUT_CSC_MODE_RSV                     = 0x00000003,
} MPC_OUT_CSC_MODE;

/*******************************************************
 * MPCC Enums
 *******************************************************/

/*
 * MPCC_CONTROL_MPCC_MODE enum
 */

typedef enum MPCC_CONTROL_MPCC_MODE {
MPCC_CONTROL_MPCC_MODE_BYPASS            = 0x00000000,
MPCC_CONTROL_MPCC_MODE_TOP_LAYER_PASSTHROUGH  = 0x00000001,
MPCC_CONTROL_MPCC_MODE_TOP_LAYER_ONLY    = 0x00000002,
MPCC_CONTROL_MPCC_MODE_TOP_BOT_BLENDING  = 0x00000003,
} MPCC_CONTROL_MPCC_MODE;

/*
 * MPCC_CONTROL_MPCC_ALPHA_BLND_MODE enum
 */

typedef enum MPCC_CONTROL_MPCC_ALPHA_BLND_MODE {
MPCC_CONTROL_MPCC_ALPHA_BLND_MODE_PER_PIXEL_ALPHA  = 0x00000000,
MPCC_CONTROL_MPCC_ALPHA_BLND_MODE_PER_PIXEL_ALPHA_COMBINED_GLOBAL_GAIN  = 0x00000001,
MPCC_CONTROL_MPCC_ALPHA_BLND_MODE_GLOBAL_ALPHA  = 0x00000002,
MPCC_CONTROL_MPCC_ALPHA_BLND_MODE_UNUSED  = 0x00000003,
} MPCC_CONTROL_MPCC_ALPHA_BLND_MODE;

/*
 * MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE enum
 */

typedef enum MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE {
MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE_FALSE  = 0x00000000,
MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE_TRUE  = 0x00000001,
} MPCC_CONTROL_MPCC_ALPHA_MULTIPLIED_MODE;

/*
 * MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY enum
 */

typedef enum MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY {
MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY_FALSE  = 0x00000000,
MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY_TRUE  = 0x00000001,
} MPCC_CONTROL_MPCC_ACTIVE_OVERLAP_ONLY;

/*
 * MPCC_SM_CONTROL_MPCC_SM_EN enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_EN {
MPCC_SM_CONTROL_MPCC_SM_EN_FALSE         = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_EN_TRUE          = 0x00000001,
} MPCC_SM_CONTROL_MPCC_SM_EN;

/*
 * MPCC_SM_CONTROL_MPCC_SM_MODE enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_MODE {
MPCC_SM_CONTROL_MPCC_SM_MODE_SINGLE_PLANE  = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_MODE_ROW_SUBSAMPLING  = 0x00000002,
MPCC_SM_CONTROL_MPCC_SM_MODE_COLUMN_SUBSAMPLING  = 0x00000004,
MPCC_SM_CONTROL_MPCC_SM_MODE_CHECKERBOARD_SUBSAMPLING  = 0x00000006,
} MPCC_SM_CONTROL_MPCC_SM_MODE;

/*
 * MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT {
MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT_FALSE  = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT_TRUE   = 0x00000001,
} MPCC_SM_CONTROL_MPCC_SM_FRAME_ALT;

/*
 * MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT {
MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT_FALSE  = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT_TRUE   = 0x00000001,
} MPCC_SM_CONTROL_MPCC_SM_FIELD_ALT;

/*
 * MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL {
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL_NO_FORCE  = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL_RESERVED  = 0x00000001,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL_FORCE_LOW  = 0x00000002,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL_FORCE_HIGH  = 0x00000003,
} MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_FRAME_POL;

/*
 * MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL enum
 */

typedef enum MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL {
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL_NO_FORCE  = 0x00000000,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL_RESERVED  = 0x00000001,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL_FORCE_LOW  = 0x00000002,
MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL_FORCE_HIGH  = 0x00000003,
} MPCC_SM_CONTROL_MPCC_SM_FORCE_NEXT_TOP_POL;

/*
 * MPCC_STALL_STATUS_MPCC_STALL_INT_ACK enum
 */

typedef enum MPCC_STALL_STATUS_MPCC_STALL_INT_ACK {
MPCC_STALL_STATUS_MPCC_STALL_INT_ACK_FALSE = 0x00000000,
MPCC_STALL_STATUS_MPCC_STALL_INT_ACK_TRUE = 0x00000001,
} MPCC_STALL_STATUS_MPCC_STALL_INT_ACK;

/*
 * MPCC_STALL_STATUS_MPCC_STALL_INT_MASK enum
 */

typedef enum MPCC_STALL_STATUS_MPCC_STALL_INT_MASK {
MPCC_STALL_STATUS_MPCC_STALL_INT_MASK_FALSE  = 0x00000000,
MPCC_STALL_STATUS_MPCC_STALL_INT_MASK_TRUE  = 0x00000001,
} MPCC_STALL_STATUS_MPCC_STALL_INT_MASK;

/*
 * MPCC_BG_COLOR_BPC enum
 */

typedef enum MPCC_BG_COLOR_BPC {
MPCC_BG_COLOR_BPC_8bit                   = 0x00000000,
MPCC_BG_COLOR_BPC_9bit                   = 0x00000001,
MPCC_BG_COLOR_BPC_10bit                  = 0x00000002,
MPCC_BG_COLOR_BPC_11bit                  = 0x00000003,
MPCC_BG_COLOR_BPC_12bit                  = 0x00000004,
} MPCC_BG_COLOR_BPC;

/*
 * MPCC_CONTROL_MPCC_BOT_GAIN_MODE enum
 */

typedef enum MPCC_CONTROL_MPCC_BOT_GAIN_MODE {
MPCC_CONTROL_MPCC_BOT_GAIN_MODE_0        = 0x00000000,
MPCC_CONTROL_MPCC_BOT_GAIN_MODE_1        = 0x00000001,
} MPCC_CONTROL_MPCC_BOT_GAIN_MODE;

/*******************************************************
 * MPCC_OGAM Enums
 *******************************************************/

/*
 * MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL enum
 */

typedef enum MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL {
MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL_RAMA  = 0x00000000,
MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL_RAMB  = 0x00000001,
} MPCC_OGAM_LUT_RAM_CONTROL_MPCC_OGAM_LUT_RAM_SEL;

/*
 * MPCC_OGAM_MODE_MPCC_OGAM_MODE enum
 */

typedef enum MPCC_OGAM_MODE_MPCC_OGAM_MODE {
MPCC_OGAM_MODE_0                         = 0x00000000,
MPCC_OGAM_MODE_1                         = 0x00000001,
MPCC_OGAM_MODE_2                         = 0x00000002,
MPCC_OGAM_MODE_RSV                       = 0x00000003,
} MPCC_OGAM_MODE_MPCC_OGAM_MODE;

/*******************************************************
 * DPG Enums
 *******************************************************/

/*
 * ENUM_DPG_EN enum
 */

typedef enum ENUM_DPG_EN {
ENUM_DPG_DISABLE                         = 0x00000000,
ENUM_DPG_ENABLE                          = 0x00000001,
} ENUM_DPG_EN;

/*
 * ENUM_DPG_MODE enum
 */

typedef enum ENUM_DPG_MODE {
ENUM_DPG_MODE_RGB_COLOUR_BLOCK           = 0x00000000,
ENUM_DPG_MODE_YCBCR_601_COLOUR_BLOCK     = 0x00000001,
ENUM_DPG_MODE_YCBCR_709_COLOUR_BLOCK     = 0x00000002,
ENUM_DPG_MODE_VERTICAL_BAR               = 0x00000003,
ENUM_DPG_MODE_HORIZONTAL_BAR             = 0x00000004,
ENUM_DPG_MODE_RGB_SINGLE_RAMP            = 0x00000005,
ENUM_DPG_MODE_RGB_DUAL_RAMP              = 0x00000006,
ENUM_DPG_MODE_RGB_XR_BIAS                = 0x00000007,
} ENUM_DPG_MODE;

/*
 * ENUM_DPG_DYNAMIC_RANGE enum
 */

typedef enum ENUM_DPG_DYNAMIC_RANGE {
ENUM_DPG_DYNAMIC_RANGE_VESA              = 0x00000000,
ENUM_DPG_DYNAMIC_RANGE_CEA               = 0x00000001,
} ENUM_DPG_DYNAMIC_RANGE;

/*
 * ENUM_DPG_BIT_DEPTH enum
 */

typedef enum ENUM_DPG_BIT_DEPTH {
ENUM_DPG_BIT_DEPTH_6BPC                  = 0x00000000,
ENUM_DPG_BIT_DEPTH_8BPC                  = 0x00000001,
ENUM_DPG_BIT_DEPTH_10BPC                 = 0x00000002,
ENUM_DPG_BIT_DEPTH_12BPC                 = 0x00000003,
} ENUM_DPG_BIT_DEPTH;

/*
 * ENUM_DPG_FIELD_POLARITY enum
 */

typedef enum ENUM_DPG_FIELD_POLARITY {
ENUM_DPG_FIELD_POLARITY_TOP_EVEN_BOTTOM_ODD  = 0x00000000,
ENUM_DPG_FIELD_POLARITY_TOP_ODD_BOTTOM_EVEN  = 0x00000001,
} ENUM_DPG_FIELD_POLARITY;

/*******************************************************
 * FMT Enums
 *******************************************************/

/*
 * FMT_CONTROL_PIXEL_ENCODING enum
 */

typedef enum FMT_CONTROL_PIXEL_ENCODING {
FMT_CONTROL_PIXEL_ENCODING_RGB444_OR_YCBCR444  = 0x00000000,
FMT_CONTROL_PIXEL_ENCODING_YCBCR422      = 0x00000001,
FMT_CONTROL_PIXEL_ENCODING_YCBCR420      = 0x00000002,
FMT_CONTROL_PIXEL_ENCODING_RESERVED      = 0x00000003,
} FMT_CONTROL_PIXEL_ENCODING;

/*
 * FMT_CONTROL_SUBSAMPLING_MODE enum
 */

typedef enum FMT_CONTROL_SUBSAMPLING_MODE {
FMT_CONTROL_SUBSAMPLING_MODE_DROP        = 0x00000000,
FMT_CONTROL_SUBSAMPLING_MODE_AVERAGE     = 0x00000001,
FMT_CONTROL_SUBSAMPLING_MOME_3_TAP       = 0x00000002,
FMT_CONTROL_SUBSAMPLING_MOME_RESERVED    = 0x00000003,
} FMT_CONTROL_SUBSAMPLING_MODE;

/*
 * FMT_CONTROL_SUBSAMPLING_ORDER enum
 */

typedef enum FMT_CONTROL_SUBSAMPLING_ORDER {
FMT_CONTROL_SUBSAMPLING_ORDER_CB_BEFORE_CR  = 0x00000000,
FMT_CONTROL_SUBSAMPLING_ORDER_CR_BEFORE_CB  = 0x00000001,
} FMT_CONTROL_SUBSAMPLING_ORDER;

/*
 * FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS enum
 */

typedef enum FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS {
FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS_DISABLE  = 0x00000000,
FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS_ENABLE  = 0x00000001,
} FMT_CONTROL_CBCR_BIT_REDUCTION_BYPASS;

/*
 * FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE {
FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE_TRUNCATION  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE_ROUNDING  = 0x00000001,
} FMT_BIT_DEPTH_CONTROL_TRUNCATE_MODE;

/*
 * FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH {
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_18BPP  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_24BPP  = 0x00000001,
FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH_30BPP  = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_TRUNCATE_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH {
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_18BPP  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_24BPP  = 0x00000001,
FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH_30BPP  = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_SPATIAL_DITHER_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH {
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_18BPP  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_24BPP  = 0x00000001,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH_30BPP  = 0x00000002,
} FMT_BIT_DEPTH_CONTROL_TEMPORAL_DITHER_DEPTH;

/*
 * FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL {
FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL_GREY_LEVEL2  = 0x00000000,
FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL_GREY_LEVEL4  = 0x00000001,
} FMT_BIT_DEPTH_CONTROL_TEMPORAL_LEVEL;

/*
 * FMT_BIT_DEPTH_CONTROL_25FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_25FRC_SEL {
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Ei       = 0x00000000,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Fi       = 0x00000001,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_Gi       = 0x00000002,
FMT_BIT_DEPTH_CONTROL_25FRC_SEL_RESERVED  = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_25FRC_SEL;

/*
 * FMT_BIT_DEPTH_CONTROL_50FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_50FRC_SEL {
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_A        = 0x00000000,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_B        = 0x00000001,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_C        = 0x00000002,
FMT_BIT_DEPTH_CONTROL_50FRC_SEL_D        = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_50FRC_SEL;

/*
 * FMT_BIT_DEPTH_CONTROL_75FRC_SEL enum
 */

typedef enum FMT_BIT_DEPTH_CONTROL_75FRC_SEL {
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_E        = 0x00000000,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_F        = 0x00000001,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_G        = 0x00000002,
FMT_BIT_DEPTH_CONTROL_75FRC_SEL_RESERVED  = 0x00000003,
} FMT_BIT_DEPTH_CONTROL_75FRC_SEL;

/*
 * FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0 enum
 */

typedef enum FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0 {
FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0_BGR  = 0x00000000,
FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0_RGB  = 0x00000001,
} FMT_TEMPORAL_DITHER_PATTERN_CONTROL_RGB1_BGR0;

/*
 * FMT_CLAMP_CNTL_COLOR_FORMAT enum
 */

typedef enum FMT_CLAMP_CNTL_COLOR_FORMAT {
FMT_CLAMP_CNTL_COLOR_FORMAT_6BPC         = 0x00000000,
FMT_CLAMP_CNTL_COLOR_FORMAT_8BPC         = 0x00000001,
FMT_CLAMP_CNTL_COLOR_FORMAT_10BPC        = 0x00000002,
FMT_CLAMP_CNTL_COLOR_FORMAT_12BPC        = 0x00000003,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED1    = 0x00000004,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED2    = 0x00000005,
FMT_CLAMP_CNTL_COLOR_FORMAT_RESERVED3    = 0x00000006,
FMT_CLAMP_CNTL_COLOR_FORMAT_PROGRAMMABLE  = 0x00000007,
} FMT_CLAMP_CNTL_COLOR_FORMAT;

/*
 * FMT_SPATIAL_DITHER_MODE enum
 */

typedef enum FMT_SPATIAL_DITHER_MODE {
FMT_SPATIAL_DITHER_MODE_0                = 0x00000000,
FMT_SPATIAL_DITHER_MODE_1                = 0x00000001,
FMT_SPATIAL_DITHER_MODE_2                = 0x00000002,
FMT_SPATIAL_DITHER_MODE_3                = 0x00000003,
} FMT_SPATIAL_DITHER_MODE;

/*
 * FMT_DYNAMIC_EXP_MODE enum
 */

typedef enum FMT_DYNAMIC_EXP_MODE {
FMT_DYNAMIC_EXP_MODE_10to12              = 0x00000000,
FMT_DYNAMIC_EXP_MODE_8to12               = 0x00000001,
} FMT_DYNAMIC_EXP_MODE;

/*
 * FMTMEM_PWR_FORCE_CTRL enum
 */

typedef enum FMTMEM_PWR_FORCE_CTRL {
FMTMEM_NO_FORCE_REQUEST                  = 0x00000000,
FMTMEM_FORCE_LIGHT_SLEEP_REQUEST         = 0x00000001,
FMTMEM_FORCE_DEEP_SLEEP_REQUEST          = 0x00000002,
FMTMEM_FORCE_SHUT_DOWN_REQUEST           = 0x00000003,
} FMTMEM_PWR_FORCE_CTRL;

/*
 * FMTMEM_PWR_DIS_CTRL enum
 */

typedef enum FMTMEM_PWR_DIS_CTRL {
FMTMEM_ENABLE_MEM_PWR_CTRL               = 0x00000000,
FMTMEM_DISABLE_MEM_PWR_CTRL              = 0x00000001,
} FMTMEM_PWR_DIS_CTRL;

/*
 * FMT_POWER_STATE_ENUM enum
 */

typedef enum FMT_POWER_STATE_ENUM {
FMT_POWER_STATE_ENUM_ON                  = 0x00000000,
FMT_POWER_STATE_ENUM_LS                  = 0x00000001,
FMT_POWER_STATE_ENUM_DS                  = 0x00000002,
FMT_POWER_STATE_ENUM_SD                  = 0x00000003,
} FMT_POWER_STATE_ENUM;

/*
 * FMT_STEREOSYNC_OVERRIDE_CONTROL enum
 */

typedef enum FMT_STEREOSYNC_OVERRIDE_CONTROL {
FMT_STEREOSYNC_OVERRIDE_CONTROL_0        = 0x00000000,
FMT_STEREOSYNC_OVERRIDE_CONTROL_1        = 0x00000001,
} FMT_STEREOSYNC_OVERRIDE_CONTROL;

/*
 * FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_CONTROL enum
 */

typedef enum FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_CONTROL {
FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_NO_SWAP  = 0x00000000,
FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_1  = 0x00000001,
FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_2  = 0x00000002,
FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_RESERVED  = 0x00000003,
} FMT_SPATIAL_DITHER_FRAME_COUNTER_BIT_SWAP_CONTROL;

/*
 * FMT_FRAME_RANDOM_ENABLE_CONTROL enum
 */

typedef enum FMT_FRAME_RANDOM_ENABLE_CONTROL {
FMT_FRAME_RANDOM_ENABLE_RESET_EACH_FRAME  = 0x00000000,
FMT_FRAME_RANDOM_ENABLE_RESET_ONCE       = 0x00000001,
} FMT_FRAME_RANDOM_ENABLE_CONTROL;

/*
 * FMT_RGB_RANDOM_ENABLE_CONTROL enum
 */

typedef enum FMT_RGB_RANDOM_ENABLE_CONTROL {
FMT_RGB_RANDOM_ENABLE_CONTROL_DISABLE    = 0x00000000,
FMT_RGB_RANDOM_ENABLE_CONTROL_ENABLE     = 0x00000001,
} FMT_RGB_RANDOM_ENABLE_CONTROL;

/*
 * ENUM_FMT_PTI_FIELD_POLARITY enum
 */

typedef enum ENUM_FMT_PTI_FIELD_POLARITY {
ENUM_FMT_PTI_FIELD_POLARITY_TOP_EVEN_BOTTOM_ODD  = 0x00000000,
ENUM_FMT_PTI_FIELD_POLARITY_TOP_ODD_BOTTOM_EVEN  = 0x00000001,
} ENUM_FMT_PTI_FIELD_POLARITY;

/*******************************************************
 * OPP_PIPE Enums
 *******************************************************/

/*
 * OPP_PIPE_CLOCK_ENABLE_CONTROL enum
 */

typedef enum OPP_PIPE_CLOCK_ENABLE_CONTROL {
OPP_PIPE_CLOCK_DISABLE                   = 0x00000000,
OPP_PIPE_CLOCK_ENABLE                    = 0x00000001,
} OPP_PIPE_CLOCK_ENABLE_CONTROL;

/*
 * OPP_PIPE_DIGTIAL_BYPASS_CONTROL enum
 */

typedef enum OPP_PIPE_DIGTIAL_BYPASS_CONTROL {
OPP_PIPE_DIGTIAL_BYPASS_DISABLE          = 0x00000000,
OPP_PIPE_DIGTIAL_BYPASS_ENABLE           = 0x00000001,
} OPP_PIPE_DIGTIAL_BYPASS_CONTROL;

/*******************************************************
 * OPP_PIPE_CRC Enums
 *******************************************************/

/*
 * OPP_PIPE_CRC_EN enum
 */

typedef enum OPP_PIPE_CRC_EN {
OPP_PIPE_CRC_DISABLE                     = 0x00000000,
OPP_PIPE_CRC_ENABLE                      = 0x00000001,
} OPP_PIPE_CRC_EN;

/*
 * OPP_PIPE_CRC_CONT_EN enum
 */

typedef enum OPP_PIPE_CRC_CONT_EN {
OPP_PIPE_CRC_MODE_ONE_SHOT               = 0x00000000,
OPP_PIPE_CRC_MODE_CONTINUOUS             = 0x00000001,
} OPP_PIPE_CRC_CONT_EN;

/*
 * OPP_PIPE_CRC_STEREO_MODE enum
 */

typedef enum OPP_PIPE_CRC_STEREO_MODE {
OPP_PIPE_CRC_STEREO_MODE_LEFT            = 0x00000000,
OPP_PIPE_CRC_STEREO_MODE_RIGHT           = 0x00000001,
OPP_PIPE_CRC_STEREO_MODE_BOTH_RESET_AFTER_RIGHT_EYE  = 0x00000002,
OPP_PIPE_CRC_STEREO_MODE_BOTH_RESET_AFTER_EACH_EYE  = 0x00000003,
} OPP_PIPE_CRC_STEREO_MODE;

/*
 * OPP_PIPE_CRC_STEREO_EN enum
 */

typedef enum OPP_PIPE_CRC_STEREO_EN {
OPP_PIPE_CRC_STEREO_EN_INTERPRET_AS_NON_STEREO  = 0x00000000,
OPP_PIPE_CRC_STEREO_EN_INTERPRET_AS_STEREO  = 0x00000001,
} OPP_PIPE_CRC_STEREO_EN;

/*
 * OPP_PIPE_CRC_INTERLACE_MODE enum
 */

typedef enum OPP_PIPE_CRC_INTERLACE_MODE {
OPP_PIPE_CRC_INTERLACE_MODE_TOP          = 0x00000000,
OPP_PIPE_CRC_INTERLACE_MODE_BOTTOM       = 0x00000001,
OPP_PIPE_CRC_INTERLACE_MODE_BOTH_RESET_AFTER_BOTTOM_FIELD  = 0x00000002,
OPP_PIPE_CRC_INTERLACE_MODE_BOTH_RESET_AFTER_EACH_FIELD  = 0x00000003,
} OPP_PIPE_CRC_INTERLACE_MODE;

/*
 * OPP_PIPE_CRC_INTERLACE_EN enum
 */

typedef enum OPP_PIPE_CRC_INTERLACE_EN {
OPP_PIPE_CRC_INTERLACE_EN_INTERPRET_AS_PROGRESSIVE  = 0x00000000,
OPP_PIPE_CRC_INTERLACE_EN_INTERPRET_AS_INTERLACED  = 0x00000001,
} OPP_PIPE_CRC_INTERLACE_EN;

/*
 * OPP_PIPE_CRC_PIXEL_SELECT enum
 */

typedef enum OPP_PIPE_CRC_PIXEL_SELECT {
OPP_PIPE_CRC_PIXEL_SELECT_ALL_PIXELS     = 0x00000000,
OPP_PIPE_CRC_PIXEL_SELECT_RESERVED       = 0x00000001,
OPP_PIPE_CRC_PIXEL_SELECT_EVEN_PIXELS    = 0x00000002,
OPP_PIPE_CRC_PIXEL_SELECT_ODD_PIXELS     = 0x00000003,
} OPP_PIPE_CRC_PIXEL_SELECT;

/*
 * OPP_PIPE_CRC_SOURCE_SELECT enum
 */

typedef enum OPP_PIPE_CRC_SOURCE_SELECT {
OPP_PIPE_CRC_SOURCE_SELECT_FMT           = 0x00000000,
OPP_PIPE_CRC_SOURCE_SELECT_SFT           = 0x00000001,
} OPP_PIPE_CRC_SOURCE_SELECT;

/*
 * OPP_PIPE_CRC_ONE_SHOT_PENDING enum
 */

typedef enum OPP_PIPE_CRC_ONE_SHOT_PENDING {
OPP_PIPE_CRC_ONE_SHOT_PENDING_NOT_PENDING  = 0x00000000,
OPP_PIPE_CRC_ONE_SHOT_PENDING_PENDING    = 0x00000001,
} OPP_PIPE_CRC_ONE_SHOT_PENDING;

/*******************************************************
 * OPP_TOP Enums
 *******************************************************/

/*
 * OPP_TOP_CLOCK_GATING_CONTROL enum
 */

typedef enum OPP_TOP_CLOCK_GATING_CONTROL {
OPP_TOP_CLOCK_GATING_ENABLED             = 0x00000000,
OPP_TOP_CLOCK_GATING_DISABLED            = 0x00000001,
} OPP_TOP_CLOCK_GATING_CONTROL;

/*
 * OPP_TOP_CLOCK_ENABLE_STATUS enum
 */

typedef enum OPP_TOP_CLOCK_ENABLE_STATUS {
OPP_TOP_CLOCK_DISABLED_STATUS            = 0x00000000,
OPP_TOP_CLOCK_ENABLED_STATUS             = 0x00000001,
} OPP_TOP_CLOCK_ENABLE_STATUS;

/*
 * OPP_TEST_CLK_SEL_CONTROL enum
 */

typedef enum OPP_TEST_CLK_SEL_CONTROL {
OPP_TEST_CLK_SEL_DISPCLK_P               = 0x00000000,
OPP_TEST_CLK_SEL_DISPCLK_R               = 0x00000001,
OPP_TEST_CLK_SEL_DISPCLK_ABM0            = 0x00000002,
OPP_TEST_CLK_SEL_RESERVED0               = 0x00000003,
OPP_TEST_CLK_SEL_DISPCLK_OPP0            = 0x00000004,
OPP_TEST_CLK_SEL_DISPCLK_OPP1            = 0x00000005,
OPP_TEST_CLK_SEL_DISPCLK_OPP2            = 0x00000006,
OPP_TEST_CLK_SEL_DISPCLK_OPP3            = 0x00000007,
OPP_TEST_CLK_SEL_DISPCLK_OPP4            = 0x00000008,
OPP_TEST_CLK_SEL_DISPCLK_OPP5            = 0x00000009,
} OPP_TEST_CLK_SEL_CONTROL;

/*******************************************************
 * OTG Enums
 *******************************************************/

/*
 * OTG_CONTROL_OTG_START_POINT_CNTL enum
 */

typedef enum OTG_CONTROL_OTG_START_POINT_CNTL {
OTG_CONTROL_OTG_START_POINT_CNTL_NORMAL  = 0x00000000,
OTG_CONTROL_OTG_START_POINT_CNTL_DP      = 0x00000001,
} OTG_CONTROL_OTG_START_POINT_CNTL;

/*
 * OTG_CONTROL_OTG_FIELD_NUMBER_CNTL enum
 */

typedef enum OTG_CONTROL_OTG_FIELD_NUMBER_CNTL {
OTG_CONTROL_OTG_FIELD_NUMBER_CNTL_NORMAL = 0x00000000,
OTG_CONTROL_OTG_FIELD_NUMBER_CNTL_DP     = 0x00000001,
} OTG_CONTROL_OTG_FIELD_NUMBER_CNTL;

/*
 * OTG_CONTROL_OTG_DISABLE_POINT_CNTL enum
 */

typedef enum OTG_CONTROL_OTG_DISABLE_POINT_CNTL {
OTG_CONTROL_OTG_DISABLE_POINT_CNTL_DISABLE  = 0x00000000,
OTG_CONTROL_OTG_DISABLE_POINT_CNTL_DISABLE_CURRENT  = 0x00000001,
OTG_CONTROL_OTG_DISABLE_POINT_CNTL_RESERVED  = 0x00000002,
OTG_CONTROL_OTG_DISABLE_POINT_CNTL_DISABLE_FIRST  = 0x00000003,
} OTG_CONTROL_OTG_DISABLE_POINT_CNTL;

/*
 * OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY enum
 */

typedef enum OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY {
OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY_FALSE  = 0x00000000,
OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY_TRUE  = 0x00000001,
} OTG_CONTROL_OTG_FIELD_NUMBER_POLARITY;

/*
 * OTG_CONTROL_OTG_DISP_READ_REQUEST_DISABLE enum
 */

typedef enum OTG_CONTROL_OTG_DISP_READ_REQUEST_DISABLE {
OTG_CONTROL_OTG_DISP_READ_REQUEST_DISABLE_FALSE  = 0x00000000,
OTG_CONTROL_OTG_DISP_READ_REQUEST_DISABLE_TRUE  = 0x00000001,
} OTG_CONTROL_OTG_DISP_READ_REQUEST_DISABLE;

/*
 * OTG_CONTROL_OTG_SOF_PULL_EN enum
 */

typedef enum OTG_CONTROL_OTG_SOF_PULL_EN {
OTG_CONTROL_OTG_SOF_PULL_EN_FALSE        = 0x00000000,
OTG_CONTROL_OTG_SOF_PULL_EN_TRUE         = 0x00000001,
} OTG_CONTROL_OTG_SOF_PULL_EN;

/*
 * OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL {
OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL_FALSE  = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL_TRUE  = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MAX_SEL;

/*
 * OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL {
OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL_FALSE  = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL_TRUE  = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_V_TOTAL_MIN_SEL;

/*
 * OTG_V_TOTAL_CONTROL_OTG_SET_V_TOTAL_MIN_MASK_EN enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_SET_V_TOTAL_MIN_MASK_EN {
OTG_V_TOTAL_CONTROL_OTG_SET_V_TOTAL_MIN_MASK_EN_FALSE  = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_SET_V_TOTAL_MIN_MASK_EN_TRUE  = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_SET_V_TOTAL_MIN_MASK_EN;

/*
 * OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC {
OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC_DISABLE = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC_ENABLE  = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_TO_MASTER_VSYNC;

/*
 * OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT {
OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT_DISABLE = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT_ENABLE  = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_FORCE_LOCK_ON_EVENT;

/*
 * OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD enum
 */

typedef enum OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD {
OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD_0  = 0x00000000,
OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD_1  = 0x00000001,
} OTG_V_TOTAL_CONTROL_OTG_DRR_EVENT_ACTIVE_PERIOD;

/*
 * OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK enum
 */

typedef enum OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK {
OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK_FALSE = 0x00000000,
OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK_TRUE  = 0x00000001,
} OTG_V_TOTAL_INT_STATUS_OTG_SET_V_TOTAL_MIN_EVENT_OCCURED_ACK;

/*
 * OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR enum
 */

typedef enum OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR {
OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR_FALSE = 0x00000000,
OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR_TRUE  = 0x00000001,
} OTG_VSYNC_NOM_INT_STATUS_OTG_VSYNC_NOM_INT_CLEAR;

/*
 * OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN enum
 */

typedef enum OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN {
OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN_FALSE  = 0x00000000,
OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN_TRUE  = 0x00000001,
} OTG_DTMTEST_CNTL_OTG_DTMTEST_OTG_EN;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT {
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_LOGIC0  = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICA_PIN  = 0x00000001,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICB_PIN  = 0x00000002,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICC_PIN  = 0x00000003,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICD_PIN  = 0x00000004,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICE_PIN  = 0x00000005,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENERICF_PIN  = 0x00000006,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_SWAPLOCKA_PIN  = 0x00000007,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_SWAPLOCKB_PIN  = 0x00000008,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENLK_CLK_PIN  = 0x00000009,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GENLK_VSYNC_PIN  = 0x0000000a,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_HPD1  = 0x0000000b,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_HPD2  = 0x0000000c,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_BLON_Y_PIN  = 0x0000000d,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_DSI_FORCE_TOTAL  = 0x0000000e,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_UPDATE_LOCK  = 0x0000000f,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_GSL_ALLOW_FLIP  = 0x00000010,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_UPDATE_PENDING  = 0x00000011,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_OTG_SOF  = 0x00000012,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_HSYNC  = 0x00000013,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_VSYNC  = 0x00000014,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_OTG_TRIG_MANUAL_CONTROL  = 0x00000015,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_MANUAL_FLOW_CONTROL  = 0x00000016,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_LOGIC1  = 0x00000017,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT_FLIP_PENDING  = 0x00000018,
} OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_SELECT;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT {
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_LOGIC0  = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_INTERLACE  = 0x00000001,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_GENERICA  = 0x00000002,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_GENERICB  = 0x00000003,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_HSYNCA  = 0x00000004,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_LOGIC1  = 0x00000005,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_GENERICC  = 0x00000006,
OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT_GENERICD  = 0x00000007,
} OTG_TRIGA_CNTL_OTG_TRIGA_POLARITY_SELECT;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT {
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_LOGIC0  = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICA_PIN  = 0x00000001,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICB_PIN  = 0x00000002,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICC_PIN  = 0x00000003,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICD_PIN  = 0x00000004,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICE_PIN  = 0x00000005,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENERICF_PIN  = 0x00000006,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_SWAPLOCKA_PIN  = 0x00000007,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_SWAPLOCKB_PIN  = 0x00000008,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENLK_CLK_PIN  = 0x00000009,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GENLK_VSYNC_PIN  = 0x0000000a,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_HPD1  = 0x0000000b,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_HPD2  = 0x0000000c,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_BLON_Y_PIN  = 0x0000000d,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_DSI_FORCE_TOTAL  = 0x0000000e,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_UPDATE_LOCK  = 0x0000000f,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_GSL_ALLOW_FLIP  = 0x00000010,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_UPDATE_PENDING  = 0x00000011,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_OTG_SOF  = 0x00000012,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_HSYNC  = 0x00000013,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_VSYNC  = 0x00000014,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_OTG_TRIG_MANUAL_CONTROL  = 0x00000015,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_MANUAL_FLOW_CONTROL  = 0x00000016,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_LOGIC1  = 0x00000017,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT_FLIP_PENDING  = 0x00000018,
} OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_SELECT;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT {
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG0  = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG1  = 0x00000001,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG2  = 0x00000002,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG3  = 0x00000003,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG4  = 0x00000004,
OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT_OTG5  = 0x00000005,
} OTG_TRIGB_CNTL_OTG_TRIGB_SOURCE_PIPE_SELECT;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT {
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_LOGIC0  = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_INTERLACE  = 0x00000001,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_GENERICA  = 0x00000002,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_GENERICB  = 0x00000003,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_HSYNCA  = 0x00000004,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_LOGIC1  = 0x00000005,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_GENERICC  = 0x00000006,
OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT_GENERICD  = 0x00000007,
} OTG_TRIGB_CNTL_OTG_TRIGB_POLARITY_SELECT;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT {
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG0  = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG1  = 0x00000001,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG2  = 0x00000002,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG3  = 0x00000003,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG4  = 0x00000004,
OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT_OTG5  = 0x00000005,
} OTG_TRIGA_CNTL_OTG_TRIGA_SOURCE_PIPE_SELECT;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN {
OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN_FALSE  = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN_TRUE  = 0x00000001,
} OTG_TRIGA_CNTL_OTG_TRIGA_RESYNC_BYPASS_EN;

/*
 * OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR enum
 */

typedef enum OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR {
OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR_FALSE     = 0x00000000,
OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR_TRUE      = 0x00000001,
} OTG_TRIGA_CNTL_OTG_TRIGA_CLEAR;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN {
OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN_FALSE  = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN_TRUE  = 0x00000001,
} OTG_TRIGB_CNTL_OTG_TRIGB_RESYNC_BYPASS_EN;

/*
 * OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR enum
 */

typedef enum OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR {
OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR_FALSE     = 0x00000000,
OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR_TRUE      = 0x00000001,
} OTG_TRIGB_CNTL_OTG_TRIGB_CLEAR;

/*
 * OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE enum
 */

typedef enum OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE {
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE_DISABLE  = 0x00000000,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE_HCOUNT  = 0x00000001,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE_HCOUNT_VCOUNT  = 0x00000002,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE_RESERVED  = 0x00000003,
} OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_MODE;

/*
 * OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK enum
 */

typedef enum OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK {
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK_FALSE  = 0x00000000,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK_TRUE  = 0x00000001,
} OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CHECK;

/*
 * OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL enum
 */

typedef enum OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL {
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL_FALSE  = 0x00000000,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL_TRUE  = 0x00000001,
} OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_TRIG_SEL;

/*
 * OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR enum
 */

typedef enum OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR {
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR_FALSE = 0x00000000,
OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR_TRUE  = 0x00000001,
} OTG_FORCE_COUNT_NOW_CNTL_OTG_FORCE_COUNT_NOW_CLEAR;

/*
 * OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT enum
 */

typedef enum OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT {
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_LOGIC0  = 0x00000000,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_LOGIC1  = 0x00000001,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICA  = 0x00000002,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICB  = 0x00000003,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICC  = 0x00000004,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICD  = 0x00000005,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICE  = 0x00000006,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENERICF  = 0x00000007,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_HPD1  = 0x00000008,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_HPD2  = 0x00000009,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DDC1DATA  = 0x0000000a,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DDC1CLK  = 0x0000000b,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DDC2DATA  = 0x0000000c,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DDC2CLK  = 0x0000000d,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_MANUAL_FLOW_CONTROL  = 0x0000000e,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_DSI_FREEZE  = 0x0000000f,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENLK_CLK  = 0x00000010,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_GENLK_VSYNC  = 0x00000011,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_SWAPLOCKA  = 0x00000012,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT_SWAPLOCKB  = 0x00000013,
} OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_SOURCE_SELECT;

/*
 * OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY enum
 */

typedef enum OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY {
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY_FALSE  = 0x00000000,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY_TRUE  = 0x00000001,
} OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_POLARITY;

/*
 * OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY enum
 */

typedef enum OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY {
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY_FALSE  = 0x00000000,
OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY_TRUE  = 0x00000001,
} OTG_FLOW_CONTROL_OTG_FLOW_CONTROL_GRANULARITY;

/*
 * OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE enum
 */

typedef enum OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE {
OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE_NO  = 0x00000000,
OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE_RIGHT  = 0x00000001,
OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE_LEFT  = 0x00000002,
OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE_RESERVED  = 0x00000003,
} OTG_STEREO_FORCE_NEXT_EYE_OTG_STEREO_FORCE_NEXT_EYE;

/*
 * OTG_CONTROL_OTG_MASTER_EN enum
 */

typedef enum OTG_CONTROL_OTG_MASTER_EN {
OTG_CONTROL_OTG_MASTER_EN_FALSE          = 0x00000000,
OTG_CONTROL_OTG_MASTER_EN_TRUE           = 0x00000001,
} OTG_CONTROL_OTG_MASTER_EN;

/*
 * OTG_BLANK_CONTROL_OTG_BLANK_DATA_EN enum
 */

typedef enum OTG_BLANK_CONTROL_OTG_BLANK_DATA_EN {
OTG_BLANK_CONTROL_OTG_BLANK_DATA_EN_FALSE  = 0x00000000,
OTG_BLANK_CONTROL_OTG_BLANK_DATA_EN_TRUE  = 0x00000001,
} OTG_BLANK_CONTROL_OTG_BLANK_DATA_EN;

/*
 * OTG_BLANK_CONTROL_OTG_BLANK_DE_MODE enum
 */

typedef enum OTG_BLANK_CONTROL_OTG_BLANK_DE_MODE {
OTG_BLANK_CONTROL_OTG_BLANK_DE_MODE_FALSE  = 0x00000000,
OTG_BLANK_CONTROL_OTG_BLANK_DE_MODE_TRUE  = 0x00000001,
} OTG_BLANK_CONTROL_OTG_BLANK_DE_MODE;

/*
 * OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE enum
 */

typedef enum OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE {
OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE_FALSE  = 0x00000000,
OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE_TRUE  = 0x00000001,
} OTG_INTERLACE_CONTROL_OTG_INTERLACE_ENABLE;

/*
 * OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD enum
 */

typedef enum OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD {
OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD_NOT  = 0x00000000,
OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD_BOTTOM  = 0x00000001,
OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD_TOP  = 0x00000002,
OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD_NOT2  = 0x00000003,
} OTG_INTERLACE_CONTROL_OTG_INTERLACE_FORCE_NEXT_FIELD;

/*
 * OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_INDICATION_OUTPUT_POLARITY enum
 */

typedef enum OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_INDICATION_OUTPUT_POLARITY {
OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_INDICATION_OUTPUT_POLARITY_FALSE  = 0x00000000,
OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_INDICATION_OUTPUT_POLARITY_TRUE  = 0x00000001,
} OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_INDICATION_OUTPUT_POLARITY;

/*
 * OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_ALIGNMENT enum
 */

typedef enum OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_ALIGNMENT {
OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_ALIGNMENT_FALSE  = 0x00000000,
OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_ALIGNMENT_TRUE  = 0x00000001,
} OTG_FIELD_INDICATION_CONTROL_OTG_FIELD_ALIGNMENT;

/*
 * OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN enum
 */

typedef enum OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN {
OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN_FALSE  = 0x00000000,
OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN_TRUE  = 0x00000001,
} OTG_COUNT_CONTROL_OTG_HORZ_COUNT_BY2_EN;

/*
 * OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE enum
 */

typedef enum OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE {
OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_FALSE = 0x00000000,
OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_TRUE  = 0x00000001,
} OTG_MANUAL_FORCE_VSYNC_NEXT_LINE_OTG_MANUAL_FORCE_VSYNC_NEXT_LINE;

/*
 * OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR enum
 */

typedef enum OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR {
OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR_FALSE = 0x00000000,
OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR_TRUE  = 0x00000001,
} OTG_VERT_SYNC_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_CLEAR;

/*
 * OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE enum
 */

typedef enum OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE {
OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE_DISABLE  = 0x00000000,
OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE_TRIGGERA  = 0x00000001,
OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE_TRIGGERB  = 0x00000002,
OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE_RESERVED  = 0x00000003,
} OTG_VERT_SYNC_CONTROL_OTG_AUTO_FORCE_VSYNC_MODE;

/*
 * OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY enum
 */

typedef enum OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY {
OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY_FALSE  = 0x00000000,
OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY_TRUE  = 0x00000001,
} OTG_STEREO_CONTROL_OTG_STEREO_SYNC_OUTPUT_POLARITY;

/*
 * OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY enum
 */

typedef enum OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY {
OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY_FALSE  = 0x00000000,
OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY_TRUE  = 0x00000001,
} OTG_STEREO_CONTROL_OTG_STEREO_EYE_FLAG_POLARITY;

/*
 * OTG_STEREO_CONTROL_OTG_STEREO_EN enum
 */

typedef enum OTG_STEREO_CONTROL_OTG_STEREO_EN {
OTG_STEREO_CONTROL_OTG_STEREO_EN_FALSE   = 0x00000000,
OTG_STEREO_CONTROL_OTG_STEREO_EN_TRUE    = 0x00000001,
} OTG_STEREO_CONTROL_OTG_STEREO_EN;

/*
 * OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR enum
 */

typedef enum OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR {
OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR_FALSE = 0x00000000,
OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR_TRUE  = 0x00000001,
} OTG_SNAPSHOT_STATUS_OTG_SNAPSHOT_CLEAR;

/*
 * OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL enum
 */

typedef enum OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL {
OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL_DISABLE  = 0x00000000,
OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL_TRIGGERA  = 0x00000001,
OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL_TRIGGERB  = 0x00000002,
OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL_RESERVED  = 0x00000003,
} OTG_SNAPSHOT_CONTROL_OTG_AUTO_SNAPSHOT_TRIG_SEL;

/*
 * OTG_START_LINE_CONTROL_OTG_PROGRESSIVE_START_LINE_EARLY enum
 */

typedef enum OTG_START_LINE_CONTROL_OTG_PROGRESSIVE_START_LINE_EARLY {
OTG_START_LINE_CONTROL_OTG_PROGRESSIVE_START_LINE_EARLY_FALSE = 0x00000000,
OTG_START_LINE_CONTROL_OTG_PROGRESSIVE_START_LINE_EARLY_TRUE  = 0x00000001,
} OTG_START_LINE_CONTROL_OTG_PROGRESSIVE_START_LINE_EARLY;

/*
 * OTG_START_LINE_CONTROL_OTG_INTERLACE_START_LINE_EARLY enum
 */

typedef enum OTG_START_LINE_CONTROL_OTG_INTERLACE_START_LINE_EARLY {
OTG_START_LINE_CONTROL_OTG_INTERLACE_START_LINE_EARLY_FALSE = 0x00000000,
OTG_START_LINE_CONTROL_OTG_INTERLACE_START_LINE_EARLY_TRUE  = 0x00000001,
} OTG_START_LINE_CONTROL_OTG_INTERLACE_START_LINE_EARLY;

/*
 * OTG_START_LINE_CONTROL_OTG_LEGACY_REQUESTOR_EN enum
 */

typedef enum OTG_START_LINE_CONTROL_OTG_LEGACY_REQUESTOR_EN {
OTG_START_LINE_CONTROL_OTG_LEGACY_REQUESTOR_EN_FALSE  = 0x00000000,
OTG_START_LINE_CONTROL_OTG_LEGACY_REQUESTOR_EN_TRUE  = 0x00000001,
} OTG_START_LINE_CONTROL_OTG_LEGACY_REQUESTOR_EN;

/*
 * OTG_START_LINE_CONTROL_OTG_PREFETCH_EN enum
 */

typedef enum OTG_START_LINE_CONTROL_OTG_PREFETCH_EN {
OTG_START_LINE_CONTROL_OTG_PREFETCH_EN_FALSE  = 0x00000000,
OTG_START_LINE_CONTROL_OTG_PREFETCH_EN_TRUE  = 0x00000001,
} OTG_START_LINE_CONTROL_OTG_PREFETCH_EN;

/*
 * OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_SNAPSHOT_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_MSK_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_MSK_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_TYPE_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_TYPE_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_V_UPDATE_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_FORCE_COUNT_NOW_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_FORCE_VSYNC_NEXT_LINE_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_TRIGA_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_TRIGB_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_VSYNC_NOM_INT_TYPE;

/*
 * OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK {
OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_MSK;

/*
 * OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE enum
 */

typedef enum OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE {
OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE_FALSE  = 0x00000000,
OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE_TRUE  = 0x00000001,
} OTG_INTERRUPT_CONTROL_OTG_GSL_VSYNC_GAP_INT_TYPE;

/*
 * OTG_UPDATE_LOCK_OTG_UPDATE_LOCK enum
 */

typedef enum OTG_UPDATE_LOCK_OTG_UPDATE_LOCK {
OTG_UPDATE_LOCK_OTG_UPDATE_LOCK_FALSE    = 0x00000000,
OTG_UPDATE_LOCK_OTG_UPDATE_LOCK_TRUE     = 0x00000001,
} OTG_UPDATE_LOCK_OTG_UPDATE_LOCK;

/*
 * OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY enum
 */

typedef enum OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY {
OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY_FALSE  = 0x00000000,
OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY_TRUE  = 0x00000001,
} OTG_DOUBLE_BUFFER_CONTROL_OTG_UPDATE_INSTANTLY;

/*
 * OTG_DOUBLE_BUFFER_CONTROL_OTG_BLANK_DATA_DOUBLE_BUFFER_EN enum
 */

typedef enum OTG_DOUBLE_BUFFER_CONTROL_OTG_BLANK_DATA_DOUBLE_BUFFER_EN {
OTG_DOUBLE_BUFFER_CONTROL_OTG_BLANK_DATA_DOUBLE_BUFFER_EN_FALSE  = 0x00000000,
OTG_DOUBLE_BUFFER_CONTROL_OTG_BLANK_DATA_DOUBLE_BUFFER_EN_TRUE  = 0x00000001,
} OTG_DOUBLE_BUFFER_CONTROL_OTG_BLANK_DATA_DOUBLE_BUFFER_EN;

/*
 * OTG_DOUBLE_BUFFER_CONTROL_OTG_RANGE_TIMING_DBUF_UPDATE_MODE enum
 */

typedef enum OTG_DOUBLE_BUFFER_CONTROL_OTG_RANGE_TIMING_DBUF_UPDATE_MODE {
OTG_DOUBLE_BUFFER_CONTROL_OTG_RANGE_TIMING_DBUF_UPDATE_MODE_0  = 0x00000000,
OTG_DOUBLE_BUFFER_CONTROL_OTG_RANGE_TIMING_DBUF_UPDATE_MODE_1  = 0x00000001,
OTG_DOUBLE_BUFFER_CONTROL_OTG_RANGE_TIMING_DBUF_UPDATE_MODE_2  = 0x00000002,
OTG_DOUBLE_BUFFER_CONTROL_OTG_RANGE_TIMING_DBUF_UPDATE_MODE_3  = 0x00000003,
} OTG_DOUBLE_BUFFER_CONTROL_OTG_RANGE_TIMING_DBUF_UPDATE_MODE;

/*
 * OTG_VGA_PARAMETER_CAPTURE_MODE_OTG_VGA_PARAMETER_CAPTURE_MODE enum
 */

typedef enum OTG_VGA_PARAMETER_CAPTURE_MODE_OTG_VGA_PARAMETER_CAPTURE_MODE {
OTG_VGA_PARAMETER_CAPTURE_MODE_OTG_VGA_PARAMETER_CAPTURE_MODE_FALSE  = 0x00000000,
OTG_VGA_PARAMETER_CAPTURE_MODE_OTG_VGA_PARAMETER_CAPTURE_MODE_TRUE  = 0x00000001,
} OTG_VGA_PARAMETER_CAPTURE_MODE_OTG_VGA_PARAMETER_CAPTURE_MODE;

/*
 * MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK enum
 */

typedef enum MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK {
MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK_FALSE  = 0x00000000,
MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK_TRUE  = 0x00000001,
} MASTER_UPDATE_LOCK_MASTER_UPDATE_LOCK;

/*
 * OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME enum
 */

typedef enum OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME {
OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME_1FRAME  = 0x00000000,
OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME_2FRAME  = 0x00000001,
OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME_4FRAME  = 0x00000002,
OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME_8FRAME  = 0x00000003,
} OTG_DRR_CONTROL_OTG_DRR_AVERAGE_FRAME;

/*
 * MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK enum
 */

typedef enum MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK {
MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK_FALSE  = 0x00000000,
MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK_TRUE  = 0x00000001,
} MASTER_UPDATE_LOCK_UNDERFLOW_UPDATE_LOCK;

/*
 * MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE enum
 */

typedef enum MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE {
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_BOTH  = 0x00000000,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_TOP  = 0x00000001,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_BOTTOM  = 0x00000002,
MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE_RESERVED  = 0x00000003,
} MASTER_UPDATE_MODE_MASTER_UPDATE_INTERLACED_MODE;

/*
 * OTG_MVP_INBAND_CNTL_INSERT_OTG_MVP_INBAND_OUT_MODE enum
 */

typedef enum OTG_MVP_INBAND_CNTL_INSERT_OTG_MVP_INBAND_OUT_MODE {
OTG_MVP_INBAND_CNTL_INSERT_OTG_MVP_INBAND_OUT_MODE_DISABLE  = 0x00000000,
OTG_MVP_INBAND_CNTL_INSERT_OTG_MVP_INBAND_OUT_MODE_DEBUG  = 0x00000001,
OTG_MVP_INBAND_CNTL_INSERT_OTG_MVP_INBAND_OUT_MODE_NORMAL  = 0x00000002,
} OTG_MVP_INBAND_CNTL_INSERT_OTG_MVP_INBAND_OUT_MODE;

/*
 * OTG_MVP_STATUS_OTG_FLIP_NOW_CLEAR enum
 */

typedef enum OTG_MVP_STATUS_OTG_FLIP_NOW_CLEAR {
OTG_MVP_STATUS_OTG_FLIP_NOW_CLEAR_FALSE  = 0x00000000,
OTG_MVP_STATUS_OTG_FLIP_NOW_CLEAR_TRUE   = 0x00000001,
} OTG_MVP_STATUS_OTG_FLIP_NOW_CLEAR;

/*
 * OTG_MVP_STATUS_OTG_AFR_HSYNC_SWITCH_DONE_CLEAR enum
 */

typedef enum OTG_MVP_STATUS_OTG_AFR_HSYNC_SWITCH_DONE_CLEAR {
OTG_MVP_STATUS_OTG_AFR_HSYNC_SWITCH_DONE_CLEAR_FALSE = 0x00000000,
OTG_MVP_STATUS_OTG_AFR_HSYNC_SWITCH_DONE_CLEAR_TRUE  = 0x00000001,
} OTG_MVP_STATUS_OTG_AFR_HSYNC_SWITCH_DONE_CLEAR;

/*
 * OTG_V_UPDATE_INT_STATUS_OTG_V_UPDATE_INT_CLEAR enum
 */

typedef enum OTG_V_UPDATE_INT_STATUS_OTG_V_UPDATE_INT_CLEAR {
OTG_V_UPDATE_INT_STATUS_OTG_V_UPDATE_INT_CLEAR_FALSE = 0x00000000,
OTG_V_UPDATE_INT_STATUS_OTG_V_UPDATE_INT_CLEAR_TRUE  = 0x00000001,
} OTG_V_UPDATE_INT_STATUS_OTG_V_UPDATE_INT_CLEAR;

/*
 * OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY enum
 */

typedef enum OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY {
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY_FALSE  = 0x00000000,
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_OUTPUT_POLARITY;

/*
 * OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE {
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_ENABLE;

/*
 * OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR enum
 */

typedef enum OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR {
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_CLEAR;

/*
 * OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE {
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE_FALSE  = 0x00000000,
OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT0_CONTROL_OTG_VERTICAL_INTERRUPT0_INT_TYPE;

/*
 * OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR enum
 */

typedef enum OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR {
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR_CLEAR_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_CLEAR;

/*
 * OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE {
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_ENABLE;

/*
 * OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE {
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE_FALSE  = 0x00000000,
OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT1_CONTROL_OTG_VERTICAL_INTERRUPT1_INT_TYPE;

/*
 * OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR enum
 */

typedef enum OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR {
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR_CLEAR_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_CLEAR;

/*
 * OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE {
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE_FALSE = 0x00000000,
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_ENABLE;

/*
 * OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE enum
 */

typedef enum OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE {
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE_FALSE  = 0x00000000,
OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE_TRUE  = 0x00000001,
} OTG_VERTICAL_INTERRUPT2_CONTROL_OTG_VERTICAL_INTERRUPT2_INT_TYPE;

/*
 * OTG_CRC_CNTL_OTG_CRC_EN enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_EN {
OTG_CRC_CNTL_OTG_CRC_EN_FALSE            = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_EN_TRUE             = 0x00000001,
} OTG_CRC_CNTL_OTG_CRC_EN;

/*
 * OTG_CRC_CNTL_OTG_CRC_CONT_EN enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_CONT_EN {
OTG_CRC_CNTL_OTG_CRC_CONT_EN_FALSE       = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_CONT_EN_TRUE        = 0x00000001,
} OTG_CRC_CNTL_OTG_CRC_CONT_EN;

/*
 * OTG_CRC_CNTL_OTG_CRC_STEREO_MODE enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_STEREO_MODE {
OTG_CRC_CNTL_OTG_CRC_STEREO_MODE_LEFT    = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_STEREO_MODE_RIGHT   = 0x00000001,
OTG_CRC_CNTL_OTG_CRC_STEREO_MODE_BOTH_EYES  = 0x00000002,
OTG_CRC_CNTL_OTG_CRC_STEREO_MODE_BOTH_FIELDS  = 0x00000003,
} OTG_CRC_CNTL_OTG_CRC_STEREO_MODE;

/*
 * OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE {
OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE_TOP  = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE_BOTTOM  = 0x00000001,
OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE_BOTH_BOTTOM  = 0x00000002,
OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE_BOTH_FIELD  = 0x00000003,
} OTG_CRC_CNTL_OTG_CRC_INTERLACE_MODE;

/*
 * OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS enum
 */

typedef enum OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS {
OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS_FALSE = 0x00000000,
OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS_TRUE  = 0x00000001,
} OTG_CRC_CNTL_OTG_CRC_USE_NEW_AND_REPEATED_PIXELS;

/*
 * OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT enum
 */

typedef enum OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT {
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_UAB     = 0x00000000,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_UA_B    = 0x00000001,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_U_AB    = 0x00000002,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_U_A_B   = 0x00000003,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_IAB     = 0x00000004,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_IA_B    = 0x00000005,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_I_AB    = 0x00000006,
OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT_I_A_B   = 0x00000007,
} OTG_CRC_CNTL_OTG_OTG_CRC0_SELECT;

/*
 * OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT enum
 */

typedef enum OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT {
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_UAB     = 0x00000000,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_UA_B    = 0x00000001,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_U_AB    = 0x00000002,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_U_A_B   = 0x00000003,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_IAB     = 0x00000004,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_IA_B    = 0x00000005,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_I_AB    = 0x00000006,
OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT_I_A_B   = 0x00000007,
} OTG_CRC_CNTL_OTG_OTG_CRC1_SELECT;

/*
 * OTG_CRC_CNTL2_OTG_CRC_DSC_MODE enum
 */

typedef enum OTG_CRC_CNTL2_OTG_CRC_DSC_MODE {
OTG_CRC_CNTL2_OTG_CRC_DSC_MODE_FALSE     = 0x00000000,
OTG_CRC_CNTL2_OTG_CRC_DSC_MODE_TRUE      = 0x00000001,
} OTG_CRC_CNTL2_OTG_CRC_DSC_MODE;

/*
 * OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_COMBINE_MODE enum
 */

typedef enum OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_COMBINE_MODE {
OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_COMBINE_MODE_FALSE  = 0x00000000,
OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_COMBINE_MODE_TRUE  = 0x00000001,
} OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_COMBINE_MODE;

/*
 * OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_SPLIT_MODE enum
 */

typedef enum OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_SPLIT_MODE {
OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_SPLIT_MODE_DSIABLE  = 0x00000000,
OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_SPLIT_MODE_1  = 0x00000001,
OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_SPLIT_MODE_2  = 0x00000002,
OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_SPLIT_MODE_3  = 0x00000003,
} OTG_CRC_CNTL2_OTG_CRC_DATA_STREAM_SPLIT_MODE;

/*
 * OTG_CRC_CNTL2_OTG_CRC_DATA_FORMAT enum
 */

typedef enum OTG_CRC_CNTL2_OTG_CRC_DATA_FORMAT {
OTG_CRC_CNTL2_OTG_CRC_DATA_FORMAT_0      = 0x00000000,
OTG_CRC_CNTL2_OTG_CRC_DATA_FORMAT_1      = 0x00000001,
OTG_CRC_CNTL2_OTG_CRC_DATA_FORMAT_2      = 0x00000002,
OTG_CRC_CNTL2_OTG_CRC_DATA_FORMAT_3      = 0x00000003,
} OTG_CRC_CNTL2_OTG_CRC_DATA_FORMAT;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_ENABLE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_ENABLE {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_ENABLE_DISABLE  = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_ENABLE_ONESHOT  = 0x00000001,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_ENABLE_CONTINUOUS  = 0x00000002,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_ENABLE_RESERVED  = 0x00000003,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_ENABLE;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HCOUNT_MODE_ENABLE;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_ENABLE;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW_1pixel  = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW_2pixel  = 0x00000001,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW_3pixel  = 0x00000002,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW_4pixel  = 0x00000003,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_JITTER_FILTERING_WINDOW;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_ENABLE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_ENABLE {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_ENABLE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_ENABLE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_ENABLE;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_UPDATE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_UPDATE {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_UPDATE_FALSE = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_UPDATE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_WINDOW_UPDATE;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_VSYNC_POLARITY enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_VSYNC_POLARITY {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_VSYNC_POLARITY_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_VSYNC_POLARITY_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_VSYNC_POLARITY;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HSYNC_POLARITY enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HSYNC_POLARITY {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HSYNC_POLARITY_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HSYNC_POLARITY_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_HSYNC_POLARITY;

/*
 * OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_INTERLACE_MODE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_INTERLACE_MODE {
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_INTERLACE_MODE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_INTERLACE_MODE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_CONTROL_OTG_EXT_TIMING_SYNC_INTERLACE_MODE;

/*
 * OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_ENABLE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_ENABLE {
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_ENABLE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_ENABLE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_ENABLE;

/*
 * OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_CLEAR enum
 */

typedef enum OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_CLEAR {
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_CLEAR_FALSE = 0x00000000,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_CLEAR_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_CLEAR;

/*
 * OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_TYPE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_TYPE {
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_TYPE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_TYPE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_INT_TYPE;

/*
 * OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT enum
 */

typedef enum OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT {
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_1FRAME  = 0x00000000,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_2FRAME  = 0x00000001,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_4FRAME  = 0x00000002,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_8FRAME  = 0x00000003,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_16FRAME  = 0x00000004,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_32FRAME  = 0x00000005,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_64FRAME  = 0x00000006,
OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT_128FRAME  = 0x00000007,
} OTG_EXT_TIMING_SYNC_LOSS_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_LOSS_FRAME_COUNT;

/*
 * OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_ENABLE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_ENABLE {
OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_ENABLE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_ENABLE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_ENABLE;

/*
 * OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_CLEAR enum
 */

typedef enum OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_CLEAR {
OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_CLEAR_FALSE = 0x00000000,
OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_CLEAR_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_CLEAR;

/*
 * OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_TYPE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_TYPE {
OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_TYPE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_TYPE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_INT_TYPE;

/*
 * OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE {
OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_ENABLE;

/*
 * OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_CLEAR enum
 */

typedef enum OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_CLEAR {
OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_CLEAR_FALSE = 0x00000000,
OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_CLEAR_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_CLEAR;

/*
 * OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_TYPE enum
 */

typedef enum OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_TYPE {
OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_TYPE_FALSE  = 0x00000000,
OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_TYPE_TRUE  = 0x00000001,
} OTG_EXT_TIMING_SYNC_SIGNAL_INTERRUPT_CONTROL_OTG_EXT_TIMING_SYNC_SIGNAL_INT_TYPE;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE {
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE_FALSE  = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE_TRUE  = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_ENABLE;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR {
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR_FALSE = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR_TRUE  = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_CLEAR;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE {
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE_FALSE  = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE_TRUE  = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_CPU_SS_INT_TYPE;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE {
OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_FALSE  = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_TRUE  = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE;

/*
 * OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE enum
 */

typedef enum OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE {
OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE_OFF  = 0x00000000,
OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE_ON  = 0x00000001,
} OTG_STATIC_SCREEN_CONTROL_OTG_STATIC_SCREEN_OVERRIDE_VALUE;

/*
 * OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN enum
 */

typedef enum OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN {
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_FALSE  = 0x00000000,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_TRUE  = 0x00000001,
} OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN;

/*
 * OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB enum
 */

typedef enum OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB {
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB_FALSE  = 0x00000000,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB_TRUE  = 0x00000001,
} OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_EN_DB;

/*
 * OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE enum
 */

typedef enum OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE {
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_BOTH  = 0x00000000,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_INTERLACE  = 0x00000001,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE_BLOCK_PROGRASSIVE  = 0x00000002,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE_RESERVED  = 0x00000003,
} OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_V_UPDATE_MODE;

/*
 * OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR enum
 */

typedef enum OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR {
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR_FALSE  = 0x00000000,
OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR_TRUE  = 0x00000001,
} OTG_3D_STRUCTURE_CONTROL_OTG_3D_STRUCTURE_STEREO_SEL_OVR;

/*
 * OTG_V_SYNC_A_POL enum
 */

typedef enum OTG_V_SYNC_A_POL {
OTG_V_SYNC_A_POL_HIGH                    = 0x00000000,
OTG_V_SYNC_A_POL_LOW                     = 0x00000001,
} OTG_V_SYNC_A_POL;

/*
 * OTG_H_SYNC_A_POL enum
 */

typedef enum OTG_H_SYNC_A_POL {
OTG_H_SYNC_A_POL_HIGH                    = 0x00000000,
OTG_H_SYNC_A_POL_LOW                     = 0x00000001,
} OTG_H_SYNC_A_POL;

/*
 * OTG_HORZ_REPETITION_COUNT enum
 */

typedef enum OTG_HORZ_REPETITION_COUNT {
OTG_HORZ_REPETITION_COUNT_0              = 0x00000000,
OTG_HORZ_REPETITION_COUNT_1              = 0x00000001,
OTG_HORZ_REPETITION_COUNT_2              = 0x00000002,
OTG_HORZ_REPETITION_COUNT_3              = 0x00000003,
OTG_HORZ_REPETITION_COUNT_4              = 0x00000004,
OTG_HORZ_REPETITION_COUNT_5              = 0x00000005,
OTG_HORZ_REPETITION_COUNT_6              = 0x00000006,
OTG_HORZ_REPETITION_COUNT_7              = 0x00000007,
OTG_HORZ_REPETITION_COUNT_8              = 0x00000008,
OTG_HORZ_REPETITION_COUNT_9              = 0x00000009,
OTG_HORZ_REPETITION_COUNT_10             = 0x0000000a,
OTG_HORZ_REPETITION_COUNT_11             = 0x0000000b,
OTG_HORZ_REPETITION_COUNT_12             = 0x0000000c,
OTG_HORZ_REPETITION_COUNT_13             = 0x0000000d,
OTG_HORZ_REPETITION_COUNT_14             = 0x0000000e,
OTG_HORZ_REPETITION_COUNT_15             = 0x0000000f,
} OTG_HORZ_REPETITION_COUNT;

/*
 * MASTER_UPDATE_LOCK_SEL enum
 */

typedef enum MASTER_UPDATE_LOCK_SEL {
MASTER_UPDATE_LOCK_SEL_0                 = 0x00000000,
MASTER_UPDATE_LOCK_SEL_1                 = 0x00000001,
MASTER_UPDATE_LOCK_SEL_2                 = 0x00000002,
MASTER_UPDATE_LOCK_SEL_3                 = 0x00000003,
MASTER_UPDATE_LOCK_SEL_4                 = 0x00000004,
MASTER_UPDATE_LOCK_SEL_5                 = 0x00000005,
} MASTER_UPDATE_LOCK_SEL;

/*
 * DRR_UPDATE_LOCK_SEL enum
 */

typedef enum DRR_UPDATE_LOCK_SEL {
DRR_UPDATE_LOCK_SEL_0                    = 0x00000000,
DRR_UPDATE_LOCK_SEL_1                    = 0x00000001,
DRR_UPDATE_LOCK_SEL_2                    = 0x00000002,
DRR_UPDATE_LOCK_SEL_3                    = 0x00000003,
DRR_UPDATE_LOCK_SEL_4                    = 0x00000004,
DRR_UPDATE_LOCK_SEL_5                    = 0x00000005,
} DRR_UPDATE_LOCK_SEL;

/*
 * OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL enum
 */

typedef enum OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL {
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG0  = 0x00000000,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG1  = 0x00000001,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG2  = 0x00000002,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG3  = 0x00000003,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG4  = 0x00000004,
OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL_OTG5  = 0x00000005,
} OTG_GLOBAL_CONTROL2_MANUAL_FLOW_CONTROL_SEL;

/*
 * OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_FIELD enum
 */

typedef enum OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_FIELD {
MASTER_UPDATE_LOCK_DB_FIELD_BOTH         = 0x00000000,
MASTER_UPDATE_LOCK_DB_FIELD_TOP          = 0x00000001,
MASTER_UPDATE_LOCK_DB_FIELD_RESERVED     = 0x00000002,
} OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_FIELD;

/*
 * OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_STEREO_SEL enum
 */

typedef enum OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_STEREO_SEL {
MASTER_UPDATE_LOCK_DB_STEREO_SEL_BOTH    = 0x00000000,
MASTER_UPDATE_LOCK_DB_STEREO_SEL_LEFT    = 0x00000001,
MASTER_UPDATE_LOCK_DB_STEREO_SEL_RIGHT   = 0x00000002,
MASTER_UPDATE_LOCK_DB_STEREO_SEL_RESERVED  = 0x00000003,
} OTG_GLOBAL_CONTROL3_MASTER_UPDATE_LOCK_DB_STEREO_SEL;

/*
 * OTG_H_TIMING_DIV_BY2 enum
 */

typedef enum OTG_H_TIMING_DIV_BY2 {
OTG_H_TIMING_DIV_BY2_FALSE               = 0x00000000,
OTG_H_TIMING_DIV_BY2_TRUE                = 0x00000001,
} OTG_H_TIMING_DIV_BY2;

/*
 * OTG_H_TIMING_DIV_BY2_UPDATE_MODE enum
 */

typedef enum OTG_H_TIMING_DIV_BY2_UPDATE_MODE {
OTG_H_TIMING_DIV_BY2_UPDATE_MODE_0       = 0x00000000,
OTG_H_TIMING_DIV_BY2_UPDATE_MODE_1       = 0x00000001,
} OTG_H_TIMING_DIV_BY2_UPDATE_MODE;

/*
 * OTG_TRIGA_RISING_EDGE_DETECT_CNTL enum
 */

typedef enum OTG_TRIGA_RISING_EDGE_DETECT_CNTL {
OTG_TRIGA_RISING_EDGE_DETECT_CNTL_0      = 0x00000000,
OTG_TRIGA_RISING_EDGE_DETECT_CNTL_1      = 0x00000001,
OTG_TRIGA_RISING_EDGE_DETECT_CNTL_2      = 0x00000002,
OTG_TRIGA_RISING_EDGE_DETECT_CNTL_3      = 0x00000003,
} OTG_TRIGA_RISING_EDGE_DETECT_CNTL;

/*
 * OTG_TRIGA_FALLING_EDGE_DETECT_CNTL enum
 */

typedef enum OTG_TRIGA_FALLING_EDGE_DETECT_CNTL {
OTG_TRIGA_FALLING_EDGE_DETECT_CNTL_0     = 0x00000000,
OTG_TRIGA_FALLING_EDGE_DETECT_CNTL_1     = 0x00000001,
OTG_TRIGA_FALLING_EDGE_DETECT_CNTL_2     = 0x00000002,
OTG_TRIGA_FALLING_EDGE_DETECT_CNTL_3     = 0x00000003,
} OTG_TRIGA_FALLING_EDGE_DETECT_CNTL;

/*
 * OTG_TRIGA_FREQUENCY_SELECT enum
 */

typedef enum OTG_TRIGA_FREQUENCY_SELECT {
OTG_TRIGA_FREQUENCY_SELECT_0             = 0x00000000,
OTG_TRIGA_FREQUENCY_SELECT_1             = 0x00000001,
OTG_TRIGA_FREQUENCY_SELECT_2             = 0x00000002,
OTG_TRIGA_FREQUENCY_SELECT_3             = 0x00000003,
} OTG_TRIGA_FREQUENCY_SELECT;

/*
 * OTG_TRIGB_RISING_EDGE_DETECT_CNTL enum
 */

typedef enum OTG_TRIGB_RISING_EDGE_DETECT_CNTL {
OTG_TRIGB_RISING_EDGE_DETECT_CNTL_0      = 0x00000000,
OTG_TRIGB_RISING_EDGE_DETECT_CNTL_1      = 0x00000001,
OTG_TRIGB_RISING_EDGE_DETECT_CNTL_2      = 0x00000002,
OTG_TRIGB_RISING_EDGE_DETECT_CNTL_3      = 0x00000003,
} OTG_TRIGB_RISING_EDGE_DETECT_CNTL;

/*
 * OTG_TRIGB_FALLING_EDGE_DETECT_CNTL enum
 */

typedef enum OTG_TRIGB_FALLING_EDGE_DETECT_CNTL {
OTG_TRIGB_FALLING_EDGE_DETECT_CNTL_0     = 0x00000000,
OTG_TRIGB_FALLING_EDGE_DETECT_CNTL_1     = 0x00000001,
OTG_TRIGB_FALLING_EDGE_DETECT_CNTL_2     = 0x00000002,
OTG_TRIGB_FALLING_EDGE_DETECT_CNTL_3     = 0x00000003,
} OTG_TRIGB_FALLING_EDGE_DETECT_CNTL;

/*
 * OTG_TRIGB_FREQUENCY_SELECT enum
 */

typedef enum OTG_TRIGB_FREQUENCY_SELECT {
OTG_TRIGB_FREQUENCY_SELECT_0             = 0x00000000,
OTG_TRIGB_FREQUENCY_SELECT_1             = 0x00000001,
OTG_TRIGB_FREQUENCY_SELECT_2             = 0x00000002,
OTG_TRIGB_FREQUENCY_SELECT_3             = 0x00000003,
} OTG_TRIGB_FREQUENCY_SELECT;

/*
 * OTG_PIPE_ABORT enum
 */

typedef enum OTG_PIPE_ABORT {
OTG_PIPE_ABORT_0                         = 0x00000000,
OTG_PIPE_ABORT_1                         = 0x00000001,
} OTG_PIPE_ABORT;

/*
 * OTG_MASTER_UPDATE_LOCK_GSL_EN enum
 */

typedef enum OTG_MASTER_UPDATE_LOCK_GSL_EN {
OTG_MASTER_UPDATE_LOCK_GSL_EN_FALSE      = 0x00000000,
OTG_MASTER_UPDATE_LOCK_GSL_EN_TRUE       = 0x00000001,
} OTG_MASTER_UPDATE_LOCK_GSL_EN;

/*
 * OTG_PTI_CONTROL_OTG_PIT_EN enum
 */

typedef enum OTG_PTI_CONTROL_OTG_PIT_EN {
OTG_PTI_CONTROL_OTG_PIT_EN_FALSE         = 0x00000000,
OTG_PTI_CONTROL_OTG_PIT_EN_TRUE          = 0x00000001,
} OTG_PTI_CONTROL_OTG_PIT_EN;

/*
 * OTG_GSL_MASTER_MODE enum
 */

typedef enum OTG_GSL_MASTER_MODE {
OTG_GSL_MASTER_MODE_0                    = 0x00000000,
OTG_GSL_MASTER_MODE_1                    = 0x00000001,
OTG_GSL_MASTER_MODE_2                    = 0x00000002,
OTG_GSL_MASTER_MODE_3                    = 0x00000003,
} OTG_GSL_MASTER_MODE;

/*******************************************************
 * DMCUB Enums
 *******************************************************/

/*
 * DC_DMCUB_TIMER_WINDOW enum
 */

typedef enum DC_DMCUB_TIMER_WINDOW {
BITS_31_0                                = 0x00000000,
BITS_32_1                                = 0x00000001,
BITS_33_2                                = 0x00000002,
BITS_34_3                                = 0x00000003,
BITS_35_4                                = 0x00000004,
BITS_36_5                                = 0x00000005,
BITS_37_6                                = 0x00000006,
BITS_38_7                                = 0x00000007,
} DC_DMCUB_TIMER_WINDOW;

/*
 * DC_DMCUB_INT_TYPE enum
 */

typedef enum DC_DMCUB_INT_TYPE {
INT_LEVEL                                = 0x00000000,
INT_PULSE                                = 0x00000001,
} DC_DMCUB_INT_TYPE;

/*******************************************************
 * RBBMIF Enums
 *******************************************************/

/*
 * INVALID_REG_ACCESS_TYPE enum
 */

typedef enum INVALID_REG_ACCESS_TYPE {
REG_UNALLOCATED_ADDR_WRITE               = 0x00000000,
REG_UNALLOCATED_ADDR_READ                = 0x00000001,
REG_VIRTUAL_WRITE                        = 0x00000002,
REG_VIRTUAL_READ                         = 0x00000003,
} INVALID_REG_ACCESS_TYPE;

/*******************************************************
 * IHC Enums
 *******************************************************/

/*
 * DMU_DC_GPU_TIMER_START_POSITION enum
 */

typedef enum DMU_DC_GPU_TIMER_START_POSITION {
DMU_GPU_TIMER_START_0_END_27             = 0x00000000,
DMU_GPU_TIMER_START_1_END_28             = 0x00000001,
DMU_GPU_TIMER_START_2_END_29             = 0x00000002,
DMU_GPU_TIMER_START_3_END_30             = 0x00000003,
DMU_GPU_TIMER_START_4_END_31             = 0x00000004,
DMU_GPU_TIMER_START_6_END_33             = 0x00000005,
DMU_GPU_TIMER_START_8_END_35             = 0x00000006,
DMU_GPU_TIMER_START_10_END_37            = 0x00000007,
} DMU_DC_GPU_TIMER_START_POSITION;

/*
 * DMU_DC_GPU_TIMER_READ_SELECT enum
 */

typedef enum DMU_DC_GPU_TIMER_READ_SELECT {
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_V_UPDATE_0  = 0x00000000,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_V_UPDATE_1  = 0x00000001,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_V_UPDATE_2  = 0x00000002,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_V_UPDATE_3  = 0x00000003,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_V_UPDATE_4  = 0x00000004,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_V_UPDATE_5  = 0x00000005,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_V_UPDATE_6  = 0x00000006,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_V_UPDATE_7  = 0x00000007,
DMU_GPU_TIMER_READ_SELECT_LOWER_D5_V_UPDATE_8  = 0x00000008,
DMU_GPU_TIMER_READ_SELECT_UPPER_D5_V_UPDATE_9  = 0x00000009,
DMU_GPU_TIMER_READ_SELECT_LOWER_D6_V_UPDATE_10  = 0x0000000a,
DMU_GPU_TIMER_READ_SELECT_UPPER_D6_V_UPDATE_11  = 0x0000000b,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_V_STARTUP_12  = 0x0000000c,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_V_STARTUP_13  = 0x0000000d,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_V_STARTUP_14  = 0x0000000e,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_V_STARTUP_15  = 0x0000000f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_V_STARTUP_16  = 0x00000010,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_V_STARTUP_17  = 0x00000011,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_V_STARTUP_18  = 0x00000012,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_V_STARTUP_19  = 0x00000013,
DMU_GPU_TIMER_READ_SELECT_LOWER_D5_V_STARTUP_20  = 0x00000014,
DMU_GPU_TIMER_READ_SELECT_UPPER_D5_V_STARTUP_21  = 0x00000015,
DMU_GPU_TIMER_READ_SELECT_LOWER_D6_V_STARTUP_22  = 0x00000016,
DMU_GPU_TIMER_READ_SELECT_UPPER_D6_V_STARTUP_23  = 0x00000017,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_VSYNC_NOM_24  = 0x00000018,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_VSYNC_NOM_25  = 0x00000019,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_VSYNC_NOM_26  = 0x0000001a,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_VSYNC_NOM_27  = 0x0000001b,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_VSYNC_NOM_28  = 0x0000001c,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_VSYNC_NOM_29  = 0x0000001d,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_VSYNC_NOM_30  = 0x0000001e,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_VSYNC_NOM_31  = 0x0000001f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D5_VSYNC_NOM_32  = 0x00000020,
DMU_GPU_TIMER_READ_SELECT_UPPER_D5_VSYNC_NOM_33  = 0x00000021,
DMU_GPU_TIMER_READ_SELECT_LOWER_D6_VSYNC_NOM_34  = 0x00000022,
DMU_GPU_TIMER_READ_SELECT_UPPER_D6_VSYNC_NOM_35  = 0x00000023,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_VREADY_36  = 0x00000024,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_VREADY_37  = 0x00000025,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_VREADY_38  = 0x00000026,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_VREADY_39  = 0x00000027,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_VREADY_40  = 0x00000028,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_VREADY_41  = 0x00000029,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_VREADY_42  = 0x0000002a,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_VREADY_43  = 0x0000002b,
DMU_GPU_TIMER_READ_SELECT_LOWER_D5_VREADY_44  = 0x0000002c,
DMU_GPU_TIMER_READ_SELECT_UPPER_D5_VREADY_45  = 0x0000002d,
DMU_GPU_TIMER_READ_SELECT_LOWER_D6_VREADY_46  = 0x0000002e,
DMU_GPU_TIMER_READ_SELECT_UPPER_D6_VREADY_47  = 0x0000002f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_FLIP_48  = 0x00000030,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_FLIP_49  = 0x00000031,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_FLIP_50  = 0x00000032,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_FLIP_51  = 0x00000033,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_FLIP_52  = 0x00000034,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_FLIP_53  = 0x00000035,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_FLIP_54  = 0x00000036,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_FLIP_55  = 0x00000037,
DMU_GPU_TIMER_READ_SELECT_LOWER_D5_FLIP_56  = 0x00000038,
DMU_GPU_TIMER_READ_SELECT_UPPER_D5_FLIP_57  = 0x00000039,
DMU_GPU_TIMER_READ_SELECT_LOWER_D6_FLIP_58  = 0x0000003a,
DMU_GPU_TIMER_READ_SELECT_UPPER_D6_FLIP_59  = 0x0000003b,
RESERVED_60                              = 0x0000003c,
RESERVED_61                              = 0x0000003d,
RESERVED_62                              = 0x0000003e,
RESERVED_63                              = 0x0000003f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_V_UPDATE_NO_LOCK_64  = 0x00000040,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_V_UPDATE_NO_LOCK_65  = 0x00000041,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_V_UPDATE_NO_LOCK_66  = 0x00000042,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_V_UPDATE_NO_LOCK_67  = 0x00000043,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_V_UPDATE_NO_LOCK_68  = 0x00000044,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_V_UPDATE_NO_LOCK_69  = 0x00000045,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_V_UPDATE_NO_LOCK_70  = 0x00000046,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_V_UPDATE_NO_LOCK_71  = 0x00000047,
DMU_GPU_TIMER_READ_SELECT_LOWER_D5_V_UPDATE_NO_LOCK_72  = 0x00000048,
DMU_GPU_TIMER_READ_SELECT_UPPER_D5_V_UPDATE_NO_LOCK_73  = 0x00000049,
DMU_GPU_TIMER_READ_SELECT_LOWER_D6_V_UPDATE_NO_LOCK_74  = 0x0000004a,
DMU_GPU_TIMER_READ_SELECT_UPPER_D6_V_UPDATE_NO_LOCK_75  = 0x0000004b,
DMU_GPU_TIMER_READ_SELECT_LOWER_D1_FLIP_AWAY_76  = 0x0000004c,
DMU_GPU_TIMER_READ_SELECT_UPPER_D1_FLIP_AWAY_77  = 0x0000004d,
DMU_GPU_TIMER_READ_SELECT_LOWER_D2_FLIP_AWAY_78  = 0x0000004e,
DMU_GPU_TIMER_READ_SELECT_UPPER_D2_FLIP_AWAY_79  = 0x0000004f,
DMU_GPU_TIMER_READ_SELECT_LOWER_D3_FLIP_AWAY_80  = 0x00000050,
DMU_GPU_TIMER_READ_SELECT_UPPER_D3_FLIP_AWAY_81  = 0x00000051,
DMU_GPU_TIMER_READ_SELECT_LOWER_D4_FLIP_AWAY_82  = 0x00000052,
DMU_GPU_TIMER_READ_SELECT_UPPER_D4_FLIP_AWAY_83  = 0x00000053,
DMU_GPU_TIMER_READ_SELECT_LOWER_D5_FLIP_AWAY_84  = 0x00000054,
DMU_GPU_TIMER_READ_SELECT_UPPER_D5_FLIP_AWAY_85  = 0x00000055,
DMU_GPU_TIMER_READ_SELECT_LOWER_D6_FLIP_AWAY_86  = 0x00000056,
DMU_GPU_TIMER_READ_SELECT_UPPER_D6_FLIP_AWAY_87  = 0x00000057,
RESERVED_88                              = 0x00000058,
RESERVED_89                              = 0x00000059,
RESERVED_90                              = 0x0000005a,
RESERVED_91                              = 0x0000005b,
} DMU_DC_GPU_TIMER_READ_SELECT;

/*
 * IHC_INTERRUPT_LINE_STATUS enum
 */

typedef enum IHC_INTERRUPT_LINE_STATUS {
INTERRUPT_LINE_NOT_ASSERTED              = 0x00000000,
INTERRUPT_LINE_ASSERTED                  = 0x00000001,
} IHC_INTERRUPT_LINE_STATUS;

/*******************************************************
 * DMU_MISC Enums
 *******************************************************/

/*
 * DMU_CLOCK_GATING_DISABLE enum
 */

typedef enum DMU_CLOCK_GATING_DISABLE {
DMU_ENABLE_CLOCK_GATING                  = 0x00000000,
DMU_DISABLE_CLOCK_GATING                 = 0x00000001,
} DMU_CLOCK_GATING_DISABLE;

/*
 * DMU_CLOCK_ON enum
 */

typedef enum DMU_CLOCK_ON {
DMU_CLOCK_STATUS_ON                      = 0x00000000,
DMU_CLOCK_STATUS_OFF                     = 0x00000001,
} DMU_CLOCK_ON;

/*
 * DC_SMU_INTERRUPT_ENABLE enum
 */

typedef enum DC_SMU_INTERRUPT_ENABLE {
DISABLE_THE_INTERRUPT                    = 0x00000000,
ENABLE_THE_INTERRUPT                     = 0x00000001,
} DC_SMU_INTERRUPT_ENABLE;

/*
 * STATIC_SCREEN_SMU_INTR enum
 */

typedef enum STATIC_SCREEN_SMU_INTR {
STATIC_SCREEN_SMU_INTR_NOOP              = 0x00000000,
SET_STATIC_SCREEN_SMU_INTR               = 0x00000001,
} STATIC_SCREEN_SMU_INTR;

/*******************************************************
 * DCCG Enums
 *******************************************************/

/*
 * ENABLE enum
 */

typedef enum ENABLE {
DISABLE_THE_FEATURE                      = 0x00000000,
ENABLE_THE_FEATURE                       = 0x00000001,
} ENABLE;

/*
 * DS_HW_CAL_ENABLE enum
 */

typedef enum DS_HW_CAL_ENABLE {
DS_HW_CAL_DIS                            = 0x00000000,
DS_HW_CAL_EN                             = 0x00000001,
} DS_HW_CAL_ENABLE;

/*
 * ENABLE_CLOCK enum
 */

typedef enum ENABLE_CLOCK {
DISABLE_THE_CLOCK                        = 0x00000000,
ENABLE_THE_CLOCK                         = 0x00000001,
} ENABLE_CLOCK;

/*
 * CLEAR_SMU_INTR enum
 */

typedef enum CLEAR_SMU_INTR {
SMU_INTR_STATUS_NOOP                     = 0x00000000,
SMU_INTR_STATUS_CLEAR                    = 0x00000001,
} CLEAR_SMU_INTR;

/*
 * JITTER_REMOVE_DISABLE enum
 */

typedef enum JITTER_REMOVE_DISABLE {
ENABLE_JITTER_REMOVAL                    = 0x00000000,
DISABLE_JITTER_REMOVAL                   = 0x00000001,
} JITTER_REMOVE_DISABLE;

/*
 * DS_REF_SRC enum
 */

typedef enum DS_REF_SRC {
DS_REF_IS_XTALIN                         = 0x00000000,
DS_REF_IS_EXT_GENLOCK                    = 0x00000001,
DS_REF_IS_PCIE                           = 0x00000002,
} DS_REF_SRC;

/*
 * DISABLE_CLOCK_GATING enum
 */

typedef enum DISABLE_CLOCK_GATING {
CLOCK_GATING_ENABLED                     = 0x00000000,
CLOCK_GATING_DISABLED                    = 0x00000001,
} DISABLE_CLOCK_GATING;

/*
 * DISABLE_CLOCK_GATING_IN_DCO enum
 */

typedef enum DISABLE_CLOCK_GATING_IN_DCO {
CLOCK_GATING_ENABLED_IN_DCO              = 0x00000000,
CLOCK_GATING_DISABLED_IN_DCO             = 0x00000001,
} DISABLE_CLOCK_GATING_IN_DCO;

/*
 * DCCG_DEEP_COLOR_CNTL enum
 */

typedef enum DCCG_DEEP_COLOR_CNTL {
DCCG_DEEP_COLOR_DTO_DISABLE              = 0x00000000,
DCCG_DEEP_COLOR_DTO_5_4_RATIO            = 0x00000001,
DCCG_DEEP_COLOR_DTO_3_2_RATIO            = 0x00000002,
DCCG_DEEP_COLOR_DTO_2_1_RATIO            = 0x00000003,
} DCCG_DEEP_COLOR_CNTL;

/*
 * REFCLK_CLOCK_EN enum
 */

typedef enum REFCLK_CLOCK_EN {
REFCLK_CLOCK_EN_XTALIN_CLK               = 0x00000000,
REFCLK_CLOCK_EN_ALLOW_SRC_SEL            = 0x00000001,
} REFCLK_CLOCK_EN;

/*
 * REFCLK_SRC_SEL enum
 */

typedef enum REFCLK_SRC_SEL {
REFCLK_SRC_SEL_PCIE_REFCLK               = 0x00000000,
REFCLK_SRC_SEL_CPL_REFCLK                = 0x00000001,
} REFCLK_SRC_SEL;

/*
 * DPREFCLK_SRC_SEL enum
 */

typedef enum DPREFCLK_SRC_SEL {
DPREFCLK_SRC_SEL_CK                      = 0x00000000,
DPREFCLK_SRC_SEL_P0PLL                   = 0x00000001,
DPREFCLK_SRC_SEL_P1PLL                   = 0x00000002,
DPREFCLK_SRC_SEL_P2PLL                   = 0x00000003,
} DPREFCLK_SRC_SEL;

/*
 * XTAL_REF_SEL enum
 */

typedef enum XTAL_REF_SEL {
XTAL_REF_SEL_1X                          = 0x00000000,
XTAL_REF_SEL_2X                          = 0x00000001,
} XTAL_REF_SEL;

/*
 * XTAL_REF_CLOCK_SOURCE_SEL enum
 */

typedef enum XTAL_REF_CLOCK_SOURCE_SEL {
XTAL_REF_CLOCK_SOURCE_SEL_XTALIN         = 0x00000000,
XTAL_REF_CLOCK_SOURCE_SEL_DCCGREFCLK     = 0x00000001,
} XTAL_REF_CLOCK_SOURCE_SEL;

/*
 * MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL enum
 */

typedef enum MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL {
MICROSECOND_TIME_BASE_CLOCK_IS_XTALIN    = 0x00000000,
MICROSECOND_TIME_BASE_CLOCK_IS_DCCGREFCLK  = 0x00000001,
} MICROSECOND_TIME_BASE_CLOCK_SOURCE_SEL;

/*
 * ALLOW_SR_ON_TRANS_REQ enum
 */

typedef enum ALLOW_SR_ON_TRANS_REQ {
ALLOW_SR_ON_TRANS_REQ_ENABLE             = 0x00000000,
ALLOW_SR_ON_TRANS_REQ_DISABLE            = 0x00000001,
} ALLOW_SR_ON_TRANS_REQ;

/*
 * MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL enum
 */

typedef enum MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL {
MILLISECOND_TIME_BASE_CLOCK_IS_XTALIN    = 0x00000000,
MILLISECOND_TIME_BASE_CLOCK_IS_DCCGREFCLK  = 0x00000001,
} MILLISECOND_TIME_BASE_CLOCK_SOURCE_SEL;

/*
 * PIPE_PIXEL_RATE_SOURCE enum
 */

typedef enum PIPE_PIXEL_RATE_SOURCE {
PIPE_PIXEL_RATE_SOURCE_P0PLL             = 0x00000000,
PIPE_PIXEL_RATE_SOURCE_P1PLL             = 0x00000001,
PIPE_PIXEL_RATE_SOURCE_P2PLL             = 0x00000002,
} PIPE_PIXEL_RATE_SOURCE;

/*
 * TEST_CLK_DIV_SEL enum
 */

typedef enum TEST_CLK_DIV_SEL {
NO_DIV                                   = 0x00000000,
DIV_2                                    = 0x00000001,
DIV_4                                    = 0x00000002,
DIV_8                                    = 0x00000003,
} TEST_CLK_DIV_SEL;

/*
 * PIPE_PHYPLL_PIXEL_RATE_SOURCE enum
 */

typedef enum PIPE_PHYPLL_PIXEL_RATE_SOURCE {
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYA    = 0x00000000,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYB    = 0x00000001,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYC    = 0x00000002,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYD    = 0x00000003,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYE    = 0x00000004,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_UNIPHYF    = 0x00000005,
PIPE_PHYPLL_PIXEL_RATE_SOURCE_RESERVED   = 0x00000006,
} PIPE_PHYPLL_PIXEL_RATE_SOURCE;

/*
 * PIPE_PIXEL_RATE_PLL_SOURCE enum
 */

typedef enum PIPE_PIXEL_RATE_PLL_SOURCE {
PIPE_PIXEL_RATE_PLL_SOURCE_PHYPLL        = 0x00000000,
PIPE_PIXEL_RATE_PLL_SOURCE_DISPPLL       = 0x00000001,
} PIPE_PIXEL_RATE_PLL_SOURCE;

/*
 * DP_DTO_DS_DISABLE enum
 */

typedef enum DP_DTO_DS_DISABLE {
DP_DTO_DESPREAD_DISABLE                  = 0x00000000,
DP_DTO_DESPREAD_ENABLE                   = 0x00000001,
} DP_DTO_DS_DISABLE;

/*
 * OTG_ADD_PIXEL enum
 */

typedef enum OTG_ADD_PIXEL {
OTG_ADD_PIXEL_NOOP                       = 0x00000000,
OTG_ADD_PIXEL_FORCE                      = 0x00000001,
} OTG_ADD_PIXEL;

/*
 * OTG_DROP_PIXEL enum
 */

typedef enum OTG_DROP_PIXEL {
OTG_DROP_PIXEL_NOOP                      = 0x00000000,
OTG_DROP_PIXEL_FORCE                     = 0x00000001,
} OTG_DROP_PIXEL;

/*
 * SYMCLK_FE_FORCE_EN enum
 */

typedef enum SYMCLK_FE_FORCE_EN {
SYMCLK_FE_FORCE_EN_DISABLE               = 0x00000000,
SYMCLK_FE_FORCE_EN_ENABLE                = 0x00000001,
} SYMCLK_FE_FORCE_EN;

/*
 * SYMCLK_FE_FORCE_SRC enum
 */

typedef enum SYMCLK_FE_FORCE_SRC {
SYMCLK_FE_FORCE_SRC_UNIPHYA              = 0x00000000,
SYMCLK_FE_FORCE_SRC_UNIPHYB              = 0x00000001,
SYMCLK_FE_FORCE_SRC_UNIPHYC              = 0x00000002,
SYMCLK_FE_FORCE_SRC_UNIPHYD              = 0x00000003,
SYMCLK_FE_FORCE_SRC_UNIPHYE              = 0x00000004,
SYMCLK_FE_FORCE_SRC_UNIPHYF              = 0x00000005,
SYMCLK_FE_FORCE_SRC_RESERVED             = 0x00000006,
} SYMCLK_FE_FORCE_SRC;

/*
 * DVOACLK_COARSE_SKEW_CNTL enum
 */

typedef enum DVOACLK_COARSE_SKEW_CNTL {
DVOACLK_COARSE_SKEW_CNTL_NO_ADJUSTMENT   = 0x00000000,
DVOACLK_COARSE_SKEW_CNTL_DELAY_1_STEP    = 0x00000001,
DVOACLK_COARSE_SKEW_CNTL_DELAY_2_STEPS   = 0x00000002,
DVOACLK_COARSE_SKEW_CNTL_DELAY_3_STEPS   = 0x00000003,
DVOACLK_COARSE_SKEW_CNTL_DELAY_4_STEPS   = 0x00000004,
DVOACLK_COARSE_SKEW_CNTL_DELAY_5_STEPS   = 0x00000005,
DVOACLK_COARSE_SKEW_CNTL_DELAY_6_STEPS   = 0x00000006,
DVOACLK_COARSE_SKEW_CNTL_DELAY_7_STEPS   = 0x00000007,
DVOACLK_COARSE_SKEW_CNTL_DELAY_8_STEPS   = 0x00000008,
DVOACLK_COARSE_SKEW_CNTL_DELAY_9_STEPS   = 0x00000009,
DVOACLK_COARSE_SKEW_CNTL_DELAY_10_STEPS  = 0x0000000a,
DVOACLK_COARSE_SKEW_CNTL_DELAY_11_STEPS  = 0x0000000b,
DVOACLK_COARSE_SKEW_CNTL_DELAY_12_STEPS  = 0x0000000c,
DVOACLK_COARSE_SKEW_CNTL_DELAY_13_STEPS  = 0x0000000d,
DVOACLK_COARSE_SKEW_CNTL_DELAY_14_STEPS  = 0x0000000e,
DVOACLK_COARSE_SKEW_CNTL_DELAY_15_STEPS  = 0x0000000f,
DVOACLK_COARSE_SKEW_CNTL_EARLY_1_STEP    = 0x00000010,
DVOACLK_COARSE_SKEW_CNTL_EARLY_2_STEPS   = 0x00000011,
DVOACLK_COARSE_SKEW_CNTL_EARLY_3_STEPS   = 0x00000012,
DVOACLK_COARSE_SKEW_CNTL_EARLY_4_STEPS   = 0x00000013,
DVOACLK_COARSE_SKEW_CNTL_EARLY_5_STEPS   = 0x00000014,
DVOACLK_COARSE_SKEW_CNTL_EARLY_6_STEPS   = 0x00000015,
DVOACLK_COARSE_SKEW_CNTL_EARLY_7_STEPS   = 0x00000016,
DVOACLK_COARSE_SKEW_CNTL_EARLY_8_STEPS   = 0x00000017,
DVOACLK_COARSE_SKEW_CNTL_EARLY_9_STEPS   = 0x00000018,
DVOACLK_COARSE_SKEW_CNTL_EARLY_10_STEPS  = 0x00000019,
DVOACLK_COARSE_SKEW_CNTL_EARLY_11_STEPS  = 0x0000001a,
DVOACLK_COARSE_SKEW_CNTL_EARLY_12_STEPS  = 0x0000001b,
DVOACLK_COARSE_SKEW_CNTL_EARLY_13_STEPS  = 0x0000001c,
DVOACLK_COARSE_SKEW_CNTL_EARLY_14_STEPS  = 0x0000001d,
DVOACLK_COARSE_SKEW_CNTL_EARLY_15_STEPS  = 0x0000001e,
} DVOACLK_COARSE_SKEW_CNTL;

/*
 * DVOACLK_FINE_SKEW_CNTL enum
 */

typedef enum DVOACLK_FINE_SKEW_CNTL {
DVOACLK_FINE_SKEW_CNTL_NO_ADJUSTMENT     = 0x00000000,
DVOACLK_FINE_SKEW_CNTL_DELAY_1_STEP      = 0x00000001,
DVOACLK_FINE_SKEW_CNTL_DELAY_2_STEPS     = 0x00000002,
DVOACLK_FINE_SKEW_CNTL_DELAY_3_STEPS     = 0x00000003,
DVOACLK_FINE_SKEW_CNTL_EARLY_1_STEP      = 0x00000004,
DVOACLK_FINE_SKEW_CNTL_EARLY_2_STEPS     = 0x00000005,
DVOACLK_FINE_SKEW_CNTL_EARLY_3_STEPS     = 0x00000006,
DVOACLK_FINE_SKEW_CNTL_EARLY_4_STEPS     = 0x00000007,
} DVOACLK_FINE_SKEW_CNTL;

/*
 * DVOACLKD_IN_PHASE enum
 */

typedef enum DVOACLKD_IN_PHASE {
DVOACLKD_IN_OPPOSITE_PHASE_WITH_PCLK_DVO  = 0x00000000,
DVOACLKD_IN_PHASE_WITH_PCLK_DVO          = 0x00000001,
} DVOACLKD_IN_PHASE;

/*
 * DVOACLKC_IN_PHASE enum
 */

typedef enum DVOACLKC_IN_PHASE {
DVOACLKC_IN_OPPOSITE_PHASE_WITH_PCLK_DVO  = 0x00000000,
DVOACLKC_IN_PHASE_WITH_PCLK_DVO          = 0x00000001,
} DVOACLKC_IN_PHASE;

/*
 * DVOACLKC_MVP_IN_PHASE enum
 */

typedef enum DVOACLKC_MVP_IN_PHASE {
DVOACLKC_MVP_IN_OPPOSITE_PHASE_WITH_PCLK_DVO  = 0x00000000,
DVOACLKC_MVP_IN_PHASE_WITH_PCLK_DVO      = 0x00000001,
} DVOACLKC_MVP_IN_PHASE;

/*
 * DVOACLKC_MVP_SKEW_PHASE_OVERRIDE enum
 */

typedef enum DVOACLKC_MVP_SKEW_PHASE_OVERRIDE {
DVOACLKC_MVP_SKEW_PHASE_OVERRIDE_DISABLE  = 0x00000000,
DVOACLKC_MVP_SKEW_PHASE_OVERRIDE_ENABLE  = 0x00000001,
} DVOACLKC_MVP_SKEW_PHASE_OVERRIDE;

/*
 * DCCG_AUDIO_DTO0_SOURCE_SEL enum
 */

typedef enum DCCG_AUDIO_DTO0_SOURCE_SEL {
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG0          = 0x00000000,
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG1          = 0x00000001,
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG2          = 0x00000002,
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG3          = 0x00000003,
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG4          = 0x00000004,
DCCG_AUDIO_DTO0_SOURCE_SEL_OTG5          = 0x00000005,
DCCG_AUDIO_DTO0_SOURCE_SEL_RESERVED      = 0x00000006,
} DCCG_AUDIO_DTO0_SOURCE_SEL;

/*
 * DCCG_AUDIO_DTO_SEL enum
 */

typedef enum DCCG_AUDIO_DTO_SEL {
DCCG_AUDIO_DTO_SEL_AUDIO_DTO0            = 0x00000000,
DCCG_AUDIO_DTO_SEL_AUDIO_DTO1            = 0x00000001,
DCCG_AUDIO_DTO_SEL_NO_AUDIO_DTO          = 0x00000002,
} DCCG_AUDIO_DTO_SEL;

/*
 * DCCG_AUDIO_DTO2_SOURCE_SEL enum
 */

typedef enum DCCG_AUDIO_DTO2_SOURCE_SEL {
DCCG_AUDIO_DTO2_SOURCE_SEL_AMCLK0        = 0x00000000,
DCCG_AUDIO_DTO2_SOURCE_SEL_AMCLK1        = 0x00000001,
} DCCG_AUDIO_DTO2_SOURCE_SEL;

/*
 * DCCG_AUDIO_DTO_USE_512FBR_DTO enum
 */

typedef enum DCCG_AUDIO_DTO_USE_512FBR_DTO {
DCCG_AUDIO_DTO_USE_128FBR_FOR_DP         = 0x00000000,
DCCG_AUDIO_DTO_USE_512FBR_FOR_DP         = 0x00000001,
} DCCG_AUDIO_DTO_USE_512FBR_DTO;

/*
 * DISPCLK_FREQ_RAMP_DONE enum
 */

typedef enum DISPCLK_FREQ_RAMP_DONE {
DISPCLK_FREQ_RAMP_IN_PROGRESS            = 0x00000000,
DISPCLK_FREQ_RAMP_COMPLETED              = 0x00000001,
} DISPCLK_FREQ_RAMP_DONE;

/*
 * DCCG_FIFO_ERRDET_RESET enum
 */

typedef enum DCCG_FIFO_ERRDET_RESET {
DCCG_FIFO_ERRDET_RESET_NOOP              = 0x00000000,
DCCG_FIFO_ERRDET_RESET_FORCE             = 0x00000001,
} DCCG_FIFO_ERRDET_RESET;

/*
 * DCCG_FIFO_ERRDET_STATE enum
 */

typedef enum DCCG_FIFO_ERRDET_STATE {
DCCG_FIFO_ERRDET_STATE_CALIBRATION       = 0x00000000,
DCCG_FIFO_ERRDET_STATE_DETECTION         = 0x00000001,
} DCCG_FIFO_ERRDET_STATE;

/*
 * DCCG_FIFO_ERRDET_OVR_EN enum
 */

typedef enum DCCG_FIFO_ERRDET_OVR_EN {
DCCG_FIFO_ERRDET_OVR_DISABLE             = 0x00000000,
DCCG_FIFO_ERRDET_OVR_ENABLE              = 0x00000001,
} DCCG_FIFO_ERRDET_OVR_EN;

/*
 * DISPCLK_CHG_FWD_CORR_DISABLE enum
 */

typedef enum DISPCLK_CHG_FWD_CORR_DISABLE {
DISPCLK_CHG_FWD_CORR_ENABLE_AT_BEGINNING  = 0x00000000,
DISPCLK_CHG_FWD_CORR_DISABLE_AT_BEGINNING  = 0x00000001,
} DISPCLK_CHG_FWD_CORR_DISABLE;

/*
 * DC_MEM_GLOBAL_PWR_REQ_DIS enum
 */

typedef enum DC_MEM_GLOBAL_PWR_REQ_DIS {
DC_MEM_GLOBAL_PWR_REQ_ENABLE             = 0x00000000,
DC_MEM_GLOBAL_PWR_REQ_DISABLE            = 0x00000001,
} DC_MEM_GLOBAL_PWR_REQ_DIS;

/*
 * DCCG_PERF_RUN enum
 */

typedef enum DCCG_PERF_RUN {
DCCG_PERF_RUN_NOOP                       = 0x00000000,
DCCG_PERF_RUN_START                      = 0x00000001,
} DCCG_PERF_RUN;

/*
 * DCCG_PERF_MODE_VSYNC enum
 */

typedef enum DCCG_PERF_MODE_VSYNC {
DCCG_PERF_MODE_VSYNC_NOOP                = 0x00000000,
DCCG_PERF_MODE_VSYNC_START               = 0x00000001,
} DCCG_PERF_MODE_VSYNC;

/*
 * DCCG_PERF_MODE_HSYNC enum
 */

typedef enum DCCG_PERF_MODE_HSYNC {
DCCG_PERF_MODE_HSYNC_NOOP                = 0x00000000,
DCCG_PERF_MODE_HSYNC_START               = 0x00000001,
} DCCG_PERF_MODE_HSYNC;

/*
 * DCCG_PERF_OTG_SELECT enum
 */

typedef enum DCCG_PERF_OTG_SELECT {
DCCG_PERF_SEL_OTG0                       = 0x00000000,
DCCG_PERF_SEL_OTG1                       = 0x00000001,
DCCG_PERF_SEL_OTG2                       = 0x00000002,
DCCG_PERF_SEL_OTG3                       = 0x00000003,
DCCG_PERF_SEL_OTG4                       = 0x00000004,
DCCG_PERF_SEL_OTG5                       = 0x00000005,
DCCG_PERF_SEL_RESERVED                   = 0x00000006,
} DCCG_PERF_OTG_SELECT;

/*
 * CLOCK_BRANCH_SOFT_RESET enum
 */

typedef enum CLOCK_BRANCH_SOFT_RESET {
CLOCK_BRANCH_SOFT_RESET_NOOP             = 0x00000000,
CLOCK_BRANCH_SOFT_RESET_FORCE            = 0x00000001,
} CLOCK_BRANCH_SOFT_RESET;

/*
 * PLL_CFG_IF_SOFT_RESET enum
 */

typedef enum PLL_CFG_IF_SOFT_RESET {
PLL_CFG_IF_SOFT_RESET_NOOP               = 0x00000000,
PLL_CFG_IF_SOFT_RESET_FORCE              = 0x00000001,
} PLL_CFG_IF_SOFT_RESET;

/*
 * DVO_ENABLE_RST enum
 */

typedef enum DVO_ENABLE_RST {
DVO_ENABLE_RST_DISABLE                   = 0x00000000,
DVO_ENABLE_RST_ENABLE                    = 0x00000001,
} DVO_ENABLE_RST;

/*
 * DS_JITTER_COUNT_SRC_SEL enum
 */

typedef enum DS_JITTER_COUNT_SRC_SEL {
DS_JITTER_COUNT_SRC_SEL0                 = 0x00000000,
DS_JITTER_COUNT_SRC_SEL1                 = 0x00000001,
} DS_JITTER_COUNT_SRC_SEL;

/*
 * DIO_FIFO_ERROR enum
 */

typedef enum DIO_FIFO_ERROR {
DIO_FIFO_ERROR_00                        = 0x00000000,
DIO_FIFO_ERROR_01                        = 0x00000001,
DIO_FIFO_ERROR_10                        = 0x00000002,
DIO_FIFO_ERROR_11                        = 0x00000003,
} DIO_FIFO_ERROR;

/*
 * VSYNC_CNT_REFCLK_SEL enum
 */

typedef enum VSYNC_CNT_REFCLK_SEL {
VSYNC_CNT_REFCLK_SEL_0                   = 0x00000000,
VSYNC_CNT_REFCLK_SEL_1                   = 0x00000001,
} VSYNC_CNT_REFCLK_SEL;

/*
 * VSYNC_CNT_RESET_SEL enum
 */

typedef enum VSYNC_CNT_RESET_SEL {
VSYNC_CNT_RESET_SEL_0                    = 0x00000000,
VSYNC_CNT_RESET_SEL_1                    = 0x00000001,
} VSYNC_CNT_RESET_SEL;

/*
 * VSYNC_CNT_LATCH_MASK enum
 */

typedef enum VSYNC_CNT_LATCH_MASK {
VSYNC_CNT_LATCH_MASK_0                   = 0x00000000,
VSYNC_CNT_LATCH_MASK_1                   = 0x00000001,
} VSYNC_CNT_LATCH_MASK;

/*******************************************************
 * HPD Enums
 *******************************************************/

/*
 * HPD_INT_CONTROL_ACK enum
 */

typedef enum HPD_INT_CONTROL_ACK {
HPD_INT_CONTROL_ACK_0                    = 0x00000000,
HPD_INT_CONTROL_ACK_1                    = 0x00000001,
} HPD_INT_CONTROL_ACK;

/*
 * HPD_INT_CONTROL_POLARITY enum
 */

typedef enum HPD_INT_CONTROL_POLARITY {
HPD_INT_CONTROL_GEN_INT_ON_DISCON        = 0x00000000,
HPD_INT_CONTROL_GEN_INT_ON_CON           = 0x00000001,
} HPD_INT_CONTROL_POLARITY;

/*
 * HPD_INT_CONTROL_RX_INT_ACK enum
 */

typedef enum HPD_INT_CONTROL_RX_INT_ACK {
HPD_INT_CONTROL_RX_INT_ACK_0             = 0x00000000,
HPD_INT_CONTROL_RX_INT_ACK_1             = 0x00000001,
} HPD_INT_CONTROL_RX_INT_ACK;

/*******************************************************
 * DP Enums
 *******************************************************/

/*
 * DP_MSO_NUM_OF_SST_LINKS enum
 */

typedef enum DP_MSO_NUM_OF_SST_LINKS {
DP_MSO_ONE_SSTLINK                       = 0x00000000,
DP_MSO_TWO_SSTLINK                       = 0x00000001,
DP_MSO_FOUR_SSTLINK                      = 0x00000002,
} DP_MSO_NUM_OF_SST_LINKS;

/*
 * DP_SYNC_POLARITY enum
 */

typedef enum DP_SYNC_POLARITY {
DP_SYNC_POLARITY_ACTIVE_HIGH             = 0x00000000,
DP_SYNC_POLARITY_ACTIVE_LOW              = 0x00000001,
} DP_SYNC_POLARITY;

/*
 * DP_COMBINE_PIXEL_NUM enum
 */

typedef enum DP_COMBINE_PIXEL_NUM {
DP_COMBINE_ONE_PIXEL                     = 0x00000000,
DP_COMBINE_TWO_PIXEL                     = 0x00000001,
DP_COMBINE_FOUR_PIXEL                    = 0x00000002,
} DP_COMBINE_PIXEL_NUM;

/*
 * DP_LINK_TRAINING_COMPLETE enum
 */

typedef enum DP_LINK_TRAINING_COMPLETE {
DP_LINK_TRAINING_NOT_COMPLETE            = 0x00000000,
DP_LINK_TRAINING_ALREADY_COMPLETE        = 0x00000001,
} DP_LINK_TRAINING_COMPLETE;

/*
 * DP_EMBEDDED_PANEL_MODE enum
 */

typedef enum DP_EMBEDDED_PANEL_MODE {
DP_EXTERNAL_PANEL                        = 0x00000000,
DP_EMBEDDED_PANEL                        = 0x00000001,
} DP_EMBEDDED_PANEL_MODE;

/*
 * DP_PIXEL_ENCODING enum
 */

typedef enum DP_PIXEL_ENCODING {
DP_PIXEL_ENCODING_RGB444                 = 0x00000000,
DP_PIXEL_ENCODING_YCBCR422               = 0x00000001,
DP_PIXEL_ENCODING_YCBCR444               = 0x00000002,
DP_PIXEL_ENCODING_RGB_WIDE_GAMUT         = 0x00000003,
DP_PIXEL_ENCODING_Y_ONLY                 = 0x00000004,
DP_PIXEL_ENCODING_YCBCR420               = 0x00000005,
DP_PIXEL_ENCODING_RESERVED               = 0x00000006,
} DP_PIXEL_ENCODING;

/*
 * DP_COMPONENT_DEPTH enum
 */

typedef enum DP_COMPONENT_DEPTH {
DP_COMPONENT_DEPTH_6BPC                  = 0x00000000,
DP_COMPONENT_DEPTH_8BPC                  = 0x00000001,
DP_COMPONENT_DEPTH_10BPC                 = 0x00000002,
DP_COMPONENT_DEPTH_12BPC                 = 0x00000003,
DP_COMPONENT_DEPTH_16BPC_RESERVED        = 0x00000004,
DP_COMPONENT_DEPTH_RESERVED              = 0x00000005,
} DP_COMPONENT_DEPTH;

/*
 * DP_UDI_LANES enum
 */

typedef enum DP_UDI_LANES {
DP_UDI_1_LANE                            = 0x00000000,
DP_UDI_2_LANES                           = 0x00000001,
DP_UDI_LANES_RESERVED                    = 0x00000002,
DP_UDI_4_LANES                           = 0x00000003,
} DP_UDI_LANES;

/*
 * DP_VID_STREAM_DIS_DEFER enum
 */

typedef enum DP_VID_STREAM_DIS_DEFER {
DP_VID_STREAM_DIS_NO_DEFER               = 0x00000000,
DP_VID_STREAM_DIS_DEFER_TO_HBLANK        = 0x00000001,
DP_VID_STREAM_DIS_DEFER_TO_VBLANK        = 0x00000002,
} DP_VID_STREAM_DIS_DEFER;

/*
 * DP_STEER_OVERFLOW_ACK enum
 */

typedef enum DP_STEER_OVERFLOW_ACK {
DP_STEER_OVERFLOW_ACK_NO_EFFECT          = 0x00000000,
DP_STEER_OVERFLOW_ACK_CLR_INTERRUPT      = 0x00000001,
} DP_STEER_OVERFLOW_ACK;

/*
 * DP_STEER_OVERFLOW_MASK enum
 */

typedef enum DP_STEER_OVERFLOW_MASK {
DP_STEER_OVERFLOW_MASKED                 = 0x00000000,
DP_STEER_OVERFLOW_UNMASK                 = 0x00000001,
} DP_STEER_OVERFLOW_MASK;

/*
 * DP_TU_OVERFLOW_ACK enum
 */

typedef enum DP_TU_OVERFLOW_ACK {
DP_TU_OVERFLOW_ACK_NO_EFFECT             = 0x00000000,
DP_TU_OVERFLOW_ACK_CLR_INTERRUPT         = 0x00000001,
} DP_TU_OVERFLOW_ACK;

/*
 * DP_VID_M_N_DOUBLE_BUFFER_MODE enum
 */

typedef enum DP_VID_M_N_DOUBLE_BUFFER_MODE {
DP_VID_M_N_DOUBLE_BUFFER_AFTER_VID_M_UPDATE  = 0x00000000,
DP_VID_M_N_DOUBLE_BUFFER_AT_FRAME_START  = 0x00000001,
} DP_VID_M_N_DOUBLE_BUFFER_MODE;

/*
 * DP_VID_M_N_GEN_EN enum
 */

typedef enum DP_VID_M_N_GEN_EN {
DP_VID_M_N_PROGRAMMED_VIA_REG            = 0x00000000,
DP_VID_M_N_CALC_AUTO                     = 0x00000001,
} DP_VID_M_N_GEN_EN;

/*
 * DP_VID_N_MUL enum
 */

typedef enum DP_VID_N_MUL {
DP_VID_M_1X_INPUT_PIXEL_RATE             = 0x00000000,
DP_VID_M_2X_INPUT_PIXEL_RATE             = 0x00000001,
DP_VID_M_4X_INPUT_PIXEL_RATE             = 0x00000002,
DP_VID_M_8X_INPUT_PIXEL_RATE             = 0x00000003,
} DP_VID_N_MUL;

/*
 * DP_VID_ENHANCED_FRAME_MODE enum
 */

typedef enum DP_VID_ENHANCED_FRAME_MODE {
VID_NORMAL_FRAME_MODE                    = 0x00000000,
VID_ENHANCED_MODE                        = 0x00000001,
} DP_VID_ENHANCED_FRAME_MODE;

/*
 * DP_VID_VBID_FIELD_POL enum
 */

typedef enum DP_VID_VBID_FIELD_POL {
DP_VID_VBID_FIELD_POL_NORMAL             = 0x00000000,
DP_VID_VBID_FIELD_POL_INV                = 0x00000001,
} DP_VID_VBID_FIELD_POL;

/*
 * DP_VID_STREAM_DISABLE_ACK enum
 */

typedef enum DP_VID_STREAM_DISABLE_ACK {
ID_STREAM_DISABLE_NO_ACK                 = 0x00000000,
ID_STREAM_DISABLE_ACKED                  = 0x00000001,
} DP_VID_STREAM_DISABLE_ACK;

/*
 * DP_VID_STREAM_DISABLE_MASK enum
 */

typedef enum DP_VID_STREAM_DISABLE_MASK {
VID_STREAM_DISABLE_MASKED                = 0x00000000,
VID_STREAM_DISABLE_UNMASK                = 0x00000001,
} DP_VID_STREAM_DISABLE_MASK;

/*
 * DPHY_ATEST_SEL_LANE0 enum
 */

typedef enum DPHY_ATEST_SEL_LANE0 {
DPHY_ATEST_LANE0_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE0_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE0;

/*
 * DPHY_ATEST_SEL_LANE1 enum
 */

typedef enum DPHY_ATEST_SEL_LANE1 {
DPHY_ATEST_LANE1_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE1_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE1;

/*
 * DPHY_ATEST_SEL_LANE2 enum
 */

typedef enum DPHY_ATEST_SEL_LANE2 {
DPHY_ATEST_LANE2_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE2_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE2;

/*
 * DPHY_ATEST_SEL_LANE3 enum
 */

typedef enum DPHY_ATEST_SEL_LANE3 {
DPHY_ATEST_LANE3_PRBS_PATTERN            = 0x00000000,
DPHY_ATEST_LANE3_REG_PATTERN             = 0x00000001,
} DPHY_ATEST_SEL_LANE3;

/*
 * DPHY_BYPASS enum
 */

typedef enum DPHY_BYPASS {
DPHY_8B10B_OUTPUT                        = 0x00000000,
DPHY_DBG_OUTPUT                          = 0x00000001,
} DPHY_BYPASS;

/*
 * DPHY_SKEW_BYPASS enum
 */

typedef enum DPHY_SKEW_BYPASS {
DPHY_WITH_SKEW                           = 0x00000000,
DPHY_NO_SKEW                             = 0x00000001,
} DPHY_SKEW_BYPASS;

/*
 * DPHY_TRAINING_PATTERN_SEL enum
 */

typedef enum DPHY_TRAINING_PATTERN_SEL {
DPHY_TRAINING_PATTERN_1                  = 0x00000000,
DPHY_TRAINING_PATTERN_2                  = 0x00000001,
DPHY_TRAINING_PATTERN_3                  = 0x00000002,
DPHY_TRAINING_PATTERN_4                  = 0x00000003,
} DPHY_TRAINING_PATTERN_SEL;

/*
 * DPHY_8B10B_RESET enum
 */

typedef enum DPHY_8B10B_RESET {
DPHY_8B10B_NOT_RESET                     = 0x00000000,
DPHY_8B10B_RESETET                       = 0x00000001,
} DPHY_8B10B_RESET;

/*
 * DP_DPHY_8B10B_EXT_DISP enum
 */

typedef enum DP_DPHY_8B10B_EXT_DISP {
DP_DPHY_8B10B_EXT_DISP_ZERO              = 0x00000000,
DP_DPHY_8B10B_EXT_DISP_ONE               = 0x00000001,
} DP_DPHY_8B10B_EXT_DISP;

/*
 * DPHY_8B10B_CUR_DISP enum
 */

typedef enum DPHY_8B10B_CUR_DISP {
DPHY_8B10B_CUR_DISP_ZERO                 = 0x00000000,
DPHY_8B10B_CUR_DISP_ONE                  = 0x00000001,
} DPHY_8B10B_CUR_DISP;

/*
 * DPHY_PRBS_EN enum
 */

typedef enum DPHY_PRBS_EN {
DPHY_PRBS_DISABLE                        = 0x00000000,
DPHY_PRBS_ENABLE                         = 0x00000001,
} DPHY_PRBS_EN;

/*
 * DPHY_PRBS_SEL enum
 */

typedef enum DPHY_PRBS_SEL {
DPHY_PRBS7_SELECTED                      = 0x00000000,
DPHY_PRBS23_SELECTED                     = 0x00000001,
DPHY_PRBS11_SELECTED                     = 0x00000002,
} DPHY_PRBS_SEL;

/*
 * DPHY_FEC_ENABLE enum
 */

typedef enum DPHY_FEC_ENABLE {
DPHY_FEC_DISABLED                        = 0x00000000,
DPHY_FEC_ENABLED                         = 0x00000001,
} DPHY_FEC_ENABLE;

/*
 * FEC_ACTIVE_STATUS enum
 */

typedef enum FEC_ACTIVE_STATUS {
DPHY_FEC_NOT_ACTIVE                      = 0x00000000,
DPHY_FEC_ACTIVE                          = 0x00000001,
} FEC_ACTIVE_STATUS;

/*
 * DPHY_FEC_READY enum
 */

typedef enum DPHY_FEC_READY {
DPHY_FEC_READY_EN                        = 0x00000000,
DPHY_FEC_READY_DIS                       = 0x00000001,
} DPHY_FEC_READY;

/*
 * DPHY_LOAD_BS_COUNT_START enum
 */

typedef enum DPHY_LOAD_BS_COUNT_START {
DPHY_LOAD_BS_COUNT_STARTED               = 0x00000000,
DPHY_LOAD_BS_COUNT_NOT_STARTED           = 0x00000001,
} DPHY_LOAD_BS_COUNT_START;

/*
 * DPHY_CRC_EN enum
 */

typedef enum DPHY_CRC_EN {
DPHY_CRC_DISABLED                        = 0x00000000,
DPHY_CRC_ENABLED                         = 0x00000001,
} DPHY_CRC_EN;

/*
 * DPHY_CRC_CONT_EN enum
 */

typedef enum DPHY_CRC_CONT_EN {
DPHY_CRC_ONE_SHOT                        = 0x00000000,
DPHY_CRC_CONTINUOUS                      = 0x00000001,
} DPHY_CRC_CONT_EN;

/*
 * DPHY_CRC_FIELD enum
 */

typedef enum DPHY_CRC_FIELD {
DPHY_CRC_START_FROM_TOP_FIELD            = 0x00000000,
DPHY_CRC_START_FROM_BOTTOM_FIELD         = 0x00000001,
} DPHY_CRC_FIELD;

/*
 * DPHY_CRC_SEL enum
 */

typedef enum DPHY_CRC_SEL {
DPHY_CRC_LANE0_SELECTED                  = 0x00000000,
DPHY_CRC_LANE1_SELECTED                  = 0x00000001,
DPHY_CRC_LANE2_SELECTED                  = 0x00000002,
DPHY_CRC_LANE3_SELECTED                  = 0x00000003,
} DPHY_CRC_SEL;

/*
 * DPHY_RX_FAST_TRAINING_CAPABLE enum
 */

typedef enum DPHY_RX_FAST_TRAINING_CAPABLE {
DPHY_FAST_TRAINING_NOT_CAPABLE_0         = 0x00000000,
DPHY_FAST_TRAINING_CAPABLE               = 0x00000001,
} DPHY_RX_FAST_TRAINING_CAPABLE;

/*
 * DP_SEC_COLLISION_ACK enum
 */

typedef enum DP_SEC_COLLISION_ACK {
DP_SEC_COLLISION_ACK_NO_EFFECT           = 0x00000000,
DP_SEC_COLLISION_ACK_CLR_FLAG            = 0x00000001,
} DP_SEC_COLLISION_ACK;

/*
 * DP_SEC_AUDIO_MUTE enum
 */

typedef enum DP_SEC_AUDIO_MUTE {
DP_SEC_AUDIO_MUTE_HW_CTRL                = 0x00000000,
DP_SEC_AUDIO_MUTE_SW_CTRL                = 0x00000001,
} DP_SEC_AUDIO_MUTE;

/*
 * DP_SEC_TIMESTAMP_MODE enum
 */

typedef enum DP_SEC_TIMESTAMP_MODE {
DP_SEC_TIMESTAMP_PROGRAMMABLE_MODE       = 0x00000000,
DP_SEC_TIMESTAMP_AUTO_CALC_MODE          = 0x00000001,
} DP_SEC_TIMESTAMP_MODE;

/*
 * DP_SEC_ASP_PRIORITY enum
 */

typedef enum DP_SEC_ASP_PRIORITY {
DP_SEC_ASP_LOW_PRIORITY                  = 0x00000000,
DP_SEC_ASP_HIGH_PRIORITY                 = 0x00000001,
} DP_SEC_ASP_PRIORITY;

/*
 * DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE enum
 */

typedef enum DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE {
DP_SEC_ASP_CHANNEL_COUNT_FROM_AZ         = 0x00000000,
DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE_ENABLED  = 0x00000001,
} DP_SEC_ASP_CHANNEL_COUNT_OVERRIDE;

/*
 * DP_MSE_SAT_UPDATE_ACT enum
 */

typedef enum DP_MSE_SAT_UPDATE_ACT {
DP_MSE_SAT_UPDATE_NO_ACTION              = 0x00000000,
DP_MSE_SAT_UPDATE_WITH_TRIGGER           = 0x00000001,
DP_MSE_SAT_UPDATE_WITHOUT_TRIGGER        = 0x00000002,
} DP_MSE_SAT_UPDATE_ACT;

/*
 * DP_MSE_LINK_LINE enum
 */

typedef enum DP_MSE_LINK_LINE {
DP_MSE_LINK_LINE_32_MTP_LONG             = 0x00000000,
DP_MSE_LINK_LINE_64_MTP_LONG             = 0x00000001,
DP_MSE_LINK_LINE_128_MTP_LONG            = 0x00000002,
DP_MSE_LINK_LINE_256_MTP_LONG            = 0x00000003,
} DP_MSE_LINK_LINE;

/*
 * DP_MSE_BLANK_CODE enum
 */

typedef enum DP_MSE_BLANK_CODE {
DP_MSE_BLANK_CODE_SF_FILLED              = 0x00000000,
DP_MSE_BLANK_CODE_ZERO_FILLED            = 0x00000001,
} DP_MSE_BLANK_CODE;

/*
 * DP_MSE_TIMESTAMP_MODE enum
 */

typedef enum DP_MSE_TIMESTAMP_MODE {
DP_MSE_TIMESTAMP_CALC_BASED_ON_LINK_RATE  = 0x00000000,
DP_MSE_TIMESTAMP_CALC_BASED_ON_VC_RATE   = 0x00000001,
} DP_MSE_TIMESTAMP_MODE;

/*
 * DP_MSE_ZERO_ENCODER enum
 */

typedef enum DP_MSE_ZERO_ENCODER {
DP_MSE_NOT_ZERO_FE_ENCODER               = 0x00000000,
DP_MSE_ZERO_FE_ENCODER                   = 0x00000001,
} DP_MSE_ZERO_ENCODER;

/*
 * DP_DPHY_HBR2_PATTERN_CONTROL_MODE enum
 */

typedef enum DP_DPHY_HBR2_PATTERN_CONTROL_MODE {
DP_DPHY_HBR2_PASS_THROUGH                = 0x00000000,
DP_DPHY_HBR2_PATTERN_1                   = 0x00000001,
DP_DPHY_HBR2_PATTERN_2_NEG               = 0x00000002,
DP_DPHY_HBR2_PATTERN_3                   = 0x00000003,
DP_DPHY_HBR2_PATTERN_2_POS               = 0x00000006,
} DP_DPHY_HBR2_PATTERN_CONTROL_MODE;

/*
 * DPHY_CRC_MST_PHASE_ERROR_ACK enum
 */

typedef enum DPHY_CRC_MST_PHASE_ERROR_ACK {
DPHY_CRC_MST_PHASE_ERROR_NO_ACK          = 0x00000000,
DPHY_CRC_MST_PHASE_ERROR_ACKED           = 0x00000001,
} DPHY_CRC_MST_PHASE_ERROR_ACK;

/*
 * DPHY_SW_FAST_TRAINING_START enum
 */

typedef enum DPHY_SW_FAST_TRAINING_START {
DPHY_SW_FAST_TRAINING_NOT_STARTED        = 0x00000000,
DPHY_SW_FAST_TRAINING_STARTED            = 0x00000001,
} DPHY_SW_FAST_TRAINING_START;

/*
 * DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN enum
 */

typedef enum DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN {
DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_DISABLED  = 0x00000000,
DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_ENABLED  = 0x00000001,
} DP_DPHY_FAST_TRAINING_VBLANK_EDGE_DETECT_EN;

/*
 * DP_DPHY_FAST_TRAINING_COMPLETE_MASK enum
 */

typedef enum DP_DPHY_FAST_TRAINING_COMPLETE_MASK {
DP_DPHY_FAST_TRAINING_COMPLETE_MASKED    = 0x00000000,
DP_DPHY_FAST_TRAINING_COMPLETE_NOT_MASKED  = 0x00000001,
} DP_DPHY_FAST_TRAINING_COMPLETE_MASK;

/*
 * DP_DPHY_FAST_TRAINING_COMPLETE_ACK enum
 */

typedef enum DP_DPHY_FAST_TRAINING_COMPLETE_ACK {
DP_DPHY_FAST_TRAINING_COMPLETE_NOT_ACKED  = 0x00000000,
DP_DPHY_FAST_TRAINING_COMPLETE_ACKED     = 0x00000001,
} DP_DPHY_FAST_TRAINING_COMPLETE_ACK;

/*
 * DP_MSA_V_TIMING_OVERRIDE_EN enum
 */

typedef enum DP_MSA_V_TIMING_OVERRIDE_EN {
MSA_V_TIMING_OVERRIDE_DISABLED           = 0x00000000,
MSA_V_TIMING_OVERRIDE_ENABLED            = 0x00000001,
} DP_MSA_V_TIMING_OVERRIDE_EN;

/*
 * DP_SEC_GSP0_PRIORITY enum
 */

typedef enum DP_SEC_GSP0_PRIORITY {
SEC_GSP0_PRIORITY_LOW                    = 0x00000000,
SEC_GSP0_PRIORITY_HIGH                   = 0x00000001,
} DP_SEC_GSP0_PRIORITY;

/*
 * DP_SEC_GSP_SEND enum
 */

typedef enum DP_SEC_GSP_SEND {
NOT_SENT                                 = 0x00000000,
FORCE_SENT                               = 0x00000001,
} DP_SEC_GSP_SEND;

/*
 * DP_SEC_GSP_SEND_ANY_LINE enum
 */

typedef enum DP_SEC_GSP_SEND_ANY_LINE {
SEND_AT_LINK_NUMBER                      = 0x00000000,
SEND_AT_EARLIEST_TIME                    = 0x00000001,
} DP_SEC_GSP_SEND_ANY_LINE;

/*
 * DP_SEC_LINE_REFERENCE enum
 */

typedef enum DP_SEC_LINE_REFERENCE {
REFER_TO_DP_SOF                          = 0x00000000,
REFER_TO_OTG_SOF                         = 0x00000001,
} DP_SEC_LINE_REFERENCE;

/*
 * DP_SEC_GSP_SEND_PPS enum
 */

typedef enum DP_SEC_GSP_SEND_PPS {
SEND_NORMAL_PACKET                       = 0x00000000,
SEND_PPS_PACKET                          = 0x00000001,
} DP_SEC_GSP_SEND_PPS;

/*
 * DP_ML_PHY_SEQ_MODE enum
 */

typedef enum DP_ML_PHY_SEQ_MODE {
DP_ML_PHY_SEQ_LINE_NUM                   = 0x00000000,
DP_ML_PHY_SEQ_IMMEDIATE                  = 0x00000001,
} DP_ML_PHY_SEQ_MODE;

/*
 * DP_LINK_TRAINING_SWITCH_MODE enum
 */

typedef enum DP_LINK_TRAINING_SWITCH_MODE {
DP_LINK_TRAINING_SWITCH_TO_IDLE          = 0x00000000,
DP_LINK_TRAINING_SWITCH_TO_VIDEO         = 0x00000001,
} DP_LINK_TRAINING_SWITCH_MODE;

/*
 * DP_DSC_MODE enum
 */

typedef enum DP_DSC_MODE {
DP_DSC_DISABLE                           = 0x00000000,
DP_DSC_444_SIMPLE_422                    = 0x00000001,
DP_DSC_NATIVE_422_420                    = 0x00000002,
} DP_DSC_MODE;

/*******************************************************
 * DIG Enums
 *******************************************************/

/*
 * HDMI_KEEPOUT_MODE enum
 */

typedef enum HDMI_KEEPOUT_MODE {
HDMI_KEEPOUT_0_650PIX_AFTER_VSYNC        = 0x00000000,
HDMI_KEEPOUT_509_650PIX_AFTER_VSYNC      = 0x00000001,
} HDMI_KEEPOUT_MODE;

/*
 * HDMI_CLOCK_CHANNEL_RATE enum
 */

typedef enum HDMI_CLOCK_CHANNEL_RATE {
HDMI_CLOCK_CHANNEL_FREQ_EQUAL_TO_CHAR_RATE  = 0x00000000,
HDMI_CLOCK_CHANNEL_FREQ_QUARTER_TO_CHAR_RATE  = 0x00000001,
} HDMI_CLOCK_CHANNEL_RATE;

/*
 * HDMI_NO_EXTRA_NULL_PACKET_FILLED enum
 */

typedef enum HDMI_NO_EXTRA_NULL_PACKET_FILLED {
HDMI_EXTRA_NULL_PACKET_FILLED_ENABLE     = 0x00000000,
HDMI_EXTRA_NULL_PACKET_FILLED_DISABLE    = 0x00000001,
} HDMI_NO_EXTRA_NULL_PACKET_FILLED;

/*
 * HDMI_PACKET_GEN_VERSION enum
 */

typedef enum HDMI_PACKET_GEN_VERSION {
HDMI_PACKET_GEN_VERSION_OLD              = 0x00000000,
HDMI_PACKET_GEN_VERSION_NEW              = 0x00000001,
} HDMI_PACKET_GEN_VERSION;

/*
 * HDMI_ERROR_ACK enum
 */

typedef enum HDMI_ERROR_ACK {
HDMI_ERROR_ACK_INT                       = 0x00000000,
HDMI_ERROR_NOT_ACK                       = 0x00000001,
} HDMI_ERROR_ACK;

/*
 * HDMI_ERROR_MASK enum
 */

typedef enum HDMI_ERROR_MASK {
HDMI_ERROR_MASK_INT                      = 0x00000000,
HDMI_ERROR_NOT_MASK                      = 0x00000001,
} HDMI_ERROR_MASK;

/*
 * HDMI_DEEP_COLOR_DEPTH enum
 */

typedef enum HDMI_DEEP_COLOR_DEPTH {
HDMI_DEEP_COLOR_DEPTH_24BPP              = 0x00000000,
HDMI_DEEP_COLOR_DEPTH_30BPP              = 0x00000001,
HDMI_DEEP_COLOR_DEPTH_36BPP              = 0x00000002,
HDMI_DEEP_COLOR_DEPTH_48BPP              = 0x00000003,
} HDMI_DEEP_COLOR_DEPTH;

/*
 * HDMI_AUDIO_DELAY_EN enum
 */

typedef enum HDMI_AUDIO_DELAY_EN {
HDMI_AUDIO_DELAY_DISABLE                 = 0x00000000,
HDMI_AUDIO_DELAY_58CLK                   = 0x00000001,
HDMI_AUDIO_DELAY_56CLK                   = 0x00000002,
HDMI_AUDIO_DELAY_RESERVED                = 0x00000003,
} HDMI_AUDIO_DELAY_EN;

/*
 * HDMI_AUDIO_SEND_MAX_PACKETS enum
 */

typedef enum HDMI_AUDIO_SEND_MAX_PACKETS {
HDMI_NOT_SEND_MAX_AUDIO_PACKETS          = 0x00000000,
HDMI_SEND_MAX_AUDIO_PACKETS              = 0x00000001,
} HDMI_AUDIO_SEND_MAX_PACKETS;

/*
 * HDMI_ACR_SEND enum
 */

typedef enum HDMI_ACR_SEND {
HDMI_ACR_NOT_SEND                        = 0x00000000,
HDMI_ACR_PKT_SEND                        = 0x00000001,
} HDMI_ACR_SEND;

/*
 * HDMI_ACR_CONT enum
 */

typedef enum HDMI_ACR_CONT {
HDMI_ACR_CONT_DISABLE                    = 0x00000000,
HDMI_ACR_CONT_ENABLE                     = 0x00000001,
} HDMI_ACR_CONT;

/*
 * HDMI_ACR_SELECT enum
 */

typedef enum HDMI_ACR_SELECT {
HDMI_ACR_SELECT_HW                       = 0x00000000,
HDMI_ACR_SELECT_32K                      = 0x00000001,
HDMI_ACR_SELECT_44K                      = 0x00000002,
HDMI_ACR_SELECT_48K                      = 0x00000003,
} HDMI_ACR_SELECT;

/*
 * HDMI_ACR_SOURCE enum
 */

typedef enum HDMI_ACR_SOURCE {
HDMI_ACR_SOURCE_HW                       = 0x00000000,
HDMI_ACR_SOURCE_SW                       = 0x00000001,
} HDMI_ACR_SOURCE;

/*
 * HDMI_ACR_N_MULTIPLE enum
 */

typedef enum HDMI_ACR_N_MULTIPLE {
HDMI_ACR_0_MULTIPLE_RESERVED             = 0x00000000,
HDMI_ACR_1_MULTIPLE                      = 0x00000001,
HDMI_ACR_2_MULTIPLE                      = 0x00000002,
HDMI_ACR_3_MULTIPLE_RESERVED             = 0x00000003,
HDMI_ACR_4_MULTIPLE                      = 0x00000004,
HDMI_ACR_5_MULTIPLE_RESERVED             = 0x00000005,
HDMI_ACR_6_MULTIPLE_RESERVED             = 0x00000006,
HDMI_ACR_7_MULTIPLE_RESERVED             = 0x00000007,
} HDMI_ACR_N_MULTIPLE;

/*
 * HDMI_ACR_AUDIO_PRIORITY enum
 */

typedef enum HDMI_ACR_AUDIO_PRIORITY {
HDMI_ACR_PKT_HIGH_PRIORITY_THAN_AUDIO_SAMPLE  = 0x00000000,
HDMI_AUDIO_SAMPLE_HIGH_PRIORITY_THAN_ACR_PKT  = 0x00000001,
} HDMI_ACR_AUDIO_PRIORITY;

/*
 * HDMI_NULL_SEND enum
 */

typedef enum HDMI_NULL_SEND {
HDMI_NULL_NOT_SEND                       = 0x00000000,
HDMI_NULL_PKT_SEND                       = 0x00000001,
} HDMI_NULL_SEND;

/*
 * HDMI_GC_SEND enum
 */

typedef enum HDMI_GC_SEND {
HDMI_GC_NOT_SEND                         = 0x00000000,
HDMI_GC_PKT_SEND                         = 0x00000001,
} HDMI_GC_SEND;

/*
 * HDMI_GC_CONT enum
 */

typedef enum HDMI_GC_CONT {
HDMI_GC_CONT_DISABLE                     = 0x00000000,
HDMI_GC_CONT_ENABLE                      = 0x00000001,
} HDMI_GC_CONT;

/*
 * HDMI_ISRC_SEND enum
 */

typedef enum HDMI_ISRC_SEND {
HDMI_ISRC_NOT_SEND                       = 0x00000000,
HDMI_ISRC_PKT_SEND                       = 0x00000001,
} HDMI_ISRC_SEND;

/*
 * HDMI_ISRC_CONT enum
 */

typedef enum HDMI_ISRC_CONT {
HDMI_ISRC_CONT_DISABLE                   = 0x00000000,
HDMI_ISRC_CONT_ENABLE                    = 0x00000001,
} HDMI_ISRC_CONT;

/*
 * HDMI_AUDIO_INFO_SEND enum
 */

typedef enum HDMI_AUDIO_INFO_SEND {
HDMI_AUDIO_INFO_NOT_SEND                 = 0x00000000,
HDMI_AUDIO_INFO_PKT_SEND                 = 0x00000001,
} HDMI_AUDIO_INFO_SEND;

/*
 * HDMI_AUDIO_INFO_CONT enum
 */

typedef enum HDMI_AUDIO_INFO_CONT {
HDMI_AUDIO_INFO_CONT_DISABLE             = 0x00000000,
HDMI_AUDIO_INFO_CONT_ENABLE              = 0x00000001,
} HDMI_AUDIO_INFO_CONT;

/*
 * HDMI_MPEG_INFO_SEND enum
 */

typedef enum HDMI_MPEG_INFO_SEND {
HDMI_MPEG_INFO_NOT_SEND                  = 0x00000000,
HDMI_MPEG_INFO_PKT_SEND                  = 0x00000001,
} HDMI_MPEG_INFO_SEND;

/*
 * HDMI_MPEG_INFO_CONT enum
 */

typedef enum HDMI_MPEG_INFO_CONT {
HDMI_MPEG_INFO_CONT_DISABLE              = 0x00000000,
HDMI_MPEG_INFO_CONT_ENABLE               = 0x00000001,
} HDMI_MPEG_INFO_CONT;

/*
 * HDMI_GENERIC_SEND enum
 */

typedef enum HDMI_GENERIC_SEND {
HDMI_GENERIC_NOT_SEND                    = 0x00000000,
HDMI_GENERIC_PKT_SEND                    = 0x00000001,
} HDMI_GENERIC_SEND;

/*
 * HDMI_GENERIC_CONT enum
 */

typedef enum HDMI_GENERIC_CONT {
HDMI_GENERIC_CONT_DISABLE                = 0x00000000,
HDMI_GENERIC_CONT_ENABLE                 = 0x00000001,
} HDMI_GENERIC_CONT;

/*
 * HDMI_GC_AVMUTE_CONT enum
 */

typedef enum HDMI_GC_AVMUTE_CONT {
HDMI_GC_AVMUTE_CONT_DISABLE              = 0x00000000,
HDMI_GC_AVMUTE_CONT_ENABLE               = 0x00000001,
} HDMI_GC_AVMUTE_CONT;

/*
 * HDMI_PACKING_PHASE_OVERRIDE enum
 */

typedef enum HDMI_PACKING_PHASE_OVERRIDE {
HDMI_PACKING_PHASE_SET_BY_HW             = 0x00000000,
HDMI_PACKING_PHASE_SET_BY_SW             = 0x00000001,
} HDMI_PACKING_PHASE_OVERRIDE;

/*
 * TMDS_PIXEL_ENCODING enum
 */

typedef enum TMDS_PIXEL_ENCODING {
TMDS_PIXEL_ENCODING_444_OR_420           = 0x00000000,
TMDS_PIXEL_ENCODING_422                  = 0x00000001,
} TMDS_PIXEL_ENCODING;

/*
 * TMDS_COLOR_FORMAT enum
 */

typedef enum TMDS_COLOR_FORMAT {
TMDS_COLOR_FORMAT__24BPP__TWIN30BPP_MSB__DUAL48BPP  = 0x00000000,
TMDS_COLOR_FORMAT_TWIN30BPP_LSB          = 0x00000001,
TMDS_COLOR_FORMAT_DUAL30BPP              = 0x00000002,
TMDS_COLOR_FORMAT_RESERVED               = 0x00000003,
} TMDS_COLOR_FORMAT;

/*
 * TMDS_STEREOSYNC_CTL_SEL_REG enum
 */

typedef enum TMDS_STEREOSYNC_CTL_SEL_REG {
TMDS_STEREOSYNC_CTL0                     = 0x00000000,
TMDS_STEREOSYNC_CTL1                     = 0x00000001,
TMDS_STEREOSYNC_CTL2                     = 0x00000002,
TMDS_STEREOSYNC_CTL3                     = 0x00000003,
} TMDS_STEREOSYNC_CTL_SEL_REG;

/*
 * TMDS_CTL0_DATA_SEL enum
 */

typedef enum TMDS_CTL0_DATA_SEL {
TMDS_CTL0_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL0_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL0_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL0_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL0_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL0_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL0_DATA_SEL8_RANDOM_DATA          = 0x00000006,
TMDS_CTL0_DATA_SEL9_SEL15_RANDOM_DATA    = 0x00000007,
} TMDS_CTL0_DATA_SEL;

/*
 * TMDS_CTL0_DATA_INVERT enum
 */

typedef enum TMDS_CTL0_DATA_INVERT {
TMDS_CTL0_DATA_NORMAL                    = 0x00000000,
TMDS_CTL0_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL0_DATA_INVERT;

/*
 * TMDS_CTL0_DATA_MODULATION enum
 */

typedef enum TMDS_CTL0_DATA_MODULATION {
TMDS_CTL0_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL0_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL0_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL0_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL0_DATA_MODULATION;

/*
 * TMDS_CTL0_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL0_PATTERN_OUT_EN {
TMDS_CTL0_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL0_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL0_PATTERN_OUT_EN;

/*
 * TMDS_CTL1_DATA_SEL enum
 */

typedef enum TMDS_CTL1_DATA_SEL {
TMDS_CTL1_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL1_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL1_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL1_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL1_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL1_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL1_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL1_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL1_DATA_SEL;

/*
 * TMDS_CTL1_DATA_INVERT enum
 */

typedef enum TMDS_CTL1_DATA_INVERT {
TMDS_CTL1_DATA_NORMAL                    = 0x00000000,
TMDS_CTL1_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL1_DATA_INVERT;

/*
 * TMDS_CTL1_DATA_MODULATION enum
 */

typedef enum TMDS_CTL1_DATA_MODULATION {
TMDS_CTL1_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL1_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL1_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL1_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL1_DATA_MODULATION;

/*
 * TMDS_CTL1_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL1_PATTERN_OUT_EN {
TMDS_CTL1_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL1_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL1_PATTERN_OUT_EN;

/*
 * TMDS_CTL2_DATA_SEL enum
 */

typedef enum TMDS_CTL2_DATA_SEL {
TMDS_CTL2_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL2_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL2_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL2_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL2_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL2_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL2_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL2_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL2_DATA_SEL;

/*
 * TMDS_CTL2_DATA_INVERT enum
 */

typedef enum TMDS_CTL2_DATA_INVERT {
TMDS_CTL2_DATA_NORMAL                    = 0x00000000,
TMDS_CTL2_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL2_DATA_INVERT;

/*
 * TMDS_CTL2_DATA_MODULATION enum
 */

typedef enum TMDS_CTL2_DATA_MODULATION {
TMDS_CTL2_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL2_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL2_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL2_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL2_DATA_MODULATION;

/*
 * TMDS_CTL2_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL2_PATTERN_OUT_EN {
TMDS_CTL2_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL2_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL2_PATTERN_OUT_EN;

/*
 * TMDS_CTL3_DATA_INVERT enum
 */

typedef enum TMDS_CTL3_DATA_INVERT {
TMDS_CTL3_DATA_NORMAL                    = 0x00000000,
TMDS_CTL3_DATA_INVERT_EN                 = 0x00000001,
} TMDS_CTL3_DATA_INVERT;

/*
 * TMDS_CTL3_DATA_MODULATION enum
 */

typedef enum TMDS_CTL3_DATA_MODULATION {
TMDS_CTL3_DATA_MODULATION_DISABLE        = 0x00000000,
TMDS_CTL3_DATA_MODULATION_BIT0           = 0x00000001,
TMDS_CTL3_DATA_MODULATION_BIT1           = 0x00000002,
TMDS_CTL3_DATA_MODULATION_BIT2           = 0x00000003,
} TMDS_CTL3_DATA_MODULATION;

/*
 * TMDS_CTL3_PATTERN_OUT_EN enum
 */

typedef enum TMDS_CTL3_PATTERN_OUT_EN {
TMDS_CTL3_PATTERN_OUT_DISABLE            = 0x00000000,
TMDS_CTL3_PATTERN_OUT_ENABLE             = 0x00000001,
} TMDS_CTL3_PATTERN_OUT_EN;

/*
 * TMDS_CTL3_DATA_SEL enum
 */

typedef enum TMDS_CTL3_DATA_SEL {
TMDS_CTL3_DATA_SEL0_RESERVED             = 0x00000000,
TMDS_CTL3_DATA_SEL1_DISPLAY_ENABLE       = 0x00000001,
TMDS_CTL3_DATA_SEL2_VSYNC                = 0x00000002,
TMDS_CTL3_DATA_SEL3_RESERVED             = 0x00000003,
TMDS_CTL3_DATA_SEL4_HSYNC                = 0x00000004,
TMDS_CTL3_DATA_SEL5_SEL7_RESERVED        = 0x00000005,
TMDS_CTL3_DATA_SEL8_BLANK_TIME           = 0x00000006,
TMDS_CTL3_DATA_SEL9_SEL15_RESERVED       = 0x00000007,
} TMDS_CTL3_DATA_SEL;

/*
 * DIG_FE_CNTL_SOURCE_SELECT enum
 */

typedef enum DIG_FE_CNTL_SOURCE_SELECT {
DIG_FE_SOURCE_FROM_OTG0                  = 0x00000000,
DIG_FE_SOURCE_FROM_OTG1                  = 0x00000001,
DIG_FE_SOURCE_FROM_OTG2                  = 0x00000002,
DIG_FE_SOURCE_FROM_OTG3                  = 0x00000003,
DIG_FE_SOURCE_FROM_OTG4                  = 0x00000004,
DIG_FE_SOURCE_FROM_OTG5                  = 0x00000005,
DIG_FE_SOURCE_RESERVED                   = 0x00000006,
} DIG_FE_CNTL_SOURCE_SELECT;

/*
 * DIG_FE_CNTL_STEREOSYNC_SELECT enum
 */

typedef enum DIG_FE_CNTL_STEREOSYNC_SELECT {
DIG_FE_STEREOSYNC_FROM_OTG0              = 0x00000000,
DIG_FE_STEREOSYNC_FROM_OTG1              = 0x00000001,
DIG_FE_STEREOSYNC_FROM_OTG2              = 0x00000002,
DIG_FE_STEREOSYNC_FROM_OTG3              = 0x00000003,
DIG_FE_STEREOSYNC_FROM_OTG4              = 0x00000004,
DIG_FE_STEREOSYNC_FROM_OTG5              = 0x00000005,
DIG_FE_STEREOSYNC_RESERVED               = 0x00000006,
} DIG_FE_CNTL_STEREOSYNC_SELECT;

/*
 * DIG_FIFO_READ_CLOCK_SRC enum
 */

typedef enum DIG_FIFO_READ_CLOCK_SRC {
DIG_FIFO_READ_CLOCK_SRC_FROM_DCCG        = 0x00000000,
DIG_FIFO_READ_CLOCK_SRC_FROM_DISPLAY_PIPE  = 0x00000001,
} DIG_FIFO_READ_CLOCK_SRC;

/*
 * DIG_OUTPUT_CRC_CNTL_LINK_SEL enum
 */

typedef enum DIG_OUTPUT_CRC_CNTL_LINK_SEL {
DIG_OUTPUT_CRC_ON_LINK0                  = 0x00000000,
DIG_OUTPUT_CRC_ON_LINK1                  = 0x00000001,
} DIG_OUTPUT_CRC_CNTL_LINK_SEL;

/*
 * DIG_OUTPUT_CRC_DATA_SEL enum
 */

typedef enum DIG_OUTPUT_CRC_DATA_SEL {
DIG_OUTPUT_CRC_FOR_FULLFRAME             = 0x00000000,
DIG_OUTPUT_CRC_FOR_ACTIVEONLY            = 0x00000001,
DIG_OUTPUT_CRC_FOR_VBI                   = 0x00000002,
DIG_OUTPUT_CRC_FOR_AUDIO                 = 0x00000003,
} DIG_OUTPUT_CRC_DATA_SEL;

/*
 * DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN enum
 */

typedef enum DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN {
DIG_IN_NORMAL_OPERATION                  = 0x00000000,
DIG_IN_DEBUG_MODE                        = 0x00000001,
} DIG_TEST_PATTERN_TEST_PATTERN_OUT_EN;

/*
 * DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL enum
 */

typedef enum DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL {
DIG_10BIT_TEST_PATTERN                   = 0x00000000,
DIG_ALTERNATING_TEST_PATTERN             = 0x00000001,
} DIG_TEST_PATTERN_HALF_CLOCK_PATTERN_SEL;

/*
 * DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN enum
 */

typedef enum DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN {
DIG_TEST_PATTERN_NORMAL                  = 0x00000000,
DIG_TEST_PATTERN_RANDOM                  = 0x00000001,
} DIG_TEST_PATTERN_RANDOM_PATTERN_OUT_EN;

/*
 * DIG_TEST_PATTERN_RANDOM_PATTERN_RESET enum
 */

typedef enum DIG_TEST_PATTERN_RANDOM_PATTERN_RESET {
DIG_RANDOM_PATTERN_ENABLED               = 0x00000000,
DIG_RANDOM_PATTERN_RESETED               = 0x00000001,
} DIG_TEST_PATTERN_RANDOM_PATTERN_RESET;

/*
 * DIG_TEST_PATTERN_EXTERNAL_RESET_EN enum
 */

typedef enum DIG_TEST_PATTERN_EXTERNAL_RESET_EN {
DIG_TEST_PATTERN_EXTERNAL_RESET_ENABLE   = 0x00000000,
DIG_TEST_PATTERN_EXTERNAL_RESET_BY_EXT_SIG  = 0x00000001,
} DIG_TEST_PATTERN_EXTERNAL_RESET_EN;

/*
 * DIG_RANDOM_PATTERN_SEED_RAN_PAT enum
 */

typedef enum DIG_RANDOM_PATTERN_SEED_RAN_PAT {
DIG_RANDOM_PATTERN_SEED_RAN_PAT_ALL_PIXELS  = 0x00000000,
DIG_RANDOM_PATTERN_SEED_RAN_PAT_DE_HIGH  = 0x00000001,
} DIG_RANDOM_PATTERN_SEED_RAN_PAT;

/*
 * DIG_FIFO_STATUS_USE_OVERWRITE_LEVEL enum
 */

typedef enum DIG_FIFO_STATUS_USE_OVERWRITE_LEVEL {
DIG_FIFO_USE_OVERWRITE_LEVEL             = 0x00000000,
DIG_FIFO_USE_CAL_AVERAGE_LEVEL           = 0x00000001,
} DIG_FIFO_STATUS_USE_OVERWRITE_LEVEL;

/*
 * DIG_FIFO_ERROR_ACK enum
 */

typedef enum DIG_FIFO_ERROR_ACK {
DIG_FIFO_ERROR_ACK_INT                   = 0x00000000,
DIG_FIFO_ERROR_NOT_ACK                   = 0x00000001,
} DIG_FIFO_ERROR_ACK;

/*
 * DIG_FIFO_STATUS_FORCE_RECAL_AVERAGE enum
 */

typedef enum DIG_FIFO_STATUS_FORCE_RECAL_AVERAGE {
DIG_FIFO_NOT_FORCE_RECAL_AVERAGE         = 0x00000000,
DIG_FIFO_FORCE_RECAL_AVERAGE_LEVEL       = 0x00000001,
} DIG_FIFO_STATUS_FORCE_RECAL_AVERAGE;

/*
 * DIG_FIFO_STATUS_FORCE_RECOMP_MINMAX enum
 */

typedef enum DIG_FIFO_STATUS_FORCE_RECOMP_MINMAX {
DIG_FIFO_NOT_FORCE_RECOMP_MINMAX         = 0x00000000,
DIG_FIFO_FORCE_RECOMP_MINMAX             = 0x00000001,
} DIG_FIFO_STATUS_FORCE_RECOMP_MINMAX;

/*
 * AFMT_INTERRUPT_STATUS_CHG_MASK enum
 */

typedef enum AFMT_INTERRUPT_STATUS_CHG_MASK {
AFMT_INTERRUPT_DISABLE                   = 0x00000000,
AFMT_INTERRUPT_ENABLE                    = 0x00000001,
} AFMT_INTERRUPT_STATUS_CHG_MASK;

/*
 * HDMI_GC_AVMUTE enum
 */

typedef enum HDMI_GC_AVMUTE {
HDMI_GC_AVMUTE_SET                       = 0x00000000,
HDMI_GC_AVMUTE_UNSET                     = 0x00000001,
} HDMI_GC_AVMUTE;

/*
 * HDMI_DEFAULT_PAHSE enum
 */

typedef enum HDMI_DEFAULT_PAHSE {
HDMI_DEFAULT_PHASE_IS_0                  = 0x00000000,
HDMI_DEFAULT_PHASE_IS_1                  = 0x00000001,
} HDMI_DEFAULT_PAHSE;

/*
 * AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD {
AFMT_AUDIO_LAYOUT_DETERMINED_BY_AZ_AUDIO_CHANNEL_STATUS  = 0x00000000,
AFMT_AUDIO_LAYOUT_OVRD_BY_REGISTER       = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL2_AUDIO_LAYOUT_OVRD;

/*
 * AUDIO_LAYOUT_SELECT enum
 */

typedef enum AUDIO_LAYOUT_SELECT {
AUDIO_LAYOUT_0                           = 0x00000000,
AUDIO_LAYOUT_1                           = 0x00000001,
} AUDIO_LAYOUT_SELECT;

/*
 * AFMT_AUDIO_CRC_CONTROL_CONT enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_CONT {
AFMT_AUDIO_CRC_ONESHOT                   = 0x00000000,
AFMT_AUDIO_CRC_AUTO_RESTART              = 0x00000001,
} AFMT_AUDIO_CRC_CONTROL_CONT;

/*
 * AFMT_AUDIO_CRC_CONTROL_SOURCE enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_SOURCE {
AFMT_AUDIO_CRC_SOURCE_FROM_FIFO_INPUT    = 0x00000000,
AFMT_AUDIO_CRC_SOURCE_FROM_FIFO_OUTPUT   = 0x00000001,
} AFMT_AUDIO_CRC_CONTROL_SOURCE;

/*
 * AFMT_AUDIO_CRC_CONTROL_CH_SEL enum
 */

typedef enum AFMT_AUDIO_CRC_CONTROL_CH_SEL {
AFMT_AUDIO_CRC_CH0_SIG                   = 0x00000000,
AFMT_AUDIO_CRC_CH1_SIG                   = 0x00000001,
AFMT_AUDIO_CRC_CH2_SIG                   = 0x00000002,
AFMT_AUDIO_CRC_CH3_SIG                   = 0x00000003,
AFMT_AUDIO_CRC_CH4_SIG                   = 0x00000004,
AFMT_AUDIO_CRC_CH5_SIG                   = 0x00000005,
AFMT_AUDIO_CRC_CH6_SIG                   = 0x00000006,
AFMT_AUDIO_CRC_CH7_SIG                   = 0x00000007,
AFMT_AUDIO_CRC_RESERVED_8                = 0x00000008,
AFMT_AUDIO_CRC_RESERVED_9                = 0x00000009,
AFMT_AUDIO_CRC_RESERVED_10               = 0x0000000a,
AFMT_AUDIO_CRC_RESERVED_11               = 0x0000000b,
AFMT_AUDIO_CRC_RESERVED_12               = 0x0000000c,
AFMT_AUDIO_CRC_RESERVED_13               = 0x0000000d,
AFMT_AUDIO_CRC_RESERVED_14               = 0x0000000e,
AFMT_AUDIO_CRC_AUDIO_SAMPLE_COUNT        = 0x0000000f,
} AFMT_AUDIO_CRC_CONTROL_CH_SEL;

/*
 * AFMT_RAMP_CONTROL0_SIGN enum
 */

typedef enum AFMT_RAMP_CONTROL0_SIGN {
AFMT_RAMP_SIGNED                         = 0x00000000,
AFMT_RAMP_UNSIGNED                       = 0x00000001,
} AFMT_RAMP_CONTROL0_SIGN;

/*
 * AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND {
AFMT_AUDIO_PACKET_SENT_DISABLED          = 0x00000000,
AFMT_AUDIO_PACKET_SENT_ENABLED           = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL_AUDIO_SAMPLE_SEND;

/*
 * AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS enum
 */

typedef enum AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS {
AFMT_NOT_RESET_AUDIO_FIFO_WHEN_AUDIO_DISABLED_RESERVED  = 0x00000000,
AFMT_RESET_AUDIO_FIFO_WHEN_AUDIO_DISABLED  = 0x00000001,
} AFMT_AUDIO_PACKET_CONTROL_RESET_FIFO_WHEN_AUDIO_DIS;

/*
 * AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE enum
 */

typedef enum AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE {
AFMT_INFOFRAME_SOURCE_FROM_AZALIA_BLOCK  = 0x00000000,
AFMT_INFOFRAME_SOURCE_FROM_AFMT_REGISTERS  = 0x00000001,
} AFMT_INFOFRAME_CONTROL0_AUDIO_INFO_SOURCE;

/*
 * AFMT_AUDIO_SRC_CONTROL_SELECT enum
 */

typedef enum AFMT_AUDIO_SRC_CONTROL_SELECT {
AFMT_AUDIO_SRC_FROM_AZ_STREAM0           = 0x00000000,
AFMT_AUDIO_SRC_FROM_AZ_STREAM1           = 0x00000001,
AFMT_AUDIO_SRC_FROM_AZ_STREAM2           = 0x00000002,
AFMT_AUDIO_SRC_FROM_AZ_STREAM3           = 0x00000003,
AFMT_AUDIO_SRC_FROM_AZ_STREAM4           = 0x00000004,
AFMT_AUDIO_SRC_FROM_AZ_STREAM5           = 0x00000005,
AFMT_AUDIO_SRC_RESERVED                  = 0x00000006,
} AFMT_AUDIO_SRC_CONTROL_SELECT;

/*
 * DIG_BE_CNTL_MODE enum
 */

typedef enum DIG_BE_CNTL_MODE {
DIG_BE_DP_SST_MODE                       = 0x00000000,
DIG_BE_RESERVED1                         = 0x00000001,
DIG_BE_TMDS_DVI_MODE                     = 0x00000002,
DIG_BE_TMDS_HDMI_MODE                    = 0x00000003,
DIG_BE_RESERVED4                         = 0x00000004,
DIG_BE_DP_MST_MODE                       = 0x00000005,
DIG_BE_RESERVED2                         = 0x00000006,
DIG_BE_RESERVED3                         = 0x00000007,
} DIG_BE_CNTL_MODE;

/*
 * DIG_BE_CNTL_HPD_SELECT enum
 */

typedef enum DIG_BE_CNTL_HPD_SELECT {
DIG_BE_CNTL_HPD1                         = 0x00000000,
DIG_BE_CNTL_HPD2                         = 0x00000001,
DIG_BE_CNTL_HPD3                         = 0x00000002,
DIG_BE_CNTL_HPD4                         = 0x00000003,
DIG_BE_CNTL_HPD5                         = 0x00000004,
DIG_BE_CNTL_HPD6                         = 0x00000005,
DIG_BE_CNTL_NO_HPD                       = 0x00000006,
} DIG_BE_CNTL_HPD_SELECT;

/*
 * LVTMA_RANDOM_PATTERN_SEED_RAN_PAT enum
 */

typedef enum LVTMA_RANDOM_PATTERN_SEED_RAN_PAT {
LVTMA_RANDOM_PATTERN_SEED_ALL_PIXELS     = 0x00000000,
LVTMA_RANDOM_PATTERN_SEED_ONLY_DE_HIGH   = 0x00000001,
} LVTMA_RANDOM_PATTERN_SEED_RAN_PAT;

/*
 * TMDS_SYNC_PHASE enum
 */

typedef enum TMDS_SYNC_PHASE {
TMDS_NOT_SYNC_PHASE_ON_FRAME_START       = 0x00000000,
TMDS_SYNC_PHASE_ON_FRAME_START           = 0x00000001,
} TMDS_SYNC_PHASE;

/*
 * TMDS_DATA_SYNCHRONIZATION_DSINTSEL enum
 */

typedef enum TMDS_DATA_SYNCHRONIZATION_DSINTSEL {
TMDS_DATA_SYNCHRONIZATION_DSINTSEL_PCLK_TMDS  = 0x00000000,
TMDS_DATA_SYNCHRONIZATION_DSINTSEL_TMDS_PLL  = 0x00000001,
} TMDS_DATA_SYNCHRONIZATION_DSINTSEL;

/*
 * TMDS_TRANSMITTER_ENABLE_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_HPD_MASK {
TMDS_TRANSMITTER_HPD_MASK_NOT_OVERRIDE   = 0x00000000,
TMDS_TRANSMITTER_HPD_MASK_OVERRIDE       = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_HPD_MASK;

/*
 * TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK {
TMDS_TRANSMITTER_LNKCEN_HPD_MASK_NOT_OVERRIDE  = 0x00000000,
TMDS_TRANSMITTER_LNKCEN_HPD_MASK_OVERRIDE  = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_LNKCEN_HPD_MASK;

/*
 * TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK {
TMDS_TRANSMITTER_LNKDEN_HPD_MASK_NOT_OVERRIDE  = 0x00000000,
TMDS_TRANSMITTER_LNKDEN_HPD_MASK_OVERRIDE  = 0x00000001,
} TMDS_TRANSMITTER_ENABLE_LNKDEN_HPD_MASK;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK {
TMDS_TRANSMITTER_HPD_NOT_OVERRIDE_PLL_ENABLE  = 0x00000000,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE_ON_DISCON  = 0x00000001,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE_ON_CON  = 0x00000002,
TMDS_TRANSMITTER_HPD_OVERRIDE_PLL_ENABLE  = 0x00000003,
} TMDS_TRANSMITTER_CONTROL_PLL_ENABLE_HPD_MASK;

/*
 * TMDS_TRANSMITTER_CONTROL_IDSCKSELA enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_IDSCKSELA {
TMDS_TRANSMITTER_IDSCKSELA_USE_IPIXCLK   = 0x00000000,
TMDS_TRANSMITTER_IDSCKSELA_USE_IDCLK     = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_IDSCKSELA;

/*
 * TMDS_TRANSMITTER_CONTROL_IDSCKSELB enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_IDSCKSELB {
TMDS_TRANSMITTER_IDSCKSELB_USE_IPIXCLK   = 0x00000000,
TMDS_TRANSMITTER_IDSCKSELB_USE_IDCLK     = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_IDSCKSELB;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN {
TMDS_TRANSMITTER_PLL_PWRUP_SEQ_DISABLE   = 0x00000000,
TMDS_TRANSMITTER_PLL_PWRUP_SEQ_ENABLE    = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLL_PWRUP_SEQ_EN;

/*
 * TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK {
TMDS_TRANSMITTER_PLL_NOT_RST_ON_HPD      = 0x00000000,
TMDS_TRANSMITTER_PLL_RST_ON_HPD          = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLL_RESET_HPD_MASK;

/*
 * TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS {
TMDS_TRANSMITTER_TMCLK_FROM_TMDS_TMCLK   = 0x00000000,
TMDS_TRANSMITTER_TMCLK_FROM_PADS         = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_TMCLK_FROM_PADS;

/*
 * TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS {
TMDS_TRANSMITTER_TDCLK_FROM_TMDS_TDCLK   = 0x00000000,
TMDS_TRANSMITTER_TDCLK_FROM_PADS         = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_TDCLK_FROM_PADS;

/*
 * TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN {
TMDS_TRANSMITTER_PLLSEL_BY_HW            = 0x00000000,
TMDS_TRANSMITTER_PLLSEL_OVERWRITE_BY_SW  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_PLLSEL_OVERWRITE_EN;

/*
 * TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA {
TMDS_TRANSMITTER_BYPASS_PLLA_COHERENT    = 0x00000000,
TMDS_TRANSMITTER_BYPASS_PLLA_INCOHERENT  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_BYPASS_PLLA;

/*
 * TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB enum
 */

typedef enum TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB {
TMDS_TRANSMITTER_BYPASS_PLLB_COHERENT    = 0x00000000,
TMDS_TRANSMITTER_BYPASS_PLLB_INCOHERENT  = 0x00000001,
} TMDS_TRANSMITTER_CONTROL_BYPASS_PLLB;

/*
 * TMDS_REG_TEST_OUTPUTA_CNTLA enum
 */

typedef enum TMDS_REG_TEST_OUTPUTA_CNTLA {
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA0      = 0x00000000,
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA1      = 0x00000001,
TMDS_REG_TEST_OUTPUTA_CNTLA_OTDATA2      = 0x00000002,
TMDS_REG_TEST_OUTPUTA_CNTLA_NA           = 0x00000003,
} TMDS_REG_TEST_OUTPUTA_CNTLA;

/*
 * TMDS_REG_TEST_OUTPUTB_CNTLB enum
 */

typedef enum TMDS_REG_TEST_OUTPUTB_CNTLB {
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB0      = 0x00000000,
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB1      = 0x00000001,
TMDS_REG_TEST_OUTPUTB_CNTLB_OTDATB2      = 0x00000002,
TMDS_REG_TEST_OUTPUTB_CNTLB_NA           = 0x00000003,
} TMDS_REG_TEST_OUTPUTB_CNTLB;

/*
 * AFMT_VBI_GSP_INDEX enum
 */

typedef enum AFMT_VBI_GSP_INDEX {
AFMT_VBI_GSP0_INDEX                      = 0x00000000,
AFMT_VBI_GSP1_INDEX                      = 0x00000001,
AFMT_VBI_GSP2_INDEX                      = 0x00000002,
AFMT_VBI_GSP3_INDEX                      = 0x00000003,
AFMT_VBI_GSP4_INDEX                      = 0x00000004,
AFMT_VBI_GSP5_INDEX                      = 0x00000005,
AFMT_VBI_GSP6_INDEX                      = 0x00000006,
AFMT_VBI_GSP7_INDEX                      = 0x00000007,
AFMT_VBI_GSP8_INDEX                      = 0x00000008,
AFMT_VBI_GSP9_INDEX                      = 0x00000009,
AFMT_VBI_GSP10_INDEX                     = 0x0000000a,
} AFMT_VBI_GSP_INDEX;

/*
 * DIG_DIGITAL_BYPASS_SEL enum
 */

typedef enum DIG_DIGITAL_BYPASS_SEL {
DIG_DIGITAL_BYPASS_SEL_BYPASS            = 0x00000000,
DIG_DIGITAL_BYPASS_SEL_36BPP             = 0x00000001,
DIG_DIGITAL_BYPASS_SEL_48BPP_LSB         = 0x00000002,
DIG_DIGITAL_BYPASS_SEL_48BPP_MSB         = 0x00000003,
DIG_DIGITAL_BYPASS_SEL_10BPP_LSB         = 0x00000004,
DIG_DIGITAL_BYPASS_SEL_12BPC_LSB         = 0x00000005,
DIG_DIGITAL_BYPASS_SEL_ALPHA             = 0x00000006,
} DIG_DIGITAL_BYPASS_SEL;

/*
 * DIG_INPUT_PIXEL_SEL enum
 */

typedef enum DIG_INPUT_PIXEL_SEL {
DIG_ALL_PIXEL                            = 0x00000000,
DIG_EVEN_PIXEL_ONLY                      = 0x00000001,
DIG_ODD_PIXEL_ONLY                       = 0x00000002,
} DIG_INPUT_PIXEL_SEL;

/*
 * DOLBY_VISION_ENABLE enum
 */

typedef enum DOLBY_VISION_ENABLE {
DOLBY_VISION_ENABLED                     = 0x00000000,
DOLBY_VISION_DISABLED                    = 0x00000001,
} DOLBY_VISION_ENABLE;

/*
 * METADATA_HUBP_SEL enum
 */

typedef enum METADATA_HUBP_SEL {
METADATA_HUBP_SEL_0                      = 0x00000000,
METADATA_HUBP_SEL_1                      = 0x00000001,
METADATA_HUBP_SEL_2                      = 0x00000002,
METADATA_HUBP_SEL_3                      = 0x00000003,
METADATA_HUBP_SEL_4                      = 0x00000004,
METADATA_HUBP_SEL_5                      = 0x00000005,
METADATA_HUBP_SEL_RESERVED               = 0x00000006,
} METADATA_HUBP_SEL;

/*
 * METADATA_STREAM_TYPE_SEL enum
 */

typedef enum METADATA_STREAM_TYPE_SEL {
METADATA_STREAM_DP                       = 0x00000000,
METADATA_STREAM_DVE                      = 0x00000001,
} METADATA_STREAM_TYPE_SEL;

/*
 * HDMI_METADATA_ENABLE enum
 */

typedef enum HDMI_METADATA_ENABLE {
HDMI_METADATA_NOT_SEND                   = 0x00000000,
HDMI_METADATA_PKT_SEND                   = 0x00000001,
} HDMI_METADATA_ENABLE;

/*
 * HDMI_PACKET_LINE_REFERENCE enum
 */

typedef enum HDMI_PACKET_LINE_REFERENCE {
HDMI_PKT_LINE_REF_VSYNC                  = 0x00000000,
HDMI_PKT_LINE_REF_OTGSOF                 = 0x00000001,
} HDMI_PACKET_LINE_REFERENCE;

/*******************************************************
 * DP_AUX Enums
 *******************************************************/

/*
 * DP_AUX_CONTROL_HPD_SEL enum
 */

typedef enum DP_AUX_CONTROL_HPD_SEL {
DP_AUX_CONTROL_HPD1_SELECTED             = 0x00000000,
DP_AUX_CONTROL_HPD2_SELECTED             = 0x00000001,
DP_AUX_CONTROL_HPD3_SELECTED             = 0x00000002,
DP_AUX_CONTROL_HPD4_SELECTED             = 0x00000003,
DP_AUX_CONTROL_HPD5_SELECTED             = 0x00000004,
DP_AUX_CONTROL_HPD6_SELECTED             = 0x00000005,
DP_AUX_CONTROL_NO_HPD_SELECTED           = 0x00000006,
} DP_AUX_CONTROL_HPD_SEL;

/*
 * DP_AUX_CONTROL_TEST_MODE enum
 */

typedef enum DP_AUX_CONTROL_TEST_MODE {
DP_AUX_CONTROL_TEST_MODE_DISABLE         = 0x00000000,
DP_AUX_CONTROL_TEST_MODE_ENABLE          = 0x00000001,
} DP_AUX_CONTROL_TEST_MODE;

/*
 * DP_AUX_SW_CONTROL_SW_GO enum
 */

typedef enum DP_AUX_SW_CONTROL_SW_GO {
DP_AUX_SW_CONTROL_SW__NOT_GO             = 0x00000000,
DP_AUX_SW_CONTROL_SW__GO                 = 0x00000001,
} DP_AUX_SW_CONTROL_SW_GO;

/*
 * DP_AUX_SW_CONTROL_LS_READ_TRIG enum
 */

typedef enum DP_AUX_SW_CONTROL_LS_READ_TRIG {
DP_AUX_SW_CONTROL_LS_READ__NOT_TRIG      = 0x00000000,
DP_AUX_SW_CONTROL_LS_READ__TRIG          = 0x00000001,
} DP_AUX_SW_CONTROL_LS_READ_TRIG;

/*
 * DP_AUX_ARB_CONTROL_ARB_PRIORITY enum
 */

typedef enum DP_AUX_ARB_CONTROL_ARB_PRIORITY {
DP_AUX_ARB_CONTROL_ARB_PRIORITY__GTC_LS_SW  = 0x00000000,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__LS_GTC_SW  = 0x00000001,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__SW_LS_GTC  = 0x00000002,
DP_AUX_ARB_CONTROL_ARB_PRIORITY__SW_GTC_LS  = 0x00000003,
} DP_AUX_ARB_CONTROL_ARB_PRIORITY;

/*
 * DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ enum
 */

typedef enum DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ {
DP_AUX_ARB_CONTROL__NOT_USE_AUX_REG_REQ  = 0x00000000,
DP_AUX_ARB_CONTROL__USE_AUX_REG_REQ      = 0x00000001,
} DP_AUX_ARB_CONTROL_USE_AUX_REG_REQ;

/*
 * DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG enum
 */

typedef enum DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG {
DP_AUX_ARB_CONTROL__DONE_NOT_USING_AUX_REG = 0x00000000,
DP_AUX_ARB_CONTROL__DONE_USING_AUX_REG   = 0x00000001,
} DP_AUX_ARB_CONTROL_DONE_USING_AUX_REG;

/*
 * DP_AUX_INT_ACK enum
 */

typedef enum DP_AUX_INT_ACK {
DP_AUX_INT__NOT_ACK                      = 0x00000000,
DP_AUX_INT__ACK                          = 0x00000001,
} DP_AUX_INT_ACK;

/*
 * DP_AUX_LS_UPDATE_ACK enum
 */

typedef enum DP_AUX_LS_UPDATE_ACK {
DP_AUX_INT_LS_UPDATE_NOT_ACK             = 0x00000000,
DP_AUX_INT_LS_UPDATE_ACK                 = 0x00000001,
} DP_AUX_LS_UPDATE_ACK;

/*
 * DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL enum
 */

typedef enum DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL {
DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL__DIVIDED_SYM_CLK  = 0x00000000,
DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL__FROM_DCCG_MICROSECOND_REF  = 0x00000001,
} DP_AUX_DPHY_TX_REF_CONTROL_TX_REF_SEL;

/*
 * DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE enum
 */

typedef enum DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE {
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__1MHZ = 0x00000000,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__2MHZ = 0x00000001,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__4MHZ = 0x00000002,
DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE__8MHZ = 0x00000003,
} DP_AUX_DPHY_TX_REF_CONTROL_TX_RATE;

/*
 * DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY enum
 */

typedef enum DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY {
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__0 = 0x00000000,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__16US = 0x00000001,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__32US = 0x00000002,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__64US = 0x00000003,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__128US = 0x00000004,
DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY__256US = 0x00000005,
} DP_AUX_DPHY_TX_CONTROL_MODE_DET_CHECK_DELAY;

/*
 * DP_AUX_DPHY_RX_CONTROL_START_WINDOW enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_START_WINDOW {
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO2_PERIOD  = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO4_PERIOD  = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO8_PERIOD  = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO16_PERIOD  = 0x00000003,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO32_PERIOD  = 0x00000004,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO64_PERIOD  = 0x00000005,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO128_PERIOD  = 0x00000006,
DP_AUX_DPHY_RX_CONTROL_START_WINDOW__1TO256_PERIOD  = 0x00000007,
} DP_AUX_DPHY_RX_CONTROL_START_WINDOW;

/*
 * DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW {
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO2_PERIOD  = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO4_PERIOD  = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO8_PERIOD  = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO16_PERIOD  = 0x00000003,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO32_PERIOD  = 0x00000004,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO64_PERIOD  = 0x00000005,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO128_PERIOD  = 0x00000006,
DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW__1TO256_PERIOD  = 0x00000007,
} DP_AUX_DPHY_RX_CONTROL_RECEIVE_WINDOW;

/*
 * DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN {
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__6_EDGES = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__10_EDGES = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__18_EDGES = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN__RESERVED = 0x00000003,
} DP_AUX_DPHY_RX_CONTROL_HALF_SYM_DETECT_LEN;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_PHASE_DETECT = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_PHASE_DETECT = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_PHASE_DETECT;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_START = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_START = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_START;

/*
 * DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP {
DP_AUX_DPHY_RX_CONTROL__NOT_ALLOW_BELOW_THRESHOLD_STOP = 0x00000000,
DP_AUX_DPHY_RX_CONTROL__ALLOW_BELOW_THRESHOLD_STOP = 0x00000001,
} DP_AUX_DPHY_RX_CONTROL_ALLOW_BELOW_THRESHOLD_STOP;

/*
 * DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN enum
 */

typedef enum DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN {
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__2_HALF_SYMBOLS = 0x00000000,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__4_HALF_SYMBOLS = 0x00000001,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__6_HALF_SYMBOLS = 0x00000002,
DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN__8_HALF_SYMBOLS = 0x00000003,
} DP_AUX_DPHY_RX_CONTROL_PHASE_DETECT_LEN;

/*
 * DP_AUX_RX_TIMEOUT_LEN_MUL enum
 */

typedef enum DP_AUX_RX_TIMEOUT_LEN_MUL {
DP_AUX_RX_TIMEOUT_LEN_NO_MUL             = 0x00000000,
DP_AUX_RX_TIMEOUT_LEN_MUL_2              = 0x00000001,
DP_AUX_RX_TIMEOUT_LEN_MUL_4              = 0x00000002,
DP_AUX_RX_TIMEOUT_LEN_MUL_8              = 0x00000003,
} DP_AUX_RX_TIMEOUT_LEN_MUL;

/*
 * DP_AUX_TX_PRECHARGE_LEN_MUL enum
 */

typedef enum DP_AUX_TX_PRECHARGE_LEN_MUL {
DP_AUX_TX_PRECHARGE_LEN_NO_MUL           = 0x00000000,
DP_AUX_TX_PRECHARGE_LEN_MUL_2            = 0x00000001,
DP_AUX_TX_PRECHARGE_LEN_MUL_4            = 0x00000002,
DP_AUX_TX_PRECHARGE_LEN_MUL_8            = 0x00000003,
} DP_AUX_TX_PRECHARGE_LEN_MUL;

/*
 * DP_AUX_DPHY_RX_DETECTION_THRESHOLD enum
 */

typedef enum DP_AUX_DPHY_RX_DETECTION_THRESHOLD {
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__1to2  = 0x00000000,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__3to4  = 0x00000001,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__7to8  = 0x00000002,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__15to16  = 0x00000003,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__31to32  = 0x00000004,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__63to64  = 0x00000005,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__127to128  = 0x00000006,
DP_AUX_DPHY_RX_DETECTION_THRESHOLD__255to256  = 0x00000007,
} DP_AUX_DPHY_RX_DETECTION_THRESHOLD;

/*
 * DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ {
DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_ALLOW_REQ_FROM_OTHER_AUX  = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ_FROM_OTHER_AUX  = 0x00000001,
} DP_AUX_GTC_SYNC_CONTROL_GTC_SYNC_BLOCK_REQ;

/*
 * DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW {
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__300US = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__400US = 0x00000001,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__500US = 0x00000002,
DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW__600US = 0x00000003,
} DP_AUX_GTC_SYNC_CONTROL_INTERVAL_RESET_WINDOW;

/*
 * DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT enum
 */

typedef enum DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT {
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__4_ATTAMPS = 0x00000000,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__8_ATTAMPS = 0x00000001,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__16_ATTAMPS = 0x00000002,
DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT__RESERVED = 0x00000003,
} DP_AUX_GTC_SYNC_CONTROL_OFFSET_CALC_MAX_ATTEMPT;

/*
 * DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN enum
 */

typedef enum DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN {
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__0  = 0x00000000,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__64  = 0x00000001,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__128  = 0x00000002,
DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN__256  = 0x00000003,
} DP_AUX_GTC_SYNC_ERROR_CONTROL_LOCK_ACQ_TIMEOUT_LEN;

/*
 * DP_AUX_ERR_OCCURRED_ACK enum
 */

typedef enum DP_AUX_ERR_OCCURRED_ACK {
DP_AUX_ERR_OCCURRED__NOT_ACK             = 0x00000000,
DP_AUX_ERR_OCCURRED__ACK                 = 0x00000001,
} DP_AUX_ERR_OCCURRED_ACK;

/*
 * DP_AUX_POTENTIAL_ERR_REACHED_ACK enum
 */

typedef enum DP_AUX_POTENTIAL_ERR_REACHED_ACK {
DP_AUX_POTENTIAL_ERR_REACHED__NOT_ACK    = 0x00000000,
DP_AUX_POTENTIAL_ERR_REACHED__ACK        = 0x00000001,
} DP_AUX_POTENTIAL_ERR_REACHED_ACK;

/*
 * DP_AUX_DEFINITE_ERR_REACHED_ACK enum
 */

typedef enum DP_AUX_DEFINITE_ERR_REACHED_ACK {
ALPHA_DP_AUX_DEFINITE_ERR_REACHED_NOT_ACK = 0x00000000,
ALPHA_DP_AUX_DEFINITE_ERR_REACHED_ACK    = 0x00000001,
} DP_AUX_DEFINITE_ERR_REACHED_ACK;

/*
 * DP_AUX_RESET enum
 */

typedef enum DP_AUX_RESET {
DP_AUX_RESET_DEASSERTED                  = 0x00000000,
DP_AUX_RESET_ASSERTED                    = 0x00000001,
} DP_AUX_RESET;

/*
 * DP_AUX_RESET_DONE enum
 */

typedef enum DP_AUX_RESET_DONE {
DP_AUX_RESET_SEQUENCE_NOT_DONE           = 0x00000000,
DP_AUX_RESET_SEQUENCE_DONE               = 0x00000001,
} DP_AUX_RESET_DONE;

/*
 * DP_AUX_PHY_WAKE_PRIORITY enum
 */

typedef enum DP_AUX_PHY_WAKE_PRIORITY {
DP_AUX_PHY_WAKE_HIGH_PRIORITY            = 0x00000000,
DP_AUX_PHY_WAKE_LOW_PRIORITY             = 0x00000001,
} DP_AUX_PHY_WAKE_PRIORITY;

/*******************************************************
 * DOUT_I2C Enums
 *******************************************************/

/*
 * DOUT_I2C_CONTROL_GO enum
 */

typedef enum DOUT_I2C_CONTROL_GO {
DOUT_I2C_CONTROL_STOP_TRANSFER           = 0x00000000,
DOUT_I2C_CONTROL_START_TRANSFER          = 0x00000001,
} DOUT_I2C_CONTROL_GO;

/*
 * DOUT_I2C_CONTROL_SOFT_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SOFT_RESET {
DOUT_I2C_CONTROL_NOT_RESET_I2C_CONTROLLER = 0x00000000,
DOUT_I2C_CONTROL_RESET_I2C_CONTROLLER    = 0x00000001,
} DOUT_I2C_CONTROL_SOFT_RESET;

/*
 * DOUT_I2C_CONTROL_SEND_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SEND_RESET {
DOUT_I2C_CONTROL__NOT_SEND_RESET         = 0x00000000,
DOUT_I2C_CONTROL__SEND_RESET             = 0x00000001,
} DOUT_I2C_CONTROL_SEND_RESET;

/*
 * DOUT_I2C_CONTROL_SEND_RESET_LENGTH enum
 */

typedef enum DOUT_I2C_CONTROL_SEND_RESET_LENGTH {
DOUT_I2C_CONTROL__SEND_RESET_LENGTH_9    = 0x00000000,
DOUT_I2C_CONTROL__SEND_RESET_LENGTH_10   = 0x00000001,
} DOUT_I2C_CONTROL_SEND_RESET_LENGTH;

/*
 * DOUT_I2C_CONTROL_SW_STATUS_RESET enum
 */

typedef enum DOUT_I2C_CONTROL_SW_STATUS_RESET {
DOUT_I2C_CONTROL_NOT_RESET_SW_STATUS     = 0x00000000,
DOUT_I2C_CONTROL_RESET_SW_STATUS         = 0x00000001,
} DOUT_I2C_CONTROL_SW_STATUS_RESET;

/*
 * DOUT_I2C_CONTROL_DDC_SELECT enum
 */

typedef enum DOUT_I2C_CONTROL_DDC_SELECT {
DOUT_I2C_CONTROL_SELECT_DDC1             = 0x00000000,
DOUT_I2C_CONTROL_SELECT_DDC2             = 0x00000001,
DOUT_I2C_CONTROL_SELECT_DDC3             = 0x00000002,
DOUT_I2C_CONTROL_SELECT_DDC4             = 0x00000003,
DOUT_I2C_CONTROL_SELECT_DDC5             = 0x00000004,
DOUT_I2C_CONTROL_SELECT_DDC6             = 0x00000005,
DOUT_I2C_CONTROL_SELECT_DDCVGA           = 0x00000006,
} DOUT_I2C_CONTROL_DDC_SELECT;

/*
 * DOUT_I2C_CONTROL_TRANSACTION_COUNT enum
 */

typedef enum DOUT_I2C_CONTROL_TRANSACTION_COUNT {
DOUT_I2C_CONTROL_TRANS0                  = 0x00000000,
DOUT_I2C_CONTROL_TRANS0_TRANS1           = 0x00000001,
DOUT_I2C_CONTROL_TRANS0_TRANS1_TRANS2    = 0x00000002,
DOUT_I2C_CONTROL_TRANS0_TRANS1_TRANS2_TRANS3  = 0x00000003,
} DOUT_I2C_CONTROL_TRANSACTION_COUNT;

/*
 * DOUT_I2C_ARBITRATION_SW_PRIORITY enum
 */

typedef enum DOUT_I2C_ARBITRATION_SW_PRIORITY {
DOUT_I2C_ARBITRATION_SW_PRIORITY_NORMAL  = 0x00000000,
DOUT_I2C_ARBITRATION_SW_PRIORITY_HIGH    = 0x00000001,
DOUT_I2C_ARBITRATION_SW_PRIORITY_0_RESERVED = 0x00000002,
DOUT_I2C_ARBITRATION_SW_PRIORITY_1_RESERVED = 0x00000003,
} DOUT_I2C_ARBITRATION_SW_PRIORITY;

/*
 * DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO enum
 */

typedef enum DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO {
DOUT_I2C_ARBITRATION_SW_QUEUE_ENABLED    = 0x00000000,
DOUT_I2C_ARBITRATION_SW_QUEUE_DISABLED   = 0x00000001,
} DOUT_I2C_ARBITRATION_NO_QUEUED_SW_GO;

/*
 * DOUT_I2C_ARBITRATION_ABORT_XFER enum
 */

typedef enum DOUT_I2C_ARBITRATION_ABORT_XFER {
DOUT_I2C_ARBITRATION_NOT_ABORT_CURRENT_TRANSFER = 0x00000000,
DOUT_I2C_ARBITRATION_ABORT_CURRENT_TRANSFER  = 0x00000001,
} DOUT_I2C_ARBITRATION_ABORT_XFER;

/*
 * DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ enum
 */

typedef enum DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ {
DOUT_I2C_ARBITRATION__NOT_USE_I2C_REG_REQ = 0x00000000,
DOUT_I2C_ARBITRATION__USE_I2C_REG_REQ    = 0x00000001,
} DOUT_I2C_ARBITRATION_USE_I2C_REG_REQ;

/*
 * DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG enum
 */

typedef enum DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG {
DOUT_I2C_ARBITRATION_DONE__NOT_USING_I2C_REG = 0x00000000,
DOUT_I2C_ARBITRATION_DONE__USING_I2C_REG  = 0x00000001,
} DOUT_I2C_ARBITRATION_DONE_USING_I2C_REG;

/*
 * DOUT_I2C_ACK enum
 */

typedef enum DOUT_I2C_ACK {
DOUT_I2C_NO_ACK                          = 0x00000000,
DOUT_I2C_ACK_TO_CLEAN                    = 0x00000001,
} DOUT_I2C_ACK;

/*
 * DOUT_I2C_DDC_SPEED_THRESHOLD enum
 */

typedef enum DOUT_I2C_DDC_SPEED_THRESHOLD {
DOUT_I2C_DDC_SPEED_THRESHOLD_BIG_THAN_ZERO  = 0x00000000,
DOUT_I2C_DDC_SPEED_THRESHOLD_QUATER_OF_TOTAL_SAMPLE  = 0x00000001,
DOUT_I2C_DDC_SPEED_THRESHOLD_HALF_OF_TOTAL_SAMPLE  = 0x00000002,
DOUT_I2C_DDC_SPEED_THRESHOLD_THREE_QUATERS_OF_TOTAL_SAMPLE  = 0x00000003,
} DOUT_I2C_DDC_SPEED_THRESHOLD;

/*
 * DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN enum
 */

typedef enum DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN {
DOUT_I2C_DDC_SETUP_DATA_DRIVE_BY_EXTERNAL_RESISTOR  = 0x00000000,
DOUT_I2C_DDC_SETUP_I2C_PAD_DRIVE_SDA     = 0x00000001,
} DOUT_I2C_DDC_SETUP_DATA_DRIVE_EN;

/*
 * DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL enum
 */

typedef enum DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL {
DOUT_I2C_DDC_SETUP_DATA_DRIVE_FOR_10MCLKS  = 0x00000000,
DOUT_I2C_DDC_SETUP_DATA_DRIVE_FOR_20MCLKS  = 0x00000001,
} DOUT_I2C_DDC_SETUP_DATA_DRIVE_SEL;

/*
 * DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE enum
 */

typedef enum DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE {
DOUT_I2C_DDC_SETUP_EDID_DETECT_CONNECT   = 0x00000000,
DOUT_I2C_DDC_SETUP_EDID_DETECT_DISCONNECT  = 0x00000001,
} DOUT_I2C_DDC_SETUP_EDID_DETECT_MODE;

/*
 * DOUT_I2C_DDC_EDID_DETECT_STATUS enum
 */

typedef enum DOUT_I2C_DDC_EDID_DETECT_STATUS {
DOUT_I2C_DDC_SETUP_EDID_CONNECT_DETECTED  = 0x00000000,
DOUT_I2C_DDC_SETUP_EDID_DISCONNECT_DETECTED  = 0x00000001,
} DOUT_I2C_DDC_EDID_DETECT_STATUS;

/*
 * DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN enum
 */

typedef enum DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN {
DOUT_I2C_DDC_SETUP_CLK_DRIVE_BY_EXTERNAL_RESISTOR  = 0x00000000,
DOUT_I2C_DDC_SETUP_I2C_PAD_DRIVE_SCL     = 0x00000001,
} DOUT_I2C_DDC_SETUP_CLK_DRIVE_EN;

/*
 * DOUT_I2C_TRANSACTION_STOP_ON_NACK enum
 */

typedef enum DOUT_I2C_TRANSACTION_STOP_ON_NACK {
DOUT_I2C_TRANSACTION_STOP_CURRENT_TRANS  = 0x00000000,
DOUT_I2C_TRANSACTION_STOP_ALL_TRANS      = 0x00000001,
} DOUT_I2C_TRANSACTION_STOP_ON_NACK;

/*
 * DOUT_I2C_DATA_INDEX_WRITE enum
 */

typedef enum DOUT_I2C_DATA_INDEX_WRITE {
DOUT_I2C_DATA__NOT_INDEX_WRITE           = 0x00000000,
DOUT_I2C_DATA__INDEX_WRITE               = 0x00000001,
} DOUT_I2C_DATA_INDEX_WRITE;

/*
 * DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET enum
 */

typedef enum DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET {
DOUT_I2C_EDID_NOT_SEND_RESET_BEFORE_EDID_READ_TRACTION = 0x00000000,
DOUT_I2C_EDID_SEND_RESET_BEFORE_EDID_READ_TRACTION  = 0x00000001,
} DOUT_I2C_EDID_DETECT_CTRL_SEND_RESET;

/*
 * DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE enum
 */

typedef enum DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE {
DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE__LEVEL  = 0x00000000,
DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE__PULSE  = 0x00000001,
} DOUT_I2C_READ_REQUEST_INTERRUPT_TYPE;

/*******************************************************
 * DIO_MISC Enums
 *******************************************************/

/*
 * DIOMEM_PWR_FORCE_CTRL enum
 */

typedef enum DIOMEM_PWR_FORCE_CTRL {
DIOMEM_NO_FORCE_REQUEST                  = 0x00000000,
DIOMEM_FORCE_LIGHT_SLEEP_REQUEST         = 0x00000001,
DIOMEM_FORCE_DEEP_SLEEP_REQUEST          = 0x00000002,
DIOMEM_FORCE_SHUT_DOWN_REQUEST           = 0x00000003,
} DIOMEM_PWR_FORCE_CTRL;

/*
 * DIOMEM_PWR_FORCE_CTRL2 enum
 */

typedef enum DIOMEM_PWR_FORCE_CTRL2 {
DIOMEM_NO_FORCE_REQ                      = 0x00000000,
DIOMEM_FORCE_LIGHT_SLEEP_REQ             = 0x00000001,
} DIOMEM_PWR_FORCE_CTRL2;

/*
 * DIOMEM_PWR_DIS_CTRL enum
 */

typedef enum DIOMEM_PWR_DIS_CTRL {
DIOMEM_ENABLE_MEM_PWR_CTRL               = 0x00000000,
DIOMEM_DISABLE_MEM_PWR_CTRL              = 0x00000001,
} DIOMEM_PWR_DIS_CTRL;

/*
 * CLOCK_GATING_EN enum
 */

typedef enum CLOCK_GATING_EN {
CLOCK_GATING_ENABLE                      = 0x00000000,
CLOCK_GATING_DISABLE                     = 0x00000001,
} CLOCK_GATING_EN;

/*
 * DIOMEM_PWR_SEL_CTRL enum
 */

typedef enum DIOMEM_PWR_SEL_CTRL {
DIOMEM_DYNAMIC_SHUT_DOWN_ENABLE          = 0x00000000,
DIOMEM_DYNAMIC_DEEP_SLEEP_ENABLE         = 0x00000001,
DIOMEM_DYNAMIC_LIGHT_SLEEP_ENABLE        = 0x00000002,
} DIOMEM_PWR_SEL_CTRL;

/*
 * DIOMEM_PWR_SEL_CTRL2 enum
 */

typedef enum DIOMEM_PWR_SEL_CTRL2 {
DIOMEM_DYNAMIC_DEEP_SLEEP_EN             = 0x00000000,
DIOMEM_DYNAMIC_LIGHT_SLEEP_EN            = 0x00000001,
} DIOMEM_PWR_SEL_CTRL2;

/*
 * PM_ASSERT_RESET enum
 */

typedef enum PM_ASSERT_RESET {
PM_ASSERT_RESET_0                        = 0x00000000,
PM_ASSERT_RESET_1                        = 0x00000001,
} PM_ASSERT_RESET;

/*
 * DAC_MUX_SELECT enum
 */

typedef enum DAC_MUX_SELECT {
DAC_MUX_SELECT_DACA                      = 0x00000000,
DAC_MUX_SELECT_DACB                      = 0x00000001,
} DAC_MUX_SELECT;

/*
 * TMDS_MUX_SELECT enum
 */

typedef enum TMDS_MUX_SELECT {
TMDS_MUX_SELECT_B                        = 0x00000000,
TMDS_MUX_SELECT_G                        = 0x00000001,
TMDS_MUX_SELECT_R                        = 0x00000002,
TMDS_MUX_SELECT_RESERVED                 = 0x00000003,
} TMDS_MUX_SELECT;

/*
 * SOFT_RESET enum
 */

typedef enum SOFT_RESET {
SOFT_RESET_0                             = 0x00000000,
SOFT_RESET_1                             = 0x00000001,
} SOFT_RESET;

/*
 * GENERIC_STEREOSYNC_SEL enum
 */

typedef enum GENERIC_STEREOSYNC_SEL {
GENERIC_STEREOSYNC_SEL_D1                = 0x00000000,
GENERIC_STEREOSYNC_SEL_D2                = 0x00000001,
GENERIC_STEREOSYNC_SEL_D3                = 0x00000002,
GENERIC_STEREOSYNC_SEL_D4                = 0x00000003,
GENERIC_STEREOSYNC_SEL_D5                = 0x00000004,
GENERIC_STEREOSYNC_SEL_D6                = 0x00000005,
GENERIC_STEREOSYNC_SEL_RESERVED          = 0x00000006,
} GENERIC_STEREOSYNC_SEL;

/*
 * DIO_HDMI_RXSTATUS_TIMER_CONTROL_DIO_HDMI_RXSTATUS_TIMER_TYPE enum
 */

typedef enum DIO_HDMI_RXSTATUS_TIMER_CONTROL_DIO_HDMI_RXSTATUS_TIMER_TYPE {
DIO_HDMI_RXSTATUS_TIMER_TYPE_LEVEL       = 0x00000000,
DIO_HDMI_RXSTATUS_TIMER_TYPE_PULSE       = 0x00000001,
} DIO_HDMI_RXSTATUS_TIMER_CONTROL_DIO_HDMI_RXSTATUS_TIMER_TYPE;

/*
 * DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE enum
 */

typedef enum DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE {
DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE_0  = 0x00000000,
DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE_1  = 0x00000001,
} DX_PROTECTION_DX_PIPE_ENC_REQUIRED_TYPE;

/*******************************************************
 * DCIO Enums
 *******************************************************/

/*
 * DCIO_DC_GENERICA_SEL enum
 */

typedef enum DCIO_DC_GENERICA_SEL {
DCIO_GENERICA_SEL_DACA_STEREOSYNC        = 0x00000000,
DCIO_GENERICA_SEL_STEREOSYNC             = 0x00000001,
DCIO_GENERICA_SEL_DACA_PIXCLK            = 0x00000002,
DCIO_GENERICA_SEL_DACB_PIXCLK            = 0x00000003,
DCIO_GENERICA_SEL_DVOA_CTL3              = 0x00000004,
DCIO_GENERICA_SEL_P1_PLLCLK              = 0x00000005,
DCIO_GENERICA_SEL_P2_PLLCLK              = 0x00000006,
DCIO_GENERICA_SEL_DVOA_STEREOSYNC        = 0x00000007,
DCIO_GENERICA_SEL_DACA_FIELD_NUMBER      = 0x00000008,
DCIO_GENERICA_SEL_DACB_FIELD_NUMBER      = 0x00000009,
DCIO_GENERICA_SEL_GENERICA_DCCG          = 0x0000000a,
DCIO_GENERICA_SEL_SYNCEN                 = 0x0000000b,
DCIO_GENERICA_SEL_UNIPHY_REFDIV_CLK      = 0x0000000c,
DCIO_GENERICA_SEL_UNIPHY_FBDIV_CLK       = 0x0000000d,
DCIO_GENERICA_SEL_UNIPHY_FBDIV_SSC_CLK   = 0x0000000e,
DCIO_GENERICA_SEL_UNIPHY_FBDIV_CLK_DIV2  = 0x0000000f,
DCIO_GENERICA_SEL_GENERICA_DPRX          = 0x00000010,
DCIO_GENERICA_SEL_GENERICB_DPRX          = 0x00000011,
} DCIO_DC_GENERICA_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL {
DCIO_UNIPHYA_TEST_REFDIV_CLK             = 0x00000000,
DCIO_UNIPHYB_TEST_REFDIV_CLK             = 0x00000001,
DCIO_UNIPHYC_TEST_REFDIV_CLK             = 0x00000002,
DCIO_UNIPHYD_TEST_REFDIV_CLK             = 0x00000003,
DCIO_UNIPHYE_TEST_REFDIV_CLK             = 0x00000004,
DCIO_UNIPHYF_TEST_REFDIV_CLK             = 0x00000005,
DCIO_UNIPHYG_TEST_REFDIV_CLK             = 0x00000006,
} DCIO_DC_GENERIC_UNIPHY_REFDIV_CLK_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL {
DCIO_UNIPHYA_FBDIV_CLK                   = 0x00000000,
DCIO_UNIPHYB_FBDIV_CLK                   = 0x00000001,
DCIO_UNIPHYC_FBDIV_CLK                   = 0x00000002,
DCIO_UNIPHYD_FBDIV_CLK                   = 0x00000003,
DCIO_UNIPHYE_FBDIV_CLK                   = 0x00000004,
DCIO_UNIPHYF_FBDIV_CLK                   = 0x00000005,
DCIO_UNIPHYG_FBDIV_CLK                   = 0x00000006,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL {
DCIO_UNIPHYA_FBDIV_SSC_CLK               = 0x00000000,
DCIO_UNIPHYB_FBDIV_SSC_CLK               = 0x00000001,
DCIO_UNIPHYC_FBDIV_SSC_CLK               = 0x00000002,
DCIO_UNIPHYD_FBDIV_SSC_CLK               = 0x00000003,
DCIO_UNIPHYE_FBDIV_SSC_CLK               = 0x00000004,
DCIO_UNIPHYF_FBDIV_SSC_CLK               = 0x00000005,
DCIO_UNIPHYG_FBDIV_SSC_CLK               = 0x00000006,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_SSC_CLK_SEL;

/*
 * DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL enum
 */

typedef enum DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL {
DCIO_UNIPHYA_TEST_FBDIV_CLK_DIV2         = 0x00000000,
DCIO_UNIPHYB_TEST_FBDIV_CLK_DIV2         = 0x00000001,
DCIO_UNIPHYC_TEST_FBDIV_CLK_DIV2         = 0x00000002,
DCIO_UNIPHYD_TEST_FBDIV_CLK_DIV2         = 0x00000003,
DCIO_UNIPHYE_TEST_FBDIV_CLK_DIV2         = 0x00000004,
DCIO_UNIPHYF_TEST_FBDIV_CLK_DIV2         = 0x00000005,
DCIO_UNIPHYG_TEST_FBDIV_CLK_DIV2         = 0x00000006,
} DCIO_DC_GENERIC_UNIPHY_FBDIV_CLK_DIV2_SEL;

/*
 * DCIO_DC_GENERICB_SEL enum
 */

typedef enum DCIO_DC_GENERICB_SEL {
DCIO_GENERICB_SEL_DACA_STEREOSYNC        = 0x00000000,
DCIO_GENERICB_SEL_STEREOSYNC             = 0x00000001,
DCIO_GENERICB_SEL_DACA_PIXCLK            = 0x00000002,
DCIO_GENERICB_SEL_DACB_PIXCLK            = 0x00000003,
DCIO_GENERICB_SEL_DVOA_CTL3              = 0x00000004,
DCIO_GENERICB_SEL_P1_PLLCLK              = 0x00000005,
DCIO_GENERICB_SEL_P2_PLLCLK              = 0x00000006,
DCIO_GENERICB_SEL_DVOA_STEREOSYNC        = 0x00000007,
DCIO_GENERICB_SEL_DACA_FIELD_NUMBER      = 0x00000008,
DCIO_GENERICB_SEL_DACB_FIELD_NUMBER      = 0x00000009,
DCIO_GENERICB_SEL_GENERICB_DCCG          = 0x0000000a,
DCIO_GENERICB_SEL_SYNCEN                 = 0x0000000b,
DCIO_GENERICB_SEL_UNIPHY_REFDIV_CLK      = 0x0000000c,
DCIO_GENERICB_SEL_UNIPHY_FBDIV_CLK       = 0x0000000d,
DCIO_GENERICB_SEL_UNIPHY_FBDIV_SSC_CLK   = 0x0000000e,
DCIO_GENERICB_SEL_UNIPHY_FBDIV_CLK_DIV2  = 0x0000000f,
} DCIO_DC_GENERICB_SEL;

/*
 * DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL enum
 */

typedef enum DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL {
DCIO_HSYNCA_OUTPUT_SEL_DISABLE           = 0x00000000,
DCIO_HSYNCA_OUTPUT_SEL_PPLL1             = 0x00000001,
DCIO_HSYNCA_OUTPUT_SEL_PPLL2             = 0x00000002,
DCIO_HSYNCA_OUTPUT_SEL_RESERVED          = 0x00000003,
} DCIO_DC_REF_CLK_CNTL_HSYNCA_OUTPUT_SEL;

/*
 * DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL enum
 */

typedef enum DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL {
DCIO_GENLK_CLK_OUTPUT_SEL_DISABLE        = 0x00000000,
DCIO_GENLK_CLK_OUTPUT_SEL_PPLL1          = 0x00000001,
DCIO_GENLK_CLK_OUTPUT_SEL_PPLL2          = 0x00000002,
DCIO_GENLK_CLK_OUTPUT_SEL_RESERVED_VALUE3  = 0x00000003,
} DCIO_DC_REF_CLK_CNTL_GENLK_CLK_OUTPUT_SEL;

/*
 * DCIO_UNIPHY_LINK_CNTL_MINIMUM_PIXVLD_LOW_DURATION enum
 */

typedef enum DCIO_UNIPHY_LINK_CNTL_MINIMUM_PIXVLD_LOW_DURATION {
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_3_CLOCKS = 0x00000000,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_7_CLOCKS = 0x00000001,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_11_CLOCKS = 0x00000002,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_15_CLOCKS = 0x00000003,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_19_CLOCKS = 0x00000004,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_23_CLOCKS = 0x00000005,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_27_CLOCKS = 0x00000006,
DCIO_UNIPHY_MINIMUM_PIXVLD_LOW_DURATION_31_CLOCKS = 0x00000007,
} DCIO_UNIPHY_LINK_CNTL_MINIMUM_PIXVLD_LOW_DURATION;

/*
 * DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT enum
 */

typedef enum DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT {
DCIO_UNIPHY_CHANNEL_NO_INVERSION         = 0x00000000,
DCIO_UNIPHY_CHANNEL_INVERTED             = 0x00000001,
} DCIO_UNIPHY_LINK_CNTL_CHANNEL_INVERT;

/*
 * DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK enum
 */

typedef enum DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK {
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_DISALLOW  = 0x00000000,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW   = 0x00000001,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW_DEBOUNCED  = 0x00000002,
DCIO_UNIPHY_LINK_ENABLE_HPD_MASK_ALLOW_TOGGLE_FILTERED  = 0x00000003,
} DCIO_UNIPHY_LINK_CNTL_ENABLE_HPD_MASK;

/*
 * DCIO_UNIPHY_CHANNEL_XBAR_SOURCE enum
 */

typedef enum DCIO_UNIPHY_CHANNEL_XBAR_SOURCE {
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH0      = 0x00000000,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH1      = 0x00000001,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH2      = 0x00000002,
DCIO_UNIPHY_CHANNEL_XBAR_SOURCE_CH3      = 0x00000003,
} DCIO_UNIPHY_CHANNEL_XBAR_SOURCE;

/*
 * DCIO_DC_DVODATA_CONFIG_VIP_MUX_EN enum
 */

typedef enum DCIO_DC_DVODATA_CONFIG_VIP_MUX_EN {
DCIO_VIP_MUX_EN_DVO                      = 0x00000000,
DCIO_VIP_MUX_EN_VIP                      = 0x00000001,
} DCIO_DC_DVODATA_CONFIG_VIP_MUX_EN;

/*
 * DCIO_DC_DVODATA_CONFIG_VIP_ALTER_MAPPING_EN enum
 */

typedef enum DCIO_DC_DVODATA_CONFIG_VIP_ALTER_MAPPING_EN {
DCIO_VIP_ALTER_MAPPING_EN_DEFAULT        = 0x00000000,
DCIO_VIP_ALTER_MAPPING_EN_ALTERNATIVE    = 0x00000001,
} DCIO_DC_DVODATA_CONFIG_VIP_ALTER_MAPPING_EN;

/*
 * DCIO_DC_DVODATA_CONFIG_DVO_ALTER_MAPPING_EN enum
 */

typedef enum DCIO_DC_DVODATA_CONFIG_DVO_ALTER_MAPPING_EN {
DCIO_DVO_ALTER_MAPPING_EN_DEFAULT        = 0x00000000,
DCIO_DVO_ALTER_MAPPING_EN_ALTERNATIVE    = 0x00000001,
} DCIO_DC_DVODATA_CONFIG_DVO_ALTER_MAPPING_EN;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_DISABLE_SYNCEN_CONTROL_OF_TX_EN enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_DISABLE_SYNCEN_CONTROL_OF_TX_EN {
DCIO_LVTMA_PWRSEQ_DISABLE_SYNCEN_CONTROL_OF_TX_ENABLE  = 0x00000000,
DCIO_LVTMA_PWRSEQ_DISABLE_SYNCEN_CONTROL_OF_TX_DISABLE  = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_DISABLE_SYNCEN_CONTROL_OF_TX_EN;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_TARGET_STATE enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_TARGET_STATE {
DCIO_LVTMA_PWRSEQ_TARGET_STATE_LCD_OFF   = 0x00000000,
DCIO_LVTMA_PWRSEQ_TARGET_STATE_LCD_ON    = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_TARGET_STATE;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_SYNCEN_POL enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_SYNCEN_POL {
DCIO_LVTMA_SYNCEN_POL_NON_INVERT         = 0x00000000,
DCIO_LVTMA_SYNCEN_POL_INVERT             = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_SYNCEN_POL;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON {
DCIO_LVTMA_DIGON_OFF                     = 0x00000000,
DCIO_LVTMA_DIGON_ON                      = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON_POL enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON_POL {
DCIO_LVTMA_DIGON_POL_NON_INVERT          = 0x00000000,
DCIO_LVTMA_DIGON_POL_INVERT              = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_DIGON_POL;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON {
DCIO_LVTMA_BLON_OFF                      = 0x00000000,
DCIO_LVTMA_BLON_ON                       = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON;

/*
 * DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON_POL enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON_POL {
DCIO_LVTMA_BLON_POL_NON_INVERT           = 0x00000000,
DCIO_LVTMA_BLON_POL_INVERT               = 0x00000001,
} DCIO_LVTMA_PWRSEQ_CNTL_LVTMA_BLON_POL;

/*
 * DCIO_LVTMA_PWRSEQ_DELAY2_LVTMA_VARY_BL_OVERRIDE_EN enum
 */

typedef enum DCIO_LVTMA_PWRSEQ_DELAY2_LVTMA_VARY_BL_OVERRIDE_EN {
DCIO_LVTMA_VARY_BL_OVERRIDE_EN_BLON      = 0x00000000,
DCIO_LVTMA_VARY_BL_OVERRIDE_EN_SEPARATE  = 0x00000001,
} DCIO_LVTMA_PWRSEQ_DELAY2_LVTMA_VARY_BL_OVERRIDE_EN;

/*
 * DCIO_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN enum
 */

typedef enum DCIO_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN {
DCIO_BL_PWM_FRACTIONAL_DISABLE           = 0x00000000,
DCIO_BL_PWM_FRACTIONAL_ENABLE            = 0x00000001,
} DCIO_BL_PWM_CNTL_BL_PWM_FRACTIONAL_EN;

/*
 * DCIO_BL_PWM_CNTL_BL_PWM_EN enum
 */

typedef enum DCIO_BL_PWM_CNTL_BL_PWM_EN {
DCIO_BL_PWM_DISABLE                      = 0x00000000,
DCIO_BL_PWM_ENABLE                       = 0x00000001,
} DCIO_BL_PWM_CNTL_BL_PWM_EN;

/*
 * DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE enum
 */

typedef enum DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE {
DCIO_BL_PWM_OVERRIDE_BL_OUT_DISABLE      = 0x00000000,
DCIO_BL_PWM_OVERRIDE_BL_OUT_ENABLE       = 0x00000001,
} DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_BL_OUT_ENABLE;

/*
 * DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN enum
 */

typedef enum DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN {
DCIO_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN_NORMAL  = 0x00000000,
DCIO_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN_PWM  = 0x00000001,
} DCIO_BL_PWM_CNTL2_BL_PWM_OVERRIDE_LVTMA_PWRSEQ_EN;

/*
 * DCIO_BL_PWM_GRP1_REG_LOCK enum
 */

typedef enum DCIO_BL_PWM_GRP1_REG_LOCK {
DCIO_BL_PWM_GRP1_REG_LOCK_DISABLE        = 0x00000000,
DCIO_BL_PWM_GRP1_REG_LOCK_ENABLE         = 0x00000001,
} DCIO_BL_PWM_GRP1_REG_LOCK;

/*
 * DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START enum
 */

typedef enum DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START {
DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START_DISABLE  = 0x00000000,
DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START_ENABLE  = 0x00000001,
} DCIO_BL_PWM_GRP1_UPDATE_AT_FRAME_START;

/*
 * DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL enum
 */

typedef enum DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL {
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER1  = 0x00000000,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER2  = 0x00000001,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER3  = 0x00000002,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER4  = 0x00000003,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER5  = 0x00000004,
DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL_CONTROLLER6  = 0x00000005,
} DCIO_BL_PWM_GRP1_FRAME_START_DISP_SEL;

/*
 * DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN enum
 */

typedef enum DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN {
DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN_BL_PWM  = 0x00000000,
DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN_BL1_PWM  = 0x00000001,
} DCIO_BL_PWM_GRP1_READBACK_DB_REG_VALUE_EN;

/*
 * DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN enum
 */

typedef enum DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN {
DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_ENABLE  = 0x00000000,
DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_DISABLE  = 0x00000001,
} DCIO_BL_PWM_GRP1_IGNORE_MASTER_LOCK_EN;

/*
 * DCIO_GSL_SEL enum
 */

typedef enum DCIO_GSL_SEL {
DCIO_GSL_SEL_GROUP_0                     = 0x00000000,
DCIO_GSL_SEL_GROUP_1                     = 0x00000001,
DCIO_GSL_SEL_GROUP_2                     = 0x00000002,
} DCIO_GSL_SEL;

/*
 * DCIO_GENLK_CLK_GSL_MASK enum
 */

typedef enum DCIO_GENLK_CLK_GSL_MASK {
DCIO_GENLK_CLK_GSL_MASK_NO               = 0x00000000,
DCIO_GENLK_CLK_GSL_MASK_TIMING           = 0x00000001,
DCIO_GENLK_CLK_GSL_MASK_STEREO           = 0x00000002,
} DCIO_GENLK_CLK_GSL_MASK;

/*
 * DCIO_GENLK_VSYNC_GSL_MASK enum
 */

typedef enum DCIO_GENLK_VSYNC_GSL_MASK {
DCIO_GENLK_VSYNC_GSL_MASK_NO             = 0x00000000,
DCIO_GENLK_VSYNC_GSL_MASK_TIMING         = 0x00000001,
DCIO_GENLK_VSYNC_GSL_MASK_STEREO         = 0x00000002,
} DCIO_GENLK_VSYNC_GSL_MASK;

/*
 * DCIO_SWAPLOCK_A_GSL_MASK enum
 */

typedef enum DCIO_SWAPLOCK_A_GSL_MASK {
DCIO_SWAPLOCK_A_GSL_MASK_NO              = 0x00000000,
DCIO_SWAPLOCK_A_GSL_MASK_TIMING          = 0x00000001,
DCIO_SWAPLOCK_A_GSL_MASK_STEREO          = 0x00000002,
} DCIO_SWAPLOCK_A_GSL_MASK;

/*
 * DCIO_SWAPLOCK_B_GSL_MASK enum
 */

typedef enum DCIO_SWAPLOCK_B_GSL_MASK {
DCIO_SWAPLOCK_B_GSL_MASK_NO              = 0x00000000,
DCIO_SWAPLOCK_B_GSL_MASK_TIMING          = 0x00000001,
DCIO_SWAPLOCK_B_GSL_MASK_STEREO          = 0x00000002,
} DCIO_SWAPLOCK_B_GSL_MASK;

/*
 * DCIO_DC_GPU_TIMER_START_POSITION enum
 */

typedef enum DCIO_DC_GPU_TIMER_START_POSITION {
DCIO_GPU_TIMER_START_0_END_27            = 0x00000000,
DCIO_GPU_TIMER_START_1_END_28            = 0x00000001,
DCIO_GPU_TIMER_START_2_END_29            = 0x00000002,
DCIO_GPU_TIMER_START_3_END_30            = 0x00000003,
DCIO_GPU_TIMER_START_4_END_31            = 0x00000004,
DCIO_GPU_TIMER_START_6_END_33            = 0x00000005,
DCIO_GPU_TIMER_START_8_END_35            = 0x00000006,
DCIO_GPU_TIMER_START_10_END_37           = 0x00000007,
} DCIO_DC_GPU_TIMER_START_POSITION;

/*
 * DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL enum
 */

typedef enum DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL {
DCIO_TEST_CLK_SEL_DISPCLK                = 0x00000000,
DCIO_TEST_CLK_SEL_GATED_DISPCLK          = 0x00000001,
DCIO_TEST_CLK_SEL_SOCCLK                 = 0x00000002,
} DCIO_CLOCK_CNTL_DCIO_TEST_CLK_SEL;

/*
 * DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS enum
 */

typedef enum DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS {
DCIO_DISPCLK_R_DCIO_GATE_DISABLE         = 0x00000000,
DCIO_DISPCLK_R_DCIO_GATE_ENABLE          = 0x00000001,
} DCIO_CLOCK_CNTL_DISPCLK_R_DCIO_GATE_DIS;

/*
 * DCIO_DIO_OTG_EXT_VSYNC_MUX enum
 */

typedef enum DCIO_DIO_OTG_EXT_VSYNC_MUX {
DCIO_EXT_VSYNC_MUX_SWAPLOCKB             = 0x00000000,
DCIO_EXT_VSYNC_MUX_OTG0                  = 0x00000001,
DCIO_EXT_VSYNC_MUX_OTG1                  = 0x00000002,
DCIO_EXT_VSYNC_MUX_OTG2                  = 0x00000003,
DCIO_EXT_VSYNC_MUX_OTG3                  = 0x00000004,
DCIO_EXT_VSYNC_MUX_OTG4                  = 0x00000005,
DCIO_EXT_VSYNC_MUX_OTG5                  = 0x00000006,
DCIO_EXT_VSYNC_MUX_GENERICB              = 0x00000007,
} DCIO_DIO_OTG_EXT_VSYNC_MUX;

/*
 * DCIO_DIO_EXT_VSYNC_MASK enum
 */

typedef enum DCIO_DIO_EXT_VSYNC_MASK {
DCIO_EXT_VSYNC_MASK_NONE                 = 0x00000000,
DCIO_EXT_VSYNC_MASK_PIPE0                = 0x00000001,
DCIO_EXT_VSYNC_MASK_PIPE1                = 0x00000002,
DCIO_EXT_VSYNC_MASK_PIPE2                = 0x00000003,
DCIO_EXT_VSYNC_MASK_PIPE3                = 0x00000004,
DCIO_EXT_VSYNC_MASK_PIPE4                = 0x00000005,
DCIO_EXT_VSYNC_MASK_PIPE5                = 0x00000006,
DCIO_EXT_VSYNC_MASK_NONE_DUPLICATE       = 0x00000007,
} DCIO_DIO_EXT_VSYNC_MASK;

/*
 * DCIO_DSYNC_SOFT_RESET enum
 */

typedef enum DCIO_DSYNC_SOFT_RESET {
DCIO_DSYNC_SOFT_RESET_DEASSERT           = 0x00000000,
DCIO_DSYNC_SOFT_RESET_ASSERT             = 0x00000001,
} DCIO_DSYNC_SOFT_RESET;

/*
 * DCIO_DACA_SOFT_RESET enum
 */

typedef enum DCIO_DACA_SOFT_RESET {
DCIO_DACA_SOFT_RESET_DEASSERT            = 0x00000000,
DCIO_DACA_SOFT_RESET_ASSERT              = 0x00000001,
} DCIO_DACA_SOFT_RESET;

/*
 * DCIO_DCRXPHY_SOFT_RESET enum
 */

typedef enum DCIO_DCRXPHY_SOFT_RESET {
DCIO_DCRXPHY_SOFT_RESET_DEASSERT         = 0x00000000,
DCIO_DCRXPHY_SOFT_RESET_ASSERT           = 0x00000001,
} DCIO_DCRXPHY_SOFT_RESET;

/*
 * DCIO_DPHY_LANE_SEL enum
 */

typedef enum DCIO_DPHY_LANE_SEL {
DCIO_DPHY_LANE_SEL_LANE0                 = 0x00000000,
DCIO_DPHY_LANE_SEL_LANE1                 = 0x00000001,
DCIO_DPHY_LANE_SEL_LANE2                 = 0x00000002,
DCIO_DPHY_LANE_SEL_LANE3                 = 0x00000003,
} DCIO_DPHY_LANE_SEL;

/*
 * DCIO_DPCS_INTERRUPT_TYPE enum
 */

typedef enum DCIO_DPCS_INTERRUPT_TYPE {
DCIO_DPCS_INTERRUPT_TYPE_LEVEL_BASED     = 0x00000000,
DCIO_DPCS_INTERRUPT_TYPE_PULSE_BASED     = 0x00000001,
} DCIO_DPCS_INTERRUPT_TYPE;

/*
 * DCIO_DPCS_INTERRUPT_MASK enum
 */

typedef enum DCIO_DPCS_INTERRUPT_MASK {
DCIO_DPCS_INTERRUPT_DISABLE              = 0x00000000,
DCIO_DPCS_INTERRUPT_ENABLE               = 0x00000001,
} DCIO_DPCS_INTERRUPT_MASK;

/*
 * DCIO_DC_GPU_TIMER_READ_SELECT enum
 */

typedef enum DCIO_DC_GPU_TIMER_READ_SELECT {
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_V_UPDATE  = 0x00000000,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_V_UPDATE  = 0x00000001,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_P_FLIP  = 0x00000002,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_P_FLIP  = 0x00000003,
DCIO_GPU_TIMER_READ_SELECT_LOWER_D1_VSYNC_NOM  = 0x00000004,
DCIO_GPU_TIMER_READ_SELECT_UPPER_D1_VSYNC_NOM  = 0x00000005,
} DCIO_DC_GPU_TIMER_READ_SELECT;

/*
 * DCIO_IMPCAL_STEP_DELAY enum
 */

typedef enum DCIO_IMPCAL_STEP_DELAY {
DCIO_IMPCAL_STEP_DELAY_1us               = 0x00000000,
DCIO_IMPCAL_STEP_DELAY_2us               = 0x00000001,
DCIO_IMPCAL_STEP_DELAY_3us               = 0x00000002,
DCIO_IMPCAL_STEP_DELAY_4us               = 0x00000003,
DCIO_IMPCAL_STEP_DELAY_5us               = 0x00000004,
DCIO_IMPCAL_STEP_DELAY_6us               = 0x00000005,
DCIO_IMPCAL_STEP_DELAY_7us               = 0x00000006,
DCIO_IMPCAL_STEP_DELAY_8us               = 0x00000007,
DCIO_IMPCAL_STEP_DELAY_9us               = 0x00000008,
DCIO_IMPCAL_STEP_DELAY_10us              = 0x00000009,
DCIO_IMPCAL_STEP_DELAY_11us              = 0x0000000a,
DCIO_IMPCAL_STEP_DELAY_12us              = 0x0000000b,
DCIO_IMPCAL_STEP_DELAY_13us              = 0x0000000c,
DCIO_IMPCAL_STEP_DELAY_14us              = 0x0000000d,
DCIO_IMPCAL_STEP_DELAY_15us              = 0x0000000e,
DCIO_IMPCAL_STEP_DELAY_16us              = 0x0000000f,
} DCIO_IMPCAL_STEP_DELAY;

/*
 * DCIO_UNIPHY_IMPCAL_SEL enum
 */

typedef enum DCIO_UNIPHY_IMPCAL_SEL {
DCIO_UNIPHY_IMPCAL_SEL_TEMPERATURE       = 0x00000000,
DCIO_UNIPHY_IMPCAL_SEL_BINARY            = 0x00000001,
} DCIO_UNIPHY_IMPCAL_SEL;

/*******************************************************
 * DCIO_CHIP Enums
 *******************************************************/

/*
 * DCIOCHIP_HPD_SEL enum
 */

typedef enum DCIOCHIP_HPD_SEL {
DCIOCHIP_HPD_SEL_ASYNC                   = 0x00000000,
DCIOCHIP_HPD_SEL_CLOCKED                 = 0x00000001,
} DCIOCHIP_HPD_SEL;

/*
 * DCIOCHIP_PAD_MODE enum
 */

typedef enum DCIOCHIP_PAD_MODE {
DCIOCHIP_PAD_MODE_DDC                    = 0x00000000,
DCIOCHIP_PAD_MODE_DP                     = 0x00000001,
} DCIOCHIP_PAD_MODE;

/*
 * DCIOCHIP_AUXSLAVE_PAD_MODE enum
 */

typedef enum DCIOCHIP_AUXSLAVE_PAD_MODE {
DCIOCHIP_AUXSLAVE_PAD_MODE_I2C           = 0x00000000,
DCIOCHIP_AUXSLAVE_PAD_MODE_AUX           = 0x00000001,
} DCIOCHIP_AUXSLAVE_PAD_MODE;

/*
 * DCIOCHIP_INVERT enum
 */

typedef enum DCIOCHIP_INVERT {
DCIOCHIP_POL_NON_INVERT                  = 0x00000000,
DCIOCHIP_POL_INVERT                      = 0x00000001,
} DCIOCHIP_INVERT;

/*
 * DCIOCHIP_PD_EN enum
 */

typedef enum DCIOCHIP_PD_EN {
DCIOCHIP_PD_EN_NOTALLOW                  = 0x00000000,
DCIOCHIP_PD_EN_ALLOW                     = 0x00000001,
} DCIOCHIP_PD_EN;

/*
 * DCIOCHIP_GPIO_MASK_EN enum
 */

typedef enum DCIOCHIP_GPIO_MASK_EN {
DCIOCHIP_GPIO_MASK_EN_HARDWARE           = 0x00000000,
DCIOCHIP_GPIO_MASK_EN_SOFTWARE           = 0x00000001,
} DCIOCHIP_GPIO_MASK_EN;

/*
 * DCIOCHIP_MASK enum
 */

typedef enum DCIOCHIP_MASK {
DCIOCHIP_MASK_DISABLE                    = 0x00000000,
DCIOCHIP_MASK_ENABLE                     = 0x00000001,
} DCIOCHIP_MASK;

/*
 * DCIOCHIP_GPIO_I2C_MASK enum
 */

typedef enum DCIOCHIP_GPIO_I2C_MASK {
DCIOCHIP_GPIO_I2C_MASK_DISABLE           = 0x00000000,
DCIOCHIP_GPIO_I2C_MASK_ENABLE            = 0x00000001,
} DCIOCHIP_GPIO_I2C_MASK;

/*
 * DCIOCHIP_GPIO_I2C_DRIVE enum
 */

typedef enum DCIOCHIP_GPIO_I2C_DRIVE {
DCIOCHIP_GPIO_I2C_DRIVE_LOW              = 0x00000000,
DCIOCHIP_GPIO_I2C_DRIVE_HIGH             = 0x00000001,
} DCIOCHIP_GPIO_I2C_DRIVE;

/*
 * DCIOCHIP_GPIO_I2C_EN enum
 */

typedef enum DCIOCHIP_GPIO_I2C_EN {
DCIOCHIP_GPIO_I2C_DISABLE                = 0x00000000,
DCIOCHIP_GPIO_I2C_ENABLE                 = 0x00000001,
} DCIOCHIP_GPIO_I2C_EN;

/*
 * DCIOCHIP_MASK_4BIT enum
 */

typedef enum DCIOCHIP_MASK_4BIT {
DCIOCHIP_MASK_4BIT_DISABLE               = 0x00000000,
DCIOCHIP_MASK_4BIT_ENABLE                = 0x0000000f,
} DCIOCHIP_MASK_4BIT;

/*
 * DCIOCHIP_ENABLE_4BIT enum
 */

typedef enum DCIOCHIP_ENABLE_4BIT {
DCIOCHIP_4BIT_DISABLE                    = 0x00000000,
DCIOCHIP_4BIT_ENABLE                     = 0x0000000f,
} DCIOCHIP_ENABLE_4BIT;

/*
 * DCIOCHIP_MASK_5BIT enum
 */

typedef enum DCIOCHIP_MASK_5BIT {
DCIOCHIP_MASIK_5BIT_DISABLE              = 0x00000000,
DCIOCHIP_MASIK_5BIT_ENABLE               = 0x0000001f,
} DCIOCHIP_MASK_5BIT;

/*
 * DCIOCHIP_ENABLE_5BIT enum
 */

typedef enum DCIOCHIP_ENABLE_5BIT {
DCIOCHIP_5BIT_DISABLE                    = 0x00000000,
DCIOCHIP_5BIT_ENABLE                     = 0x0000001f,
} DCIOCHIP_ENABLE_5BIT;

/*
 * DCIOCHIP_MASK_2BIT enum
 */

typedef enum DCIOCHIP_MASK_2BIT {
DCIOCHIP_MASK_2BIT_DISABLE               = 0x00000000,
DCIOCHIP_MASK_2BIT_ENABLE                = 0x00000003,
} DCIOCHIP_MASK_2BIT;

/*
 * DCIOCHIP_ENABLE_2BIT enum
 */

typedef enum DCIOCHIP_ENABLE_2BIT {
DCIOCHIP_2BIT_DISABLE                    = 0x00000000,
DCIOCHIP_2BIT_ENABLE                     = 0x00000003,
} DCIOCHIP_ENABLE_2BIT;

/*
 * DCIOCHIP_REF_27_SRC_SEL enum
 */

typedef enum DCIOCHIP_REF_27_SRC_SEL {
DCIOCHIP_REF_27_SRC_SEL_XTAL_DIVIDER     = 0x00000000,
DCIOCHIP_REF_27_SRC_SEL_DISP_CLKIN2_DIVIDER  = 0x00000001,
DCIOCHIP_REF_27_SRC_SEL_XTAL_BYPASS      = 0x00000002,
DCIOCHIP_REF_27_SRC_SEL_DISP_CLKIN2_BYPASS  = 0x00000003,
} DCIOCHIP_REF_27_SRC_SEL;

/*
 * DCIOCHIP_DVO_VREFPON enum
 */

typedef enum DCIOCHIP_DVO_VREFPON {
DCIOCHIP_DVO_VREFPON_DISABLE             = 0x00000000,
DCIOCHIP_DVO_VREFPON_ENABLE              = 0x00000001,
} DCIOCHIP_DVO_VREFPON;

/*
 * DCIOCHIP_DVO_VREFSEL enum
 */

typedef enum DCIOCHIP_DVO_VREFSEL {
DCIOCHIP_DVO_VREFSEL_ONCHIP              = 0x00000000,
DCIOCHIP_DVO_VREFSEL_EXTERNAL            = 0x00000001,
} DCIOCHIP_DVO_VREFSEL;

/*
 * DCIOCHIP_SPDIF1_IMODE enum
 */

typedef enum DCIOCHIP_SPDIF1_IMODE {
DCIOCHIP_SPDIF1_IMODE_OE_A               = 0x00000000,
DCIOCHIP_SPDIF1_IMODE_TSTE_TSTO          = 0x00000001,
} DCIOCHIP_SPDIF1_IMODE;

/*
 * DCIOCHIP_AUX_FALLSLEWSEL enum
 */

typedef enum DCIOCHIP_AUX_FALLSLEWSEL {
DCIOCHIP_AUX_FALLSLEWSEL_LOW             = 0x00000000,
DCIOCHIP_AUX_FALLSLEWSEL_HIGH0           = 0x00000001,
DCIOCHIP_AUX_FALLSLEWSEL_HIGH1           = 0x00000002,
DCIOCHIP_AUX_FALLSLEWSEL_ULTRAHIGH       = 0x00000003,
} DCIOCHIP_AUX_FALLSLEWSEL;

/*
 * DCIOCHIP_I2C_FALLSLEWSEL enum
 */

typedef enum DCIOCHIP_I2C_FALLSLEWSEL {
DCIOCHIP_I2C_FALLSLEWSEL_00              = 0x00000000,
DCIOCHIP_I2C_FALLSLEWSEL_01              = 0x00000001,
DCIOCHIP_I2C_FALLSLEWSEL_10              = 0x00000002,
DCIOCHIP_I2C_FALLSLEWSEL_11              = 0x00000003,
} DCIOCHIP_I2C_FALLSLEWSEL;

/*
 * DCIOCHIP_AUX_SPIKESEL enum
 */

typedef enum DCIOCHIP_AUX_SPIKESEL {
DCIOCHIP_AUX_SPIKESEL_50NS               = 0x00000000,
DCIOCHIP_AUX_SPIKESEL_10NS               = 0x00000001,
} DCIOCHIP_AUX_SPIKESEL;

/*
 * DCIOCHIP_AUX_CSEL0P9 enum
 */

typedef enum DCIOCHIP_AUX_CSEL0P9 {
DCIOCHIP_AUX_CSEL_DEC1P0                 = 0x00000000,
DCIOCHIP_AUX_CSEL_DEC0P9                 = 0x00000001,
} DCIOCHIP_AUX_CSEL0P9;

/*
 * DCIOCHIP_AUX_CSEL1P1 enum
 */

typedef enum DCIOCHIP_AUX_CSEL1P1 {
DCIOCHIP_AUX_CSEL_INC1P0                 = 0x00000000,
DCIOCHIP_AUX_CSEL_INC1P1                 = 0x00000001,
} DCIOCHIP_AUX_CSEL1P1;

/*
 * DCIOCHIP_AUX_RSEL0P9 enum
 */

typedef enum DCIOCHIP_AUX_RSEL0P9 {
DCIOCHIP_AUX_RSEL_DEC1P0                 = 0x00000000,
DCIOCHIP_AUX_RSEL_DEC0P9                 = 0x00000001,
} DCIOCHIP_AUX_RSEL0P9;

/*
 * DCIOCHIP_AUX_RSEL1P1 enum
 */

typedef enum DCIOCHIP_AUX_RSEL1P1 {
DCIOCHIP_AUX_RSEL_INC1P0                 = 0x00000000,
DCIOCHIP_AUX_RSEL_INC1P1                 = 0x00000001,
} DCIOCHIP_AUX_RSEL1P1;

/*
 * DCIOCHIP_AUX_HYS_TUNE enum
 */

typedef enum DCIOCHIP_AUX_HYS_TUNE {
DCIOCHIP_AUX_HYS_TUNE_0                  = 0x00000000,
DCIOCHIP_AUX_HYS_TUNE_1                  = 0x00000001,
DCIOCHIP_AUX_HYS_TUNE_2                  = 0x00000002,
DCIOCHIP_AUX_HYS_TUNE_3                  = 0x00000003,
} DCIOCHIP_AUX_HYS_TUNE;

/*
 * DCIOCHIP_AUX_VOD_TUNE enum
 */

typedef enum DCIOCHIP_AUX_VOD_TUNE {
DCIOCHIP_AUX_VOD_TUNE_0                  = 0x00000000,
DCIOCHIP_AUX_VOD_TUNE_1                  = 0x00000001,
DCIOCHIP_AUX_VOD_TUNE_2                  = 0x00000002,
DCIOCHIP_AUX_VOD_TUNE_3                  = 0x00000003,
} DCIOCHIP_AUX_VOD_TUNE;

/*
 * DCIOCHIP_I2C_VPH_1V2_EN enum
 */

typedef enum DCIOCHIP_I2C_VPH_1V2_EN {
DCIOCHIP_I2C_VPH_1V2_EN_0                = 0x00000000,
DCIOCHIP_I2C_VPH_1V2_EN_1                = 0x00000001,
} DCIOCHIP_I2C_VPH_1V2_EN;

/*
 * DCIOCHIP_I2C_COMPSEL enum
 */

typedef enum DCIOCHIP_I2C_COMPSEL {
DCIOCHIP_I2C_REC_SCHMIT                  = 0x00000000,
DCIOCHIP_I2C_REC_COMPARATOR              = 0x00000001,
} DCIOCHIP_I2C_COMPSEL;

/*
 * DCIOCHIP_AUX_ALL_PWR_OK enum
 */

typedef enum DCIOCHIP_AUX_ALL_PWR_OK {
DCIOCHIP_AUX_ALL_PWR_OK_0                = 0x00000000,
DCIOCHIP_AUX_ALL_PWR_OK_1                = 0x00000001,
} DCIOCHIP_AUX_ALL_PWR_OK;

/*
 * DCIOCHIP_I2C_RECEIVER_SEL enum
 */

typedef enum DCIOCHIP_I2C_RECEIVER_SEL {
DCIOCHIP_I2C_RECEIVER_SEL_0              = 0x00000000,
DCIOCHIP_I2C_RECEIVER_SEL_1              = 0x00000001,
DCIOCHIP_I2C_RECEIVER_SEL_2              = 0x00000002,
DCIOCHIP_I2C_RECEIVER_SEL_3              = 0x00000003,
} DCIOCHIP_I2C_RECEIVER_SEL;

/*
 * DCIOCHIP_AUX_RECEIVER_SEL enum
 */

typedef enum DCIOCHIP_AUX_RECEIVER_SEL {
DCIOCHIP_AUX_RECEIVER_SEL_0              = 0x00000000,
DCIOCHIP_AUX_RECEIVER_SEL_1              = 0x00000001,
DCIOCHIP_AUX_RECEIVER_SEL_2              = 0x00000002,
DCIOCHIP_AUX_RECEIVER_SEL_3              = 0x00000003,
} DCIOCHIP_AUX_RECEIVER_SEL;

/*******************************************************
 * AZCONTROLLER Enums
 *******************************************************/

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL {
GENERIC_AZ_CONTROLLER_REGISTER_DISABLE   = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_ENABLE    = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED {
GENERIC_AZ_CONTROLLER_REGISTER_DISABLE_RESERVED  = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_RESERVED  = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_ENABLE_CONTROL_RESERVED;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_STATUS enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_STATUS {
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_NOT_SET  = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_SET  = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_STATUS;

/*
 * GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED enum
 */

typedef enum GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED {
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_NOT_SET_RESERVED  = 0x00000000,
GENERIC_AZ_CONTROLLER_REGISTER_STATUS_SET_RESERVED  = 0x00000001,
} GENERIC_AZ_CONTROLLER_REGISTER_STATUS_RESERVED;

/*
 * AZ_GLOBAL_CAPABILITIES enum
 */

typedef enum AZ_GLOBAL_CAPABILITIES {
AZ_GLOBAL_CAPABILITIES_SIXTY_FOUR_BIT_ADDRESS_NOT_SUPPORTED  = 0x00000000,
AZ_GLOBAL_CAPABILITIES_SIXTY_FOUR_BIT_ADDRESS_SUPPORTED  = 0x00000001,
} AZ_GLOBAL_CAPABILITIES;

/*
 * GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE enum
 */

typedef enum GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE {
ACCEPT_UNSOLICITED_RESPONSE_NOT_ENABLE   = 0x00000000,
ACCEPT_UNSOLICITED_RESPONSE_ENABLE       = 0x00000001,
} GLOBAL_CONTROL_ACCEPT_UNSOLICITED_RESPONSE;

/*
 * GLOBAL_CONTROL_FLUSH_CONTROL enum
 */

typedef enum GLOBAL_CONTROL_FLUSH_CONTROL {
FLUSH_CONTROL_FLUSH_NOT_STARTED          = 0x00000000,
FLUSH_CONTROL_FLUSH_STARTED              = 0x00000001,
} GLOBAL_CONTROL_FLUSH_CONTROL;

/*
 * GLOBAL_CONTROL_CONTROLLER_RESET enum
 */

typedef enum GLOBAL_CONTROL_CONTROLLER_RESET {
CONTROLLER_RESET_AZ_CONTROLLER_IN_RESET  = 0x00000000,
CONTROLLER_RESET_AZ_CONTROLLER_NOT_IN_RESET  = 0x00000001,
} GLOBAL_CONTROL_CONTROLLER_RESET;

/*
 * AZ_STATE_CHANGE_STATUS enum
 */

typedef enum AZ_STATE_CHANGE_STATUS {
AZ_STATE_CHANGE_STATUS_CODEC_NOT_PRESENT  = 0x00000000,
AZ_STATE_CHANGE_STATUS_CODEC_PRESENT     = 0x00000001,
} AZ_STATE_CHANGE_STATUS;

/*
 * GLOBAL_STATUS_FLUSH_STATUS enum
 */

typedef enum GLOBAL_STATUS_FLUSH_STATUS {
GLOBAL_STATUS_FLUSH_STATUS_FLUSH_NOT_ENDED  = 0x00000000,
GLOBAL_STATUS_FLUSH_STATUS_FLUSH_ENDED   = 0x00000001,
} GLOBAL_STATUS_FLUSH_STATUS;

/*
 * STREAM_0_SYNCHRONIZATION enum
 */

typedef enum STREAM_0_SYNCHRONIZATION {
STREAM_0_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_0_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_0_SYNCHRONIZATION;

/*
 * STREAM_1_SYNCHRONIZATION enum
 */

typedef enum STREAM_1_SYNCHRONIZATION {
STREAM_1_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_1_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_1_SYNCHRONIZATION;

/*
 * STREAM_2_SYNCHRONIZATION enum
 */

typedef enum STREAM_2_SYNCHRONIZATION {
STREAM_2_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_2_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_2_SYNCHRONIZATION;

/*
 * STREAM_3_SYNCHRONIZATION enum
 */

typedef enum STREAM_3_SYNCHRONIZATION {
STREAM_3_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_3_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_3_SYNCHRONIZATION;

/*
 * STREAM_4_SYNCHRONIZATION enum
 */

typedef enum STREAM_4_SYNCHRONIZATION {
STREAM_4_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_4_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_4_SYNCHRONIZATION;

/*
 * STREAM_5_SYNCHRONIZATION enum
 */

typedef enum STREAM_5_SYNCHRONIZATION {
STREAM_5_SYNCHRONIZATION_STEAM_NOT_STOPPED  = 0x00000000,
STREAM_5_SYNCHRONIZATION_STEAM_STOPPED   = 0x00000001,
} STREAM_5_SYNCHRONIZATION;

/*
 * STREAM_6_SYNCHRONIZATION enum
 */

typedef enum STREAM_6_SYNCHRONIZATION {
STREAM_6_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_6_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_6_SYNCHRONIZATION;

/*
 * STREAM_7_SYNCHRONIZATION enum
 */

typedef enum STREAM_7_SYNCHRONIZATION {
STREAM_7_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_7_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_7_SYNCHRONIZATION;

/*
 * STREAM_8_SYNCHRONIZATION enum
 */

typedef enum STREAM_8_SYNCHRONIZATION {
STREAM_8_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_8_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_8_SYNCHRONIZATION;

/*
 * STREAM_9_SYNCHRONIZATION enum
 */

typedef enum STREAM_9_SYNCHRONIZATION {
STREAM_9_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_9_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_9_SYNCHRONIZATION;

/*
 * STREAM_10_SYNCHRONIZATION enum
 */

typedef enum STREAM_10_SYNCHRONIZATION {
STREAM_10_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_10_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_10_SYNCHRONIZATION;

/*
 * STREAM_11_SYNCHRONIZATION enum
 */

typedef enum STREAM_11_SYNCHRONIZATION {
STREAM_11_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_11_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_11_SYNCHRONIZATION;

/*
 * STREAM_12_SYNCHRONIZATION enum
 */

typedef enum STREAM_12_SYNCHRONIZATION {
STREAM_12_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_12_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_12_SYNCHRONIZATION;

/*
 * STREAM_13_SYNCHRONIZATION enum
 */

typedef enum STREAM_13_SYNCHRONIZATION {
STREAM_13_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_13_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_13_SYNCHRONIZATION;

/*
 * STREAM_14_SYNCHRONIZATION enum
 */

typedef enum STREAM_14_SYNCHRONIZATION {
STREAM_14_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_14_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_14_SYNCHRONIZATION;

/*
 * STREAM_15_SYNCHRONIZATION enum
 */

typedef enum STREAM_15_SYNCHRONIZATION {
STREAM_15_SYNCHRONIZATION_STEAM_NOT_STOPPED_RESERVED  = 0x00000000,
STREAM_15_SYNCHRONIZATION_STEAM_STOPPED_RESERVED  = 0x00000001,
} STREAM_15_SYNCHRONIZATION;

/*
 * CORB_READ_POINTER_RESET enum
 */

typedef enum CORB_READ_POINTER_RESET {
CORB_READ_POINTER_RESET_CORB_DMA_IS_NOT_RESET  = 0x00000000,
CORB_READ_POINTER_RESET_CORB_DMA_IS_RESET  = 0x00000001,
} CORB_READ_POINTER_RESET;

/*
 * AZ_CORB_SIZE enum
 */

typedef enum AZ_CORB_SIZE {
AZ_CORB_SIZE_2ENTRIES_RESERVED           = 0x00000000,
AZ_CORB_SIZE_16ENTRIES_RESERVED          = 0x00000001,
AZ_CORB_SIZE_256ENTRIES                  = 0x00000002,
AZ_CORB_SIZE_RESERVED                    = 0x00000003,
} AZ_CORB_SIZE;

/*
 * AZ_RIRB_WRITE_POINTER_RESET enum
 */

typedef enum AZ_RIRB_WRITE_POINTER_RESET {
AZ_RIRB_WRITE_POINTER_NOT_RESET          = 0x00000000,
AZ_RIRB_WRITE_POINTER_DO_RESET           = 0x00000001,
} AZ_RIRB_WRITE_POINTER_RESET;

/*
 * RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL enum
 */

typedef enum RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL {
RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL_INTERRUPT_DISABLED  = 0x00000000,
RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL_INTERRUPT_ENABLED  = 0x00000001,
} RIRB_CONTROL_RESPONSE_OVERRUN_INTERRUPT_CONTROL;

/*
 * RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL enum
 */

typedef enum RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL {
RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL_INTERRUPT_DISABLED  = 0x00000000,
RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL_INTERRUPT_ENABLED  = 0x00000001,
} RIRB_CONTROL_RESPONSE_INTERRUPT_CONTROL;

/*
 * AZ_RIRB_SIZE enum
 */

typedef enum AZ_RIRB_SIZE {
AZ_RIRB_SIZE_2ENTRIES_RESERVED           = 0x00000000,
AZ_RIRB_SIZE_16ENTRIES_RESERVED          = 0x00000001,
AZ_RIRB_SIZE_256ENTRIES                  = 0x00000002,
AZ_RIRB_SIZE_UNDEFINED                   = 0x00000003,
} AZ_RIRB_SIZE;

/*
 * IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID enum
 */

typedef enum IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID {
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID_NO_IMMEDIATE_RESPONSE_VALID  = 0x00000000,
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID_IMMEDIATE_RESPONSE_VALID  = 0x00000001,
} IMMEDIATE_COMMAND_STATUS_IMMEDIATE_RESULT_VALID;

/*
 * IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY enum
 */

typedef enum IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY {
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_NOT_BUSY  = 0x00000000,
IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_IS_BUSY  = 0x00000001,
} IMMEDIATE_COMMAND_STATUS_IMMEDIATE_COMMAND_BUSY;

/*
 * DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE enum
 */

typedef enum DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE {
DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE_DMA_DISABLE  = 0x00000000,
DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE_DMA_ENABLE  = 0x00000001,
} DMA_POSITION_LOWER_BASE_ADDRESS_BUFFER_ENABLE;

/*******************************************************
 * AZENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_PCM  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_NOT_PCM  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_48KHZ  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_44P1KHZ  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY1  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY2  = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED  = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY4  = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED  = 0x00000004,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY1  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED  = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY3  = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED  = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED  = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED  = 0x00000005,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED  = 0x00000006,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED  = 0x00000007,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_8_RESERVED  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_16  = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_20  = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_24  = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_32_RESERVED  = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_RESERVED  = 0x00000005,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS {
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_1  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_2  = 0x00000001,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_3  = 0x00000002,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_4  = 0x00000003,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_5  = 0x00000004,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_6  = 0x00000005,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_7  = 0x00000006,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_8  = 0x00000007,
AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_RESERVED  = 0x00000008,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L_BIT7_NOT_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L_BIT7_IS_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_L;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO_BIT_A_NOT_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO_BIT_A_IS_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRO;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO_BIT_B_NOT_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO_BIT_B_IS_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_NON_AUDIO;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY_BIT_C_IS_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY_BIT_C_NOT_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_COPY;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE_LSB_OF_D_NOT_SET  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE_LSB_OF_D_IS_SET  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_PRE;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VALIDITY_CFG_NOT_ON  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VALIDITY_CFG_ON  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_VCFG;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V_BIT28_IS_ZERO  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V_BIT28_IS_ONE  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_V;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_DISABLED  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_ENABLED  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN;

/*
 * AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE enum
 */

typedef enum AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE {
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE_SILENT_STREAM_NOT_ENABLE  = 0x00000000,
AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE_SILENT_STREAM_ENABLE  = 0x00000001,
} AZALIA_F2_CODEC_CONVERTER_CONTROL_DIGITAL_CONVERTER_3_KEEPALIVE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE {
AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE_PIN_SHUT_OFF  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE_PIN_DRIVEN  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_WIDGET_CONTROL_OUT_ENABLE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE {
AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_DISABLED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT {
AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_NO_INFO_OR_PERMITTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_FORBIDDEN  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_DOWN_MIX_INFO_DOWN_MIX_INHIBIT;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL01_ENABLE_MULTICHANNEL01_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL23_ENABLE_MULTICHANNEL23_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL45_ENABLE_MULTICHANNEL45_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL67_ENABLE_MULTICHANNEL67_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE {
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_PAIR_MODE  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_SINGLE_MODE  = 0x00000001,
} AZALIA_F2_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE;

/*
 * AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE enum
 */

typedef enum AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE {
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_0  = 0x00000000,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_1  = 0x00000001,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_2  = 0x00000002,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_3  = 0x00000003,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_4  = 0x00000004,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_5  = 0x00000005,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_6  = 0x00000006,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_7  = 0x00000007,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_8  = 0x00000008,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_9  = 0x00000009,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_10  = 0x0000000a,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_11  = 0x0000000b,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_12  = 0x0000000c,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_13  = 0x0000000d,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_14  = 0x0000000e,
AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE_15  = 0x0000000f,
} AZALIA_F2_CODEC_PIN_CONTROL_AUDIO_DESCRIPTOR_FORMAT_CODE;

/*******************************************************
 * AZF0CONTROLLER Enums
 *******************************************************/

/*
 * MEM_PWR_FORCE_CTRL enum
 */

typedef enum MEM_PWR_FORCE_CTRL {
NO_FORCE_REQUEST                         = 0x00000000,
FORCE_LIGHT_SLEEP_REQUEST                = 0x00000001,
FORCE_DEEP_SLEEP_REQUEST                 = 0x00000002,
FORCE_SHUT_DOWN_REQUEST                  = 0x00000003,
} MEM_PWR_FORCE_CTRL;

/*
 * MEM_PWR_FORCE_CTRL2 enum
 */

typedef enum MEM_PWR_FORCE_CTRL2 {
NO_FORCE_REQ                             = 0x00000000,
FORCE_LIGHT_SLEEP_REQ                    = 0x00000001,
} MEM_PWR_FORCE_CTRL2;

/*
 * MEM_PWR_DIS_CTRL enum
 */

typedef enum MEM_PWR_DIS_CTRL {
ENABLE_MEM_PWR_CTRL                      = 0x00000000,
DISABLE_MEM_PWR_CTRL                     = 0x00000001,
} MEM_PWR_DIS_CTRL;

/*
 * MEM_PWR_SEL_CTRL enum
 */

typedef enum MEM_PWR_SEL_CTRL {
DYNAMIC_SHUT_DOWN_ENABLE                 = 0x00000000,
DYNAMIC_DEEP_SLEEP_ENABLE                = 0x00000001,
DYNAMIC_LIGHT_SLEEP_ENABLE               = 0x00000002,
} MEM_PWR_SEL_CTRL;

/*
 * MEM_PWR_SEL_CTRL2 enum
 */

typedef enum MEM_PWR_SEL_CTRL2 {
DYNAMIC_DEEP_SLEEP_EN                    = 0x00000000,
DYNAMIC_LIGHT_SLEEP_EN                   = 0x00000001,
} MEM_PWR_SEL_CTRL2;

/*
 * AZALIA_SOFT_RESET_REFCLK_SOFT_RESET enum
 */

typedef enum AZALIA_SOFT_RESET_REFCLK_SOFT_RESET {
AZALIA_SOFT_RESET_REFCLK_SOFT_RESET_NOT_RESET  = 0x00000000,
AZALIA_SOFT_RESET_REFCLK_SOFT_RESET_RESET_REFCLK_LOGIC  = 0x00000001,
} AZALIA_SOFT_RESET_REFCLK_SOFT_RESET;

/*******************************************************
 * AZF0ROOT Enums
 *******************************************************/

/*
 * CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY enum
 */

typedef enum CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY {
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_ALL  = 0x00000000,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_6  = 0x00000001,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_5  = 0x00000002,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_4  = 0x00000003,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_3  = 0x00000004,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_2  = 0x00000005,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_1  = 0x00000006,
CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY_0  = 0x00000007,
} CC_RCU_DC_AUDIO_PORT_CONNECTIVITY_PORT_CONNECTIVITY;

/*
 * CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY enum
 */

typedef enum CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY {
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_ALL  = 0x00000000,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_6  = 0x00000001,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_5  = 0x00000002,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_4  = 0x00000003,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_3  = 0x00000004,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_2  = 0x00000005,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_1  = 0x00000006,
CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY_0  = 0x00000007,
} CC_RCU_DC_AUDIO_INPUT_PORT_CONNECTIVITY_INPUT_PORT_CONNECTIVITY;

/*******************************************************
 * AZINPUTENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_PCM  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE_NOT_PCM  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_STREAM_TYPE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_48KHZ  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE_44P1KHZ  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_RATE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY1  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY2  = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED  = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_BY4  = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED  = 0x00000004,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY1  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED  = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY3  = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED  = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED  = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED  = 0x00000005,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED  = 0x00000006,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED  = 0x00000007,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_8_RESERVED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_16  = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_20  = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_24  = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_32_RESERVED  = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE_RESERVED  = 0x00000005,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_BITS_PER_SAMPLE;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_1  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_2  = 0x00000001,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_3  = 0x00000002,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_4  = 0x00000003,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_5  = 0x00000004,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_6  = 0x00000005,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_7  = 0x00000006,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_8  = 0x00000007,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS_RESERVED  = 0x00000008,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_CONVERTER_FORMAT_NUMBER_OF_CHANNELS;

/*
 * AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN {
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_DISABLED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN_DIGITAL_TRANSMISSION_ENABLED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_CONVERTER_CONTROL_DIGITAL_CONVERTER_DIGEN;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE_PIN_SHUT_OFF  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE_PIN_DRIVEN  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_WIDGET_CONTROL_IN_ENABLE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_DISABLED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_UNSOLICITED_RESPONSE_ENABLE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL0_ENABLE_MULTICHANNEL0_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL1_ENABLE_MULTICHANNEL1_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL2_ENABLE_MULTICHANNEL2_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL3_ENABLE_MULTICHANNEL3_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL4_ENABLE_MULTICHANNEL4_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL5_ENABLE_MULTICHANNEL5_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL6_ENABLE_MULTICHANNEL6_MUTE;

/*
 * AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE enum
 */

typedef enum AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE {
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_NOT_MUTED  = 0x00000000,
AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTED  = 0x00000001,
} AZALIA_F2_CODEC_INPUT_PIN_CONTROL_MULTICHANNEL7_ENABLE_MULTICHANNEL7_MUTE;

/*******************************************************
 * AZROOT Enums
 *******************************************************/

/*
 * AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET enum
 */

typedef enum AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET {
AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_NOT_RESET  = 0x00000000,
AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_DO_RESET  = 0x00000001,
} AZALIA_F2_CODEC_FUNCTION_CONTROL_RESET_CODEC_RESET;

/*******************************************************
 * AZF0STREAM Enums
 *******************************************************/

/*
 * AZ_LATENCY_COUNTER_CONTROL enum
 */

typedef enum AZ_LATENCY_COUNTER_CONTROL {
AZ_LATENCY_COUNTER_NO_RESET              = 0x00000000,
AZ_LATENCY_COUNTER_RESET_DONE            = 0x00000001,
} AZ_LATENCY_COUNTER_CONTROL;

/*******************************************************
 * AZSTREAM Enums
 *******************************************************/

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_STATUS_NOT_SET  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_STATUS_SET  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_STATUS_NOT_SET  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_STATUS_SET  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS_NOT_SET  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS_SET  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_BUFFER_COMPLETION_INTERRUPT_STATUS;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_NO_TRAFFIC_PRIORITY  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_YES_TRAFFIC_PRIORITY  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_TRAFFIC_PRIORITY;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_DISABLED  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLED  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_DESCRIPTOR_ERROR_INTERRUPT_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_DISABLED  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLED  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_FIFO_ERROR_INTERRUPT_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE_INTERRUPT_DISABLED  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE_INTERRUPT_ENABLED  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_INTERRUPT_ON_COMPLETION_ENABLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_NOT_RUN  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_DO_RUN  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RUN;

/*
 * OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET {
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_NOT_RESET  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_IS_RESET  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_CONTROL_AND_STATUS_STREAM_RESET;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE_48KHZ  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE_44P1KHZ  = 0x00000001,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_RATE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY1  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY2  = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY3_RESERVED  = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_BY4  = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE_RESERVED  = 0x00000004,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_MULTIPLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY1  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY2_RESERVED  = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY3  = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY4_RESERVED  = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY5_RESERVED  = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY6_RESERVED  = 0x00000005,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY7_RESERVED  = 0x00000006,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR_BY8_RESERVED  = 0x00000007,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_SAMPLE_BASE_DIVISOR;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_8_RESERVED  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_16  = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_20  = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_24  = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_32_RESERVED  = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE_RESERVED  = 0x00000005,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_BITS_PER_SAMPLE;

/*
 * OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS enum
 */

typedef enum OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS {
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_1  = 0x00000000,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_2  = 0x00000001,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_3  = 0x00000002,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_4  = 0x00000003,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_5  = 0x00000004,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_6  = 0x00000005,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_7  = 0x00000006,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_8  = 0x00000007,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_9_RESERVED  = 0x00000008,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_10_RESERVED  = 0x00000009,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_11_RESERVED  = 0x0000000a,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_12_RESERVED  = 0x0000000b,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_13_RESERVED  = 0x0000000c,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_14_RESERVED  = 0x0000000d,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_15_RESERVED  = 0x0000000e,
OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS_16_RESERVED  = 0x0000000f,
} OUTPUT_STREAM_DESCRIPTOR_FORMAT_NUMBER_OF_CHANNELS;

/*******************************************************
 * AZF0ENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED  = 0x00000001,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED  = 0x00000002,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED  = 0x00000003,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED  = 0x00000004,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED  = 0x00000005,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED  = 0x00000006,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED  = 0x00000007,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED_RESERVED  = 0x00000008,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED  = 0x00000009,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESSING_CAPABILITIES  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESSING_CAPABILITIES  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_FORMAT_OVERRIDE  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_FORMAT_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES enum
 */

typedef enum AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES {
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_MONOPHONIC  = 0x00000000,
AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_STEREO  = 0x00000001,
} AZALIA_F0_CODEC_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED  = 0x00000001,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED  = 0x00000002,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED  = 0x00000003,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED  = 0x00000004,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED  = 0x00000005,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED  = 0x00000006,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED  = 0x00000007,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED_RESERVED  = 0x00000008,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED  = 0x00000009,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESSING_CAPABILITIES  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESSING_CAPABILITIES  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER_PRESENT  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_EAPD_PIN  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_EAPD_PIN  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_NOT_BALANCED  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_BALANCED  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_INPUT_PIN  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_INPUT_PIN  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_OUTPUT_PIN  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_OUTPUT_PIN  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_HEADPHONE_DRIVE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_HEADPHONE_DRIVE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_JACK_DETECTION_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_JACK_DETECTION_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED;

/*
 * AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE {
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_NO_IMPEDANCE_SENSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_HAVE_IMPEDANCE_SENSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE;

/*
 * AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE {
AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_PAIR_MODE  = 0x00000000,
AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_SINGLE_MODE  = 0x00000001,
} AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_MODE_MULTICHANNEL_MODE;

/*
 * AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE {
AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_NO_HBR_CAPABLILITY  = 0x00000000,
AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HAVE_HBR_CAPABLILITY  = 0x00000001,
} AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE;

/*******************************************************
 * AZF0INPUTENDPOINT Enums
 *******************************************************/

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED  = 0x00000001,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED  = 0x00000002,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED  = 0x00000003,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED  = 0x00000004,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED  = 0x00000005,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED  = 0x00000006,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED  = 0x00000007,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED  = 0x00000008,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED  = 0x00000009,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CODEC_CONVERTER0_IS_ANALOG  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CODEC_CONVERTER0_IS_DIGITAL  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_CODEC_CONVERTER0_HAVE_NO_PROCESSING_CAPABILITIES  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_CODEC_CONVERTER0_HAVE_PROCESSING_CAPABILITIES  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NOT_SUPPORT_STRIPING  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_FORMAT_OVERRIDE  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_FORMAT_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_FORMAT_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES {
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_MONOPHONIC  = 0x00000000,
AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES_STEREO  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_CONVERTER_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AUDIO_CHANNEL_CAPABILITIES;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_OUTPUT_CONVERTER_RESERVED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_INPUT_CONVERTER_RESERVED  = 0x00000001,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_MIXER_RESERVED  = 0x00000002,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_SELECTOR_RESERVED  = 0x00000003,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_PIN_RESERVED  = 0x00000004,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_POWER_WIDGET_RESERVED  = 0x00000005,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VOLUME_KNOB_RESERVED  = 0x00000006,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_BEEP_GENERATOR_RESERVED  = 0x00000007,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_RESERVED  = 0x00000008,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE_VENDOR_DEFINED_RESERVED  = 0x00000009,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_TYPE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_LR_SWAP  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_LR_SWAP  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_LR_SWAP;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_POWER_CONTROL_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_POWER_CONTROL_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_POWER_CONTROL;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_ANALOG  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_IS_DIGITAL  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_DIGITAL;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_CONNECTION_LIST  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_CONNECTION_LIST  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_CONNECTION_LIST;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_UNSOLICITED_RESPONSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_UNSOLICITED_RESPONSE_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_NO_PROCESING_CAPABILITIES  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET_HAVE_PROCESING_CAPABILITIES  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_PROCESSING_WIDGET;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_SUPPORT_STRIPING  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_SUPPORT_STRIPING  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_STRIPE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_AMPLIFIER_PARAMETER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_AMPLIFIER_PARAMETER_OVERRIDE  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_AMPLIFIER_PARAMETER_OVERRIDE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_OUTPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_OUTPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_OUTPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_NO_INPUT_AMPLIFIER  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_HAVE_INPUT_AMPLIFIER  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_AUDIO_WIDGET_CAPABILITIES_INPUT_AMPLIFIER_PRESENT;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP_NOT_ENABLED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP_ENABLED  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_DP;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE_NO_EAPD_PIN  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE_HAVE_EAPD_PIN  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_EAPD_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI_NOT_ENABLED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI_ENABLED  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HDMI;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_I_O_PINS_NOT_BALANCED  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_I_O_PINS_ARE_BALANCED  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_BALANCED_I_O_PINS;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_INPUT_PIN  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_INPUT_PIN  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_INPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_OUTPUT_PIN  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_OUTPUT_PIN  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_OUTPUT_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_HEADPHONE_DRIVE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_HEADPHONE_DRIVE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HEADPHONE_DRIVE_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_JACK_PRESENCE_DETECTION_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_JACK_PRESENCE_DETECTION_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_JACK_DETECTION_CAPABILITY;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED_FOR_IMPEDANCE_MEASUREMENT  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_TRIGGER_REQUIRED;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_NO_IMPEDANCE_SENSE_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_HAVE_IMPEDANCE_SENSE_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_PARAMETER_CAPABILITIES_IMPEDANCE_SENSE_CAPABLE;

/*
 * AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE enum
 */

typedef enum AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE {
AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_NO_HBR_CAPABILITY  = 0x00000000,
AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HAVE_HBR_CAPABILITY  = 0x00000001,
} AZALIA_F0_CODEC_INPUT_PIN_CONTROL_RESPONSE_HBR_HBR_CAPABLE;

/*******************************************************
 * DSCC Enums
 *******************************************************/

/*
 * DSCC_ICH_RESET_ENUM enum
 */

typedef enum DSCC_ICH_RESET_ENUM {
DSCC_ICH_RESET_ENUM_SLICE0_ICH_RESET     = 0x00000001,
DSCC_ICH_RESET_ENUM_SLICE1_ICH_RESET     = 0x00000002,
DSCC_ICH_RESET_ENUM_SLICE2_ICH_RESET     = 0x00000004,
DSCC_ICH_RESET_ENUM_SLICE3_ICH_RESET     = 0x00000008,
} DSCC_ICH_RESET_ENUM;

/*
 * DSCC_DSC_VERSION_MINOR_ENUM enum
 */

typedef enum DSCC_DSC_VERSION_MINOR_ENUM {
DSCC_DSC_VERSION_MINOR_ENUM_DSC_X_1_MINOR_VERSION  = 0x00000001,
DSCC_DSC_VERSION_MINOR_ENUM_DSC_X_2_MINOR_VERSION  = 0x00000002,
} DSCC_DSC_VERSION_MINOR_ENUM;

/*
 * DSCC_DSC_VERSION_MAJOR_ENUM enum
 */

typedef enum DSCC_DSC_VERSION_MAJOR_ENUM {
DSCC_DSC_VERSION_MAJOR_ENUM_DSC_1_X_MAJOR_VERSION  = 0x00000001,
} DSCC_DSC_VERSION_MAJOR_ENUM;

/*
 * DSCC_LINEBUF_DEPTH_ENUM enum
 */

typedef enum DSCC_LINEBUF_DEPTH_ENUM {
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_8_BIT  = 0x00000008,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_9_BIT  = 0x00000009,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_10_BIT  = 0x0000000a,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_11_BIT  = 0x0000000b,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_12_BIT  = 0x0000000c,
DSCC_LINEBUF_DEPTH_ENUM_LINEBUF_DEPTH_13_BIT  = 0x0000000d,
} DSCC_LINEBUF_DEPTH_ENUM;

/*
 * DSCC_BITS_PER_COMPONENT_ENUM enum
 */

typedef enum DSCC_BITS_PER_COMPONENT_ENUM {
DSCC_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_8_BIT  = 0x00000008,
DSCC_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_10_BIT  = 0x0000000a,
DSCC_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_12_BIT  = 0x0000000c,
} DSCC_BITS_PER_COMPONENT_ENUM;

/*
 * DSCC_ENABLE_ENUM enum
 */

typedef enum DSCC_ENABLE_ENUM {
DSCC_ENABLE_ENUM_DISABLED                = 0x00000000,
DSCC_ENABLE_ENUM_ENABLED                 = 0x00000001,
} DSCC_ENABLE_ENUM;

/*
 * DSCC_MEM_PWR_FORCE_ENUM enum
 */

typedef enum DSCC_MEM_PWR_FORCE_ENUM {
DSCC_MEM_PWR_FORCE_ENUM_NO_FORCE_REQUEST  = 0x00000000,
DSCC_MEM_PWR_FORCE_ENUM_FORCE_LIGHT_SLEEP_REQUEST  = 0x00000001,
DSCC_MEM_PWR_FORCE_ENUM_FORCE_DEEP_SLEEP_REQUEST  = 0x00000002,
DSCC_MEM_PWR_FORCE_ENUM_FORCE_SHUT_DOWN_REQUEST  = 0x00000003,
} DSCC_MEM_PWR_FORCE_ENUM;

/*
 * POWER_STATE_ENUM enum
 */

typedef enum POWER_STATE_ENUM {
POWER_STATE_ENUM_ON                      = 0x00000000,
POWER_STATE_ENUM_LS                      = 0x00000001,
POWER_STATE_ENUM_DS                      = 0x00000002,
POWER_STATE_ENUM_SD                      = 0x00000003,
} POWER_STATE_ENUM;

/*
 * DSCC_MEM_PWR_DIS_ENUM enum
 */

typedef enum DSCC_MEM_PWR_DIS_ENUM {
DSCC_MEM_PWR_DIS_ENUM_REQUEST_EN         = 0x00000000,
DSCC_MEM_PWR_DIS_ENUM_REQUEST_DIS        = 0x00000001,
} DSCC_MEM_PWR_DIS_ENUM;

/*******************************************************
 * DSCCIF Enums
 *******************************************************/

/*
 * DSCCIF_ENABLE_ENUM enum
 */

typedef enum DSCCIF_ENABLE_ENUM {
DSCCIF_ENABLE_ENUM_DISABLED              = 0x00000000,
DSCCIF_ENABLE_ENUM_ENABLED               = 0x00000001,
} DSCCIF_ENABLE_ENUM;

/*
 * DSCCIF_INPUT_PIXEL_FORMAT_ENUM enum
 */

typedef enum DSCCIF_INPUT_PIXEL_FORMAT_ENUM {
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_RGB       = 0x00000000,
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_YCBCR_444  = 0x00000001,
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_SIMPLE_YCBCR_422  = 0x00000002,
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_NATIVE_YCBCR_422  = 0x00000003,
DSCCIF_INPUT_PIXEL_FORMAT_ENUM_NATIVE_YCBCR_420  = 0x00000004,
} DSCCIF_INPUT_PIXEL_FORMAT_ENUM;

/*
 * DSCCIF_BITS_PER_COMPONENT_ENUM enum
 */

typedef enum DSCCIF_BITS_PER_COMPONENT_ENUM {
DSCCIF_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_8_BIT  = 0x00000008,
DSCCIF_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_10_BIT  = 0x0000000a,
DSCCIF_BITS_PER_COMPONENT_ENUM_BITS_PER_COMPONENT_12_BIT  = 0x0000000c,
} DSCCIF_BITS_PER_COMPONENT_ENUM;

/*******************************************************
 * DSC_TOP Enums
 *******************************************************/

/*
 * ENABLE_ENUM enum
 */

typedef enum ENABLE_ENUM {
ENABLE_ENUM_DISABLED                     = 0x00000000,
ENABLE_ENUM_ENABLED                      = 0x00000001,
} ENABLE_ENUM;

/*
 * CLOCK_GATING_DISABLE_ENUM enum
 */

typedef enum CLOCK_GATING_DISABLE_ENUM {
CLOCK_GATING_DISABLE_ENUM_ENABLED        = 0x00000000,
CLOCK_GATING_DISABLE_ENUM_DISABLED       = 0x00000001,
} CLOCK_GATING_DISABLE_ENUM;

/*
 * TEST_CLOCK_MUX_SELECT_ENUM enum
 */

typedef enum TEST_CLOCK_MUX_SELECT_ENUM {
TEST_CLOCK_MUX_SELECT_DISPCLK_P          = 0x00000000,
TEST_CLOCK_MUX_SELECT_DISPCLK_G          = 0x00000001,
TEST_CLOCK_MUX_SELECT_DISPCLK_R          = 0x00000002,
TEST_CLOCK_MUX_SELECT_DSCCLK_P           = 0x00000003,
TEST_CLOCK_MUX_SELECT_DSCCLK_G           = 0x00000004,
TEST_CLOCK_MUX_SELECT_DSCCLK_R           = 0x00000005,
} TEST_CLOCK_MUX_SELECT_ENUM;

/*******************************************************
 * CNV Enums
 *******************************************************/

/*
 * WB_ENABLE_ENUM enum
 */

typedef enum WB_ENABLE_ENUM {
WB_EN_DISABLE                            = 0x00000000,
WB_EN_ENABLE                             = 0x00000001,
} WB_ENABLE_ENUM;

/*
 * WB_CLK_GATE_DIS_ENUM enum
 */

typedef enum WB_CLK_GATE_DIS_ENUM {
WB_CLK_GATE_ENABLE                       = 0x00000000,
WB_CLK_GATE_DISABLE                      = 0x00000001,
} WB_CLK_GATE_DIS_ENUM;

/*
 * WB_MEM_PWR_DIS_ENUM enum
 */

typedef enum WB_MEM_PWR_DIS_ENUM {
WB_MEM_PWR_ENABLE                        = 0x00000000,
WB_MEM_PWR_DISABLE                       = 0x00000001,
} WB_MEM_PWR_DIS_ENUM;

/*
 * WB_TEST_CLK_SEL_ENUM enum
 */

typedef enum WB_TEST_CLK_SEL_ENUM {
WB_TEST_CLK_SEL_REG                      = 0x00000000,
WB_TEST_CLK_SEL_WB                       = 0x00000001,
WB_TEST_CLK_SEL_WBSCL                    = 0x00000002,
WB_TEST_CLK_SEL_PERM                     = 0x00000003,
} WB_TEST_CLK_SEL_ENUM;

/*
 * WBSCL_LB_MEM_PWR_MODE_SEL_ENUM enum
 */

typedef enum WBSCL_LB_MEM_PWR_MODE_SEL_ENUM {
WBSCL_LB_MEM_PWR_MODE_SEL_SD             = 0x00000000,
WBSCL_LB_MEM_PWR_MODE_SEL_DS             = 0x00000001,
WBSCL_LB_MEM_PWR_MODE_SEL_LS             = 0x00000002,
WBSCL_LB_MEM_PWR_MODE_SEL_ON             = 0x00000003,
} WBSCL_LB_MEM_PWR_MODE_SEL_ENUM;

/*
 * WBSCL_LB_MEM_PWR_FORCE_ENUM enum
 */

typedef enum WBSCL_LB_MEM_PWR_FORCE_ENUM {
WBSCL_LB_MEM_PWR_FORCE_NO                = 0x00000000,
WBSCL_LB_MEM_PWR_FORCE_LS                = 0x00000001,
WBSCL_LB_MEM_PWR_FORCE_DS                = 0x00000002,
WBSCL_LB_MEM_PWR_FORCE_SD                = 0x00000003,
} WBSCL_LB_MEM_PWR_FORCE_ENUM;

/*
 * WBSCL_MEM_PWR_STATE_ENUM enum
 */

typedef enum WBSCL_MEM_PWR_STATE_ENUM {
WBSCL_MEM_PWR_STATE_ON                   = 0x00000000,
WBSCL_MEM_PWR_STATE_LS                   = 0x00000001,
WBSCL_MEM_PWR_STATE_DS                   = 0x00000002,
WBSCL_MEM_PWR_STATE_SD                   = 0x00000003,
} WBSCL_MEM_PWR_STATE_ENUM;

/*
 * WBSCL_LUT_MEM_PWR_STATE_ENUM enum
 */

typedef enum WBSCL_LUT_MEM_PWR_STATE_ENUM {
WBSCL_LUT_MEM_PWR_STATE_ON               = 0x00000000,
WBSCL_LUT_MEM_PWR_STATE_LS               = 0x00000001,
WBSCL_LUT_MEM_PWR_STATE_RESERVED2        = 0x00000002,
WBSCL_LUT_MEM_PWR_STATE_RESERVED3        = 0x00000003,
} WBSCL_LUT_MEM_PWR_STATE_ENUM;

/*
 * WB_RAM_PW_SAVE_MODE_ENUM enum
 */

typedef enum WB_RAM_PW_SAVE_MODE_ENUM {
WB_RAM_PW_SAVE_MODE_LS                   = 0x00000000,
WB_RAM_PW_SAVE_MODE_SD                   = 0x00000001,
} WB_RAM_PW_SAVE_MODE_ENUM;

/*
 * CNV_OUT_BPC_ENUM enum
 */

typedef enum CNV_OUT_BPC_ENUM {
CNV_OUT_BPC_8BPC                         = 0x00000000,
CNV_OUT_BPC_10BPC                        = 0x00000001,
} CNV_OUT_BPC_ENUM;

/*
 * CNV_FRAME_CAPTURE_RATE_ENUM enum
 */

typedef enum CNV_FRAME_CAPTURE_RATE_ENUM {
CNV_FRAME_CAPTURE_RATE_0                 = 0x00000000,
CNV_FRAME_CAPTURE_RATE_1                 = 0x00000001,
CNV_FRAME_CAPTURE_RATE_2                 = 0x00000002,
CNV_FRAME_CAPTURE_RATE_3                 = 0x00000003,
} CNV_FRAME_CAPTURE_RATE_ENUM;

/*
 * CNV_WINDOW_CROP_EN_ENUM enum
 */

typedef enum CNV_WINDOW_CROP_EN_ENUM {
CNV_WINDOW_CROP_DISABLE                  = 0x00000000,
CNV_WINDOW_CROP_ENABLE                   = 0x00000001,
} CNV_WINDOW_CROP_EN_ENUM;

/*
 * CNV_INTERLACED_MODE_ENUM enum
 */

typedef enum CNV_INTERLACED_MODE_ENUM {
CNV_INTERLACED_MODE_PROGRESSIVE          = 0x00000000,
CNV_INTERLACED_MODE_INTERLACED           = 0x00000001,
} CNV_INTERLACED_MODE_ENUM;

/*
 * CNV_EYE_SELECT enum
 */

typedef enum CNV_EYE_SELECT {
STEREO_DISABLED                          = 0x00000000,
LEFT_EYE                                 = 0x00000001,
RIGHT_EYE                                = 0x00000002,
BOTH_EYE                                 = 0x00000003,
} CNV_EYE_SELECT;

/*
 * CNV_STEREO_TYPE_ENUM enum
 */

typedef enum CNV_STEREO_TYPE_ENUM {
CNV_STEREO_TYPE_RESERVED0                = 0x00000000,
CNV_STEREO_TYPE_RESERVED1                = 0x00000001,
CNV_STEREO_TYPE_RESERVED2                = 0x00000002,
CNV_STEREO_TYPE_FRAME_SEQUENTIAL         = 0x00000003,
} CNV_STEREO_TYPE_ENUM;

/*
 * CNV_STEREO_POLARITY_ENUM enum
 */

typedef enum CNV_STEREO_POLARITY_ENUM {
CNV_STEREO_POLARITY_LEFT                 = 0x00000000,
CNV_STEREO_POLARITY_RIGHT                = 0x00000001,
} CNV_STEREO_POLARITY_ENUM;

/*
 * CNV_INTERLACED_FIELD_ORDER_ENUM enum
 */

typedef enum CNV_INTERLACED_FIELD_ORDER_ENUM {
CNV_INTERLACED_FIELD_ORDER_TOP           = 0x00000000,
CNV_INTERLACED_FIELD_ORDER_BOT           = 0x00000001,
} CNV_INTERLACED_FIELD_ORDER_ENUM;

/*
 * CNV_STEREO_SPLIT_ENUM enum
 */

typedef enum CNV_STEREO_SPLIT_ENUM {
CNV_STEREO_SPLIT_DISABLE                 = 0x00000000,
CNV_STEREO_SPLIT_ENABLE                  = 0x00000001,
} CNV_STEREO_SPLIT_ENUM;

/*
 * CNV_NEW_CONTENT_ENUM enum
 */

typedef enum CNV_NEW_CONTENT_ENUM {
CNV_NEW_CONTENT_NEG                      = 0x00000000,
CNV_NEW_CONTENT_POS                      = 0x00000001,
} CNV_NEW_CONTENT_ENUM;

/*
 * CNV_FRAME_CAPTURE_EN_ENUM enum
 */

typedef enum CNV_FRAME_CAPTURE_EN_ENUM {
CNV_FRAME_CAPTURE_DISABLE                = 0x00000000,
CNV_FRAME_CAPTURE_ENABLE                 = 0x00000001,
} CNV_FRAME_CAPTURE_EN_ENUM;

/*
 * CNV_UPDATE_PENDING_ENUM enum
 */

typedef enum CNV_UPDATE_PENDING_ENUM {
CNV_UPDATE_PENDING_NEG                   = 0x00000000,
CNV_UPDATE_PENDING_POS                   = 0x00000001,
} CNV_UPDATE_PENDING_ENUM;

/*
 * CNV_UPDATE_LOCK_ENUM enum
 */

typedef enum CNV_UPDATE_LOCK_ENUM {
CNV_UPDATE_UNLOCK                        = 0x00000000,
CNV_UPDATE_LOCK                          = 0x00000001,
} CNV_UPDATE_LOCK_ENUM;

/*
 * CNV_CSC_BYPASS_ENUM enum
 */

typedef enum CNV_CSC_BYPASS_ENUM {
CNV_CSC_BYPASS_NEG                       = 0x00000000,
CNV_CSC_BYPASS_POS                       = 0x00000001,
} CNV_CSC_BYPASS_ENUM;

/*
 * CNV_TEST_CRC_EN_ENUM enum
 */

typedef enum CNV_TEST_CRC_EN_ENUM {
CNV_TEST_CRC_DISABLE                     = 0x00000000,
CNV_TEST_CRC_ENABLE                      = 0x00000001,
} CNV_TEST_CRC_EN_ENUM;

/*
 * CNV_TEST_CRC_CONT_EN_ENUM enum
 */

typedef enum CNV_TEST_CRC_CONT_EN_ENUM {
CNV_TEST_CRC_CONT_DISABLE                = 0x00000000,
CNV_TEST_CRC_CONT_ENABLE                 = 0x00000001,
} CNV_TEST_CRC_CONT_EN_ENUM;

/*
 * WB_SOFT_RESET_ENUM enum
 */

typedef enum WB_SOFT_RESET_ENUM {
WB_SOFT_RESET_NEG                        = 0x00000000,
WB_SOFT_RESET_POS                        = 0x00000001,
} WB_SOFT_RESET_ENUM;

/*
 * DWB_GMC_WARM_UP_ENABLE_ENUM enum
 */

typedef enum DWB_GMC_WARM_UP_ENABLE_ENUM {
DWB_GMC_WARM_UP_DISABLE                  = 0x00000000,
DWB_GMC_WARM_UP_ENABLE                   = 0x00000001,
} DWB_GMC_WARM_UP_ENABLE_ENUM;

/*
 * DWB_MODE_WARMUP_ENUM enum
 */

typedef enum DWB_MODE_WARMUP_ENUM {
DWB_MODE_WARMUP_420                      = 0x00000000,
DWB_MODE_WARMUP_444                      = 0x00000001,
} DWB_MODE_WARMUP_ENUM;

/*
 * DWB_DATA_DEPTH_WARMUP_ENUM enum
 */

typedef enum DWB_DATA_DEPTH_WARMUP_ENUM {
DWB_DATA_DEPTH_WARMUP_8BPC               = 0x00000000,
DWB_DATA_DEPTH_WARMUP_10BPC              = 0x00000001,
} DWB_DATA_DEPTH_WARMUP_ENUM;

/*******************************************************
 * WBSCL Enums
 *******************************************************/

/*
 * WBSCL_COEF_RAM_TAP_PAIR_IDX_ENUM enum
 */

typedef enum WBSCL_COEF_RAM_TAP_PAIR_IDX_ENUM {
WBSCL_COEF_RAM_TAP_PAIR_IDX0             = 0x00000000,
WBSCL_COEF_RAM_TAP_PAIR_IDX1             = 0x00000001,
WBSCL_COEF_RAM_TAP_PAIR_IDX2             = 0x00000002,
WBSCL_COEF_RAM_TAP_PAIR_IDX3             = 0x00000003,
WBSCL_COEF_RAM_TAP_PAIR_IDX4             = 0x00000004,
WBSCL_COEF_RAM_TAP_PAIR_IDX5             = 0x00000005,
} WBSCL_COEF_RAM_TAP_PAIR_IDX_ENUM;

/*
 * WBSCL_COEF_RAM_PHASE_ENUM enum
 */

typedef enum WBSCL_COEF_RAM_PHASE_ENUM {
WBSCL_COEF_RAM_PHASE0                    = 0x00000000,
WBSCL_COEF_RAM_PHASE1                    = 0x00000001,
WBSCL_COEF_RAM_PHASE2                    = 0x00000002,
WBSCL_COEF_RAM_PHASE3                    = 0x00000003,
WBSCL_COEF_RAM_PHASE4                    = 0x00000004,
WBSCL_COEF_RAM_PHASE5                    = 0x00000005,
WBSCL_COEF_RAM_PHASE6                    = 0x00000006,
WBSCL_COEF_RAM_PHASE7                    = 0x00000007,
WBSCL_COEF_RAM_PHASE8                    = 0x00000008,
} WBSCL_COEF_RAM_PHASE_ENUM;

/*
 * WBSCL_COEF_RAM_FILTER_TYPE_ENUM enum
 */

typedef enum WBSCL_COEF_RAM_FILTER_TYPE_ENUM {
WBSCL_COEF_RAM_FILTER_TYPE_VL            = 0x00000000,
WBSCL_COEF_RAM_FILTER_TYPE_VC            = 0x00000001,
WBSCL_COEF_RAM_FILTER_TYPE_HL            = 0x00000002,
WBSCL_COEF_RAM_FILTER_TYPE_HC            = 0x00000003,
} WBSCL_COEF_RAM_FILTER_TYPE_ENUM;

/*
 * WBSCL_COEF_FILTER_TYPE_SEL enum
 */

typedef enum WBSCL_COEF_FILTER_TYPE_SEL {
WBSCL_COEF_LUMA_VERT_FILTER              = 0x00000000,
WBSCL_COEF_CHROMA_VERT_FILTER            = 0x00000001,
WBSCL_COEF_LUMA_HORZ_FILTER              = 0x00000002,
WBSCL_COEF_CHROMA_HORZ_FILTER            = 0x00000003,
} WBSCL_COEF_FILTER_TYPE_SEL;

/*
 * WBSCL_MODE_SEL enum
 */

typedef enum WBSCL_MODE_SEL {
WBSCL_MODE_SCALING_444_BYPASS            = 0x00000000,
WBSCL_MODE_SCALING_444_RGB_ENABLE        = 0x00000001,
WBSCL_MODE_SCALING_444_YCBCR_ENABLE      = 0x00000002,
WBSCL_MODE_SCALING_YCBCR_ENABLE          = 0x00000003,
} WBSCL_MODE_SEL;

/*
 * WBSCL_PIXEL_DEPTH enum
 */

typedef enum WBSCL_PIXEL_DEPTH {
PIXEL_DEPTH_8BPC                         = 0x00000000,
PIXEL_DEPTH_10BPC                        = 0x00000001,
} WBSCL_PIXEL_DEPTH;

/*
 * WBSCL_COEF_RAM_SEL_ENUM enum
 */

typedef enum WBSCL_COEF_RAM_SEL_ENUM {
WBSCL_COEF_RAM_SEL_0                     = 0x00000000,
WBSCL_COEF_RAM_SEL_1                     = 0x00000001,
} WBSCL_COEF_RAM_SEL_ENUM;

/*
 * WBSCL_COEF_RAM_RD_SEL_ENUM enum
 */

typedef enum WBSCL_COEF_RAM_RD_SEL_ENUM {
WBSCL_COEF_RAM_RD_SEL_0                  = 0x00000000,
WBSCL_COEF_RAM_RD_SEL_1                  = 0x00000001,
} WBSCL_COEF_RAM_RD_SEL_ENUM;

/*
 * WBSCL_COEF_RAM_TAP_COEF_EN_ENUM enum
 */

typedef enum WBSCL_COEF_RAM_TAP_COEF_EN_ENUM {
WBSCL_COEF_RAM_TAP_COEF_DISABLE          = 0x00000000,
WBSCL_COEF_RAM_TAP_COEF_ENABLE           = 0x00000001,
} WBSCL_COEF_RAM_TAP_COEF_EN_ENUM;

/*
 * WBSCL_NUM_OF_TAPS_ENUM enum
 */

typedef enum WBSCL_NUM_OF_TAPS_ENUM {
WBSCL_NUM_OF_TAPS0                       = 0x00000000,
WBSCL_NUM_OF_TAPS1                       = 0x00000001,
WBSCL_NUM_OF_TAPS2                       = 0x00000002,
WBSCL_NUM_OF_TAPS3                       = 0x00000003,
WBSCL_NUM_OF_TAPS4                       = 0x00000004,
WBSCL_NUM_OF_TAPS5                       = 0x00000005,
WBSCL_NUM_OF_TAPS6                       = 0x00000006,
WBSCL_NUM_OF_TAPS7                       = 0x00000007,
WBSCL_NUM_OF_TAPS8                       = 0x00000008,
WBSCL_NUM_OF_TAPS9                       = 0x00000009,
WBSCL_NUM_OF_TAPS10                      = 0x0000000a,
WBSCL_NUM_OF_TAPS11                      = 0x0000000b,
} WBSCL_NUM_OF_TAPS_ENUM;

/*
 * WBSCL_STATUS_ACK_ENUM enum
 */

typedef enum WBSCL_STATUS_ACK_ENUM {
WBSCL_STATUS_ACK_NCLR                    = 0x00000000,
WBSCL_STATUS_ACK_CLR                     = 0x00000001,
} WBSCL_STATUS_ACK_ENUM;

/*
 * WBSCL_STATUS_MASK_ENUM enum
 */

typedef enum WBSCL_STATUS_MASK_ENUM {
WBSCL_STATUS_MASK_DISABLE                = 0x00000000,
WBSCL_STATUS_MASK_ENABLE                 = 0x00000001,
} WBSCL_STATUS_MASK_ENUM;

/*
 * WBSCL_DATA_OVERFLOW_INT_TYPE_ENUM enum
 */

typedef enum WBSCL_DATA_OVERFLOW_INT_TYPE_ENUM {
WBSCL_DATA_OVERFLOW_INT_TYPE_REG         = 0x00000000,
WBSCL_DATA_OVERFLOW_INT_TYPE_HW          = 0x00000001,
} WBSCL_DATA_OVERFLOW_INT_TYPE_ENUM;

/*
 * WBSCL_HOST_CONFLICT_INT_TYPE_ENUM enum
 */

typedef enum WBSCL_HOST_CONFLICT_INT_TYPE_ENUM {
WBSCL_HOST_CONFLICT_INT_TYPE_REG         = 0x00000000,
WBSCL_HOST_CONFLICT_INT_TYPE_HW          = 0x00000001,
} WBSCL_HOST_CONFLICT_INT_TYPE_ENUM;

/*
 * WBSCL_TEST_CRC_EN_ENUM enum
 */

typedef enum WBSCL_TEST_CRC_EN_ENUM {
WBSCL_TEST_CRC_DISABLE                   = 0x00000000,
WBSCL_TEST_CRC_ENABLE                    = 0x00000001,
} WBSCL_TEST_CRC_EN_ENUM;

/*
 * WBSCL_TEST_CRC_CONT_EN_ENUM enum
 */

typedef enum WBSCL_TEST_CRC_CONT_EN_ENUM {
WBSCL_TEST_CRC_CONT_DISABLE              = 0x00000000,
WBSCL_TEST_CRC_CONT_ENABLE               = 0x00000001,
} WBSCL_TEST_CRC_CONT_EN_ENUM;

/*
 * WBSCL_TEST_CRC_MASK_ENUM enum
 */

typedef enum WBSCL_TEST_CRC_MASK_ENUM {
WBSCL_TEST_CRC_MASKED                    = 0x00000000,
WBSCL_TEST_CRC_UNMASKED                  = 0x00000001,
} WBSCL_TEST_CRC_MASK_ENUM;

/*
 * WBSCL_BACKPRESSURE_CNT_EN_ENUM enum
 */

typedef enum WBSCL_BACKPRESSURE_CNT_EN_ENUM {
WBSCL_BACKPRESSURE_CNT_DISABLE           = 0x00000000,
WBSCL_BACKPRESSURE_CNT_ENABLE            = 0x00000001,
} WBSCL_BACKPRESSURE_CNT_EN_ENUM;

/*
 * WBSCL_OUTSIDE_PIX_STRATEGY_ENUM enum
 */

typedef enum WBSCL_OUTSIDE_PIX_STRATEGY_ENUM {
WBSCL_OUTSIDE_PIX_STRATEGY_BLACK         = 0x00000000,
WBSCL_OUTSIDE_PIX_STRATEGY_EDGE          = 0x00000001,
} WBSCL_OUTSIDE_PIX_STRATEGY_ENUM;

/*******************************************************
 * DPCSRX Enums
 *******************************************************/

/*
 * DPCSRX_RX_CLOCK_CNTL_DPCS_SYMCLK_RX_SEL enum
 */

typedef enum DPCSRX_RX_CLOCK_CNTL_DPCS_SYMCLK_RX_SEL {
DPCSRX_BPHY_PCS_RX0_CLK                  = 0x00000000,
DPCSRX_BPHY_PCS_RX1_CLK                  = 0x00000001,
DPCSRX_BPHY_PCS_RX2_CLK                  = 0x00000002,
DPCSRX_BPHY_PCS_RX3_CLK                  = 0x00000003,
} DPCSRX_RX_CLOCK_CNTL_DPCS_SYMCLK_RX_SEL;

/*******************************************************
 * DPCSTX Enums
 *******************************************************/

/*
 * DPCSTX_DVI_LINK_MODE enum
 */

typedef enum DPCSTX_DVI_LINK_MODE {
DPCSTX_DVI_LINK_MODE_NORMAL              = 0x00000000,
DPCSTX_DVI_LINK_MODE_DUAL_LINK_MASTER    = 0x00000001,
DPCSTX_DVI_LINK_MODE_DUAL_LINK_SLAVER    = 0x00000002,
} DPCSTX_DVI_LINK_MODE;

/*******************************************************
 * RDPCSTX Enums
 *******************************************************/

/*
 * RDPCSTX_CNTL_RDPCS_CBUS_SOFT_RESET enum
 */

typedef enum RDPCSTX_CNTL_RDPCS_CBUS_SOFT_RESET {
RDPCS_CBUS_SOFT_RESET_DISABLE            = 0x00000000,
RDPCS_CBUS_SOFT_RESET_ENABLE             = 0x00000001,
} RDPCSTX_CNTL_RDPCS_CBUS_SOFT_RESET;

/*
 * RDPCSTX_CNTL_RDPCS_SRAM_SOFT_RESET enum
 */

typedef enum RDPCSTX_CNTL_RDPCS_SRAM_SOFT_RESET {
RDPCS_SRAM_SRAM_RESET_DISABLE            = 0x00000000,
} RDPCSTX_CNTL_RDPCS_SRAM_SOFT_RESET;

/*
 * RDPCSTX_CNTL_RDPCS_TX_FIFO_LANE_EN enum
 */

typedef enum RDPCSTX_CNTL_RDPCS_TX_FIFO_LANE_EN {
RDPCS_TX_FIFO_LANE_DISABLE               = 0x00000000,
RDPCS_TX_FIFO_LANE_ENABLE                = 0x00000001,
} RDPCSTX_CNTL_RDPCS_TX_FIFO_LANE_EN;

/*
 * RDPCSTX_CNTL_RDPCS_TX_FIFO_EN enum
 */

typedef enum RDPCSTX_CNTL_RDPCS_TX_FIFO_EN {
RDPCS_TX_FIFO_DISABLE                    = 0x00000000,
RDPCS_TX_FIFO_ENABLE                     = 0x00000001,
} RDPCSTX_CNTL_RDPCS_TX_FIFO_EN;

/*
 * RDPCSTX_CNTL_RDPCS_TX_SOFT_RESET enum
 */

typedef enum RDPCSTX_CNTL_RDPCS_TX_SOFT_RESET {
RDPCS_TX_SOFT_RESET_DISABLE              = 0x00000000,
RDPCS_TX_SOFT_RESET_ENABLE               = 0x00000001,
} RDPCSTX_CNTL_RDPCS_TX_SOFT_RESET;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_EXT_REFCLK_EN enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_EXT_REFCLK_EN {
RDPCS_EXT_REFCLK_DISABLE                 = 0x00000000,
RDPCS_EXT_REFCLK_ENABLE                  = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_EXT_REFCLK_EN;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_TX_EN enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_TX_EN {
RDPCS_EXT_REFCLK_EN_DISABLE              = 0x00000000,
RDPCS_EXT_REFCLK_EN_ENABLE               = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_TX_EN;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_GATE_DIS enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_GATE_DIS {
RDPCS_SYMCLK_DIV2_GATE_ENABLE            = 0x00000000,
RDPCS_SYMCLK_DIV2_GATE_DISABLE           = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_GATE_DIS;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_EN enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_EN {
RDPCS_SYMCLK_DIV2_DISABLE                = 0x00000000,
RDPCS_SYMCLK_DIV2_ENABLE                 = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_EN;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_CLOCK_ON enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_CLOCK_ON {
RDPCS_SYMCLK_DIV2_CLOCK_OFF              = 0x00000000,
RDPCS_SYMCLK_DIV2_CLOCK_ON               = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_SYMCLK_DIV2_CLOCK_ON;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_GATE_DIS enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_GATE_DIS {
RDPCS_SRAMCLK_GATE_ENABLE                = 0x00000000,
RDPCS_SRAMCLK_GATE_DISABLE               = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_GATE_DIS;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_EN enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_EN {
RDPCS_SRAMCLK_DISABLE                    = 0x00000000,
RDPCS_SRAMCLK_ENABLE                     = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_EN;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_BYPASS enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_BYPASS {
RDPCS_SRAMCLK_NOT_BYPASS                 = 0x00000000,
RDPCS_SRAMCLK_BYPASS                     = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_BYPASS;

/*
 * RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_CLOCK_ON enum
 */

typedef enum RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_CLOCK_ON {
RDPCS_SYMCLK_SRAMCLK_CLOCK_OFF           = 0x00000000,
RDPCS_SYMCLK_SRAMCLK_CLOCK_ON            = 0x00000001,
} RDPCSTX_CLOCK_CNTL_RDPCS_SRAMCLK_CLOCK_ON;

/*
 * RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE enum
 */

typedef enum RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE {
RDPCS_DPALT_DISABLE_TOGGLE_ENABLE        = 0x00000000,
RDPCS_DPALT_DISABLE_TOGGLE_DISABLE       = 0x00000001,
} RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE;

/*
 * RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE enum
 */

typedef enum RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE {
RDPCS_DPALT_4LANE_TOGGLE_2LANE           = 0x00000000,
RDPCS_DPALT_4LANE_TOGGLE_4LANE           = 0x00000001,
} RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE;

/*
 * RDPCSTX_INTERRUPT_CONTROL_RDPCS_REG_FIFO_ERROR_MASK enum
 */

typedef enum RDPCSTX_INTERRUPT_CONTROL_RDPCS_REG_FIFO_ERROR_MASK {
RDPCS_REG_FIFO_ERROR_MASK_DISABLE        = 0x00000000,
RDPCS_REG_FIFO_ERROR_MASK_ENABLE         = 0x00000001,
} RDPCSTX_INTERRUPT_CONTROL_RDPCS_REG_FIFO_ERROR_MASK;

/*
 * RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE_MASK enum
 */

typedef enum RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE_MASK {
RDPCS_DPALT_DISABLE_TOGGLE_MASK_DISABLE  = 0x00000000,
RDPCS_DPALT_DISABLE_TOGGLE_MASK_ENABLE   = 0x00000001,
} RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_DISABLE_TOGGLE_MASK;

/*
 * RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE_MASK enum
 */

typedef enum RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE_MASK {
RDPCS_DPALT_4LANE_TOGGLE_MASK_DISABLE    = 0x00000000,
RDPCS_DPALT_4LANE_TOGGLE_MASK_ENABLE     = 0x00000001,
} RDPCSTX_INTERRUPT_CONTROL_RDPCS_DPALT_4LANE_TOGGLE_MASK;

/*
 * RDPCSTX_INTERRUPT_CONTROL_RDPCS_TX_FIFO_ERROR_MASK enum
 */

typedef enum RDPCSTX_INTERRUPT_CONTROL_RDPCS_TX_FIFO_ERROR_MASK {
RDPCS_TX_FIFO_ERROR_MASK_DISABLE         = 0x00000000,
RDPCS_TX_FIFO_ERROR_MASK_ENABLE          = 0x00000001,
} RDPCSTX_INTERRUPT_CONTROL_RDPCS_TX_FIFO_ERROR_MASK;

/*
 * RDPCS_TX_SRAM_CNTL_RDPCS_MEM_PWR_FORCE enum
 */

typedef enum RDPCS_TX_SRAM_CNTL_RDPCS_MEM_PWR_FORCE {
RDPCS_MEM_PWR_NO_FORCE                   = 0x00000000,
RDPCS_MEM_PWR_LIGHT_SLEEP                = 0x00000001,
RDPCS_MEM_PWR_DEEP_SLEEP                 = 0x00000002,
RDPCS_MEM_PWR_SHUT_DOWN                  = 0x00000003,
} RDPCS_TX_SRAM_CNTL_RDPCS_MEM_PWR_FORCE;

/*
 * RDPCS_TX_SRAM_CNTL_RDPCS_MEM_PWR_PWR_STATE enum
 */

typedef enum RDPCS_TX_SRAM_CNTL_RDPCS_MEM_PWR_PWR_STATE {
RDPCS_MEM_PWR_PWR_STATE_ON               = 0x00000000,
RDPCS_MEM_PWR_PWR_STATE_LIGHT_SLEEP      = 0x00000001,
RDPCS_MEM_PWR_PWR_STATE_DEEP_SLEEP       = 0x00000002,
RDPCS_MEM_PWR_PWR_STATE_SHUT_DOWN        = 0x00000003,
} RDPCS_TX_SRAM_CNTL_RDPCS_MEM_PWR_PWR_STATE;

/*
 * RDPCSTX_MEM_POWER_CTRL2_RDPCS_MEM_POWER_CTRL_POFF enum
 */

typedef enum RDPCSTX_MEM_POWER_CTRL2_RDPCS_MEM_POWER_CTRL_POFF {
RDPCS_MEM_POWER_CTRL_POFF_FOR_NO_PERIPHERY  = 0x00000000,
RDPCS_MEM_POWER_CTRL_POFF_FOR_STANDARD   = 0x00000001,
RDPCS_MEM_POWER_CTRL_POFF_FOR_RM3        = 0x00000002,
RDPCS_MEM_POWER_CTRL_POFF_FOR_SD         = 0x00000003,
} RDPCSTX_MEM_POWER_CTRL2_RDPCS_MEM_POWER_CTRL_POFF;

/*
 * RDPCSTX_PHY_CNTL0_RDPCS_PHY_REF_RANGE enum
 */

typedef enum RDPCSTX_PHY_CNTL0_RDPCS_PHY_REF_RANGE {
RDPCS_PHY_REF_RANGE_0                    = 0x00000000,
RDPCS_PHY_REF_RANGE_1                    = 0x00000001,
RDPCS_PHY_REF_RANGE_2                    = 0x00000002,
RDPCS_PHY_REF_RANGE_3                    = 0x00000003,
RDPCS_PHY_REF_RANGE_4                    = 0x00000004,
RDPCS_PHY_REF_RANGE_5                    = 0x00000005,
RDPCS_PHY_REF_RANGE_6                    = 0x00000006,
RDPCS_PHY_REF_RANGE_7                    = 0x00000007,
} RDPCSTX_PHY_CNTL0_RDPCS_PHY_REF_RANGE;

/*
 * RDPCSTX_PHY_CNTL0_RDPCS_PHY_CR_PARA_SEL enum
 */

typedef enum RDPCSTX_PHY_CNTL0_RDPCS_PHY_CR_PARA_SEL {
RDPCS_PHY_CR_PARA_SEL_JTAG               = 0x00000000,
RDPCS_PHY_CR_PARA_SEL_CR                 = 0x00000001,
} RDPCSTX_PHY_CNTL0_RDPCS_PHY_CR_PARA_SEL;

/*
 * RDPCSTX_PHY_CNTL0_RDPCS_PHY_CR_MUX_SEL enum
 */

typedef enum RDPCSTX_PHY_CNTL0_RDPCS_PHY_CR_MUX_SEL {
RDPCS_PHY_CR_MUX_SEL_FOR_USB             = 0x00000000,
RDPCS_PHY_CR_MUX_SEL_FOR_DC              = 0x00000001,
} RDPCSTX_PHY_CNTL0_RDPCS_PHY_CR_MUX_SEL;

/*
 * RDPCSTX_PHY_CNTL0_RDPCS_SRAM_INIT_DONE enum
 */

typedef enum RDPCSTX_PHY_CNTL0_RDPCS_SRAM_INIT_DONE {
RDPCS_SRAM_INIT_NOT_DONE                 = 0x00000000,
RDPCS_SRAM_INIT_DONE                     = 0x00000001,
} RDPCSTX_PHY_CNTL0_RDPCS_SRAM_INIT_DONE;

/*
 * RDPCSTX_PHY_CNTL0_RDPCS_SRAM_EXT_LD_DONE enum
 */

typedef enum RDPCSTX_PHY_CNTL0_RDPCS_SRAM_EXT_LD_DONE {
RDPCS_SRAM_EXT_LD_NOT_DONE               = 0x00000000,
RDPCS_SRAM_EXT_LD_DONE                   = 0x00000001,
} RDPCSTX_PHY_CNTL0_RDPCS_SRAM_EXT_LD_DONE;

/*
 * RDPCSTX_PHY_CNTL4_RDPCS_PHY_DP_TX_TERM_CTRL enum
 */

typedef enum RDPCSTX_PHY_CNTL4_RDPCS_PHY_DP_TX_TERM_CTRL {
RDPCS_PHY_DP_TX_TERM_CTRL_54             = 0x00000000,
RDPCS_PHY_DP_TX_TERM_CTRL_52             = 0x00000001,
RDPCS_PHY_DP_TX_TERM_CTRL_50             = 0x00000002,
RDPCS_PHY_DP_TX_TERM_CTRL_48             = 0x00000003,
RDPCS_PHY_DP_TX_TERM_CTRL_46             = 0x00000004,
RDPCS_PHY_DP_TX_TERM_CTRL_44             = 0x00000005,
RDPCS_PHY_DP_TX_TERM_CTRL_42             = 0x00000006,
RDPCS_PHY_DP_TX_TERM_CTRL_40             = 0x00000007,
} RDPCSTX_PHY_CNTL4_RDPCS_PHY_DP_TX_TERM_CTRL;

/*
 * RDPCSTX_PHY_CNTL_RRDPCS_PHY_DP_TX_PSTATE enum
 */

typedef enum RDPCSTX_PHY_CNTL_RRDPCS_PHY_DP_TX_PSTATE {
RRDPCS_PHY_DP_TX_PSTATE_POWER_UP         = 0x00000000,
RRDPCS_PHY_DP_TX_PSTATE_HOLD             = 0x00000001,
RRDPCS_PHY_DP_TX_PSTATE_HOLD_OFF         = 0x00000002,
RRDPCS_PHY_DP_TX_PSTATE_POWER_DOWN       = 0x00000003,
} RDPCSTX_PHY_CNTL_RRDPCS_PHY_DP_TX_PSTATE;

/*
 * RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_RATE enum
 */

typedef enum RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_RATE {
RDPCS_PHY_DP_TX_RATE                     = 0x00000000,
RDPCS_PHY_DP_TX_RATE_DIV2                = 0x00000001,
RDPCS_PHY_DP_TX_RATE_DIV4                = 0x00000002,
} RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_RATE;

/*
 * RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_WIDTH enum
 */

typedef enum RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_WIDTH {
RDPCS_PHY_DP_TX_WIDTH_8                  = 0x00000000,
RDPCS_PHY_DP_TX_WIDTH_10                 = 0x00000001,
RDPCS_PHY_DP_TX_WIDTH_16                 = 0x00000002,
RDPCS_PHY_DP_TX_WIDTH_20                 = 0x00000003,
} RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_WIDTH;

/*
 * RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_DETRX_RESULT enum
 */

typedef enum RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_DETRX_RESULT {
RDPCS_PHY_DP_TX_DETRX_RESULT_NO_DETECT   = 0x00000000,
RDPCS_PHY_DP_TX_DETRX_RESULT_DETECT      = 0x00000001,
} RDPCSTX_PHY_CNTL_RDPCS_PHY_DP_TX_DETRX_RESULT;

/*
 * RDPCSTX_PHY_CNTL11_RDPCS_PHY_DP_REF_CLK_MPLLB_DIV enum
 */

typedef enum RDPCSTX_PHY_CNTL11_RDPCS_PHY_DP_REF_CLK_MPLLB_DIV {
RDPCS_PHY_DP_REF_CLK_MPLLB_DIV1          = 0x00000000,
RDPCS_PHY_DP_REF_CLK_MPLLB_DIV2          = 0x00000001,
RDPCS_PHY_DP_REF_CLK_MPLLB_DIV3          = 0x00000002,
RDPCS_PHY_DP_REF_CLK_MPLLB_DIV8          = 0x00000003,
RDPCS_PHY_DP_REF_CLK_MPLLB_DIV16         = 0x00000004,
} RDPCSTX_PHY_CNTL11_RDPCS_PHY_DP_REF_CLK_MPLLB_DIV;

/*
 * RDPCSTX_PHY_CNTL11_RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV enum
 */

typedef enum RDPCSTX_PHY_CNTL11_RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV {
RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV_0  = 0x00000000,
RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV_1  = 0x00000001,
RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV_2  = 0x00000002,
RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV_3  = 0x00000003,
} RDPCSTX_PHY_CNTL11_RDPCS_PHY_HDMI_MPLLB_HDMI_PIXEL_CLK_DIV;

/*
 * RDPCSTX_PHY_CNTL12_RDPCS_PHY_DP_MPLLB_TX_CLK_DIV enum
 */

typedef enum RDPCSTX_PHY_CNTL12_RDPCS_PHY_DP_MPLLB_TX_CLK_DIV {
RDPCS_PHY_DP_MPLLB_TX_CLK_DIV            = 0x00000000,
RDPCS_PHY_DP_MPLLB_TX_CLK_DIV2           = 0x00000001,
RDPCS_PHY_DP_MPLLB_TX_CLK_DIV4           = 0x00000002,
RDPCS_PHY_DP_MPLLB_TX_CLK_DIV8           = 0x00000003,
RDPCS_PHY_DP_MPLLB_TX_CLK_DIV3           = 0x00000004,
RDPCS_PHY_DP_MPLLB_TX_CLK_DIV5           = 0x00000005,
RDPCS_PHY_DP_MPLLB_TX_CLK_DIV6           = 0x00000006,
RDPCS_PHY_DP_MPLLB_TX_CLK_DIV10          = 0x00000007,
} RDPCSTX_PHY_CNTL12_RDPCS_PHY_DP_MPLLB_TX_CLK_DIV;

/*
 * RDPCS_TEST_CLK_SEL enum
 */

typedef enum RDPCS_TEST_CLK_SEL {
RDPCS_TEST_CLK_SEL_NONE                  = 0x00000000,
RDPCS_TEST_CLK_SEL_CFGCLK                = 0x00000001,
RDPCS_TEST_CLK_SEL_SYMCLK_DIV2_LDPCS     = 0x00000002,
RDPCS_TEST_CLK_SEL_SYMCLK_DIV2_RDPCS     = 0x00000003,
RDPCS_TEST_CLK_SEL_SYMCLK_DIV2_LDPCS_DIV4  = 0x00000004,
RDPCS_TEST_CLK_SEL_SYMCLK_DIV2_RDPCS_DIV4  = 0x00000005,
RDPCS_TEST_CLK_SEL_SRAMCLK               = 0x00000006,
RDPCS_TEST_CLK_SEL_EXT_CR_CLK            = 0x00000007,
RDPCS_TEST_CLK_SEL_DP_TX0_WORD_CLK       = 0x00000008,
RDPCS_TEST_CLK_SEL_DP_TX1_WORD_CLK       = 0x00000009,
RDPCS_TEST_CLK_SEL_DP_TX2_WORD_CLK       = 0x0000000a,
RDPCS_TEST_CLK_SEL_DP_TX3_WORD_CLK       = 0x0000000b,
RDPCS_TEST_CLK_SEL_DP_MPLLB_DIV_CLK      = 0x0000000c,
RDPCS_TEST_CLK_SEL_HDMI_MPLLB_HDMI_PIXEL_CLK  = 0x0000000d,
RDPCS_TEST_CLK_SEL_PHY_REF_DIG_CLK       = 0x0000000e,
RDPCS_TEST_CLK_SEL_REF_DIG_FR_clk        = 0x0000000f,
RDPCS_TEST_CLK_SEL_dtb_out0              = 0x00000010,
RDPCS_TEST_CLK_SEL_dtb_out1              = 0x00000011,
} RDPCS_TEST_CLK_SEL;

/*******************************************************
 * CB Enums
 *******************************************************/

/*
 * CBMode enum
 */

typedef enum CBMode {
CB_DISABLE                               = 0x00000000,
CB_NORMAL                                = 0x00000001,
CB_ELIMINATE_FAST_CLEAR                  = 0x00000002,
CB_RESOLVE                               = 0x00000003,
CB_DECOMPRESS                            = 0x00000004,
CB_FMASK_DECOMPRESS                      = 0x00000005,
CB_DCC_DECOMPRESS                        = 0x00000006,
CB_RESERVED                              = 0x00000007,
} CBMode;

/*
 * BlendOp enum
 */

typedef enum BlendOp {
BLEND_ZERO                               = 0x00000000,
BLEND_ONE                                = 0x00000001,
BLEND_SRC_COLOR                          = 0x00000002,
BLEND_ONE_MINUS_SRC_COLOR                = 0x00000003,
BLEND_SRC_ALPHA                          = 0x00000004,
BLEND_ONE_MINUS_SRC_ALPHA                = 0x00000005,
BLEND_DST_ALPHA                          = 0x00000006,
BLEND_ONE_MINUS_DST_ALPHA                = 0x00000007,
BLEND_DST_COLOR                          = 0x00000008,
BLEND_ONE_MINUS_DST_COLOR                = 0x00000009,
BLEND_SRC_ALPHA_SATURATE                 = 0x0000000a,
BLEND_BOTH_SRC_ALPHA                     = 0x0000000b,
BLEND_BOTH_INV_SRC_ALPHA                 = 0x0000000c,
BLEND_CONSTANT_COLOR                     = 0x0000000d,
BLEND_ONE_MINUS_CONSTANT_COLOR           = 0x0000000e,
BLEND_SRC1_COLOR                         = 0x0000000f,
BLEND_INV_SRC1_COLOR                     = 0x00000010,
BLEND_SRC1_ALPHA                         = 0x00000011,
BLEND_INV_SRC1_ALPHA                     = 0x00000012,
BLEND_CONSTANT_ALPHA                     = 0x00000013,
BLEND_ONE_MINUS_CONSTANT_ALPHA           = 0x00000014,
} BlendOp;

/*
 * CombFunc enum
 */

typedef enum CombFunc {
COMB_DST_PLUS_SRC                        = 0x00000000,
COMB_SRC_MINUS_DST                       = 0x00000001,
COMB_MIN_DST_SRC                         = 0x00000002,
COMB_MAX_DST_SRC                         = 0x00000003,
COMB_DST_MINUS_SRC                       = 0x00000004,
} CombFunc;

/*
 * BlendOpt enum
 */

typedef enum BlendOpt {
FORCE_OPT_AUTO                           = 0x00000000,
FORCE_OPT_DISABLE                        = 0x00000001,
FORCE_OPT_ENABLE_IF_SRC_A_0              = 0x00000002,
FORCE_OPT_ENABLE_IF_SRC_RGB_0            = 0x00000003,
FORCE_OPT_ENABLE_IF_SRC_ARGB_0           = 0x00000004,
FORCE_OPT_ENABLE_IF_SRC_A_1              = 0x00000005,
FORCE_OPT_ENABLE_IF_SRC_RGB_1            = 0x00000006,
FORCE_OPT_ENABLE_IF_SRC_ARGB_1           = 0x00000007,
} BlendOpt;

/*
 * CmaskCode enum
 */

typedef enum CmaskCode {
CMASK_CLR00_F0                           = 0x00000000,
CMASK_CLR00_F1                           = 0x00000001,
CMASK_CLR00_F2                           = 0x00000002,
CMASK_CLR00_FX                           = 0x00000003,
CMASK_CLR01_F0                           = 0x00000004,
CMASK_CLR01_F1                           = 0x00000005,
CMASK_CLR01_F2                           = 0x00000006,
CMASK_CLR01_FX                           = 0x00000007,
CMASK_CLR10_F0                           = 0x00000008,
CMASK_CLR10_F1                           = 0x00000009,
CMASK_CLR10_F2                           = 0x0000000a,
CMASK_CLR10_FX                           = 0x0000000b,
CMASK_CLR11_F0                           = 0x0000000c,
CMASK_CLR11_F1                           = 0x0000000d,
CMASK_CLR11_F2                           = 0x0000000e,
CMASK_CLR11_FX                           = 0x0000000f,
} CmaskCode;

/*
 * MemArbMode enum
 */

typedef enum MemArbMode {
MEM_ARB_MODE_FIXED                       = 0x00000000,
MEM_ARB_MODE_AGE                         = 0x00000001,
MEM_ARB_MODE_WEIGHT                      = 0x00000002,
MEM_ARB_MODE_BOTH                        = 0x00000003,
} MemArbMode;

/*
 * CBPerfOpFilterSel enum
 */

typedef enum CBPerfOpFilterSel {
CB_PERF_OP_FILTER_SEL_WRITE_ONLY         = 0x00000000,
CB_PERF_OP_FILTER_SEL_NEEDS_DESTINATION  = 0x00000001,
CB_PERF_OP_FILTER_SEL_RESOLVE            = 0x00000002,
CB_PERF_OP_FILTER_SEL_DECOMPRESS         = 0x00000003,
CB_PERF_OP_FILTER_SEL_FMASK_DECOMPRESS   = 0x00000004,
CB_PERF_OP_FILTER_SEL_ELIMINATE_FAST_CLEAR  = 0x00000005,
} CBPerfOpFilterSel;

/*
 * CBPerfClearFilterSel enum
 */

typedef enum CBPerfClearFilterSel {
CB_PERF_CLEAR_FILTER_SEL_NONCLEAR        = 0x00000000,
CB_PERF_CLEAR_FILTER_SEL_CLEAR           = 0x00000001,
} CBPerfClearFilterSel;

/*
 * CBPerfSel enum
 */

typedef enum CBPerfSel {
CB_PERF_SEL_NONE                         = 0x00000000,
CB_PERF_SEL_BUSY                         = 0x00000001,
CB_PERF_SEL_CORE_SCLK_VLD                = 0x00000002,
CB_PERF_SEL_REG_SCLK0_VLD                = 0x00000003,
CB_PERF_SEL_REG_SCLK1_VLD                = 0x00000004,
CB_PERF_SEL_DRAWN_QUAD                   = 0x00000005,
CB_PERF_SEL_DRAWN_PIXEL                  = 0x00000006,
CB_PERF_SEL_DRAWN_QUAD_FRAGMENT          = 0x00000007,
CB_PERF_SEL_DRAWN_TILE                   = 0x00000008,
CB_PERF_SEL_DB_CB_TILE_VALID_READY       = 0x00000009,
CB_PERF_SEL_DB_CB_TILE_VALID_READYB      = 0x0000000a,
CB_PERF_SEL_DB_CB_TILE_VALIDB_READY      = 0x0000000b,
CB_PERF_SEL_DB_CB_TILE_VALIDB_READYB     = 0x0000000c,
CB_PERF_SEL_CM_FC_TILE_VALID_READY       = 0x0000000d,
CB_PERF_SEL_CM_FC_TILE_VALID_READYB      = 0x0000000e,
CB_PERF_SEL_CM_FC_TILE_VALIDB_READY      = 0x0000000f,
CB_PERF_SEL_CM_FC_TILE_VALIDB_READYB     = 0x00000010,
CB_PERF_SEL_MERGE_TILE_ONLY_VALID_READY  = 0x00000011,
CB_PERF_SEL_MERGE_TILE_ONLY_VALID_READYB  = 0x00000012,
CB_PERF_SEL_DB_CB_LQUAD_VALID_READY      = 0x00000013,
CB_PERF_SEL_DB_CB_LQUAD_VALID_READYB     = 0x00000014,
CB_PERF_SEL_DB_CB_LQUAD_VALIDB_READY     = 0x00000015,
CB_PERF_SEL_DB_CB_LQUAD_VALIDB_READYB    = 0x00000016,
CB_PERF_SEL_LQUAD_NO_TILE                = 0x00000017,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_32_R  = 0x00000018,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_32_AR  = 0x00000019,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_32_GR  = 0x0000001a,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_32_ABGR  = 0x0000001b,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_FP16_ABGR  = 0x0000001c,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_SIGNED16_ABGR  = 0x0000001d,
CB_PERF_SEL_LQUAD_FORMAT_IS_EXPORT_UNSIGNED16_ABGR  = 0x0000001e,
CB_PERF_SEL_QUAD_KILLED_BY_EXTRA_PIXEL_EXPORT  = 0x0000001f,
CB_PERF_SEL_QUAD_KILLED_BY_COLOR_INVALID  = 0x00000020,
CB_PERF_SEL_QUAD_KILLED_BY_NULL_TARGET_SHADER_MASK  = 0x00000021,
CB_PERF_SEL_QUAD_KILLED_BY_NULL_SAMPLE_MASK  = 0x00000022,
CB_PERF_SEL_QUAD_KILLED_BY_DISCARD_PIXEL  = 0x00000023,
CB_PERF_SEL_FC_CLEAR_QUAD_VALID_READY    = 0x00000024,
CB_PERF_SEL_FC_CLEAR_QUAD_VALID_READYB   = 0x00000025,
CB_PERF_SEL_FC_CLEAR_QUAD_VALIDB_READY   = 0x00000026,
CB_PERF_SEL_FC_CLEAR_QUAD_VALIDB_READYB  = 0x00000027,
CB_PERF_SEL_FOP_IN_VALID_READY           = 0x00000028,
CB_PERF_SEL_FOP_IN_VALID_READYB          = 0x00000029,
CB_PERF_SEL_FOP_IN_VALIDB_READY          = 0x0000002a,
CB_PERF_SEL_FOP_IN_VALIDB_READYB         = 0x0000002b,
CB_PERF_SEL_FC_CC_QUADFRAG_VALID_READY   = 0x0000002c,
CB_PERF_SEL_FC_CC_QUADFRAG_VALID_READYB  = 0x0000002d,
CB_PERF_SEL_FC_CC_QUADFRAG_VALIDB_READY  = 0x0000002e,
CB_PERF_SEL_FC_CC_QUADFRAG_VALIDB_READYB  = 0x0000002f,
CB_PERF_SEL_CC_IB_SR_FRAG_VALID_READY    = 0x00000030,
CB_PERF_SEL_CC_IB_SR_FRAG_VALID_READYB   = 0x00000031,
CB_PERF_SEL_CC_IB_SR_FRAG_VALIDB_READY   = 0x00000032,
CB_PERF_SEL_CC_IB_SR_FRAG_VALIDB_READYB  = 0x00000033,
CB_PERF_SEL_CC_IB_TB_FRAG_VALID_READY    = 0x00000034,
CB_PERF_SEL_CC_IB_TB_FRAG_VALID_READYB   = 0x00000035,
CB_PERF_SEL_CC_IB_TB_FRAG_VALIDB_READY   = 0x00000036,
CB_PERF_SEL_CC_IB_TB_FRAG_VALIDB_READYB  = 0x00000037,
CB_PERF_SEL_CC_RB_BC_EVENFRAG_VALID_READY  = 0x00000038,
CB_PERF_SEL_CC_RB_BC_EVENFRAG_VALID_READYB  = 0x00000039,
CB_PERF_SEL_CC_RB_BC_EVENFRAG_VALIDB_READY  = 0x0000003a,
CB_PERF_SEL_CC_RB_BC_EVENFRAG_VALIDB_READYB  = 0x0000003b,
CB_PERF_SEL_CC_RB_BC_ODDFRAG_VALID_READY  = 0x0000003c,
CB_PERF_SEL_CC_RB_BC_ODDFRAG_VALID_READYB  = 0x0000003d,
CB_PERF_SEL_CC_RB_BC_ODDFRAG_VALIDB_READY  = 0x0000003e,
CB_PERF_SEL_CC_RB_BC_ODDFRAG_VALIDB_READYB  = 0x0000003f,
CB_PERF_SEL_CC_BC_CS_FRAG_VALID          = 0x00000040,
CB_PERF_SEL_CM_CACHE_HIT                 = 0x00000041,
CB_PERF_SEL_CM_CACHE_TAG_MISS            = 0x00000042,
CB_PERF_SEL_CM_CACHE_SECTOR_MISS         = 0x00000043,
CB_PERF_SEL_CM_CACHE_REEVICTION_STALL    = 0x00000044,
CB_PERF_SEL_CM_CACHE_EVICT_NONZERO_INFLIGHT_STALL  = 0x00000045,
CB_PERF_SEL_CM_CACHE_REPLACE_PENDING_EVICT_STALL  = 0x00000046,
CB_PERF_SEL_CM_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL  = 0x00000047,
CB_PERF_SEL_CM_CACHE_READ_OUTPUT_STALL   = 0x00000048,
CB_PERF_SEL_CM_CACHE_WRITE_OUTPUT_STALL  = 0x00000049,
CB_PERF_SEL_CM_CACHE_ACK_OUTPUT_STALL    = 0x0000004a,
CB_PERF_SEL_CM_CACHE_STALL               = 0x0000004b,
CB_PERF_SEL_CM_CACHE_FLUSH               = 0x0000004c,
CB_PERF_SEL_CM_CACHE_TAGS_FLUSHED        = 0x0000004d,
CB_PERF_SEL_CM_CACHE_SECTORS_FLUSHED     = 0x0000004e,
CB_PERF_SEL_CM_CACHE_DIRTY_SECTORS_FLUSHED  = 0x0000004f,
CB_PERF_SEL_FC_CACHE_HIT                 = 0x00000050,
CB_PERF_SEL_FC_CACHE_TAG_MISS            = 0x00000051,
CB_PERF_SEL_FC_CACHE_SECTOR_MISS         = 0x00000052,
CB_PERF_SEL_FC_CACHE_REEVICTION_STALL    = 0x00000053,
CB_PERF_SEL_FC_CACHE_EVICT_NONZERO_INFLIGHT_STALL  = 0x00000054,
CB_PERF_SEL_FC_CACHE_REPLACE_PENDING_EVICT_STALL  = 0x00000055,
CB_PERF_SEL_FC_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL  = 0x00000056,
CB_PERF_SEL_FC_CACHE_READ_OUTPUT_STALL   = 0x00000057,
CB_PERF_SEL_FC_CACHE_WRITE_OUTPUT_STALL  = 0x00000058,
CB_PERF_SEL_FC_CACHE_ACK_OUTPUT_STALL    = 0x00000059,
CB_PERF_SEL_FC_CACHE_STALL               = 0x0000005a,
CB_PERF_SEL_FC_CACHE_FLUSH               = 0x0000005b,
CB_PERF_SEL_FC_CACHE_TAGS_FLUSHED        = 0x0000005c,
CB_PERF_SEL_FC_CACHE_SECTORS_FLUSHED     = 0x0000005d,
CB_PERF_SEL_FC_CACHE_DIRTY_SECTORS_FLUSHED  = 0x0000005e,
CB_PERF_SEL_CC_CACHE_HIT                 = 0x0000005f,
CB_PERF_SEL_CC_CACHE_TAG_MISS            = 0x00000060,
CB_PERF_SEL_CC_CACHE_SECTOR_MISS         = 0x00000061,
CB_PERF_SEL_CC_CACHE_REEVICTION_STALL    = 0x00000062,
CB_PERF_SEL_CC_CACHE_EVICT_NONZERO_INFLIGHT_STALL  = 0x00000063,
CB_PERF_SEL_CC_CACHE_REPLACE_PENDING_EVICT_STALL  = 0x00000064,
CB_PERF_SEL_CC_CACHE_INFLIGHT_COUNTER_MAXIMUM_STALL  = 0x00000065,
CB_PERF_SEL_CC_CACHE_READ_OUTPUT_STALL   = 0x00000066,
CB_PERF_SEL_CC_CACHE_WRITE_OUTPUT_STALL  = 0x00000067,
CB_PERF_SEL_CC_CACHE_ACK_OUTPUT_STALL    = 0x00000068,
CB_PERF_SEL_CC_CACHE_STALL               = 0x00000069,
CB_PERF_SEL_CC_CACHE_FLUSH               = 0x0000006a,
CB_PERF_SEL_CC_CACHE_TAGS_FLUSHED        = 0x0000006b,
CB_PERF_SEL_CC_CACHE_SECTORS_FLUSHED     = 0x0000006c,
CB_PERF_SEL_CC_CACHE_DIRTY_SECTORS_FLUSHED  = 0x0000006d,
CB_PERF_SEL_CC_CACHE_WA_TO_RMW_CONVERSION  = 0x0000006e,
CB_PERF_SEL_CB_TAP_WRREQ_VALID_READY     = 0x0000006f,
CB_PERF_SEL_CB_TAP_WRREQ_VALID_READYB    = 0x00000070,
CB_PERF_SEL_CB_TAP_WRREQ_VALIDB_READY    = 0x00000071,
CB_PERF_SEL_CB_TAP_WRREQ_VALIDB_READYB   = 0x00000072,
CB_PERF_SEL_CM_MC_WRITE_REQUEST          = 0x00000073,
CB_PERF_SEL_FC_MC_WRITE_REQUEST          = 0x00000074,
CB_PERF_SEL_CC_MC_WRITE_REQUEST          = 0x00000075,
CB_PERF_SEL_CM_MC_WRITE_REQUESTS_IN_FLIGHT  = 0x00000076,
CB_PERF_SEL_FC_MC_WRITE_REQUESTS_IN_FLIGHT  = 0x00000077,
CB_PERF_SEL_CC_MC_WRITE_REQUESTS_IN_FLIGHT  = 0x00000078,
CB_PERF_SEL_CB_TAP_RDREQ_VALID_READY     = 0x00000079,
CB_PERF_SEL_CB_TAP_RDREQ_VALID_READYB    = 0x0000007a,
CB_PERF_SEL_CB_TAP_RDREQ_VALIDB_READY    = 0x0000007b,
CB_PERF_SEL_CB_TAP_RDREQ_VALIDB_READYB   = 0x0000007c,
CB_PERF_SEL_CM_MC_READ_REQUEST           = 0x0000007d,
CB_PERF_SEL_FC_MC_READ_REQUEST           = 0x0000007e,
CB_PERF_SEL_CC_MC_READ_REQUEST           = 0x0000007f,
CB_PERF_SEL_CM_MC_READ_REQUESTS_IN_FLIGHT  = 0x00000080,
CB_PERF_SEL_FC_MC_READ_REQUESTS_IN_FLIGHT  = 0x00000081,
CB_PERF_SEL_CC_MC_READ_REQUESTS_IN_FLIGHT  = 0x00000082,
CB_PERF_SEL_CM_TQ_FULL                   = 0x00000083,
CB_PERF_SEL_CM_TQ_FIFO_TILE_RESIDENCY_STALL  = 0x00000084,
CB_PERF_SEL_CM_TQ_FIFO_STUTTER_STALL     = 0x00000085,
CB_PERF_SEL_FC_QUAD_RDLAT_FIFO_FULL      = 0x00000086,
CB_PERF_SEL_FC_TILE_RDLAT_FIFO_FULL      = 0x00000087,
CB_PERF_SEL_FC_RDLAT_FIFO_QUAD_RESIDENCY_STALL  = 0x00000088,
CB_PERF_SEL_FC_TILE_STUTTER_STALL        = 0x00000089,
CB_PERF_SEL_FC_QUAD_STUTTER_STALL        = 0x0000008a,
CB_PERF_SEL_FC_KEYID_STUTTER_STALL       = 0x0000008b,
CB_PERF_SEL_FOP_FMASK_RAW_STALL          = 0x0000008c,
CB_PERF_SEL_FOP_FMASK_BYPASS_STALL       = 0x0000008d,
CB_PERF_SEL_CC_SF_FULL                   = 0x0000008e,
CB_PERF_SEL_CC_RB_FULL                   = 0x0000008f,
CB_PERF_SEL_CC_EVENFIFO_QUAD_RESIDENCY_STALL  = 0x00000090,
CB_PERF_SEL_CC_ODDFIFO_QUAD_RESIDENCY_STALL  = 0x00000091,
CB_PERF_SEL_CC_EVENFIFO_STUTTER_STALL    = 0x00000092,
CB_PERF_SEL_CC_ODDFIFO_STUTTER_STALL     = 0x00000093,
CB_PERF_SEL_BLENDER_RAW_HAZARD_STALL     = 0x00000094,
CB_PERF_SEL_EVENT                        = 0x00000095,
CB_PERF_SEL_EVENT_CACHE_FLUSH_TS         = 0x00000096,
CB_PERF_SEL_EVENT_CONTEXT_DONE           = 0x00000097,
CB_PERF_SEL_EVENT_CACHE_FLUSH            = 0x00000098,
CB_PERF_SEL_EVENT_CACHE_FLUSH_AND_INV_TS_EVENT  = 0x00000099,
CB_PERF_SEL_EVENT_CACHE_FLUSH_AND_INV_EVENT  = 0x0000009a,
CB_PERF_SEL_EVENT_FLUSH_AND_INV_CB_DATA_TS  = 0x0000009b,
CB_PERF_SEL_EVENT_FLUSH_AND_INV_CB_META  = 0x0000009c,
CB_PERF_SEL_CC_SURFACE_SYNC              = 0x0000009d,
CB_PERF_SEL_CMASK_READ_DATA_0xC          = 0x0000009e,
CB_PERF_SEL_CMASK_READ_DATA_0xD          = 0x0000009f,
CB_PERF_SEL_CMASK_READ_DATA_0xE          = 0x000000a0,
CB_PERF_SEL_CMASK_READ_DATA_0xF          = 0x000000a1,
CB_PERF_SEL_CMASK_WRITE_DATA_0xC         = 0x000000a2,
CB_PERF_SEL_CMASK_WRITE_DATA_0xD         = 0x000000a3,
CB_PERF_SEL_CMASK_WRITE_DATA_0xE         = 0x000000a4,
CB_PERF_SEL_CMASK_WRITE_DATA_0xF         = 0x000000a5,
CB_PERF_SEL_TWO_PROBE_QUAD_FRAGMENT      = 0x000000a6,
CB_PERF_SEL_EXPORT_32_ABGR_QUAD_FRAGMENT  = 0x000000a7,
CB_PERF_SEL_DUAL_SOURCE_COLOR_QUAD_FRAGMENT  = 0x000000a8,
CB_PERF_SEL_QUAD_HAS_1_FRAGMENT_BEFORE_UPDATE  = 0x000000a9,
CB_PERF_SEL_QUAD_HAS_2_FRAGMENTS_BEFORE_UPDATE  = 0x000000aa,
CB_PERF_SEL_QUAD_HAS_3_FRAGMENTS_BEFORE_UPDATE  = 0x000000ab,
CB_PERF_SEL_QUAD_HAS_4_FRAGMENTS_BEFORE_UPDATE  = 0x000000ac,
